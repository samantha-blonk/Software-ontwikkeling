
swont_ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e6c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004ff4  08004ff4  00014ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800507c  0800507c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800507c  0800507c  0001507c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005084  08005084  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005084  08005084  00015084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005088  08005088  00015088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800508c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013664  20000070  080050fc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200136d4  080050fc  000236d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012853  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000289b  00000000  00000000  000328f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d38  00000000  00000000  00035190  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c00  00000000  00000000  00035ec8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000234d7  00000000  00000000  00036ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c834  00000000  00000000  00059f9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cb2b9  00000000  00000000  000667d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00131a8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b48  00000000  00000000  00131b08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004fdc 	.word	0x08004fdc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08004fdc 	.word	0x08004fdc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80004ce:	2300      	movs	r3, #0
 80004d0:	607b      	str	r3, [r7, #4]
 80004d2:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <MX_DMA_Init+0x3c>)
 80004d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d6:	4a0b      	ldr	r2, [pc, #44]	; (8000504 <MX_DMA_Init+0x3c>)
 80004d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004dc:	6313      	str	r3, [r2, #48]	; 0x30
 80004de:	4b09      	ldr	r3, [pc, #36]	; (8000504 <MX_DMA_Init+0x3c>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004e6:	607b      	str	r3, [r7, #4]
 80004e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2100      	movs	r1, #0
 80004ee:	2044      	movs	r0, #68	; 0x44
 80004f0:	f001 f827 	bl	8001542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80004f4:	2044      	movs	r0, #68	; 0x44
 80004f6:	f001 f840 	bl	800157a <HAL_NVIC_EnableIRQ>

}
 80004fa:	bf00      	nop
 80004fc:	3708      	adds	r7, #8
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	40023800 	.word	0x40023800

08000508 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08a      	sub	sp, #40	; 0x28
 800050c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050e:	f107 0314 	add.w	r3, r7, #20
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800051e:	2300      	movs	r3, #0
 8000520:	613b      	str	r3, [r7, #16]
 8000522:	4b32      	ldr	r3, [pc, #200]	; (80005ec <MX_GPIO_Init+0xe4>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	4a31      	ldr	r2, [pc, #196]	; (80005ec <MX_GPIO_Init+0xe4>)
 8000528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800052c:	6313      	str	r3, [r2, #48]	; 0x30
 800052e:	4b2f      	ldr	r3, [pc, #188]	; (80005ec <MX_GPIO_Init+0xe4>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000536:	613b      	str	r3, [r7, #16]
 8000538:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800053a:	2300      	movs	r3, #0
 800053c:	60fb      	str	r3, [r7, #12]
 800053e:	4b2b      	ldr	r3, [pc, #172]	; (80005ec <MX_GPIO_Init+0xe4>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	4a2a      	ldr	r2, [pc, #168]	; (80005ec <MX_GPIO_Init+0xe4>)
 8000544:	f043 0301 	orr.w	r3, r3, #1
 8000548:	6313      	str	r3, [r2, #48]	; 0x30
 800054a:	4b28      	ldr	r3, [pc, #160]	; (80005ec <MX_GPIO_Init+0xe4>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	f003 0301 	and.w	r3, r3, #1
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000556:	2300      	movs	r3, #0
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	4b24      	ldr	r3, [pc, #144]	; (80005ec <MX_GPIO_Init+0xe4>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	4a23      	ldr	r2, [pc, #140]	; (80005ec <MX_GPIO_Init+0xe4>)
 8000560:	f043 0310 	orr.w	r3, r3, #16
 8000564:	6313      	str	r3, [r2, #48]	; 0x30
 8000566:	4b21      	ldr	r3, [pc, #132]	; (80005ec <MX_GPIO_Init+0xe4>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	f003 0310 	and.w	r3, r3, #16
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000572:	2300      	movs	r3, #0
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	4b1d      	ldr	r3, [pc, #116]	; (80005ec <MX_GPIO_Init+0xe4>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	4a1c      	ldr	r2, [pc, #112]	; (80005ec <MX_GPIO_Init+0xe4>)
 800057c:	f043 0302 	orr.w	r3, r3, #2
 8000580:	6313      	str	r3, [r2, #48]	; 0x30
 8000582:	4b1a      	ldr	r3, [pc, #104]	; (80005ec <MX_GPIO_Init+0xe4>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	f003 0302 	and.w	r3, r3, #2
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 800058e:	2200      	movs	r2, #0
 8000590:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000594:	4816      	ldr	r0, [pc, #88]	; (80005f0 <MX_GPIO_Init+0xe8>)
 8000596:	f001 fd35 	bl	8002004 <HAL_GPIO_WritePin>
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VGA_VSYNC_GPIO_Port, VGA_VSYNC_Pin, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005a0:	4814      	ldr	r0, [pc, #80]	; (80005f4 <MX_GPIO_Init+0xec>)
 80005a2:	f001 fd2f 	bl	8002004 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 80005a6:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80005aa:	617b      	str	r3, [r7, #20]
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ac:	2301      	movs	r3, #1
 80005ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b0:	2300      	movs	r3, #0
 80005b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005b4:	2303      	movs	r3, #3
 80005b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005b8:	f107 0314 	add.w	r3, r7, #20
 80005bc:	4619      	mov	r1, r3
 80005be:	480c      	ldr	r0, [pc, #48]	; (80005f0 <MX_GPIO_Init+0xe8>)
 80005c0:	f001 fb86 	bl	8001cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VGA_VSYNC_Pin;
 80005c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ca:	2301      	movs	r3, #1
 80005cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005d2:	2303      	movs	r3, #3
 80005d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VGA_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	4619      	mov	r1, r3
 80005dc:	4805      	ldr	r0, [pc, #20]	; (80005f4 <MX_GPIO_Init+0xec>)
 80005de:	f001 fb77 	bl	8001cd0 <HAL_GPIO_Init>

}
 80005e2:	bf00      	nop
 80005e4:	3728      	adds	r7, #40	; 0x28
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40021000 	.word	0x40021000
 80005f4:	40020400 	.word	0x40020400

080005f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b086      	sub	sp, #24
 80005fc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fe:	f000 fe53 	bl	80012a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000602:	f000 f869 	bl	80006d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000606:	f7ff ff7f 	bl	8000508 <MX_GPIO_Init>
  MX_DMA_Init();
 800060a:	f7ff ff5d 	bl	80004c8 <MX_DMA_Init>
  MX_TIM1_Init();
 800060e:	f000 fab7 	bl	8000b80 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000612:	f000 fb05 	bl	8000c20 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000616:	f000 fc1b 	bl	8000e50 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  UB_VGA_Screen_Init(); // Init VGA-Screen
 800061a:	f000 fcbd 	bl	8000f98 <UB_VGA_Screen_Init>

  UB_VGA_FillScreen(VGA_COL_WHITE);
 800061e:	20ff      	movs	r0, #255	; 0xff
 8000620:	f000 fd0c 	bl	800103c <UB_VGA_FillScreen>
  UB_VGA_SetPixel(10,10,10);
 8000624:	220a      	movs	r2, #10
 8000626:	210a      	movs	r1, #10
 8000628:	200a      	movs	r0, #10
 800062a:	f000 fd29 	bl	8001080 <UB_VGA_SetPixel>
  UB_VGA_SetPixel(0,0,0x00);
 800062e:	2200      	movs	r2, #0
 8000630:	2100      	movs	r1, #0
 8000632:	2000      	movs	r0, #0
 8000634:	f000 fd24 	bl	8001080 <UB_VGA_SetPixel>
  UB_VGA_SetPixel(319,0,0x00);
 8000638:	2200      	movs	r2, #0
 800063a:	2100      	movs	r1, #0
 800063c:	f240 103f 	movw	r0, #319	; 0x13f
 8000640:	f000 fd1e 	bl	8001080 <UB_VGA_SetPixel>

  UB_VGA_DrawRectangle(50, 50, 50, 150, VGA_COL_GREEN, 1, VGA_COL_RED, 3);
 8000644:	2303      	movs	r3, #3
 8000646:	9303      	str	r3, [sp, #12]
 8000648:	23e0      	movs	r3, #224	; 0xe0
 800064a:	9302      	str	r3, [sp, #8]
 800064c:	2301      	movs	r3, #1
 800064e:	9301      	str	r3, [sp, #4]
 8000650:	231c      	movs	r3, #28
 8000652:	9300      	str	r3, [sp, #0]
 8000654:	2396      	movs	r3, #150	; 0x96
 8000656:	2232      	movs	r2, #50	; 0x32
 8000658:	2132      	movs	r1, #50	; 0x32
 800065a:	2032      	movs	r0, #50	; 0x32
 800065c:	f000 fd38 	bl	80010d0 <UB_VGA_DrawRectangle>

  int i;

  for(i = 0; i < LINE_BUFLEN; i++)
 8000660:	2300      	movs	r3, #0
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	e008      	b.n	8000678 <main+0x80>
	  input.line_rx_buffer[i] = 0;
 8000666:	4a19      	ldr	r2, [pc, #100]	; (80006cc <main+0xd4>)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	4413      	add	r3, r2
 800066c:	3301      	adds	r3, #1
 800066e:	2200      	movs	r2, #0
 8000670:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < LINE_BUFLEN; i++)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	3301      	adds	r3, #1
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800067e:	dbf2      	blt.n	8000666 <main+0x6e>

  // Reset some stuff
  input.byte_buffer_rx[0] = 0;
 8000680:	4b12      	ldr	r3, [pc, #72]	; (80006cc <main+0xd4>)
 8000682:	2200      	movs	r2, #0
 8000684:	701a      	strb	r2, [r3, #0]
  input.char_counter = 0;
 8000686:	4b11      	ldr	r3, [pc, #68]	; (80006cc <main+0xd4>)
 8000688:	2200      	movs	r2, #0
 800068a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  input.command_execute_flag = FALSE;
 800068e:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <main+0xd4>)
 8000690:	2200      	movs	r2, #0
 8000692:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c

  // HAl wants a memory location to store the charachter it receives from the UART
  // We will pass it an array, but we will not use it. We declare our own variable in the interupt handler
  // See stm32f4xx_it.c
  HAL_UART_Receive_IT(&huart2, input.byte_buffer_rx, BYTE_BUFLEN);
 8000696:	2201      	movs	r2, #1
 8000698:	490c      	ldr	r1, [pc, #48]	; (80006cc <main+0xd4>)
 800069a:	480d      	ldr	r0, [pc, #52]	; (80006d0 <main+0xd8>)
 800069c:	f003 f9a8 	bl	80039f0 <HAL_UART_Receive_IT>

  // Test to see if the screen reacts to UART
  unsigned char colorTest = TRUE;
 80006a0:	23ff      	movs	r3, #255	; 0xff
 80006a2:	70fb      	strb	r3, [r7, #3]
  {
//	  UB_VGA_FillScreen(VGA_COL_WHITE);
//	  UB_VGA_SetPixel(100, 100, VGA_COL_RED);
//	  UB_VGA_SetPixel(200, 200, VGA_COL_RED);
//	  UB_VGA_SetLine(200, 200, 100, 100, VGA_COL_GREEN, 0);
	  if(input.command_execute_flag == TRUE)
 80006a4:	4b09      	ldr	r3, [pc, #36]	; (80006cc <main+0xd4>)
 80006a6:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 80006aa:	2bff      	cmp	r3, #255	; 0xff
 80006ac:	d1fa      	bne.n	80006a4 <main+0xac>
	  {
		  // Do some stuff
		  printf("yes\n");
 80006ae:	4809      	ldr	r0, [pc, #36]	; (80006d4 <main+0xdc>)
 80006b0:	f004 f888 	bl	80047c4 <puts>
		  colorTest = ~colorTest; // Toggle screen color
 80006b4:	78fb      	ldrb	r3, [r7, #3]
 80006b6:	43db      	mvns	r3, r3
 80006b8:	70fb      	strb	r3, [r7, #3]
		  UB_VGA_FillScreen(VGA_COL_RED);
 80006ba:	20e0      	movs	r0, #224	; 0xe0
 80006bc:	f000 fcbe 	bl	800103c <UB_VGA_FillScreen>

		  // When finished reset the flag
		  input.command_execute_flag = FALSE;
 80006c0:	4b02      	ldr	r3, [pc, #8]	; (80006cc <main+0xd4>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
	  if(input.command_execute_flag == TRUE)
 80006c8:	e7ec      	b.n	80006a4 <main+0xac>
 80006ca:	bf00      	nop
 80006cc:	20000098 	.word	0x20000098
 80006d0:	20000990 	.word	0x20000990
 80006d4:	08004ff4 	.word	0x08004ff4

080006d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b094      	sub	sp, #80	; 0x50
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 0320 	add.w	r3, r7, #32
 80006e2:	2230      	movs	r2, #48	; 0x30
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f004 f808 	bl	80046fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fc:	2300      	movs	r3, #0
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	4b28      	ldr	r3, [pc, #160]	; (80007a4 <SystemClock_Config+0xcc>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000704:	4a27      	ldr	r2, [pc, #156]	; (80007a4 <SystemClock_Config+0xcc>)
 8000706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070a:	6413      	str	r3, [r2, #64]	; 0x40
 800070c:	4b25      	ldr	r3, [pc, #148]	; (80007a4 <SystemClock_Config+0xcc>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000718:	2300      	movs	r3, #0
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	4b22      	ldr	r3, [pc, #136]	; (80007a8 <SystemClock_Config+0xd0>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a21      	ldr	r2, [pc, #132]	; (80007a8 <SystemClock_Config+0xd0>)
 8000722:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000726:	6013      	str	r3, [r2, #0]
 8000728:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <SystemClock_Config+0xd0>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000734:	2301      	movs	r3, #1
 8000736:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000738:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800073c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073e:	2302      	movs	r3, #2
 8000740:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000742:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000746:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000748:	2304      	movs	r3, #4
 800074a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800074c:	23a8      	movs	r3, #168	; 0xa8
 800074e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000750:	2302      	movs	r3, #2
 8000752:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000754:	2304      	movs	r3, #4
 8000756:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000758:	f107 0320 	add.w	r3, r7, #32
 800075c:	4618      	mov	r0, r3
 800075e:	f001 fc6b 	bl	8002038 <HAL_RCC_OscConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000768:	f000 f832 	bl	80007d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076c:	230f      	movs	r3, #15
 800076e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000770:	2302      	movs	r3, #2
 8000772:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000778:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800077c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800077e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000782:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	2105      	movs	r1, #5
 800078a:	4618      	mov	r0, r3
 800078c:	f001 fec4 	bl	8002518 <HAL_RCC_ClockConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000796:	f000 f81b 	bl	80007d0 <Error_Handler>
  }
}
 800079a:	bf00      	nop
 800079c:	3750      	adds	r7, #80	; 0x50
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40007000 	.word	0x40007000

080007ac <__io_putchar>:
	#define USART_PRINTF int fputc(int ch, FILE *f)		//With other compiler printf calls fputc()
#endif /* __GNUC__ */

//Retargets the C library printf function to the USART
USART_PRINTF
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);	//Write character to UART2
 80007b4:	1d39      	adds	r1, r7, #4
 80007b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ba:	2201      	movs	r2, #1
 80007bc:	4803      	ldr	r0, [pc, #12]	; (80007cc <__io_putchar+0x20>)
 80007be:	f003 f87e 	bl	80038be <HAL_UART_Transmit>
	return ch;												//Return the character
 80007c2:	687b      	ldr	r3, [r7, #4]
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000990 	.word	0x20000990

080007d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
	...

080007e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	4b10      	ldr	r3, [pc, #64]	; (800082c <HAL_MspInit+0x4c>)
 80007ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ee:	4a0f      	ldr	r2, [pc, #60]	; (800082c <HAL_MspInit+0x4c>)
 80007f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f4:	6453      	str	r3, [r2, #68]	; 0x44
 80007f6:	4b0d      	ldr	r3, [pc, #52]	; (800082c <HAL_MspInit+0x4c>)
 80007f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	603b      	str	r3, [r7, #0]
 8000806:	4b09      	ldr	r3, [pc, #36]	; (800082c <HAL_MspInit+0x4c>)
 8000808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080a:	4a08      	ldr	r2, [pc, #32]	; (800082c <HAL_MspInit+0x4c>)
 800080c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000810:	6413      	str	r3, [r2, #64]	; 0x40
 8000812:	4b06      	ldr	r3, [pc, #24]	; (800082c <HAL_MspInit+0x4c>)
 8000814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081e:	bf00      	nop
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	40023800 	.word	0x40023800

08000830 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr

0800083e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000842:	e7fe      	b.n	8000842 <HardFault_Handler+0x4>

08000844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000848:	e7fe      	b.n	8000848 <MemManage_Handler+0x4>

0800084a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800084e:	e7fe      	b.n	800084e <BusFault_Handler+0x4>

08000850 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000854:	e7fe      	b.n	8000854 <UsageFault_Handler+0x4>

08000856 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr

08000872 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000884:	f000 fd62 	bl	800134c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}

0800088c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000890:	4828      	ldr	r0, [pc, #160]	; (8000934 <TIM2_IRQHandler+0xa8>)
 8000892:	f002 f96f 	bl	8002b74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC3); // uncomment HAL_TIM_IRQHandler(&htim2); ^^
 8000896:	4b27      	ldr	r3, [pc, #156]	; (8000934 <TIM2_IRQHandler+0xa8>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	f06f 0208 	mvn.w	r2, #8
 800089e:	611a      	str	r2, [r3, #16]

  VGA.hsync_cnt++;
 80008a0:	4b25      	ldr	r3, [pc, #148]	; (8000938 <TIM2_IRQHandler+0xac>)
 80008a2:	881b      	ldrh	r3, [r3, #0]
 80008a4:	3301      	adds	r3, #1
 80008a6:	b29a      	uxth	r2, r3
 80008a8:	4b23      	ldr	r3, [pc, #140]	; (8000938 <TIM2_IRQHandler+0xac>)
 80008aa:	801a      	strh	r2, [r3, #0]
  if (VGA.hsync_cnt >= VGA_VSYNC_PERIODE)
 80008ac:	4b22      	ldr	r3, [pc, #136]	; (8000938 <TIM2_IRQHandler+0xac>)
 80008ae:	881b      	ldrh	r3, [r3, #0]
 80008b0:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 80008b4:	d905      	bls.n	80008c2 <TIM2_IRQHandler+0x36>
  {
    // -----------
    VGA.hsync_cnt = 0;
 80008b6:	4b20      	ldr	r3, [pc, #128]	; (8000938 <TIM2_IRQHandler+0xac>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr = (uint32_t)(&VGA_RAM1[0]);
 80008bc:	4a1f      	ldr	r2, [pc, #124]	; (800093c <TIM2_IRQHandler+0xb0>)
 80008be:	4b1e      	ldr	r3, [pc, #120]	; (8000938 <TIM2_IRQHandler+0xac>)
 80008c0:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  GPIOB->BSRR = (VGA.hsync_cnt < VGA_VSYNC_IMP) ? VGA_VSYNC_Pin << 16u: VGA_VSYNC_Pin;
 80008c2:	4b1d      	ldr	r3, [pc, #116]	; (8000938 <TIM2_IRQHandler+0xac>)
 80008c4:	881b      	ldrh	r3, [r3, #0]
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d802      	bhi.n	80008d0 <TIM2_IRQHandler+0x44>
 80008ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80008ce:	e001      	b.n	80008d4 <TIM2_IRQHandler+0x48>
 80008d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d4:	4a1a      	ldr	r2, [pc, #104]	; (8000940 <TIM2_IRQHandler+0xb4>)
 80008d6:	6193      	str	r3, [r2, #24]

  // Test for DMA start
  if((VGA.hsync_cnt >= VGA_VSYNC_BILD_START) && (VGA.hsync_cnt <= VGA_VSYNC_BILD_STOP))
 80008d8:	4b17      	ldr	r3, [pc, #92]	; (8000938 <TIM2_IRQHandler+0xac>)
 80008da:	881b      	ldrh	r3, [r3, #0]
 80008dc:	2b23      	cmp	r3, #35	; 0x23
 80008de:	d927      	bls.n	8000930 <TIM2_IRQHandler+0xa4>
 80008e0:	4b15      	ldr	r3, [pc, #84]	; (8000938 <TIM2_IRQHandler+0xac>)
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	f240 2202 	movw	r2, #514	; 0x202
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d821      	bhi.n	8000930 <TIM2_IRQHandler+0xa4>
  {
    // after FP start => DMA Transfer

    // DMA2 init
	  DMA2_Stream5->CR = VGA.dma2_cr_reg;
 80008ec:	4a15      	ldr	r2, [pc, #84]	; (8000944 <TIM2_IRQHandler+0xb8>)
 80008ee:	4b12      	ldr	r3, [pc, #72]	; (8000938 <TIM2_IRQHandler+0xac>)
 80008f0:	689b      	ldr	r3, [r3, #8]
 80008f2:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR = VGA.start_adr;
 80008f4:	4a13      	ldr	r2, [pc, #76]	; (8000944 <TIM2_IRQHandler+0xb8>)
 80008f6:	4b10      	ldr	r3, [pc, #64]	; (8000938 <TIM2_IRQHandler+0xac>)
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1 |= TIM_CR1_CEN; // __HAL_TIM_ENABLE(&htim1); // too slow?
 80008fc:	4b12      	ldr	r3, [pc, #72]	; (8000948 <TIM2_IRQHandler+0xbc>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a11      	ldr	r2, [pc, #68]	; (8000948 <TIM2_IRQHandler+0xbc>)
 8000902:	f043 0301 	orr.w	r3, r3, #1
 8000906:	6013      	str	r3, [r2, #0]
    // DMA2 enable
    __HAL_DMA_ENABLE(&hdma_tim1_up);
 8000908:	4b10      	ldr	r3, [pc, #64]	; (800094c <TIM2_IRQHandler+0xc0>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	4b0f      	ldr	r3, [pc, #60]	; (800094c <TIM2_IRQHandler+0xc0>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f042 0201 	orr.w	r2, r2, #1
 8000916:	601a      	str	r2, [r3, #0]
    // Test Adrespointer for high
    if(VGA.hsync_cnt & 0x01)
 8000918:	4b07      	ldr	r3, [pc, #28]	; (8000938 <TIM2_IRQHandler+0xac>)
 800091a:	881b      	ldrh	r3, [r3, #0]
 800091c:	f003 0301 	and.w	r3, r3, #1
 8000920:	2b00      	cmp	r3, #0
 8000922:	d005      	beq.n	8000930 <TIM2_IRQHandler+0xa4>
      VGA.start_adr += (VGA_DISPLAY_X + 1); // inc after Hsync
 8000924:	4b04      	ldr	r3, [pc, #16]	; (8000938 <TIM2_IRQHandler+0xac>)
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	f203 1341 	addw	r3, r3, #321	; 0x141
 800092c:	4a02      	ldr	r2, [pc, #8]	; (8000938 <TIM2_IRQHandler+0xac>)
 800092e:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20000950 	.word	0x20000950
 8000938:	200009d0 	.word	0x200009d0
 800093c:	200009dc 	.word	0x200009dc
 8000940:	40020400 	.word	0x40020400
 8000944:	40026488 	.word	0x40026488
 8000948:	40010000 	.word	0x40010000
 800094c:	200008f0 	.word	0x200008f0

08000950 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	// Store the byte we received on the UART
	char uart_char = USART2->DR;
 8000956:	4b1a      	ldr	r3, [pc, #104]	; (80009c0 <USART2_IRQHandler+0x70>)
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	71fb      	strb	r3, [r7, #7]

	//Ignore the '\n' character
	if(uart_char != LINE_FEED)
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	2b0a      	cmp	r3, #10
 8000960:	d026      	beq.n	80009b0 <USART2_IRQHandler+0x60>
	{
		//Check for CR or a dot
		// There was a small bug in the terminal program.
		// By terminating your message with a dot you can ignore the CR (Enter) character
		if((uart_char == CARRIAGE_RETURN) || (uart_char == '.'))
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	2b0d      	cmp	r3, #13
 8000966:	d002      	beq.n	800096e <USART2_IRQHandler+0x1e>
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	2b2e      	cmp	r3, #46	; 0x2e
 800096c:	d10e      	bne.n	800098c <USART2_IRQHandler+0x3c>
		{
			input.command_execute_flag = TRUE;
 800096e:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <USART2_IRQHandler+0x74>)
 8000970:	22ff      	movs	r2, #255	; 0xff
 8000972:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			// Store the message length for processing
			input.msglen = input.char_counter;
 8000976:	4b13      	ldr	r3, [pc, #76]	; (80009c4 <USART2_IRQHandler+0x74>)
 8000978:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800097c:	4a11      	ldr	r2, [pc, #68]	; (80009c4 <USART2_IRQHandler+0x74>)
 800097e:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			// Reset the counter for the next line
			input.char_counter = 0;
 8000982:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <USART2_IRQHandler+0x74>)
 8000984:	2200      	movs	r2, #0
 8000986:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800098a:	e011      	b.n	80009b0 <USART2_IRQHandler+0x60>
			//Gently exit interrupt
		}
		else
		{
			input.command_execute_flag = FALSE;
 800098c:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <USART2_IRQHandler+0x74>)
 800098e:	2200      	movs	r2, #0
 8000990:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			input.line_rx_buffer[input.char_counter] = uart_char;
 8000994:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <USART2_IRQHandler+0x74>)
 8000996:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800099a:	4a0a      	ldr	r2, [pc, #40]	; (80009c4 <USART2_IRQHandler+0x74>)
 800099c:	4413      	add	r3, r2
 800099e:	79fa      	ldrb	r2, [r7, #7]
 80009a0:	705a      	strb	r2, [r3, #1]
			input.char_counter++;
 80009a2:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <USART2_IRQHandler+0x74>)
 80009a4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80009a8:	3301      	adds	r3, #1
 80009aa:	4a06      	ldr	r2, [pc, #24]	; (80009c4 <USART2_IRQHandler+0x74>)
 80009ac:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
		}
	}

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009b0:	4805      	ldr	r0, [pc, #20]	; (80009c8 <USART2_IRQHandler+0x78>)
 80009b2:	f003 f873 	bl	8003a9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40004400 	.word	0x40004400
 80009c4:	20000098 	.word	0x20000098
 80009c8:	20000990 	.word	0x20000990

080009cc <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

    // Timer1 stop
    __HAL_TIM_DISABLE(&htim1);
 80009d0:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <DMA2_Stream5_IRQHandler+0x48>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	6a1a      	ldr	r2, [r3, #32]
 80009d6:	f241 1311 	movw	r3, #4369	; 0x1111
 80009da:	4013      	ands	r3, r2
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d10f      	bne.n	8000a00 <DMA2_Stream5_IRQHandler+0x34>
 80009e0:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <DMA2_Stream5_IRQHandler+0x48>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	6a1a      	ldr	r2, [r3, #32]
 80009e6:	f240 4344 	movw	r3, #1092	; 0x444
 80009ea:	4013      	ands	r3, r2
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d107      	bne.n	8000a00 <DMA2_Stream5_IRQHandler+0x34>
 80009f0:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <DMA2_Stream5_IRQHandler+0x48>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	4b07      	ldr	r3, [pc, #28]	; (8000a14 <DMA2_Stream5_IRQHandler+0x48>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f022 0201 	bic.w	r2, r2, #1
 80009fe:	601a      	str	r2, [r3, #0]
    // DMA2 disable
    // __HAL_DMA_DISABLE(&hdma_tim1_up); // not needed?
    // switch on black
    GPIOE->BSRR = VGA_GPIO_HINIBBLE << 16u;
 8000a00:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <DMA2_Stream5_IRQHandler+0x4c>)
 8000a02:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000a06:	619a      	str	r2, [r3, #24]

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8000a08:	4804      	ldr	r0, [pc, #16]	; (8000a1c <DMA2_Stream5_IRQHandler+0x50>)
 8000a0a:	f000 fef9 	bl	8001800 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	200008b0 	.word	0x200008b0
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	200008f0 	.word	0x200008f0

08000a20 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	60f8      	str	r0, [r7, #12]
 8000a28:	60b9      	str	r1, [r7, #8]
 8000a2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]
 8000a30:	e00a      	b.n	8000a48 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a32:	f3af 8000 	nop.w
 8000a36:	4601      	mov	r1, r0
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	1c5a      	adds	r2, r3, #1
 8000a3c:	60ba      	str	r2, [r7, #8]
 8000a3e:	b2ca      	uxtb	r2, r1
 8000a40:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	3301      	adds	r3, #1
 8000a46:	617b      	str	r3, [r7, #20]
 8000a48:	697a      	ldr	r2, [r7, #20]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	dbf0      	blt.n	8000a32 <_read+0x12>
	}

return len;
 8000a50:	687b      	ldr	r3, [r7, #4]
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3718      	adds	r7, #24
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b086      	sub	sp, #24
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	60f8      	str	r0, [r7, #12]
 8000a62:	60b9      	str	r1, [r7, #8]
 8000a64:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a66:	2300      	movs	r3, #0
 8000a68:	617b      	str	r3, [r7, #20]
 8000a6a:	e009      	b.n	8000a80 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	1c5a      	adds	r2, r3, #1
 8000a70:	60ba      	str	r2, [r7, #8]
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff fe99 	bl	80007ac <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	617b      	str	r3, [r7, #20]
 8000a80:	697a      	ldr	r2, [r7, #20]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	dbf1      	blt.n	8000a6c <_write+0x12>
	}
	return len;
 8000a88:	687b      	ldr	r3, [r7, #4]
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3718      	adds	r7, #24
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <_close>:

int _close(int file)
{
 8000a92:	b480      	push	{r7}
 8000a94:	b083      	sub	sp, #12
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
	return -1;
 8000a9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	b083      	sub	sp, #12
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
 8000ab2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aba:	605a      	str	r2, [r3, #4]
	return 0;
 8000abc:	2300      	movs	r3, #0
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr

08000aca <_isatty>:

int _isatty(int file)
{
 8000aca:	b480      	push	{r7}
 8000acc:	b083      	sub	sp, #12
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6078      	str	r0, [r7, #4]
	return 1;
 8000ad2:	2301      	movs	r3, #1
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	60f8      	str	r0, [r7, #12]
 8000ae8:	60b9      	str	r1, [r7, #8]
 8000aea:	607a      	str	r2, [r7, #4]
	return 0;
 8000aec:	2300      	movs	r3, #0
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3714      	adds	r7, #20
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
	...

08000afc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000b04:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <_sbrk+0x50>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d102      	bne.n	8000b12 <_sbrk+0x16>
		heap_end = &end;
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <_sbrk+0x50>)
 8000b0e:	4a10      	ldr	r2, [pc, #64]	; (8000b50 <_sbrk+0x54>)
 8000b10:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <_sbrk+0x50>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <_sbrk+0x50>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4413      	add	r3, r2
 8000b20:	466a      	mov	r2, sp
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d907      	bls.n	8000b36 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000b26:	f003 fdbf 	bl	80046a8 <__errno>
 8000b2a:	4602      	mov	r2, r0
 8000b2c:	230c      	movs	r3, #12
 8000b2e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000b30:	f04f 33ff 	mov.w	r3, #4294967295
 8000b34:	e006      	b.n	8000b44 <_sbrk+0x48>
	}

	heap_end += incr;
 8000b36:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <_sbrk+0x50>)
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	4a03      	ldr	r2, [pc, #12]	; (8000b4c <_sbrk+0x50>)
 8000b40:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000b42:	68fb      	ldr	r3, [r7, #12]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3710      	adds	r7, #16
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	2000008c 	.word	0x2000008c
 8000b50:	200136d8 	.word	0x200136d8

08000b54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b58:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <SystemInit+0x28>)
 8000b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b5e:	4a07      	ldr	r2, [pc, #28]	; (8000b7c <SystemInit+0x28>)
 8000b60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b68:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <SystemInit+0x28>)
 8000b6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b6e:	609a      	str	r2, [r3, #8]
#endif
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim1_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b86:	f107 0308 	add.w	r3, r7, #8
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	609a      	str	r2, [r3, #8]
 8000b92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b94:	463b      	mov	r3, r7
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8000b9c:	4b1e      	ldr	r3, [pc, #120]	; (8000c18 <MX_TIM1_Init+0x98>)
 8000b9e:	4a1f      	ldr	r2, [pc, #124]	; (8000c1c <MX_TIM1_Init+0x9c>)
 8000ba0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = VGA_TIM1_PRESCALE;
 8000ba2:	4b1d      	ldr	r3, [pc, #116]	; (8000c18 <MX_TIM1_Init+0x98>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba8:	4b1b      	ldr	r3, [pc, #108]	; (8000c18 <MX_TIM1_Init+0x98>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = VGA_TIM1_PERIODE;
 8000bae:	4b1a      	ldr	r3, [pc, #104]	; (8000c18 <MX_TIM1_Init+0x98>)
 8000bb0:	220b      	movs	r2, #11
 8000bb2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bb4:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <MX_TIM1_Init+0x98>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bba:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <MX_TIM1_Init+0x98>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc0:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <MX_TIM1_Init+0x98>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bc6:	4814      	ldr	r0, [pc, #80]	; (8000c18 <MX_TIM1_Init+0x98>)
 8000bc8:	f001 fe98 	bl	80028fc <HAL_TIM_Base_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8000bd2:	f7ff fdfd 	bl	80007d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bda:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000bdc:	f107 0308 	add.w	r3, r7, #8
 8000be0:	4619      	mov	r1, r3
 8000be2:	480d      	ldr	r0, [pc, #52]	; (8000c18 <MX_TIM1_Init+0x98>)
 8000be4:	f002 f994 	bl	8002f10 <HAL_TIM_ConfigClockSource>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8000bee:	f7ff fdef 	bl	80007d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bfa:	463b      	mov	r3, r7
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4806      	ldr	r0, [pc, #24]	; (8000c18 <MX_TIM1_Init+0x98>)
 8000c00:	f002 fd80 	bl	8003704 <HAL_TIMEx_MasterConfigSynchronization>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000c0a:	f7ff fde1 	bl	80007d0 <Error_Handler>
  }

}
 8000c0e:	bf00      	nop
 8000c10:	3718      	adds	r7, #24
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	200008b0 	.word	0x200008b0
 8000c1c:	40010000 	.word	0x40010000

08000c20 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08a      	sub	sp, #40	; 0x28
 8000c24:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c26:	f107 0320 	add.w	r3, r7, #32
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	60da      	str	r2, [r3, #12]
 8000c3c:	611a      	str	r2, [r3, #16]
 8000c3e:	615a      	str	r2, [r3, #20]
 8000c40:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000c42:	4b2a      	ldr	r3, [pc, #168]	; (8000cec <MX_TIM2_Init+0xcc>)
 8000c44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c48:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 8000c4a:	4b28      	ldr	r3, [pc, #160]	; (8000cec <MX_TIM2_Init+0xcc>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c50:	4b26      	ldr	r3, [pc, #152]	; (8000cec <MX_TIM2_Init+0xcc>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = VGA_TIM2_HSYNC_PERIODE;
 8000c56:	4b25      	ldr	r3, [pc, #148]	; (8000cec <MX_TIM2_Init+0xcc>)
 8000c58:	f640 226b 	movw	r2, #2667	; 0xa6b
 8000c5c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c5e:	4b23      	ldr	r3, [pc, #140]	; (8000cec <MX_TIM2_Init+0xcc>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c64:	4b21      	ldr	r3, [pc, #132]	; (8000cec <MX_TIM2_Init+0xcc>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c6a:	4820      	ldr	r0, [pc, #128]	; (8000cec <MX_TIM2_Init+0xcc>)
 8000c6c:	f001 fe95 	bl	800299a <HAL_TIM_PWM_Init>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000c76:	f7ff fdab 	bl	80007d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c82:	f107 0320 	add.w	r3, r7, #32
 8000c86:	4619      	mov	r1, r3
 8000c88:	4818      	ldr	r0, [pc, #96]	; (8000cec <MX_TIM2_Init+0xcc>)
 8000c8a:	f002 fd3b 	bl	8003704 <HAL_TIMEx_MasterConfigSynchronization>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000c94:	f7ff fd9c 	bl	80007d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c98:	2360      	movs	r3, #96	; 0x60
 8000c9a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = VGA_TIM2_HTRIGGER_START - VGA_TIM2_DMA_DELAY;
 8000c9c:	f240 13bb 	movw	r3, #443	; 0x1bb
 8000ca0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000caa:	1d3b      	adds	r3, r7, #4
 8000cac:	2208      	movs	r2, #8
 8000cae:	4619      	mov	r1, r3
 8000cb0:	480e      	ldr	r0, [pc, #56]	; (8000cec <MX_TIM2_Init+0xcc>)
 8000cb2:	f002 f867 	bl	8002d84 <HAL_TIM_PWM_ConfigChannel>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000cbc:	f7ff fd88 	bl	80007d0 <Error_Handler>
  }
  sConfigOC.Pulse = VGA_TIM2_HSYNC_IMP;
 8000cc0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000cc4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	220c      	movs	r2, #12
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4807      	ldr	r0, [pc, #28]	; (8000cec <MX_TIM2_Init+0xcc>)
 8000cce:	f002 f859 	bl	8002d84 <HAL_TIM_PWM_ConfigChannel>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8000cd8:	f7ff fd7a 	bl	80007d0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000cdc:	4803      	ldr	r0, [pc, #12]	; (8000cec <MX_TIM2_Init+0xcc>)
 8000cde:	f000 f87f 	bl	8000de0 <HAL_TIM_MspPostInit>

}
 8000ce2:	bf00      	nop
 8000ce4:	3728      	adds	r7, #40	; 0x28
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000950 	.word	0x20000950

08000cf0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a21      	ldr	r2, [pc, #132]	; (8000d84 <HAL_TIM_Base_MspInit+0x94>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d13c      	bne.n	8000d7c <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	4b20      	ldr	r3, [pc, #128]	; (8000d88 <HAL_TIM_Base_MspInit+0x98>)
 8000d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0a:	4a1f      	ldr	r2, [pc, #124]	; (8000d88 <HAL_TIM_Base_MspInit+0x98>)
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	6453      	str	r3, [r2, #68]	; 0x44
 8000d12:	4b1d      	ldr	r3, [pc, #116]	; (8000d88 <HAL_TIM_Base_MspInit+0x98>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 8000d1e:	4b1b      	ldr	r3, [pc, #108]	; (8000d8c <HAL_TIM_Base_MspInit+0x9c>)
 8000d20:	4a1b      	ldr	r2, [pc, #108]	; (8000d90 <HAL_TIM_Base_MspInit+0xa0>)
 8000d22:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8000d24:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <HAL_TIM_Base_MspInit+0x9c>)
 8000d26:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000d2a:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d2c:	4b17      	ldr	r3, [pc, #92]	; (8000d8c <HAL_TIM_Base_MspInit+0x9c>)
 8000d2e:	2240      	movs	r2, #64	; 0x40
 8000d30:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d32:	4b16      	ldr	r3, [pc, #88]	; (8000d8c <HAL_TIM_Base_MspInit+0x9c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8000d38:	4b14      	ldr	r3, [pc, #80]	; (8000d8c <HAL_TIM_Base_MspInit+0x9c>)
 8000d3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d3e:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d40:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <HAL_TIM_Base_MspInit+0x9c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d46:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <HAL_TIM_Base_MspInit+0x9c>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <HAL_TIM_Base_MspInit+0x9c>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000d52:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <HAL_TIM_Base_MspInit+0x9c>)
 8000d54:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d58:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <HAL_TIM_Base_MspInit+0x9c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8000d60:	480a      	ldr	r0, [pc, #40]	; (8000d8c <HAL_TIM_Base_MspInit+0x9c>)
 8000d62:	f000 fc25 	bl	80015b0 <HAL_DMA_Init>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <HAL_TIM_Base_MspInit+0x80>
    {
      Error_Handler();
 8000d6c:	f7ff fd30 	bl	80007d0 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4a06      	ldr	r2, [pc, #24]	; (8000d8c <HAL_TIM_Base_MspInit+0x9c>)
 8000d74:	621a      	str	r2, [r3, #32]
 8000d76:	4a05      	ldr	r2, [pc, #20]	; (8000d8c <HAL_TIM_Base_MspInit+0x9c>)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000d7c:	bf00      	nop
 8000d7e:	3710      	adds	r7, #16
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40010000 	.word	0x40010000
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	200008f0 	.word	0x200008f0
 8000d90:	40026488 	.word	0x40026488

08000d94 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000da4:	d115      	bne.n	8000dd2 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <HAL_TIM_PWM_MspInit+0x48>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	4a0b      	ldr	r2, [pc, #44]	; (8000ddc <HAL_TIM_PWM_MspInit+0x48>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	6413      	str	r3, [r2, #64]	; 0x40
 8000db6:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <HAL_TIM_PWM_MspInit+0x48>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	201c      	movs	r0, #28
 8000dc8:	f000 fbbb 	bl	8001542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000dcc:	201c      	movs	r0, #28
 8000dce:	f000 fbd4 	bl	800157a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000dd2:	bf00      	nop
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40023800 	.word	0x40023800

08000de0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b088      	sub	sp, #32
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 030c 	add.w	r3, r7, #12
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e00:	d11e      	bne.n	8000e40 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	4b10      	ldr	r3, [pc, #64]	; (8000e48 <HAL_TIM_MspPostInit+0x68>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	4a0f      	ldr	r2, [pc, #60]	; (8000e48 <HAL_TIM_MspPostInit+0x68>)
 8000e0c:	f043 0302 	orr.w	r3, r3, #2
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
 8000e12:	4b0d      	ldr	r3, [pc, #52]	; (8000e48 <HAL_TIM_MspPostInit+0x68>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f003 0302 	and.w	r3, r3, #2
 8000e1a:	60bb      	str	r3, [r7, #8]
 8000e1c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = VGA_HSYNC_Pin;
 8000e1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e22:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e24:	2302      	movs	r3, #2
 8000e26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e30:	2301      	movs	r3, #1
 8000e32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VGA_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8000e34:	f107 030c 	add.w	r3, r7, #12
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4804      	ldr	r0, [pc, #16]	; (8000e4c <HAL_TIM_MspPostInit+0x6c>)
 8000e3c:	f000 ff48 	bl	8001cd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000e40:	bf00      	nop
 8000e42:	3720      	adds	r7, #32
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	40020400 	.word	0x40020400

08000e50 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000e54:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <MX_USART2_UART_Init+0x4c>)
 8000e56:	4a12      	ldr	r2, [pc, #72]	; (8000ea0 <MX_USART2_UART_Init+0x50>)
 8000e58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e5a:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <MX_USART2_UART_Init+0x4c>)
 8000e5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e62:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <MX_USART2_UART_Init+0x4c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e68:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <MX_USART2_UART_Init+0x4c>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <MX_USART2_UART_Init+0x4c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e74:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <MX_USART2_UART_Init+0x4c>)
 8000e76:	220c      	movs	r2, #12
 8000e78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e7a:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <MX_USART2_UART_Init+0x4c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <MX_USART2_UART_Init+0x4c>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e86:	4805      	ldr	r0, [pc, #20]	; (8000e9c <MX_USART2_UART_Init+0x4c>)
 8000e88:	f002 fccc 	bl	8003824 <HAL_UART_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e92:	f7ff fc9d 	bl	80007d0 <Error_Handler>
  }

}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000990 	.word	0x20000990
 8000ea0:	40004400 	.word	0x40004400

08000ea4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08a      	sub	sp, #40	; 0x28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a1d      	ldr	r2, [pc, #116]	; (8000f38 <HAL_UART_MspInit+0x94>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d133      	bne.n	8000f2e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	613b      	str	r3, [r7, #16]
 8000eca:	4b1c      	ldr	r3, [pc, #112]	; (8000f3c <HAL_UART_MspInit+0x98>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	4a1b      	ldr	r2, [pc, #108]	; (8000f3c <HAL_UART_MspInit+0x98>)
 8000ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed6:	4b19      	ldr	r3, [pc, #100]	; (8000f3c <HAL_UART_MspInit+0x98>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ede:	613b      	str	r3, [r7, #16]
 8000ee0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <HAL_UART_MspInit+0x98>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a14      	ldr	r2, [pc, #80]	; (8000f3c <HAL_UART_MspInit+0x98>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <HAL_UART_MspInit+0x98>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000efe:	230c      	movs	r3, #12
 8000f00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f02:	2302      	movs	r3, #2
 8000f04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f0e:	2307      	movs	r3, #7
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f12:	f107 0314 	add.w	r3, r7, #20
 8000f16:	4619      	mov	r1, r3
 8000f18:	4809      	ldr	r0, [pc, #36]	; (8000f40 <HAL_UART_MspInit+0x9c>)
 8000f1a:	f000 fed9 	bl	8001cd0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2100      	movs	r1, #0
 8000f22:	2026      	movs	r0, #38	; 0x26
 8000f24:	f000 fb0d 	bl	8001542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f28:	2026      	movs	r0, #38	; 0x26
 8000f2a:	f000 fb26 	bl	800157a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f2e:	bf00      	nop
 8000f30:	3728      	adds	r7, #40	; 0x28
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40004400 	.word	0x40004400
 8000f3c:	40023800 	.word	0x40023800
 8000f40:	40020000 	.word	0x40020000

08000f44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f7c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f48:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f4a:	e003      	b.n	8000f54 <LoopCopyDataInit>

08000f4c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f4e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f50:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f52:	3104      	adds	r1, #4

08000f54 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f54:	480b      	ldr	r0, [pc, #44]	; (8000f84 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f56:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f58:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f5a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f5c:	d3f6      	bcc.n	8000f4c <CopyDataInit>
  ldr  r2, =_sbss
 8000f5e:	4a0b      	ldr	r2, [pc, #44]	; (8000f8c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f60:	e002      	b.n	8000f68 <LoopFillZerobss>

08000f62 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f62:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f64:	f842 3b04 	str.w	r3, [r2], #4

08000f68 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f68:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f6a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f6c:	d3f9      	bcc.n	8000f62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f6e:	f7ff fdf1 	bl	8000b54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f72:	f003 fb9f 	bl	80046b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f76:	f7ff fb3f 	bl	80005f8 <main>
  bx  lr    
 8000f7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f7c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000f80:	0800508c 	.word	0x0800508c
  ldr  r0, =_sdata
 8000f84:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f88:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000f8c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000f90:	200136d4 	.word	0x200136d4

08000f94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f94:	e7fe      	b.n	8000f94 <ADC_IRQHandler>
	...

08000f98 <UB_VGA_Screen_Init>:
// @brief The initialisation of the VGA driver
// @details The function initialises the timer registers of timer 1 & 2.
//			It also initialises the DMA register.
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  VGA.hsync_cnt = 0;
 8000f9c:	4b1f      	ldr	r3, [pc, #124]	; (800101c <UB_VGA_Screen_Init+0x84>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	801a      	strh	r2, [r3, #0]
  VGA.start_adr = 0;
 8000fa2:	4b1e      	ldr	r3, [pc, #120]	; (800101c <UB_VGA_Screen_Init+0x84>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg = 0;
 8000fa8:	4b1c      	ldr	r3, [pc, #112]	; (800101c <UB_VGA_Screen_Init+0x84>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]

  GPIOB->BSRR = VGA_VSYNC_Pin;
 8000fae:	4b1c      	ldr	r3, [pc, #112]	; (8001020 <UB_VGA_Screen_Init+0x88>)
 8000fb0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fb4:	619a      	str	r2, [r3, #24]

  // TIM2
  HAL_TIM_Base_Start(&htim2);
 8000fb6:	481b      	ldr	r0, [pc, #108]	; (8001024 <UB_VGA_Screen_Init+0x8c>)
 8000fb8:	f001 fccb 	bl	8002952 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000fbc:	210c      	movs	r1, #12
 8000fbe:	4819      	ldr	r0, [pc, #100]	; (8001024 <UB_VGA_Screen_Init+0x8c>)
 8000fc0:	f001 fd16 	bl	80029f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 8000fc4:	2108      	movs	r1, #8
 8000fc6:	4817      	ldr	r0, [pc, #92]	; (8001024 <UB_VGA_Screen_Init+0x8c>)
 8000fc8:	f001 fd50 	bl	8002a6c <HAL_TIM_PWM_Start_IT>

  // TIM1
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8000fcc:	4b16      	ldr	r3, [pc, #88]	; (8001028 <UB_VGA_Screen_Init+0x90>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	68da      	ldr	r2, [r3, #12]
 8000fd2:	4b15      	ldr	r3, [pc, #84]	; (8001028 <UB_VGA_Screen_Init+0x90>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000fda:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 8000fdc:	4b12      	ldr	r3, [pc, #72]	; (8001028 <UB_VGA_Screen_Init+0x90>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	4b11      	ldr	r3, [pc, #68]	; (8001028 <UB_VGA_Screen_Init+0x90>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f042 0201 	orr.w	r2, r2, #1
 8000fea:	601a      	str	r2, [r3, #0]
  HAL_DMA_Start_IT(&hdma_tim1_up, (uint32_t)&VGA_RAM1[0], VGA_GPIOE_ODR_ADDRESS, VGA_DISPLAY_X + 1);
 8000fec:	490f      	ldr	r1, [pc, #60]	; (800102c <UB_VGA_Screen_Init+0x94>)
 8000fee:	f240 1341 	movw	r3, #321	; 0x141
 8000ff2:	4a0f      	ldr	r2, [pc, #60]	; (8001030 <UB_VGA_Screen_Init+0x98>)
 8000ff4:	480f      	ldr	r0, [pc, #60]	; (8001034 <UB_VGA_Screen_Init+0x9c>)
 8000ff6:	f000 fb89 	bl	800170c <HAL_DMA_Start_IT>

  HAL_DMA_Init(&hdma_tim1_up);
 8000ffa:	480e      	ldr	r0, [pc, #56]	; (8001034 <UB_VGA_Screen_Init+0x9c>)
 8000ffc:	f000 fad8 	bl	80015b0 <HAL_DMA_Init>
  __HAL_DMA_ENABLE_IT(&hdma_tim1_up, DMA_IT_TC);
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <UB_VGA_Screen_Init+0x9c>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <UB_VGA_Screen_Init+0x9c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f042 0210 	orr.w	r2, r2, #16
 800100e:	601a      	str	r2, [r3, #0]

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg = DMA2_Stream5->CR;
 8001010:	4b09      	ldr	r3, [pc, #36]	; (8001038 <UB_VGA_Screen_Init+0xa0>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a01      	ldr	r2, [pc, #4]	; (800101c <UB_VGA_Screen_Init+0x84>)
 8001016:	6093      	str	r3, [r2, #8]
}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}
 800101c:	200009d0 	.word	0x200009d0
 8001020:	40020400 	.word	0x40020400
 8001024:	20000950 	.word	0x20000950
 8001028:	200008b0 	.word	0x200008b0
 800102c:	200009dc 	.word	0x200009dc
 8001030:	40021015 	.word	0x40021015
 8001034:	200008f0 	.word	0x200008f0
 8001038:	40026488 	.word	0x40026488

0800103c <UB_VGA_FillScreen>:
// @details This function writes for all pixels a single color to the ram.
//
// @param[in] color The 8-bit color-code to display
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 8001046:	2300      	movs	r3, #0
 8001048:	81bb      	strh	r3, [r7, #12]
 800104a:	e012      	b.n	8001072 <UB_VGA_FillScreen+0x36>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 800104c:	2300      	movs	r3, #0
 800104e:	81fb      	strh	r3, [r7, #14]
 8001050:	e008      	b.n	8001064 <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp, yp, color);
 8001052:	79fa      	ldrb	r2, [r7, #7]
 8001054:	89b9      	ldrh	r1, [r7, #12]
 8001056:	89fb      	ldrh	r3, [r7, #14]
 8001058:	4618      	mov	r0, r3
 800105a:	f000 f811 	bl	8001080 <UB_VGA_SetPixel>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 800105e:	89fb      	ldrh	r3, [r7, #14]
 8001060:	3301      	adds	r3, #1
 8001062:	81fb      	strh	r3, [r7, #14]
 8001064:	89fb      	ldrh	r3, [r7, #14]
 8001066:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800106a:	d3f2      	bcc.n	8001052 <UB_VGA_FillScreen+0x16>
  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 800106c:	89bb      	ldrh	r3, [r7, #12]
 800106e:	3301      	adds	r3, #1
 8001070:	81bb      	strh	r3, [r7, #12]
 8001072:	89bb      	ldrh	r3, [r7, #12]
 8001074:	2bef      	cmp	r3, #239	; 0xef
 8001076:	d9e9      	bls.n	800104c <UB_VGA_FillScreen+0x10>
    }
  }
}
 8001078:	bf00      	nop
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <UB_VGA_SetPixel>:
// @param[in] xp The X-coordinate of the pixel
// @param[in] yp The Y-coordinate of the pixel
// @param[in] color The 8-bit color-code to display
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	80fb      	strh	r3, [r7, #6]
 800108a:	460b      	mov	r3, r1
 800108c:	80bb      	strh	r3, [r7, #4]
 800108e:	4613      	mov	r3, r2
 8001090:	70fb      	strb	r3, [r7, #3]
  if(xp >= VGA_DISPLAY_X)
 8001092:	88fb      	ldrh	r3, [r7, #6]
 8001094:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001098:	d301      	bcc.n	800109e <UB_VGA_SetPixel+0x1e>
    xp = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	80fb      	strh	r3, [r7, #6]
  if(yp >= VGA_DISPLAY_Y)
 800109e:	88bb      	ldrh	r3, [r7, #4]
 80010a0:	2bef      	cmp	r3, #239	; 0xef
 80010a2:	d901      	bls.n	80010a8 <UB_VGA_SetPixel+0x28>
    yp = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp * (VGA_DISPLAY_X + 1)) + xp] = color;
 80010a8:	88ba      	ldrh	r2, [r7, #4]
 80010aa:	4613      	mov	r3, r2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	4413      	add	r3, r2
 80010b0:	019b      	lsls	r3, r3, #6
 80010b2:	441a      	add	r2, r3
 80010b4:	88fb      	ldrh	r3, [r7, #6]
 80010b6:	4413      	add	r3, r2
 80010b8:	4904      	ldr	r1, [pc, #16]	; (80010cc <UB_VGA_SetPixel+0x4c>)
 80010ba:	78fa      	ldrb	r2, [r7, #3]
 80010bc:	54ca      	strb	r2, [r1, r3]
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	200009dc 	.word	0x200009dc

080010d0 <UB_VGA_DrawRectangle>:
// @param[in] lineWidth: The width of the line that determines the border of the rectangle
//--------------------------------------------------------------

void UB_VGA_DrawRectangle(uint16_t xp, uint16_t yp, uint8_t width, uint8_t height, uint8_t color, uint8_t filled,
		uint8_t bordercolor, uint8_t lineWidth)
{
 80010d0:	b590      	push	{r4, r7, lr}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4604      	mov	r4, r0
 80010d8:	4608      	mov	r0, r1
 80010da:	4611      	mov	r1, r2
 80010dc:	461a      	mov	r2, r3
 80010de:	4623      	mov	r3, r4
 80010e0:	80fb      	strh	r3, [r7, #6]
 80010e2:	4603      	mov	r3, r0
 80010e4:	80bb      	strh	r3, [r7, #4]
 80010e6:	460b      	mov	r3, r1
 80010e8:	70fb      	strb	r3, [r7, #3]
 80010ea:	4613      	mov	r3, r2
 80010ec:	70bb      	strb	r3, [r7, #2]
	uint16_t px;
	uint16_t py;
	uint16_t i;
	uint16_t j;

	if(xp >= VGA_DISPLAY_X)
 80010ee:	88fb      	ldrh	r3, [r7, #6]
 80010f0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80010f4:	d301      	bcc.n	80010fa <UB_VGA_DrawRectangle+0x2a>
	  xp = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	80fb      	strh	r3, [r7, #6]
	if(yp >= VGA_DISPLAY_Y)
 80010fa:	88bb      	ldrh	r3, [r7, #4]
 80010fc:	2bef      	cmp	r3, #239	; 0xef
 80010fe:	d901      	bls.n	8001104 <UB_VGA_DrawRectangle+0x34>
	  yp = 0;
 8001100:	2300      	movs	r3, #0
 8001102:	80bb      	strh	r3, [r7, #4]

	/* the vertical part of the rectangle */
	for(j=0; j < lineWidth; j++)
 8001104:	2300      	movs	r3, #0
 8001106:	81bb      	strh	r3, [r7, #12]
 8001108:	e03a      	b.n	8001180 <UB_VGA_DrawRectangle+0xb0>
	{
		for(i=0; i <= height; i++)
 800110a:	2300      	movs	r3, #0
 800110c:	81fb      	strh	r3, [r7, #14]
 800110e:	e011      	b.n	8001134 <UB_VGA_DrawRectangle+0x64>
		{
			py = yp + i;
 8001110:	88ba      	ldrh	r2, [r7, #4]
 8001112:	89fb      	ldrh	r3, [r7, #14]
 8001114:	4413      	add	r3, r2
 8001116:	813b      	strh	r3, [r7, #8]
			px = xp + j;
 8001118:	88fa      	ldrh	r2, [r7, #6]
 800111a:	89bb      	ldrh	r3, [r7, #12]
 800111c:	4413      	add	r3, r2
 800111e:	817b      	strh	r3, [r7, #10]
			UB_VGA_SetPixel(px,py,bordercolor);
 8001120:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001124:	8939      	ldrh	r1, [r7, #8]
 8001126:	897b      	ldrh	r3, [r7, #10]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ffa9 	bl	8001080 <UB_VGA_SetPixel>
		for(i=0; i <= height; i++)
 800112e:	89fb      	ldrh	r3, [r7, #14]
 8001130:	3301      	adds	r3, #1
 8001132:	81fb      	strh	r3, [r7, #14]
 8001134:	78bb      	ldrb	r3, [r7, #2]
 8001136:	b29b      	uxth	r3, r3
 8001138:	89fa      	ldrh	r2, [r7, #14]
 800113a:	429a      	cmp	r2, r3
 800113c:	d9e8      	bls.n	8001110 <UB_VGA_DrawRectangle+0x40>
		}
		for(i=0; i <= height; i++)
 800113e:	2300      	movs	r3, #0
 8001140:	81fb      	strh	r3, [r7, #14]
 8001142:	e015      	b.n	8001170 <UB_VGA_DrawRectangle+0xa0>
		{
			py = yp + i;
 8001144:	88ba      	ldrh	r2, [r7, #4]
 8001146:	89fb      	ldrh	r3, [r7, #14]
 8001148:	4413      	add	r3, r2
 800114a:	813b      	strh	r3, [r7, #8]
			px = xp + width + j;
 800114c:	78fb      	ldrb	r3, [r7, #3]
 800114e:	b29a      	uxth	r2, r3
 8001150:	88fb      	ldrh	r3, [r7, #6]
 8001152:	4413      	add	r3, r2
 8001154:	b29a      	uxth	r2, r3
 8001156:	89bb      	ldrh	r3, [r7, #12]
 8001158:	4413      	add	r3, r2
 800115a:	817b      	strh	r3, [r7, #10]
			UB_VGA_SetPixel(px,py,bordercolor);
 800115c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001160:	8939      	ldrh	r1, [r7, #8]
 8001162:	897b      	ldrh	r3, [r7, #10]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ff8b 	bl	8001080 <UB_VGA_SetPixel>
		for(i=0; i <= height; i++)
 800116a:	89fb      	ldrh	r3, [r7, #14]
 800116c:	3301      	adds	r3, #1
 800116e:	81fb      	strh	r3, [r7, #14]
 8001170:	78bb      	ldrb	r3, [r7, #2]
 8001172:	b29b      	uxth	r3, r3
 8001174:	89fa      	ldrh	r2, [r7, #14]
 8001176:	429a      	cmp	r2, r3
 8001178:	d9e4      	bls.n	8001144 <UB_VGA_DrawRectangle+0x74>
	for(j=0; j < lineWidth; j++)
 800117a:	89bb      	ldrh	r3, [r7, #12]
 800117c:	3301      	adds	r3, #1
 800117e:	81bb      	strh	r3, [r7, #12]
 8001180:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001184:	b29b      	uxth	r3, r3
 8001186:	89ba      	ldrh	r2, [r7, #12]
 8001188:	429a      	cmp	r2, r3
 800118a:	d3be      	bcc.n	800110a <UB_VGA_DrawRectangle+0x3a>
		}
	}

    /* the horizontal part of the rectangle */
	for(j=0; j < lineWidth; j++)
 800118c:	2300      	movs	r3, #0
 800118e:	81bb      	strh	r3, [r7, #12]
 8001190:	e048      	b.n	8001224 <UB_VGA_DrawRectangle+0x154>
	{
		for(i=0; i <= width-lineWidth; i++)
 8001192:	2300      	movs	r3, #0
 8001194:	81fb      	strh	r3, [r7, #14]
 8001196:	e016      	b.n	80011c6 <UB_VGA_DrawRectangle+0xf6>
		{
			py = yp + j;
 8001198:	88ba      	ldrh	r2, [r7, #4]
 800119a:	89bb      	ldrh	r3, [r7, #12]
 800119c:	4413      	add	r3, r2
 800119e:	813b      	strh	r3, [r7, #8]
			px = xp + i + lineWidth;
 80011a0:	88fa      	ldrh	r2, [r7, #6]
 80011a2:	89fb      	ldrh	r3, [r7, #14]
 80011a4:	4413      	add	r3, r2
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	4413      	add	r3, r2
 80011b0:	817b      	strh	r3, [r7, #10]
			UB_VGA_SetPixel(px,py,bordercolor);
 80011b2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80011b6:	8939      	ldrh	r1, [r7, #8]
 80011b8:	897b      	ldrh	r3, [r7, #10]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff ff60 	bl	8001080 <UB_VGA_SetPixel>
		for(i=0; i <= width-lineWidth; i++)
 80011c0:	89fb      	ldrh	r3, [r7, #14]
 80011c2:	3301      	adds	r3, #1
 80011c4:	81fb      	strh	r3, [r7, #14]
 80011c6:	89fa      	ldrh	r2, [r7, #14]
 80011c8:	78f9      	ldrb	r1, [r7, #3]
 80011ca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80011ce:	1acb      	subs	r3, r1, r3
 80011d0:	429a      	cmp	r2, r3
 80011d2:	dde1      	ble.n	8001198 <UB_VGA_DrawRectangle+0xc8>
		}
		for(i=0; i <= width-lineWidth; i++)
 80011d4:	2300      	movs	r3, #0
 80011d6:	81fb      	strh	r3, [r7, #14]
 80011d8:	e01a      	b.n	8001210 <UB_VGA_DrawRectangle+0x140>
		{
			py = yp + height - j;
 80011da:	78bb      	ldrb	r3, [r7, #2]
 80011dc:	b29a      	uxth	r2, r3
 80011de:	88bb      	ldrh	r3, [r7, #4]
 80011e0:	4413      	add	r3, r2
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	89bb      	ldrh	r3, [r7, #12]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	813b      	strh	r3, [r7, #8]
			px = xp + i + lineWidth;
 80011ea:	88fa      	ldrh	r2, [r7, #6]
 80011ec:	89fb      	ldrh	r3, [r7, #14]
 80011ee:	4413      	add	r3, r2
 80011f0:	b29a      	uxth	r2, r3
 80011f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	4413      	add	r3, r2
 80011fa:	817b      	strh	r3, [r7, #10]
			UB_VGA_SetPixel(px,py,bordercolor);
 80011fc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001200:	8939      	ldrh	r1, [r7, #8]
 8001202:	897b      	ldrh	r3, [r7, #10]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff ff3b 	bl	8001080 <UB_VGA_SetPixel>
		for(i=0; i <= width-lineWidth; i++)
 800120a:	89fb      	ldrh	r3, [r7, #14]
 800120c:	3301      	adds	r3, #1
 800120e:	81fb      	strh	r3, [r7, #14]
 8001210:	89fa      	ldrh	r2, [r7, #14]
 8001212:	78f9      	ldrb	r1, [r7, #3]
 8001214:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001218:	1acb      	subs	r3, r1, r3
 800121a:	429a      	cmp	r2, r3
 800121c:	dddd      	ble.n	80011da <UB_VGA_DrawRectangle+0x10a>
	for(j=0; j < lineWidth; j++)
 800121e:	89bb      	ldrh	r3, [r7, #12]
 8001220:	3301      	adds	r3, #1
 8001222:	81bb      	strh	r3, [r7, #12]
 8001224:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001228:	b29b      	uxth	r3, r3
 800122a:	89ba      	ldrh	r2, [r7, #12]
 800122c:	429a      	cmp	r2, r3
 800122e:	d3b0      	bcc.n	8001192 <UB_VGA_DrawRectangle+0xc2>
		}
	}

    /* filling in the rectangle */
    if(filled == 1)
 8001230:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001234:	2b01      	cmp	r3, #1
 8001236:	d133      	bne.n	80012a0 <UB_VGA_DrawRectangle+0x1d0>
    {
    	for(i=0; i < width-lineWidth; i++)
 8001238:	2300      	movs	r3, #0
 800123a:	81fb      	strh	r3, [r7, #14]
 800123c:	e029      	b.n	8001292 <UB_VGA_DrawRectangle+0x1c2>
    	{
    		px = xp + i + lineWidth;
 800123e:	88fa      	ldrh	r2, [r7, #6]
 8001240:	89fb      	ldrh	r3, [r7, #14]
 8001242:	4413      	add	r3, r2
 8001244:	b29a      	uxth	r2, r3
 8001246:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800124a:	b29b      	uxth	r3, r3
 800124c:	4413      	add	r3, r2
 800124e:	817b      	strh	r3, [r7, #10]

        	for(j=0; j <= height-(lineWidth*2); j++)
 8001250:	2300      	movs	r3, #0
 8001252:	81bb      	strh	r3, [r7, #12]
 8001254:	e012      	b.n	800127c <UB_VGA_DrawRectangle+0x1ac>
        	{
        		py = yp + j + lineWidth;
 8001256:	88ba      	ldrh	r2, [r7, #4]
 8001258:	89bb      	ldrh	r3, [r7, #12]
 800125a:	4413      	add	r3, r2
 800125c:	b29a      	uxth	r2, r3
 800125e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001262:	b29b      	uxth	r3, r3
 8001264:	4413      	add	r3, r2
 8001266:	813b      	strh	r3, [r7, #8]
        		UB_VGA_SetPixel(px,py,color);
 8001268:	f897 2020 	ldrb.w	r2, [r7, #32]
 800126c:	8939      	ldrh	r1, [r7, #8]
 800126e:	897b      	ldrh	r3, [r7, #10]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff05 	bl	8001080 <UB_VGA_SetPixel>
        	for(j=0; j <= height-(lineWidth*2); j++)
 8001276:	89bb      	ldrh	r3, [r7, #12]
 8001278:	3301      	adds	r3, #1
 800127a:	81bb      	strh	r3, [r7, #12]
 800127c:	89ba      	ldrh	r2, [r7, #12]
 800127e:	78b9      	ldrb	r1, [r7, #2]
 8001280:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	1acb      	subs	r3, r1, r3
 8001288:	429a      	cmp	r2, r3
 800128a:	dde4      	ble.n	8001256 <UB_VGA_DrawRectangle+0x186>
    	for(i=0; i < width-lineWidth; i++)
 800128c:	89fb      	ldrh	r3, [r7, #14]
 800128e:	3301      	adds	r3, #1
 8001290:	81fb      	strh	r3, [r7, #14]
 8001292:	89fa      	ldrh	r2, [r7, #14]
 8001294:	78f9      	ldrb	r1, [r7, #3]
 8001296:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800129a:	1acb      	subs	r3, r1, r3
 800129c:	429a      	cmp	r2, r3
 800129e:	dbce      	blt.n	800123e <UB_VGA_DrawRectangle+0x16e>
        	}
    	}
    }

}
 80012a0:	bf00      	nop
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd90      	pop	{r4, r7, pc}

080012a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012ac:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <HAL_Init+0x40>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a0d      	ldr	r2, [pc, #52]	; (80012e8 <HAL_Init+0x40>)
 80012b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012b8:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <HAL_Init+0x40>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a0a      	ldr	r2, [pc, #40]	; (80012e8 <HAL_Init+0x40>)
 80012be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012c4:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <HAL_Init+0x40>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a07      	ldr	r2, [pc, #28]	; (80012e8 <HAL_Init+0x40>)
 80012ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d0:	2003      	movs	r0, #3
 80012d2:	f000 f92b 	bl	800152c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012d6:	2000      	movs	r0, #0
 80012d8:	f000 f808 	bl	80012ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012dc:	f7ff fa80 	bl	80007e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40023c00 	.word	0x40023c00

080012ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <HAL_InitTick+0x54>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b12      	ldr	r3, [pc, #72]	; (8001344 <HAL_InitTick+0x58>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	4619      	mov	r1, r3
 80012fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001302:	fbb3 f3f1 	udiv	r3, r3, r1
 8001306:	fbb2 f3f3 	udiv	r3, r2, r3
 800130a:	4618      	mov	r0, r3
 800130c:	f000 f943 	bl	8001596 <HAL_SYSTICK_Config>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e00e      	b.n	8001338 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2b0f      	cmp	r3, #15
 800131e:	d80a      	bhi.n	8001336 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001320:	2200      	movs	r2, #0
 8001322:	6879      	ldr	r1, [r7, #4]
 8001324:	f04f 30ff 	mov.w	r0, #4294967295
 8001328:	f000 f90b 	bl	8001542 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800132c:	4a06      	ldr	r2, [pc, #24]	; (8001348 <HAL_InitTick+0x5c>)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001332:	2300      	movs	r3, #0
 8001334:	e000      	b.n	8001338 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
}
 8001338:	4618      	mov	r0, r3
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000000 	.word	0x20000000
 8001344:	20000008 	.word	0x20000008
 8001348:	20000004 	.word	0x20000004

0800134c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <HAL_IncTick+0x20>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	461a      	mov	r2, r3
 8001356:	4b06      	ldr	r3, [pc, #24]	; (8001370 <HAL_IncTick+0x24>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4413      	add	r3, r2
 800135c:	4a04      	ldr	r2, [pc, #16]	; (8001370 <HAL_IncTick+0x24>)
 800135e:	6013      	str	r3, [r2, #0]
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	20000008 	.word	0x20000008
 8001370:	200136cc 	.word	0x200136cc

08001374 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  return uwTick;
 8001378:	4b03      	ldr	r3, [pc, #12]	; (8001388 <HAL_GetTick+0x14>)
 800137a:	681b      	ldr	r3, [r3, #0]
}
 800137c:	4618      	mov	r0, r3
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	200136cc 	.word	0x200136cc

0800138c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800139c:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <__NVIC_SetPriorityGrouping+0x44>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013a2:	68ba      	ldr	r2, [r7, #8]
 80013a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013a8:	4013      	ands	r3, r2
 80013aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013be:	4a04      	ldr	r2, [pc, #16]	; (80013d0 <__NVIC_SetPriorityGrouping+0x44>)
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	60d3      	str	r3, [r2, #12]
}
 80013c4:	bf00      	nop
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d8:	4b04      	ldr	r3, [pc, #16]	; (80013ec <__NVIC_GetPriorityGrouping+0x18>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	0a1b      	lsrs	r3, r3, #8
 80013de:	f003 0307 	and.w	r3, r3, #7
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	db0b      	blt.n	800141a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	f003 021f 	and.w	r2, r3, #31
 8001408:	4907      	ldr	r1, [pc, #28]	; (8001428 <__NVIC_EnableIRQ+0x38>)
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140e:	095b      	lsrs	r3, r3, #5
 8001410:	2001      	movs	r0, #1
 8001412:	fa00 f202 	lsl.w	r2, r0, r2
 8001416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	e000e100 	.word	0xe000e100

0800142c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	6039      	str	r1, [r7, #0]
 8001436:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143c:	2b00      	cmp	r3, #0
 800143e:	db0a      	blt.n	8001456 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	b2da      	uxtb	r2, r3
 8001444:	490c      	ldr	r1, [pc, #48]	; (8001478 <__NVIC_SetPriority+0x4c>)
 8001446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144a:	0112      	lsls	r2, r2, #4
 800144c:	b2d2      	uxtb	r2, r2
 800144e:	440b      	add	r3, r1
 8001450:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001454:	e00a      	b.n	800146c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	b2da      	uxtb	r2, r3
 800145a:	4908      	ldr	r1, [pc, #32]	; (800147c <__NVIC_SetPriority+0x50>)
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	f003 030f 	and.w	r3, r3, #15
 8001462:	3b04      	subs	r3, #4
 8001464:	0112      	lsls	r2, r2, #4
 8001466:	b2d2      	uxtb	r2, r2
 8001468:	440b      	add	r3, r1
 800146a:	761a      	strb	r2, [r3, #24]
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	e000e100 	.word	0xe000e100
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001480:	b480      	push	{r7}
 8001482:	b089      	sub	sp, #36	; 0x24
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	f1c3 0307 	rsb	r3, r3, #7
 800149a:	2b04      	cmp	r3, #4
 800149c:	bf28      	it	cs
 800149e:	2304      	movcs	r3, #4
 80014a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	3304      	adds	r3, #4
 80014a6:	2b06      	cmp	r3, #6
 80014a8:	d902      	bls.n	80014b0 <NVIC_EncodePriority+0x30>
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	3b03      	subs	r3, #3
 80014ae:	e000      	b.n	80014b2 <NVIC_EncodePriority+0x32>
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b4:	f04f 32ff 	mov.w	r2, #4294967295
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43da      	mvns	r2, r3
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	401a      	ands	r2, r3
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c8:	f04f 31ff 	mov.w	r1, #4294967295
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	fa01 f303 	lsl.w	r3, r1, r3
 80014d2:	43d9      	mvns	r1, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d8:	4313      	orrs	r3, r2
         );
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3724      	adds	r7, #36	; 0x24
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
	...

080014e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014f8:	d301      	bcc.n	80014fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014fa:	2301      	movs	r3, #1
 80014fc:	e00f      	b.n	800151e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014fe:	4a0a      	ldr	r2, [pc, #40]	; (8001528 <SysTick_Config+0x40>)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3b01      	subs	r3, #1
 8001504:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001506:	210f      	movs	r1, #15
 8001508:	f04f 30ff 	mov.w	r0, #4294967295
 800150c:	f7ff ff8e 	bl	800142c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001510:	4b05      	ldr	r3, [pc, #20]	; (8001528 <SysTick_Config+0x40>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001516:	4b04      	ldr	r3, [pc, #16]	; (8001528 <SysTick_Config+0x40>)
 8001518:	2207      	movs	r2, #7
 800151a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	e000e010 	.word	0xe000e010

0800152c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff ff29 	bl	800138c <__NVIC_SetPriorityGrouping>
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001542:	b580      	push	{r7, lr}
 8001544:	b086      	sub	sp, #24
 8001546:	af00      	add	r7, sp, #0
 8001548:	4603      	mov	r3, r0
 800154a:	60b9      	str	r1, [r7, #8]
 800154c:	607a      	str	r2, [r7, #4]
 800154e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001554:	f7ff ff3e 	bl	80013d4 <__NVIC_GetPriorityGrouping>
 8001558:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	68b9      	ldr	r1, [r7, #8]
 800155e:	6978      	ldr	r0, [r7, #20]
 8001560:	f7ff ff8e 	bl	8001480 <NVIC_EncodePriority>
 8001564:	4602      	mov	r2, r0
 8001566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800156a:	4611      	mov	r1, r2
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff ff5d 	bl	800142c <__NVIC_SetPriority>
}
 8001572:	bf00      	nop
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b082      	sub	sp, #8
 800157e:	af00      	add	r7, sp, #0
 8001580:	4603      	mov	r3, r0
 8001582:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff ff31 	bl	80013f0 <__NVIC_EnableIRQ>
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b082      	sub	sp, #8
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f7ff ffa2 	bl	80014e8 <SysTick_Config>
 80015a4:	4603      	mov	r3, r0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
	...

080015b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80015bc:	f7ff feda 	bl	8001374 <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d101      	bne.n	80015cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e099      	b.n	8001700 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2202      	movs	r2, #2
 80015d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f022 0201 	bic.w	r2, r2, #1
 80015ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015ec:	e00f      	b.n	800160e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015ee:	f7ff fec1 	bl	8001374 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b05      	cmp	r3, #5
 80015fa:	d908      	bls.n	800160e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2220      	movs	r2, #32
 8001600:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2203      	movs	r2, #3
 8001606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e078      	b.n	8001700 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1e8      	bne.n	80015ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001624:	697a      	ldr	r2, [r7, #20]
 8001626:	4b38      	ldr	r3, [pc, #224]	; (8001708 <HAL_DMA_Init+0x158>)
 8001628:	4013      	ands	r3, r2
 800162a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685a      	ldr	r2, [r3, #4]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800163a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	691b      	ldr	r3, [r3, #16]
 8001640:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001646:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001652:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6a1b      	ldr	r3, [r3, #32]
 8001658:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800165a:	697a      	ldr	r2, [r7, #20]
 800165c:	4313      	orrs	r3, r2
 800165e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001664:	2b04      	cmp	r3, #4
 8001666:	d107      	bne.n	8001678 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001670:	4313      	orrs	r3, r2
 8001672:	697a      	ldr	r2, [r7, #20]
 8001674:	4313      	orrs	r3, r2
 8001676:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	697a      	ldr	r2, [r7, #20]
 800167e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	695b      	ldr	r3, [r3, #20]
 8001686:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	f023 0307 	bic.w	r3, r3, #7
 800168e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001694:	697a      	ldr	r2, [r7, #20]
 8001696:	4313      	orrs	r3, r2
 8001698:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169e:	2b04      	cmp	r3, #4
 80016a0:	d117      	bne.n	80016d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a6:	697a      	ldr	r2, [r7, #20]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d00e      	beq.n	80016d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f000 fa91 	bl	8001bdc <DMA_CheckFifoParam>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d008      	beq.n	80016d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2240      	movs	r2, #64	; 0x40
 80016c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2201      	movs	r2, #1
 80016ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80016ce:	2301      	movs	r3, #1
 80016d0:	e016      	b.n	8001700 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	697a      	ldr	r2, [r7, #20]
 80016d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f000 fa48 	bl	8001b70 <DMA_CalcBaseAndBitshift>
 80016e0:	4603      	mov	r3, r0
 80016e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016e8:	223f      	movs	r2, #63	; 0x3f
 80016ea:	409a      	lsls	r2, r3
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2201      	movs	r2, #1
 80016fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
}
 8001700:	4618      	mov	r0, r3
 8001702:	3718      	adds	r7, #24
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	f010803f 	.word	0xf010803f

0800170c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
 8001718:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800171a:	2300      	movs	r3, #0
 800171c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001722:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800172a:	2b01      	cmp	r3, #1
 800172c:	d101      	bne.n	8001732 <HAL_DMA_Start_IT+0x26>
 800172e:	2302      	movs	r3, #2
 8001730:	e040      	b.n	80017b4 <HAL_DMA_Start_IT+0xa8>
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	2201      	movs	r2, #1
 8001736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b01      	cmp	r3, #1
 8001744:	d12f      	bne.n	80017a6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2202      	movs	r2, #2
 800174a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2200      	movs	r2, #0
 8001752:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	68b9      	ldr	r1, [r7, #8]
 800175a:	68f8      	ldr	r0, [r7, #12]
 800175c:	f000 f9da 	bl	8001b14 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001764:	223f      	movs	r2, #63	; 0x3f
 8001766:	409a      	lsls	r2, r3
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f042 0216 	orr.w	r2, r2, #22
 800177a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001780:	2b00      	cmp	r3, #0
 8001782:	d007      	beq.n	8001794 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f042 0208 	orr.w	r2, r2, #8
 8001792:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f042 0201 	orr.w	r2, r2, #1
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	e005      	b.n	80017b2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80017ae:	2302      	movs	r3, #2
 80017b0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80017b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d004      	beq.n	80017da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2280      	movs	r2, #128	; 0x80
 80017d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e00c      	b.n	80017f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2205      	movs	r2, #5
 80017de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f022 0201 	bic.w	r2, r2, #1
 80017f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017f2:	2300      	movs	r3, #0
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001808:	2300      	movs	r3, #0
 800180a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800180c:	4b92      	ldr	r3, [pc, #584]	; (8001a58 <HAL_DMA_IRQHandler+0x258>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a92      	ldr	r2, [pc, #584]	; (8001a5c <HAL_DMA_IRQHandler+0x25c>)
 8001812:	fba2 2303 	umull	r2, r3, r2, r3
 8001816:	0a9b      	lsrs	r3, r3, #10
 8001818:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800182a:	2208      	movs	r2, #8
 800182c:	409a      	lsls	r2, r3
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	4013      	ands	r3, r2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d01a      	beq.n	800186c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	2b00      	cmp	r3, #0
 8001842:	d013      	beq.n	800186c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f022 0204 	bic.w	r2, r2, #4
 8001852:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001858:	2208      	movs	r2, #8
 800185a:	409a      	lsls	r2, r3
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001864:	f043 0201 	orr.w	r2, r3, #1
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001870:	2201      	movs	r2, #1
 8001872:	409a      	lsls	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	4013      	ands	r3, r2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d012      	beq.n	80018a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001886:	2b00      	cmp	r3, #0
 8001888:	d00b      	beq.n	80018a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800188e:	2201      	movs	r2, #1
 8001890:	409a      	lsls	r2, r3
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800189a:	f043 0202 	orr.w	r2, r3, #2
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018a6:	2204      	movs	r2, #4
 80018a8:	409a      	lsls	r2, r3
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	4013      	ands	r3, r2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d012      	beq.n	80018d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d00b      	beq.n	80018d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c4:	2204      	movs	r2, #4
 80018c6:	409a      	lsls	r2, r3
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018d0:	f043 0204 	orr.w	r2, r3, #4
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018dc:	2210      	movs	r2, #16
 80018de:	409a      	lsls	r2, r3
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	4013      	ands	r3, r2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d043      	beq.n	8001970 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0308 	and.w	r3, r3, #8
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d03c      	beq.n	8001970 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018fa:	2210      	movs	r2, #16
 80018fc:	409a      	lsls	r2, r3
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d018      	beq.n	8001942 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d108      	bne.n	8001930 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	2b00      	cmp	r3, #0
 8001924:	d024      	beq.n	8001970 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	4798      	blx	r3
 800192e:	e01f      	b.n	8001970 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001934:	2b00      	cmp	r3, #0
 8001936:	d01b      	beq.n	8001970 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	4798      	blx	r3
 8001940:	e016      	b.n	8001970 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800194c:	2b00      	cmp	r3, #0
 800194e:	d107      	bne.n	8001960 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f022 0208 	bic.w	r2, r2, #8
 800195e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001964:	2b00      	cmp	r3, #0
 8001966:	d003      	beq.n	8001970 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001974:	2220      	movs	r2, #32
 8001976:	409a      	lsls	r2, r3
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4013      	ands	r3, r2
 800197c:	2b00      	cmp	r3, #0
 800197e:	f000 808e 	beq.w	8001a9e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0310 	and.w	r3, r3, #16
 800198c:	2b00      	cmp	r3, #0
 800198e:	f000 8086 	beq.w	8001a9e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001996:	2220      	movs	r2, #32
 8001998:	409a      	lsls	r2, r3
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b05      	cmp	r3, #5
 80019a8:	d136      	bne.n	8001a18 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f022 0216 	bic.w	r2, r2, #22
 80019b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	695a      	ldr	r2, [r3, #20]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d103      	bne.n	80019da <HAL_DMA_IRQHandler+0x1da>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d007      	beq.n	80019ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f022 0208 	bic.w	r2, r2, #8
 80019e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ee:	223f      	movs	r2, #63	; 0x3f
 80019f0:	409a      	lsls	r2, r3
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2201      	movs	r2, #1
 8001a02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d07d      	beq.n	8001b0a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	4798      	blx	r3
        }
        return;
 8001a16:	e078      	b.n	8001b0a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d01c      	beq.n	8001a60 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d108      	bne.n	8001a46 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d030      	beq.n	8001a9e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	4798      	blx	r3
 8001a44:	e02b      	b.n	8001a9e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d027      	beq.n	8001a9e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	4798      	blx	r3
 8001a56:	e022      	b.n	8001a9e <HAL_DMA_IRQHandler+0x29e>
 8001a58:	20000000 	.word	0x20000000
 8001a5c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d10f      	bne.n	8001a8e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f022 0210 	bic.w	r2, r2, #16
 8001a7c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d003      	beq.n	8001a9e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d032      	beq.n	8001b0c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d022      	beq.n	8001af8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2205      	movs	r2, #5
 8001ab6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f022 0201 	bic.w	r2, r2, #1
 8001ac8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	3301      	adds	r3, #1
 8001ace:	60bb      	str	r3, [r7, #8]
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d307      	bcc.n	8001ae6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d1f2      	bne.n	8001aca <HAL_DMA_IRQHandler+0x2ca>
 8001ae4:	e000      	b.n	8001ae8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001ae6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d005      	beq.n	8001b0c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	4798      	blx	r3
 8001b08:	e000      	b.n	8001b0c <HAL_DMA_IRQHandler+0x30c>
        return;
 8001b0a:	bf00      	nop
    }
  }
}
 8001b0c:	3718      	adds	r7, #24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop

08001b14 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
 8001b20:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b30:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	2b40      	cmp	r3, #64	; 0x40
 8001b40:	d108      	bne.n	8001b54 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	68ba      	ldr	r2, [r7, #8]
 8001b50:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001b52:	e007      	b.n	8001b64 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	68ba      	ldr	r2, [r7, #8]
 8001b5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	60da      	str	r2, [r3, #12]
}
 8001b64:	bf00      	nop
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	3b10      	subs	r3, #16
 8001b80:	4a14      	ldr	r2, [pc, #80]	; (8001bd4 <DMA_CalcBaseAndBitshift+0x64>)
 8001b82:	fba2 2303 	umull	r2, r3, r2, r3
 8001b86:	091b      	lsrs	r3, r3, #4
 8001b88:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b8a:	4a13      	ldr	r2, [pc, #76]	; (8001bd8 <DMA_CalcBaseAndBitshift+0x68>)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	4413      	add	r3, r2
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	461a      	mov	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2b03      	cmp	r3, #3
 8001b9c:	d909      	bls.n	8001bb2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001ba6:	f023 0303 	bic.w	r3, r3, #3
 8001baa:	1d1a      	adds	r2, r3, #4
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	659a      	str	r2, [r3, #88]	; 0x58
 8001bb0:	e007      	b.n	8001bc2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001bba:	f023 0303 	bic.w	r3, r3, #3
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	aaaaaaab 	.word	0xaaaaaaab
 8001bd8:	08005010 	.word	0x08005010

08001bdc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001be4:	2300      	movs	r3, #0
 8001be6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d11f      	bne.n	8001c36 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	2b03      	cmp	r3, #3
 8001bfa:	d855      	bhi.n	8001ca8 <DMA_CheckFifoParam+0xcc>
 8001bfc:	a201      	add	r2, pc, #4	; (adr r2, 8001c04 <DMA_CheckFifoParam+0x28>)
 8001bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c02:	bf00      	nop
 8001c04:	08001c15 	.word	0x08001c15
 8001c08:	08001c27 	.word	0x08001c27
 8001c0c:	08001c15 	.word	0x08001c15
 8001c10:	08001ca9 	.word	0x08001ca9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d045      	beq.n	8001cac <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c24:	e042      	b.n	8001cac <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c2e:	d13f      	bne.n	8001cb0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c34:	e03c      	b.n	8001cb0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c3e:	d121      	bne.n	8001c84 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	2b03      	cmp	r3, #3
 8001c44:	d836      	bhi.n	8001cb4 <DMA_CheckFifoParam+0xd8>
 8001c46:	a201      	add	r2, pc, #4	; (adr r2, 8001c4c <DMA_CheckFifoParam+0x70>)
 8001c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c4c:	08001c5d 	.word	0x08001c5d
 8001c50:	08001c63 	.word	0x08001c63
 8001c54:	08001c5d 	.word	0x08001c5d
 8001c58:	08001c75 	.word	0x08001c75
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	73fb      	strb	r3, [r7, #15]
      break;
 8001c60:	e02f      	b.n	8001cc2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d024      	beq.n	8001cb8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c72:	e021      	b.n	8001cb8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c78:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c7c:	d11e      	bne.n	8001cbc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001c82:	e01b      	b.n	8001cbc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d902      	bls.n	8001c90 <DMA_CheckFifoParam+0xb4>
 8001c8a:	2b03      	cmp	r3, #3
 8001c8c:	d003      	beq.n	8001c96 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001c8e:	e018      	b.n	8001cc2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	73fb      	strb	r3, [r7, #15]
      break;
 8001c94:	e015      	b.n	8001cc2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d00e      	beq.n	8001cc0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	73fb      	strb	r3, [r7, #15]
      break;
 8001ca6:	e00b      	b.n	8001cc0 <DMA_CheckFifoParam+0xe4>
      break;
 8001ca8:	bf00      	nop
 8001caa:	e00a      	b.n	8001cc2 <DMA_CheckFifoParam+0xe6>
      break;
 8001cac:	bf00      	nop
 8001cae:	e008      	b.n	8001cc2 <DMA_CheckFifoParam+0xe6>
      break;
 8001cb0:	bf00      	nop
 8001cb2:	e006      	b.n	8001cc2 <DMA_CheckFifoParam+0xe6>
      break;
 8001cb4:	bf00      	nop
 8001cb6:	e004      	b.n	8001cc2 <DMA_CheckFifoParam+0xe6>
      break;
 8001cb8:	bf00      	nop
 8001cba:	e002      	b.n	8001cc2 <DMA_CheckFifoParam+0xe6>
      break;   
 8001cbc:	bf00      	nop
 8001cbe:	e000      	b.n	8001cc2 <DMA_CheckFifoParam+0xe6>
      break;
 8001cc0:	bf00      	nop
    }
  } 
  
  return status; 
 8001cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3714      	adds	r7, #20
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b089      	sub	sp, #36	; 0x24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61fb      	str	r3, [r7, #28]
 8001cea:	e16b      	b.n	8001fc4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cec:	2201      	movs	r2, #1
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	f040 815a 	bne.w	8001fbe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d00b      	beq.n	8001d2a <HAL_GPIO_Init+0x5a>
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d007      	beq.n	8001d2a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d1e:	2b11      	cmp	r3, #17
 8001d20:	d003      	beq.n	8001d2a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	2b12      	cmp	r3, #18
 8001d28:	d130      	bne.n	8001d8c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	2203      	movs	r2, #3
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	68da      	ldr	r2, [r3, #12]
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d60:	2201      	movs	r2, #1
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	091b      	lsrs	r3, r3, #4
 8001d76:	f003 0201 	and.w	r2, r3, #1
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	2203      	movs	r2, #3
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d003      	beq.n	8001dcc <HAL_GPIO_Init+0xfc>
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	2b12      	cmp	r3, #18
 8001dca:	d123      	bne.n	8001e14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	08da      	lsrs	r2, r3, #3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3208      	adds	r2, #8
 8001dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	f003 0307 	and.w	r3, r3, #7
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	220f      	movs	r2, #15
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	43db      	mvns	r3, r3
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4013      	ands	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	691a      	ldr	r2, [r3, #16]
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	08da      	lsrs	r2, r3, #3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	3208      	adds	r2, #8
 8001e0e:	69b9      	ldr	r1, [r7, #24]
 8001e10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	2203      	movs	r2, #3
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	43db      	mvns	r3, r3
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f003 0203 	and.w	r2, r3, #3
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	f000 80b4 	beq.w	8001fbe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	4b5f      	ldr	r3, [pc, #380]	; (8001fd8 <HAL_GPIO_Init+0x308>)
 8001e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5e:	4a5e      	ldr	r2, [pc, #376]	; (8001fd8 <HAL_GPIO_Init+0x308>)
 8001e60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e64:	6453      	str	r3, [r2, #68]	; 0x44
 8001e66:	4b5c      	ldr	r3, [pc, #368]	; (8001fd8 <HAL_GPIO_Init+0x308>)
 8001e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e72:	4a5a      	ldr	r2, [pc, #360]	; (8001fdc <HAL_GPIO_Init+0x30c>)
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	089b      	lsrs	r3, r3, #2
 8001e78:	3302      	adds	r3, #2
 8001e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	f003 0303 	and.w	r3, r3, #3
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	220f      	movs	r2, #15
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	4013      	ands	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a51      	ldr	r2, [pc, #324]	; (8001fe0 <HAL_GPIO_Init+0x310>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d02b      	beq.n	8001ef6 <HAL_GPIO_Init+0x226>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a50      	ldr	r2, [pc, #320]	; (8001fe4 <HAL_GPIO_Init+0x314>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d025      	beq.n	8001ef2 <HAL_GPIO_Init+0x222>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a4f      	ldr	r2, [pc, #316]	; (8001fe8 <HAL_GPIO_Init+0x318>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d01f      	beq.n	8001eee <HAL_GPIO_Init+0x21e>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a4e      	ldr	r2, [pc, #312]	; (8001fec <HAL_GPIO_Init+0x31c>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d019      	beq.n	8001eea <HAL_GPIO_Init+0x21a>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a4d      	ldr	r2, [pc, #308]	; (8001ff0 <HAL_GPIO_Init+0x320>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d013      	beq.n	8001ee6 <HAL_GPIO_Init+0x216>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a4c      	ldr	r2, [pc, #304]	; (8001ff4 <HAL_GPIO_Init+0x324>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d00d      	beq.n	8001ee2 <HAL_GPIO_Init+0x212>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a4b      	ldr	r2, [pc, #300]	; (8001ff8 <HAL_GPIO_Init+0x328>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d007      	beq.n	8001ede <HAL_GPIO_Init+0x20e>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a4a      	ldr	r2, [pc, #296]	; (8001ffc <HAL_GPIO_Init+0x32c>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d101      	bne.n	8001eda <HAL_GPIO_Init+0x20a>
 8001ed6:	2307      	movs	r3, #7
 8001ed8:	e00e      	b.n	8001ef8 <HAL_GPIO_Init+0x228>
 8001eda:	2308      	movs	r3, #8
 8001edc:	e00c      	b.n	8001ef8 <HAL_GPIO_Init+0x228>
 8001ede:	2306      	movs	r3, #6
 8001ee0:	e00a      	b.n	8001ef8 <HAL_GPIO_Init+0x228>
 8001ee2:	2305      	movs	r3, #5
 8001ee4:	e008      	b.n	8001ef8 <HAL_GPIO_Init+0x228>
 8001ee6:	2304      	movs	r3, #4
 8001ee8:	e006      	b.n	8001ef8 <HAL_GPIO_Init+0x228>
 8001eea:	2303      	movs	r3, #3
 8001eec:	e004      	b.n	8001ef8 <HAL_GPIO_Init+0x228>
 8001eee:	2302      	movs	r3, #2
 8001ef0:	e002      	b.n	8001ef8 <HAL_GPIO_Init+0x228>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e000      	b.n	8001ef8 <HAL_GPIO_Init+0x228>
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	69fa      	ldr	r2, [r7, #28]
 8001efa:	f002 0203 	and.w	r2, r2, #3
 8001efe:	0092      	lsls	r2, r2, #2
 8001f00:	4093      	lsls	r3, r2
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f08:	4934      	ldr	r1, [pc, #208]	; (8001fdc <HAL_GPIO_Init+0x30c>)
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	089b      	lsrs	r3, r3, #2
 8001f0e:	3302      	adds	r3, #2
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f16:	4b3a      	ldr	r3, [pc, #232]	; (8002000 <HAL_GPIO_Init+0x330>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4013      	ands	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f3a:	4a31      	ldr	r2, [pc, #196]	; (8002000 <HAL_GPIO_Init+0x330>)
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f40:	4b2f      	ldr	r3, [pc, #188]	; (8002000 <HAL_GPIO_Init+0x330>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d003      	beq.n	8001f64 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f64:	4a26      	ldr	r2, [pc, #152]	; (8002000 <HAL_GPIO_Init+0x330>)
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f6a:	4b25      	ldr	r3, [pc, #148]	; (8002000 <HAL_GPIO_Init+0x330>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	43db      	mvns	r3, r3
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4013      	ands	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d003      	beq.n	8001f8e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f8e:	4a1c      	ldr	r2, [pc, #112]	; (8002000 <HAL_GPIO_Init+0x330>)
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f94:	4b1a      	ldr	r3, [pc, #104]	; (8002000 <HAL_GPIO_Init+0x330>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d003      	beq.n	8001fb8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fb8:	4a11      	ldr	r2, [pc, #68]	; (8002000 <HAL_GPIO_Init+0x330>)
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	61fb      	str	r3, [r7, #28]
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	2b0f      	cmp	r3, #15
 8001fc8:	f67f ae90 	bls.w	8001cec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fcc:	bf00      	nop
 8001fce:	3724      	adds	r7, #36	; 0x24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	40013800 	.word	0x40013800
 8001fe0:	40020000 	.word	0x40020000
 8001fe4:	40020400 	.word	0x40020400
 8001fe8:	40020800 	.word	0x40020800
 8001fec:	40020c00 	.word	0x40020c00
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	40021400 	.word	0x40021400
 8001ff8:	40021800 	.word	0x40021800
 8001ffc:	40021c00 	.word	0x40021c00
 8002000:	40013c00 	.word	0x40013c00

08002004 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	460b      	mov	r3, r1
 800200e:	807b      	strh	r3, [r7, #2]
 8002010:	4613      	mov	r3, r2
 8002012:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002014:	787b      	ldrb	r3, [r7, #1]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800201a:	887a      	ldrh	r2, [r7, #2]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002020:	e003      	b.n	800202a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002022:	887b      	ldrh	r3, [r7, #2]
 8002024:	041a      	lsls	r2, r3, #16
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	619a      	str	r2, [r3, #24]
}
 800202a:	bf00      	nop
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
	...

08002038 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e25b      	b.n	8002502 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	d075      	beq.n	8002142 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002056:	4ba3      	ldr	r3, [pc, #652]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 030c 	and.w	r3, r3, #12
 800205e:	2b04      	cmp	r3, #4
 8002060:	d00c      	beq.n	800207c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002062:	4ba0      	ldr	r3, [pc, #640]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800206a:	2b08      	cmp	r3, #8
 800206c:	d112      	bne.n	8002094 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800206e:	4b9d      	ldr	r3, [pc, #628]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002076:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800207a:	d10b      	bne.n	8002094 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800207c:	4b99      	ldr	r3, [pc, #612]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d05b      	beq.n	8002140 <HAL_RCC_OscConfig+0x108>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d157      	bne.n	8002140 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e236      	b.n	8002502 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800209c:	d106      	bne.n	80020ac <HAL_RCC_OscConfig+0x74>
 800209e:	4b91      	ldr	r3, [pc, #580]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a90      	ldr	r2, [pc, #576]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 80020a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a8:	6013      	str	r3, [r2, #0]
 80020aa:	e01d      	b.n	80020e8 <HAL_RCC_OscConfig+0xb0>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020b4:	d10c      	bne.n	80020d0 <HAL_RCC_OscConfig+0x98>
 80020b6:	4b8b      	ldr	r3, [pc, #556]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a8a      	ldr	r2, [pc, #552]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 80020bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020c0:	6013      	str	r3, [r2, #0]
 80020c2:	4b88      	ldr	r3, [pc, #544]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a87      	ldr	r2, [pc, #540]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 80020c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020cc:	6013      	str	r3, [r2, #0]
 80020ce:	e00b      	b.n	80020e8 <HAL_RCC_OscConfig+0xb0>
 80020d0:	4b84      	ldr	r3, [pc, #528]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a83      	ldr	r2, [pc, #524]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 80020d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020da:	6013      	str	r3, [r2, #0]
 80020dc:	4b81      	ldr	r3, [pc, #516]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a80      	ldr	r2, [pc, #512]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 80020e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d013      	beq.n	8002118 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f0:	f7ff f940 	bl	8001374 <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020f8:	f7ff f93c 	bl	8001374 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b64      	cmp	r3, #100	; 0x64
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e1fb      	b.n	8002502 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210a:	4b76      	ldr	r3, [pc, #472]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d0f0      	beq.n	80020f8 <HAL_RCC_OscConfig+0xc0>
 8002116:	e014      	b.n	8002142 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002118:	f7ff f92c 	bl	8001374 <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002120:	f7ff f928 	bl	8001374 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b64      	cmp	r3, #100	; 0x64
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e1e7      	b.n	8002502 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002132:	4b6c      	ldr	r3, [pc, #432]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1f0      	bne.n	8002120 <HAL_RCC_OscConfig+0xe8>
 800213e:	e000      	b.n	8002142 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d063      	beq.n	8002216 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800214e:	4b65      	ldr	r3, [pc, #404]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f003 030c 	and.w	r3, r3, #12
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00b      	beq.n	8002172 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800215a:	4b62      	ldr	r3, [pc, #392]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002162:	2b08      	cmp	r3, #8
 8002164:	d11c      	bne.n	80021a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002166:	4b5f      	ldr	r3, [pc, #380]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d116      	bne.n	80021a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002172:	4b5c      	ldr	r3, [pc, #368]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d005      	beq.n	800218a <HAL_RCC_OscConfig+0x152>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d001      	beq.n	800218a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e1bb      	b.n	8002502 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800218a:	4b56      	ldr	r3, [pc, #344]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	4952      	ldr	r1, [pc, #328]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 800219a:	4313      	orrs	r3, r2
 800219c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800219e:	e03a      	b.n	8002216 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d020      	beq.n	80021ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021a8:	4b4f      	ldr	r3, [pc, #316]	; (80022e8 <HAL_RCC_OscConfig+0x2b0>)
 80021aa:	2201      	movs	r2, #1
 80021ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ae:	f7ff f8e1 	bl	8001374 <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b4:	e008      	b.n	80021c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021b6:	f7ff f8dd 	bl	8001374 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e19c      	b.n	8002502 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c8:	4b46      	ldr	r3, [pc, #280]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d0f0      	beq.n	80021b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d4:	4b43      	ldr	r3, [pc, #268]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	4940      	ldr	r1, [pc, #256]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	600b      	str	r3, [r1, #0]
 80021e8:	e015      	b.n	8002216 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021ea:	4b3f      	ldr	r3, [pc, #252]	; (80022e8 <HAL_RCC_OscConfig+0x2b0>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f0:	f7ff f8c0 	bl	8001374 <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021f8:	f7ff f8bc 	bl	8001374 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b02      	cmp	r3, #2
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e17b      	b.n	8002502 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800220a:	4b36      	ldr	r3, [pc, #216]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1f0      	bne.n	80021f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0308 	and.w	r3, r3, #8
 800221e:	2b00      	cmp	r3, #0
 8002220:	d030      	beq.n	8002284 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d016      	beq.n	8002258 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800222a:	4b30      	ldr	r3, [pc, #192]	; (80022ec <HAL_RCC_OscConfig+0x2b4>)
 800222c:	2201      	movs	r2, #1
 800222e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002230:	f7ff f8a0 	bl	8001374 <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002238:	f7ff f89c 	bl	8001374 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e15b      	b.n	8002502 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800224a:	4b26      	ldr	r3, [pc, #152]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 800224c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d0f0      	beq.n	8002238 <HAL_RCC_OscConfig+0x200>
 8002256:	e015      	b.n	8002284 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002258:	4b24      	ldr	r3, [pc, #144]	; (80022ec <HAL_RCC_OscConfig+0x2b4>)
 800225a:	2200      	movs	r2, #0
 800225c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800225e:	f7ff f889 	bl	8001374 <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002266:	f7ff f885 	bl	8001374 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e144      	b.n	8002502 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002278:	4b1a      	ldr	r3, [pc, #104]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 800227a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1f0      	bne.n	8002266 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0304 	and.w	r3, r3, #4
 800228c:	2b00      	cmp	r3, #0
 800228e:	f000 80a0 	beq.w	80023d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002292:	2300      	movs	r3, #0
 8002294:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002296:	4b13      	ldr	r3, [pc, #76]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10f      	bne.n	80022c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	60bb      	str	r3, [r7, #8]
 80022a6:	4b0f      	ldr	r3, [pc, #60]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	4a0e      	ldr	r2, [pc, #56]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 80022ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022b0:	6413      	str	r3, [r2, #64]	; 0x40
 80022b2:	4b0c      	ldr	r3, [pc, #48]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 80022b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ba:	60bb      	str	r3, [r7, #8]
 80022bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022be:	2301      	movs	r3, #1
 80022c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c2:	4b0b      	ldr	r3, [pc, #44]	; (80022f0 <HAL_RCC_OscConfig+0x2b8>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d121      	bne.n	8002312 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ce:	4b08      	ldr	r3, [pc, #32]	; (80022f0 <HAL_RCC_OscConfig+0x2b8>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a07      	ldr	r2, [pc, #28]	; (80022f0 <HAL_RCC_OscConfig+0x2b8>)
 80022d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022da:	f7ff f84b 	bl	8001374 <HAL_GetTick>
 80022de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e0:	e011      	b.n	8002306 <HAL_RCC_OscConfig+0x2ce>
 80022e2:	bf00      	nop
 80022e4:	40023800 	.word	0x40023800
 80022e8:	42470000 	.word	0x42470000
 80022ec:	42470e80 	.word	0x42470e80
 80022f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022f4:	f7ff f83e 	bl	8001374 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e0fd      	b.n	8002502 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002306:	4b81      	ldr	r3, [pc, #516]	; (800250c <HAL_RCC_OscConfig+0x4d4>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0f0      	beq.n	80022f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d106      	bne.n	8002328 <HAL_RCC_OscConfig+0x2f0>
 800231a:	4b7d      	ldr	r3, [pc, #500]	; (8002510 <HAL_RCC_OscConfig+0x4d8>)
 800231c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231e:	4a7c      	ldr	r2, [pc, #496]	; (8002510 <HAL_RCC_OscConfig+0x4d8>)
 8002320:	f043 0301 	orr.w	r3, r3, #1
 8002324:	6713      	str	r3, [r2, #112]	; 0x70
 8002326:	e01c      	b.n	8002362 <HAL_RCC_OscConfig+0x32a>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	2b05      	cmp	r3, #5
 800232e:	d10c      	bne.n	800234a <HAL_RCC_OscConfig+0x312>
 8002330:	4b77      	ldr	r3, [pc, #476]	; (8002510 <HAL_RCC_OscConfig+0x4d8>)
 8002332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002334:	4a76      	ldr	r2, [pc, #472]	; (8002510 <HAL_RCC_OscConfig+0x4d8>)
 8002336:	f043 0304 	orr.w	r3, r3, #4
 800233a:	6713      	str	r3, [r2, #112]	; 0x70
 800233c:	4b74      	ldr	r3, [pc, #464]	; (8002510 <HAL_RCC_OscConfig+0x4d8>)
 800233e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002340:	4a73      	ldr	r2, [pc, #460]	; (8002510 <HAL_RCC_OscConfig+0x4d8>)
 8002342:	f043 0301 	orr.w	r3, r3, #1
 8002346:	6713      	str	r3, [r2, #112]	; 0x70
 8002348:	e00b      	b.n	8002362 <HAL_RCC_OscConfig+0x32a>
 800234a:	4b71      	ldr	r3, [pc, #452]	; (8002510 <HAL_RCC_OscConfig+0x4d8>)
 800234c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800234e:	4a70      	ldr	r2, [pc, #448]	; (8002510 <HAL_RCC_OscConfig+0x4d8>)
 8002350:	f023 0301 	bic.w	r3, r3, #1
 8002354:	6713      	str	r3, [r2, #112]	; 0x70
 8002356:	4b6e      	ldr	r3, [pc, #440]	; (8002510 <HAL_RCC_OscConfig+0x4d8>)
 8002358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800235a:	4a6d      	ldr	r2, [pc, #436]	; (8002510 <HAL_RCC_OscConfig+0x4d8>)
 800235c:	f023 0304 	bic.w	r3, r3, #4
 8002360:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d015      	beq.n	8002396 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800236a:	f7ff f803 	bl	8001374 <HAL_GetTick>
 800236e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002370:	e00a      	b.n	8002388 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002372:	f7fe ffff 	bl	8001374 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002380:	4293      	cmp	r3, r2
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e0bc      	b.n	8002502 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002388:	4b61      	ldr	r3, [pc, #388]	; (8002510 <HAL_RCC_OscConfig+0x4d8>)
 800238a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d0ee      	beq.n	8002372 <HAL_RCC_OscConfig+0x33a>
 8002394:	e014      	b.n	80023c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002396:	f7fe ffed 	bl	8001374 <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800239c:	e00a      	b.n	80023b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800239e:	f7fe ffe9 	bl	8001374 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e0a6      	b.n	8002502 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b4:	4b56      	ldr	r3, [pc, #344]	; (8002510 <HAL_RCC_OscConfig+0x4d8>)
 80023b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d1ee      	bne.n	800239e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023c0:	7dfb      	ldrb	r3, [r7, #23]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d105      	bne.n	80023d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023c6:	4b52      	ldr	r3, [pc, #328]	; (8002510 <HAL_RCC_OscConfig+0x4d8>)
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	4a51      	ldr	r2, [pc, #324]	; (8002510 <HAL_RCC_OscConfig+0x4d8>)
 80023cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f000 8092 	beq.w	8002500 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023dc:	4b4c      	ldr	r3, [pc, #304]	; (8002510 <HAL_RCC_OscConfig+0x4d8>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f003 030c 	and.w	r3, r3, #12
 80023e4:	2b08      	cmp	r3, #8
 80023e6:	d05c      	beq.n	80024a2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d141      	bne.n	8002474 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f0:	4b48      	ldr	r3, [pc, #288]	; (8002514 <HAL_RCC_OscConfig+0x4dc>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f6:	f7fe ffbd 	bl	8001374 <HAL_GetTick>
 80023fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023fc:	e008      	b.n	8002410 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023fe:	f7fe ffb9 	bl	8001374 <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e078      	b.n	8002502 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002410:	4b3f      	ldr	r3, [pc, #252]	; (8002510 <HAL_RCC_OscConfig+0x4d8>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1f0      	bne.n	80023fe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	69da      	ldr	r2, [r3, #28]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	431a      	orrs	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242a:	019b      	lsls	r3, r3, #6
 800242c:	431a      	orrs	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002432:	085b      	lsrs	r3, r3, #1
 8002434:	3b01      	subs	r3, #1
 8002436:	041b      	lsls	r3, r3, #16
 8002438:	431a      	orrs	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243e:	061b      	lsls	r3, r3, #24
 8002440:	4933      	ldr	r1, [pc, #204]	; (8002510 <HAL_RCC_OscConfig+0x4d8>)
 8002442:	4313      	orrs	r3, r2
 8002444:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002446:	4b33      	ldr	r3, [pc, #204]	; (8002514 <HAL_RCC_OscConfig+0x4dc>)
 8002448:	2201      	movs	r2, #1
 800244a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244c:	f7fe ff92 	bl	8001374 <HAL_GetTick>
 8002450:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002454:	f7fe ff8e 	bl	8001374 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e04d      	b.n	8002502 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002466:	4b2a      	ldr	r3, [pc, #168]	; (8002510 <HAL_RCC_OscConfig+0x4d8>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d0f0      	beq.n	8002454 <HAL_RCC_OscConfig+0x41c>
 8002472:	e045      	b.n	8002500 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002474:	4b27      	ldr	r3, [pc, #156]	; (8002514 <HAL_RCC_OscConfig+0x4dc>)
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247a:	f7fe ff7b 	bl	8001374 <HAL_GetTick>
 800247e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002480:	e008      	b.n	8002494 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002482:	f7fe ff77 	bl	8001374 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e036      	b.n	8002502 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002494:	4b1e      	ldr	r3, [pc, #120]	; (8002510 <HAL_RCC_OscConfig+0x4d8>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1f0      	bne.n	8002482 <HAL_RCC_OscConfig+0x44a>
 80024a0:	e02e      	b.n	8002500 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d101      	bne.n	80024ae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e029      	b.n	8002502 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024ae:	4b18      	ldr	r3, [pc, #96]	; (8002510 <HAL_RCC_OscConfig+0x4d8>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	69db      	ldr	r3, [r3, #28]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d11c      	bne.n	80024fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d115      	bne.n	80024fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024d6:	4013      	ands	r3, r2
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024dc:	4293      	cmp	r3, r2
 80024de:	d10d      	bne.n	80024fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d106      	bne.n	80024fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d001      	beq.n	8002500 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e000      	b.n	8002502 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3718      	adds	r7, #24
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40007000 	.word	0x40007000
 8002510:	40023800 	.word	0x40023800
 8002514:	42470060 	.word	0x42470060

08002518 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d101      	bne.n	800252c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e0cc      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800252c:	4b68      	ldr	r3, [pc, #416]	; (80026d0 <HAL_RCC_ClockConfig+0x1b8>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 030f 	and.w	r3, r3, #15
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	429a      	cmp	r2, r3
 8002538:	d90c      	bls.n	8002554 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800253a:	4b65      	ldr	r3, [pc, #404]	; (80026d0 <HAL_RCC_ClockConfig+0x1b8>)
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	b2d2      	uxtb	r2, r2
 8002540:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002542:	4b63      	ldr	r3, [pc, #396]	; (80026d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 030f 	and.w	r3, r3, #15
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	429a      	cmp	r2, r3
 800254e:	d001      	beq.n	8002554 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e0b8      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d020      	beq.n	80025a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	2b00      	cmp	r3, #0
 800256a:	d005      	beq.n	8002578 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800256c:	4b59      	ldr	r3, [pc, #356]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	4a58      	ldr	r2, [pc, #352]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002572:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002576:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0308 	and.w	r3, r3, #8
 8002580:	2b00      	cmp	r3, #0
 8002582:	d005      	beq.n	8002590 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002584:	4b53      	ldr	r3, [pc, #332]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	4a52      	ldr	r2, [pc, #328]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 800258a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800258e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002590:	4b50      	ldr	r3, [pc, #320]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	494d      	ldr	r1, [pc, #308]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d044      	beq.n	8002638 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d107      	bne.n	80025c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b6:	4b47      	ldr	r3, [pc, #284]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d119      	bne.n	80025f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e07f      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d003      	beq.n	80025d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025d2:	2b03      	cmp	r3, #3
 80025d4:	d107      	bne.n	80025e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025d6:	4b3f      	ldr	r3, [pc, #252]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d109      	bne.n	80025f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e06f      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e6:	4b3b      	ldr	r3, [pc, #236]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e067      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025f6:	4b37      	ldr	r3, [pc, #220]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f023 0203 	bic.w	r2, r3, #3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	4934      	ldr	r1, [pc, #208]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002604:	4313      	orrs	r3, r2
 8002606:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002608:	f7fe feb4 	bl	8001374 <HAL_GetTick>
 800260c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800260e:	e00a      	b.n	8002626 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002610:	f7fe feb0 	bl	8001374 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	f241 3288 	movw	r2, #5000	; 0x1388
 800261e:	4293      	cmp	r3, r2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e04f      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002626:	4b2b      	ldr	r3, [pc, #172]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f003 020c 	and.w	r2, r3, #12
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	429a      	cmp	r2, r3
 8002636:	d1eb      	bne.n	8002610 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002638:	4b25      	ldr	r3, [pc, #148]	; (80026d0 <HAL_RCC_ClockConfig+0x1b8>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 030f 	and.w	r3, r3, #15
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	429a      	cmp	r2, r3
 8002644:	d20c      	bcs.n	8002660 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002646:	4b22      	ldr	r3, [pc, #136]	; (80026d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	b2d2      	uxtb	r2, r2
 800264c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800264e:	4b20      	ldr	r3, [pc, #128]	; (80026d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 030f 	and.w	r3, r3, #15
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	429a      	cmp	r2, r3
 800265a:	d001      	beq.n	8002660 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e032      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0304 	and.w	r3, r3, #4
 8002668:	2b00      	cmp	r3, #0
 800266a:	d008      	beq.n	800267e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800266c:	4b19      	ldr	r3, [pc, #100]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	4916      	ldr	r1, [pc, #88]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 800267a:	4313      	orrs	r3, r2
 800267c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0308 	and.w	r3, r3, #8
 8002686:	2b00      	cmp	r3, #0
 8002688:	d009      	beq.n	800269e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800268a:	4b12      	ldr	r3, [pc, #72]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	490e      	ldr	r1, [pc, #56]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 800269a:	4313      	orrs	r3, r2
 800269c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800269e:	f000 f821 	bl	80026e4 <HAL_RCC_GetSysClockFreq>
 80026a2:	4601      	mov	r1, r0
 80026a4:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	091b      	lsrs	r3, r3, #4
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	4a0a      	ldr	r2, [pc, #40]	; (80026d8 <HAL_RCC_ClockConfig+0x1c0>)
 80026b0:	5cd3      	ldrb	r3, [r2, r3]
 80026b2:	fa21 f303 	lsr.w	r3, r1, r3
 80026b6:	4a09      	ldr	r2, [pc, #36]	; (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 80026b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026ba:	4b09      	ldr	r3, [pc, #36]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7fe fe14 	bl	80012ec <HAL_InitTick>

  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40023c00 	.word	0x40023c00
 80026d4:	40023800 	.word	0x40023800
 80026d8:	08004ff8 	.word	0x08004ff8
 80026dc:	20000000 	.word	0x20000000
 80026e0:	20000004 	.word	0x20000004

080026e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026ea:	2300      	movs	r3, #0
 80026ec:	607b      	str	r3, [r7, #4]
 80026ee:	2300      	movs	r3, #0
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	2300      	movs	r3, #0
 80026f4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80026f6:	2300      	movs	r3, #0
 80026f8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026fa:	4b63      	ldr	r3, [pc, #396]	; (8002888 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f003 030c 	and.w	r3, r3, #12
 8002702:	2b04      	cmp	r3, #4
 8002704:	d007      	beq.n	8002716 <HAL_RCC_GetSysClockFreq+0x32>
 8002706:	2b08      	cmp	r3, #8
 8002708:	d008      	beq.n	800271c <HAL_RCC_GetSysClockFreq+0x38>
 800270a:	2b00      	cmp	r3, #0
 800270c:	f040 80b4 	bne.w	8002878 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002710:	4b5e      	ldr	r3, [pc, #376]	; (800288c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002712:	60bb      	str	r3, [r7, #8]
       break;
 8002714:	e0b3      	b.n	800287e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002716:	4b5e      	ldr	r3, [pc, #376]	; (8002890 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002718:	60bb      	str	r3, [r7, #8]
      break;
 800271a:	e0b0      	b.n	800287e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800271c:	4b5a      	ldr	r3, [pc, #360]	; (8002888 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002724:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002726:	4b58      	ldr	r3, [pc, #352]	; (8002888 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d04a      	beq.n	80027c8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002732:	4b55      	ldr	r3, [pc, #340]	; (8002888 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	099b      	lsrs	r3, r3, #6
 8002738:	f04f 0400 	mov.w	r4, #0
 800273c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002740:	f04f 0200 	mov.w	r2, #0
 8002744:	ea03 0501 	and.w	r5, r3, r1
 8002748:	ea04 0602 	and.w	r6, r4, r2
 800274c:	4629      	mov	r1, r5
 800274e:	4632      	mov	r2, r6
 8002750:	f04f 0300 	mov.w	r3, #0
 8002754:	f04f 0400 	mov.w	r4, #0
 8002758:	0154      	lsls	r4, r2, #5
 800275a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800275e:	014b      	lsls	r3, r1, #5
 8002760:	4619      	mov	r1, r3
 8002762:	4622      	mov	r2, r4
 8002764:	1b49      	subs	r1, r1, r5
 8002766:	eb62 0206 	sbc.w	r2, r2, r6
 800276a:	f04f 0300 	mov.w	r3, #0
 800276e:	f04f 0400 	mov.w	r4, #0
 8002772:	0194      	lsls	r4, r2, #6
 8002774:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002778:	018b      	lsls	r3, r1, #6
 800277a:	1a5b      	subs	r3, r3, r1
 800277c:	eb64 0402 	sbc.w	r4, r4, r2
 8002780:	f04f 0100 	mov.w	r1, #0
 8002784:	f04f 0200 	mov.w	r2, #0
 8002788:	00e2      	lsls	r2, r4, #3
 800278a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800278e:	00d9      	lsls	r1, r3, #3
 8002790:	460b      	mov	r3, r1
 8002792:	4614      	mov	r4, r2
 8002794:	195b      	adds	r3, r3, r5
 8002796:	eb44 0406 	adc.w	r4, r4, r6
 800279a:	f04f 0100 	mov.w	r1, #0
 800279e:	f04f 0200 	mov.w	r2, #0
 80027a2:	0262      	lsls	r2, r4, #9
 80027a4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80027a8:	0259      	lsls	r1, r3, #9
 80027aa:	460b      	mov	r3, r1
 80027ac:	4614      	mov	r4, r2
 80027ae:	4618      	mov	r0, r3
 80027b0:	4621      	mov	r1, r4
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f04f 0400 	mov.w	r4, #0
 80027b8:	461a      	mov	r2, r3
 80027ba:	4623      	mov	r3, r4
 80027bc:	f7fd fd04 	bl	80001c8 <__aeabi_uldivmod>
 80027c0:	4603      	mov	r3, r0
 80027c2:	460c      	mov	r4, r1
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	e049      	b.n	800285c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027c8:	4b2f      	ldr	r3, [pc, #188]	; (8002888 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	099b      	lsrs	r3, r3, #6
 80027ce:	f04f 0400 	mov.w	r4, #0
 80027d2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80027d6:	f04f 0200 	mov.w	r2, #0
 80027da:	ea03 0501 	and.w	r5, r3, r1
 80027de:	ea04 0602 	and.w	r6, r4, r2
 80027e2:	4629      	mov	r1, r5
 80027e4:	4632      	mov	r2, r6
 80027e6:	f04f 0300 	mov.w	r3, #0
 80027ea:	f04f 0400 	mov.w	r4, #0
 80027ee:	0154      	lsls	r4, r2, #5
 80027f0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80027f4:	014b      	lsls	r3, r1, #5
 80027f6:	4619      	mov	r1, r3
 80027f8:	4622      	mov	r2, r4
 80027fa:	1b49      	subs	r1, r1, r5
 80027fc:	eb62 0206 	sbc.w	r2, r2, r6
 8002800:	f04f 0300 	mov.w	r3, #0
 8002804:	f04f 0400 	mov.w	r4, #0
 8002808:	0194      	lsls	r4, r2, #6
 800280a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800280e:	018b      	lsls	r3, r1, #6
 8002810:	1a5b      	subs	r3, r3, r1
 8002812:	eb64 0402 	sbc.w	r4, r4, r2
 8002816:	f04f 0100 	mov.w	r1, #0
 800281a:	f04f 0200 	mov.w	r2, #0
 800281e:	00e2      	lsls	r2, r4, #3
 8002820:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002824:	00d9      	lsls	r1, r3, #3
 8002826:	460b      	mov	r3, r1
 8002828:	4614      	mov	r4, r2
 800282a:	195b      	adds	r3, r3, r5
 800282c:	eb44 0406 	adc.w	r4, r4, r6
 8002830:	f04f 0100 	mov.w	r1, #0
 8002834:	f04f 0200 	mov.w	r2, #0
 8002838:	02a2      	lsls	r2, r4, #10
 800283a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800283e:	0299      	lsls	r1, r3, #10
 8002840:	460b      	mov	r3, r1
 8002842:	4614      	mov	r4, r2
 8002844:	4618      	mov	r0, r3
 8002846:	4621      	mov	r1, r4
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f04f 0400 	mov.w	r4, #0
 800284e:	461a      	mov	r2, r3
 8002850:	4623      	mov	r3, r4
 8002852:	f7fd fcb9 	bl	80001c8 <__aeabi_uldivmod>
 8002856:	4603      	mov	r3, r0
 8002858:	460c      	mov	r4, r1
 800285a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800285c:	4b0a      	ldr	r3, [pc, #40]	; (8002888 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	0c1b      	lsrs	r3, r3, #16
 8002862:	f003 0303 	and.w	r3, r3, #3
 8002866:	3301      	adds	r3, #1
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	fbb2 f3f3 	udiv	r3, r2, r3
 8002874:	60bb      	str	r3, [r7, #8]
      break;
 8002876:	e002      	b.n	800287e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002878:	4b04      	ldr	r3, [pc, #16]	; (800288c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800287a:	60bb      	str	r3, [r7, #8]
      break;
 800287c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800287e:	68bb      	ldr	r3, [r7, #8]
}
 8002880:	4618      	mov	r0, r3
 8002882:	3714      	adds	r7, #20
 8002884:	46bd      	mov	sp, r7
 8002886:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002888:	40023800 	.word	0x40023800
 800288c:	00f42400 	.word	0x00f42400
 8002890:	007a1200 	.word	0x007a1200

08002894 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002898:	4b03      	ldr	r3, [pc, #12]	; (80028a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800289a:	681b      	ldr	r3, [r3, #0]
}
 800289c:	4618      	mov	r0, r3
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	20000000 	.word	0x20000000

080028ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028b0:	f7ff fff0 	bl	8002894 <HAL_RCC_GetHCLKFreq>
 80028b4:	4601      	mov	r1, r0
 80028b6:	4b05      	ldr	r3, [pc, #20]	; (80028cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	0a9b      	lsrs	r3, r3, #10
 80028bc:	f003 0307 	and.w	r3, r3, #7
 80028c0:	4a03      	ldr	r2, [pc, #12]	; (80028d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028c2:	5cd3      	ldrb	r3, [r2, r3]
 80028c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40023800 	.word	0x40023800
 80028d0:	08005008 	.word	0x08005008

080028d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80028d8:	f7ff ffdc 	bl	8002894 <HAL_RCC_GetHCLKFreq>
 80028dc:	4601      	mov	r1, r0
 80028de:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	0b5b      	lsrs	r3, r3, #13
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	4a03      	ldr	r2, [pc, #12]	; (80028f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028ea:	5cd3      	ldrb	r3, [r2, r3]
 80028ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40023800 	.word	0x40023800
 80028f8:	08005008 	.word	0x08005008

080028fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e01d      	b.n	800294a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d106      	bne.n	8002928 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7fe f9e4 	bl	8000cf0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2202      	movs	r2, #2
 800292c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	3304      	adds	r3, #4
 8002938:	4619      	mov	r1, r3
 800293a:	4610      	mov	r0, r2
 800293c:	f000 fbd2 	bl	80030e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002952:	b480      	push	{r7}
 8002954:	b085      	sub	sp, #20
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2202      	movs	r2, #2
 800295e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2b06      	cmp	r3, #6
 8002972:	d007      	beq.n	8002984 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 0201 	orr.w	r2, r2, #1
 8002982:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr

0800299a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b082      	sub	sp, #8
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d101      	bne.n	80029ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e01d      	b.n	80029e8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d106      	bne.n	80029c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7fe f9e7 	bl	8000d94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2202      	movs	r2, #2
 80029ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	3304      	adds	r3, #4
 80029d6:	4619      	mov	r1, r3
 80029d8:	4610      	mov	r0, r2
 80029da:	f000 fb83 	bl	80030e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3708      	adds	r7, #8
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2201      	movs	r2, #1
 8002a00:	6839      	ldr	r1, [r7, #0]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f000 fe58 	bl	80036b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a15      	ldr	r2, [pc, #84]	; (8002a64 <HAL_TIM_PWM_Start+0x74>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d004      	beq.n	8002a1c <HAL_TIM_PWM_Start+0x2c>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a14      	ldr	r2, [pc, #80]	; (8002a68 <HAL_TIM_PWM_Start+0x78>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d101      	bne.n	8002a20 <HAL_TIM_PWM_Start+0x30>
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e000      	b.n	8002a22 <HAL_TIM_PWM_Start+0x32>
 8002a20:	2300      	movs	r3, #0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d007      	beq.n	8002a36 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a34:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f003 0307 	and.w	r3, r3, #7
 8002a40:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2b06      	cmp	r3, #6
 8002a46:	d007      	beq.n	8002a58 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f042 0201 	orr.w	r2, r2, #1
 8002a56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40010000 	.word	0x40010000
 8002a68:	40010400 	.word	0x40010400

08002a6c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	2b0c      	cmp	r3, #12
 8002a7a:	d841      	bhi.n	8002b00 <HAL_TIM_PWM_Start_IT+0x94>
 8002a7c:	a201      	add	r2, pc, #4	; (adr r2, 8002a84 <HAL_TIM_PWM_Start_IT+0x18>)
 8002a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a82:	bf00      	nop
 8002a84:	08002ab9 	.word	0x08002ab9
 8002a88:	08002b01 	.word	0x08002b01
 8002a8c:	08002b01 	.word	0x08002b01
 8002a90:	08002b01 	.word	0x08002b01
 8002a94:	08002acb 	.word	0x08002acb
 8002a98:	08002b01 	.word	0x08002b01
 8002a9c:	08002b01 	.word	0x08002b01
 8002aa0:	08002b01 	.word	0x08002b01
 8002aa4:	08002add 	.word	0x08002add
 8002aa8:	08002b01 	.word	0x08002b01
 8002aac:	08002b01 	.word	0x08002b01
 8002ab0:	08002b01 	.word	0x08002b01
 8002ab4:	08002aef 	.word	0x08002aef
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68da      	ldr	r2, [r3, #12]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f042 0202 	orr.w	r2, r2, #2
 8002ac6:	60da      	str	r2, [r3, #12]
      break;
 8002ac8:	e01b      	b.n	8002b02 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68da      	ldr	r2, [r3, #12]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f042 0204 	orr.w	r2, r2, #4
 8002ad8:	60da      	str	r2, [r3, #12]
      break;
 8002ada:	e012      	b.n	8002b02 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68da      	ldr	r2, [r3, #12]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f042 0208 	orr.w	r2, r2, #8
 8002aea:	60da      	str	r2, [r3, #12]
      break;
 8002aec:	e009      	b.n	8002b02 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68da      	ldr	r2, [r3, #12]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f042 0210 	orr.w	r2, r2, #16
 8002afc:	60da      	str	r2, [r3, #12]
      break;
 8002afe:	e000      	b.n	8002b02 <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 8002b00:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2201      	movs	r2, #1
 8002b08:	6839      	ldr	r1, [r7, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f000 fdd4 	bl	80036b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a15      	ldr	r2, [pc, #84]	; (8002b6c <HAL_TIM_PWM_Start_IT+0x100>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d004      	beq.n	8002b24 <HAL_TIM_PWM_Start_IT+0xb8>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a14      	ldr	r2, [pc, #80]	; (8002b70 <HAL_TIM_PWM_Start_IT+0x104>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d101      	bne.n	8002b28 <HAL_TIM_PWM_Start_IT+0xbc>
 8002b24:	2301      	movs	r3, #1
 8002b26:	e000      	b.n	8002b2a <HAL_TIM_PWM_Start_IT+0xbe>
 8002b28:	2300      	movs	r3, #0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d007      	beq.n	8002b3e <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b3c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f003 0307 	and.w	r3, r3, #7
 8002b48:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2b06      	cmp	r3, #6
 8002b4e:	d007      	beq.n	8002b60 <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f042 0201 	orr.w	r2, r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3710      	adds	r7, #16
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	40010000 	.word	0x40010000
 8002b70:	40010400 	.word	0x40010400

08002b74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d122      	bne.n	8002bd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d11b      	bne.n	8002bd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f06f 0202 	mvn.w	r2, #2
 8002ba0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	f003 0303 	and.w	r3, r3, #3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 fa75 	bl	80030a6 <HAL_TIM_IC_CaptureCallback>
 8002bbc:	e005      	b.n	8002bca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 fa67 	bl	8003092 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f000 fa78 	bl	80030ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	f003 0304 	and.w	r3, r3, #4
 8002bda:	2b04      	cmp	r3, #4
 8002bdc:	d122      	bne.n	8002c24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	2b04      	cmp	r3, #4
 8002bea:	d11b      	bne.n	8002c24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f06f 0204 	mvn.w	r2, #4
 8002bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2202      	movs	r2, #2
 8002bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 fa4b 	bl	80030a6 <HAL_TIM_IC_CaptureCallback>
 8002c10:	e005      	b.n	8002c1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 fa3d 	bl	8003092 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f000 fa4e 	bl	80030ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	f003 0308 	and.w	r3, r3, #8
 8002c2e:	2b08      	cmp	r3, #8
 8002c30:	d122      	bne.n	8002c78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	f003 0308 	and.w	r3, r3, #8
 8002c3c:	2b08      	cmp	r3, #8
 8002c3e:	d11b      	bne.n	8002c78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f06f 0208 	mvn.w	r2, #8
 8002c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2204      	movs	r2, #4
 8002c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	f003 0303 	and.w	r3, r3, #3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 fa21 	bl	80030a6 <HAL_TIM_IC_CaptureCallback>
 8002c64:	e005      	b.n	8002c72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 fa13 	bl	8003092 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 fa24 	bl	80030ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	f003 0310 	and.w	r3, r3, #16
 8002c82:	2b10      	cmp	r3, #16
 8002c84:	d122      	bne.n	8002ccc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f003 0310 	and.w	r3, r3, #16
 8002c90:	2b10      	cmp	r3, #16
 8002c92:	d11b      	bne.n	8002ccc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f06f 0210 	mvn.w	r2, #16
 8002c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2208      	movs	r2, #8
 8002ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f9f7 	bl	80030a6 <HAL_TIM_IC_CaptureCallback>
 8002cb8:	e005      	b.n	8002cc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f9e9 	bl	8003092 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 f9fa 	bl	80030ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d10e      	bne.n	8002cf8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d107      	bne.n	8002cf8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f06f 0201 	mvn.w	r2, #1
 8002cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f9c3 	bl	800307e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d02:	2b80      	cmp	r3, #128	; 0x80
 8002d04:	d10e      	bne.n	8002d24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d10:	2b80      	cmp	r3, #128	; 0x80
 8002d12:	d107      	bne.n	8002d24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 fd76 	bl	8003810 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2e:	2b40      	cmp	r3, #64	; 0x40
 8002d30:	d10e      	bne.n	8002d50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3c:	2b40      	cmp	r3, #64	; 0x40
 8002d3e:	d107      	bne.n	8002d50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f9bf 	bl	80030ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	f003 0320 	and.w	r3, r3, #32
 8002d5a:	2b20      	cmp	r3, #32
 8002d5c:	d10e      	bne.n	8002d7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	f003 0320 	and.w	r3, r3, #32
 8002d68:	2b20      	cmp	r3, #32
 8002d6a:	d107      	bne.n	8002d7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f06f 0220 	mvn.w	r2, #32
 8002d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 fd40 	bl	80037fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d7c:	bf00      	nop
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d101      	bne.n	8002d9e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	e0b4      	b.n	8002f08 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2202      	movs	r2, #2
 8002daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2b0c      	cmp	r3, #12
 8002db2:	f200 809f 	bhi.w	8002ef4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002db6:	a201      	add	r2, pc, #4	; (adr r2, 8002dbc <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dbc:	08002df1 	.word	0x08002df1
 8002dc0:	08002ef5 	.word	0x08002ef5
 8002dc4:	08002ef5 	.word	0x08002ef5
 8002dc8:	08002ef5 	.word	0x08002ef5
 8002dcc:	08002e31 	.word	0x08002e31
 8002dd0:	08002ef5 	.word	0x08002ef5
 8002dd4:	08002ef5 	.word	0x08002ef5
 8002dd8:	08002ef5 	.word	0x08002ef5
 8002ddc:	08002e73 	.word	0x08002e73
 8002de0:	08002ef5 	.word	0x08002ef5
 8002de4:	08002ef5 	.word	0x08002ef5
 8002de8:	08002ef5 	.word	0x08002ef5
 8002dec:	08002eb3 	.word	0x08002eb3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68b9      	ldr	r1, [r7, #8]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 fa14 	bl	8003224 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	699a      	ldr	r2, [r3, #24]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f042 0208 	orr.w	r2, r2, #8
 8002e0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	699a      	ldr	r2, [r3, #24]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f022 0204 	bic.w	r2, r2, #4
 8002e1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6999      	ldr	r1, [r3, #24]
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	691a      	ldr	r2, [r3, #16]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	619a      	str	r2, [r3, #24]
      break;
 8002e2e:	e062      	b.n	8002ef6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68b9      	ldr	r1, [r7, #8]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f000 fa64 	bl	8003304 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	699a      	ldr	r2, [r3, #24]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	699a      	ldr	r2, [r3, #24]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6999      	ldr	r1, [r3, #24]
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	021a      	lsls	r2, r3, #8
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	619a      	str	r2, [r3, #24]
      break;
 8002e70:	e041      	b.n	8002ef6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68b9      	ldr	r1, [r7, #8]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f000 fab9 	bl	80033f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	69da      	ldr	r2, [r3, #28]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f042 0208 	orr.w	r2, r2, #8
 8002e8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	69da      	ldr	r2, [r3, #28]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 0204 	bic.w	r2, r2, #4
 8002e9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	69d9      	ldr	r1, [r3, #28]
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	691a      	ldr	r2, [r3, #16]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	61da      	str	r2, [r3, #28]
      break;
 8002eb0:	e021      	b.n	8002ef6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68b9      	ldr	r1, [r7, #8]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f000 fb0d 	bl	80034d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	69da      	ldr	r2, [r3, #28]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ecc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	69da      	ldr	r2, [r3, #28]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002edc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	69d9      	ldr	r1, [r3, #28]
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	021a      	lsls	r2, r3, #8
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	61da      	str	r2, [r3, #28]
      break;
 8002ef2:	e000      	b.n	8002ef6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002ef4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3710      	adds	r7, #16
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d101      	bne.n	8002f28 <HAL_TIM_ConfigClockSource+0x18>
 8002f24:	2302      	movs	r3, #2
 8002f26:	e0a6      	b.n	8003076 <HAL_TIM_ConfigClockSource+0x166>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2202      	movs	r2, #2
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f4e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2b40      	cmp	r3, #64	; 0x40
 8002f5e:	d067      	beq.n	8003030 <HAL_TIM_ConfigClockSource+0x120>
 8002f60:	2b40      	cmp	r3, #64	; 0x40
 8002f62:	d80b      	bhi.n	8002f7c <HAL_TIM_ConfigClockSource+0x6c>
 8002f64:	2b10      	cmp	r3, #16
 8002f66:	d073      	beq.n	8003050 <HAL_TIM_ConfigClockSource+0x140>
 8002f68:	2b10      	cmp	r3, #16
 8002f6a:	d802      	bhi.n	8002f72 <HAL_TIM_ConfigClockSource+0x62>
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d06f      	beq.n	8003050 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002f70:	e078      	b.n	8003064 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002f72:	2b20      	cmp	r3, #32
 8002f74:	d06c      	beq.n	8003050 <HAL_TIM_ConfigClockSource+0x140>
 8002f76:	2b30      	cmp	r3, #48	; 0x30
 8002f78:	d06a      	beq.n	8003050 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002f7a:	e073      	b.n	8003064 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002f7c:	2b70      	cmp	r3, #112	; 0x70
 8002f7e:	d00d      	beq.n	8002f9c <HAL_TIM_ConfigClockSource+0x8c>
 8002f80:	2b70      	cmp	r3, #112	; 0x70
 8002f82:	d804      	bhi.n	8002f8e <HAL_TIM_ConfigClockSource+0x7e>
 8002f84:	2b50      	cmp	r3, #80	; 0x50
 8002f86:	d033      	beq.n	8002ff0 <HAL_TIM_ConfigClockSource+0xe0>
 8002f88:	2b60      	cmp	r3, #96	; 0x60
 8002f8a:	d041      	beq.n	8003010 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002f8c:	e06a      	b.n	8003064 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f92:	d066      	beq.n	8003062 <HAL_TIM_ConfigClockSource+0x152>
 8002f94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f98:	d017      	beq.n	8002fca <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002f9a:	e063      	b.n	8003064 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6818      	ldr	r0, [r3, #0]
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	6899      	ldr	r1, [r3, #8]
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685a      	ldr	r2, [r3, #4]
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	f000 fb64 	bl	8003678 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002fbe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	609a      	str	r2, [r3, #8]
      break;
 8002fc8:	e04c      	b.n	8003064 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6818      	ldr	r0, [r3, #0]
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	6899      	ldr	r1, [r3, #8]
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685a      	ldr	r2, [r3, #4]
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	f000 fb4d 	bl	8003678 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fec:	609a      	str	r2, [r3, #8]
      break;
 8002fee:	e039      	b.n	8003064 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6818      	ldr	r0, [r3, #0]
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	6859      	ldr	r1, [r3, #4]
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	f000 fac1 	bl	8003584 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2150      	movs	r1, #80	; 0x50
 8003008:	4618      	mov	r0, r3
 800300a:	f000 fb1a 	bl	8003642 <TIM_ITRx_SetConfig>
      break;
 800300e:	e029      	b.n	8003064 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6818      	ldr	r0, [r3, #0]
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	6859      	ldr	r1, [r3, #4]
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	461a      	mov	r2, r3
 800301e:	f000 fae0 	bl	80035e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2160      	movs	r1, #96	; 0x60
 8003028:	4618      	mov	r0, r3
 800302a:	f000 fb0a 	bl	8003642 <TIM_ITRx_SetConfig>
      break;
 800302e:	e019      	b.n	8003064 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6818      	ldr	r0, [r3, #0]
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	6859      	ldr	r1, [r3, #4]
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	461a      	mov	r2, r3
 800303e:	f000 faa1 	bl	8003584 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2140      	movs	r1, #64	; 0x40
 8003048:	4618      	mov	r0, r3
 800304a:	f000 fafa 	bl	8003642 <TIM_ITRx_SetConfig>
      break;
 800304e:	e009      	b.n	8003064 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4619      	mov	r1, r3
 800305a:	4610      	mov	r0, r2
 800305c:	f000 faf1 	bl	8003642 <TIM_ITRx_SetConfig>
      break;
 8003060:	e000      	b.n	8003064 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003062:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3710      	adds	r7, #16
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800307e:	b480      	push	{r7}
 8003080:	b083      	sub	sp, #12
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003086:	bf00      	nop
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr

08003092 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003092:	b480      	push	{r7}
 8003094:	b083      	sub	sp, #12
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800309a:	bf00      	nop
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr

080030a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030a6:	b480      	push	{r7}
 80030a8:	b083      	sub	sp, #12
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030ae:	bf00      	nop
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr

080030ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030ba:	b480      	push	{r7}
 80030bc:	b083      	sub	sp, #12
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b083      	sub	sp, #12
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
	...

080030e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a40      	ldr	r2, [pc, #256]	; (80031f8 <TIM_Base_SetConfig+0x114>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d013      	beq.n	8003124 <TIM_Base_SetConfig+0x40>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003102:	d00f      	beq.n	8003124 <TIM_Base_SetConfig+0x40>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a3d      	ldr	r2, [pc, #244]	; (80031fc <TIM_Base_SetConfig+0x118>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d00b      	beq.n	8003124 <TIM_Base_SetConfig+0x40>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a3c      	ldr	r2, [pc, #240]	; (8003200 <TIM_Base_SetConfig+0x11c>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d007      	beq.n	8003124 <TIM_Base_SetConfig+0x40>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a3b      	ldr	r2, [pc, #236]	; (8003204 <TIM_Base_SetConfig+0x120>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d003      	beq.n	8003124 <TIM_Base_SetConfig+0x40>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a3a      	ldr	r2, [pc, #232]	; (8003208 <TIM_Base_SetConfig+0x124>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d108      	bne.n	8003136 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800312a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	4313      	orrs	r3, r2
 8003134:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a2f      	ldr	r2, [pc, #188]	; (80031f8 <TIM_Base_SetConfig+0x114>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d02b      	beq.n	8003196 <TIM_Base_SetConfig+0xb2>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003144:	d027      	beq.n	8003196 <TIM_Base_SetConfig+0xb2>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a2c      	ldr	r2, [pc, #176]	; (80031fc <TIM_Base_SetConfig+0x118>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d023      	beq.n	8003196 <TIM_Base_SetConfig+0xb2>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a2b      	ldr	r2, [pc, #172]	; (8003200 <TIM_Base_SetConfig+0x11c>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d01f      	beq.n	8003196 <TIM_Base_SetConfig+0xb2>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a2a      	ldr	r2, [pc, #168]	; (8003204 <TIM_Base_SetConfig+0x120>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d01b      	beq.n	8003196 <TIM_Base_SetConfig+0xb2>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a29      	ldr	r2, [pc, #164]	; (8003208 <TIM_Base_SetConfig+0x124>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d017      	beq.n	8003196 <TIM_Base_SetConfig+0xb2>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a28      	ldr	r2, [pc, #160]	; (800320c <TIM_Base_SetConfig+0x128>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d013      	beq.n	8003196 <TIM_Base_SetConfig+0xb2>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a27      	ldr	r2, [pc, #156]	; (8003210 <TIM_Base_SetConfig+0x12c>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d00f      	beq.n	8003196 <TIM_Base_SetConfig+0xb2>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a26      	ldr	r2, [pc, #152]	; (8003214 <TIM_Base_SetConfig+0x130>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d00b      	beq.n	8003196 <TIM_Base_SetConfig+0xb2>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a25      	ldr	r2, [pc, #148]	; (8003218 <TIM_Base_SetConfig+0x134>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d007      	beq.n	8003196 <TIM_Base_SetConfig+0xb2>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a24      	ldr	r2, [pc, #144]	; (800321c <TIM_Base_SetConfig+0x138>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d003      	beq.n	8003196 <TIM_Base_SetConfig+0xb2>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a23      	ldr	r2, [pc, #140]	; (8003220 <TIM_Base_SetConfig+0x13c>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d108      	bne.n	80031a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800319c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a0a      	ldr	r2, [pc, #40]	; (80031f8 <TIM_Base_SetConfig+0x114>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d003      	beq.n	80031dc <TIM_Base_SetConfig+0xf8>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a0c      	ldr	r2, [pc, #48]	; (8003208 <TIM_Base_SetConfig+0x124>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d103      	bne.n	80031e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	691a      	ldr	r2, [r3, #16]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	615a      	str	r2, [r3, #20]
}
 80031ea:	bf00      	nop
 80031ec:	3714      	adds	r7, #20
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	40010000 	.word	0x40010000
 80031fc:	40000400 	.word	0x40000400
 8003200:	40000800 	.word	0x40000800
 8003204:	40000c00 	.word	0x40000c00
 8003208:	40010400 	.word	0x40010400
 800320c:	40014000 	.word	0x40014000
 8003210:	40014400 	.word	0x40014400
 8003214:	40014800 	.word	0x40014800
 8003218:	40001800 	.word	0x40001800
 800321c:	40001c00 	.word	0x40001c00
 8003220:	40002000 	.word	0x40002000

08003224 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003224:	b480      	push	{r7}
 8003226:	b087      	sub	sp, #28
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	f023 0201 	bic.w	r2, r3, #1
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f023 0303 	bic.w	r3, r3, #3
 800325a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	4313      	orrs	r3, r2
 8003264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	f023 0302 	bic.w	r3, r3, #2
 800326c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	4313      	orrs	r3, r2
 8003276:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a20      	ldr	r2, [pc, #128]	; (80032fc <TIM_OC1_SetConfig+0xd8>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d003      	beq.n	8003288 <TIM_OC1_SetConfig+0x64>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a1f      	ldr	r2, [pc, #124]	; (8003300 <TIM_OC1_SetConfig+0xdc>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d10c      	bne.n	80032a2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	f023 0308 	bic.w	r3, r3, #8
 800328e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	4313      	orrs	r3, r2
 8003298:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	f023 0304 	bic.w	r3, r3, #4
 80032a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a15      	ldr	r2, [pc, #84]	; (80032fc <TIM_OC1_SetConfig+0xd8>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d003      	beq.n	80032b2 <TIM_OC1_SetConfig+0x8e>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a14      	ldr	r2, [pc, #80]	; (8003300 <TIM_OC1_SetConfig+0xdc>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d111      	bne.n	80032d6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685a      	ldr	r2, [r3, #4]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	697a      	ldr	r2, [r7, #20]
 80032ee:	621a      	str	r2, [r3, #32]
}
 80032f0:	bf00      	nop
 80032f2:	371c      	adds	r7, #28
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr
 80032fc:	40010000 	.word	0x40010000
 8003300:	40010400 	.word	0x40010400

08003304 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003304:	b480      	push	{r7}
 8003306:	b087      	sub	sp, #28
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	f023 0210 	bic.w	r2, r3, #16
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800333a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	021b      	lsls	r3, r3, #8
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	4313      	orrs	r3, r2
 8003346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	f023 0320 	bic.w	r3, r3, #32
 800334e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	011b      	lsls	r3, r3, #4
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	4313      	orrs	r3, r2
 800335a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a22      	ldr	r2, [pc, #136]	; (80033e8 <TIM_OC2_SetConfig+0xe4>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d003      	beq.n	800336c <TIM_OC2_SetConfig+0x68>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a21      	ldr	r2, [pc, #132]	; (80033ec <TIM_OC2_SetConfig+0xe8>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d10d      	bne.n	8003388 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003372:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	011b      	lsls	r3, r3, #4
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	4313      	orrs	r3, r2
 800337e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003386:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a17      	ldr	r2, [pc, #92]	; (80033e8 <TIM_OC2_SetConfig+0xe4>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d003      	beq.n	8003398 <TIM_OC2_SetConfig+0x94>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a16      	ldr	r2, [pc, #88]	; (80033ec <TIM_OC2_SetConfig+0xe8>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d113      	bne.n	80033c0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800339e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	4313      	orrs	r3, r2
 80033be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685a      	ldr	r2, [r3, #4]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	621a      	str	r2, [r3, #32]
}
 80033da:	bf00      	nop
 80033dc:	371c      	adds	r7, #28
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	40010000 	.word	0x40010000
 80033ec:	40010400 	.word	0x40010400

080033f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b087      	sub	sp, #28
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a1b      	ldr	r3, [r3, #32]
 80033fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800341e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f023 0303 	bic.w	r3, r3, #3
 8003426:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	4313      	orrs	r3, r2
 8003430:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003438:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	021b      	lsls	r3, r3, #8
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	4313      	orrs	r3, r2
 8003444:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a21      	ldr	r2, [pc, #132]	; (80034d0 <TIM_OC3_SetConfig+0xe0>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d003      	beq.n	8003456 <TIM_OC3_SetConfig+0x66>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a20      	ldr	r2, [pc, #128]	; (80034d4 <TIM_OC3_SetConfig+0xe4>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d10d      	bne.n	8003472 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800345c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	021b      	lsls	r3, r3, #8
 8003464:	697a      	ldr	r2, [r7, #20]
 8003466:	4313      	orrs	r3, r2
 8003468:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003470:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a16      	ldr	r2, [pc, #88]	; (80034d0 <TIM_OC3_SetConfig+0xe0>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d003      	beq.n	8003482 <TIM_OC3_SetConfig+0x92>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a15      	ldr	r2, [pc, #84]	; (80034d4 <TIM_OC3_SetConfig+0xe4>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d113      	bne.n	80034aa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003488:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003490:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	011b      	lsls	r3, r3, #4
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	4313      	orrs	r3, r2
 800349c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	011b      	lsls	r3, r3, #4
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685a      	ldr	r2, [r3, #4]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	621a      	str	r2, [r3, #32]
}
 80034c4:	bf00      	nop
 80034c6:	371c      	adds	r7, #28
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr
 80034d0:	40010000 	.word	0x40010000
 80034d4:	40010400 	.word	0x40010400

080034d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034d8:	b480      	push	{r7}
 80034da:	b087      	sub	sp, #28
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a1b      	ldr	r3, [r3, #32]
 80034e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800350e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	021b      	lsls	r3, r3, #8
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	4313      	orrs	r3, r2
 800351a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003522:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	031b      	lsls	r3, r3, #12
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	4313      	orrs	r3, r2
 800352e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a12      	ldr	r2, [pc, #72]	; (800357c <TIM_OC4_SetConfig+0xa4>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d003      	beq.n	8003540 <TIM_OC4_SetConfig+0x68>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a11      	ldr	r2, [pc, #68]	; (8003580 <TIM_OC4_SetConfig+0xa8>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d109      	bne.n	8003554 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003546:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	695b      	ldr	r3, [r3, #20]
 800354c:	019b      	lsls	r3, r3, #6
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	4313      	orrs	r3, r2
 8003552:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	621a      	str	r2, [r3, #32]
}
 800356e:	bf00      	nop
 8003570:	371c      	adds	r7, #28
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	40010000 	.word	0x40010000
 8003580:	40010400 	.word	0x40010400

08003584 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003584:	b480      	push	{r7}
 8003586:	b087      	sub	sp, #28
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	f023 0201 	bic.w	r2, r3, #1
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	011b      	lsls	r3, r3, #4
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	f023 030a 	bic.w	r3, r3, #10
 80035c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	621a      	str	r2, [r3, #32]
}
 80035d6:	bf00      	nop
 80035d8:	371c      	adds	r7, #28
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr

080035e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035e2:	b480      	push	{r7}
 80035e4:	b087      	sub	sp, #28
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	60f8      	str	r0, [r7, #12]
 80035ea:	60b9      	str	r1, [r7, #8]
 80035ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	f023 0210 	bic.w	r2, r3, #16
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800360c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	031b      	lsls	r3, r3, #12
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	4313      	orrs	r3, r2
 8003616:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800361e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	011b      	lsls	r3, r3, #4
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	4313      	orrs	r3, r2
 8003628:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	697a      	ldr	r2, [r7, #20]
 800362e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	621a      	str	r2, [r3, #32]
}
 8003636:	bf00      	nop
 8003638:	371c      	adds	r7, #28
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003642:	b480      	push	{r7}
 8003644:	b085      	sub	sp, #20
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
 800364a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003658:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800365a:	683a      	ldr	r2, [r7, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	4313      	orrs	r3, r2
 8003660:	f043 0307 	orr.w	r3, r3, #7
 8003664:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	609a      	str	r2, [r3, #8]
}
 800366c:	bf00      	nop
 800366e:	3714      	adds	r7, #20
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003678:	b480      	push	{r7}
 800367a:	b087      	sub	sp, #28
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
 8003684:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003692:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	021a      	lsls	r2, r3, #8
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	431a      	orrs	r2, r3
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	4313      	orrs	r3, r2
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	609a      	str	r2, [r3, #8]
}
 80036ac:	bf00      	nop
 80036ae:	371c      	adds	r7, #28
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b087      	sub	sp, #28
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	f003 031f 	and.w	r3, r3, #31
 80036ca:	2201      	movs	r2, #1
 80036cc:	fa02 f303 	lsl.w	r3, r2, r3
 80036d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6a1a      	ldr	r2, [r3, #32]
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	43db      	mvns	r3, r3
 80036da:	401a      	ands	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6a1a      	ldr	r2, [r3, #32]
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	f003 031f 	and.w	r3, r3, #31
 80036ea:	6879      	ldr	r1, [r7, #4]
 80036ec:	fa01 f303 	lsl.w	r3, r1, r3
 80036f0:	431a      	orrs	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	621a      	str	r2, [r3, #32]
}
 80036f6:	bf00      	nop
 80036f8:	371c      	adds	r7, #28
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
	...

08003704 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003714:	2b01      	cmp	r3, #1
 8003716:	d101      	bne.n	800371c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003718:	2302      	movs	r3, #2
 800371a:	e05a      	b.n	80037d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2202      	movs	r2, #2
 8003728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003742:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	4313      	orrs	r3, r2
 800374c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a21      	ldr	r2, [pc, #132]	; (80037e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d022      	beq.n	80037a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003768:	d01d      	beq.n	80037a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a1d      	ldr	r2, [pc, #116]	; (80037e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d018      	beq.n	80037a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a1b      	ldr	r2, [pc, #108]	; (80037e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d013      	beq.n	80037a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a1a      	ldr	r2, [pc, #104]	; (80037ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d00e      	beq.n	80037a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a18      	ldr	r2, [pc, #96]	; (80037f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d009      	beq.n	80037a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a17      	ldr	r2, [pc, #92]	; (80037f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d004      	beq.n	80037a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a15      	ldr	r2, [pc, #84]	; (80037f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d10c      	bne.n	80037c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	68ba      	ldr	r2, [r7, #8]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68ba      	ldr	r2, [r7, #8]
 80037be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3714      	adds	r7, #20
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	40010000 	.word	0x40010000
 80037e4:	40000400 	.word	0x40000400
 80037e8:	40000800 	.word	0x40000800
 80037ec:	40000c00 	.word	0x40000c00
 80037f0:	40010400 	.word	0x40010400
 80037f4:	40014000 	.word	0x40014000
 80037f8:	40001800 	.word	0x40001800

080037fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d101      	bne.n	8003836 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e03f      	b.n	80038b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d106      	bne.n	8003850 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f7fd fb2a 	bl	8000ea4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2224      	movs	r2, #36	; 0x24
 8003854:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68da      	ldr	r2, [r3, #12]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003866:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 fba1 	bl	8003fb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	691a      	ldr	r2, [r3, #16]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800387c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	695a      	ldr	r2, [r3, #20]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800388c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68da      	ldr	r2, [r3, #12]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800389c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2220      	movs	r2, #32
 80038a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2220      	movs	r2, #32
 80038b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b088      	sub	sp, #32
 80038c2:	af02      	add	r7, sp, #8
 80038c4:	60f8      	str	r0, [r7, #12]
 80038c6:	60b9      	str	r1, [r7, #8]
 80038c8:	603b      	str	r3, [r7, #0]
 80038ca:	4613      	mov	r3, r2
 80038cc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80038ce:	2300      	movs	r3, #0
 80038d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b20      	cmp	r3, #32
 80038dc:	f040 8083 	bne.w	80039e6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d002      	beq.n	80038ec <HAL_UART_Transmit+0x2e>
 80038e6:	88fb      	ldrh	r3, [r7, #6]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d101      	bne.n	80038f0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e07b      	b.n	80039e8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d101      	bne.n	80038fe <HAL_UART_Transmit+0x40>
 80038fa:	2302      	movs	r3, #2
 80038fc:	e074      	b.n	80039e8 <HAL_UART_Transmit+0x12a>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2221      	movs	r2, #33	; 0x21
 8003910:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003914:	f7fd fd2e 	bl	8001374 <HAL_GetTick>
 8003918:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	88fa      	ldrh	r2, [r7, #6]
 800391e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	88fa      	ldrh	r2, [r7, #6]
 8003924:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800392e:	e042      	b.n	80039b6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003934:	b29b      	uxth	r3, r3
 8003936:	3b01      	subs	r3, #1
 8003938:	b29a      	uxth	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003946:	d122      	bne.n	800398e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	2200      	movs	r2, #0
 8003950:	2180      	movs	r1, #128	; 0x80
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f000 f9c0 	bl	8003cd8 <UART_WaitOnFlagUntilTimeout>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e042      	b.n	80039e8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	881b      	ldrh	r3, [r3, #0]
 800396a:	461a      	mov	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003974:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d103      	bne.n	8003986 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	3302      	adds	r3, #2
 8003982:	60bb      	str	r3, [r7, #8]
 8003984:	e017      	b.n	80039b6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	3301      	adds	r3, #1
 800398a:	60bb      	str	r3, [r7, #8]
 800398c:	e013      	b.n	80039b6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	2200      	movs	r2, #0
 8003996:	2180      	movs	r1, #128	; 0x80
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f000 f99d 	bl	8003cd8 <UART_WaitOnFlagUntilTimeout>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e01f      	b.n	80039e8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	1c5a      	adds	r2, r3, #1
 80039ac:	60ba      	str	r2, [r7, #8]
 80039ae:	781a      	ldrb	r2, [r3, #0]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1b7      	bne.n	8003930 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	2200      	movs	r2, #0
 80039c8:	2140      	movs	r1, #64	; 0x40
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	f000 f984 	bl	8003cd8 <UART_WaitOnFlagUntilTimeout>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e006      	b.n	80039e8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2220      	movs	r2, #32
 80039de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80039e2:	2300      	movs	r3, #0
 80039e4:	e000      	b.n	80039e8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80039e6:	2302      	movs	r3, #2
  }
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3718      	adds	r7, #24
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b085      	sub	sp, #20
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	4613      	mov	r3, r2
 80039fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b20      	cmp	r3, #32
 8003a08:	d140      	bne.n	8003a8c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d002      	beq.n	8003a16 <HAL_UART_Receive_IT+0x26>
 8003a10:	88fb      	ldrh	r3, [r7, #6]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e039      	b.n	8003a8e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d101      	bne.n	8003a28 <HAL_UART_Receive_IT+0x38>
 8003a24:	2302      	movs	r3, #2
 8003a26:	e032      	b.n	8003a8e <HAL_UART_Receive_IT+0x9e>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	68ba      	ldr	r2, [r7, #8]
 8003a34:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	88fa      	ldrh	r2, [r7, #6]
 8003a3a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	88fa      	ldrh	r2, [r7, #6]
 8003a40:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2222      	movs	r2, #34	; 0x22
 8003a4c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68da      	ldr	r2, [r3, #12]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a66:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	695a      	ldr	r2, [r3, #20]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f042 0201 	orr.w	r2, r2, #1
 8003a76:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68da      	ldr	r2, [r3, #12]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f042 0220 	orr.w	r2, r2, #32
 8003a86:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	e000      	b.n	8003a8e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003a8c:	2302      	movs	r3, #2
  }
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3714      	adds	r7, #20
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
	...

08003a9c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b088      	sub	sp, #32
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003abc:	2300      	movs	r3, #0
 8003abe:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	f003 030f 	and.w	r3, r3, #15
 8003aca:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10d      	bne.n	8003aee <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	f003 0320 	and.w	r3, r3, #32
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d008      	beq.n	8003aee <HAL_UART_IRQHandler+0x52>
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	f003 0320 	and.w	r3, r3, #32
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d003      	beq.n	8003aee <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 f9e0 	bl	8003eac <UART_Receive_IT>
      return;
 8003aec:	e0d1      	b.n	8003c92 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f000 80b0 	beq.w	8003c56 <HAL_UART_IRQHandler+0x1ba>
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d105      	bne.n	8003b0c <HAL_UART_IRQHandler+0x70>
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f000 80a5 	beq.w	8003c56 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00a      	beq.n	8003b2c <HAL_UART_IRQHandler+0x90>
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d005      	beq.n	8003b2c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b24:	f043 0201 	orr.w	r2, r3, #1
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	f003 0304 	and.w	r3, r3, #4
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00a      	beq.n	8003b4c <HAL_UART_IRQHandler+0xb0>
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d005      	beq.n	8003b4c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b44:	f043 0202 	orr.w	r2, r3, #2
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00a      	beq.n	8003b6c <HAL_UART_IRQHandler+0xd0>
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d005      	beq.n	8003b6c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b64:	f043 0204 	orr.w	r2, r3, #4
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	f003 0308 	and.w	r3, r3, #8
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00f      	beq.n	8003b96 <HAL_UART_IRQHandler+0xfa>
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	f003 0320 	and.w	r3, r3, #32
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d104      	bne.n	8003b8a <HAL_UART_IRQHandler+0xee>
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d005      	beq.n	8003b96 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b8e:	f043 0208 	orr.w	r2, r3, #8
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d078      	beq.n	8003c90 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	f003 0320 	and.w	r3, r3, #32
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d007      	beq.n	8003bb8 <HAL_UART_IRQHandler+0x11c>
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	f003 0320 	and.w	r3, r3, #32
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d002      	beq.n	8003bb8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f97a 	bl	8003eac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc2:	2b40      	cmp	r3, #64	; 0x40
 8003bc4:	bf0c      	ite	eq
 8003bc6:	2301      	moveq	r3, #1
 8003bc8:	2300      	movne	r3, #0
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd2:	f003 0308 	and.w	r3, r3, #8
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d102      	bne.n	8003be0 <HAL_UART_IRQHandler+0x144>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d031      	beq.n	8003c44 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 f8c3 	bl	8003d6c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf0:	2b40      	cmp	r3, #64	; 0x40
 8003bf2:	d123      	bne.n	8003c3c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	695a      	ldr	r2, [r3, #20]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c02:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d013      	beq.n	8003c34 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c10:	4a21      	ldr	r2, [pc, #132]	; (8003c98 <HAL_UART_IRQHandler+0x1fc>)
 8003c12:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7fd fdcf 	bl	80017bc <HAL_DMA_Abort_IT>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d016      	beq.n	8003c52 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c2e:	4610      	mov	r0, r2
 8003c30:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c32:	e00e      	b.n	8003c52 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 f845 	bl	8003cc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c3a:	e00a      	b.n	8003c52 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 f841 	bl	8003cc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c42:	e006      	b.n	8003c52 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 f83d 	bl	8003cc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003c50:	e01e      	b.n	8003c90 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c52:	bf00      	nop
    return;
 8003c54:	e01c      	b.n	8003c90 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d008      	beq.n	8003c72 <HAL_UART_IRQHandler+0x1d6>
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d003      	beq.n	8003c72 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 f8b0 	bl	8003dd0 <UART_Transmit_IT>
    return;
 8003c70:	e00f      	b.n	8003c92 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00a      	beq.n	8003c92 <HAL_UART_IRQHandler+0x1f6>
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d005      	beq.n	8003c92 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 f8f8 	bl	8003e7c <UART_EndTransmit_IT>
    return;
 8003c8c:	bf00      	nop
 8003c8e:	e000      	b.n	8003c92 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003c90:	bf00      	nop
  }
}
 8003c92:	3720      	adds	r7, #32
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	08003da9 	.word	0x08003da9

08003c9c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	603b      	str	r3, [r7, #0]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ce8:	e02c      	b.n	8003d44 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf0:	d028      	beq.n	8003d44 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d007      	beq.n	8003d08 <UART_WaitOnFlagUntilTimeout+0x30>
 8003cf8:	f7fd fb3c 	bl	8001374 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	69ba      	ldr	r2, [r7, #24]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d21d      	bcs.n	8003d44 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68da      	ldr	r2, [r3, #12]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d16:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	695a      	ldr	r2, [r3, #20]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f022 0201 	bic.w	r2, r2, #1
 8003d26:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2220      	movs	r2, #32
 8003d34:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e00f      	b.n	8003d64 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	bf0c      	ite	eq
 8003d54:	2301      	moveq	r3, #1
 8003d56:	2300      	movne	r3, #0
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	79fb      	ldrb	r3, [r7, #7]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d0c3      	beq.n	8003cea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3710      	adds	r7, #16
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68da      	ldr	r2, [r3, #12]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003d82:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	695a      	ldr	r2, [r3, #20]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f022 0201 	bic.w	r2, r2, #1
 8003d92:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2220      	movs	r2, #32
 8003d98:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f7ff ff7e 	bl	8003cc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dc8:	bf00      	nop
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	2b21      	cmp	r3, #33	; 0x21
 8003de2:	d144      	bne.n	8003e6e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dec:	d11a      	bne.n	8003e24 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	881b      	ldrh	r3, [r3, #0]
 8003df8:	461a      	mov	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e02:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d105      	bne.n	8003e18 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a1b      	ldr	r3, [r3, #32]
 8003e10:	1c9a      	adds	r2, r3, #2
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	621a      	str	r2, [r3, #32]
 8003e16:	e00e      	b.n	8003e36 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a1b      	ldr	r3, [r3, #32]
 8003e1c:	1c5a      	adds	r2, r3, #1
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	621a      	str	r2, [r3, #32]
 8003e22:	e008      	b.n	8003e36 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a1b      	ldr	r3, [r3, #32]
 8003e28:	1c59      	adds	r1, r3, #1
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	6211      	str	r1, [r2, #32]
 8003e2e:	781a      	ldrb	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	4619      	mov	r1, r3
 8003e44:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10f      	bne.n	8003e6a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68da      	ldr	r2, [r3, #12]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e58:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68da      	ldr	r2, [r3, #12]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e68:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	e000      	b.n	8003e70 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003e6e:	2302      	movs	r3, #2
  }
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3714      	adds	r7, #20
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68da      	ldr	r2, [r3, #12]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e92:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2220      	movs	r2, #32
 8003e98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f7ff fefd 	bl	8003c9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3708      	adds	r7, #8
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	2b22      	cmp	r3, #34	; 0x22
 8003ebe:	d171      	bne.n	8003fa4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ec8:	d123      	bne.n	8003f12 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ece:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d10e      	bne.n	8003ef6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eee:	1c9a      	adds	r2, r3, #2
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	629a      	str	r2, [r3, #40]	; 0x28
 8003ef4:	e029      	b.n	8003f4a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0a:	1c5a      	adds	r2, r3, #1
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	629a      	str	r2, [r3, #40]	; 0x28
 8003f10:	e01b      	b.n	8003f4a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10a      	bne.n	8003f30 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	6858      	ldr	r0, [r3, #4]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f24:	1c59      	adds	r1, r3, #1
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	6291      	str	r1, [r2, #40]	; 0x28
 8003f2a:	b2c2      	uxtb	r2, r0
 8003f2c:	701a      	strb	r2, [r3, #0]
 8003f2e:	e00c      	b.n	8003f4a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	b2da      	uxtb	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3c:	1c58      	adds	r0, r3, #1
 8003f3e:	6879      	ldr	r1, [r7, #4]
 8003f40:	6288      	str	r0, [r1, #40]	; 0x28
 8003f42:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f46:	b2d2      	uxtb	r2, r2
 8003f48:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	3b01      	subs	r3, #1
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	4619      	mov	r1, r3
 8003f58:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d120      	bne.n	8003fa0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68da      	ldr	r2, [r3, #12]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f022 0220 	bic.w	r2, r2, #32
 8003f6c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68da      	ldr	r2, [r3, #12]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f7c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	695a      	ldr	r2, [r3, #20]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f022 0201 	bic.w	r2, r2, #1
 8003f8c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2220      	movs	r2, #32
 8003f92:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f7ff fe8a 	bl	8003cb0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	e002      	b.n	8003fa6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	e000      	b.n	8003fa6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003fa4:	2302      	movs	r3, #2
  }
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3710      	adds	r7, #16
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
	...

08003fb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fb4:	b085      	sub	sp, #20
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68da      	ldr	r2, [r3, #12]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689a      	ldr	r2, [r3, #8]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	69db      	ldr	r3, [r3, #28]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003ff2:	f023 030c 	bic.w	r3, r3, #12
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	6812      	ldr	r2, [r2, #0]
 8003ffa:	68f9      	ldr	r1, [r7, #12]
 8003ffc:	430b      	orrs	r3, r1
 8003ffe:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	699a      	ldr	r2, [r3, #24]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	430a      	orrs	r2, r1
 8004014:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	69db      	ldr	r3, [r3, #28]
 800401a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800401e:	f040 818b 	bne.w	8004338 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4ac1      	ldr	r2, [pc, #772]	; (800432c <UART_SetConfig+0x37c>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d005      	beq.n	8004038 <UART_SetConfig+0x88>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4abf      	ldr	r2, [pc, #764]	; (8004330 <UART_SetConfig+0x380>)
 8004032:	4293      	cmp	r3, r2
 8004034:	f040 80bd 	bne.w	80041b2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004038:	f7fe fc4c 	bl	80028d4 <HAL_RCC_GetPCLK2Freq>
 800403c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	461d      	mov	r5, r3
 8004042:	f04f 0600 	mov.w	r6, #0
 8004046:	46a8      	mov	r8, r5
 8004048:	46b1      	mov	r9, r6
 800404a:	eb18 0308 	adds.w	r3, r8, r8
 800404e:	eb49 0409 	adc.w	r4, r9, r9
 8004052:	4698      	mov	r8, r3
 8004054:	46a1      	mov	r9, r4
 8004056:	eb18 0805 	adds.w	r8, r8, r5
 800405a:	eb49 0906 	adc.w	r9, r9, r6
 800405e:	f04f 0100 	mov.w	r1, #0
 8004062:	f04f 0200 	mov.w	r2, #0
 8004066:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800406a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800406e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004072:	4688      	mov	r8, r1
 8004074:	4691      	mov	r9, r2
 8004076:	eb18 0005 	adds.w	r0, r8, r5
 800407a:	eb49 0106 	adc.w	r1, r9, r6
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	461d      	mov	r5, r3
 8004084:	f04f 0600 	mov.w	r6, #0
 8004088:	196b      	adds	r3, r5, r5
 800408a:	eb46 0406 	adc.w	r4, r6, r6
 800408e:	461a      	mov	r2, r3
 8004090:	4623      	mov	r3, r4
 8004092:	f7fc f899 	bl	80001c8 <__aeabi_uldivmod>
 8004096:	4603      	mov	r3, r0
 8004098:	460c      	mov	r4, r1
 800409a:	461a      	mov	r2, r3
 800409c:	4ba5      	ldr	r3, [pc, #660]	; (8004334 <UART_SetConfig+0x384>)
 800409e:	fba3 2302 	umull	r2, r3, r3, r2
 80040a2:	095b      	lsrs	r3, r3, #5
 80040a4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	461d      	mov	r5, r3
 80040ac:	f04f 0600 	mov.w	r6, #0
 80040b0:	46a9      	mov	r9, r5
 80040b2:	46b2      	mov	sl, r6
 80040b4:	eb19 0309 	adds.w	r3, r9, r9
 80040b8:	eb4a 040a 	adc.w	r4, sl, sl
 80040bc:	4699      	mov	r9, r3
 80040be:	46a2      	mov	sl, r4
 80040c0:	eb19 0905 	adds.w	r9, r9, r5
 80040c4:	eb4a 0a06 	adc.w	sl, sl, r6
 80040c8:	f04f 0100 	mov.w	r1, #0
 80040cc:	f04f 0200 	mov.w	r2, #0
 80040d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80040d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80040dc:	4689      	mov	r9, r1
 80040de:	4692      	mov	sl, r2
 80040e0:	eb19 0005 	adds.w	r0, r9, r5
 80040e4:	eb4a 0106 	adc.w	r1, sl, r6
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	461d      	mov	r5, r3
 80040ee:	f04f 0600 	mov.w	r6, #0
 80040f2:	196b      	adds	r3, r5, r5
 80040f4:	eb46 0406 	adc.w	r4, r6, r6
 80040f8:	461a      	mov	r2, r3
 80040fa:	4623      	mov	r3, r4
 80040fc:	f7fc f864 	bl	80001c8 <__aeabi_uldivmod>
 8004100:	4603      	mov	r3, r0
 8004102:	460c      	mov	r4, r1
 8004104:	461a      	mov	r2, r3
 8004106:	4b8b      	ldr	r3, [pc, #556]	; (8004334 <UART_SetConfig+0x384>)
 8004108:	fba3 1302 	umull	r1, r3, r3, r2
 800410c:	095b      	lsrs	r3, r3, #5
 800410e:	2164      	movs	r1, #100	; 0x64
 8004110:	fb01 f303 	mul.w	r3, r1, r3
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	00db      	lsls	r3, r3, #3
 8004118:	3332      	adds	r3, #50	; 0x32
 800411a:	4a86      	ldr	r2, [pc, #536]	; (8004334 <UART_SetConfig+0x384>)
 800411c:	fba2 2303 	umull	r2, r3, r2, r3
 8004120:	095b      	lsrs	r3, r3, #5
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004128:	4498      	add	r8, r3
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	461d      	mov	r5, r3
 800412e:	f04f 0600 	mov.w	r6, #0
 8004132:	46a9      	mov	r9, r5
 8004134:	46b2      	mov	sl, r6
 8004136:	eb19 0309 	adds.w	r3, r9, r9
 800413a:	eb4a 040a 	adc.w	r4, sl, sl
 800413e:	4699      	mov	r9, r3
 8004140:	46a2      	mov	sl, r4
 8004142:	eb19 0905 	adds.w	r9, r9, r5
 8004146:	eb4a 0a06 	adc.w	sl, sl, r6
 800414a:	f04f 0100 	mov.w	r1, #0
 800414e:	f04f 0200 	mov.w	r2, #0
 8004152:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004156:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800415a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800415e:	4689      	mov	r9, r1
 8004160:	4692      	mov	sl, r2
 8004162:	eb19 0005 	adds.w	r0, r9, r5
 8004166:	eb4a 0106 	adc.w	r1, sl, r6
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	461d      	mov	r5, r3
 8004170:	f04f 0600 	mov.w	r6, #0
 8004174:	196b      	adds	r3, r5, r5
 8004176:	eb46 0406 	adc.w	r4, r6, r6
 800417a:	461a      	mov	r2, r3
 800417c:	4623      	mov	r3, r4
 800417e:	f7fc f823 	bl	80001c8 <__aeabi_uldivmod>
 8004182:	4603      	mov	r3, r0
 8004184:	460c      	mov	r4, r1
 8004186:	461a      	mov	r2, r3
 8004188:	4b6a      	ldr	r3, [pc, #424]	; (8004334 <UART_SetConfig+0x384>)
 800418a:	fba3 1302 	umull	r1, r3, r3, r2
 800418e:	095b      	lsrs	r3, r3, #5
 8004190:	2164      	movs	r1, #100	; 0x64
 8004192:	fb01 f303 	mul.w	r3, r1, r3
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	00db      	lsls	r3, r3, #3
 800419a:	3332      	adds	r3, #50	; 0x32
 800419c:	4a65      	ldr	r2, [pc, #404]	; (8004334 <UART_SetConfig+0x384>)
 800419e:	fba2 2303 	umull	r2, r3, r2, r3
 80041a2:	095b      	lsrs	r3, r3, #5
 80041a4:	f003 0207 	and.w	r2, r3, #7
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4442      	add	r2, r8
 80041ae:	609a      	str	r2, [r3, #8]
 80041b0:	e26f      	b.n	8004692 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041b2:	f7fe fb7b 	bl	80028ac <HAL_RCC_GetPCLK1Freq>
 80041b6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	461d      	mov	r5, r3
 80041bc:	f04f 0600 	mov.w	r6, #0
 80041c0:	46a8      	mov	r8, r5
 80041c2:	46b1      	mov	r9, r6
 80041c4:	eb18 0308 	adds.w	r3, r8, r8
 80041c8:	eb49 0409 	adc.w	r4, r9, r9
 80041cc:	4698      	mov	r8, r3
 80041ce:	46a1      	mov	r9, r4
 80041d0:	eb18 0805 	adds.w	r8, r8, r5
 80041d4:	eb49 0906 	adc.w	r9, r9, r6
 80041d8:	f04f 0100 	mov.w	r1, #0
 80041dc:	f04f 0200 	mov.w	r2, #0
 80041e0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80041e4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80041e8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80041ec:	4688      	mov	r8, r1
 80041ee:	4691      	mov	r9, r2
 80041f0:	eb18 0005 	adds.w	r0, r8, r5
 80041f4:	eb49 0106 	adc.w	r1, r9, r6
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	461d      	mov	r5, r3
 80041fe:	f04f 0600 	mov.w	r6, #0
 8004202:	196b      	adds	r3, r5, r5
 8004204:	eb46 0406 	adc.w	r4, r6, r6
 8004208:	461a      	mov	r2, r3
 800420a:	4623      	mov	r3, r4
 800420c:	f7fb ffdc 	bl	80001c8 <__aeabi_uldivmod>
 8004210:	4603      	mov	r3, r0
 8004212:	460c      	mov	r4, r1
 8004214:	461a      	mov	r2, r3
 8004216:	4b47      	ldr	r3, [pc, #284]	; (8004334 <UART_SetConfig+0x384>)
 8004218:	fba3 2302 	umull	r2, r3, r3, r2
 800421c:	095b      	lsrs	r3, r3, #5
 800421e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	461d      	mov	r5, r3
 8004226:	f04f 0600 	mov.w	r6, #0
 800422a:	46a9      	mov	r9, r5
 800422c:	46b2      	mov	sl, r6
 800422e:	eb19 0309 	adds.w	r3, r9, r9
 8004232:	eb4a 040a 	adc.w	r4, sl, sl
 8004236:	4699      	mov	r9, r3
 8004238:	46a2      	mov	sl, r4
 800423a:	eb19 0905 	adds.w	r9, r9, r5
 800423e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004242:	f04f 0100 	mov.w	r1, #0
 8004246:	f04f 0200 	mov.w	r2, #0
 800424a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800424e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004252:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004256:	4689      	mov	r9, r1
 8004258:	4692      	mov	sl, r2
 800425a:	eb19 0005 	adds.w	r0, r9, r5
 800425e:	eb4a 0106 	adc.w	r1, sl, r6
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	461d      	mov	r5, r3
 8004268:	f04f 0600 	mov.w	r6, #0
 800426c:	196b      	adds	r3, r5, r5
 800426e:	eb46 0406 	adc.w	r4, r6, r6
 8004272:	461a      	mov	r2, r3
 8004274:	4623      	mov	r3, r4
 8004276:	f7fb ffa7 	bl	80001c8 <__aeabi_uldivmod>
 800427a:	4603      	mov	r3, r0
 800427c:	460c      	mov	r4, r1
 800427e:	461a      	mov	r2, r3
 8004280:	4b2c      	ldr	r3, [pc, #176]	; (8004334 <UART_SetConfig+0x384>)
 8004282:	fba3 1302 	umull	r1, r3, r3, r2
 8004286:	095b      	lsrs	r3, r3, #5
 8004288:	2164      	movs	r1, #100	; 0x64
 800428a:	fb01 f303 	mul.w	r3, r1, r3
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	00db      	lsls	r3, r3, #3
 8004292:	3332      	adds	r3, #50	; 0x32
 8004294:	4a27      	ldr	r2, [pc, #156]	; (8004334 <UART_SetConfig+0x384>)
 8004296:	fba2 2303 	umull	r2, r3, r2, r3
 800429a:	095b      	lsrs	r3, r3, #5
 800429c:	005b      	lsls	r3, r3, #1
 800429e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80042a2:	4498      	add	r8, r3
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	461d      	mov	r5, r3
 80042a8:	f04f 0600 	mov.w	r6, #0
 80042ac:	46a9      	mov	r9, r5
 80042ae:	46b2      	mov	sl, r6
 80042b0:	eb19 0309 	adds.w	r3, r9, r9
 80042b4:	eb4a 040a 	adc.w	r4, sl, sl
 80042b8:	4699      	mov	r9, r3
 80042ba:	46a2      	mov	sl, r4
 80042bc:	eb19 0905 	adds.w	r9, r9, r5
 80042c0:	eb4a 0a06 	adc.w	sl, sl, r6
 80042c4:	f04f 0100 	mov.w	r1, #0
 80042c8:	f04f 0200 	mov.w	r2, #0
 80042cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80042d8:	4689      	mov	r9, r1
 80042da:	4692      	mov	sl, r2
 80042dc:	eb19 0005 	adds.w	r0, r9, r5
 80042e0:	eb4a 0106 	adc.w	r1, sl, r6
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	461d      	mov	r5, r3
 80042ea:	f04f 0600 	mov.w	r6, #0
 80042ee:	196b      	adds	r3, r5, r5
 80042f0:	eb46 0406 	adc.w	r4, r6, r6
 80042f4:	461a      	mov	r2, r3
 80042f6:	4623      	mov	r3, r4
 80042f8:	f7fb ff66 	bl	80001c8 <__aeabi_uldivmod>
 80042fc:	4603      	mov	r3, r0
 80042fe:	460c      	mov	r4, r1
 8004300:	461a      	mov	r2, r3
 8004302:	4b0c      	ldr	r3, [pc, #48]	; (8004334 <UART_SetConfig+0x384>)
 8004304:	fba3 1302 	umull	r1, r3, r3, r2
 8004308:	095b      	lsrs	r3, r3, #5
 800430a:	2164      	movs	r1, #100	; 0x64
 800430c:	fb01 f303 	mul.w	r3, r1, r3
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	00db      	lsls	r3, r3, #3
 8004314:	3332      	adds	r3, #50	; 0x32
 8004316:	4a07      	ldr	r2, [pc, #28]	; (8004334 <UART_SetConfig+0x384>)
 8004318:	fba2 2303 	umull	r2, r3, r2, r3
 800431c:	095b      	lsrs	r3, r3, #5
 800431e:	f003 0207 	and.w	r2, r3, #7
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4442      	add	r2, r8
 8004328:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800432a:	e1b2      	b.n	8004692 <UART_SetConfig+0x6e2>
 800432c:	40011000 	.word	0x40011000
 8004330:	40011400 	.word	0x40011400
 8004334:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4ad7      	ldr	r2, [pc, #860]	; (800469c <UART_SetConfig+0x6ec>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d005      	beq.n	800434e <UART_SetConfig+0x39e>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4ad6      	ldr	r2, [pc, #856]	; (80046a0 <UART_SetConfig+0x6f0>)
 8004348:	4293      	cmp	r3, r2
 800434a:	f040 80d1 	bne.w	80044f0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800434e:	f7fe fac1 	bl	80028d4 <HAL_RCC_GetPCLK2Freq>
 8004352:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	469a      	mov	sl, r3
 8004358:	f04f 0b00 	mov.w	fp, #0
 800435c:	46d0      	mov	r8, sl
 800435e:	46d9      	mov	r9, fp
 8004360:	eb18 0308 	adds.w	r3, r8, r8
 8004364:	eb49 0409 	adc.w	r4, r9, r9
 8004368:	4698      	mov	r8, r3
 800436a:	46a1      	mov	r9, r4
 800436c:	eb18 080a 	adds.w	r8, r8, sl
 8004370:	eb49 090b 	adc.w	r9, r9, fp
 8004374:	f04f 0100 	mov.w	r1, #0
 8004378:	f04f 0200 	mov.w	r2, #0
 800437c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004380:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004384:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004388:	4688      	mov	r8, r1
 800438a:	4691      	mov	r9, r2
 800438c:	eb1a 0508 	adds.w	r5, sl, r8
 8004390:	eb4b 0609 	adc.w	r6, fp, r9
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	4619      	mov	r1, r3
 800439a:	f04f 0200 	mov.w	r2, #0
 800439e:	f04f 0300 	mov.w	r3, #0
 80043a2:	f04f 0400 	mov.w	r4, #0
 80043a6:	0094      	lsls	r4, r2, #2
 80043a8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80043ac:	008b      	lsls	r3, r1, #2
 80043ae:	461a      	mov	r2, r3
 80043b0:	4623      	mov	r3, r4
 80043b2:	4628      	mov	r0, r5
 80043b4:	4631      	mov	r1, r6
 80043b6:	f7fb ff07 	bl	80001c8 <__aeabi_uldivmod>
 80043ba:	4603      	mov	r3, r0
 80043bc:	460c      	mov	r4, r1
 80043be:	461a      	mov	r2, r3
 80043c0:	4bb8      	ldr	r3, [pc, #736]	; (80046a4 <UART_SetConfig+0x6f4>)
 80043c2:	fba3 2302 	umull	r2, r3, r3, r2
 80043c6:	095b      	lsrs	r3, r3, #5
 80043c8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	469b      	mov	fp, r3
 80043d0:	f04f 0c00 	mov.w	ip, #0
 80043d4:	46d9      	mov	r9, fp
 80043d6:	46e2      	mov	sl, ip
 80043d8:	eb19 0309 	adds.w	r3, r9, r9
 80043dc:	eb4a 040a 	adc.w	r4, sl, sl
 80043e0:	4699      	mov	r9, r3
 80043e2:	46a2      	mov	sl, r4
 80043e4:	eb19 090b 	adds.w	r9, r9, fp
 80043e8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80043ec:	f04f 0100 	mov.w	r1, #0
 80043f0:	f04f 0200 	mov.w	r2, #0
 80043f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80043fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004400:	4689      	mov	r9, r1
 8004402:	4692      	mov	sl, r2
 8004404:	eb1b 0509 	adds.w	r5, fp, r9
 8004408:	eb4c 060a 	adc.w	r6, ip, sl
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	4619      	mov	r1, r3
 8004412:	f04f 0200 	mov.w	r2, #0
 8004416:	f04f 0300 	mov.w	r3, #0
 800441a:	f04f 0400 	mov.w	r4, #0
 800441e:	0094      	lsls	r4, r2, #2
 8004420:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004424:	008b      	lsls	r3, r1, #2
 8004426:	461a      	mov	r2, r3
 8004428:	4623      	mov	r3, r4
 800442a:	4628      	mov	r0, r5
 800442c:	4631      	mov	r1, r6
 800442e:	f7fb fecb 	bl	80001c8 <__aeabi_uldivmod>
 8004432:	4603      	mov	r3, r0
 8004434:	460c      	mov	r4, r1
 8004436:	461a      	mov	r2, r3
 8004438:	4b9a      	ldr	r3, [pc, #616]	; (80046a4 <UART_SetConfig+0x6f4>)
 800443a:	fba3 1302 	umull	r1, r3, r3, r2
 800443e:	095b      	lsrs	r3, r3, #5
 8004440:	2164      	movs	r1, #100	; 0x64
 8004442:	fb01 f303 	mul.w	r3, r1, r3
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	011b      	lsls	r3, r3, #4
 800444a:	3332      	adds	r3, #50	; 0x32
 800444c:	4a95      	ldr	r2, [pc, #596]	; (80046a4 <UART_SetConfig+0x6f4>)
 800444e:	fba2 2303 	umull	r2, r3, r2, r3
 8004452:	095b      	lsrs	r3, r3, #5
 8004454:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004458:	4498      	add	r8, r3
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	469b      	mov	fp, r3
 800445e:	f04f 0c00 	mov.w	ip, #0
 8004462:	46d9      	mov	r9, fp
 8004464:	46e2      	mov	sl, ip
 8004466:	eb19 0309 	adds.w	r3, r9, r9
 800446a:	eb4a 040a 	adc.w	r4, sl, sl
 800446e:	4699      	mov	r9, r3
 8004470:	46a2      	mov	sl, r4
 8004472:	eb19 090b 	adds.w	r9, r9, fp
 8004476:	eb4a 0a0c 	adc.w	sl, sl, ip
 800447a:	f04f 0100 	mov.w	r1, #0
 800447e:	f04f 0200 	mov.w	r2, #0
 8004482:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004486:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800448a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800448e:	4689      	mov	r9, r1
 8004490:	4692      	mov	sl, r2
 8004492:	eb1b 0509 	adds.w	r5, fp, r9
 8004496:	eb4c 060a 	adc.w	r6, ip, sl
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	4619      	mov	r1, r3
 80044a0:	f04f 0200 	mov.w	r2, #0
 80044a4:	f04f 0300 	mov.w	r3, #0
 80044a8:	f04f 0400 	mov.w	r4, #0
 80044ac:	0094      	lsls	r4, r2, #2
 80044ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80044b2:	008b      	lsls	r3, r1, #2
 80044b4:	461a      	mov	r2, r3
 80044b6:	4623      	mov	r3, r4
 80044b8:	4628      	mov	r0, r5
 80044ba:	4631      	mov	r1, r6
 80044bc:	f7fb fe84 	bl	80001c8 <__aeabi_uldivmod>
 80044c0:	4603      	mov	r3, r0
 80044c2:	460c      	mov	r4, r1
 80044c4:	461a      	mov	r2, r3
 80044c6:	4b77      	ldr	r3, [pc, #476]	; (80046a4 <UART_SetConfig+0x6f4>)
 80044c8:	fba3 1302 	umull	r1, r3, r3, r2
 80044cc:	095b      	lsrs	r3, r3, #5
 80044ce:	2164      	movs	r1, #100	; 0x64
 80044d0:	fb01 f303 	mul.w	r3, r1, r3
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	011b      	lsls	r3, r3, #4
 80044d8:	3332      	adds	r3, #50	; 0x32
 80044da:	4a72      	ldr	r2, [pc, #456]	; (80046a4 <UART_SetConfig+0x6f4>)
 80044dc:	fba2 2303 	umull	r2, r3, r2, r3
 80044e0:	095b      	lsrs	r3, r3, #5
 80044e2:	f003 020f 	and.w	r2, r3, #15
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4442      	add	r2, r8
 80044ec:	609a      	str	r2, [r3, #8]
 80044ee:	e0d0      	b.n	8004692 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80044f0:	f7fe f9dc 	bl	80028ac <HAL_RCC_GetPCLK1Freq>
 80044f4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	469a      	mov	sl, r3
 80044fa:	f04f 0b00 	mov.w	fp, #0
 80044fe:	46d0      	mov	r8, sl
 8004500:	46d9      	mov	r9, fp
 8004502:	eb18 0308 	adds.w	r3, r8, r8
 8004506:	eb49 0409 	adc.w	r4, r9, r9
 800450a:	4698      	mov	r8, r3
 800450c:	46a1      	mov	r9, r4
 800450e:	eb18 080a 	adds.w	r8, r8, sl
 8004512:	eb49 090b 	adc.w	r9, r9, fp
 8004516:	f04f 0100 	mov.w	r1, #0
 800451a:	f04f 0200 	mov.w	r2, #0
 800451e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004522:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004526:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800452a:	4688      	mov	r8, r1
 800452c:	4691      	mov	r9, r2
 800452e:	eb1a 0508 	adds.w	r5, sl, r8
 8004532:	eb4b 0609 	adc.w	r6, fp, r9
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	4619      	mov	r1, r3
 800453c:	f04f 0200 	mov.w	r2, #0
 8004540:	f04f 0300 	mov.w	r3, #0
 8004544:	f04f 0400 	mov.w	r4, #0
 8004548:	0094      	lsls	r4, r2, #2
 800454a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800454e:	008b      	lsls	r3, r1, #2
 8004550:	461a      	mov	r2, r3
 8004552:	4623      	mov	r3, r4
 8004554:	4628      	mov	r0, r5
 8004556:	4631      	mov	r1, r6
 8004558:	f7fb fe36 	bl	80001c8 <__aeabi_uldivmod>
 800455c:	4603      	mov	r3, r0
 800455e:	460c      	mov	r4, r1
 8004560:	461a      	mov	r2, r3
 8004562:	4b50      	ldr	r3, [pc, #320]	; (80046a4 <UART_SetConfig+0x6f4>)
 8004564:	fba3 2302 	umull	r2, r3, r3, r2
 8004568:	095b      	lsrs	r3, r3, #5
 800456a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	469b      	mov	fp, r3
 8004572:	f04f 0c00 	mov.w	ip, #0
 8004576:	46d9      	mov	r9, fp
 8004578:	46e2      	mov	sl, ip
 800457a:	eb19 0309 	adds.w	r3, r9, r9
 800457e:	eb4a 040a 	adc.w	r4, sl, sl
 8004582:	4699      	mov	r9, r3
 8004584:	46a2      	mov	sl, r4
 8004586:	eb19 090b 	adds.w	r9, r9, fp
 800458a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800458e:	f04f 0100 	mov.w	r1, #0
 8004592:	f04f 0200 	mov.w	r2, #0
 8004596:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800459a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800459e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80045a2:	4689      	mov	r9, r1
 80045a4:	4692      	mov	sl, r2
 80045a6:	eb1b 0509 	adds.w	r5, fp, r9
 80045aa:	eb4c 060a 	adc.w	r6, ip, sl
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	4619      	mov	r1, r3
 80045b4:	f04f 0200 	mov.w	r2, #0
 80045b8:	f04f 0300 	mov.w	r3, #0
 80045bc:	f04f 0400 	mov.w	r4, #0
 80045c0:	0094      	lsls	r4, r2, #2
 80045c2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80045c6:	008b      	lsls	r3, r1, #2
 80045c8:	461a      	mov	r2, r3
 80045ca:	4623      	mov	r3, r4
 80045cc:	4628      	mov	r0, r5
 80045ce:	4631      	mov	r1, r6
 80045d0:	f7fb fdfa 	bl	80001c8 <__aeabi_uldivmod>
 80045d4:	4603      	mov	r3, r0
 80045d6:	460c      	mov	r4, r1
 80045d8:	461a      	mov	r2, r3
 80045da:	4b32      	ldr	r3, [pc, #200]	; (80046a4 <UART_SetConfig+0x6f4>)
 80045dc:	fba3 1302 	umull	r1, r3, r3, r2
 80045e0:	095b      	lsrs	r3, r3, #5
 80045e2:	2164      	movs	r1, #100	; 0x64
 80045e4:	fb01 f303 	mul.w	r3, r1, r3
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	011b      	lsls	r3, r3, #4
 80045ec:	3332      	adds	r3, #50	; 0x32
 80045ee:	4a2d      	ldr	r2, [pc, #180]	; (80046a4 <UART_SetConfig+0x6f4>)
 80045f0:	fba2 2303 	umull	r2, r3, r2, r3
 80045f4:	095b      	lsrs	r3, r3, #5
 80045f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045fa:	4498      	add	r8, r3
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	469b      	mov	fp, r3
 8004600:	f04f 0c00 	mov.w	ip, #0
 8004604:	46d9      	mov	r9, fp
 8004606:	46e2      	mov	sl, ip
 8004608:	eb19 0309 	adds.w	r3, r9, r9
 800460c:	eb4a 040a 	adc.w	r4, sl, sl
 8004610:	4699      	mov	r9, r3
 8004612:	46a2      	mov	sl, r4
 8004614:	eb19 090b 	adds.w	r9, r9, fp
 8004618:	eb4a 0a0c 	adc.w	sl, sl, ip
 800461c:	f04f 0100 	mov.w	r1, #0
 8004620:	f04f 0200 	mov.w	r2, #0
 8004624:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004628:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800462c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004630:	4689      	mov	r9, r1
 8004632:	4692      	mov	sl, r2
 8004634:	eb1b 0509 	adds.w	r5, fp, r9
 8004638:	eb4c 060a 	adc.w	r6, ip, sl
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	4619      	mov	r1, r3
 8004642:	f04f 0200 	mov.w	r2, #0
 8004646:	f04f 0300 	mov.w	r3, #0
 800464a:	f04f 0400 	mov.w	r4, #0
 800464e:	0094      	lsls	r4, r2, #2
 8004650:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004654:	008b      	lsls	r3, r1, #2
 8004656:	461a      	mov	r2, r3
 8004658:	4623      	mov	r3, r4
 800465a:	4628      	mov	r0, r5
 800465c:	4631      	mov	r1, r6
 800465e:	f7fb fdb3 	bl	80001c8 <__aeabi_uldivmod>
 8004662:	4603      	mov	r3, r0
 8004664:	460c      	mov	r4, r1
 8004666:	461a      	mov	r2, r3
 8004668:	4b0e      	ldr	r3, [pc, #56]	; (80046a4 <UART_SetConfig+0x6f4>)
 800466a:	fba3 1302 	umull	r1, r3, r3, r2
 800466e:	095b      	lsrs	r3, r3, #5
 8004670:	2164      	movs	r1, #100	; 0x64
 8004672:	fb01 f303 	mul.w	r3, r1, r3
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	011b      	lsls	r3, r3, #4
 800467a:	3332      	adds	r3, #50	; 0x32
 800467c:	4a09      	ldr	r2, [pc, #36]	; (80046a4 <UART_SetConfig+0x6f4>)
 800467e:	fba2 2303 	umull	r2, r3, r2, r3
 8004682:	095b      	lsrs	r3, r3, #5
 8004684:	f003 020f 	and.w	r2, r3, #15
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4442      	add	r2, r8
 800468e:	609a      	str	r2, [r3, #8]
}
 8004690:	e7ff      	b.n	8004692 <UART_SetConfig+0x6e2>
 8004692:	bf00      	nop
 8004694:	3714      	adds	r7, #20
 8004696:	46bd      	mov	sp, r7
 8004698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800469c:	40011000 	.word	0x40011000
 80046a0:	40011400 	.word	0x40011400
 80046a4:	51eb851f 	.word	0x51eb851f

080046a8 <__errno>:
 80046a8:	4b01      	ldr	r3, [pc, #4]	; (80046b0 <__errno+0x8>)
 80046aa:	6818      	ldr	r0, [r3, #0]
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	2000000c 	.word	0x2000000c

080046b4 <__libc_init_array>:
 80046b4:	b570      	push	{r4, r5, r6, lr}
 80046b6:	4e0d      	ldr	r6, [pc, #52]	; (80046ec <__libc_init_array+0x38>)
 80046b8:	4c0d      	ldr	r4, [pc, #52]	; (80046f0 <__libc_init_array+0x3c>)
 80046ba:	1ba4      	subs	r4, r4, r6
 80046bc:	10a4      	asrs	r4, r4, #2
 80046be:	2500      	movs	r5, #0
 80046c0:	42a5      	cmp	r5, r4
 80046c2:	d109      	bne.n	80046d8 <__libc_init_array+0x24>
 80046c4:	4e0b      	ldr	r6, [pc, #44]	; (80046f4 <__libc_init_array+0x40>)
 80046c6:	4c0c      	ldr	r4, [pc, #48]	; (80046f8 <__libc_init_array+0x44>)
 80046c8:	f000 fc88 	bl	8004fdc <_init>
 80046cc:	1ba4      	subs	r4, r4, r6
 80046ce:	10a4      	asrs	r4, r4, #2
 80046d0:	2500      	movs	r5, #0
 80046d2:	42a5      	cmp	r5, r4
 80046d4:	d105      	bne.n	80046e2 <__libc_init_array+0x2e>
 80046d6:	bd70      	pop	{r4, r5, r6, pc}
 80046d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80046dc:	4798      	blx	r3
 80046de:	3501      	adds	r5, #1
 80046e0:	e7ee      	b.n	80046c0 <__libc_init_array+0xc>
 80046e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80046e6:	4798      	blx	r3
 80046e8:	3501      	adds	r5, #1
 80046ea:	e7f2      	b.n	80046d2 <__libc_init_array+0x1e>
 80046ec:	08005084 	.word	0x08005084
 80046f0:	08005084 	.word	0x08005084
 80046f4:	08005084 	.word	0x08005084
 80046f8:	08005088 	.word	0x08005088

080046fc <memset>:
 80046fc:	4402      	add	r2, r0
 80046fe:	4603      	mov	r3, r0
 8004700:	4293      	cmp	r3, r2
 8004702:	d100      	bne.n	8004706 <memset+0xa>
 8004704:	4770      	bx	lr
 8004706:	f803 1b01 	strb.w	r1, [r3], #1
 800470a:	e7f9      	b.n	8004700 <memset+0x4>

0800470c <_puts_r>:
 800470c:	b570      	push	{r4, r5, r6, lr}
 800470e:	460e      	mov	r6, r1
 8004710:	4605      	mov	r5, r0
 8004712:	b118      	cbz	r0, 800471c <_puts_r+0x10>
 8004714:	6983      	ldr	r3, [r0, #24]
 8004716:	b90b      	cbnz	r3, 800471c <_puts_r+0x10>
 8004718:	f000 fa0c 	bl	8004b34 <__sinit>
 800471c:	69ab      	ldr	r3, [r5, #24]
 800471e:	68ac      	ldr	r4, [r5, #8]
 8004720:	b913      	cbnz	r3, 8004728 <_puts_r+0x1c>
 8004722:	4628      	mov	r0, r5
 8004724:	f000 fa06 	bl	8004b34 <__sinit>
 8004728:	4b23      	ldr	r3, [pc, #140]	; (80047b8 <_puts_r+0xac>)
 800472a:	429c      	cmp	r4, r3
 800472c:	d117      	bne.n	800475e <_puts_r+0x52>
 800472e:	686c      	ldr	r4, [r5, #4]
 8004730:	89a3      	ldrh	r3, [r4, #12]
 8004732:	071b      	lsls	r3, r3, #28
 8004734:	d51d      	bpl.n	8004772 <_puts_r+0x66>
 8004736:	6923      	ldr	r3, [r4, #16]
 8004738:	b1db      	cbz	r3, 8004772 <_puts_r+0x66>
 800473a:	3e01      	subs	r6, #1
 800473c:	68a3      	ldr	r3, [r4, #8]
 800473e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004742:	3b01      	subs	r3, #1
 8004744:	60a3      	str	r3, [r4, #8]
 8004746:	b9e9      	cbnz	r1, 8004784 <_puts_r+0x78>
 8004748:	2b00      	cmp	r3, #0
 800474a:	da2e      	bge.n	80047aa <_puts_r+0x9e>
 800474c:	4622      	mov	r2, r4
 800474e:	210a      	movs	r1, #10
 8004750:	4628      	mov	r0, r5
 8004752:	f000 f83f 	bl	80047d4 <__swbuf_r>
 8004756:	3001      	adds	r0, #1
 8004758:	d011      	beq.n	800477e <_puts_r+0x72>
 800475a:	200a      	movs	r0, #10
 800475c:	e011      	b.n	8004782 <_puts_r+0x76>
 800475e:	4b17      	ldr	r3, [pc, #92]	; (80047bc <_puts_r+0xb0>)
 8004760:	429c      	cmp	r4, r3
 8004762:	d101      	bne.n	8004768 <_puts_r+0x5c>
 8004764:	68ac      	ldr	r4, [r5, #8]
 8004766:	e7e3      	b.n	8004730 <_puts_r+0x24>
 8004768:	4b15      	ldr	r3, [pc, #84]	; (80047c0 <_puts_r+0xb4>)
 800476a:	429c      	cmp	r4, r3
 800476c:	bf08      	it	eq
 800476e:	68ec      	ldreq	r4, [r5, #12]
 8004770:	e7de      	b.n	8004730 <_puts_r+0x24>
 8004772:	4621      	mov	r1, r4
 8004774:	4628      	mov	r0, r5
 8004776:	f000 f87f 	bl	8004878 <__swsetup_r>
 800477a:	2800      	cmp	r0, #0
 800477c:	d0dd      	beq.n	800473a <_puts_r+0x2e>
 800477e:	f04f 30ff 	mov.w	r0, #4294967295
 8004782:	bd70      	pop	{r4, r5, r6, pc}
 8004784:	2b00      	cmp	r3, #0
 8004786:	da04      	bge.n	8004792 <_puts_r+0x86>
 8004788:	69a2      	ldr	r2, [r4, #24]
 800478a:	429a      	cmp	r2, r3
 800478c:	dc06      	bgt.n	800479c <_puts_r+0x90>
 800478e:	290a      	cmp	r1, #10
 8004790:	d004      	beq.n	800479c <_puts_r+0x90>
 8004792:	6823      	ldr	r3, [r4, #0]
 8004794:	1c5a      	adds	r2, r3, #1
 8004796:	6022      	str	r2, [r4, #0]
 8004798:	7019      	strb	r1, [r3, #0]
 800479a:	e7cf      	b.n	800473c <_puts_r+0x30>
 800479c:	4622      	mov	r2, r4
 800479e:	4628      	mov	r0, r5
 80047a0:	f000 f818 	bl	80047d4 <__swbuf_r>
 80047a4:	3001      	adds	r0, #1
 80047a6:	d1c9      	bne.n	800473c <_puts_r+0x30>
 80047a8:	e7e9      	b.n	800477e <_puts_r+0x72>
 80047aa:	6823      	ldr	r3, [r4, #0]
 80047ac:	200a      	movs	r0, #10
 80047ae:	1c5a      	adds	r2, r3, #1
 80047b0:	6022      	str	r2, [r4, #0]
 80047b2:	7018      	strb	r0, [r3, #0]
 80047b4:	e7e5      	b.n	8004782 <_puts_r+0x76>
 80047b6:	bf00      	nop
 80047b8:	0800503c 	.word	0x0800503c
 80047bc:	0800505c 	.word	0x0800505c
 80047c0:	0800501c 	.word	0x0800501c

080047c4 <puts>:
 80047c4:	4b02      	ldr	r3, [pc, #8]	; (80047d0 <puts+0xc>)
 80047c6:	4601      	mov	r1, r0
 80047c8:	6818      	ldr	r0, [r3, #0]
 80047ca:	f7ff bf9f 	b.w	800470c <_puts_r>
 80047ce:	bf00      	nop
 80047d0:	2000000c 	.word	0x2000000c

080047d4 <__swbuf_r>:
 80047d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047d6:	460e      	mov	r6, r1
 80047d8:	4614      	mov	r4, r2
 80047da:	4605      	mov	r5, r0
 80047dc:	b118      	cbz	r0, 80047e6 <__swbuf_r+0x12>
 80047de:	6983      	ldr	r3, [r0, #24]
 80047e0:	b90b      	cbnz	r3, 80047e6 <__swbuf_r+0x12>
 80047e2:	f000 f9a7 	bl	8004b34 <__sinit>
 80047e6:	4b21      	ldr	r3, [pc, #132]	; (800486c <__swbuf_r+0x98>)
 80047e8:	429c      	cmp	r4, r3
 80047ea:	d12a      	bne.n	8004842 <__swbuf_r+0x6e>
 80047ec:	686c      	ldr	r4, [r5, #4]
 80047ee:	69a3      	ldr	r3, [r4, #24]
 80047f0:	60a3      	str	r3, [r4, #8]
 80047f2:	89a3      	ldrh	r3, [r4, #12]
 80047f4:	071a      	lsls	r2, r3, #28
 80047f6:	d52e      	bpl.n	8004856 <__swbuf_r+0x82>
 80047f8:	6923      	ldr	r3, [r4, #16]
 80047fa:	b363      	cbz	r3, 8004856 <__swbuf_r+0x82>
 80047fc:	6923      	ldr	r3, [r4, #16]
 80047fe:	6820      	ldr	r0, [r4, #0]
 8004800:	1ac0      	subs	r0, r0, r3
 8004802:	6963      	ldr	r3, [r4, #20]
 8004804:	b2f6      	uxtb	r6, r6
 8004806:	4283      	cmp	r3, r0
 8004808:	4637      	mov	r7, r6
 800480a:	dc04      	bgt.n	8004816 <__swbuf_r+0x42>
 800480c:	4621      	mov	r1, r4
 800480e:	4628      	mov	r0, r5
 8004810:	f000 f926 	bl	8004a60 <_fflush_r>
 8004814:	bb28      	cbnz	r0, 8004862 <__swbuf_r+0x8e>
 8004816:	68a3      	ldr	r3, [r4, #8]
 8004818:	3b01      	subs	r3, #1
 800481a:	60a3      	str	r3, [r4, #8]
 800481c:	6823      	ldr	r3, [r4, #0]
 800481e:	1c5a      	adds	r2, r3, #1
 8004820:	6022      	str	r2, [r4, #0]
 8004822:	701e      	strb	r6, [r3, #0]
 8004824:	6963      	ldr	r3, [r4, #20]
 8004826:	3001      	adds	r0, #1
 8004828:	4283      	cmp	r3, r0
 800482a:	d004      	beq.n	8004836 <__swbuf_r+0x62>
 800482c:	89a3      	ldrh	r3, [r4, #12]
 800482e:	07db      	lsls	r3, r3, #31
 8004830:	d519      	bpl.n	8004866 <__swbuf_r+0x92>
 8004832:	2e0a      	cmp	r6, #10
 8004834:	d117      	bne.n	8004866 <__swbuf_r+0x92>
 8004836:	4621      	mov	r1, r4
 8004838:	4628      	mov	r0, r5
 800483a:	f000 f911 	bl	8004a60 <_fflush_r>
 800483e:	b190      	cbz	r0, 8004866 <__swbuf_r+0x92>
 8004840:	e00f      	b.n	8004862 <__swbuf_r+0x8e>
 8004842:	4b0b      	ldr	r3, [pc, #44]	; (8004870 <__swbuf_r+0x9c>)
 8004844:	429c      	cmp	r4, r3
 8004846:	d101      	bne.n	800484c <__swbuf_r+0x78>
 8004848:	68ac      	ldr	r4, [r5, #8]
 800484a:	e7d0      	b.n	80047ee <__swbuf_r+0x1a>
 800484c:	4b09      	ldr	r3, [pc, #36]	; (8004874 <__swbuf_r+0xa0>)
 800484e:	429c      	cmp	r4, r3
 8004850:	bf08      	it	eq
 8004852:	68ec      	ldreq	r4, [r5, #12]
 8004854:	e7cb      	b.n	80047ee <__swbuf_r+0x1a>
 8004856:	4621      	mov	r1, r4
 8004858:	4628      	mov	r0, r5
 800485a:	f000 f80d 	bl	8004878 <__swsetup_r>
 800485e:	2800      	cmp	r0, #0
 8004860:	d0cc      	beq.n	80047fc <__swbuf_r+0x28>
 8004862:	f04f 37ff 	mov.w	r7, #4294967295
 8004866:	4638      	mov	r0, r7
 8004868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800486a:	bf00      	nop
 800486c:	0800503c 	.word	0x0800503c
 8004870:	0800505c 	.word	0x0800505c
 8004874:	0800501c 	.word	0x0800501c

08004878 <__swsetup_r>:
 8004878:	4b32      	ldr	r3, [pc, #200]	; (8004944 <__swsetup_r+0xcc>)
 800487a:	b570      	push	{r4, r5, r6, lr}
 800487c:	681d      	ldr	r5, [r3, #0]
 800487e:	4606      	mov	r6, r0
 8004880:	460c      	mov	r4, r1
 8004882:	b125      	cbz	r5, 800488e <__swsetup_r+0x16>
 8004884:	69ab      	ldr	r3, [r5, #24]
 8004886:	b913      	cbnz	r3, 800488e <__swsetup_r+0x16>
 8004888:	4628      	mov	r0, r5
 800488a:	f000 f953 	bl	8004b34 <__sinit>
 800488e:	4b2e      	ldr	r3, [pc, #184]	; (8004948 <__swsetup_r+0xd0>)
 8004890:	429c      	cmp	r4, r3
 8004892:	d10f      	bne.n	80048b4 <__swsetup_r+0x3c>
 8004894:	686c      	ldr	r4, [r5, #4]
 8004896:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800489a:	b29a      	uxth	r2, r3
 800489c:	0715      	lsls	r5, r2, #28
 800489e:	d42c      	bmi.n	80048fa <__swsetup_r+0x82>
 80048a0:	06d0      	lsls	r0, r2, #27
 80048a2:	d411      	bmi.n	80048c8 <__swsetup_r+0x50>
 80048a4:	2209      	movs	r2, #9
 80048a6:	6032      	str	r2, [r6, #0]
 80048a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048ac:	81a3      	strh	r3, [r4, #12]
 80048ae:	f04f 30ff 	mov.w	r0, #4294967295
 80048b2:	e03e      	b.n	8004932 <__swsetup_r+0xba>
 80048b4:	4b25      	ldr	r3, [pc, #148]	; (800494c <__swsetup_r+0xd4>)
 80048b6:	429c      	cmp	r4, r3
 80048b8:	d101      	bne.n	80048be <__swsetup_r+0x46>
 80048ba:	68ac      	ldr	r4, [r5, #8]
 80048bc:	e7eb      	b.n	8004896 <__swsetup_r+0x1e>
 80048be:	4b24      	ldr	r3, [pc, #144]	; (8004950 <__swsetup_r+0xd8>)
 80048c0:	429c      	cmp	r4, r3
 80048c2:	bf08      	it	eq
 80048c4:	68ec      	ldreq	r4, [r5, #12]
 80048c6:	e7e6      	b.n	8004896 <__swsetup_r+0x1e>
 80048c8:	0751      	lsls	r1, r2, #29
 80048ca:	d512      	bpl.n	80048f2 <__swsetup_r+0x7a>
 80048cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048ce:	b141      	cbz	r1, 80048e2 <__swsetup_r+0x6a>
 80048d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80048d4:	4299      	cmp	r1, r3
 80048d6:	d002      	beq.n	80048de <__swsetup_r+0x66>
 80048d8:	4630      	mov	r0, r6
 80048da:	f000 fa19 	bl	8004d10 <_free_r>
 80048de:	2300      	movs	r3, #0
 80048e0:	6363      	str	r3, [r4, #52]	; 0x34
 80048e2:	89a3      	ldrh	r3, [r4, #12]
 80048e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80048e8:	81a3      	strh	r3, [r4, #12]
 80048ea:	2300      	movs	r3, #0
 80048ec:	6063      	str	r3, [r4, #4]
 80048ee:	6923      	ldr	r3, [r4, #16]
 80048f0:	6023      	str	r3, [r4, #0]
 80048f2:	89a3      	ldrh	r3, [r4, #12]
 80048f4:	f043 0308 	orr.w	r3, r3, #8
 80048f8:	81a3      	strh	r3, [r4, #12]
 80048fa:	6923      	ldr	r3, [r4, #16]
 80048fc:	b94b      	cbnz	r3, 8004912 <__swsetup_r+0x9a>
 80048fe:	89a3      	ldrh	r3, [r4, #12]
 8004900:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004904:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004908:	d003      	beq.n	8004912 <__swsetup_r+0x9a>
 800490a:	4621      	mov	r1, r4
 800490c:	4630      	mov	r0, r6
 800490e:	f000 f9bf 	bl	8004c90 <__smakebuf_r>
 8004912:	89a2      	ldrh	r2, [r4, #12]
 8004914:	f012 0301 	ands.w	r3, r2, #1
 8004918:	d00c      	beq.n	8004934 <__swsetup_r+0xbc>
 800491a:	2300      	movs	r3, #0
 800491c:	60a3      	str	r3, [r4, #8]
 800491e:	6963      	ldr	r3, [r4, #20]
 8004920:	425b      	negs	r3, r3
 8004922:	61a3      	str	r3, [r4, #24]
 8004924:	6923      	ldr	r3, [r4, #16]
 8004926:	b953      	cbnz	r3, 800493e <__swsetup_r+0xc6>
 8004928:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800492c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004930:	d1ba      	bne.n	80048a8 <__swsetup_r+0x30>
 8004932:	bd70      	pop	{r4, r5, r6, pc}
 8004934:	0792      	lsls	r2, r2, #30
 8004936:	bf58      	it	pl
 8004938:	6963      	ldrpl	r3, [r4, #20]
 800493a:	60a3      	str	r3, [r4, #8]
 800493c:	e7f2      	b.n	8004924 <__swsetup_r+0xac>
 800493e:	2000      	movs	r0, #0
 8004940:	e7f7      	b.n	8004932 <__swsetup_r+0xba>
 8004942:	bf00      	nop
 8004944:	2000000c 	.word	0x2000000c
 8004948:	0800503c 	.word	0x0800503c
 800494c:	0800505c 	.word	0x0800505c
 8004950:	0800501c 	.word	0x0800501c

08004954 <__sflush_r>:
 8004954:	898a      	ldrh	r2, [r1, #12]
 8004956:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800495a:	4605      	mov	r5, r0
 800495c:	0710      	lsls	r0, r2, #28
 800495e:	460c      	mov	r4, r1
 8004960:	d458      	bmi.n	8004a14 <__sflush_r+0xc0>
 8004962:	684b      	ldr	r3, [r1, #4]
 8004964:	2b00      	cmp	r3, #0
 8004966:	dc05      	bgt.n	8004974 <__sflush_r+0x20>
 8004968:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800496a:	2b00      	cmp	r3, #0
 800496c:	dc02      	bgt.n	8004974 <__sflush_r+0x20>
 800496e:	2000      	movs	r0, #0
 8004970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004974:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004976:	2e00      	cmp	r6, #0
 8004978:	d0f9      	beq.n	800496e <__sflush_r+0x1a>
 800497a:	2300      	movs	r3, #0
 800497c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004980:	682f      	ldr	r7, [r5, #0]
 8004982:	6a21      	ldr	r1, [r4, #32]
 8004984:	602b      	str	r3, [r5, #0]
 8004986:	d032      	beq.n	80049ee <__sflush_r+0x9a>
 8004988:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800498a:	89a3      	ldrh	r3, [r4, #12]
 800498c:	075a      	lsls	r2, r3, #29
 800498e:	d505      	bpl.n	800499c <__sflush_r+0x48>
 8004990:	6863      	ldr	r3, [r4, #4]
 8004992:	1ac0      	subs	r0, r0, r3
 8004994:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004996:	b10b      	cbz	r3, 800499c <__sflush_r+0x48>
 8004998:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800499a:	1ac0      	subs	r0, r0, r3
 800499c:	2300      	movs	r3, #0
 800499e:	4602      	mov	r2, r0
 80049a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80049a2:	6a21      	ldr	r1, [r4, #32]
 80049a4:	4628      	mov	r0, r5
 80049a6:	47b0      	blx	r6
 80049a8:	1c43      	adds	r3, r0, #1
 80049aa:	89a3      	ldrh	r3, [r4, #12]
 80049ac:	d106      	bne.n	80049bc <__sflush_r+0x68>
 80049ae:	6829      	ldr	r1, [r5, #0]
 80049b0:	291d      	cmp	r1, #29
 80049b2:	d848      	bhi.n	8004a46 <__sflush_r+0xf2>
 80049b4:	4a29      	ldr	r2, [pc, #164]	; (8004a5c <__sflush_r+0x108>)
 80049b6:	40ca      	lsrs	r2, r1
 80049b8:	07d6      	lsls	r6, r2, #31
 80049ba:	d544      	bpl.n	8004a46 <__sflush_r+0xf2>
 80049bc:	2200      	movs	r2, #0
 80049be:	6062      	str	r2, [r4, #4]
 80049c0:	04d9      	lsls	r1, r3, #19
 80049c2:	6922      	ldr	r2, [r4, #16]
 80049c4:	6022      	str	r2, [r4, #0]
 80049c6:	d504      	bpl.n	80049d2 <__sflush_r+0x7e>
 80049c8:	1c42      	adds	r2, r0, #1
 80049ca:	d101      	bne.n	80049d0 <__sflush_r+0x7c>
 80049cc:	682b      	ldr	r3, [r5, #0]
 80049ce:	b903      	cbnz	r3, 80049d2 <__sflush_r+0x7e>
 80049d0:	6560      	str	r0, [r4, #84]	; 0x54
 80049d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80049d4:	602f      	str	r7, [r5, #0]
 80049d6:	2900      	cmp	r1, #0
 80049d8:	d0c9      	beq.n	800496e <__sflush_r+0x1a>
 80049da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80049de:	4299      	cmp	r1, r3
 80049e0:	d002      	beq.n	80049e8 <__sflush_r+0x94>
 80049e2:	4628      	mov	r0, r5
 80049e4:	f000 f994 	bl	8004d10 <_free_r>
 80049e8:	2000      	movs	r0, #0
 80049ea:	6360      	str	r0, [r4, #52]	; 0x34
 80049ec:	e7c0      	b.n	8004970 <__sflush_r+0x1c>
 80049ee:	2301      	movs	r3, #1
 80049f0:	4628      	mov	r0, r5
 80049f2:	47b0      	blx	r6
 80049f4:	1c41      	adds	r1, r0, #1
 80049f6:	d1c8      	bne.n	800498a <__sflush_r+0x36>
 80049f8:	682b      	ldr	r3, [r5, #0]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d0c5      	beq.n	800498a <__sflush_r+0x36>
 80049fe:	2b1d      	cmp	r3, #29
 8004a00:	d001      	beq.n	8004a06 <__sflush_r+0xb2>
 8004a02:	2b16      	cmp	r3, #22
 8004a04:	d101      	bne.n	8004a0a <__sflush_r+0xb6>
 8004a06:	602f      	str	r7, [r5, #0]
 8004a08:	e7b1      	b.n	800496e <__sflush_r+0x1a>
 8004a0a:	89a3      	ldrh	r3, [r4, #12]
 8004a0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a10:	81a3      	strh	r3, [r4, #12]
 8004a12:	e7ad      	b.n	8004970 <__sflush_r+0x1c>
 8004a14:	690f      	ldr	r7, [r1, #16]
 8004a16:	2f00      	cmp	r7, #0
 8004a18:	d0a9      	beq.n	800496e <__sflush_r+0x1a>
 8004a1a:	0793      	lsls	r3, r2, #30
 8004a1c:	680e      	ldr	r6, [r1, #0]
 8004a1e:	bf08      	it	eq
 8004a20:	694b      	ldreq	r3, [r1, #20]
 8004a22:	600f      	str	r7, [r1, #0]
 8004a24:	bf18      	it	ne
 8004a26:	2300      	movne	r3, #0
 8004a28:	eba6 0807 	sub.w	r8, r6, r7
 8004a2c:	608b      	str	r3, [r1, #8]
 8004a2e:	f1b8 0f00 	cmp.w	r8, #0
 8004a32:	dd9c      	ble.n	800496e <__sflush_r+0x1a>
 8004a34:	4643      	mov	r3, r8
 8004a36:	463a      	mov	r2, r7
 8004a38:	6a21      	ldr	r1, [r4, #32]
 8004a3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004a3c:	4628      	mov	r0, r5
 8004a3e:	47b0      	blx	r6
 8004a40:	2800      	cmp	r0, #0
 8004a42:	dc06      	bgt.n	8004a52 <__sflush_r+0xfe>
 8004a44:	89a3      	ldrh	r3, [r4, #12]
 8004a46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a4a:	81a3      	strh	r3, [r4, #12]
 8004a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a50:	e78e      	b.n	8004970 <__sflush_r+0x1c>
 8004a52:	4407      	add	r7, r0
 8004a54:	eba8 0800 	sub.w	r8, r8, r0
 8004a58:	e7e9      	b.n	8004a2e <__sflush_r+0xda>
 8004a5a:	bf00      	nop
 8004a5c:	20400001 	.word	0x20400001

08004a60 <_fflush_r>:
 8004a60:	b538      	push	{r3, r4, r5, lr}
 8004a62:	690b      	ldr	r3, [r1, #16]
 8004a64:	4605      	mov	r5, r0
 8004a66:	460c      	mov	r4, r1
 8004a68:	b1db      	cbz	r3, 8004aa2 <_fflush_r+0x42>
 8004a6a:	b118      	cbz	r0, 8004a74 <_fflush_r+0x14>
 8004a6c:	6983      	ldr	r3, [r0, #24]
 8004a6e:	b90b      	cbnz	r3, 8004a74 <_fflush_r+0x14>
 8004a70:	f000 f860 	bl	8004b34 <__sinit>
 8004a74:	4b0c      	ldr	r3, [pc, #48]	; (8004aa8 <_fflush_r+0x48>)
 8004a76:	429c      	cmp	r4, r3
 8004a78:	d109      	bne.n	8004a8e <_fflush_r+0x2e>
 8004a7a:	686c      	ldr	r4, [r5, #4]
 8004a7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a80:	b17b      	cbz	r3, 8004aa2 <_fflush_r+0x42>
 8004a82:	4621      	mov	r1, r4
 8004a84:	4628      	mov	r0, r5
 8004a86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a8a:	f7ff bf63 	b.w	8004954 <__sflush_r>
 8004a8e:	4b07      	ldr	r3, [pc, #28]	; (8004aac <_fflush_r+0x4c>)
 8004a90:	429c      	cmp	r4, r3
 8004a92:	d101      	bne.n	8004a98 <_fflush_r+0x38>
 8004a94:	68ac      	ldr	r4, [r5, #8]
 8004a96:	e7f1      	b.n	8004a7c <_fflush_r+0x1c>
 8004a98:	4b05      	ldr	r3, [pc, #20]	; (8004ab0 <_fflush_r+0x50>)
 8004a9a:	429c      	cmp	r4, r3
 8004a9c:	bf08      	it	eq
 8004a9e:	68ec      	ldreq	r4, [r5, #12]
 8004aa0:	e7ec      	b.n	8004a7c <_fflush_r+0x1c>
 8004aa2:	2000      	movs	r0, #0
 8004aa4:	bd38      	pop	{r3, r4, r5, pc}
 8004aa6:	bf00      	nop
 8004aa8:	0800503c 	.word	0x0800503c
 8004aac:	0800505c 	.word	0x0800505c
 8004ab0:	0800501c 	.word	0x0800501c

08004ab4 <std>:
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	b510      	push	{r4, lr}
 8004ab8:	4604      	mov	r4, r0
 8004aba:	e9c0 3300 	strd	r3, r3, [r0]
 8004abe:	6083      	str	r3, [r0, #8]
 8004ac0:	8181      	strh	r1, [r0, #12]
 8004ac2:	6643      	str	r3, [r0, #100]	; 0x64
 8004ac4:	81c2      	strh	r2, [r0, #14]
 8004ac6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004aca:	6183      	str	r3, [r0, #24]
 8004acc:	4619      	mov	r1, r3
 8004ace:	2208      	movs	r2, #8
 8004ad0:	305c      	adds	r0, #92	; 0x5c
 8004ad2:	f7ff fe13 	bl	80046fc <memset>
 8004ad6:	4b05      	ldr	r3, [pc, #20]	; (8004aec <std+0x38>)
 8004ad8:	6263      	str	r3, [r4, #36]	; 0x24
 8004ada:	4b05      	ldr	r3, [pc, #20]	; (8004af0 <std+0x3c>)
 8004adc:	62a3      	str	r3, [r4, #40]	; 0x28
 8004ade:	4b05      	ldr	r3, [pc, #20]	; (8004af4 <std+0x40>)
 8004ae0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004ae2:	4b05      	ldr	r3, [pc, #20]	; (8004af8 <std+0x44>)
 8004ae4:	6224      	str	r4, [r4, #32]
 8004ae6:	6323      	str	r3, [r4, #48]	; 0x30
 8004ae8:	bd10      	pop	{r4, pc}
 8004aea:	bf00      	nop
 8004aec:	08004e81 	.word	0x08004e81
 8004af0:	08004ea3 	.word	0x08004ea3
 8004af4:	08004edb 	.word	0x08004edb
 8004af8:	08004eff 	.word	0x08004eff

08004afc <_cleanup_r>:
 8004afc:	4901      	ldr	r1, [pc, #4]	; (8004b04 <_cleanup_r+0x8>)
 8004afe:	f000 b885 	b.w	8004c0c <_fwalk_reent>
 8004b02:	bf00      	nop
 8004b04:	08004a61 	.word	0x08004a61

08004b08 <__sfmoreglue>:
 8004b08:	b570      	push	{r4, r5, r6, lr}
 8004b0a:	1e4a      	subs	r2, r1, #1
 8004b0c:	2568      	movs	r5, #104	; 0x68
 8004b0e:	4355      	muls	r5, r2
 8004b10:	460e      	mov	r6, r1
 8004b12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004b16:	f000 f949 	bl	8004dac <_malloc_r>
 8004b1a:	4604      	mov	r4, r0
 8004b1c:	b140      	cbz	r0, 8004b30 <__sfmoreglue+0x28>
 8004b1e:	2100      	movs	r1, #0
 8004b20:	e9c0 1600 	strd	r1, r6, [r0]
 8004b24:	300c      	adds	r0, #12
 8004b26:	60a0      	str	r0, [r4, #8]
 8004b28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004b2c:	f7ff fde6 	bl	80046fc <memset>
 8004b30:	4620      	mov	r0, r4
 8004b32:	bd70      	pop	{r4, r5, r6, pc}

08004b34 <__sinit>:
 8004b34:	6983      	ldr	r3, [r0, #24]
 8004b36:	b510      	push	{r4, lr}
 8004b38:	4604      	mov	r4, r0
 8004b3a:	bb33      	cbnz	r3, 8004b8a <__sinit+0x56>
 8004b3c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004b40:	6503      	str	r3, [r0, #80]	; 0x50
 8004b42:	4b12      	ldr	r3, [pc, #72]	; (8004b8c <__sinit+0x58>)
 8004b44:	4a12      	ldr	r2, [pc, #72]	; (8004b90 <__sinit+0x5c>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6282      	str	r2, [r0, #40]	; 0x28
 8004b4a:	4298      	cmp	r0, r3
 8004b4c:	bf04      	itt	eq
 8004b4e:	2301      	moveq	r3, #1
 8004b50:	6183      	streq	r3, [r0, #24]
 8004b52:	f000 f81f 	bl	8004b94 <__sfp>
 8004b56:	6060      	str	r0, [r4, #4]
 8004b58:	4620      	mov	r0, r4
 8004b5a:	f000 f81b 	bl	8004b94 <__sfp>
 8004b5e:	60a0      	str	r0, [r4, #8]
 8004b60:	4620      	mov	r0, r4
 8004b62:	f000 f817 	bl	8004b94 <__sfp>
 8004b66:	2200      	movs	r2, #0
 8004b68:	60e0      	str	r0, [r4, #12]
 8004b6a:	2104      	movs	r1, #4
 8004b6c:	6860      	ldr	r0, [r4, #4]
 8004b6e:	f7ff ffa1 	bl	8004ab4 <std>
 8004b72:	2201      	movs	r2, #1
 8004b74:	2109      	movs	r1, #9
 8004b76:	68a0      	ldr	r0, [r4, #8]
 8004b78:	f7ff ff9c 	bl	8004ab4 <std>
 8004b7c:	2202      	movs	r2, #2
 8004b7e:	2112      	movs	r1, #18
 8004b80:	68e0      	ldr	r0, [r4, #12]
 8004b82:	f7ff ff97 	bl	8004ab4 <std>
 8004b86:	2301      	movs	r3, #1
 8004b88:	61a3      	str	r3, [r4, #24]
 8004b8a:	bd10      	pop	{r4, pc}
 8004b8c:	08005018 	.word	0x08005018
 8004b90:	08004afd 	.word	0x08004afd

08004b94 <__sfp>:
 8004b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b96:	4b1b      	ldr	r3, [pc, #108]	; (8004c04 <__sfp+0x70>)
 8004b98:	681e      	ldr	r6, [r3, #0]
 8004b9a:	69b3      	ldr	r3, [r6, #24]
 8004b9c:	4607      	mov	r7, r0
 8004b9e:	b913      	cbnz	r3, 8004ba6 <__sfp+0x12>
 8004ba0:	4630      	mov	r0, r6
 8004ba2:	f7ff ffc7 	bl	8004b34 <__sinit>
 8004ba6:	3648      	adds	r6, #72	; 0x48
 8004ba8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004bac:	3b01      	subs	r3, #1
 8004bae:	d503      	bpl.n	8004bb8 <__sfp+0x24>
 8004bb0:	6833      	ldr	r3, [r6, #0]
 8004bb2:	b133      	cbz	r3, 8004bc2 <__sfp+0x2e>
 8004bb4:	6836      	ldr	r6, [r6, #0]
 8004bb6:	e7f7      	b.n	8004ba8 <__sfp+0x14>
 8004bb8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004bbc:	b16d      	cbz	r5, 8004bda <__sfp+0x46>
 8004bbe:	3468      	adds	r4, #104	; 0x68
 8004bc0:	e7f4      	b.n	8004bac <__sfp+0x18>
 8004bc2:	2104      	movs	r1, #4
 8004bc4:	4638      	mov	r0, r7
 8004bc6:	f7ff ff9f 	bl	8004b08 <__sfmoreglue>
 8004bca:	6030      	str	r0, [r6, #0]
 8004bcc:	2800      	cmp	r0, #0
 8004bce:	d1f1      	bne.n	8004bb4 <__sfp+0x20>
 8004bd0:	230c      	movs	r3, #12
 8004bd2:	603b      	str	r3, [r7, #0]
 8004bd4:	4604      	mov	r4, r0
 8004bd6:	4620      	mov	r0, r4
 8004bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bda:	4b0b      	ldr	r3, [pc, #44]	; (8004c08 <__sfp+0x74>)
 8004bdc:	6665      	str	r5, [r4, #100]	; 0x64
 8004bde:	e9c4 5500 	strd	r5, r5, [r4]
 8004be2:	60a5      	str	r5, [r4, #8]
 8004be4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004be8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004bec:	2208      	movs	r2, #8
 8004bee:	4629      	mov	r1, r5
 8004bf0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004bf4:	f7ff fd82 	bl	80046fc <memset>
 8004bf8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004bfc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004c00:	e7e9      	b.n	8004bd6 <__sfp+0x42>
 8004c02:	bf00      	nop
 8004c04:	08005018 	.word	0x08005018
 8004c08:	ffff0001 	.word	0xffff0001

08004c0c <_fwalk_reent>:
 8004c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c10:	4680      	mov	r8, r0
 8004c12:	4689      	mov	r9, r1
 8004c14:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004c18:	2600      	movs	r6, #0
 8004c1a:	b914      	cbnz	r4, 8004c22 <_fwalk_reent+0x16>
 8004c1c:	4630      	mov	r0, r6
 8004c1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c22:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004c26:	3f01      	subs	r7, #1
 8004c28:	d501      	bpl.n	8004c2e <_fwalk_reent+0x22>
 8004c2a:	6824      	ldr	r4, [r4, #0]
 8004c2c:	e7f5      	b.n	8004c1a <_fwalk_reent+0xe>
 8004c2e:	89ab      	ldrh	r3, [r5, #12]
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d907      	bls.n	8004c44 <_fwalk_reent+0x38>
 8004c34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c38:	3301      	adds	r3, #1
 8004c3a:	d003      	beq.n	8004c44 <_fwalk_reent+0x38>
 8004c3c:	4629      	mov	r1, r5
 8004c3e:	4640      	mov	r0, r8
 8004c40:	47c8      	blx	r9
 8004c42:	4306      	orrs	r6, r0
 8004c44:	3568      	adds	r5, #104	; 0x68
 8004c46:	e7ee      	b.n	8004c26 <_fwalk_reent+0x1a>

08004c48 <__swhatbuf_r>:
 8004c48:	b570      	push	{r4, r5, r6, lr}
 8004c4a:	460e      	mov	r6, r1
 8004c4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c50:	2900      	cmp	r1, #0
 8004c52:	b096      	sub	sp, #88	; 0x58
 8004c54:	4614      	mov	r4, r2
 8004c56:	461d      	mov	r5, r3
 8004c58:	da07      	bge.n	8004c6a <__swhatbuf_r+0x22>
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	602b      	str	r3, [r5, #0]
 8004c5e:	89b3      	ldrh	r3, [r6, #12]
 8004c60:	061a      	lsls	r2, r3, #24
 8004c62:	d410      	bmi.n	8004c86 <__swhatbuf_r+0x3e>
 8004c64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c68:	e00e      	b.n	8004c88 <__swhatbuf_r+0x40>
 8004c6a:	466a      	mov	r2, sp
 8004c6c:	f000 f96e 	bl	8004f4c <_fstat_r>
 8004c70:	2800      	cmp	r0, #0
 8004c72:	dbf2      	blt.n	8004c5a <__swhatbuf_r+0x12>
 8004c74:	9a01      	ldr	r2, [sp, #4]
 8004c76:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004c7a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004c7e:	425a      	negs	r2, r3
 8004c80:	415a      	adcs	r2, r3
 8004c82:	602a      	str	r2, [r5, #0]
 8004c84:	e7ee      	b.n	8004c64 <__swhatbuf_r+0x1c>
 8004c86:	2340      	movs	r3, #64	; 0x40
 8004c88:	2000      	movs	r0, #0
 8004c8a:	6023      	str	r3, [r4, #0]
 8004c8c:	b016      	add	sp, #88	; 0x58
 8004c8e:	bd70      	pop	{r4, r5, r6, pc}

08004c90 <__smakebuf_r>:
 8004c90:	898b      	ldrh	r3, [r1, #12]
 8004c92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004c94:	079d      	lsls	r5, r3, #30
 8004c96:	4606      	mov	r6, r0
 8004c98:	460c      	mov	r4, r1
 8004c9a:	d507      	bpl.n	8004cac <__smakebuf_r+0x1c>
 8004c9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004ca0:	6023      	str	r3, [r4, #0]
 8004ca2:	6123      	str	r3, [r4, #16]
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	6163      	str	r3, [r4, #20]
 8004ca8:	b002      	add	sp, #8
 8004caa:	bd70      	pop	{r4, r5, r6, pc}
 8004cac:	ab01      	add	r3, sp, #4
 8004cae:	466a      	mov	r2, sp
 8004cb0:	f7ff ffca 	bl	8004c48 <__swhatbuf_r>
 8004cb4:	9900      	ldr	r1, [sp, #0]
 8004cb6:	4605      	mov	r5, r0
 8004cb8:	4630      	mov	r0, r6
 8004cba:	f000 f877 	bl	8004dac <_malloc_r>
 8004cbe:	b948      	cbnz	r0, 8004cd4 <__smakebuf_r+0x44>
 8004cc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cc4:	059a      	lsls	r2, r3, #22
 8004cc6:	d4ef      	bmi.n	8004ca8 <__smakebuf_r+0x18>
 8004cc8:	f023 0303 	bic.w	r3, r3, #3
 8004ccc:	f043 0302 	orr.w	r3, r3, #2
 8004cd0:	81a3      	strh	r3, [r4, #12]
 8004cd2:	e7e3      	b.n	8004c9c <__smakebuf_r+0xc>
 8004cd4:	4b0d      	ldr	r3, [pc, #52]	; (8004d0c <__smakebuf_r+0x7c>)
 8004cd6:	62b3      	str	r3, [r6, #40]	; 0x28
 8004cd8:	89a3      	ldrh	r3, [r4, #12]
 8004cda:	6020      	str	r0, [r4, #0]
 8004cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ce0:	81a3      	strh	r3, [r4, #12]
 8004ce2:	9b00      	ldr	r3, [sp, #0]
 8004ce4:	6163      	str	r3, [r4, #20]
 8004ce6:	9b01      	ldr	r3, [sp, #4]
 8004ce8:	6120      	str	r0, [r4, #16]
 8004cea:	b15b      	cbz	r3, 8004d04 <__smakebuf_r+0x74>
 8004cec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cf0:	4630      	mov	r0, r6
 8004cf2:	f000 f93d 	bl	8004f70 <_isatty_r>
 8004cf6:	b128      	cbz	r0, 8004d04 <__smakebuf_r+0x74>
 8004cf8:	89a3      	ldrh	r3, [r4, #12]
 8004cfa:	f023 0303 	bic.w	r3, r3, #3
 8004cfe:	f043 0301 	orr.w	r3, r3, #1
 8004d02:	81a3      	strh	r3, [r4, #12]
 8004d04:	89a3      	ldrh	r3, [r4, #12]
 8004d06:	431d      	orrs	r5, r3
 8004d08:	81a5      	strh	r5, [r4, #12]
 8004d0a:	e7cd      	b.n	8004ca8 <__smakebuf_r+0x18>
 8004d0c:	08004afd 	.word	0x08004afd

08004d10 <_free_r>:
 8004d10:	b538      	push	{r3, r4, r5, lr}
 8004d12:	4605      	mov	r5, r0
 8004d14:	2900      	cmp	r1, #0
 8004d16:	d045      	beq.n	8004da4 <_free_r+0x94>
 8004d18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d1c:	1f0c      	subs	r4, r1, #4
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	bfb8      	it	lt
 8004d22:	18e4      	addlt	r4, r4, r3
 8004d24:	f000 f946 	bl	8004fb4 <__malloc_lock>
 8004d28:	4a1f      	ldr	r2, [pc, #124]	; (8004da8 <_free_r+0x98>)
 8004d2a:	6813      	ldr	r3, [r2, #0]
 8004d2c:	4610      	mov	r0, r2
 8004d2e:	b933      	cbnz	r3, 8004d3e <_free_r+0x2e>
 8004d30:	6063      	str	r3, [r4, #4]
 8004d32:	6014      	str	r4, [r2, #0]
 8004d34:	4628      	mov	r0, r5
 8004d36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d3a:	f000 b93c 	b.w	8004fb6 <__malloc_unlock>
 8004d3e:	42a3      	cmp	r3, r4
 8004d40:	d90c      	bls.n	8004d5c <_free_r+0x4c>
 8004d42:	6821      	ldr	r1, [r4, #0]
 8004d44:	1862      	adds	r2, r4, r1
 8004d46:	4293      	cmp	r3, r2
 8004d48:	bf04      	itt	eq
 8004d4a:	681a      	ldreq	r2, [r3, #0]
 8004d4c:	685b      	ldreq	r3, [r3, #4]
 8004d4e:	6063      	str	r3, [r4, #4]
 8004d50:	bf04      	itt	eq
 8004d52:	1852      	addeq	r2, r2, r1
 8004d54:	6022      	streq	r2, [r4, #0]
 8004d56:	6004      	str	r4, [r0, #0]
 8004d58:	e7ec      	b.n	8004d34 <_free_r+0x24>
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	685a      	ldr	r2, [r3, #4]
 8004d5e:	b10a      	cbz	r2, 8004d64 <_free_r+0x54>
 8004d60:	42a2      	cmp	r2, r4
 8004d62:	d9fa      	bls.n	8004d5a <_free_r+0x4a>
 8004d64:	6819      	ldr	r1, [r3, #0]
 8004d66:	1858      	adds	r0, r3, r1
 8004d68:	42a0      	cmp	r0, r4
 8004d6a:	d10b      	bne.n	8004d84 <_free_r+0x74>
 8004d6c:	6820      	ldr	r0, [r4, #0]
 8004d6e:	4401      	add	r1, r0
 8004d70:	1858      	adds	r0, r3, r1
 8004d72:	4282      	cmp	r2, r0
 8004d74:	6019      	str	r1, [r3, #0]
 8004d76:	d1dd      	bne.n	8004d34 <_free_r+0x24>
 8004d78:	6810      	ldr	r0, [r2, #0]
 8004d7a:	6852      	ldr	r2, [r2, #4]
 8004d7c:	605a      	str	r2, [r3, #4]
 8004d7e:	4401      	add	r1, r0
 8004d80:	6019      	str	r1, [r3, #0]
 8004d82:	e7d7      	b.n	8004d34 <_free_r+0x24>
 8004d84:	d902      	bls.n	8004d8c <_free_r+0x7c>
 8004d86:	230c      	movs	r3, #12
 8004d88:	602b      	str	r3, [r5, #0]
 8004d8a:	e7d3      	b.n	8004d34 <_free_r+0x24>
 8004d8c:	6820      	ldr	r0, [r4, #0]
 8004d8e:	1821      	adds	r1, r4, r0
 8004d90:	428a      	cmp	r2, r1
 8004d92:	bf04      	itt	eq
 8004d94:	6811      	ldreq	r1, [r2, #0]
 8004d96:	6852      	ldreq	r2, [r2, #4]
 8004d98:	6062      	str	r2, [r4, #4]
 8004d9a:	bf04      	itt	eq
 8004d9c:	1809      	addeq	r1, r1, r0
 8004d9e:	6021      	streq	r1, [r4, #0]
 8004da0:	605c      	str	r4, [r3, #4]
 8004da2:	e7c7      	b.n	8004d34 <_free_r+0x24>
 8004da4:	bd38      	pop	{r3, r4, r5, pc}
 8004da6:	bf00      	nop
 8004da8:	20000090 	.word	0x20000090

08004dac <_malloc_r>:
 8004dac:	b570      	push	{r4, r5, r6, lr}
 8004dae:	1ccd      	adds	r5, r1, #3
 8004db0:	f025 0503 	bic.w	r5, r5, #3
 8004db4:	3508      	adds	r5, #8
 8004db6:	2d0c      	cmp	r5, #12
 8004db8:	bf38      	it	cc
 8004dba:	250c      	movcc	r5, #12
 8004dbc:	2d00      	cmp	r5, #0
 8004dbe:	4606      	mov	r6, r0
 8004dc0:	db01      	blt.n	8004dc6 <_malloc_r+0x1a>
 8004dc2:	42a9      	cmp	r1, r5
 8004dc4:	d903      	bls.n	8004dce <_malloc_r+0x22>
 8004dc6:	230c      	movs	r3, #12
 8004dc8:	6033      	str	r3, [r6, #0]
 8004dca:	2000      	movs	r0, #0
 8004dcc:	bd70      	pop	{r4, r5, r6, pc}
 8004dce:	f000 f8f1 	bl	8004fb4 <__malloc_lock>
 8004dd2:	4a21      	ldr	r2, [pc, #132]	; (8004e58 <_malloc_r+0xac>)
 8004dd4:	6814      	ldr	r4, [r2, #0]
 8004dd6:	4621      	mov	r1, r4
 8004dd8:	b991      	cbnz	r1, 8004e00 <_malloc_r+0x54>
 8004dda:	4c20      	ldr	r4, [pc, #128]	; (8004e5c <_malloc_r+0xb0>)
 8004ddc:	6823      	ldr	r3, [r4, #0]
 8004dde:	b91b      	cbnz	r3, 8004de8 <_malloc_r+0x3c>
 8004de0:	4630      	mov	r0, r6
 8004de2:	f000 f83d 	bl	8004e60 <_sbrk_r>
 8004de6:	6020      	str	r0, [r4, #0]
 8004de8:	4629      	mov	r1, r5
 8004dea:	4630      	mov	r0, r6
 8004dec:	f000 f838 	bl	8004e60 <_sbrk_r>
 8004df0:	1c43      	adds	r3, r0, #1
 8004df2:	d124      	bne.n	8004e3e <_malloc_r+0x92>
 8004df4:	230c      	movs	r3, #12
 8004df6:	6033      	str	r3, [r6, #0]
 8004df8:	4630      	mov	r0, r6
 8004dfa:	f000 f8dc 	bl	8004fb6 <__malloc_unlock>
 8004dfe:	e7e4      	b.n	8004dca <_malloc_r+0x1e>
 8004e00:	680b      	ldr	r3, [r1, #0]
 8004e02:	1b5b      	subs	r3, r3, r5
 8004e04:	d418      	bmi.n	8004e38 <_malloc_r+0x8c>
 8004e06:	2b0b      	cmp	r3, #11
 8004e08:	d90f      	bls.n	8004e2a <_malloc_r+0x7e>
 8004e0a:	600b      	str	r3, [r1, #0]
 8004e0c:	50cd      	str	r5, [r1, r3]
 8004e0e:	18cc      	adds	r4, r1, r3
 8004e10:	4630      	mov	r0, r6
 8004e12:	f000 f8d0 	bl	8004fb6 <__malloc_unlock>
 8004e16:	f104 000b 	add.w	r0, r4, #11
 8004e1a:	1d23      	adds	r3, r4, #4
 8004e1c:	f020 0007 	bic.w	r0, r0, #7
 8004e20:	1ac3      	subs	r3, r0, r3
 8004e22:	d0d3      	beq.n	8004dcc <_malloc_r+0x20>
 8004e24:	425a      	negs	r2, r3
 8004e26:	50e2      	str	r2, [r4, r3]
 8004e28:	e7d0      	b.n	8004dcc <_malloc_r+0x20>
 8004e2a:	428c      	cmp	r4, r1
 8004e2c:	684b      	ldr	r3, [r1, #4]
 8004e2e:	bf16      	itet	ne
 8004e30:	6063      	strne	r3, [r4, #4]
 8004e32:	6013      	streq	r3, [r2, #0]
 8004e34:	460c      	movne	r4, r1
 8004e36:	e7eb      	b.n	8004e10 <_malloc_r+0x64>
 8004e38:	460c      	mov	r4, r1
 8004e3a:	6849      	ldr	r1, [r1, #4]
 8004e3c:	e7cc      	b.n	8004dd8 <_malloc_r+0x2c>
 8004e3e:	1cc4      	adds	r4, r0, #3
 8004e40:	f024 0403 	bic.w	r4, r4, #3
 8004e44:	42a0      	cmp	r0, r4
 8004e46:	d005      	beq.n	8004e54 <_malloc_r+0xa8>
 8004e48:	1a21      	subs	r1, r4, r0
 8004e4a:	4630      	mov	r0, r6
 8004e4c:	f000 f808 	bl	8004e60 <_sbrk_r>
 8004e50:	3001      	adds	r0, #1
 8004e52:	d0cf      	beq.n	8004df4 <_malloc_r+0x48>
 8004e54:	6025      	str	r5, [r4, #0]
 8004e56:	e7db      	b.n	8004e10 <_malloc_r+0x64>
 8004e58:	20000090 	.word	0x20000090
 8004e5c:	20000094 	.word	0x20000094

08004e60 <_sbrk_r>:
 8004e60:	b538      	push	{r3, r4, r5, lr}
 8004e62:	4c06      	ldr	r4, [pc, #24]	; (8004e7c <_sbrk_r+0x1c>)
 8004e64:	2300      	movs	r3, #0
 8004e66:	4605      	mov	r5, r0
 8004e68:	4608      	mov	r0, r1
 8004e6a:	6023      	str	r3, [r4, #0]
 8004e6c:	f7fb fe46 	bl	8000afc <_sbrk>
 8004e70:	1c43      	adds	r3, r0, #1
 8004e72:	d102      	bne.n	8004e7a <_sbrk_r+0x1a>
 8004e74:	6823      	ldr	r3, [r4, #0]
 8004e76:	b103      	cbz	r3, 8004e7a <_sbrk_r+0x1a>
 8004e78:	602b      	str	r3, [r5, #0]
 8004e7a:	bd38      	pop	{r3, r4, r5, pc}
 8004e7c:	200136d0 	.word	0x200136d0

08004e80 <__sread>:
 8004e80:	b510      	push	{r4, lr}
 8004e82:	460c      	mov	r4, r1
 8004e84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e88:	f000 f896 	bl	8004fb8 <_read_r>
 8004e8c:	2800      	cmp	r0, #0
 8004e8e:	bfab      	itete	ge
 8004e90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004e92:	89a3      	ldrhlt	r3, [r4, #12]
 8004e94:	181b      	addge	r3, r3, r0
 8004e96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004e9a:	bfac      	ite	ge
 8004e9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8004e9e:	81a3      	strhlt	r3, [r4, #12]
 8004ea0:	bd10      	pop	{r4, pc}

08004ea2 <__swrite>:
 8004ea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ea6:	461f      	mov	r7, r3
 8004ea8:	898b      	ldrh	r3, [r1, #12]
 8004eaa:	05db      	lsls	r3, r3, #23
 8004eac:	4605      	mov	r5, r0
 8004eae:	460c      	mov	r4, r1
 8004eb0:	4616      	mov	r6, r2
 8004eb2:	d505      	bpl.n	8004ec0 <__swrite+0x1e>
 8004eb4:	2302      	movs	r3, #2
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ebc:	f000 f868 	bl	8004f90 <_lseek_r>
 8004ec0:	89a3      	ldrh	r3, [r4, #12]
 8004ec2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ec6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004eca:	81a3      	strh	r3, [r4, #12]
 8004ecc:	4632      	mov	r2, r6
 8004ece:	463b      	mov	r3, r7
 8004ed0:	4628      	mov	r0, r5
 8004ed2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ed6:	f000 b817 	b.w	8004f08 <_write_r>

08004eda <__sseek>:
 8004eda:	b510      	push	{r4, lr}
 8004edc:	460c      	mov	r4, r1
 8004ede:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ee2:	f000 f855 	bl	8004f90 <_lseek_r>
 8004ee6:	1c43      	adds	r3, r0, #1
 8004ee8:	89a3      	ldrh	r3, [r4, #12]
 8004eea:	bf15      	itete	ne
 8004eec:	6560      	strne	r0, [r4, #84]	; 0x54
 8004eee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004ef2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004ef6:	81a3      	strheq	r3, [r4, #12]
 8004ef8:	bf18      	it	ne
 8004efa:	81a3      	strhne	r3, [r4, #12]
 8004efc:	bd10      	pop	{r4, pc}

08004efe <__sclose>:
 8004efe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f02:	f000 b813 	b.w	8004f2c <_close_r>
	...

08004f08 <_write_r>:
 8004f08:	b538      	push	{r3, r4, r5, lr}
 8004f0a:	4c07      	ldr	r4, [pc, #28]	; (8004f28 <_write_r+0x20>)
 8004f0c:	4605      	mov	r5, r0
 8004f0e:	4608      	mov	r0, r1
 8004f10:	4611      	mov	r1, r2
 8004f12:	2200      	movs	r2, #0
 8004f14:	6022      	str	r2, [r4, #0]
 8004f16:	461a      	mov	r2, r3
 8004f18:	f7fb fd9f 	bl	8000a5a <_write>
 8004f1c:	1c43      	adds	r3, r0, #1
 8004f1e:	d102      	bne.n	8004f26 <_write_r+0x1e>
 8004f20:	6823      	ldr	r3, [r4, #0]
 8004f22:	b103      	cbz	r3, 8004f26 <_write_r+0x1e>
 8004f24:	602b      	str	r3, [r5, #0]
 8004f26:	bd38      	pop	{r3, r4, r5, pc}
 8004f28:	200136d0 	.word	0x200136d0

08004f2c <_close_r>:
 8004f2c:	b538      	push	{r3, r4, r5, lr}
 8004f2e:	4c06      	ldr	r4, [pc, #24]	; (8004f48 <_close_r+0x1c>)
 8004f30:	2300      	movs	r3, #0
 8004f32:	4605      	mov	r5, r0
 8004f34:	4608      	mov	r0, r1
 8004f36:	6023      	str	r3, [r4, #0]
 8004f38:	f7fb fdab 	bl	8000a92 <_close>
 8004f3c:	1c43      	adds	r3, r0, #1
 8004f3e:	d102      	bne.n	8004f46 <_close_r+0x1a>
 8004f40:	6823      	ldr	r3, [r4, #0]
 8004f42:	b103      	cbz	r3, 8004f46 <_close_r+0x1a>
 8004f44:	602b      	str	r3, [r5, #0]
 8004f46:	bd38      	pop	{r3, r4, r5, pc}
 8004f48:	200136d0 	.word	0x200136d0

08004f4c <_fstat_r>:
 8004f4c:	b538      	push	{r3, r4, r5, lr}
 8004f4e:	4c07      	ldr	r4, [pc, #28]	; (8004f6c <_fstat_r+0x20>)
 8004f50:	2300      	movs	r3, #0
 8004f52:	4605      	mov	r5, r0
 8004f54:	4608      	mov	r0, r1
 8004f56:	4611      	mov	r1, r2
 8004f58:	6023      	str	r3, [r4, #0]
 8004f5a:	f7fb fda6 	bl	8000aaa <_fstat>
 8004f5e:	1c43      	adds	r3, r0, #1
 8004f60:	d102      	bne.n	8004f68 <_fstat_r+0x1c>
 8004f62:	6823      	ldr	r3, [r4, #0]
 8004f64:	b103      	cbz	r3, 8004f68 <_fstat_r+0x1c>
 8004f66:	602b      	str	r3, [r5, #0]
 8004f68:	bd38      	pop	{r3, r4, r5, pc}
 8004f6a:	bf00      	nop
 8004f6c:	200136d0 	.word	0x200136d0

08004f70 <_isatty_r>:
 8004f70:	b538      	push	{r3, r4, r5, lr}
 8004f72:	4c06      	ldr	r4, [pc, #24]	; (8004f8c <_isatty_r+0x1c>)
 8004f74:	2300      	movs	r3, #0
 8004f76:	4605      	mov	r5, r0
 8004f78:	4608      	mov	r0, r1
 8004f7a:	6023      	str	r3, [r4, #0]
 8004f7c:	f7fb fda5 	bl	8000aca <_isatty>
 8004f80:	1c43      	adds	r3, r0, #1
 8004f82:	d102      	bne.n	8004f8a <_isatty_r+0x1a>
 8004f84:	6823      	ldr	r3, [r4, #0]
 8004f86:	b103      	cbz	r3, 8004f8a <_isatty_r+0x1a>
 8004f88:	602b      	str	r3, [r5, #0]
 8004f8a:	bd38      	pop	{r3, r4, r5, pc}
 8004f8c:	200136d0 	.word	0x200136d0

08004f90 <_lseek_r>:
 8004f90:	b538      	push	{r3, r4, r5, lr}
 8004f92:	4c07      	ldr	r4, [pc, #28]	; (8004fb0 <_lseek_r+0x20>)
 8004f94:	4605      	mov	r5, r0
 8004f96:	4608      	mov	r0, r1
 8004f98:	4611      	mov	r1, r2
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	6022      	str	r2, [r4, #0]
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	f7fb fd9e 	bl	8000ae0 <_lseek>
 8004fa4:	1c43      	adds	r3, r0, #1
 8004fa6:	d102      	bne.n	8004fae <_lseek_r+0x1e>
 8004fa8:	6823      	ldr	r3, [r4, #0]
 8004faa:	b103      	cbz	r3, 8004fae <_lseek_r+0x1e>
 8004fac:	602b      	str	r3, [r5, #0]
 8004fae:	bd38      	pop	{r3, r4, r5, pc}
 8004fb0:	200136d0 	.word	0x200136d0

08004fb4 <__malloc_lock>:
 8004fb4:	4770      	bx	lr

08004fb6 <__malloc_unlock>:
 8004fb6:	4770      	bx	lr

08004fb8 <_read_r>:
 8004fb8:	b538      	push	{r3, r4, r5, lr}
 8004fba:	4c07      	ldr	r4, [pc, #28]	; (8004fd8 <_read_r+0x20>)
 8004fbc:	4605      	mov	r5, r0
 8004fbe:	4608      	mov	r0, r1
 8004fc0:	4611      	mov	r1, r2
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	6022      	str	r2, [r4, #0]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	f7fb fd2a 	bl	8000a20 <_read>
 8004fcc:	1c43      	adds	r3, r0, #1
 8004fce:	d102      	bne.n	8004fd6 <_read_r+0x1e>
 8004fd0:	6823      	ldr	r3, [r4, #0]
 8004fd2:	b103      	cbz	r3, 8004fd6 <_read_r+0x1e>
 8004fd4:	602b      	str	r3, [r5, #0]
 8004fd6:	bd38      	pop	{r3, r4, r5, pc}
 8004fd8:	200136d0 	.word	0x200136d0

08004fdc <_init>:
 8004fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fde:	bf00      	nop
 8004fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fe2:	bc08      	pop	{r3}
 8004fe4:	469e      	mov	lr, r3
 8004fe6:	4770      	bx	lr

08004fe8 <_fini>:
 8004fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fea:	bf00      	nop
 8004fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fee:	bc08      	pop	{r3}
 8004ff0:	469e      	mov	lr, r3
 8004ff2:	4770      	bx	lr
