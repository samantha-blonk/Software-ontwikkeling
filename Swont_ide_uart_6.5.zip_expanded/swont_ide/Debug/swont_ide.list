
swont_ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dac  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004f34  08004f34  00014f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fbc  08004fbc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004fbc  08004fbc  00014fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fc4  08004fc4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fc4  08004fc4  00014fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fc8  08004fc8  00014fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004fcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013670  20000070  0800503c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200136e0  0800503c  000236e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001380f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bbf  00000000  00000000  000338af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d18  00000000  00000000  00036470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be0  00000000  00000000  00037188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002361c  00000000  00000000  00037d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f6f8  00000000  00000000  0005b384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb865  00000000  00000000  0006aa7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001362e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b84  00000000  00000000  00136334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004f1c 	.word	0x08004f1c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08004f1c 	.word	0x08004f1c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80004c6:	2300      	movs	r3, #0
 80004c8:	607b      	str	r3, [r7, #4]
 80004ca:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <MX_DMA_Init+0x3c>)
 80004cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ce:	4a0b      	ldr	r2, [pc, #44]	; (80004fc <MX_DMA_Init+0x3c>)
 80004d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004d4:	6313      	str	r3, [r2, #48]	; 0x30
 80004d6:	4b09      	ldr	r3, [pc, #36]	; (80004fc <MX_DMA_Init+0x3c>)
 80004d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004de:	607b      	str	r3, [r7, #4]
 80004e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80004e2:	2200      	movs	r2, #0
 80004e4:	2100      	movs	r1, #0
 80004e6:	2044      	movs	r0, #68	; 0x44
 80004e8:	f000 ff33 	bl	8001352 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80004ec:	2044      	movs	r0, #68	; 0x44
 80004ee:	f000 ff4c 	bl	800138a <HAL_NVIC_EnableIRQ>

}
 80004f2:	bf00      	nop
 80004f4:	3708      	adds	r7, #8
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	40023800 	.word	0x40023800

08000500 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b08a      	sub	sp, #40	; 0x28
 8000504:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000506:	f107 0314 	add.w	r3, r7, #20
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	605a      	str	r2, [r3, #4]
 8000510:	609a      	str	r2, [r3, #8]
 8000512:	60da      	str	r2, [r3, #12]
 8000514:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000516:	2300      	movs	r3, #0
 8000518:	613b      	str	r3, [r7, #16]
 800051a:	4b32      	ldr	r3, [pc, #200]	; (80005e4 <MX_GPIO_Init+0xe4>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	4a31      	ldr	r2, [pc, #196]	; (80005e4 <MX_GPIO_Init+0xe4>)
 8000520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000524:	6313      	str	r3, [r2, #48]	; 0x30
 8000526:	4b2f      	ldr	r3, [pc, #188]	; (80005e4 <MX_GPIO_Init+0xe4>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800052e:	613b      	str	r3, [r7, #16]
 8000530:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000532:	2300      	movs	r3, #0
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	4b2b      	ldr	r3, [pc, #172]	; (80005e4 <MX_GPIO_Init+0xe4>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	4a2a      	ldr	r2, [pc, #168]	; (80005e4 <MX_GPIO_Init+0xe4>)
 800053c:	f043 0301 	orr.w	r3, r3, #1
 8000540:	6313      	str	r3, [r2, #48]	; 0x30
 8000542:	4b28      	ldr	r3, [pc, #160]	; (80005e4 <MX_GPIO_Init+0xe4>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	f003 0301 	and.w	r3, r3, #1
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800054e:	2300      	movs	r3, #0
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	4b24      	ldr	r3, [pc, #144]	; (80005e4 <MX_GPIO_Init+0xe4>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	4a23      	ldr	r2, [pc, #140]	; (80005e4 <MX_GPIO_Init+0xe4>)
 8000558:	f043 0310 	orr.w	r3, r3, #16
 800055c:	6313      	str	r3, [r2, #48]	; 0x30
 800055e:	4b21      	ldr	r3, [pc, #132]	; (80005e4 <MX_GPIO_Init+0xe4>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	f003 0310 	and.w	r3, r3, #16
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800056a:	2300      	movs	r3, #0
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	4b1d      	ldr	r3, [pc, #116]	; (80005e4 <MX_GPIO_Init+0xe4>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	4a1c      	ldr	r2, [pc, #112]	; (80005e4 <MX_GPIO_Init+0xe4>)
 8000574:	f043 0302 	orr.w	r3, r3, #2
 8000578:	6313      	str	r3, [r2, #48]	; 0x30
 800057a:	4b1a      	ldr	r3, [pc, #104]	; (80005e4 <MX_GPIO_Init+0xe4>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	f003 0302 	and.w	r3, r3, #2
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 8000586:	2200      	movs	r2, #0
 8000588:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 800058c:	4816      	ldr	r0, [pc, #88]	; (80005e8 <MX_GPIO_Init+0xe8>)
 800058e:	f001 fc45 	bl	8001e1c <HAL_GPIO_WritePin>
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VGA_VSYNC_GPIO_Port, VGA_VSYNC_Pin, GPIO_PIN_RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000598:	4814      	ldr	r0, [pc, #80]	; (80005ec <MX_GPIO_Init+0xec>)
 800059a:	f001 fc3f 	bl	8001e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 800059e:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80005a2:	617b      	str	r3, [r7, #20]
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a4:	2301      	movs	r3, #1
 80005a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a8:	2300      	movs	r3, #0
 80005aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005ac:	2303      	movs	r3, #3
 80005ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005b0:	f107 0314 	add.w	r3, r7, #20
 80005b4:	4619      	mov	r1, r3
 80005b6:	480c      	ldr	r0, [pc, #48]	; (80005e8 <MX_GPIO_Init+0xe8>)
 80005b8:	f001 fa94 	bl	8001ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VGA_VSYNC_Pin;
 80005bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c2:	2301      	movs	r3, #1
 80005c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c6:	2300      	movs	r3, #0
 80005c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005ca:	2303      	movs	r3, #3
 80005cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VGA_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80005ce:	f107 0314 	add.w	r3, r7, #20
 80005d2:	4619      	mov	r1, r3
 80005d4:	4805      	ldr	r0, [pc, #20]	; (80005ec <MX_GPIO_Init+0xec>)
 80005d6:	f001 fa85 	bl	8001ae4 <HAL_GPIO_Init>

}
 80005da:	bf00      	nop
 80005dc:	3728      	adds	r7, #40	; 0x28
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40023800 	.word	0x40023800
 80005e8:	40021000 	.word	0x40021000
 80005ec:	40020400 	.word	0x40020400

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f000 fd5f 	bl	80010b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f85f 	bl	80006bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f7ff ff7f 	bl	8000500 <MX_GPIO_Init>
  MX_DMA_Init();
 8000602:	f7ff ff5d 	bl	80004c0 <MX_DMA_Init>
  MX_TIM1_Init();
 8000606:	f000 faad 	bl	8000b64 <MX_TIM1_Init>
  MX_TIM2_Init();
 800060a:	f000 fafb 	bl	8000c04 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800060e:	f000 fc11 	bl	8000e34 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  UB_VGA_Screen_Init(); // Init VGA-Screen
 8000612:	f000 fcb3 	bl	8000f7c <UB_VGA_Screen_Init>

  UB_VGA_FillScreen(VGA_COL_WHITE);
 8000616:	20ff      	movs	r0, #255	; 0xff
 8000618:	f000 fd02 	bl	8001020 <UB_VGA_FillScreen>
  UB_VGA_SetPixel(10,10,10);
 800061c:	220a      	movs	r2, #10
 800061e:	210a      	movs	r1, #10
 8000620:	200a      	movs	r0, #10
 8000622:	f000 fd21 	bl	8001068 <UB_VGA_SetPixel>
  UB_VGA_SetPixel(0,0,0x00);
 8000626:	2200      	movs	r2, #0
 8000628:	2100      	movs	r1, #0
 800062a:	2000      	movs	r0, #0
 800062c:	f000 fd1c 	bl	8001068 <UB_VGA_SetPixel>
  UB_VGA_SetPixel(319,0,0x00);
 8000630:	2200      	movs	r2, #0
 8000632:	2100      	movs	r1, #0
 8000634:	f240 103f 	movw	r0, #319	; 0x13f
 8000638:	f000 fd16 	bl	8001068 <UB_VGA_SetPixel>

  int i;

  for(i = 0; i < LINE_BUFLEN; i++)
 800063c:	2300      	movs	r3, #0
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	e008      	b.n	8000654 <main+0x64>
	  input.line_rx_buffer[i] = 0;
 8000642:	4a1b      	ldr	r2, [pc, #108]	; (80006b0 <main+0xc0>)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	4413      	add	r3, r2
 8000648:	3301      	adds	r3, #1
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < LINE_BUFLEN; i++)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	3301      	adds	r3, #1
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800065a:	dbf2      	blt.n	8000642 <main+0x52>

  // Reset some stuff
  input.byte_buffer_rx[0] = 0;
 800065c:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <main+0xc0>)
 800065e:	2200      	movs	r2, #0
 8000660:	701a      	strb	r2, [r3, #0]
  input.char_counter = 0;
 8000662:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <main+0xc0>)
 8000664:	2200      	movs	r2, #0
 8000666:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  input.command_execute_flag = FALSE;
 800066a:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <main+0xc0>)
 800066c:	2200      	movs	r2, #0
 800066e:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c

  // HAl wants a memory location to store the charachter it receives from the UART
  // We will pass it an array, but we will not use it. We declare our own variable in the interupt handler
  // See stm32f4xx_it.c
  HAL_UART_Receive_IT(&huart2, input.byte_buffer_rx, BYTE_BUFLEN);
 8000672:	2201      	movs	r2, #1
 8000674:	490e      	ldr	r1, [pc, #56]	; (80006b0 <main+0xc0>)
 8000676:	480f      	ldr	r0, [pc, #60]	; (80006b4 <main+0xc4>)
 8000678:	f003 f8dc 	bl	8003834 <HAL_UART_Receive_IT>

  // Test to see if the screen reacts to UART
  unsigned char colorTest = TRUE;
 800067c:	23ff      	movs	r3, #255	; 0xff
 800067e:	70fb      	strb	r3, [r7, #3]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  UB_VGA_SetPixel(160,120,VGA_COL_RED);
 8000680:	22e0      	movs	r2, #224	; 0xe0
 8000682:	2178      	movs	r1, #120	; 0x78
 8000684:	20a0      	movs	r0, #160	; 0xa0
 8000686:	f000 fcef 	bl	8001068 <UB_VGA_SetPixel>
	  if(input.command_execute_flag == TRUE)
 800068a:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <main+0xc0>)
 800068c:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 8000690:	2bff      	cmp	r3, #255	; 0xff
 8000692:	d1f5      	bne.n	8000680 <main+0x90>
	  {
		  // Do some stuff
		  printf("yes\n");
 8000694:	4808      	ldr	r0, [pc, #32]	; (80006b8 <main+0xc8>)
 8000696:	f003 ffe9 	bl	800466c <puts>
		  colorTest = ~colorTest; // Toggle screen color
 800069a:	78fb      	ldrb	r3, [r7, #3]
 800069c:	43db      	mvns	r3, r3
 800069e:	70fb      	strb	r3, [r7, #3]
		  UB_VGA_FillScreen(VGA_COL_RED);
 80006a0:	20e0      	movs	r0, #224	; 0xe0
 80006a2:	f000 fcbd 	bl	8001020 <UB_VGA_FillScreen>

		  // When finished reset the flag
		  input.command_execute_flag = FALSE;
 80006a6:	4b02      	ldr	r3, [pc, #8]	; (80006b0 <main+0xc0>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
	  UB_VGA_SetPixel(160,120,VGA_COL_RED);
 80006ae:	e7e7      	b.n	8000680 <main+0x90>
 80006b0:	20000098 	.word	0x20000098
 80006b4:	20000990 	.word	0x20000990
 80006b8:	08004f34 	.word	0x08004f34

080006bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b094      	sub	sp, #80	; 0x50
 80006c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	f107 0320 	add.w	r3, r7, #32
 80006c6:	2230      	movs	r2, #48	; 0x30
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f003 ff58 	bl	8004580 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e0:	2300      	movs	r3, #0
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	4b28      	ldr	r3, [pc, #160]	; (8000788 <SystemClock_Config+0xcc>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	4a27      	ldr	r2, [pc, #156]	; (8000788 <SystemClock_Config+0xcc>)
 80006ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ee:	6413      	str	r3, [r2, #64]	; 0x40
 80006f0:	4b25      	ldr	r3, [pc, #148]	; (8000788 <SystemClock_Config+0xcc>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006fc:	2300      	movs	r3, #0
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	4b22      	ldr	r3, [pc, #136]	; (800078c <SystemClock_Config+0xd0>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a21      	ldr	r2, [pc, #132]	; (800078c <SystemClock_Config+0xd0>)
 8000706:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800070a:	6013      	str	r3, [r2, #0]
 800070c:	4b1f      	ldr	r3, [pc, #124]	; (800078c <SystemClock_Config+0xd0>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000718:	2301      	movs	r3, #1
 800071a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800071c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000720:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000722:	2302      	movs	r3, #2
 8000724:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000726:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800072a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800072c:	2304      	movs	r3, #4
 800072e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000730:	23a8      	movs	r3, #168	; 0xa8
 8000732:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000734:	2302      	movs	r3, #2
 8000736:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000738:	2304      	movs	r3, #4
 800073a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073c:	f107 0320 	add.w	r3, r7, #32
 8000740:	4618      	mov	r0, r3
 8000742:	f001 fb85 	bl	8001e50 <HAL_RCC_OscConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800074c:	f000 f832 	bl	80007b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000750:	230f      	movs	r3, #15
 8000752:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000754:	2302      	movs	r3, #2
 8000756:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000758:	2300      	movs	r3, #0
 800075a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800075c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000760:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000762:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000766:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000768:	f107 030c 	add.w	r3, r7, #12
 800076c:	2105      	movs	r1, #5
 800076e:	4618      	mov	r0, r3
 8000770:	f001 fdde 	bl	8002330 <HAL_RCC_ClockConfig>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800077a:	f000 f81b 	bl	80007b4 <Error_Handler>
  }
}
 800077e:	bf00      	nop
 8000780:	3750      	adds	r7, #80	; 0x50
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40023800 	.word	0x40023800
 800078c:	40007000 	.word	0x40007000

08000790 <__io_putchar>:
	#define USART_PRINTF int fputc(int ch, FILE *f)		//With other compiler printf calls fputc()
#endif /* __GNUC__ */

//Retargets the C library printf function to the USART
USART_PRINTF
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);	//Write character to UART2
 8000798:	1d39      	adds	r1, r7, #4
 800079a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800079e:	2201      	movs	r2, #1
 80007a0:	4803      	ldr	r0, [pc, #12]	; (80007b0 <__io_putchar+0x20>)
 80007a2:	f002 ffae 	bl	8003702 <HAL_UART_Transmit>
	return ch;												//Return the character
 80007a6:	687b      	ldr	r3, [r7, #4]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000990 	.word	0x20000990

080007b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
	...

080007c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	4b10      	ldr	r3, [pc, #64]	; (8000810 <HAL_MspInit+0x4c>)
 80007d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d2:	4a0f      	ldr	r2, [pc, #60]	; (8000810 <HAL_MspInit+0x4c>)
 80007d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d8:	6453      	str	r3, [r2, #68]	; 0x44
 80007da:	4b0d      	ldr	r3, [pc, #52]	; (8000810 <HAL_MspInit+0x4c>)
 80007dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	603b      	str	r3, [r7, #0]
 80007ea:	4b09      	ldr	r3, [pc, #36]	; (8000810 <HAL_MspInit+0x4c>)
 80007ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ee:	4a08      	ldr	r2, [pc, #32]	; (8000810 <HAL_MspInit+0x4c>)
 80007f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f4:	6413      	str	r3, [r2, #64]	; 0x40
 80007f6:	4b06      	ldr	r3, [pc, #24]	; (8000810 <HAL_MspInit+0x4c>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000802:	bf00      	nop
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	40023800 	.word	0x40023800

08000814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr

08000822 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000826:	e7fe      	b.n	8000826 <HardFault_Handler+0x4>

08000828 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800082c:	e7fe      	b.n	800082c <MemManage_Handler+0x4>

0800082e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000832:	e7fe      	b.n	8000832 <BusFault_Handler+0x4>

08000834 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000838:	e7fe      	b.n	8000838 <UsageFault_Handler+0x4>

0800083a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr

08000856 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000868:	f000 fc78 	bl	800115c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}

08000870 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000874:	4828      	ldr	r0, [pc, #160]	; (8000918 <TIM2_IRQHandler+0xa8>)
 8000876:	f002 f893 	bl	80029a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC3); // uncomment HAL_TIM_IRQHandler(&htim2); ^^
 800087a:	4b27      	ldr	r3, [pc, #156]	; (8000918 <TIM2_IRQHandler+0xa8>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	f06f 0208 	mvn.w	r2, #8
 8000882:	611a      	str	r2, [r3, #16]

  VGA.hsync_cnt++;
 8000884:	4b25      	ldr	r3, [pc, #148]	; (800091c <TIM2_IRQHandler+0xac>)
 8000886:	881b      	ldrh	r3, [r3, #0]
 8000888:	3301      	adds	r3, #1
 800088a:	b29a      	uxth	r2, r3
 800088c:	4b23      	ldr	r3, [pc, #140]	; (800091c <TIM2_IRQHandler+0xac>)
 800088e:	801a      	strh	r2, [r3, #0]
  if (VGA.hsync_cnt >= VGA_VSYNC_PERIODE)
 8000890:	4b22      	ldr	r3, [pc, #136]	; (800091c <TIM2_IRQHandler+0xac>)
 8000892:	881b      	ldrh	r3, [r3, #0]
 8000894:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8000898:	d905      	bls.n	80008a6 <TIM2_IRQHandler+0x36>
  {
    // -----------
    VGA.hsync_cnt = 0;
 800089a:	4b20      	ldr	r3, [pc, #128]	; (800091c <TIM2_IRQHandler+0xac>)
 800089c:	2200      	movs	r2, #0
 800089e:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr = (uint32_t)(&VGA_RAM1[0]);
 80008a0:	4a1f      	ldr	r2, [pc, #124]	; (8000920 <TIM2_IRQHandler+0xb0>)
 80008a2:	4b1e      	ldr	r3, [pc, #120]	; (800091c <TIM2_IRQHandler+0xac>)
 80008a4:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  GPIOB->BSRR = (VGA.hsync_cnt < VGA_VSYNC_IMP) ? VGA_VSYNC_Pin << 16u: VGA_VSYNC_Pin;
 80008a6:	4b1d      	ldr	r3, [pc, #116]	; (800091c <TIM2_IRQHandler+0xac>)
 80008a8:	881b      	ldrh	r3, [r3, #0]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d802      	bhi.n	80008b4 <TIM2_IRQHandler+0x44>
 80008ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80008b2:	e001      	b.n	80008b8 <TIM2_IRQHandler+0x48>
 80008b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b8:	4a1a      	ldr	r2, [pc, #104]	; (8000924 <TIM2_IRQHandler+0xb4>)
 80008ba:	6193      	str	r3, [r2, #24]

  // Test for DMA start
  if((VGA.hsync_cnt >= VGA_VSYNC_BILD_START) && (VGA.hsync_cnt <= VGA_VSYNC_BILD_STOP))
 80008bc:	4b17      	ldr	r3, [pc, #92]	; (800091c <TIM2_IRQHandler+0xac>)
 80008be:	881b      	ldrh	r3, [r3, #0]
 80008c0:	2b23      	cmp	r3, #35	; 0x23
 80008c2:	d927      	bls.n	8000914 <TIM2_IRQHandler+0xa4>
 80008c4:	4b15      	ldr	r3, [pc, #84]	; (800091c <TIM2_IRQHandler+0xac>)
 80008c6:	881b      	ldrh	r3, [r3, #0]
 80008c8:	f240 2202 	movw	r2, #514	; 0x202
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d821      	bhi.n	8000914 <TIM2_IRQHandler+0xa4>
  {
    // after FP start => DMA Transfer

    // DMA2 init
	  DMA2_Stream5->CR = VGA.dma2_cr_reg;
 80008d0:	4a15      	ldr	r2, [pc, #84]	; (8000928 <TIM2_IRQHandler+0xb8>)
 80008d2:	4b12      	ldr	r3, [pc, #72]	; (800091c <TIM2_IRQHandler+0xac>)
 80008d4:	689b      	ldr	r3, [r3, #8]
 80008d6:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR = VGA.start_adr;
 80008d8:	4a13      	ldr	r2, [pc, #76]	; (8000928 <TIM2_IRQHandler+0xb8>)
 80008da:	4b10      	ldr	r3, [pc, #64]	; (800091c <TIM2_IRQHandler+0xac>)
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1 |= TIM_CR1_CEN; // __HAL_TIM_ENABLE(&htim1); // too slow?
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <TIM2_IRQHandler+0xbc>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a11      	ldr	r2, [pc, #68]	; (800092c <TIM2_IRQHandler+0xbc>)
 80008e6:	f043 0301 	orr.w	r3, r3, #1
 80008ea:	6013      	str	r3, [r2, #0]
    // DMA2 enable
    __HAL_DMA_ENABLE(&hdma_tim1_up);
 80008ec:	4b10      	ldr	r3, [pc, #64]	; (8000930 <TIM2_IRQHandler+0xc0>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <TIM2_IRQHandler+0xc0>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f042 0201 	orr.w	r2, r2, #1
 80008fa:	601a      	str	r2, [r3, #0]
    // Test Adrespointer for high
    if(VGA.hsync_cnt & 0x01)
 80008fc:	4b07      	ldr	r3, [pc, #28]	; (800091c <TIM2_IRQHandler+0xac>)
 80008fe:	881b      	ldrh	r3, [r3, #0]
 8000900:	f003 0301 	and.w	r3, r3, #1
 8000904:	2b00      	cmp	r3, #0
 8000906:	d005      	beq.n	8000914 <TIM2_IRQHandler+0xa4>
      VGA.start_adr += (VGA_DISPLAY_X + 1); // inc after Hsync
 8000908:	4b04      	ldr	r3, [pc, #16]	; (800091c <TIM2_IRQHandler+0xac>)
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	f203 1341 	addw	r3, r3, #321	; 0x141
 8000910:	4a02      	ldr	r2, [pc, #8]	; (800091c <TIM2_IRQHandler+0xac>)
 8000912:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000950 	.word	0x20000950
 800091c:	200009d0 	.word	0x200009d0
 8000920:	200009dc 	.word	0x200009dc
 8000924:	40020400 	.word	0x40020400
 8000928:	40026488 	.word	0x40026488
 800092c:	40010000 	.word	0x40010000
 8000930:	200008f0 	.word	0x200008f0

08000934 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	// Store the byte we received on the UART
	char uart_char = USART2->DR;
 800093a:	4b1a      	ldr	r3, [pc, #104]	; (80009a4 <USART2_IRQHandler+0x70>)
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	71fb      	strb	r3, [r7, #7]

	//Ignore the '\n' character
	if(uart_char != LINE_FEED)
 8000940:	79fb      	ldrb	r3, [r7, #7]
 8000942:	2b0a      	cmp	r3, #10
 8000944:	d026      	beq.n	8000994 <USART2_IRQHandler+0x60>
	{
		//Check for CR or a dot
		// There was a small bug in the terminal program.
		// By terminating your message with a dot you can ignore the CR (Enter) character
		if((uart_char == CARRIAGE_RETURN) || (uart_char == '.'))
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	2b0d      	cmp	r3, #13
 800094a:	d002      	beq.n	8000952 <USART2_IRQHandler+0x1e>
 800094c:	79fb      	ldrb	r3, [r7, #7]
 800094e:	2b2e      	cmp	r3, #46	; 0x2e
 8000950:	d10e      	bne.n	8000970 <USART2_IRQHandler+0x3c>
		{
			input.command_execute_flag = TRUE;
 8000952:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <USART2_IRQHandler+0x74>)
 8000954:	22ff      	movs	r2, #255	; 0xff
 8000956:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			// Store the message length for processing
			input.msglen = input.char_counter;
 800095a:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <USART2_IRQHandler+0x74>)
 800095c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000960:	4a11      	ldr	r2, [pc, #68]	; (80009a8 <USART2_IRQHandler+0x74>)
 8000962:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			// Reset the counter for the next line
			input.char_counter = 0;
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <USART2_IRQHandler+0x74>)
 8000968:	2200      	movs	r2, #0
 800096a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800096e:	e011      	b.n	8000994 <USART2_IRQHandler+0x60>
			//Gently exit interrupt
		}
		else
		{
			input.command_execute_flag = FALSE;
 8000970:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <USART2_IRQHandler+0x74>)
 8000972:	2200      	movs	r2, #0
 8000974:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			input.line_rx_buffer[input.char_counter] = uart_char;
 8000978:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <USART2_IRQHandler+0x74>)
 800097a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800097e:	4a0a      	ldr	r2, [pc, #40]	; (80009a8 <USART2_IRQHandler+0x74>)
 8000980:	4413      	add	r3, r2
 8000982:	79fa      	ldrb	r2, [r7, #7]
 8000984:	705a      	strb	r2, [r3, #1]
			input.char_counter++;
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <USART2_IRQHandler+0x74>)
 8000988:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800098c:	3301      	adds	r3, #1
 800098e:	4a06      	ldr	r2, [pc, #24]	; (80009a8 <USART2_IRQHandler+0x74>)
 8000990:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
		}
	}

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000994:	4805      	ldr	r0, [pc, #20]	; (80009ac <USART2_IRQHandler+0x78>)
 8000996:	f002 ffa3 	bl	80038e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40004400 	.word	0x40004400
 80009a8:	20000098 	.word	0x20000098
 80009ac:	20000990 	.word	0x20000990

080009b0 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

    // Timer1 stop
    __HAL_TIM_DISABLE(&htim1);
 80009b4:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <DMA2_Stream5_IRQHandler+0x48>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	6a1a      	ldr	r2, [r3, #32]
 80009ba:	f241 1311 	movw	r3, #4369	; 0x1111
 80009be:	4013      	ands	r3, r2
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d10f      	bne.n	80009e4 <DMA2_Stream5_IRQHandler+0x34>
 80009c4:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <DMA2_Stream5_IRQHandler+0x48>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	6a1a      	ldr	r2, [r3, #32]
 80009ca:	f240 4344 	movw	r3, #1092	; 0x444
 80009ce:	4013      	ands	r3, r2
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d107      	bne.n	80009e4 <DMA2_Stream5_IRQHandler+0x34>
 80009d4:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <DMA2_Stream5_IRQHandler+0x48>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <DMA2_Stream5_IRQHandler+0x48>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f022 0201 	bic.w	r2, r2, #1
 80009e2:	601a      	str	r2, [r3, #0]
    // DMA2 disable
    // __HAL_DMA_DISABLE(&hdma_tim1_up); // not needed?
    // switch on black
    GPIOE->BSRR = VGA_GPIO_HINIBBLE << 16u;
 80009e4:	4b05      	ldr	r3, [pc, #20]	; (80009fc <DMA2_Stream5_IRQHandler+0x4c>)
 80009e6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80009ea:	619a      	str	r2, [r3, #24]

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 80009ec:	4804      	ldr	r0, [pc, #16]	; (8000a00 <DMA2_Stream5_IRQHandler+0x50>)
 80009ee:	f000 fe0f 	bl	8001610 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	200008b0 	.word	0x200008b0
 80009fc:	40021000 	.word	0x40021000
 8000a00:	200008f0 	.word	0x200008f0

08000a04 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	60f8      	str	r0, [r7, #12]
 8000a0c:	60b9      	str	r1, [r7, #8]
 8000a0e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]
 8000a14:	e00a      	b.n	8000a2c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a16:	f3af 8000 	nop.w
 8000a1a:	4601      	mov	r1, r0
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	1c5a      	adds	r2, r3, #1
 8000a20:	60ba      	str	r2, [r7, #8]
 8000a22:	b2ca      	uxtb	r2, r1
 8000a24:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	617b      	str	r3, [r7, #20]
 8000a2c:	697a      	ldr	r2, [r7, #20]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	dbf0      	blt.n	8000a16 <_read+0x12>
	}

return len;
 8000a34:	687b      	ldr	r3, [r7, #4]
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3718      	adds	r7, #24
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b086      	sub	sp, #24
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	60f8      	str	r0, [r7, #12]
 8000a46:	60b9      	str	r1, [r7, #8]
 8000a48:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	617b      	str	r3, [r7, #20]
 8000a4e:	e009      	b.n	8000a64 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	1c5a      	adds	r2, r3, #1
 8000a54:	60ba      	str	r2, [r7, #8]
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f7ff fe99 	bl	8000790 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	3301      	adds	r3, #1
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	697a      	ldr	r2, [r7, #20]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	dbf1      	blt.n	8000a50 <_write+0x12>
	}
	return len;
 8000a6c:	687b      	ldr	r3, [r7, #4]
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3718      	adds	r7, #24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <_close>:

int _close(int file)
{
 8000a76:	b480      	push	{r7}
 8000a78:	b083      	sub	sp, #12
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
	return -1;
 8000a7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	b083      	sub	sp, #12
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
 8000a96:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a9e:	605a      	str	r2, [r3, #4]
	return 0;
 8000aa0:	2300      	movs	r3, #0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <_isatty>:

int _isatty(int file)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	b083      	sub	sp, #12
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
	return 1;
 8000ab6:	2301      	movs	r3, #1
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	607a      	str	r2, [r7, #4]
	return 0;
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3714      	adds	r7, #20
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
	...

08000ae0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000ae8:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <_sbrk+0x50>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d102      	bne.n	8000af6 <_sbrk+0x16>
		heap_end = &end;
 8000af0:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <_sbrk+0x50>)
 8000af2:	4a10      	ldr	r2, [pc, #64]	; (8000b34 <_sbrk+0x54>)
 8000af4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000af6:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <_sbrk+0x50>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000afc:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <_sbrk+0x50>)
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4413      	add	r3, r2
 8000b04:	466a      	mov	r2, sp
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d907      	bls.n	8000b1a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000b0a:	f003 fd0f 	bl	800452c <__errno>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	220c      	movs	r2, #12
 8000b12:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000b14:	f04f 33ff 	mov.w	r3, #4294967295
 8000b18:	e006      	b.n	8000b28 <_sbrk+0x48>
	}

	heap_end += incr;
 8000b1a:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <_sbrk+0x50>)
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4413      	add	r3, r2
 8000b22:	4a03      	ldr	r2, [pc, #12]	; (8000b30 <_sbrk+0x50>)
 8000b24:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000b26:	68fb      	ldr	r3, [r7, #12]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3710      	adds	r7, #16
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	2000008c 	.word	0x2000008c
 8000b34:	200136e0 	.word	0x200136e0

08000b38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b3c:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <SystemInit+0x28>)
 8000b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b42:	4a07      	ldr	r2, [pc, #28]	; (8000b60 <SystemInit+0x28>)
 8000b44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b4c:	4b04      	ldr	r3, [pc, #16]	; (8000b60 <SystemInit+0x28>)
 8000b4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b52:	609a      	str	r2, [r3, #8]
#endif
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim1_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b6a:	f107 0308 	add.w	r3, r7, #8
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b78:	463b      	mov	r3, r7
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8000b80:	4b1e      	ldr	r3, [pc, #120]	; (8000bfc <MX_TIM1_Init+0x98>)
 8000b82:	4a1f      	ldr	r2, [pc, #124]	; (8000c00 <MX_TIM1_Init+0x9c>)
 8000b84:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = VGA_TIM1_PRESCALE;
 8000b86:	4b1d      	ldr	r3, [pc, #116]	; (8000bfc <MX_TIM1_Init+0x98>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8c:	4b1b      	ldr	r3, [pc, #108]	; (8000bfc <MX_TIM1_Init+0x98>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = VGA_TIM1_PERIODE;
 8000b92:	4b1a      	ldr	r3, [pc, #104]	; (8000bfc <MX_TIM1_Init+0x98>)
 8000b94:	220b      	movs	r2, #11
 8000b96:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b98:	4b18      	ldr	r3, [pc, #96]	; (8000bfc <MX_TIM1_Init+0x98>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b9e:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <MX_TIM1_Init+0x98>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba4:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <MX_TIM1_Init+0x98>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000baa:	4814      	ldr	r0, [pc, #80]	; (8000bfc <MX_TIM1_Init+0x98>)
 8000bac:	f001 fdbc 	bl	8002728 <HAL_TIM_Base_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8000bb6:	f7ff fdfd 	bl	80007b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bbe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000bc0:	f107 0308 	add.w	r3, r7, #8
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	480d      	ldr	r0, [pc, #52]	; (8000bfc <MX_TIM1_Init+0x98>)
 8000bc8:	f002 f8b8 	bl	8002d3c <HAL_TIM_ConfigClockSource>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8000bd2:	f7ff fdef 	bl	80007b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bde:	463b      	mov	r3, r7
 8000be0:	4619      	mov	r1, r3
 8000be2:	4806      	ldr	r0, [pc, #24]	; (8000bfc <MX_TIM1_Init+0x98>)
 8000be4:	f002 fcb0 	bl	8003548 <HAL_TIMEx_MasterConfigSynchronization>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000bee:	f7ff fde1 	bl	80007b4 <Error_Handler>
  }

}
 8000bf2:	bf00      	nop
 8000bf4:	3718      	adds	r7, #24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	200008b0 	.word	0x200008b0
 8000c00:	40010000 	.word	0x40010000

08000c04 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08a      	sub	sp, #40	; 0x28
 8000c08:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c0a:	f107 0320 	add.w	r3, r7, #32
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	60da      	str	r2, [r3, #12]
 8000c20:	611a      	str	r2, [r3, #16]
 8000c22:	615a      	str	r2, [r3, #20]
 8000c24:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000c26:	4b2a      	ldr	r3, [pc, #168]	; (8000cd0 <MX_TIM2_Init+0xcc>)
 8000c28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c2c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 8000c2e:	4b28      	ldr	r3, [pc, #160]	; (8000cd0 <MX_TIM2_Init+0xcc>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c34:	4b26      	ldr	r3, [pc, #152]	; (8000cd0 <MX_TIM2_Init+0xcc>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = VGA_TIM2_HSYNC_PERIODE;
 8000c3a:	4b25      	ldr	r3, [pc, #148]	; (8000cd0 <MX_TIM2_Init+0xcc>)
 8000c3c:	f640 226b 	movw	r2, #2667	; 0xa6b
 8000c40:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c42:	4b23      	ldr	r3, [pc, #140]	; (8000cd0 <MX_TIM2_Init+0xcc>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c48:	4b21      	ldr	r3, [pc, #132]	; (8000cd0 <MX_TIM2_Init+0xcc>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c4e:	4820      	ldr	r0, [pc, #128]	; (8000cd0 <MX_TIM2_Init+0xcc>)
 8000c50:	f001 fdb9 	bl	80027c6 <HAL_TIM_PWM_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000c5a:	f7ff fdab 	bl	80007b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c62:	2300      	movs	r3, #0
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c66:	f107 0320 	add.w	r3, r7, #32
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4818      	ldr	r0, [pc, #96]	; (8000cd0 <MX_TIM2_Init+0xcc>)
 8000c6e:	f002 fc6b 	bl	8003548 <HAL_TIMEx_MasterConfigSynchronization>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000c78:	f7ff fd9c 	bl	80007b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c7c:	2360      	movs	r3, #96	; 0x60
 8000c7e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = VGA_TIM2_HTRIGGER_START - VGA_TIM2_DMA_DELAY;
 8000c80:	f240 13bb 	movw	r3, #443	; 0x1bb
 8000c84:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000c86:	2302      	movs	r3, #2
 8000c88:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c8e:	1d3b      	adds	r3, r7, #4
 8000c90:	2208      	movs	r2, #8
 8000c92:	4619      	mov	r1, r3
 8000c94:	480e      	ldr	r0, [pc, #56]	; (8000cd0 <MX_TIM2_Init+0xcc>)
 8000c96:	f001 ff8b 	bl	8002bb0 <HAL_TIM_PWM_ConfigChannel>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000ca0:	f7ff fd88 	bl	80007b4 <Error_Handler>
  }
  sConfigOC.Pulse = VGA_TIM2_HSYNC_IMP;
 8000ca4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000ca8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000caa:	1d3b      	adds	r3, r7, #4
 8000cac:	220c      	movs	r2, #12
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4807      	ldr	r0, [pc, #28]	; (8000cd0 <MX_TIM2_Init+0xcc>)
 8000cb2:	f001 ff7d 	bl	8002bb0 <HAL_TIM_PWM_ConfigChannel>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8000cbc:	f7ff fd7a 	bl	80007b4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000cc0:	4803      	ldr	r0, [pc, #12]	; (8000cd0 <MX_TIM2_Init+0xcc>)
 8000cc2:	f000 f87f 	bl	8000dc4 <HAL_TIM_MspPostInit>

}
 8000cc6:	bf00      	nop
 8000cc8:	3728      	adds	r7, #40	; 0x28
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000950 	.word	0x20000950

08000cd4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a21      	ldr	r2, [pc, #132]	; (8000d68 <HAL_TIM_Base_MspInit+0x94>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d13c      	bne.n	8000d60 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	4b20      	ldr	r3, [pc, #128]	; (8000d6c <HAL_TIM_Base_MspInit+0x98>)
 8000cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cee:	4a1f      	ldr	r2, [pc, #124]	; (8000d6c <HAL_TIM_Base_MspInit+0x98>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cf6:	4b1d      	ldr	r3, [pc, #116]	; (8000d6c <HAL_TIM_Base_MspInit+0x98>)
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 8000d02:	4b1b      	ldr	r3, [pc, #108]	; (8000d70 <HAL_TIM_Base_MspInit+0x9c>)
 8000d04:	4a1b      	ldr	r2, [pc, #108]	; (8000d74 <HAL_TIM_Base_MspInit+0xa0>)
 8000d06:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8000d08:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <HAL_TIM_Base_MspInit+0x9c>)
 8000d0a:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000d0e:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d10:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <HAL_TIM_Base_MspInit+0x9c>)
 8000d12:	2240      	movs	r2, #64	; 0x40
 8000d14:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d16:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <HAL_TIM_Base_MspInit+0x9c>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8000d1c:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <HAL_TIM_Base_MspInit+0x9c>)
 8000d1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d22:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d24:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <HAL_TIM_Base_MspInit+0x9c>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d2a:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <HAL_TIM_Base_MspInit+0x9c>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 8000d30:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <HAL_TIM_Base_MspInit+0x9c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000d36:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <HAL_TIM_Base_MspInit+0x9c>)
 8000d38:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d3c:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d3e:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <HAL_TIM_Base_MspInit+0x9c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8000d44:	480a      	ldr	r0, [pc, #40]	; (8000d70 <HAL_TIM_Base_MspInit+0x9c>)
 8000d46:	f000 fb3b 	bl	80013c0 <HAL_DMA_Init>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <HAL_TIM_Base_MspInit+0x80>
    {
      Error_Handler();
 8000d50:	f7ff fd30 	bl	80007b4 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a06      	ldr	r2, [pc, #24]	; (8000d70 <HAL_TIM_Base_MspInit+0x9c>)
 8000d58:	621a      	str	r2, [r3, #32]
 8000d5a:	4a05      	ldr	r2, [pc, #20]	; (8000d70 <HAL_TIM_Base_MspInit+0x9c>)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000d60:	bf00      	nop
 8000d62:	3710      	adds	r7, #16
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40010000 	.word	0x40010000
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	200008f0 	.word	0x200008f0
 8000d74:	40026488 	.word	0x40026488

08000d78 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d88:	d115      	bne.n	8000db6 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <HAL_TIM_PWM_MspInit+0x48>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d92:	4a0b      	ldr	r2, [pc, #44]	; (8000dc0 <HAL_TIM_PWM_MspInit+0x48>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	6413      	str	r3, [r2, #64]	; 0x40
 8000d9a:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <HAL_TIM_PWM_MspInit+0x48>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2100      	movs	r1, #0
 8000daa:	201c      	movs	r0, #28
 8000dac:	f000 fad1 	bl	8001352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000db0:	201c      	movs	r0, #28
 8000db2:	f000 faea 	bl	800138a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000db6:	bf00      	nop
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40023800 	.word	0x40023800

08000dc4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b088      	sub	sp, #32
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 030c 	add.w	r3, r7, #12
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000de4:	d11e      	bne.n	8000e24 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	60bb      	str	r3, [r7, #8]
 8000dea:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <HAL_TIM_MspPostInit+0x68>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	4a0f      	ldr	r2, [pc, #60]	; (8000e2c <HAL_TIM_MspPostInit+0x68>)
 8000df0:	f043 0302 	orr.w	r3, r3, #2
 8000df4:	6313      	str	r3, [r2, #48]	; 0x30
 8000df6:	4b0d      	ldr	r3, [pc, #52]	; (8000e2c <HAL_TIM_MspPostInit+0x68>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	f003 0302 	and.w	r3, r3, #2
 8000dfe:	60bb      	str	r3, [r7, #8]
 8000e00:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = VGA_HSYNC_Pin;
 8000e02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e06:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e10:	2303      	movs	r3, #3
 8000e12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e14:	2301      	movs	r3, #1
 8000e16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VGA_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8000e18:	f107 030c 	add.w	r3, r7, #12
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4804      	ldr	r0, [pc, #16]	; (8000e30 <HAL_TIM_MspPostInit+0x6c>)
 8000e20:	f000 fe60 	bl	8001ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000e24:	bf00      	nop
 8000e26:	3720      	adds	r7, #32
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	40020400 	.word	0x40020400

08000e34 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000e38:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <MX_USART2_UART_Init+0x4c>)
 8000e3a:	4a12      	ldr	r2, [pc, #72]	; (8000e84 <MX_USART2_UART_Init+0x50>)
 8000e3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e3e:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <MX_USART2_UART_Init+0x4c>)
 8000e40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <MX_USART2_UART_Init+0x4c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <MX_USART2_UART_Init+0x4c>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e52:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <MX_USART2_UART_Init+0x4c>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e58:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <MX_USART2_UART_Init+0x4c>)
 8000e5a:	220c      	movs	r2, #12
 8000e5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e5e:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <MX_USART2_UART_Init+0x4c>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <MX_USART2_UART_Init+0x4c>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e6a:	4805      	ldr	r0, [pc, #20]	; (8000e80 <MX_USART2_UART_Init+0x4c>)
 8000e6c:	f002 fbfc 	bl	8003668 <HAL_UART_Init>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e76:	f7ff fc9d 	bl	80007b4 <Error_Handler>
  }

}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000990 	.word	0x20000990
 8000e84:	40004400 	.word	0x40004400

08000e88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08a      	sub	sp, #40	; 0x28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a1d      	ldr	r2, [pc, #116]	; (8000f1c <HAL_UART_MspInit+0x94>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d133      	bne.n	8000f12 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
 8000eae:	4b1c      	ldr	r3, [pc, #112]	; (8000f20 <HAL_UART_MspInit+0x98>)
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	4a1b      	ldr	r2, [pc, #108]	; (8000f20 <HAL_UART_MspInit+0x98>)
 8000eb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eba:	4b19      	ldr	r3, [pc, #100]	; (8000f20 <HAL_UART_MspInit+0x98>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <HAL_UART_MspInit+0x98>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a14      	ldr	r2, [pc, #80]	; (8000f20 <HAL_UART_MspInit+0x98>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <HAL_UART_MspInit+0x98>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ee2:	230c      	movs	r3, #12
 8000ee4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ef2:	2307      	movs	r3, #7
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef6:	f107 0314 	add.w	r3, r7, #20
 8000efa:	4619      	mov	r1, r3
 8000efc:	4809      	ldr	r0, [pc, #36]	; (8000f24 <HAL_UART_MspInit+0x9c>)
 8000efe:	f000 fdf1 	bl	8001ae4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2100      	movs	r1, #0
 8000f06:	2026      	movs	r0, #38	; 0x26
 8000f08:	f000 fa23 	bl	8001352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f0c:	2026      	movs	r0, #38	; 0x26
 8000f0e:	f000 fa3c 	bl	800138a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f12:	bf00      	nop
 8000f14:	3728      	adds	r7, #40	; 0x28
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40004400 	.word	0x40004400
 8000f20:	40023800 	.word	0x40023800
 8000f24:	40020000 	.word	0x40020000

08000f28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f60 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f2c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f2e:	e003      	b.n	8000f38 <LoopCopyDataInit>

08000f30 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f30:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f32:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f34:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f36:	3104      	adds	r1, #4

08000f38 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f38:	480b      	ldr	r0, [pc, #44]	; (8000f68 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f3a:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f3c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f3e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f40:	d3f6      	bcc.n	8000f30 <CopyDataInit>
  ldr  r2, =_sbss
 8000f42:	4a0b      	ldr	r2, [pc, #44]	; (8000f70 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f44:	e002      	b.n	8000f4c <LoopFillZerobss>

08000f46 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f46:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f48:	f842 3b04 	str.w	r3, [r2], #4

08000f4c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f4c:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f4e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f50:	d3f9      	bcc.n	8000f46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f52:	f7ff fdf1 	bl	8000b38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f56:	f003 faef 	bl	8004538 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f5a:	f7ff fb49 	bl	80005f0 <main>
  bx  lr    
 8000f5e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f60:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000f64:	08004fcc 	.word	0x08004fcc
  ldr  r0, =_sdata
 8000f68:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f6c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000f70:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000f74:	200136e0 	.word	0x200136e0

08000f78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f78:	e7fe      	b.n	8000f78 <ADC_IRQHandler>
	...

08000f7c <UB_VGA_Screen_Init>:
// @brief The initialisation of the VGA driver
// @details The function initialises the timer registers of timer 1 & 2.
//			It also initialises the DMA register.
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  VGA.hsync_cnt = 0;
 8000f80:	4b1f      	ldr	r3, [pc, #124]	; (8001000 <UB_VGA_Screen_Init+0x84>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	801a      	strh	r2, [r3, #0]
  VGA.start_adr = 0;
 8000f86:	4b1e      	ldr	r3, [pc, #120]	; (8001000 <UB_VGA_Screen_Init+0x84>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg = 0;
 8000f8c:	4b1c      	ldr	r3, [pc, #112]	; (8001000 <UB_VGA_Screen_Init+0x84>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]

  GPIOB->BSRR = VGA_VSYNC_Pin;
 8000f92:	4b1c      	ldr	r3, [pc, #112]	; (8001004 <UB_VGA_Screen_Init+0x88>)
 8000f94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f98:	619a      	str	r2, [r3, #24]

  // TIM2
  HAL_TIM_Base_Start(&htim2);
 8000f9a:	481b      	ldr	r0, [pc, #108]	; (8001008 <UB_VGA_Screen_Init+0x8c>)
 8000f9c:	f001 fbef 	bl	800277e <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000fa0:	210c      	movs	r1, #12
 8000fa2:	4819      	ldr	r0, [pc, #100]	; (8001008 <UB_VGA_Screen_Init+0x8c>)
 8000fa4:	f001 fc3a 	bl	800281c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 8000fa8:	2108      	movs	r1, #8
 8000faa:	4817      	ldr	r0, [pc, #92]	; (8001008 <UB_VGA_Screen_Init+0x8c>)
 8000fac:	f001 fc74 	bl	8002898 <HAL_TIM_PWM_Start_IT>

  // TIM1
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8000fb0:	4b16      	ldr	r3, [pc, #88]	; (800100c <UB_VGA_Screen_Init+0x90>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	68da      	ldr	r2, [r3, #12]
 8000fb6:	4b15      	ldr	r3, [pc, #84]	; (800100c <UB_VGA_Screen_Init+0x90>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000fbe:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 8000fc0:	4b12      	ldr	r3, [pc, #72]	; (800100c <UB_VGA_Screen_Init+0x90>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	4b11      	ldr	r3, [pc, #68]	; (800100c <UB_VGA_Screen_Init+0x90>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f042 0201 	orr.w	r2, r2, #1
 8000fce:	601a      	str	r2, [r3, #0]
  HAL_DMA_Start_IT(&hdma_tim1_up, (uint32_t)&VGA_RAM1[0], VGA_GPIOE_ODR_ADDRESS, VGA_DISPLAY_X + 1);
 8000fd0:	490f      	ldr	r1, [pc, #60]	; (8001010 <UB_VGA_Screen_Init+0x94>)
 8000fd2:	f240 1341 	movw	r3, #321	; 0x141
 8000fd6:	4a0f      	ldr	r2, [pc, #60]	; (8001014 <UB_VGA_Screen_Init+0x98>)
 8000fd8:	480f      	ldr	r0, [pc, #60]	; (8001018 <UB_VGA_Screen_Init+0x9c>)
 8000fda:	f000 fa9f 	bl	800151c <HAL_DMA_Start_IT>

  HAL_DMA_Init(&hdma_tim1_up);
 8000fde:	480e      	ldr	r0, [pc, #56]	; (8001018 <UB_VGA_Screen_Init+0x9c>)
 8000fe0:	f000 f9ee 	bl	80013c0 <HAL_DMA_Init>
  __HAL_DMA_ENABLE_IT(&hdma_tim1_up, DMA_IT_TC);
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <UB_VGA_Screen_Init+0x9c>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <UB_VGA_Screen_Init+0x9c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f042 0210 	orr.w	r2, r2, #16
 8000ff2:	601a      	str	r2, [r3, #0]

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg = DMA2_Stream5->CR;
 8000ff4:	4b09      	ldr	r3, [pc, #36]	; (800101c <UB_VGA_Screen_Init+0xa0>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a01      	ldr	r2, [pc, #4]	; (8001000 <UB_VGA_Screen_Init+0x84>)
 8000ffa:	6093      	str	r3, [r2, #8]
}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	200009d0 	.word	0x200009d0
 8001004:	40020400 	.word	0x40020400
 8001008:	20000950 	.word	0x20000950
 800100c:	200008b0 	.word	0x200008b0
 8001010:	200009dc 	.word	0x200009dc
 8001014:	40021015 	.word	0x40021015
 8001018:	200008f0 	.word	0x200008f0
 800101c:	40026488 	.word	0x40026488

08001020 <UB_VGA_FillScreen>:
// @details This function writes for all pixels a single color to the ram.
//
// @param[in] color The 8-bit color-code to display
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 800102a:	2300      	movs	r3, #0
 800102c:	81bb      	strh	r3, [r7, #12]
 800102e:	e012      	b.n	8001056 <UB_VGA_FillScreen+0x36>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 8001030:	2300      	movs	r3, #0
 8001032:	81fb      	strh	r3, [r7, #14]
 8001034:	e008      	b.n	8001048 <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp, yp, color);
 8001036:	79fa      	ldrb	r2, [r7, #7]
 8001038:	89b9      	ldrh	r1, [r7, #12]
 800103a:	89fb      	ldrh	r3, [r7, #14]
 800103c:	4618      	mov	r0, r3
 800103e:	f000 f813 	bl	8001068 <UB_VGA_SetPixel>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 8001042:	89fb      	ldrh	r3, [r7, #14]
 8001044:	3301      	adds	r3, #1
 8001046:	81fb      	strh	r3, [r7, #14]
 8001048:	89fb      	ldrh	r3, [r7, #14]
 800104a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800104e:	d3f2      	bcc.n	8001036 <UB_VGA_FillScreen+0x16>
  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 8001050:	89bb      	ldrh	r3, [r7, #12]
 8001052:	3301      	adds	r3, #1
 8001054:	81bb      	strh	r3, [r7, #12]
 8001056:	89bb      	ldrh	r3, [r7, #12]
 8001058:	2bef      	cmp	r3, #239	; 0xef
 800105a:	d9e9      	bls.n	8001030 <UB_VGA_FillScreen+0x10>
    }
  }
}
 800105c:	bf00      	nop
 800105e:	bf00      	nop
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <UB_VGA_SetPixel>:
// @param[in] xp The X-coordinate of the pixel
// @param[in] yp The Y-coordinate of the pixel
// @param[in] color The 8-bit color-code to display
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	80fb      	strh	r3, [r7, #6]
 8001072:	460b      	mov	r3, r1
 8001074:	80bb      	strh	r3, [r7, #4]
 8001076:	4613      	mov	r3, r2
 8001078:	70fb      	strb	r3, [r7, #3]
  if(xp >= VGA_DISPLAY_X)
 800107a:	88fb      	ldrh	r3, [r7, #6]
 800107c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001080:	d301      	bcc.n	8001086 <UB_VGA_SetPixel+0x1e>
    xp = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	80fb      	strh	r3, [r7, #6]
  if(yp >= VGA_DISPLAY_Y)
 8001086:	88bb      	ldrh	r3, [r7, #4]
 8001088:	2bef      	cmp	r3, #239	; 0xef
 800108a:	d901      	bls.n	8001090 <UB_VGA_SetPixel+0x28>
    yp = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp * (VGA_DISPLAY_X + 1)) + xp] = color;
 8001090:	88ba      	ldrh	r2, [r7, #4]
 8001092:	4613      	mov	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4413      	add	r3, r2
 8001098:	019b      	lsls	r3, r3, #6
 800109a:	441a      	add	r2, r3
 800109c:	88fb      	ldrh	r3, [r7, #6]
 800109e:	4413      	add	r3, r2
 80010a0:	4904      	ldr	r1, [pc, #16]	; (80010b4 <UB_VGA_SetPixel+0x4c>)
 80010a2:	78fa      	ldrb	r2, [r7, #3]
 80010a4:	54ca      	strb	r2, [r1, r3]
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	200009dc 	.word	0x200009dc

080010b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010bc:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <HAL_Init+0x40>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a0d      	ldr	r2, [pc, #52]	; (80010f8 <HAL_Init+0x40>)
 80010c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010c8:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <HAL_Init+0x40>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <HAL_Init+0x40>)
 80010ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d4:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <HAL_Init+0x40>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a07      	ldr	r2, [pc, #28]	; (80010f8 <HAL_Init+0x40>)
 80010da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e0:	2003      	movs	r0, #3
 80010e2:	f000 f92b 	bl	800133c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010e6:	2000      	movs	r0, #0
 80010e8:	f000 f808 	bl	80010fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010ec:	f7ff fb6a 	bl	80007c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40023c00 	.word	0x40023c00

080010fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001104:	4b12      	ldr	r3, [pc, #72]	; (8001150 <HAL_InitTick+0x54>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <HAL_InitTick+0x58>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	4619      	mov	r1, r3
 800110e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001112:	fbb3 f3f1 	udiv	r3, r3, r1
 8001116:	fbb2 f3f3 	udiv	r3, r2, r3
 800111a:	4618      	mov	r0, r3
 800111c:	f000 f943 	bl	80013a6 <HAL_SYSTICK_Config>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e00e      	b.n	8001148 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2b0f      	cmp	r3, #15
 800112e:	d80a      	bhi.n	8001146 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001130:	2200      	movs	r2, #0
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	f04f 30ff 	mov.w	r0, #4294967295
 8001138:	f000 f90b 	bl	8001352 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800113c:	4a06      	ldr	r2, [pc, #24]	; (8001158 <HAL_InitTick+0x5c>)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001142:	2300      	movs	r3, #0
 8001144:	e000      	b.n	8001148 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
}
 8001148:	4618      	mov	r0, r3
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000000 	.word	0x20000000
 8001154:	20000008 	.word	0x20000008
 8001158:	20000004 	.word	0x20000004

0800115c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <HAL_IncTick+0x20>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	461a      	mov	r2, r3
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <HAL_IncTick+0x24>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4413      	add	r3, r2
 800116c:	4a04      	ldr	r2, [pc, #16]	; (8001180 <HAL_IncTick+0x24>)
 800116e:	6013      	str	r3, [r2, #0]
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	20000008 	.word	0x20000008
 8001180:	200136cc 	.word	0x200136cc

08001184 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  return uwTick;
 8001188:	4b03      	ldr	r3, [pc, #12]	; (8001198 <HAL_GetTick+0x14>)
 800118a:	681b      	ldr	r3, [r3, #0]
}
 800118c:	4618      	mov	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	200136cc 	.word	0x200136cc

0800119c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011ac:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <__NVIC_SetPriorityGrouping+0x44>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011b2:	68ba      	ldr	r2, [r7, #8]
 80011b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011b8:	4013      	ands	r3, r2
 80011ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ce:	4a04      	ldr	r2, [pc, #16]	; (80011e0 <__NVIC_SetPriorityGrouping+0x44>)
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	60d3      	str	r3, [r2, #12]
}
 80011d4:	bf00      	nop
 80011d6:	3714      	adds	r7, #20
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e8:	4b04      	ldr	r3, [pc, #16]	; (80011fc <__NVIC_GetPriorityGrouping+0x18>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	0a1b      	lsrs	r3, r3, #8
 80011ee:	f003 0307 	and.w	r3, r3, #7
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800120a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120e:	2b00      	cmp	r3, #0
 8001210:	db0b      	blt.n	800122a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	f003 021f 	and.w	r2, r3, #31
 8001218:	4907      	ldr	r1, [pc, #28]	; (8001238 <__NVIC_EnableIRQ+0x38>)
 800121a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121e:	095b      	lsrs	r3, r3, #5
 8001220:	2001      	movs	r0, #1
 8001222:	fa00 f202 	lsl.w	r2, r0, r2
 8001226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	e000e100 	.word	0xe000e100

0800123c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	6039      	str	r1, [r7, #0]
 8001246:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124c:	2b00      	cmp	r3, #0
 800124e:	db0a      	blt.n	8001266 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	b2da      	uxtb	r2, r3
 8001254:	490c      	ldr	r1, [pc, #48]	; (8001288 <__NVIC_SetPriority+0x4c>)
 8001256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125a:	0112      	lsls	r2, r2, #4
 800125c:	b2d2      	uxtb	r2, r2
 800125e:	440b      	add	r3, r1
 8001260:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001264:	e00a      	b.n	800127c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	b2da      	uxtb	r2, r3
 800126a:	4908      	ldr	r1, [pc, #32]	; (800128c <__NVIC_SetPriority+0x50>)
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	f003 030f 	and.w	r3, r3, #15
 8001272:	3b04      	subs	r3, #4
 8001274:	0112      	lsls	r2, r2, #4
 8001276:	b2d2      	uxtb	r2, r2
 8001278:	440b      	add	r3, r1
 800127a:	761a      	strb	r2, [r3, #24]
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	e000e100 	.word	0xe000e100
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001290:	b480      	push	{r7}
 8001292:	b089      	sub	sp, #36	; 0x24
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	f1c3 0307 	rsb	r3, r3, #7
 80012aa:	2b04      	cmp	r3, #4
 80012ac:	bf28      	it	cs
 80012ae:	2304      	movcs	r3, #4
 80012b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3304      	adds	r3, #4
 80012b6:	2b06      	cmp	r3, #6
 80012b8:	d902      	bls.n	80012c0 <NVIC_EncodePriority+0x30>
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3b03      	subs	r3, #3
 80012be:	e000      	b.n	80012c2 <NVIC_EncodePriority+0x32>
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c4:	f04f 32ff 	mov.w	r2, #4294967295
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43da      	mvns	r2, r3
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	401a      	ands	r2, r3
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d8:	f04f 31ff 	mov.w	r1, #4294967295
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	fa01 f303 	lsl.w	r3, r1, r3
 80012e2:	43d9      	mvns	r1, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e8:	4313      	orrs	r3, r2
         );
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3724      	adds	r7, #36	; 0x24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
	...

080012f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3b01      	subs	r3, #1
 8001304:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001308:	d301      	bcc.n	800130e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800130a:	2301      	movs	r3, #1
 800130c:	e00f      	b.n	800132e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800130e:	4a0a      	ldr	r2, [pc, #40]	; (8001338 <SysTick_Config+0x40>)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3b01      	subs	r3, #1
 8001314:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001316:	210f      	movs	r1, #15
 8001318:	f04f 30ff 	mov.w	r0, #4294967295
 800131c:	f7ff ff8e 	bl	800123c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001320:	4b05      	ldr	r3, [pc, #20]	; (8001338 <SysTick_Config+0x40>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001326:	4b04      	ldr	r3, [pc, #16]	; (8001338 <SysTick_Config+0x40>)
 8001328:	2207      	movs	r2, #7
 800132a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	e000e010 	.word	0xe000e010

0800133c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7ff ff29 	bl	800119c <__NVIC_SetPriorityGrouping>
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001352:	b580      	push	{r7, lr}
 8001354:	b086      	sub	sp, #24
 8001356:	af00      	add	r7, sp, #0
 8001358:	4603      	mov	r3, r0
 800135a:	60b9      	str	r1, [r7, #8]
 800135c:	607a      	str	r2, [r7, #4]
 800135e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001364:	f7ff ff3e 	bl	80011e4 <__NVIC_GetPriorityGrouping>
 8001368:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	68b9      	ldr	r1, [r7, #8]
 800136e:	6978      	ldr	r0, [r7, #20]
 8001370:	f7ff ff8e 	bl	8001290 <NVIC_EncodePriority>
 8001374:	4602      	mov	r2, r0
 8001376:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800137a:	4611      	mov	r1, r2
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff ff5d 	bl	800123c <__NVIC_SetPriority>
}
 8001382:	bf00      	nop
 8001384:	3718      	adds	r7, #24
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b082      	sub	sp, #8
 800138e:	af00      	add	r7, sp, #0
 8001390:	4603      	mov	r3, r0
 8001392:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ff31 	bl	8001200 <__NVIC_EnableIRQ>
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff ffa2 	bl	80012f8 <SysTick_Config>
 80013b4:	4603      	mov	r3, r0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80013cc:	f7ff feda 	bl	8001184 <HAL_GetTick>
 80013d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d101      	bne.n	80013dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e099      	b.n	8001510 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2202      	movs	r2, #2
 80013e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f022 0201 	bic.w	r2, r2, #1
 80013fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013fc:	e00f      	b.n	800141e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013fe:	f7ff fec1 	bl	8001184 <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b05      	cmp	r3, #5
 800140a:	d908      	bls.n	800141e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2220      	movs	r2, #32
 8001410:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2203      	movs	r2, #3
 8001416:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e078      	b.n	8001510 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	2b00      	cmp	r3, #0
 800142a:	d1e8      	bne.n	80013fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001434:	697a      	ldr	r2, [r7, #20]
 8001436:	4b38      	ldr	r3, [pc, #224]	; (8001518 <HAL_DMA_Init+0x158>)
 8001438:	4013      	ands	r3, r2
 800143a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685a      	ldr	r2, [r3, #4]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800144a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	691b      	ldr	r3, [r3, #16]
 8001450:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001456:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001462:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a1b      	ldr	r3, [r3, #32]
 8001468:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800146a:	697a      	ldr	r2, [r7, #20]
 800146c:	4313      	orrs	r3, r2
 800146e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001474:	2b04      	cmp	r3, #4
 8001476:	d107      	bne.n	8001488 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001480:	4313      	orrs	r3, r2
 8001482:	697a      	ldr	r2, [r7, #20]
 8001484:	4313      	orrs	r3, r2
 8001486:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	697a      	ldr	r2, [r7, #20]
 800148e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	695b      	ldr	r3, [r3, #20]
 8001496:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	f023 0307 	bic.w	r3, r3, #7
 800149e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a4:	697a      	ldr	r2, [r7, #20]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ae:	2b04      	cmp	r3, #4
 80014b0:	d117      	bne.n	80014e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b6:	697a      	ldr	r2, [r7, #20]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d00e      	beq.n	80014e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f000 fa91 	bl	80019ec <DMA_CheckFifoParam>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d008      	beq.n	80014e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2240      	movs	r2, #64	; 0x40
 80014d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2201      	movs	r2, #1
 80014da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80014de:	2301      	movs	r3, #1
 80014e0:	e016      	b.n	8001510 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	697a      	ldr	r2, [r7, #20]
 80014e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f000 fa48 	bl	8001980 <DMA_CalcBaseAndBitshift>
 80014f0:	4603      	mov	r3, r0
 80014f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014f8:	223f      	movs	r2, #63	; 0x3f
 80014fa:	409a      	lsls	r2, r3
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2201      	movs	r2, #1
 800150a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800150e:	2300      	movs	r3, #0
}
 8001510:	4618      	mov	r0, r3
 8001512:	3718      	adds	r7, #24
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	f010803f 	.word	0xf010803f

0800151c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
 8001528:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800152a:	2300      	movs	r3, #0
 800152c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001532:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800153a:	2b01      	cmp	r3, #1
 800153c:	d101      	bne.n	8001542 <HAL_DMA_Start_IT+0x26>
 800153e:	2302      	movs	r3, #2
 8001540:	e040      	b.n	80015c4 <HAL_DMA_Start_IT+0xa8>
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	2201      	movs	r2, #1
 8001546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b01      	cmp	r3, #1
 8001554:	d12f      	bne.n	80015b6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2202      	movs	r2, #2
 800155a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	2200      	movs	r2, #0
 8001562:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	68b9      	ldr	r1, [r7, #8]
 800156a:	68f8      	ldr	r0, [r7, #12]
 800156c:	f000 f9da 	bl	8001924 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001574:	223f      	movs	r2, #63	; 0x3f
 8001576:	409a      	lsls	r2, r3
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f042 0216 	orr.w	r2, r2, #22
 800158a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001590:	2b00      	cmp	r3, #0
 8001592:	d007      	beq.n	80015a4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f042 0208 	orr.w	r2, r2, #8
 80015a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f042 0201 	orr.w	r2, r2, #1
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	e005      	b.n	80015c2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80015be:	2302      	movs	r3, #2
 80015c0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80015c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3718      	adds	r7, #24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d004      	beq.n	80015ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2280      	movs	r2, #128	; 0x80
 80015e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e00c      	b.n	8001604 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2205      	movs	r2, #5
 80015ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f022 0201 	bic.w	r2, r2, #1
 8001600:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001618:	2300      	movs	r3, #0
 800161a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800161c:	4b92      	ldr	r3, [pc, #584]	; (8001868 <HAL_DMA_IRQHandler+0x258>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a92      	ldr	r2, [pc, #584]	; (800186c <HAL_DMA_IRQHandler+0x25c>)
 8001622:	fba2 2303 	umull	r2, r3, r2, r3
 8001626:	0a9b      	lsrs	r3, r3, #10
 8001628:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800162e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800163a:	2208      	movs	r2, #8
 800163c:	409a      	lsls	r2, r3
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	4013      	ands	r3, r2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d01a      	beq.n	800167c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0304 	and.w	r3, r3, #4
 8001650:	2b00      	cmp	r3, #0
 8001652:	d013      	beq.n	800167c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f022 0204 	bic.w	r2, r2, #4
 8001662:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001668:	2208      	movs	r2, #8
 800166a:	409a      	lsls	r2, r3
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001674:	f043 0201 	orr.w	r2, r3, #1
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001680:	2201      	movs	r2, #1
 8001682:	409a      	lsls	r2, r3
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	4013      	ands	r3, r2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d012      	beq.n	80016b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	695b      	ldr	r3, [r3, #20]
 8001692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001696:	2b00      	cmp	r3, #0
 8001698:	d00b      	beq.n	80016b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800169e:	2201      	movs	r2, #1
 80016a0:	409a      	lsls	r2, r3
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016aa:	f043 0202 	orr.w	r2, r3, #2
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016b6:	2204      	movs	r2, #4
 80016b8:	409a      	lsls	r2, r3
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	4013      	ands	r3, r2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d012      	beq.n	80016e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0302 	and.w	r3, r3, #2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d00b      	beq.n	80016e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d4:	2204      	movs	r2, #4
 80016d6:	409a      	lsls	r2, r3
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016e0:	f043 0204 	orr.w	r2, r3, #4
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ec:	2210      	movs	r2, #16
 80016ee:	409a      	lsls	r2, r3
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	4013      	ands	r3, r2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d043      	beq.n	8001780 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0308 	and.w	r3, r3, #8
 8001702:	2b00      	cmp	r3, #0
 8001704:	d03c      	beq.n	8001780 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800170a:	2210      	movs	r2, #16
 800170c:	409a      	lsls	r2, r3
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d018      	beq.n	8001752 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d108      	bne.n	8001740 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	2b00      	cmp	r3, #0
 8001734:	d024      	beq.n	8001780 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	4798      	blx	r3
 800173e:	e01f      	b.n	8001780 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001744:	2b00      	cmp	r3, #0
 8001746:	d01b      	beq.n	8001780 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	4798      	blx	r3
 8001750:	e016      	b.n	8001780 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800175c:	2b00      	cmp	r3, #0
 800175e:	d107      	bne.n	8001770 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f022 0208 	bic.w	r2, r2, #8
 800176e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001774:	2b00      	cmp	r3, #0
 8001776:	d003      	beq.n	8001780 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001784:	2220      	movs	r2, #32
 8001786:	409a      	lsls	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	4013      	ands	r3, r2
 800178c:	2b00      	cmp	r3, #0
 800178e:	f000 808e 	beq.w	80018ae <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0310 	and.w	r3, r3, #16
 800179c:	2b00      	cmp	r3, #0
 800179e:	f000 8086 	beq.w	80018ae <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017a6:	2220      	movs	r2, #32
 80017a8:	409a      	lsls	r2, r3
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b05      	cmp	r3, #5
 80017b8:	d136      	bne.n	8001828 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f022 0216 	bic.w	r2, r2, #22
 80017c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	695a      	ldr	r2, [r3, #20]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d103      	bne.n	80017ea <HAL_DMA_IRQHandler+0x1da>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d007      	beq.n	80017fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f022 0208 	bic.w	r2, r2, #8
 80017f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017fe:	223f      	movs	r2, #63	; 0x3f
 8001800:	409a      	lsls	r2, r3
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2201      	movs	r2, #1
 8001812:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800181a:	2b00      	cmp	r3, #0
 800181c:	d07d      	beq.n	800191a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	4798      	blx	r3
        }
        return;
 8001826:	e078      	b.n	800191a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d01c      	beq.n	8001870 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d108      	bne.n	8001856 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001848:	2b00      	cmp	r3, #0
 800184a:	d030      	beq.n	80018ae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	4798      	blx	r3
 8001854:	e02b      	b.n	80018ae <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800185a:	2b00      	cmp	r3, #0
 800185c:	d027      	beq.n	80018ae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	4798      	blx	r3
 8001866:	e022      	b.n	80018ae <HAL_DMA_IRQHandler+0x29e>
 8001868:	20000000 	.word	0x20000000
 800186c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800187a:	2b00      	cmp	r3, #0
 800187c:	d10f      	bne.n	800189e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f022 0210 	bic.w	r2, r2, #16
 800188c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2201      	movs	r2, #1
 800189a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d032      	beq.n	800191c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d022      	beq.n	8001908 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2205      	movs	r2, #5
 80018c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f022 0201 	bic.w	r2, r2, #1
 80018d8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	3301      	adds	r3, #1
 80018de:	60bb      	str	r3, [r7, #8]
 80018e0:	697a      	ldr	r2, [r7, #20]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d307      	bcc.n	80018f6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0301 	and.w	r3, r3, #1
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d1f2      	bne.n	80018da <HAL_DMA_IRQHandler+0x2ca>
 80018f4:	e000      	b.n	80018f8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80018f6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2201      	movs	r2, #1
 8001904:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190c:	2b00      	cmp	r3, #0
 800190e:	d005      	beq.n	800191c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	4798      	blx	r3
 8001918:	e000      	b.n	800191c <HAL_DMA_IRQHandler+0x30c>
        return;
 800191a:	bf00      	nop
    }
  }
}
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop

08001924 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
 8001930:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001940:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	2b40      	cmp	r3, #64	; 0x40
 8001950:	d108      	bne.n	8001964 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	68ba      	ldr	r2, [r7, #8]
 8001960:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001962:	e007      	b.n	8001974 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	68ba      	ldr	r2, [r7, #8]
 800196a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	60da      	str	r2, [r3, #12]
}
 8001974:	bf00      	nop
 8001976:	3714      	adds	r7, #20
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	b2db      	uxtb	r3, r3
 800198e:	3b10      	subs	r3, #16
 8001990:	4a14      	ldr	r2, [pc, #80]	; (80019e4 <DMA_CalcBaseAndBitshift+0x64>)
 8001992:	fba2 2303 	umull	r2, r3, r2, r3
 8001996:	091b      	lsrs	r3, r3, #4
 8001998:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800199a:	4a13      	ldr	r2, [pc, #76]	; (80019e8 <DMA_CalcBaseAndBitshift+0x68>)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	4413      	add	r3, r2
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	461a      	mov	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2b03      	cmp	r3, #3
 80019ac:	d909      	bls.n	80019c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80019b6:	f023 0303 	bic.w	r3, r3, #3
 80019ba:	1d1a      	adds	r2, r3, #4
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	659a      	str	r2, [r3, #88]	; 0x58
 80019c0:	e007      	b.n	80019d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80019ca:	f023 0303 	bic.w	r3, r3, #3
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3714      	adds	r7, #20
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	aaaaaaab 	.word	0xaaaaaaab
 80019e8:	08004f50 	.word	0x08004f50

080019ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019f4:	2300      	movs	r3, #0
 80019f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d11f      	bne.n	8001a46 <DMA_CheckFifoParam+0x5a>
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	2b03      	cmp	r3, #3
 8001a0a:	d856      	bhi.n	8001aba <DMA_CheckFifoParam+0xce>
 8001a0c:	a201      	add	r2, pc, #4	; (adr r2, 8001a14 <DMA_CheckFifoParam+0x28>)
 8001a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a12:	bf00      	nop
 8001a14:	08001a25 	.word	0x08001a25
 8001a18:	08001a37 	.word	0x08001a37
 8001a1c:	08001a25 	.word	0x08001a25
 8001a20:	08001abb 	.word	0x08001abb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d046      	beq.n	8001abe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a34:	e043      	b.n	8001abe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a3e:	d140      	bne.n	8001ac2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a44:	e03d      	b.n	8001ac2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a4e:	d121      	bne.n	8001a94 <DMA_CheckFifoParam+0xa8>
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	2b03      	cmp	r3, #3
 8001a54:	d837      	bhi.n	8001ac6 <DMA_CheckFifoParam+0xda>
 8001a56:	a201      	add	r2, pc, #4	; (adr r2, 8001a5c <DMA_CheckFifoParam+0x70>)
 8001a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a5c:	08001a6d 	.word	0x08001a6d
 8001a60:	08001a73 	.word	0x08001a73
 8001a64:	08001a6d 	.word	0x08001a6d
 8001a68:	08001a85 	.word	0x08001a85
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	73fb      	strb	r3, [r7, #15]
      break;
 8001a70:	e030      	b.n	8001ad4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d025      	beq.n	8001aca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a82:	e022      	b.n	8001aca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a88:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a8c:	d11f      	bne.n	8001ace <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a92:	e01c      	b.n	8001ace <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d903      	bls.n	8001aa2 <DMA_CheckFifoParam+0xb6>
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	2b03      	cmp	r3, #3
 8001a9e:	d003      	beq.n	8001aa8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001aa0:	e018      	b.n	8001ad4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	73fb      	strb	r3, [r7, #15]
      break;
 8001aa6:	e015      	b.n	8001ad4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d00e      	beq.n	8001ad2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	73fb      	strb	r3, [r7, #15]
      break;
 8001ab8:	e00b      	b.n	8001ad2 <DMA_CheckFifoParam+0xe6>
      break;
 8001aba:	bf00      	nop
 8001abc:	e00a      	b.n	8001ad4 <DMA_CheckFifoParam+0xe8>
      break;
 8001abe:	bf00      	nop
 8001ac0:	e008      	b.n	8001ad4 <DMA_CheckFifoParam+0xe8>
      break;
 8001ac2:	bf00      	nop
 8001ac4:	e006      	b.n	8001ad4 <DMA_CheckFifoParam+0xe8>
      break;
 8001ac6:	bf00      	nop
 8001ac8:	e004      	b.n	8001ad4 <DMA_CheckFifoParam+0xe8>
      break;
 8001aca:	bf00      	nop
 8001acc:	e002      	b.n	8001ad4 <DMA_CheckFifoParam+0xe8>
      break;   
 8001ace:	bf00      	nop
 8001ad0:	e000      	b.n	8001ad4 <DMA_CheckFifoParam+0xe8>
      break;
 8001ad2:	bf00      	nop
    }
  } 
  
  return status; 
 8001ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3714      	adds	r7, #20
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop

08001ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b089      	sub	sp, #36	; 0x24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001aee:	2300      	movs	r3, #0
 8001af0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001af2:	2300      	movs	r3, #0
 8001af4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001af6:	2300      	movs	r3, #0
 8001af8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
 8001afe:	e16b      	b.n	8001dd8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b00:	2201      	movs	r2, #1
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	4013      	ands	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	f040 815a 	bne.w	8001dd2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d00b      	beq.n	8001b3e <HAL_GPIO_Init+0x5a>
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d007      	beq.n	8001b3e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b32:	2b11      	cmp	r3, #17
 8001b34:	d003      	beq.n	8001b3e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	2b12      	cmp	r3, #18
 8001b3c:	d130      	bne.n	8001ba0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	2203      	movs	r2, #3
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	4013      	ands	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	68da      	ldr	r2, [r3, #12]
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b74:	2201      	movs	r2, #1
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	091b      	lsrs	r3, r3, #4
 8001b8a:	f003 0201 	and.w	r2, r3, #1
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	2203      	movs	r2, #3
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d003      	beq.n	8001be0 <HAL_GPIO_Init+0xfc>
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	2b12      	cmp	r3, #18
 8001bde:	d123      	bne.n	8001c28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	08da      	lsrs	r2, r3, #3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3208      	adds	r2, #8
 8001be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	f003 0307 	and.w	r3, r3, #7
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	220f      	movs	r2, #15
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4013      	ands	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	691a      	ldr	r2, [r3, #16]
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	08da      	lsrs	r2, r3, #3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	3208      	adds	r2, #8
 8001c22:	69b9      	ldr	r1, [r7, #24]
 8001c24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	2203      	movs	r2, #3
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 0203 	and.w	r2, r3, #3
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f000 80b4 	beq.w	8001dd2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	4b60      	ldr	r3, [pc, #384]	; (8001df0 <HAL_GPIO_Init+0x30c>)
 8001c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c72:	4a5f      	ldr	r2, [pc, #380]	; (8001df0 <HAL_GPIO_Init+0x30c>)
 8001c74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c78:	6453      	str	r3, [r2, #68]	; 0x44
 8001c7a:	4b5d      	ldr	r3, [pc, #372]	; (8001df0 <HAL_GPIO_Init+0x30c>)
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c86:	4a5b      	ldr	r2, [pc, #364]	; (8001df4 <HAL_GPIO_Init+0x310>)
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	089b      	lsrs	r3, r3, #2
 8001c8c:	3302      	adds	r3, #2
 8001c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	f003 0303 	and.w	r3, r3, #3
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	220f      	movs	r2, #15
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a52      	ldr	r2, [pc, #328]	; (8001df8 <HAL_GPIO_Init+0x314>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d02b      	beq.n	8001d0a <HAL_GPIO_Init+0x226>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a51      	ldr	r2, [pc, #324]	; (8001dfc <HAL_GPIO_Init+0x318>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d025      	beq.n	8001d06 <HAL_GPIO_Init+0x222>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a50      	ldr	r2, [pc, #320]	; (8001e00 <HAL_GPIO_Init+0x31c>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d01f      	beq.n	8001d02 <HAL_GPIO_Init+0x21e>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a4f      	ldr	r2, [pc, #316]	; (8001e04 <HAL_GPIO_Init+0x320>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d019      	beq.n	8001cfe <HAL_GPIO_Init+0x21a>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a4e      	ldr	r2, [pc, #312]	; (8001e08 <HAL_GPIO_Init+0x324>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d013      	beq.n	8001cfa <HAL_GPIO_Init+0x216>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a4d      	ldr	r2, [pc, #308]	; (8001e0c <HAL_GPIO_Init+0x328>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d00d      	beq.n	8001cf6 <HAL_GPIO_Init+0x212>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a4c      	ldr	r2, [pc, #304]	; (8001e10 <HAL_GPIO_Init+0x32c>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d007      	beq.n	8001cf2 <HAL_GPIO_Init+0x20e>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a4b      	ldr	r2, [pc, #300]	; (8001e14 <HAL_GPIO_Init+0x330>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d101      	bne.n	8001cee <HAL_GPIO_Init+0x20a>
 8001cea:	2307      	movs	r3, #7
 8001cec:	e00e      	b.n	8001d0c <HAL_GPIO_Init+0x228>
 8001cee:	2308      	movs	r3, #8
 8001cf0:	e00c      	b.n	8001d0c <HAL_GPIO_Init+0x228>
 8001cf2:	2306      	movs	r3, #6
 8001cf4:	e00a      	b.n	8001d0c <HAL_GPIO_Init+0x228>
 8001cf6:	2305      	movs	r3, #5
 8001cf8:	e008      	b.n	8001d0c <HAL_GPIO_Init+0x228>
 8001cfa:	2304      	movs	r3, #4
 8001cfc:	e006      	b.n	8001d0c <HAL_GPIO_Init+0x228>
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e004      	b.n	8001d0c <HAL_GPIO_Init+0x228>
 8001d02:	2302      	movs	r3, #2
 8001d04:	e002      	b.n	8001d0c <HAL_GPIO_Init+0x228>
 8001d06:	2301      	movs	r3, #1
 8001d08:	e000      	b.n	8001d0c <HAL_GPIO_Init+0x228>
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	69fa      	ldr	r2, [r7, #28]
 8001d0e:	f002 0203 	and.w	r2, r2, #3
 8001d12:	0092      	lsls	r2, r2, #2
 8001d14:	4093      	lsls	r3, r2
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d1c:	4935      	ldr	r1, [pc, #212]	; (8001df4 <HAL_GPIO_Init+0x310>)
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	089b      	lsrs	r3, r3, #2
 8001d22:	3302      	adds	r3, #2
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d2a:	4b3b      	ldr	r3, [pc, #236]	; (8001e18 <HAL_GPIO_Init+0x334>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	43db      	mvns	r3, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4013      	ands	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d4e:	4a32      	ldr	r2, [pc, #200]	; (8001e18 <HAL_GPIO_Init+0x334>)
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d54:	4b30      	ldr	r3, [pc, #192]	; (8001e18 <HAL_GPIO_Init+0x334>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d003      	beq.n	8001d78 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d78:	4a27      	ldr	r2, [pc, #156]	; (8001e18 <HAL_GPIO_Init+0x334>)
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d7e:	4b26      	ldr	r3, [pc, #152]	; (8001e18 <HAL_GPIO_Init+0x334>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	43db      	mvns	r3, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001da2:	4a1d      	ldr	r2, [pc, #116]	; (8001e18 <HAL_GPIO_Init+0x334>)
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001da8:	4b1b      	ldr	r3, [pc, #108]	; (8001e18 <HAL_GPIO_Init+0x334>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	43db      	mvns	r3, r3
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4013      	ands	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d003      	beq.n	8001dcc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dcc:	4a12      	ldr	r2, [pc, #72]	; (8001e18 <HAL_GPIO_Init+0x334>)
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	61fb      	str	r3, [r7, #28]
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	2b0f      	cmp	r3, #15
 8001ddc:	f67f ae90 	bls.w	8001b00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001de0:	bf00      	nop
 8001de2:	bf00      	nop
 8001de4:	3724      	adds	r7, #36	; 0x24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	40023800 	.word	0x40023800
 8001df4:	40013800 	.word	0x40013800
 8001df8:	40020000 	.word	0x40020000
 8001dfc:	40020400 	.word	0x40020400
 8001e00:	40020800 	.word	0x40020800
 8001e04:	40020c00 	.word	0x40020c00
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	40021400 	.word	0x40021400
 8001e10:	40021800 	.word	0x40021800
 8001e14:	40021c00 	.word	0x40021c00
 8001e18:	40013c00 	.word	0x40013c00

08001e1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	460b      	mov	r3, r1
 8001e26:	807b      	strh	r3, [r7, #2]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e2c:	787b      	ldrb	r3, [r7, #1]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e32:	887a      	ldrh	r2, [r7, #2]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e38:	e003      	b.n	8001e42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e3a:	887b      	ldrh	r3, [r7, #2]
 8001e3c:	041a      	lsls	r2, r3, #16
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	619a      	str	r2, [r3, #24]
}
 8001e42:	bf00      	nop
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
	...

08001e50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e25b      	b.n	800231a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d075      	beq.n	8001f5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e6e:	4ba3      	ldr	r3, [pc, #652]	; (80020fc <HAL_RCC_OscConfig+0x2ac>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 030c 	and.w	r3, r3, #12
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	d00c      	beq.n	8001e94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e7a:	4ba0      	ldr	r3, [pc, #640]	; (80020fc <HAL_RCC_OscConfig+0x2ac>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e82:	2b08      	cmp	r3, #8
 8001e84:	d112      	bne.n	8001eac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e86:	4b9d      	ldr	r3, [pc, #628]	; (80020fc <HAL_RCC_OscConfig+0x2ac>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e92:	d10b      	bne.n	8001eac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e94:	4b99      	ldr	r3, [pc, #612]	; (80020fc <HAL_RCC_OscConfig+0x2ac>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d05b      	beq.n	8001f58 <HAL_RCC_OscConfig+0x108>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d157      	bne.n	8001f58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e236      	b.n	800231a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb4:	d106      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x74>
 8001eb6:	4b91      	ldr	r3, [pc, #580]	; (80020fc <HAL_RCC_OscConfig+0x2ac>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a90      	ldr	r2, [pc, #576]	; (80020fc <HAL_RCC_OscConfig+0x2ac>)
 8001ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec0:	6013      	str	r3, [r2, #0]
 8001ec2:	e01d      	b.n	8001f00 <HAL_RCC_OscConfig+0xb0>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ecc:	d10c      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x98>
 8001ece:	4b8b      	ldr	r3, [pc, #556]	; (80020fc <HAL_RCC_OscConfig+0x2ac>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a8a      	ldr	r2, [pc, #552]	; (80020fc <HAL_RCC_OscConfig+0x2ac>)
 8001ed4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ed8:	6013      	str	r3, [r2, #0]
 8001eda:	4b88      	ldr	r3, [pc, #544]	; (80020fc <HAL_RCC_OscConfig+0x2ac>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a87      	ldr	r2, [pc, #540]	; (80020fc <HAL_RCC_OscConfig+0x2ac>)
 8001ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	e00b      	b.n	8001f00 <HAL_RCC_OscConfig+0xb0>
 8001ee8:	4b84      	ldr	r3, [pc, #528]	; (80020fc <HAL_RCC_OscConfig+0x2ac>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a83      	ldr	r2, [pc, #524]	; (80020fc <HAL_RCC_OscConfig+0x2ac>)
 8001eee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ef2:	6013      	str	r3, [r2, #0]
 8001ef4:	4b81      	ldr	r3, [pc, #516]	; (80020fc <HAL_RCC_OscConfig+0x2ac>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a80      	ldr	r2, [pc, #512]	; (80020fc <HAL_RCC_OscConfig+0x2ac>)
 8001efa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001efe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d013      	beq.n	8001f30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f08:	f7ff f93c 	bl	8001184 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f10:	f7ff f938 	bl	8001184 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b64      	cmp	r3, #100	; 0x64
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e1fb      	b.n	800231a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f22:	4b76      	ldr	r3, [pc, #472]	; (80020fc <HAL_RCC_OscConfig+0x2ac>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0f0      	beq.n	8001f10 <HAL_RCC_OscConfig+0xc0>
 8001f2e:	e014      	b.n	8001f5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f30:	f7ff f928 	bl	8001184 <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f38:	f7ff f924 	bl	8001184 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b64      	cmp	r3, #100	; 0x64
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e1e7      	b.n	800231a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f4a:	4b6c      	ldr	r3, [pc, #432]	; (80020fc <HAL_RCC_OscConfig+0x2ac>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1f0      	bne.n	8001f38 <HAL_RCC_OscConfig+0xe8>
 8001f56:	e000      	b.n	8001f5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d063      	beq.n	800202e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f66:	4b65      	ldr	r3, [pc, #404]	; (80020fc <HAL_RCC_OscConfig+0x2ac>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 030c 	and.w	r3, r3, #12
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00b      	beq.n	8001f8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f72:	4b62      	ldr	r3, [pc, #392]	; (80020fc <HAL_RCC_OscConfig+0x2ac>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f7a:	2b08      	cmp	r3, #8
 8001f7c:	d11c      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f7e:	4b5f      	ldr	r3, [pc, #380]	; (80020fc <HAL_RCC_OscConfig+0x2ac>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d116      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f8a:	4b5c      	ldr	r3, [pc, #368]	; (80020fc <HAL_RCC_OscConfig+0x2ac>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d005      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x152>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d001      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e1bb      	b.n	800231a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa2:	4b56      	ldr	r3, [pc, #344]	; (80020fc <HAL_RCC_OscConfig+0x2ac>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	4952      	ldr	r1, [pc, #328]	; (80020fc <HAL_RCC_OscConfig+0x2ac>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fb6:	e03a      	b.n	800202e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d020      	beq.n	8002002 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fc0:	4b4f      	ldr	r3, [pc, #316]	; (8002100 <HAL_RCC_OscConfig+0x2b0>)
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc6:	f7ff f8dd 	bl	8001184 <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fce:	f7ff f8d9 	bl	8001184 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e19c      	b.n	800231a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe0:	4b46      	ldr	r3, [pc, #280]	; (80020fc <HAL_RCC_OscConfig+0x2ac>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d0f0      	beq.n	8001fce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fec:	4b43      	ldr	r3, [pc, #268]	; (80020fc <HAL_RCC_OscConfig+0x2ac>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	691b      	ldr	r3, [r3, #16]
 8001ff8:	00db      	lsls	r3, r3, #3
 8001ffa:	4940      	ldr	r1, [pc, #256]	; (80020fc <HAL_RCC_OscConfig+0x2ac>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	600b      	str	r3, [r1, #0]
 8002000:	e015      	b.n	800202e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002002:	4b3f      	ldr	r3, [pc, #252]	; (8002100 <HAL_RCC_OscConfig+0x2b0>)
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002008:	f7ff f8bc 	bl	8001184 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002010:	f7ff f8b8 	bl	8001184 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e17b      	b.n	800231a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002022:	4b36      	ldr	r3, [pc, #216]	; (80020fc <HAL_RCC_OscConfig+0x2ac>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1f0      	bne.n	8002010 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0308 	and.w	r3, r3, #8
 8002036:	2b00      	cmp	r3, #0
 8002038:	d030      	beq.n	800209c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d016      	beq.n	8002070 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002042:	4b30      	ldr	r3, [pc, #192]	; (8002104 <HAL_RCC_OscConfig+0x2b4>)
 8002044:	2201      	movs	r2, #1
 8002046:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002048:	f7ff f89c 	bl	8001184 <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002050:	f7ff f898 	bl	8001184 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e15b      	b.n	800231a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002062:	4b26      	ldr	r3, [pc, #152]	; (80020fc <HAL_RCC_OscConfig+0x2ac>)
 8002064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d0f0      	beq.n	8002050 <HAL_RCC_OscConfig+0x200>
 800206e:	e015      	b.n	800209c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002070:	4b24      	ldr	r3, [pc, #144]	; (8002104 <HAL_RCC_OscConfig+0x2b4>)
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002076:	f7ff f885 	bl	8001184 <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800207c:	e008      	b.n	8002090 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800207e:	f7ff f881 	bl	8001184 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e144      	b.n	800231a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002090:	4b1a      	ldr	r3, [pc, #104]	; (80020fc <HAL_RCC_OscConfig+0x2ac>)
 8002092:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1f0      	bne.n	800207e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0304 	and.w	r3, r3, #4
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f000 80a0 	beq.w	80021ea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020aa:	2300      	movs	r3, #0
 80020ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ae:	4b13      	ldr	r3, [pc, #76]	; (80020fc <HAL_RCC_OscConfig+0x2ac>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d10f      	bne.n	80020da <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	60bb      	str	r3, [r7, #8]
 80020be:	4b0f      	ldr	r3, [pc, #60]	; (80020fc <HAL_RCC_OscConfig+0x2ac>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	4a0e      	ldr	r2, [pc, #56]	; (80020fc <HAL_RCC_OscConfig+0x2ac>)
 80020c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c8:	6413      	str	r3, [r2, #64]	; 0x40
 80020ca:	4b0c      	ldr	r3, [pc, #48]	; (80020fc <HAL_RCC_OscConfig+0x2ac>)
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d2:	60bb      	str	r3, [r7, #8]
 80020d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020d6:	2301      	movs	r3, #1
 80020d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020da:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <HAL_RCC_OscConfig+0x2b8>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d121      	bne.n	800212a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020e6:	4b08      	ldr	r3, [pc, #32]	; (8002108 <HAL_RCC_OscConfig+0x2b8>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a07      	ldr	r2, [pc, #28]	; (8002108 <HAL_RCC_OscConfig+0x2b8>)
 80020ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020f2:	f7ff f847 	bl	8001184 <HAL_GetTick>
 80020f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f8:	e011      	b.n	800211e <HAL_RCC_OscConfig+0x2ce>
 80020fa:	bf00      	nop
 80020fc:	40023800 	.word	0x40023800
 8002100:	42470000 	.word	0x42470000
 8002104:	42470e80 	.word	0x42470e80
 8002108:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800210c:	f7ff f83a 	bl	8001184 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e0fd      	b.n	800231a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800211e:	4b81      	ldr	r3, [pc, #516]	; (8002324 <HAL_RCC_OscConfig+0x4d4>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002126:	2b00      	cmp	r3, #0
 8002128:	d0f0      	beq.n	800210c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d106      	bne.n	8002140 <HAL_RCC_OscConfig+0x2f0>
 8002132:	4b7d      	ldr	r3, [pc, #500]	; (8002328 <HAL_RCC_OscConfig+0x4d8>)
 8002134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002136:	4a7c      	ldr	r2, [pc, #496]	; (8002328 <HAL_RCC_OscConfig+0x4d8>)
 8002138:	f043 0301 	orr.w	r3, r3, #1
 800213c:	6713      	str	r3, [r2, #112]	; 0x70
 800213e:	e01c      	b.n	800217a <HAL_RCC_OscConfig+0x32a>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	2b05      	cmp	r3, #5
 8002146:	d10c      	bne.n	8002162 <HAL_RCC_OscConfig+0x312>
 8002148:	4b77      	ldr	r3, [pc, #476]	; (8002328 <HAL_RCC_OscConfig+0x4d8>)
 800214a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800214c:	4a76      	ldr	r2, [pc, #472]	; (8002328 <HAL_RCC_OscConfig+0x4d8>)
 800214e:	f043 0304 	orr.w	r3, r3, #4
 8002152:	6713      	str	r3, [r2, #112]	; 0x70
 8002154:	4b74      	ldr	r3, [pc, #464]	; (8002328 <HAL_RCC_OscConfig+0x4d8>)
 8002156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002158:	4a73      	ldr	r2, [pc, #460]	; (8002328 <HAL_RCC_OscConfig+0x4d8>)
 800215a:	f043 0301 	orr.w	r3, r3, #1
 800215e:	6713      	str	r3, [r2, #112]	; 0x70
 8002160:	e00b      	b.n	800217a <HAL_RCC_OscConfig+0x32a>
 8002162:	4b71      	ldr	r3, [pc, #452]	; (8002328 <HAL_RCC_OscConfig+0x4d8>)
 8002164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002166:	4a70      	ldr	r2, [pc, #448]	; (8002328 <HAL_RCC_OscConfig+0x4d8>)
 8002168:	f023 0301 	bic.w	r3, r3, #1
 800216c:	6713      	str	r3, [r2, #112]	; 0x70
 800216e:	4b6e      	ldr	r3, [pc, #440]	; (8002328 <HAL_RCC_OscConfig+0x4d8>)
 8002170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002172:	4a6d      	ldr	r2, [pc, #436]	; (8002328 <HAL_RCC_OscConfig+0x4d8>)
 8002174:	f023 0304 	bic.w	r3, r3, #4
 8002178:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d015      	beq.n	80021ae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002182:	f7fe ffff 	bl	8001184 <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002188:	e00a      	b.n	80021a0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800218a:	f7fe fffb 	bl	8001184 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	f241 3288 	movw	r2, #5000	; 0x1388
 8002198:	4293      	cmp	r3, r2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e0bc      	b.n	800231a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021a0:	4b61      	ldr	r3, [pc, #388]	; (8002328 <HAL_RCC_OscConfig+0x4d8>)
 80021a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d0ee      	beq.n	800218a <HAL_RCC_OscConfig+0x33a>
 80021ac:	e014      	b.n	80021d8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ae:	f7fe ffe9 	bl	8001184 <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b4:	e00a      	b.n	80021cc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021b6:	f7fe ffe5 	bl	8001184 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e0a6      	b.n	800231a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021cc:	4b56      	ldr	r3, [pc, #344]	; (8002328 <HAL_RCC_OscConfig+0x4d8>)
 80021ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1ee      	bne.n	80021b6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021d8:	7dfb      	ldrb	r3, [r7, #23]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d105      	bne.n	80021ea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021de:	4b52      	ldr	r3, [pc, #328]	; (8002328 <HAL_RCC_OscConfig+0x4d8>)
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	4a51      	ldr	r2, [pc, #324]	; (8002328 <HAL_RCC_OscConfig+0x4d8>)
 80021e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f000 8092 	beq.w	8002318 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021f4:	4b4c      	ldr	r3, [pc, #304]	; (8002328 <HAL_RCC_OscConfig+0x4d8>)
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f003 030c 	and.w	r3, r3, #12
 80021fc:	2b08      	cmp	r3, #8
 80021fe:	d05c      	beq.n	80022ba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	2b02      	cmp	r3, #2
 8002206:	d141      	bne.n	800228c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002208:	4b48      	ldr	r3, [pc, #288]	; (800232c <HAL_RCC_OscConfig+0x4dc>)
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220e:	f7fe ffb9 	bl	8001184 <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002214:	e008      	b.n	8002228 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002216:	f7fe ffb5 	bl	8001184 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e078      	b.n	800231a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002228:	4b3f      	ldr	r3, [pc, #252]	; (8002328 <HAL_RCC_OscConfig+0x4d8>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1f0      	bne.n	8002216 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	69da      	ldr	r2, [r3, #28]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a1b      	ldr	r3, [r3, #32]
 800223c:	431a      	orrs	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002242:	019b      	lsls	r3, r3, #6
 8002244:	431a      	orrs	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224a:	085b      	lsrs	r3, r3, #1
 800224c:	3b01      	subs	r3, #1
 800224e:	041b      	lsls	r3, r3, #16
 8002250:	431a      	orrs	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002256:	061b      	lsls	r3, r3, #24
 8002258:	4933      	ldr	r1, [pc, #204]	; (8002328 <HAL_RCC_OscConfig+0x4d8>)
 800225a:	4313      	orrs	r3, r2
 800225c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800225e:	4b33      	ldr	r3, [pc, #204]	; (800232c <HAL_RCC_OscConfig+0x4dc>)
 8002260:	2201      	movs	r2, #1
 8002262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002264:	f7fe ff8e 	bl	8001184 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800226c:	f7fe ff8a 	bl	8001184 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e04d      	b.n	800231a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800227e:	4b2a      	ldr	r3, [pc, #168]	; (8002328 <HAL_RCC_OscConfig+0x4d8>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d0f0      	beq.n	800226c <HAL_RCC_OscConfig+0x41c>
 800228a:	e045      	b.n	8002318 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800228c:	4b27      	ldr	r3, [pc, #156]	; (800232c <HAL_RCC_OscConfig+0x4dc>)
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002292:	f7fe ff77 	bl	8001184 <HAL_GetTick>
 8002296:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002298:	e008      	b.n	80022ac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800229a:	f7fe ff73 	bl	8001184 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e036      	b.n	800231a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ac:	4b1e      	ldr	r3, [pc, #120]	; (8002328 <HAL_RCC_OscConfig+0x4d8>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1f0      	bne.n	800229a <HAL_RCC_OscConfig+0x44a>
 80022b8:	e02e      	b.n	8002318 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d101      	bne.n	80022c6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e029      	b.n	800231a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022c6:	4b18      	ldr	r3, [pc, #96]	; (8002328 <HAL_RCC_OscConfig+0x4d8>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d11c      	bne.n	8002314 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d115      	bne.n	8002314 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022ee:	4013      	ands	r3, r2
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d10d      	bne.n	8002314 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002302:	429a      	cmp	r2, r3
 8002304:	d106      	bne.n	8002314 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002310:	429a      	cmp	r2, r3
 8002312:	d001      	beq.n	8002318 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e000      	b.n	800231a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3718      	adds	r7, #24
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40007000 	.word	0x40007000
 8002328:	40023800 	.word	0x40023800
 800232c:	42470060 	.word	0x42470060

08002330 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d101      	bne.n	8002344 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e0cc      	b.n	80024de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002344:	4b68      	ldr	r3, [pc, #416]	; (80024e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 030f 	and.w	r3, r3, #15
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	429a      	cmp	r2, r3
 8002350:	d90c      	bls.n	800236c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002352:	4b65      	ldr	r3, [pc, #404]	; (80024e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	b2d2      	uxtb	r2, r2
 8002358:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800235a:	4b63      	ldr	r3, [pc, #396]	; (80024e8 <HAL_RCC_ClockConfig+0x1b8>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	429a      	cmp	r2, r3
 8002366:	d001      	beq.n	800236c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e0b8      	b.n	80024de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d020      	beq.n	80023ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	2b00      	cmp	r3, #0
 8002382:	d005      	beq.n	8002390 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002384:	4b59      	ldr	r3, [pc, #356]	; (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	4a58      	ldr	r2, [pc, #352]	; (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 800238a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800238e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0308 	and.w	r3, r3, #8
 8002398:	2b00      	cmp	r3, #0
 800239a:	d005      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800239c:	4b53      	ldr	r3, [pc, #332]	; (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	4a52      	ldr	r2, [pc, #328]	; (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 80023a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023a8:	4b50      	ldr	r3, [pc, #320]	; (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	494d      	ldr	r1, [pc, #308]	; (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d044      	beq.n	8002450 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d107      	bne.n	80023de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ce:	4b47      	ldr	r3, [pc, #284]	; (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d119      	bne.n	800240e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e07f      	b.n	80024de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d003      	beq.n	80023ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023ea:	2b03      	cmp	r3, #3
 80023ec:	d107      	bne.n	80023fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ee:	4b3f      	ldr	r3, [pc, #252]	; (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d109      	bne.n	800240e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e06f      	b.n	80024de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023fe:	4b3b      	ldr	r3, [pc, #236]	; (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e067      	b.n	80024de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800240e:	4b37      	ldr	r3, [pc, #220]	; (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f023 0203 	bic.w	r2, r3, #3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	4934      	ldr	r1, [pc, #208]	; (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 800241c:	4313      	orrs	r3, r2
 800241e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002420:	f7fe feb0 	bl	8001184 <HAL_GetTick>
 8002424:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002426:	e00a      	b.n	800243e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002428:	f7fe feac 	bl	8001184 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	f241 3288 	movw	r2, #5000	; 0x1388
 8002436:	4293      	cmp	r3, r2
 8002438:	d901      	bls.n	800243e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e04f      	b.n	80024de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800243e:	4b2b      	ldr	r3, [pc, #172]	; (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 020c 	and.w	r2, r3, #12
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	429a      	cmp	r2, r3
 800244e:	d1eb      	bne.n	8002428 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002450:	4b25      	ldr	r3, [pc, #148]	; (80024e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 030f 	and.w	r3, r3, #15
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	429a      	cmp	r2, r3
 800245c:	d20c      	bcs.n	8002478 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800245e:	4b22      	ldr	r3, [pc, #136]	; (80024e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002466:	4b20      	ldr	r3, [pc, #128]	; (80024e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 030f 	and.w	r3, r3, #15
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	429a      	cmp	r2, r3
 8002472:	d001      	beq.n	8002478 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e032      	b.n	80024de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0304 	and.w	r3, r3, #4
 8002480:	2b00      	cmp	r3, #0
 8002482:	d008      	beq.n	8002496 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002484:	4b19      	ldr	r3, [pc, #100]	; (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	4916      	ldr	r1, [pc, #88]	; (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 8002492:	4313      	orrs	r3, r2
 8002494:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0308 	and.w	r3, r3, #8
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d009      	beq.n	80024b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024a2:	4b12      	ldr	r3, [pc, #72]	; (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	490e      	ldr	r1, [pc, #56]	; (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024b6:	f000 f821 	bl	80024fc <HAL_RCC_GetSysClockFreq>
 80024ba:	4602      	mov	r2, r0
 80024bc:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	091b      	lsrs	r3, r3, #4
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	490a      	ldr	r1, [pc, #40]	; (80024f0 <HAL_RCC_ClockConfig+0x1c0>)
 80024c8:	5ccb      	ldrb	r3, [r1, r3]
 80024ca:	fa22 f303 	lsr.w	r3, r2, r3
 80024ce:	4a09      	ldr	r2, [pc, #36]	; (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 80024d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024d2:	4b09      	ldr	r3, [pc, #36]	; (80024f8 <HAL_RCC_ClockConfig+0x1c8>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7fe fe10 	bl	80010fc <HAL_InitTick>

  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40023c00 	.word	0x40023c00
 80024ec:	40023800 	.word	0x40023800
 80024f0:	08004f38 	.word	0x08004f38
 80024f4:	20000000 	.word	0x20000000
 80024f8:	20000004 	.word	0x20000004

080024fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002500:	b084      	sub	sp, #16
 8002502:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002504:	2300      	movs	r3, #0
 8002506:	607b      	str	r3, [r7, #4]
 8002508:	2300      	movs	r3, #0
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	2300      	movs	r3, #0
 800250e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002510:	2300      	movs	r3, #0
 8002512:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002514:	4b67      	ldr	r3, [pc, #412]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f003 030c 	and.w	r3, r3, #12
 800251c:	2b08      	cmp	r3, #8
 800251e:	d00d      	beq.n	800253c <HAL_RCC_GetSysClockFreq+0x40>
 8002520:	2b08      	cmp	r3, #8
 8002522:	f200 80bd 	bhi.w	80026a0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002526:	2b00      	cmp	r3, #0
 8002528:	d002      	beq.n	8002530 <HAL_RCC_GetSysClockFreq+0x34>
 800252a:	2b04      	cmp	r3, #4
 800252c:	d003      	beq.n	8002536 <HAL_RCC_GetSysClockFreq+0x3a>
 800252e:	e0b7      	b.n	80026a0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002530:	4b61      	ldr	r3, [pc, #388]	; (80026b8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002532:	60bb      	str	r3, [r7, #8]
       break;
 8002534:	e0b7      	b.n	80026a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002536:	4b61      	ldr	r3, [pc, #388]	; (80026bc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002538:	60bb      	str	r3, [r7, #8]
      break;
 800253a:	e0b4      	b.n	80026a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800253c:	4b5d      	ldr	r3, [pc, #372]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002544:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002546:	4b5b      	ldr	r3, [pc, #364]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d04d      	beq.n	80025ee <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002552:	4b58      	ldr	r3, [pc, #352]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	099b      	lsrs	r3, r3, #6
 8002558:	461a      	mov	r2, r3
 800255a:	f04f 0300 	mov.w	r3, #0
 800255e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002562:	f04f 0100 	mov.w	r1, #0
 8002566:	ea02 0800 	and.w	r8, r2, r0
 800256a:	ea03 0901 	and.w	r9, r3, r1
 800256e:	4640      	mov	r0, r8
 8002570:	4649      	mov	r1, r9
 8002572:	f04f 0200 	mov.w	r2, #0
 8002576:	f04f 0300 	mov.w	r3, #0
 800257a:	014b      	lsls	r3, r1, #5
 800257c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002580:	0142      	lsls	r2, r0, #5
 8002582:	4610      	mov	r0, r2
 8002584:	4619      	mov	r1, r3
 8002586:	ebb0 0008 	subs.w	r0, r0, r8
 800258a:	eb61 0109 	sbc.w	r1, r1, r9
 800258e:	f04f 0200 	mov.w	r2, #0
 8002592:	f04f 0300 	mov.w	r3, #0
 8002596:	018b      	lsls	r3, r1, #6
 8002598:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800259c:	0182      	lsls	r2, r0, #6
 800259e:	1a12      	subs	r2, r2, r0
 80025a0:	eb63 0301 	sbc.w	r3, r3, r1
 80025a4:	f04f 0000 	mov.w	r0, #0
 80025a8:	f04f 0100 	mov.w	r1, #0
 80025ac:	00d9      	lsls	r1, r3, #3
 80025ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80025b2:	00d0      	lsls	r0, r2, #3
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	eb12 0208 	adds.w	r2, r2, r8
 80025bc:	eb43 0309 	adc.w	r3, r3, r9
 80025c0:	f04f 0000 	mov.w	r0, #0
 80025c4:	f04f 0100 	mov.w	r1, #0
 80025c8:	0259      	lsls	r1, r3, #9
 80025ca:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80025ce:	0250      	lsls	r0, r2, #9
 80025d0:	4602      	mov	r2, r0
 80025d2:	460b      	mov	r3, r1
 80025d4:	4610      	mov	r0, r2
 80025d6:	4619      	mov	r1, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	461a      	mov	r2, r3
 80025dc:	f04f 0300 	mov.w	r3, #0
 80025e0:	f7fd fdf2 	bl	80001c8 <__aeabi_uldivmod>
 80025e4:	4602      	mov	r2, r0
 80025e6:	460b      	mov	r3, r1
 80025e8:	4613      	mov	r3, r2
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	e04a      	b.n	8002684 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ee:	4b31      	ldr	r3, [pc, #196]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	099b      	lsrs	r3, r3, #6
 80025f4:	461a      	mov	r2, r3
 80025f6:	f04f 0300 	mov.w	r3, #0
 80025fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80025fe:	f04f 0100 	mov.w	r1, #0
 8002602:	ea02 0400 	and.w	r4, r2, r0
 8002606:	ea03 0501 	and.w	r5, r3, r1
 800260a:	4620      	mov	r0, r4
 800260c:	4629      	mov	r1, r5
 800260e:	f04f 0200 	mov.w	r2, #0
 8002612:	f04f 0300 	mov.w	r3, #0
 8002616:	014b      	lsls	r3, r1, #5
 8002618:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800261c:	0142      	lsls	r2, r0, #5
 800261e:	4610      	mov	r0, r2
 8002620:	4619      	mov	r1, r3
 8002622:	1b00      	subs	r0, r0, r4
 8002624:	eb61 0105 	sbc.w	r1, r1, r5
 8002628:	f04f 0200 	mov.w	r2, #0
 800262c:	f04f 0300 	mov.w	r3, #0
 8002630:	018b      	lsls	r3, r1, #6
 8002632:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002636:	0182      	lsls	r2, r0, #6
 8002638:	1a12      	subs	r2, r2, r0
 800263a:	eb63 0301 	sbc.w	r3, r3, r1
 800263e:	f04f 0000 	mov.w	r0, #0
 8002642:	f04f 0100 	mov.w	r1, #0
 8002646:	00d9      	lsls	r1, r3, #3
 8002648:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800264c:	00d0      	lsls	r0, r2, #3
 800264e:	4602      	mov	r2, r0
 8002650:	460b      	mov	r3, r1
 8002652:	1912      	adds	r2, r2, r4
 8002654:	eb45 0303 	adc.w	r3, r5, r3
 8002658:	f04f 0000 	mov.w	r0, #0
 800265c:	f04f 0100 	mov.w	r1, #0
 8002660:	0299      	lsls	r1, r3, #10
 8002662:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002666:	0290      	lsls	r0, r2, #10
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	4610      	mov	r0, r2
 800266e:	4619      	mov	r1, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	461a      	mov	r2, r3
 8002674:	f04f 0300 	mov.w	r3, #0
 8002678:	f7fd fda6 	bl	80001c8 <__aeabi_uldivmod>
 800267c:	4602      	mov	r2, r0
 800267e:	460b      	mov	r3, r1
 8002680:	4613      	mov	r3, r2
 8002682:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002684:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	0c1b      	lsrs	r3, r3, #16
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	3301      	adds	r3, #1
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	fbb2 f3f3 	udiv	r3, r2, r3
 800269c:	60bb      	str	r3, [r7, #8]
      break;
 800269e:	e002      	b.n	80026a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026a0:	4b05      	ldr	r3, [pc, #20]	; (80026b8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80026a2:	60bb      	str	r3, [r7, #8]
      break;
 80026a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026a6:	68bb      	ldr	r3, [r7, #8]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80026b2:	bf00      	nop
 80026b4:	40023800 	.word	0x40023800
 80026b8:	00f42400 	.word	0x00f42400
 80026bc:	007a1200 	.word	0x007a1200

080026c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026c4:	4b03      	ldr	r3, [pc, #12]	; (80026d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80026c6:	681b      	ldr	r3, [r3, #0]
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	20000000 	.word	0x20000000

080026d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026dc:	f7ff fff0 	bl	80026c0 <HAL_RCC_GetHCLKFreq>
 80026e0:	4602      	mov	r2, r0
 80026e2:	4b05      	ldr	r3, [pc, #20]	; (80026f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	0a9b      	lsrs	r3, r3, #10
 80026e8:	f003 0307 	and.w	r3, r3, #7
 80026ec:	4903      	ldr	r1, [pc, #12]	; (80026fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80026ee:	5ccb      	ldrb	r3, [r1, r3]
 80026f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40023800 	.word	0x40023800
 80026fc:	08004f48 	.word	0x08004f48

08002700 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002704:	f7ff ffdc 	bl	80026c0 <HAL_RCC_GetHCLKFreq>
 8002708:	4602      	mov	r2, r0
 800270a:	4b05      	ldr	r3, [pc, #20]	; (8002720 <HAL_RCC_GetPCLK2Freq+0x20>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	0b5b      	lsrs	r3, r3, #13
 8002710:	f003 0307 	and.w	r3, r3, #7
 8002714:	4903      	ldr	r1, [pc, #12]	; (8002724 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002716:	5ccb      	ldrb	r3, [r1, r3]
 8002718:	fa22 f303 	lsr.w	r3, r2, r3
}
 800271c:	4618      	mov	r0, r3
 800271e:	bd80      	pop	{r7, pc}
 8002720:	40023800 	.word	0x40023800
 8002724:	08004f48 	.word	0x08004f48

08002728 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e01d      	b.n	8002776 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d106      	bne.n	8002754 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f7fe fac0 	bl	8000cd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2202      	movs	r2, #2
 8002758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	3304      	adds	r3, #4
 8002764:	4619      	mov	r1, r3
 8002766:	4610      	mov	r0, r2
 8002768:	f000 fbde 	bl	8002f28 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800277e:	b480      	push	{r7}
 8002780:	b085      	sub	sp, #20
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2202      	movs	r2, #2
 800278a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 0307 	and.w	r3, r3, #7
 8002798:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2b06      	cmp	r3, #6
 800279e:	d007      	beq.n	80027b0 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f042 0201 	orr.w	r2, r2, #1
 80027ae:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3714      	adds	r7, #20
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b082      	sub	sp, #8
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e01d      	b.n	8002814 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d106      	bne.n	80027f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f7fe fac3 	bl	8000d78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2202      	movs	r2, #2
 80027f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	3304      	adds	r3, #4
 8002802:	4619      	mov	r1, r3
 8002804:	4610      	mov	r0, r2
 8002806:	f000 fb8f 	bl	8002f28 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2201      	movs	r2, #1
 800282c:	6839      	ldr	r1, [r7, #0]
 800282e:	4618      	mov	r0, r3
 8002830:	f000 fe64 	bl	80034fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a15      	ldr	r2, [pc, #84]	; (8002890 <HAL_TIM_PWM_Start+0x74>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d004      	beq.n	8002848 <HAL_TIM_PWM_Start+0x2c>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a14      	ldr	r2, [pc, #80]	; (8002894 <HAL_TIM_PWM_Start+0x78>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d101      	bne.n	800284c <HAL_TIM_PWM_Start+0x30>
 8002848:	2301      	movs	r3, #1
 800284a:	e000      	b.n	800284e <HAL_TIM_PWM_Start+0x32>
 800284c:	2300      	movs	r3, #0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d007      	beq.n	8002862 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002860:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f003 0307 	and.w	r3, r3, #7
 800286c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2b06      	cmp	r3, #6
 8002872:	d007      	beq.n	8002884 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f042 0201 	orr.w	r2, r2, #1
 8002882:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40010000 	.word	0x40010000
 8002894:	40010400 	.word	0x40010400

08002898 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	2b0c      	cmp	r3, #12
 80028a6:	d841      	bhi.n	800292c <HAL_TIM_PWM_Start_IT+0x94>
 80028a8:	a201      	add	r2, pc, #4	; (adr r2, 80028b0 <HAL_TIM_PWM_Start_IT+0x18>)
 80028aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ae:	bf00      	nop
 80028b0:	080028e5 	.word	0x080028e5
 80028b4:	0800292d 	.word	0x0800292d
 80028b8:	0800292d 	.word	0x0800292d
 80028bc:	0800292d 	.word	0x0800292d
 80028c0:	080028f7 	.word	0x080028f7
 80028c4:	0800292d 	.word	0x0800292d
 80028c8:	0800292d 	.word	0x0800292d
 80028cc:	0800292d 	.word	0x0800292d
 80028d0:	08002909 	.word	0x08002909
 80028d4:	0800292d 	.word	0x0800292d
 80028d8:	0800292d 	.word	0x0800292d
 80028dc:	0800292d 	.word	0x0800292d
 80028e0:	0800291b 	.word	0x0800291b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68da      	ldr	r2, [r3, #12]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f042 0202 	orr.w	r2, r2, #2
 80028f2:	60da      	str	r2, [r3, #12]
      break;
 80028f4:	e01b      	b.n	800292e <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68da      	ldr	r2, [r3, #12]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f042 0204 	orr.w	r2, r2, #4
 8002904:	60da      	str	r2, [r3, #12]
      break;
 8002906:	e012      	b.n	800292e <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68da      	ldr	r2, [r3, #12]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f042 0208 	orr.w	r2, r2, #8
 8002916:	60da      	str	r2, [r3, #12]
      break;
 8002918:	e009      	b.n	800292e <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68da      	ldr	r2, [r3, #12]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f042 0210 	orr.w	r2, r2, #16
 8002928:	60da      	str	r2, [r3, #12]
      break;
 800292a:	e000      	b.n	800292e <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 800292c:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2201      	movs	r2, #1
 8002934:	6839      	ldr	r1, [r7, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f000 fde0 	bl	80034fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a15      	ldr	r2, [pc, #84]	; (8002998 <HAL_TIM_PWM_Start_IT+0x100>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d004      	beq.n	8002950 <HAL_TIM_PWM_Start_IT+0xb8>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a14      	ldr	r2, [pc, #80]	; (800299c <HAL_TIM_PWM_Start_IT+0x104>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d101      	bne.n	8002954 <HAL_TIM_PWM_Start_IT+0xbc>
 8002950:	2301      	movs	r3, #1
 8002952:	e000      	b.n	8002956 <HAL_TIM_PWM_Start_IT+0xbe>
 8002954:	2300      	movs	r3, #0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d007      	beq.n	800296a <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002968:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f003 0307 	and.w	r3, r3, #7
 8002974:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2b06      	cmp	r3, #6
 800297a:	d007      	beq.n	800298c <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0201 	orr.w	r2, r2, #1
 800298a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	40010000 	.word	0x40010000
 800299c:	40010400 	.word	0x40010400

080029a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d122      	bne.n	80029fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d11b      	bne.n	80029fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f06f 0202 	mvn.w	r2, #2
 80029cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	f003 0303 	and.w	r3, r3, #3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d003      	beq.n	80029ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 fa82 	bl	8002eec <HAL_TIM_IC_CaptureCallback>
 80029e8:	e005      	b.n	80029f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 fa74 	bl	8002ed8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 fa85 	bl	8002f00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	f003 0304 	and.w	r3, r3, #4
 8002a06:	2b04      	cmp	r3, #4
 8002a08:	d122      	bne.n	8002a50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	2b04      	cmp	r3, #4
 8002a16:	d11b      	bne.n	8002a50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f06f 0204 	mvn.w	r2, #4
 8002a20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2202      	movs	r2, #2
 8002a26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d003      	beq.n	8002a3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 fa58 	bl	8002eec <HAL_TIM_IC_CaptureCallback>
 8002a3c:	e005      	b.n	8002a4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 fa4a 	bl	8002ed8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 fa5b 	bl	8002f00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	f003 0308 	and.w	r3, r3, #8
 8002a5a:	2b08      	cmp	r3, #8
 8002a5c:	d122      	bne.n	8002aa4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	f003 0308 	and.w	r3, r3, #8
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	d11b      	bne.n	8002aa4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f06f 0208 	mvn.w	r2, #8
 8002a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2204      	movs	r2, #4
 8002a7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	f003 0303 	and.w	r3, r3, #3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 fa2e 	bl	8002eec <HAL_TIM_IC_CaptureCallback>
 8002a90:	e005      	b.n	8002a9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 fa20 	bl	8002ed8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 fa31 	bl	8002f00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	f003 0310 	and.w	r3, r3, #16
 8002aae:	2b10      	cmp	r3, #16
 8002ab0:	d122      	bne.n	8002af8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	f003 0310 	and.w	r3, r3, #16
 8002abc:	2b10      	cmp	r3, #16
 8002abe:	d11b      	bne.n	8002af8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f06f 0210 	mvn.w	r2, #16
 8002ac8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2208      	movs	r2, #8
 8002ace:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	69db      	ldr	r3, [r3, #28]
 8002ad6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 fa04 	bl	8002eec <HAL_TIM_IC_CaptureCallback>
 8002ae4:	e005      	b.n	8002af2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f9f6 	bl	8002ed8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 fa07 	bl	8002f00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d10e      	bne.n	8002b24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d107      	bne.n	8002b24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f06f 0201 	mvn.w	r2, #1
 8002b1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f9d0 	bl	8002ec4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b2e:	2b80      	cmp	r3, #128	; 0x80
 8002b30:	d10e      	bne.n	8002b50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b3c:	2b80      	cmp	r3, #128	; 0x80
 8002b3e:	d107      	bne.n	8002b50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 fd82 	bl	8003654 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b5a:	2b40      	cmp	r3, #64	; 0x40
 8002b5c:	d10e      	bne.n	8002b7c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b68:	2b40      	cmp	r3, #64	; 0x40
 8002b6a:	d107      	bne.n	8002b7c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 f9cc 	bl	8002f14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	f003 0320 	and.w	r3, r3, #32
 8002b86:	2b20      	cmp	r3, #32
 8002b88:	d10e      	bne.n	8002ba8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	f003 0320 	and.w	r3, r3, #32
 8002b94:	2b20      	cmp	r3, #32
 8002b96:	d107      	bne.n	8002ba8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f06f 0220 	mvn.w	r2, #32
 8002ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 fd4c 	bl	8003640 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ba8:	bf00      	nop
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d101      	bne.n	8002bca <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	e0b4      	b.n	8002d34 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2202      	movs	r2, #2
 8002bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2b0c      	cmp	r3, #12
 8002bde:	f200 809f 	bhi.w	8002d20 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002be2:	a201      	add	r2, pc, #4	; (adr r2, 8002be8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be8:	08002c1d 	.word	0x08002c1d
 8002bec:	08002d21 	.word	0x08002d21
 8002bf0:	08002d21 	.word	0x08002d21
 8002bf4:	08002d21 	.word	0x08002d21
 8002bf8:	08002c5d 	.word	0x08002c5d
 8002bfc:	08002d21 	.word	0x08002d21
 8002c00:	08002d21 	.word	0x08002d21
 8002c04:	08002d21 	.word	0x08002d21
 8002c08:	08002c9f 	.word	0x08002c9f
 8002c0c:	08002d21 	.word	0x08002d21
 8002c10:	08002d21 	.word	0x08002d21
 8002c14:	08002d21 	.word	0x08002d21
 8002c18:	08002cdf 	.word	0x08002cdf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68b9      	ldr	r1, [r7, #8]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f000 fa20 	bl	8003068 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	699a      	ldr	r2, [r3, #24]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f042 0208 	orr.w	r2, r2, #8
 8002c36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	699a      	ldr	r2, [r3, #24]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f022 0204 	bic.w	r2, r2, #4
 8002c46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6999      	ldr	r1, [r3, #24]
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	691a      	ldr	r2, [r3, #16]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	430a      	orrs	r2, r1
 8002c58:	619a      	str	r2, [r3, #24]
      break;
 8002c5a:	e062      	b.n	8002d22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68b9      	ldr	r1, [r7, #8]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f000 fa70 	bl	8003148 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	699a      	ldr	r2, [r3, #24]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	699a      	ldr	r2, [r3, #24]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	6999      	ldr	r1, [r3, #24]
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	021a      	lsls	r2, r3, #8
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	619a      	str	r2, [r3, #24]
      break;
 8002c9c:	e041      	b.n	8002d22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68b9      	ldr	r1, [r7, #8]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f000 fac5 	bl	8003234 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	69da      	ldr	r2, [r3, #28]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f042 0208 	orr.w	r2, r2, #8
 8002cb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	69da      	ldr	r2, [r3, #28]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f022 0204 	bic.w	r2, r2, #4
 8002cc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	69d9      	ldr	r1, [r3, #28]
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	691a      	ldr	r2, [r3, #16]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	61da      	str	r2, [r3, #28]
      break;
 8002cdc:	e021      	b.n	8002d22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68b9      	ldr	r1, [r7, #8]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f000 fb19 	bl	800331c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	69da      	ldr	r2, [r3, #28]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	69da      	ldr	r2, [r3, #28]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	69d9      	ldr	r1, [r3, #28]
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	021a      	lsls	r2, r3, #8
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	61da      	str	r2, [r3, #28]
      break;
 8002d1e:	e000      	b.n	8002d22 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002d20:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3710      	adds	r7, #16
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d101      	bne.n	8002d54 <HAL_TIM_ConfigClockSource+0x18>
 8002d50:	2302      	movs	r3, #2
 8002d52:	e0b3      	b.n	8002ebc <HAL_TIM_ConfigClockSource+0x180>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2202      	movs	r2, #2
 8002d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d7a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68fa      	ldr	r2, [r7, #12]
 8002d82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d8c:	d03e      	beq.n	8002e0c <HAL_TIM_ConfigClockSource+0xd0>
 8002d8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d92:	f200 8087 	bhi.w	8002ea4 <HAL_TIM_ConfigClockSource+0x168>
 8002d96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d9a:	f000 8085 	beq.w	8002ea8 <HAL_TIM_ConfigClockSource+0x16c>
 8002d9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002da2:	d87f      	bhi.n	8002ea4 <HAL_TIM_ConfigClockSource+0x168>
 8002da4:	2b70      	cmp	r3, #112	; 0x70
 8002da6:	d01a      	beq.n	8002dde <HAL_TIM_ConfigClockSource+0xa2>
 8002da8:	2b70      	cmp	r3, #112	; 0x70
 8002daa:	d87b      	bhi.n	8002ea4 <HAL_TIM_ConfigClockSource+0x168>
 8002dac:	2b60      	cmp	r3, #96	; 0x60
 8002dae:	d050      	beq.n	8002e52 <HAL_TIM_ConfigClockSource+0x116>
 8002db0:	2b60      	cmp	r3, #96	; 0x60
 8002db2:	d877      	bhi.n	8002ea4 <HAL_TIM_ConfigClockSource+0x168>
 8002db4:	2b50      	cmp	r3, #80	; 0x50
 8002db6:	d03c      	beq.n	8002e32 <HAL_TIM_ConfigClockSource+0xf6>
 8002db8:	2b50      	cmp	r3, #80	; 0x50
 8002dba:	d873      	bhi.n	8002ea4 <HAL_TIM_ConfigClockSource+0x168>
 8002dbc:	2b40      	cmp	r3, #64	; 0x40
 8002dbe:	d058      	beq.n	8002e72 <HAL_TIM_ConfigClockSource+0x136>
 8002dc0:	2b40      	cmp	r3, #64	; 0x40
 8002dc2:	d86f      	bhi.n	8002ea4 <HAL_TIM_ConfigClockSource+0x168>
 8002dc4:	2b30      	cmp	r3, #48	; 0x30
 8002dc6:	d064      	beq.n	8002e92 <HAL_TIM_ConfigClockSource+0x156>
 8002dc8:	2b30      	cmp	r3, #48	; 0x30
 8002dca:	d86b      	bhi.n	8002ea4 <HAL_TIM_ConfigClockSource+0x168>
 8002dcc:	2b20      	cmp	r3, #32
 8002dce:	d060      	beq.n	8002e92 <HAL_TIM_ConfigClockSource+0x156>
 8002dd0:	2b20      	cmp	r3, #32
 8002dd2:	d867      	bhi.n	8002ea4 <HAL_TIM_ConfigClockSource+0x168>
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d05c      	beq.n	8002e92 <HAL_TIM_ConfigClockSource+0x156>
 8002dd8:	2b10      	cmp	r3, #16
 8002dda:	d05a      	beq.n	8002e92 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002ddc:	e062      	b.n	8002ea4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6818      	ldr	r0, [r3, #0]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	6899      	ldr	r1, [r3, #8]
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	f000 fb65 	bl	80034bc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e00:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	609a      	str	r2, [r3, #8]
      break;
 8002e0a:	e04e      	b.n	8002eaa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6818      	ldr	r0, [r3, #0]
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	6899      	ldr	r1, [r3, #8]
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	f000 fb4e 	bl	80034bc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689a      	ldr	r2, [r3, #8]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e2e:	609a      	str	r2, [r3, #8]
      break;
 8002e30:	e03b      	b.n	8002eaa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6818      	ldr	r0, [r3, #0]
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	6859      	ldr	r1, [r3, #4]
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	461a      	mov	r2, r3
 8002e40:	f000 fac2 	bl	80033c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2150      	movs	r1, #80	; 0x50
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f000 fb1b 	bl	8003486 <TIM_ITRx_SetConfig>
      break;
 8002e50:	e02b      	b.n	8002eaa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6818      	ldr	r0, [r3, #0]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	6859      	ldr	r1, [r3, #4]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	f000 fae1 	bl	8003426 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2160      	movs	r1, #96	; 0x60
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f000 fb0b 	bl	8003486 <TIM_ITRx_SetConfig>
      break;
 8002e70:	e01b      	b.n	8002eaa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6818      	ldr	r0, [r3, #0]
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	6859      	ldr	r1, [r3, #4]
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	f000 faa2 	bl	80033c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2140      	movs	r1, #64	; 0x40
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f000 fafb 	bl	8003486 <TIM_ITRx_SetConfig>
      break;
 8002e90:	e00b      	b.n	8002eaa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	4610      	mov	r0, r2
 8002e9e:	f000 faf2 	bl	8003486 <TIM_ITRx_SetConfig>
      break;
 8002ea2:	e002      	b.n	8002eaa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002ea4:	bf00      	nop
 8002ea6:	e000      	b.n	8002eaa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002ea8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2201      	movs	r2, #1
 8002eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ee0:	bf00      	nop
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ef4:	bf00      	nop
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a40      	ldr	r2, [pc, #256]	; (800303c <TIM_Base_SetConfig+0x114>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d013      	beq.n	8002f68 <TIM_Base_SetConfig+0x40>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f46:	d00f      	beq.n	8002f68 <TIM_Base_SetConfig+0x40>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a3d      	ldr	r2, [pc, #244]	; (8003040 <TIM_Base_SetConfig+0x118>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d00b      	beq.n	8002f68 <TIM_Base_SetConfig+0x40>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a3c      	ldr	r2, [pc, #240]	; (8003044 <TIM_Base_SetConfig+0x11c>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d007      	beq.n	8002f68 <TIM_Base_SetConfig+0x40>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a3b      	ldr	r2, [pc, #236]	; (8003048 <TIM_Base_SetConfig+0x120>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d003      	beq.n	8002f68 <TIM_Base_SetConfig+0x40>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a3a      	ldr	r2, [pc, #232]	; (800304c <TIM_Base_SetConfig+0x124>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d108      	bne.n	8002f7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	68fa      	ldr	r2, [r7, #12]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a2f      	ldr	r2, [pc, #188]	; (800303c <TIM_Base_SetConfig+0x114>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d02b      	beq.n	8002fda <TIM_Base_SetConfig+0xb2>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f88:	d027      	beq.n	8002fda <TIM_Base_SetConfig+0xb2>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a2c      	ldr	r2, [pc, #176]	; (8003040 <TIM_Base_SetConfig+0x118>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d023      	beq.n	8002fda <TIM_Base_SetConfig+0xb2>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a2b      	ldr	r2, [pc, #172]	; (8003044 <TIM_Base_SetConfig+0x11c>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d01f      	beq.n	8002fda <TIM_Base_SetConfig+0xb2>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a2a      	ldr	r2, [pc, #168]	; (8003048 <TIM_Base_SetConfig+0x120>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d01b      	beq.n	8002fda <TIM_Base_SetConfig+0xb2>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a29      	ldr	r2, [pc, #164]	; (800304c <TIM_Base_SetConfig+0x124>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d017      	beq.n	8002fda <TIM_Base_SetConfig+0xb2>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a28      	ldr	r2, [pc, #160]	; (8003050 <TIM_Base_SetConfig+0x128>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d013      	beq.n	8002fda <TIM_Base_SetConfig+0xb2>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a27      	ldr	r2, [pc, #156]	; (8003054 <TIM_Base_SetConfig+0x12c>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d00f      	beq.n	8002fda <TIM_Base_SetConfig+0xb2>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a26      	ldr	r2, [pc, #152]	; (8003058 <TIM_Base_SetConfig+0x130>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d00b      	beq.n	8002fda <TIM_Base_SetConfig+0xb2>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a25      	ldr	r2, [pc, #148]	; (800305c <TIM_Base_SetConfig+0x134>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d007      	beq.n	8002fda <TIM_Base_SetConfig+0xb2>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a24      	ldr	r2, [pc, #144]	; (8003060 <TIM_Base_SetConfig+0x138>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d003      	beq.n	8002fda <TIM_Base_SetConfig+0xb2>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a23      	ldr	r2, [pc, #140]	; (8003064 <TIM_Base_SetConfig+0x13c>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d108      	bne.n	8002fec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fe0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a0a      	ldr	r2, [pc, #40]	; (800303c <TIM_Base_SetConfig+0x114>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d003      	beq.n	8003020 <TIM_Base_SetConfig+0xf8>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a0c      	ldr	r2, [pc, #48]	; (800304c <TIM_Base_SetConfig+0x124>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d103      	bne.n	8003028 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	691a      	ldr	r2, [r3, #16]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	615a      	str	r2, [r3, #20]
}
 800302e:	bf00      	nop
 8003030:	3714      	adds	r7, #20
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	40010000 	.word	0x40010000
 8003040:	40000400 	.word	0x40000400
 8003044:	40000800 	.word	0x40000800
 8003048:	40000c00 	.word	0x40000c00
 800304c:	40010400 	.word	0x40010400
 8003050:	40014000 	.word	0x40014000
 8003054:	40014400 	.word	0x40014400
 8003058:	40014800 	.word	0x40014800
 800305c:	40001800 	.word	0x40001800
 8003060:	40001c00 	.word	0x40001c00
 8003064:	40002000 	.word	0x40002000

08003068 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003068:	b480      	push	{r7}
 800306a:	b087      	sub	sp, #28
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a1b      	ldr	r3, [r3, #32]
 8003076:	f023 0201 	bic.w	r2, r3, #1
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f023 0303 	bic.w	r3, r3, #3
 800309e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	f023 0302 	bic.w	r3, r3, #2
 80030b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a20      	ldr	r2, [pc, #128]	; (8003140 <TIM_OC1_SetConfig+0xd8>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d003      	beq.n	80030cc <TIM_OC1_SetConfig+0x64>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a1f      	ldr	r2, [pc, #124]	; (8003144 <TIM_OC1_SetConfig+0xdc>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d10c      	bne.n	80030e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	f023 0308 	bic.w	r3, r3, #8
 80030d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	4313      	orrs	r3, r2
 80030dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	f023 0304 	bic.w	r3, r3, #4
 80030e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a15      	ldr	r2, [pc, #84]	; (8003140 <TIM_OC1_SetConfig+0xd8>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d003      	beq.n	80030f6 <TIM_OC1_SetConfig+0x8e>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a14      	ldr	r2, [pc, #80]	; (8003144 <TIM_OC1_SetConfig+0xdc>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d111      	bne.n	800311a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003104:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	4313      	orrs	r3, r2
 800310e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	4313      	orrs	r3, r2
 8003118:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	621a      	str	r2, [r3, #32]
}
 8003134:	bf00      	nop
 8003136:	371c      	adds	r7, #28
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr
 8003140:	40010000 	.word	0x40010000
 8003144:	40010400 	.word	0x40010400

08003148 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003148:	b480      	push	{r7}
 800314a:	b087      	sub	sp, #28
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	f023 0210 	bic.w	r2, r3, #16
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800317e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	021b      	lsls	r3, r3, #8
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	4313      	orrs	r3, r2
 800318a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	f023 0320 	bic.w	r3, r3, #32
 8003192:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	011b      	lsls	r3, r3, #4
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	4313      	orrs	r3, r2
 800319e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a22      	ldr	r2, [pc, #136]	; (800322c <TIM_OC2_SetConfig+0xe4>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d003      	beq.n	80031b0 <TIM_OC2_SetConfig+0x68>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a21      	ldr	r2, [pc, #132]	; (8003230 <TIM_OC2_SetConfig+0xe8>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d10d      	bne.n	80031cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	011b      	lsls	r3, r3, #4
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a17      	ldr	r2, [pc, #92]	; (800322c <TIM_OC2_SetConfig+0xe4>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d003      	beq.n	80031dc <TIM_OC2_SetConfig+0x94>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a16      	ldr	r2, [pc, #88]	; (8003230 <TIM_OC2_SetConfig+0xe8>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d113      	bne.n	8003204 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	695b      	ldr	r3, [r3, #20]
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	699b      	ldr	r3, [r3, #24]
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	4313      	orrs	r3, r2
 8003202:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	697a      	ldr	r2, [r7, #20]
 800321c:	621a      	str	r2, [r3, #32]
}
 800321e:	bf00      	nop
 8003220:	371c      	adds	r7, #28
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	40010000 	.word	0x40010000
 8003230:	40010400 	.word	0x40010400

08003234 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003234:	b480      	push	{r7}
 8003236:	b087      	sub	sp, #28
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	69db      	ldr	r3, [r3, #28]
 800325a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f023 0303 	bic.w	r3, r3, #3
 800326a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	4313      	orrs	r3, r2
 8003274:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800327c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	021b      	lsls	r3, r3, #8
 8003284:	697a      	ldr	r2, [r7, #20]
 8003286:	4313      	orrs	r3, r2
 8003288:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a21      	ldr	r2, [pc, #132]	; (8003314 <TIM_OC3_SetConfig+0xe0>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d003      	beq.n	800329a <TIM_OC3_SetConfig+0x66>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a20      	ldr	r2, [pc, #128]	; (8003318 <TIM_OC3_SetConfig+0xe4>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d10d      	bne.n	80032b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	021b      	lsls	r3, r3, #8
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a16      	ldr	r2, [pc, #88]	; (8003314 <TIM_OC3_SetConfig+0xe0>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d003      	beq.n	80032c6 <TIM_OC3_SetConfig+0x92>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a15      	ldr	r2, [pc, #84]	; (8003318 <TIM_OC3_SetConfig+0xe4>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d113      	bne.n	80032ee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	011b      	lsls	r3, r3, #4
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	4313      	orrs	r3, r2
 80032e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	011b      	lsls	r3, r3, #4
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	685a      	ldr	r2, [r3, #4]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	621a      	str	r2, [r3, #32]
}
 8003308:	bf00      	nop
 800330a:	371c      	adds	r7, #28
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	40010000 	.word	0x40010000
 8003318:	40010400 	.word	0x40010400

0800331c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800331c:	b480      	push	{r7}
 800331e:	b087      	sub	sp, #28
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800334a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003352:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	021b      	lsls	r3, r3, #8
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	4313      	orrs	r3, r2
 800335e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003366:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	031b      	lsls	r3, r3, #12
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	4313      	orrs	r3, r2
 8003372:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a12      	ldr	r2, [pc, #72]	; (80033c0 <TIM_OC4_SetConfig+0xa4>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d003      	beq.n	8003384 <TIM_OC4_SetConfig+0x68>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a11      	ldr	r2, [pc, #68]	; (80033c4 <TIM_OC4_SetConfig+0xa8>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d109      	bne.n	8003398 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800338a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	019b      	lsls	r3, r3, #6
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	4313      	orrs	r3, r2
 8003396:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	621a      	str	r2, [r3, #32]
}
 80033b2:	bf00      	nop
 80033b4:	371c      	adds	r7, #28
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	40010000 	.word	0x40010000
 80033c4:	40010400 	.word	0x40010400

080033c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b087      	sub	sp, #28
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	f023 0201 	bic.w	r2, r3, #1
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	011b      	lsls	r3, r3, #4
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f023 030a 	bic.w	r3, r3, #10
 8003404:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	4313      	orrs	r3, r2
 800340c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	621a      	str	r2, [r3, #32]
}
 800341a:	bf00      	nop
 800341c:	371c      	adds	r7, #28
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003426:	b480      	push	{r7}
 8003428:	b087      	sub	sp, #28
 800342a:	af00      	add	r7, sp, #0
 800342c:	60f8      	str	r0, [r7, #12]
 800342e:	60b9      	str	r1, [r7, #8]
 8003430:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	f023 0210 	bic.w	r2, r3, #16
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003450:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	031b      	lsls	r3, r3, #12
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	4313      	orrs	r3, r2
 800345a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003462:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	011b      	lsls	r3, r3, #4
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	4313      	orrs	r3, r2
 800346c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	697a      	ldr	r2, [r7, #20]
 8003472:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	621a      	str	r2, [r3, #32]
}
 800347a:	bf00      	nop
 800347c:	371c      	adds	r7, #28
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr

08003486 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003486:	b480      	push	{r7}
 8003488:	b085      	sub	sp, #20
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
 800348e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800349c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800349e:	683a      	ldr	r2, [r7, #0]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	f043 0307 	orr.w	r3, r3, #7
 80034a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	609a      	str	r2, [r3, #8]
}
 80034b0:	bf00      	nop
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034bc:	b480      	push	{r7}
 80034be:	b087      	sub	sp, #28
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
 80034c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	021a      	lsls	r2, r3, #8
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	431a      	orrs	r2, r3
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	697a      	ldr	r2, [r7, #20]
 80034ee:	609a      	str	r2, [r3, #8]
}
 80034f0:	bf00      	nop
 80034f2:	371c      	adds	r7, #28
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b087      	sub	sp, #28
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	f003 031f 	and.w	r3, r3, #31
 800350e:	2201      	movs	r2, #1
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6a1a      	ldr	r2, [r3, #32]
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	43db      	mvns	r3, r3
 800351e:	401a      	ands	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6a1a      	ldr	r2, [r3, #32]
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	f003 031f 	and.w	r3, r3, #31
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	fa01 f303 	lsl.w	r3, r1, r3
 8003534:	431a      	orrs	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	621a      	str	r2, [r3, #32]
}
 800353a:	bf00      	nop
 800353c:	371c      	adds	r7, #28
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
	...

08003548 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003558:	2b01      	cmp	r3, #1
 800355a:	d101      	bne.n	8003560 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800355c:	2302      	movs	r3, #2
 800355e:	e05a      	b.n	8003616 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2202      	movs	r2, #2
 800356c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003586:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	4313      	orrs	r3, r2
 8003590:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a21      	ldr	r2, [pc, #132]	; (8003624 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d022      	beq.n	80035ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ac:	d01d      	beq.n	80035ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a1d      	ldr	r2, [pc, #116]	; (8003628 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d018      	beq.n	80035ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a1b      	ldr	r2, [pc, #108]	; (800362c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d013      	beq.n	80035ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a1a      	ldr	r2, [pc, #104]	; (8003630 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d00e      	beq.n	80035ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a18      	ldr	r2, [pc, #96]	; (8003634 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d009      	beq.n	80035ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a17      	ldr	r2, [pc, #92]	; (8003638 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d004      	beq.n	80035ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a15      	ldr	r2, [pc, #84]	; (800363c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d10c      	bne.n	8003604 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	68ba      	ldr	r2, [r7, #8]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68ba      	ldr	r2, [r7, #8]
 8003602:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3714      	adds	r7, #20
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	40010000 	.word	0x40010000
 8003628:	40000400 	.word	0x40000400
 800362c:	40000800 	.word	0x40000800
 8003630:	40000c00 	.word	0x40000c00
 8003634:	40010400 	.word	0x40010400
 8003638:	40014000 	.word	0x40014000
 800363c:	40001800 	.word	0x40001800

08003640 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d101      	bne.n	800367a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e03f      	b.n	80036fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d106      	bne.n	8003694 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f7fd fbfa 	bl	8000e88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2224      	movs	r2, #36	; 0x24
 8003698:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68da      	ldr	r2, [r3, #12]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f000 fba1 	bl	8003df4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	691a      	ldr	r2, [r3, #16]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	695a      	ldr	r2, [r3, #20]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68da      	ldr	r2, [r3, #12]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2220      	movs	r2, #32
 80036ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2220      	movs	r2, #32
 80036f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b088      	sub	sp, #32
 8003706:	af02      	add	r7, sp, #8
 8003708:	60f8      	str	r0, [r7, #12]
 800370a:	60b9      	str	r1, [r7, #8]
 800370c:	603b      	str	r3, [r7, #0]
 800370e:	4613      	mov	r3, r2
 8003710:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003712:	2300      	movs	r3, #0
 8003714:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b20      	cmp	r3, #32
 8003720:	f040 8083 	bne.w	800382a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d002      	beq.n	8003730 <HAL_UART_Transmit+0x2e>
 800372a:	88fb      	ldrh	r3, [r7, #6]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d101      	bne.n	8003734 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e07b      	b.n	800382c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800373a:	2b01      	cmp	r3, #1
 800373c:	d101      	bne.n	8003742 <HAL_UART_Transmit+0x40>
 800373e:	2302      	movs	r3, #2
 8003740:	e074      	b.n	800382c <HAL_UART_Transmit+0x12a>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2221      	movs	r2, #33	; 0x21
 8003754:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003758:	f7fd fd14 	bl	8001184 <HAL_GetTick>
 800375c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	88fa      	ldrh	r2, [r7, #6]
 8003762:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	88fa      	ldrh	r2, [r7, #6]
 8003768:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003772:	e042      	b.n	80037fa <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003778:	b29b      	uxth	r3, r3
 800377a:	3b01      	subs	r3, #1
 800377c:	b29a      	uxth	r2, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800378a:	d122      	bne.n	80037d2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	9300      	str	r3, [sp, #0]
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	2200      	movs	r2, #0
 8003794:	2180      	movs	r1, #128	; 0x80
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f000 f9c0 	bl	8003b1c <UART_WaitOnFlagUntilTimeout>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e042      	b.n	800382c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	881b      	ldrh	r3, [r3, #0]
 80037ae:	461a      	mov	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037b8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d103      	bne.n	80037ca <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	3302      	adds	r3, #2
 80037c6:	60bb      	str	r3, [r7, #8]
 80037c8:	e017      	b.n	80037fa <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	3301      	adds	r3, #1
 80037ce:	60bb      	str	r3, [r7, #8]
 80037d0:	e013      	b.n	80037fa <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	2200      	movs	r2, #0
 80037da:	2180      	movs	r1, #128	; 0x80
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f000 f99d 	bl	8003b1c <UART_WaitOnFlagUntilTimeout>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e01f      	b.n	800382c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	1c5a      	adds	r2, r3, #1
 80037f0:	60ba      	str	r2, [r7, #8]
 80037f2:	781a      	ldrb	r2, [r3, #0]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037fe:	b29b      	uxth	r3, r3
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1b7      	bne.n	8003774 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	9300      	str	r3, [sp, #0]
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	2200      	movs	r2, #0
 800380c:	2140      	movs	r1, #64	; 0x40
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f000 f984 	bl	8003b1c <UART_WaitOnFlagUntilTimeout>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e006      	b.n	800382c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2220      	movs	r2, #32
 8003822:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003826:	2300      	movs	r3, #0
 8003828:	e000      	b.n	800382c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800382a:	2302      	movs	r3, #2
  }
}
 800382c:	4618      	mov	r0, r3
 800382e:	3718      	adds	r7, #24
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	4613      	mov	r3, r2
 8003840:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b20      	cmp	r3, #32
 800384c:	d140      	bne.n	80038d0 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d002      	beq.n	800385a <HAL_UART_Receive_IT+0x26>
 8003854:	88fb      	ldrh	r3, [r7, #6]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e039      	b.n	80038d2 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003864:	2b01      	cmp	r3, #1
 8003866:	d101      	bne.n	800386c <HAL_UART_Receive_IT+0x38>
 8003868:	2302      	movs	r3, #2
 800386a:	e032      	b.n	80038d2 <HAL_UART_Receive_IT+0x9e>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	68ba      	ldr	r2, [r7, #8]
 8003878:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	88fa      	ldrh	r2, [r7, #6]
 800387e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	88fa      	ldrh	r2, [r7, #6]
 8003884:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2222      	movs	r2, #34	; 0x22
 8003890:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68da      	ldr	r2, [r3, #12]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038aa:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	695a      	ldr	r2, [r3, #20]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f042 0201 	orr.w	r2, r2, #1
 80038ba:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68da      	ldr	r2, [r3, #12]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f042 0220 	orr.w	r2, r2, #32
 80038ca:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80038cc:	2300      	movs	r3, #0
 80038ce:	e000      	b.n	80038d2 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80038d0:	2302      	movs	r3, #2
  }
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3714      	adds	r7, #20
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
	...

080038e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b088      	sub	sp, #32
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003900:	2300      	movs	r3, #0
 8003902:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003904:	2300      	movs	r3, #0
 8003906:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	f003 030f 	and.w	r3, r3, #15
 800390e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10d      	bne.n	8003932 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	f003 0320 	and.w	r3, r3, #32
 800391c:	2b00      	cmp	r3, #0
 800391e:	d008      	beq.n	8003932 <HAL_UART_IRQHandler+0x52>
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	f003 0320 	and.w	r3, r3, #32
 8003926:	2b00      	cmp	r3, #0
 8003928:	d003      	beq.n	8003932 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f9e0 	bl	8003cf0 <UART_Receive_IT>
      return;
 8003930:	e0d0      	b.n	8003ad4 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	2b00      	cmp	r3, #0
 8003936:	f000 80b0 	beq.w	8003a9a <HAL_UART_IRQHandler+0x1ba>
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	2b00      	cmp	r3, #0
 8003942:	d105      	bne.n	8003950 <HAL_UART_IRQHandler+0x70>
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800394a:	2b00      	cmp	r3, #0
 800394c:	f000 80a5 	beq.w	8003a9a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00a      	beq.n	8003970 <HAL_UART_IRQHandler+0x90>
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003960:	2b00      	cmp	r3, #0
 8003962:	d005      	beq.n	8003970 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003968:	f043 0201 	orr.w	r2, r3, #1
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	f003 0304 	and.w	r3, r3, #4
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00a      	beq.n	8003990 <HAL_UART_IRQHandler+0xb0>
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	f003 0301 	and.w	r3, r3, #1
 8003980:	2b00      	cmp	r3, #0
 8003982:	d005      	beq.n	8003990 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003988:	f043 0202 	orr.w	r2, r3, #2
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00a      	beq.n	80039b0 <HAL_UART_IRQHandler+0xd0>
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	f003 0301 	and.w	r3, r3, #1
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d005      	beq.n	80039b0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a8:	f043 0204 	orr.w	r2, r3, #4
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	f003 0308 	and.w	r3, r3, #8
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00f      	beq.n	80039da <HAL_UART_IRQHandler+0xfa>
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	f003 0320 	and.w	r3, r3, #32
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d104      	bne.n	80039ce <HAL_UART_IRQHandler+0xee>
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d005      	beq.n	80039da <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d2:	f043 0208 	orr.w	r2, r3, #8
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d077      	beq.n	8003ad2 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	f003 0320 	and.w	r3, r3, #32
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d007      	beq.n	80039fc <HAL_UART_IRQHandler+0x11c>
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	f003 0320 	and.w	r3, r3, #32
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d002      	beq.n	80039fc <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f97a 	bl	8003cf0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a06:	2b40      	cmp	r3, #64	; 0x40
 8003a08:	bf0c      	ite	eq
 8003a0a:	2301      	moveq	r3, #1
 8003a0c:	2300      	movne	r3, #0
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a16:	f003 0308 	and.w	r3, r3, #8
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d102      	bne.n	8003a24 <HAL_UART_IRQHandler+0x144>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d031      	beq.n	8003a88 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 f8c3 	bl	8003bb0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	695b      	ldr	r3, [r3, #20]
 8003a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a34:	2b40      	cmp	r3, #64	; 0x40
 8003a36:	d123      	bne.n	8003a80 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	695a      	ldr	r2, [r3, #20]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a46:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d013      	beq.n	8003a78 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a54:	4a21      	ldr	r2, [pc, #132]	; (8003adc <HAL_UART_IRQHandler+0x1fc>)
 8003a56:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7fd fdb5 	bl	80015cc <HAL_DMA_Abort_IT>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d016      	beq.n	8003a96 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a72:	4610      	mov	r0, r2
 8003a74:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a76:	e00e      	b.n	8003a96 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 f845 	bl	8003b08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a7e:	e00a      	b.n	8003a96 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 f841 	bl	8003b08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a86:	e006      	b.n	8003a96 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 f83d 	bl	8003b08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003a94:	e01d      	b.n	8003ad2 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a96:	bf00      	nop
    return;
 8003a98:	e01b      	b.n	8003ad2 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d008      	beq.n	8003ab6 <HAL_UART_IRQHandler+0x1d6>
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d003      	beq.n	8003ab6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 f8b0 	bl	8003c14 <UART_Transmit_IT>
    return;
 8003ab4:	e00e      	b.n	8003ad4 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d009      	beq.n	8003ad4 <HAL_UART_IRQHandler+0x1f4>
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d004      	beq.n	8003ad4 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f8f8 	bl	8003cc0 <UART_EndTransmit_IT>
    return;
 8003ad0:	e000      	b.n	8003ad4 <HAL_UART_IRQHandler+0x1f4>
    return;
 8003ad2:	bf00      	nop
  }
}
 8003ad4:	3720      	adds	r7, #32
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	08003bed 	.word	0x08003bed

08003ae0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	603b      	str	r3, [r7, #0]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b2c:	e02c      	b.n	8003b88 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b34:	d028      	beq.n	8003b88 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d007      	beq.n	8003b4c <UART_WaitOnFlagUntilTimeout+0x30>
 8003b3c:	f7fd fb22 	bl	8001184 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d21d      	bcs.n	8003b88 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68da      	ldr	r2, [r3, #12]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b5a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	695a      	ldr	r2, [r3, #20]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f022 0201 	bic.w	r2, r2, #1
 8003b6a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2220      	movs	r2, #32
 8003b70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2220      	movs	r2, #32
 8003b78:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e00f      	b.n	8003ba8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	4013      	ands	r3, r2
 8003b92:	68ba      	ldr	r2, [r7, #8]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	bf0c      	ite	eq
 8003b98:	2301      	moveq	r3, #1
 8003b9a:	2300      	movne	r3, #0
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	79fb      	ldrb	r3, [r7, #7]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d0c3      	beq.n	8003b2e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68da      	ldr	r2, [r3, #12]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003bc6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	695a      	ldr	r2, [r3, #20]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f022 0201 	bic.w	r2, r2, #1
 8003bd6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2220      	movs	r2, #32
 8003bdc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f7ff ff7e 	bl	8003b08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c0c:	bf00      	nop
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	2b21      	cmp	r3, #33	; 0x21
 8003c26:	d144      	bne.n	8003cb2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c30:	d11a      	bne.n	8003c68 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a1b      	ldr	r3, [r3, #32]
 8003c36:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	881b      	ldrh	r3, [r3, #0]
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c46:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d105      	bne.n	8003c5c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a1b      	ldr	r3, [r3, #32]
 8003c54:	1c9a      	adds	r2, r3, #2
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	621a      	str	r2, [r3, #32]
 8003c5a:	e00e      	b.n	8003c7a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	1c5a      	adds	r2, r3, #1
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	621a      	str	r2, [r3, #32]
 8003c66:	e008      	b.n	8003c7a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	1c59      	adds	r1, r3, #1
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	6211      	str	r1, [r2, #32]
 8003c72:	781a      	ldrb	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	3b01      	subs	r3, #1
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	4619      	mov	r1, r3
 8003c88:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10f      	bne.n	8003cae <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68da      	ldr	r2, [r3, #12]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c9c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68da      	ldr	r2, [r3, #12]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	e000      	b.n	8003cb4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003cb2:	2302      	movs	r3, #2
  }
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3714      	adds	r7, #20
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68da      	ldr	r2, [r3, #12]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cd6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2220      	movs	r2, #32
 8003cdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f7ff fefd 	bl	8003ae0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	2b22      	cmp	r3, #34	; 0x22
 8003d02:	d171      	bne.n	8003de8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d0c:	d123      	bne.n	8003d56 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d12:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d10e      	bne.n	8003d3a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d32:	1c9a      	adds	r2, r3, #2
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	629a      	str	r2, [r3, #40]	; 0x28
 8003d38:	e029      	b.n	8003d8e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4e:	1c5a      	adds	r2, r3, #1
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	629a      	str	r2, [r3, #40]	; 0x28
 8003d54:	e01b      	b.n	8003d8e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10a      	bne.n	8003d74 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	6858      	ldr	r0, [r3, #4]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d68:	1c59      	adds	r1, r3, #1
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	6291      	str	r1, [r2, #40]	; 0x28
 8003d6e:	b2c2      	uxtb	r2, r0
 8003d70:	701a      	strb	r2, [r3, #0]
 8003d72:	e00c      	b.n	8003d8e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	b2da      	uxtb	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d80:	1c58      	adds	r0, r3, #1
 8003d82:	6879      	ldr	r1, [r7, #4]
 8003d84:	6288      	str	r0, [r1, #40]	; 0x28
 8003d86:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d8a:	b2d2      	uxtb	r2, r2
 8003d8c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	3b01      	subs	r3, #1
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d120      	bne.n	8003de4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68da      	ldr	r2, [r3, #12]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 0220 	bic.w	r2, r2, #32
 8003db0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68da      	ldr	r2, [r3, #12]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dc0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	695a      	ldr	r2, [r3, #20]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f022 0201 	bic.w	r2, r2, #1
 8003dd0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2220      	movs	r2, #32
 8003dd6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7ff fe8a 	bl	8003af4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003de0:	2300      	movs	r3, #0
 8003de2:	e002      	b.n	8003dea <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003de4:	2300      	movs	r3, #0
 8003de6:	e000      	b.n	8003dea <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003de8:	2302      	movs	r3, #2
  }
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
	...

08003df4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003df8:	b0bd      	sub	sp, #244	; 0xf4
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e10:	68d9      	ldr	r1, [r3, #12]
 8003e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	ea40 0301 	orr.w	r3, r0, r1
 8003e1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e22:	689a      	ldr	r2, [r3, #8]
 8003e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	431a      	orrs	r2, r3
 8003e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e38:	69db      	ldr	r3, [r3, #28]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8003e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003e4c:	f021 010c 	bic.w	r1, r1, #12
 8003e50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003e5a:	430b      	orrs	r3, r1
 8003e5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e6e:	6999      	ldr	r1, [r3, #24]
 8003e70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	ea40 0301 	orr.w	r3, r0, r1
 8003e7a:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e80:	69db      	ldr	r3, [r3, #28]
 8003e82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e86:	f040 81a5 	bne.w	80041d4 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	4bcd      	ldr	r3, [pc, #820]	; (80041c8 <UART_SetConfig+0x3d4>)
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d006      	beq.n	8003ea4 <UART_SetConfig+0xb0>
 8003e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	4bcb      	ldr	r3, [pc, #812]	; (80041cc <UART_SetConfig+0x3d8>)
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	f040 80cb 	bne.w	800403a <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ea4:	f7fe fc2c 	bl	8002700 <HAL_RCC_GetPCLK2Freq>
 8003ea8:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003eac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003eb0:	461c      	mov	r4, r3
 8003eb2:	f04f 0500 	mov.w	r5, #0
 8003eb6:	4622      	mov	r2, r4
 8003eb8:	462b      	mov	r3, r5
 8003eba:	1891      	adds	r1, r2, r2
 8003ebc:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8003ec0:	415b      	adcs	r3, r3
 8003ec2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003ec6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003eca:	1912      	adds	r2, r2, r4
 8003ecc:	eb45 0303 	adc.w	r3, r5, r3
 8003ed0:	f04f 0000 	mov.w	r0, #0
 8003ed4:	f04f 0100 	mov.w	r1, #0
 8003ed8:	00d9      	lsls	r1, r3, #3
 8003eda:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ede:	00d0      	lsls	r0, r2, #3
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	1911      	adds	r1, r2, r4
 8003ee6:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8003eea:	416b      	adcs	r3, r5
 8003eec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	f04f 0300 	mov.w	r3, #0
 8003efc:	1891      	adds	r1, r2, r2
 8003efe:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8003f02:	415b      	adcs	r3, r3
 8003f04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f08:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8003f0c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8003f10:	f7fc f95a 	bl	80001c8 <__aeabi_uldivmod>
 8003f14:	4602      	mov	r2, r0
 8003f16:	460b      	mov	r3, r1
 8003f18:	4bad      	ldr	r3, [pc, #692]	; (80041d0 <UART_SetConfig+0x3dc>)
 8003f1a:	fba3 2302 	umull	r2, r3, r3, r2
 8003f1e:	095b      	lsrs	r3, r3, #5
 8003f20:	011e      	lsls	r6, r3, #4
 8003f22:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003f26:	461c      	mov	r4, r3
 8003f28:	f04f 0500 	mov.w	r5, #0
 8003f2c:	4622      	mov	r2, r4
 8003f2e:	462b      	mov	r3, r5
 8003f30:	1891      	adds	r1, r2, r2
 8003f32:	67b9      	str	r1, [r7, #120]	; 0x78
 8003f34:	415b      	adcs	r3, r3
 8003f36:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003f38:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003f3c:	1912      	adds	r2, r2, r4
 8003f3e:	eb45 0303 	adc.w	r3, r5, r3
 8003f42:	f04f 0000 	mov.w	r0, #0
 8003f46:	f04f 0100 	mov.w	r1, #0
 8003f4a:	00d9      	lsls	r1, r3, #3
 8003f4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f50:	00d0      	lsls	r0, r2, #3
 8003f52:	4602      	mov	r2, r0
 8003f54:	460b      	mov	r3, r1
 8003f56:	1911      	adds	r1, r2, r4
 8003f58:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8003f5c:	416b      	adcs	r3, r5
 8003f5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	461a      	mov	r2, r3
 8003f6a:	f04f 0300 	mov.w	r3, #0
 8003f6e:	1891      	adds	r1, r2, r2
 8003f70:	6739      	str	r1, [r7, #112]	; 0x70
 8003f72:	415b      	adcs	r3, r3
 8003f74:	677b      	str	r3, [r7, #116]	; 0x74
 8003f76:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003f7a:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8003f7e:	f7fc f923 	bl	80001c8 <__aeabi_uldivmod>
 8003f82:	4602      	mov	r2, r0
 8003f84:	460b      	mov	r3, r1
 8003f86:	4b92      	ldr	r3, [pc, #584]	; (80041d0 <UART_SetConfig+0x3dc>)
 8003f88:	fba3 1302 	umull	r1, r3, r3, r2
 8003f8c:	095b      	lsrs	r3, r3, #5
 8003f8e:	2164      	movs	r1, #100	; 0x64
 8003f90:	fb01 f303 	mul.w	r3, r1, r3
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	00db      	lsls	r3, r3, #3
 8003f98:	3332      	adds	r3, #50	; 0x32
 8003f9a:	4a8d      	ldr	r2, [pc, #564]	; (80041d0 <UART_SetConfig+0x3dc>)
 8003f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa0:	095b      	lsrs	r3, r3, #5
 8003fa2:	005b      	lsls	r3, r3, #1
 8003fa4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003fa8:	441e      	add	r6, r3
 8003faa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f04f 0100 	mov.w	r1, #0
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	1894      	adds	r4, r2, r2
 8003fba:	66bc      	str	r4, [r7, #104]	; 0x68
 8003fbc:	415b      	adcs	r3, r3
 8003fbe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fc0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003fc4:	1812      	adds	r2, r2, r0
 8003fc6:	eb41 0303 	adc.w	r3, r1, r3
 8003fca:	f04f 0400 	mov.w	r4, #0
 8003fce:	f04f 0500 	mov.w	r5, #0
 8003fd2:	00dd      	lsls	r5, r3, #3
 8003fd4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003fd8:	00d4      	lsls	r4, r2, #3
 8003fda:	4622      	mov	r2, r4
 8003fdc:	462b      	mov	r3, r5
 8003fde:	1814      	adds	r4, r2, r0
 8003fe0:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8003fe4:	414b      	adcs	r3, r1
 8003fe6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	f04f 0300 	mov.w	r3, #0
 8003ff6:	1891      	adds	r1, r2, r2
 8003ff8:	6639      	str	r1, [r7, #96]	; 0x60
 8003ffa:	415b      	adcs	r3, r3
 8003ffc:	667b      	str	r3, [r7, #100]	; 0x64
 8003ffe:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004002:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004006:	f7fc f8df 	bl	80001c8 <__aeabi_uldivmod>
 800400a:	4602      	mov	r2, r0
 800400c:	460b      	mov	r3, r1
 800400e:	4b70      	ldr	r3, [pc, #448]	; (80041d0 <UART_SetConfig+0x3dc>)
 8004010:	fba3 1302 	umull	r1, r3, r3, r2
 8004014:	095b      	lsrs	r3, r3, #5
 8004016:	2164      	movs	r1, #100	; 0x64
 8004018:	fb01 f303 	mul.w	r3, r1, r3
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	3332      	adds	r3, #50	; 0x32
 8004022:	4a6b      	ldr	r2, [pc, #428]	; (80041d0 <UART_SetConfig+0x3dc>)
 8004024:	fba2 2303 	umull	r2, r3, r2, r3
 8004028:	095b      	lsrs	r3, r3, #5
 800402a:	f003 0207 	and.w	r2, r3, #7
 800402e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4432      	add	r2, r6
 8004036:	609a      	str	r2, [r3, #8]
 8004038:	e26d      	b.n	8004516 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800403a:	f7fe fb4d 	bl	80026d8 <HAL_RCC_GetPCLK1Freq>
 800403e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004042:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004046:	461c      	mov	r4, r3
 8004048:	f04f 0500 	mov.w	r5, #0
 800404c:	4622      	mov	r2, r4
 800404e:	462b      	mov	r3, r5
 8004050:	1891      	adds	r1, r2, r2
 8004052:	65b9      	str	r1, [r7, #88]	; 0x58
 8004054:	415b      	adcs	r3, r3
 8004056:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004058:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800405c:	1912      	adds	r2, r2, r4
 800405e:	eb45 0303 	adc.w	r3, r5, r3
 8004062:	f04f 0000 	mov.w	r0, #0
 8004066:	f04f 0100 	mov.w	r1, #0
 800406a:	00d9      	lsls	r1, r3, #3
 800406c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004070:	00d0      	lsls	r0, r2, #3
 8004072:	4602      	mov	r2, r0
 8004074:	460b      	mov	r3, r1
 8004076:	1911      	adds	r1, r2, r4
 8004078:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800407c:	416b      	adcs	r3, r5
 800407e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	461a      	mov	r2, r3
 800408a:	f04f 0300 	mov.w	r3, #0
 800408e:	1891      	adds	r1, r2, r2
 8004090:	6539      	str	r1, [r7, #80]	; 0x50
 8004092:	415b      	adcs	r3, r3
 8004094:	657b      	str	r3, [r7, #84]	; 0x54
 8004096:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800409a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800409e:	f7fc f893 	bl	80001c8 <__aeabi_uldivmod>
 80040a2:	4602      	mov	r2, r0
 80040a4:	460b      	mov	r3, r1
 80040a6:	4b4a      	ldr	r3, [pc, #296]	; (80041d0 <UART_SetConfig+0x3dc>)
 80040a8:	fba3 2302 	umull	r2, r3, r3, r2
 80040ac:	095b      	lsrs	r3, r3, #5
 80040ae:	011e      	lsls	r6, r3, #4
 80040b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80040b4:	461c      	mov	r4, r3
 80040b6:	f04f 0500 	mov.w	r5, #0
 80040ba:	4622      	mov	r2, r4
 80040bc:	462b      	mov	r3, r5
 80040be:	1891      	adds	r1, r2, r2
 80040c0:	64b9      	str	r1, [r7, #72]	; 0x48
 80040c2:	415b      	adcs	r3, r3
 80040c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040c6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80040ca:	1912      	adds	r2, r2, r4
 80040cc:	eb45 0303 	adc.w	r3, r5, r3
 80040d0:	f04f 0000 	mov.w	r0, #0
 80040d4:	f04f 0100 	mov.w	r1, #0
 80040d8:	00d9      	lsls	r1, r3, #3
 80040da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040de:	00d0      	lsls	r0, r2, #3
 80040e0:	4602      	mov	r2, r0
 80040e2:	460b      	mov	r3, r1
 80040e4:	1911      	adds	r1, r2, r4
 80040e6:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80040ea:	416b      	adcs	r3, r5
 80040ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80040f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	461a      	mov	r2, r3
 80040f8:	f04f 0300 	mov.w	r3, #0
 80040fc:	1891      	adds	r1, r2, r2
 80040fe:	6439      	str	r1, [r7, #64]	; 0x40
 8004100:	415b      	adcs	r3, r3
 8004102:	647b      	str	r3, [r7, #68]	; 0x44
 8004104:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004108:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800410c:	f7fc f85c 	bl	80001c8 <__aeabi_uldivmod>
 8004110:	4602      	mov	r2, r0
 8004112:	460b      	mov	r3, r1
 8004114:	4b2e      	ldr	r3, [pc, #184]	; (80041d0 <UART_SetConfig+0x3dc>)
 8004116:	fba3 1302 	umull	r1, r3, r3, r2
 800411a:	095b      	lsrs	r3, r3, #5
 800411c:	2164      	movs	r1, #100	; 0x64
 800411e:	fb01 f303 	mul.w	r3, r1, r3
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	00db      	lsls	r3, r3, #3
 8004126:	3332      	adds	r3, #50	; 0x32
 8004128:	4a29      	ldr	r2, [pc, #164]	; (80041d0 <UART_SetConfig+0x3dc>)
 800412a:	fba2 2303 	umull	r2, r3, r2, r3
 800412e:	095b      	lsrs	r3, r3, #5
 8004130:	005b      	lsls	r3, r3, #1
 8004132:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004136:	441e      	add	r6, r3
 8004138:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800413c:	4618      	mov	r0, r3
 800413e:	f04f 0100 	mov.w	r1, #0
 8004142:	4602      	mov	r2, r0
 8004144:	460b      	mov	r3, r1
 8004146:	1894      	adds	r4, r2, r2
 8004148:	63bc      	str	r4, [r7, #56]	; 0x38
 800414a:	415b      	adcs	r3, r3
 800414c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800414e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004152:	1812      	adds	r2, r2, r0
 8004154:	eb41 0303 	adc.w	r3, r1, r3
 8004158:	f04f 0400 	mov.w	r4, #0
 800415c:	f04f 0500 	mov.w	r5, #0
 8004160:	00dd      	lsls	r5, r3, #3
 8004162:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004166:	00d4      	lsls	r4, r2, #3
 8004168:	4622      	mov	r2, r4
 800416a:	462b      	mov	r3, r5
 800416c:	1814      	adds	r4, r2, r0
 800416e:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8004172:	414b      	adcs	r3, r1
 8004174:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	461a      	mov	r2, r3
 8004180:	f04f 0300 	mov.w	r3, #0
 8004184:	1891      	adds	r1, r2, r2
 8004186:	6339      	str	r1, [r7, #48]	; 0x30
 8004188:	415b      	adcs	r3, r3
 800418a:	637b      	str	r3, [r7, #52]	; 0x34
 800418c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004190:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004194:	f7fc f818 	bl	80001c8 <__aeabi_uldivmod>
 8004198:	4602      	mov	r2, r0
 800419a:	460b      	mov	r3, r1
 800419c:	4b0c      	ldr	r3, [pc, #48]	; (80041d0 <UART_SetConfig+0x3dc>)
 800419e:	fba3 1302 	umull	r1, r3, r3, r2
 80041a2:	095b      	lsrs	r3, r3, #5
 80041a4:	2164      	movs	r1, #100	; 0x64
 80041a6:	fb01 f303 	mul.w	r3, r1, r3
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	00db      	lsls	r3, r3, #3
 80041ae:	3332      	adds	r3, #50	; 0x32
 80041b0:	4a07      	ldr	r2, [pc, #28]	; (80041d0 <UART_SetConfig+0x3dc>)
 80041b2:	fba2 2303 	umull	r2, r3, r2, r3
 80041b6:	095b      	lsrs	r3, r3, #5
 80041b8:	f003 0207 	and.w	r2, r3, #7
 80041bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4432      	add	r2, r6
 80041c4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80041c6:	e1a6      	b.n	8004516 <UART_SetConfig+0x722>
 80041c8:	40011000 	.word	0x40011000
 80041cc:	40011400 	.word	0x40011400
 80041d0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	4bd1      	ldr	r3, [pc, #836]	; (8004520 <UART_SetConfig+0x72c>)
 80041dc:	429a      	cmp	r2, r3
 80041de:	d006      	beq.n	80041ee <UART_SetConfig+0x3fa>
 80041e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	4bcf      	ldr	r3, [pc, #828]	; (8004524 <UART_SetConfig+0x730>)
 80041e8:	429a      	cmp	r2, r3
 80041ea:	f040 80ca 	bne.w	8004382 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 80041ee:	f7fe fa87 	bl	8002700 <HAL_RCC_GetPCLK2Freq>
 80041f2:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80041fa:	461c      	mov	r4, r3
 80041fc:	f04f 0500 	mov.w	r5, #0
 8004200:	4622      	mov	r2, r4
 8004202:	462b      	mov	r3, r5
 8004204:	1891      	adds	r1, r2, r2
 8004206:	62b9      	str	r1, [r7, #40]	; 0x28
 8004208:	415b      	adcs	r3, r3
 800420a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800420c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004210:	1912      	adds	r2, r2, r4
 8004212:	eb45 0303 	adc.w	r3, r5, r3
 8004216:	f04f 0000 	mov.w	r0, #0
 800421a:	f04f 0100 	mov.w	r1, #0
 800421e:	00d9      	lsls	r1, r3, #3
 8004220:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004224:	00d0      	lsls	r0, r2, #3
 8004226:	4602      	mov	r2, r0
 8004228:	460b      	mov	r3, r1
 800422a:	eb12 0a04 	adds.w	sl, r2, r4
 800422e:	eb43 0b05 	adc.w	fp, r3, r5
 8004232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	4618      	mov	r0, r3
 800423a:	f04f 0100 	mov.w	r1, #0
 800423e:	f04f 0200 	mov.w	r2, #0
 8004242:	f04f 0300 	mov.w	r3, #0
 8004246:	008b      	lsls	r3, r1, #2
 8004248:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800424c:	0082      	lsls	r2, r0, #2
 800424e:	4650      	mov	r0, sl
 8004250:	4659      	mov	r1, fp
 8004252:	f7fb ffb9 	bl	80001c8 <__aeabi_uldivmod>
 8004256:	4602      	mov	r2, r0
 8004258:	460b      	mov	r3, r1
 800425a:	4bb3      	ldr	r3, [pc, #716]	; (8004528 <UART_SetConfig+0x734>)
 800425c:	fba3 2302 	umull	r2, r3, r3, r2
 8004260:	095b      	lsrs	r3, r3, #5
 8004262:	011e      	lsls	r6, r3, #4
 8004264:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004268:	4618      	mov	r0, r3
 800426a:	f04f 0100 	mov.w	r1, #0
 800426e:	4602      	mov	r2, r0
 8004270:	460b      	mov	r3, r1
 8004272:	1894      	adds	r4, r2, r2
 8004274:	623c      	str	r4, [r7, #32]
 8004276:	415b      	adcs	r3, r3
 8004278:	627b      	str	r3, [r7, #36]	; 0x24
 800427a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800427e:	1812      	adds	r2, r2, r0
 8004280:	eb41 0303 	adc.w	r3, r1, r3
 8004284:	f04f 0400 	mov.w	r4, #0
 8004288:	f04f 0500 	mov.w	r5, #0
 800428c:	00dd      	lsls	r5, r3, #3
 800428e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004292:	00d4      	lsls	r4, r2, #3
 8004294:	4622      	mov	r2, r4
 8004296:	462b      	mov	r3, r5
 8004298:	1814      	adds	r4, r2, r0
 800429a:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800429e:	414b      	adcs	r3, r1
 80042a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80042a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f04f 0100 	mov.w	r1, #0
 80042b0:	f04f 0200 	mov.w	r2, #0
 80042b4:	f04f 0300 	mov.w	r3, #0
 80042b8:	008b      	lsls	r3, r1, #2
 80042ba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80042be:	0082      	lsls	r2, r0, #2
 80042c0:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80042c4:	f7fb ff80 	bl	80001c8 <__aeabi_uldivmod>
 80042c8:	4602      	mov	r2, r0
 80042ca:	460b      	mov	r3, r1
 80042cc:	4b96      	ldr	r3, [pc, #600]	; (8004528 <UART_SetConfig+0x734>)
 80042ce:	fba3 1302 	umull	r1, r3, r3, r2
 80042d2:	095b      	lsrs	r3, r3, #5
 80042d4:	2164      	movs	r1, #100	; 0x64
 80042d6:	fb01 f303 	mul.w	r3, r1, r3
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	011b      	lsls	r3, r3, #4
 80042de:	3332      	adds	r3, #50	; 0x32
 80042e0:	4a91      	ldr	r2, [pc, #580]	; (8004528 <UART_SetConfig+0x734>)
 80042e2:	fba2 2303 	umull	r2, r3, r2, r3
 80042e6:	095b      	lsrs	r3, r3, #5
 80042e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042ec:	441e      	add	r6, r3
 80042ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80042f2:	4618      	mov	r0, r3
 80042f4:	f04f 0100 	mov.w	r1, #0
 80042f8:	4602      	mov	r2, r0
 80042fa:	460b      	mov	r3, r1
 80042fc:	1894      	adds	r4, r2, r2
 80042fe:	61bc      	str	r4, [r7, #24]
 8004300:	415b      	adcs	r3, r3
 8004302:	61fb      	str	r3, [r7, #28]
 8004304:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004308:	1812      	adds	r2, r2, r0
 800430a:	eb41 0303 	adc.w	r3, r1, r3
 800430e:	f04f 0400 	mov.w	r4, #0
 8004312:	f04f 0500 	mov.w	r5, #0
 8004316:	00dd      	lsls	r5, r3, #3
 8004318:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800431c:	00d4      	lsls	r4, r2, #3
 800431e:	4622      	mov	r2, r4
 8004320:	462b      	mov	r3, r5
 8004322:	1814      	adds	r4, r2, r0
 8004324:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8004328:	414b      	adcs	r3, r1
 800432a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800432e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	4618      	mov	r0, r3
 8004336:	f04f 0100 	mov.w	r1, #0
 800433a:	f04f 0200 	mov.w	r2, #0
 800433e:	f04f 0300 	mov.w	r3, #0
 8004342:	008b      	lsls	r3, r1, #2
 8004344:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004348:	0082      	lsls	r2, r0, #2
 800434a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800434e:	f7fb ff3b 	bl	80001c8 <__aeabi_uldivmod>
 8004352:	4602      	mov	r2, r0
 8004354:	460b      	mov	r3, r1
 8004356:	4b74      	ldr	r3, [pc, #464]	; (8004528 <UART_SetConfig+0x734>)
 8004358:	fba3 1302 	umull	r1, r3, r3, r2
 800435c:	095b      	lsrs	r3, r3, #5
 800435e:	2164      	movs	r1, #100	; 0x64
 8004360:	fb01 f303 	mul.w	r3, r1, r3
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	011b      	lsls	r3, r3, #4
 8004368:	3332      	adds	r3, #50	; 0x32
 800436a:	4a6f      	ldr	r2, [pc, #444]	; (8004528 <UART_SetConfig+0x734>)
 800436c:	fba2 2303 	umull	r2, r3, r2, r3
 8004370:	095b      	lsrs	r3, r3, #5
 8004372:	f003 020f 	and.w	r2, r3, #15
 8004376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4432      	add	r2, r6
 800437e:	609a      	str	r2, [r3, #8]
 8004380:	e0c9      	b.n	8004516 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004382:	f7fe f9a9 	bl	80026d8 <HAL_RCC_GetPCLK1Freq>
 8004386:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800438a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800438e:	461c      	mov	r4, r3
 8004390:	f04f 0500 	mov.w	r5, #0
 8004394:	4622      	mov	r2, r4
 8004396:	462b      	mov	r3, r5
 8004398:	1891      	adds	r1, r2, r2
 800439a:	6139      	str	r1, [r7, #16]
 800439c:	415b      	adcs	r3, r3
 800439e:	617b      	str	r3, [r7, #20]
 80043a0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80043a4:	1912      	adds	r2, r2, r4
 80043a6:	eb45 0303 	adc.w	r3, r5, r3
 80043aa:	f04f 0000 	mov.w	r0, #0
 80043ae:	f04f 0100 	mov.w	r1, #0
 80043b2:	00d9      	lsls	r1, r3, #3
 80043b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043b8:	00d0      	lsls	r0, r2, #3
 80043ba:	4602      	mov	r2, r0
 80043bc:	460b      	mov	r3, r1
 80043be:	eb12 0804 	adds.w	r8, r2, r4
 80043c2:	eb43 0905 	adc.w	r9, r3, r5
 80043c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	4618      	mov	r0, r3
 80043ce:	f04f 0100 	mov.w	r1, #0
 80043d2:	f04f 0200 	mov.w	r2, #0
 80043d6:	f04f 0300 	mov.w	r3, #0
 80043da:	008b      	lsls	r3, r1, #2
 80043dc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80043e0:	0082      	lsls	r2, r0, #2
 80043e2:	4640      	mov	r0, r8
 80043e4:	4649      	mov	r1, r9
 80043e6:	f7fb feef 	bl	80001c8 <__aeabi_uldivmod>
 80043ea:	4602      	mov	r2, r0
 80043ec:	460b      	mov	r3, r1
 80043ee:	4b4e      	ldr	r3, [pc, #312]	; (8004528 <UART_SetConfig+0x734>)
 80043f0:	fba3 2302 	umull	r2, r3, r3, r2
 80043f4:	095b      	lsrs	r3, r3, #5
 80043f6:	011e      	lsls	r6, r3, #4
 80043f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80043fc:	4618      	mov	r0, r3
 80043fe:	f04f 0100 	mov.w	r1, #0
 8004402:	4602      	mov	r2, r0
 8004404:	460b      	mov	r3, r1
 8004406:	1894      	adds	r4, r2, r2
 8004408:	60bc      	str	r4, [r7, #8]
 800440a:	415b      	adcs	r3, r3
 800440c:	60fb      	str	r3, [r7, #12]
 800440e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004412:	1812      	adds	r2, r2, r0
 8004414:	eb41 0303 	adc.w	r3, r1, r3
 8004418:	f04f 0400 	mov.w	r4, #0
 800441c:	f04f 0500 	mov.w	r5, #0
 8004420:	00dd      	lsls	r5, r3, #3
 8004422:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004426:	00d4      	lsls	r4, r2, #3
 8004428:	4622      	mov	r2, r4
 800442a:	462b      	mov	r3, r5
 800442c:	1814      	adds	r4, r2, r0
 800442e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8004432:	414b      	adcs	r3, r1
 8004434:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	4618      	mov	r0, r3
 8004440:	f04f 0100 	mov.w	r1, #0
 8004444:	f04f 0200 	mov.w	r2, #0
 8004448:	f04f 0300 	mov.w	r3, #0
 800444c:	008b      	lsls	r3, r1, #2
 800444e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004452:	0082      	lsls	r2, r0, #2
 8004454:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004458:	f7fb feb6 	bl	80001c8 <__aeabi_uldivmod>
 800445c:	4602      	mov	r2, r0
 800445e:	460b      	mov	r3, r1
 8004460:	4b31      	ldr	r3, [pc, #196]	; (8004528 <UART_SetConfig+0x734>)
 8004462:	fba3 1302 	umull	r1, r3, r3, r2
 8004466:	095b      	lsrs	r3, r3, #5
 8004468:	2164      	movs	r1, #100	; 0x64
 800446a:	fb01 f303 	mul.w	r3, r1, r3
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	011b      	lsls	r3, r3, #4
 8004472:	3332      	adds	r3, #50	; 0x32
 8004474:	4a2c      	ldr	r2, [pc, #176]	; (8004528 <UART_SetConfig+0x734>)
 8004476:	fba2 2303 	umull	r2, r3, r2, r3
 800447a:	095b      	lsrs	r3, r3, #5
 800447c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004480:	441e      	add	r6, r3
 8004482:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004486:	4618      	mov	r0, r3
 8004488:	f04f 0100 	mov.w	r1, #0
 800448c:	4602      	mov	r2, r0
 800448e:	460b      	mov	r3, r1
 8004490:	1894      	adds	r4, r2, r2
 8004492:	603c      	str	r4, [r7, #0]
 8004494:	415b      	adcs	r3, r3
 8004496:	607b      	str	r3, [r7, #4]
 8004498:	e9d7 2300 	ldrd	r2, r3, [r7]
 800449c:	1812      	adds	r2, r2, r0
 800449e:	eb41 0303 	adc.w	r3, r1, r3
 80044a2:	f04f 0400 	mov.w	r4, #0
 80044a6:	f04f 0500 	mov.w	r5, #0
 80044aa:	00dd      	lsls	r5, r3, #3
 80044ac:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80044b0:	00d4      	lsls	r4, r2, #3
 80044b2:	4622      	mov	r2, r4
 80044b4:	462b      	mov	r3, r5
 80044b6:	1814      	adds	r4, r2, r0
 80044b8:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 80044bc:	414b      	adcs	r3, r1
 80044be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80044c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	4618      	mov	r0, r3
 80044ca:	f04f 0100 	mov.w	r1, #0
 80044ce:	f04f 0200 	mov.w	r2, #0
 80044d2:	f04f 0300 	mov.w	r3, #0
 80044d6:	008b      	lsls	r3, r1, #2
 80044d8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80044dc:	0082      	lsls	r2, r0, #2
 80044de:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80044e2:	f7fb fe71 	bl	80001c8 <__aeabi_uldivmod>
 80044e6:	4602      	mov	r2, r0
 80044e8:	460b      	mov	r3, r1
 80044ea:	4b0f      	ldr	r3, [pc, #60]	; (8004528 <UART_SetConfig+0x734>)
 80044ec:	fba3 1302 	umull	r1, r3, r3, r2
 80044f0:	095b      	lsrs	r3, r3, #5
 80044f2:	2164      	movs	r1, #100	; 0x64
 80044f4:	fb01 f303 	mul.w	r3, r1, r3
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	011b      	lsls	r3, r3, #4
 80044fc:	3332      	adds	r3, #50	; 0x32
 80044fe:	4a0a      	ldr	r2, [pc, #40]	; (8004528 <UART_SetConfig+0x734>)
 8004500:	fba2 2303 	umull	r2, r3, r2, r3
 8004504:	095b      	lsrs	r3, r3, #5
 8004506:	f003 020f 	and.w	r2, r3, #15
 800450a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4432      	add	r2, r6
 8004512:	609a      	str	r2, [r3, #8]
}
 8004514:	e7ff      	b.n	8004516 <UART_SetConfig+0x722>
 8004516:	bf00      	nop
 8004518:	37f4      	adds	r7, #244	; 0xf4
 800451a:	46bd      	mov	sp, r7
 800451c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004520:	40011000 	.word	0x40011000
 8004524:	40011400 	.word	0x40011400
 8004528:	51eb851f 	.word	0x51eb851f

0800452c <__errno>:
 800452c:	4b01      	ldr	r3, [pc, #4]	; (8004534 <__errno+0x8>)
 800452e:	6818      	ldr	r0, [r3, #0]
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	2000000c 	.word	0x2000000c

08004538 <__libc_init_array>:
 8004538:	b570      	push	{r4, r5, r6, lr}
 800453a:	4d0d      	ldr	r5, [pc, #52]	; (8004570 <__libc_init_array+0x38>)
 800453c:	4c0d      	ldr	r4, [pc, #52]	; (8004574 <__libc_init_array+0x3c>)
 800453e:	1b64      	subs	r4, r4, r5
 8004540:	10a4      	asrs	r4, r4, #2
 8004542:	2600      	movs	r6, #0
 8004544:	42a6      	cmp	r6, r4
 8004546:	d109      	bne.n	800455c <__libc_init_array+0x24>
 8004548:	4d0b      	ldr	r5, [pc, #44]	; (8004578 <__libc_init_array+0x40>)
 800454a:	4c0c      	ldr	r4, [pc, #48]	; (800457c <__libc_init_array+0x44>)
 800454c:	f000 fce6 	bl	8004f1c <_init>
 8004550:	1b64      	subs	r4, r4, r5
 8004552:	10a4      	asrs	r4, r4, #2
 8004554:	2600      	movs	r6, #0
 8004556:	42a6      	cmp	r6, r4
 8004558:	d105      	bne.n	8004566 <__libc_init_array+0x2e>
 800455a:	bd70      	pop	{r4, r5, r6, pc}
 800455c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004560:	4798      	blx	r3
 8004562:	3601      	adds	r6, #1
 8004564:	e7ee      	b.n	8004544 <__libc_init_array+0xc>
 8004566:	f855 3b04 	ldr.w	r3, [r5], #4
 800456a:	4798      	blx	r3
 800456c:	3601      	adds	r6, #1
 800456e:	e7f2      	b.n	8004556 <__libc_init_array+0x1e>
 8004570:	08004fc4 	.word	0x08004fc4
 8004574:	08004fc4 	.word	0x08004fc4
 8004578:	08004fc4 	.word	0x08004fc4
 800457c:	08004fc8 	.word	0x08004fc8

08004580 <memset>:
 8004580:	4402      	add	r2, r0
 8004582:	4603      	mov	r3, r0
 8004584:	4293      	cmp	r3, r2
 8004586:	d100      	bne.n	800458a <memset+0xa>
 8004588:	4770      	bx	lr
 800458a:	f803 1b01 	strb.w	r1, [r3], #1
 800458e:	e7f9      	b.n	8004584 <memset+0x4>

08004590 <_puts_r>:
 8004590:	b570      	push	{r4, r5, r6, lr}
 8004592:	460e      	mov	r6, r1
 8004594:	4605      	mov	r5, r0
 8004596:	b118      	cbz	r0, 80045a0 <_puts_r+0x10>
 8004598:	6983      	ldr	r3, [r0, #24]
 800459a:	b90b      	cbnz	r3, 80045a0 <_puts_r+0x10>
 800459c:	f000 fa48 	bl	8004a30 <__sinit>
 80045a0:	69ab      	ldr	r3, [r5, #24]
 80045a2:	68ac      	ldr	r4, [r5, #8]
 80045a4:	b913      	cbnz	r3, 80045ac <_puts_r+0x1c>
 80045a6:	4628      	mov	r0, r5
 80045a8:	f000 fa42 	bl	8004a30 <__sinit>
 80045ac:	4b2c      	ldr	r3, [pc, #176]	; (8004660 <_puts_r+0xd0>)
 80045ae:	429c      	cmp	r4, r3
 80045b0:	d120      	bne.n	80045f4 <_puts_r+0x64>
 80045b2:	686c      	ldr	r4, [r5, #4]
 80045b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80045b6:	07db      	lsls	r3, r3, #31
 80045b8:	d405      	bmi.n	80045c6 <_puts_r+0x36>
 80045ba:	89a3      	ldrh	r3, [r4, #12]
 80045bc:	0598      	lsls	r0, r3, #22
 80045be:	d402      	bmi.n	80045c6 <_puts_r+0x36>
 80045c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045c2:	f000 fad3 	bl	8004b6c <__retarget_lock_acquire_recursive>
 80045c6:	89a3      	ldrh	r3, [r4, #12]
 80045c8:	0719      	lsls	r1, r3, #28
 80045ca:	d51d      	bpl.n	8004608 <_puts_r+0x78>
 80045cc:	6923      	ldr	r3, [r4, #16]
 80045ce:	b1db      	cbz	r3, 8004608 <_puts_r+0x78>
 80045d0:	3e01      	subs	r6, #1
 80045d2:	68a3      	ldr	r3, [r4, #8]
 80045d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80045d8:	3b01      	subs	r3, #1
 80045da:	60a3      	str	r3, [r4, #8]
 80045dc:	bb39      	cbnz	r1, 800462e <_puts_r+0x9e>
 80045de:	2b00      	cmp	r3, #0
 80045e0:	da38      	bge.n	8004654 <_puts_r+0xc4>
 80045e2:	4622      	mov	r2, r4
 80045e4:	210a      	movs	r1, #10
 80045e6:	4628      	mov	r0, r5
 80045e8:	f000 f848 	bl	800467c <__swbuf_r>
 80045ec:	3001      	adds	r0, #1
 80045ee:	d011      	beq.n	8004614 <_puts_r+0x84>
 80045f0:	250a      	movs	r5, #10
 80045f2:	e011      	b.n	8004618 <_puts_r+0x88>
 80045f4:	4b1b      	ldr	r3, [pc, #108]	; (8004664 <_puts_r+0xd4>)
 80045f6:	429c      	cmp	r4, r3
 80045f8:	d101      	bne.n	80045fe <_puts_r+0x6e>
 80045fa:	68ac      	ldr	r4, [r5, #8]
 80045fc:	e7da      	b.n	80045b4 <_puts_r+0x24>
 80045fe:	4b1a      	ldr	r3, [pc, #104]	; (8004668 <_puts_r+0xd8>)
 8004600:	429c      	cmp	r4, r3
 8004602:	bf08      	it	eq
 8004604:	68ec      	ldreq	r4, [r5, #12]
 8004606:	e7d5      	b.n	80045b4 <_puts_r+0x24>
 8004608:	4621      	mov	r1, r4
 800460a:	4628      	mov	r0, r5
 800460c:	f000 f888 	bl	8004720 <__swsetup_r>
 8004610:	2800      	cmp	r0, #0
 8004612:	d0dd      	beq.n	80045d0 <_puts_r+0x40>
 8004614:	f04f 35ff 	mov.w	r5, #4294967295
 8004618:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800461a:	07da      	lsls	r2, r3, #31
 800461c:	d405      	bmi.n	800462a <_puts_r+0x9a>
 800461e:	89a3      	ldrh	r3, [r4, #12]
 8004620:	059b      	lsls	r3, r3, #22
 8004622:	d402      	bmi.n	800462a <_puts_r+0x9a>
 8004624:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004626:	f000 faa2 	bl	8004b6e <__retarget_lock_release_recursive>
 800462a:	4628      	mov	r0, r5
 800462c:	bd70      	pop	{r4, r5, r6, pc}
 800462e:	2b00      	cmp	r3, #0
 8004630:	da04      	bge.n	800463c <_puts_r+0xac>
 8004632:	69a2      	ldr	r2, [r4, #24]
 8004634:	429a      	cmp	r2, r3
 8004636:	dc06      	bgt.n	8004646 <_puts_r+0xb6>
 8004638:	290a      	cmp	r1, #10
 800463a:	d004      	beq.n	8004646 <_puts_r+0xb6>
 800463c:	6823      	ldr	r3, [r4, #0]
 800463e:	1c5a      	adds	r2, r3, #1
 8004640:	6022      	str	r2, [r4, #0]
 8004642:	7019      	strb	r1, [r3, #0]
 8004644:	e7c5      	b.n	80045d2 <_puts_r+0x42>
 8004646:	4622      	mov	r2, r4
 8004648:	4628      	mov	r0, r5
 800464a:	f000 f817 	bl	800467c <__swbuf_r>
 800464e:	3001      	adds	r0, #1
 8004650:	d1bf      	bne.n	80045d2 <_puts_r+0x42>
 8004652:	e7df      	b.n	8004614 <_puts_r+0x84>
 8004654:	6823      	ldr	r3, [r4, #0]
 8004656:	250a      	movs	r5, #10
 8004658:	1c5a      	adds	r2, r3, #1
 800465a:	6022      	str	r2, [r4, #0]
 800465c:	701d      	strb	r5, [r3, #0]
 800465e:	e7db      	b.n	8004618 <_puts_r+0x88>
 8004660:	08004f7c 	.word	0x08004f7c
 8004664:	08004f9c 	.word	0x08004f9c
 8004668:	08004f5c 	.word	0x08004f5c

0800466c <puts>:
 800466c:	4b02      	ldr	r3, [pc, #8]	; (8004678 <puts+0xc>)
 800466e:	4601      	mov	r1, r0
 8004670:	6818      	ldr	r0, [r3, #0]
 8004672:	f7ff bf8d 	b.w	8004590 <_puts_r>
 8004676:	bf00      	nop
 8004678:	2000000c 	.word	0x2000000c

0800467c <__swbuf_r>:
 800467c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800467e:	460e      	mov	r6, r1
 8004680:	4614      	mov	r4, r2
 8004682:	4605      	mov	r5, r0
 8004684:	b118      	cbz	r0, 800468e <__swbuf_r+0x12>
 8004686:	6983      	ldr	r3, [r0, #24]
 8004688:	b90b      	cbnz	r3, 800468e <__swbuf_r+0x12>
 800468a:	f000 f9d1 	bl	8004a30 <__sinit>
 800468e:	4b21      	ldr	r3, [pc, #132]	; (8004714 <__swbuf_r+0x98>)
 8004690:	429c      	cmp	r4, r3
 8004692:	d12b      	bne.n	80046ec <__swbuf_r+0x70>
 8004694:	686c      	ldr	r4, [r5, #4]
 8004696:	69a3      	ldr	r3, [r4, #24]
 8004698:	60a3      	str	r3, [r4, #8]
 800469a:	89a3      	ldrh	r3, [r4, #12]
 800469c:	071a      	lsls	r2, r3, #28
 800469e:	d52f      	bpl.n	8004700 <__swbuf_r+0x84>
 80046a0:	6923      	ldr	r3, [r4, #16]
 80046a2:	b36b      	cbz	r3, 8004700 <__swbuf_r+0x84>
 80046a4:	6923      	ldr	r3, [r4, #16]
 80046a6:	6820      	ldr	r0, [r4, #0]
 80046a8:	1ac0      	subs	r0, r0, r3
 80046aa:	6963      	ldr	r3, [r4, #20]
 80046ac:	b2f6      	uxtb	r6, r6
 80046ae:	4283      	cmp	r3, r0
 80046b0:	4637      	mov	r7, r6
 80046b2:	dc04      	bgt.n	80046be <__swbuf_r+0x42>
 80046b4:	4621      	mov	r1, r4
 80046b6:	4628      	mov	r0, r5
 80046b8:	f000 f926 	bl	8004908 <_fflush_r>
 80046bc:	bb30      	cbnz	r0, 800470c <__swbuf_r+0x90>
 80046be:	68a3      	ldr	r3, [r4, #8]
 80046c0:	3b01      	subs	r3, #1
 80046c2:	60a3      	str	r3, [r4, #8]
 80046c4:	6823      	ldr	r3, [r4, #0]
 80046c6:	1c5a      	adds	r2, r3, #1
 80046c8:	6022      	str	r2, [r4, #0]
 80046ca:	701e      	strb	r6, [r3, #0]
 80046cc:	6963      	ldr	r3, [r4, #20]
 80046ce:	3001      	adds	r0, #1
 80046d0:	4283      	cmp	r3, r0
 80046d2:	d004      	beq.n	80046de <__swbuf_r+0x62>
 80046d4:	89a3      	ldrh	r3, [r4, #12]
 80046d6:	07db      	lsls	r3, r3, #31
 80046d8:	d506      	bpl.n	80046e8 <__swbuf_r+0x6c>
 80046da:	2e0a      	cmp	r6, #10
 80046dc:	d104      	bne.n	80046e8 <__swbuf_r+0x6c>
 80046de:	4621      	mov	r1, r4
 80046e0:	4628      	mov	r0, r5
 80046e2:	f000 f911 	bl	8004908 <_fflush_r>
 80046e6:	b988      	cbnz	r0, 800470c <__swbuf_r+0x90>
 80046e8:	4638      	mov	r0, r7
 80046ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046ec:	4b0a      	ldr	r3, [pc, #40]	; (8004718 <__swbuf_r+0x9c>)
 80046ee:	429c      	cmp	r4, r3
 80046f0:	d101      	bne.n	80046f6 <__swbuf_r+0x7a>
 80046f2:	68ac      	ldr	r4, [r5, #8]
 80046f4:	e7cf      	b.n	8004696 <__swbuf_r+0x1a>
 80046f6:	4b09      	ldr	r3, [pc, #36]	; (800471c <__swbuf_r+0xa0>)
 80046f8:	429c      	cmp	r4, r3
 80046fa:	bf08      	it	eq
 80046fc:	68ec      	ldreq	r4, [r5, #12]
 80046fe:	e7ca      	b.n	8004696 <__swbuf_r+0x1a>
 8004700:	4621      	mov	r1, r4
 8004702:	4628      	mov	r0, r5
 8004704:	f000 f80c 	bl	8004720 <__swsetup_r>
 8004708:	2800      	cmp	r0, #0
 800470a:	d0cb      	beq.n	80046a4 <__swbuf_r+0x28>
 800470c:	f04f 37ff 	mov.w	r7, #4294967295
 8004710:	e7ea      	b.n	80046e8 <__swbuf_r+0x6c>
 8004712:	bf00      	nop
 8004714:	08004f7c 	.word	0x08004f7c
 8004718:	08004f9c 	.word	0x08004f9c
 800471c:	08004f5c 	.word	0x08004f5c

08004720 <__swsetup_r>:
 8004720:	4b32      	ldr	r3, [pc, #200]	; (80047ec <__swsetup_r+0xcc>)
 8004722:	b570      	push	{r4, r5, r6, lr}
 8004724:	681d      	ldr	r5, [r3, #0]
 8004726:	4606      	mov	r6, r0
 8004728:	460c      	mov	r4, r1
 800472a:	b125      	cbz	r5, 8004736 <__swsetup_r+0x16>
 800472c:	69ab      	ldr	r3, [r5, #24]
 800472e:	b913      	cbnz	r3, 8004736 <__swsetup_r+0x16>
 8004730:	4628      	mov	r0, r5
 8004732:	f000 f97d 	bl	8004a30 <__sinit>
 8004736:	4b2e      	ldr	r3, [pc, #184]	; (80047f0 <__swsetup_r+0xd0>)
 8004738:	429c      	cmp	r4, r3
 800473a:	d10f      	bne.n	800475c <__swsetup_r+0x3c>
 800473c:	686c      	ldr	r4, [r5, #4]
 800473e:	89a3      	ldrh	r3, [r4, #12]
 8004740:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004744:	0719      	lsls	r1, r3, #28
 8004746:	d42c      	bmi.n	80047a2 <__swsetup_r+0x82>
 8004748:	06dd      	lsls	r5, r3, #27
 800474a:	d411      	bmi.n	8004770 <__swsetup_r+0x50>
 800474c:	2309      	movs	r3, #9
 800474e:	6033      	str	r3, [r6, #0]
 8004750:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004754:	81a3      	strh	r3, [r4, #12]
 8004756:	f04f 30ff 	mov.w	r0, #4294967295
 800475a:	e03e      	b.n	80047da <__swsetup_r+0xba>
 800475c:	4b25      	ldr	r3, [pc, #148]	; (80047f4 <__swsetup_r+0xd4>)
 800475e:	429c      	cmp	r4, r3
 8004760:	d101      	bne.n	8004766 <__swsetup_r+0x46>
 8004762:	68ac      	ldr	r4, [r5, #8]
 8004764:	e7eb      	b.n	800473e <__swsetup_r+0x1e>
 8004766:	4b24      	ldr	r3, [pc, #144]	; (80047f8 <__swsetup_r+0xd8>)
 8004768:	429c      	cmp	r4, r3
 800476a:	bf08      	it	eq
 800476c:	68ec      	ldreq	r4, [r5, #12]
 800476e:	e7e6      	b.n	800473e <__swsetup_r+0x1e>
 8004770:	0758      	lsls	r0, r3, #29
 8004772:	d512      	bpl.n	800479a <__swsetup_r+0x7a>
 8004774:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004776:	b141      	cbz	r1, 800478a <__swsetup_r+0x6a>
 8004778:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800477c:	4299      	cmp	r1, r3
 800477e:	d002      	beq.n	8004786 <__swsetup_r+0x66>
 8004780:	4630      	mov	r0, r6
 8004782:	f000 fa59 	bl	8004c38 <_free_r>
 8004786:	2300      	movs	r3, #0
 8004788:	6363      	str	r3, [r4, #52]	; 0x34
 800478a:	89a3      	ldrh	r3, [r4, #12]
 800478c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004790:	81a3      	strh	r3, [r4, #12]
 8004792:	2300      	movs	r3, #0
 8004794:	6063      	str	r3, [r4, #4]
 8004796:	6923      	ldr	r3, [r4, #16]
 8004798:	6023      	str	r3, [r4, #0]
 800479a:	89a3      	ldrh	r3, [r4, #12]
 800479c:	f043 0308 	orr.w	r3, r3, #8
 80047a0:	81a3      	strh	r3, [r4, #12]
 80047a2:	6923      	ldr	r3, [r4, #16]
 80047a4:	b94b      	cbnz	r3, 80047ba <__swsetup_r+0x9a>
 80047a6:	89a3      	ldrh	r3, [r4, #12]
 80047a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80047ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047b0:	d003      	beq.n	80047ba <__swsetup_r+0x9a>
 80047b2:	4621      	mov	r1, r4
 80047b4:	4630      	mov	r0, r6
 80047b6:	f000 f9ff 	bl	8004bb8 <__smakebuf_r>
 80047ba:	89a0      	ldrh	r0, [r4, #12]
 80047bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80047c0:	f010 0301 	ands.w	r3, r0, #1
 80047c4:	d00a      	beq.n	80047dc <__swsetup_r+0xbc>
 80047c6:	2300      	movs	r3, #0
 80047c8:	60a3      	str	r3, [r4, #8]
 80047ca:	6963      	ldr	r3, [r4, #20]
 80047cc:	425b      	negs	r3, r3
 80047ce:	61a3      	str	r3, [r4, #24]
 80047d0:	6923      	ldr	r3, [r4, #16]
 80047d2:	b943      	cbnz	r3, 80047e6 <__swsetup_r+0xc6>
 80047d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80047d8:	d1ba      	bne.n	8004750 <__swsetup_r+0x30>
 80047da:	bd70      	pop	{r4, r5, r6, pc}
 80047dc:	0781      	lsls	r1, r0, #30
 80047de:	bf58      	it	pl
 80047e0:	6963      	ldrpl	r3, [r4, #20]
 80047e2:	60a3      	str	r3, [r4, #8]
 80047e4:	e7f4      	b.n	80047d0 <__swsetup_r+0xb0>
 80047e6:	2000      	movs	r0, #0
 80047e8:	e7f7      	b.n	80047da <__swsetup_r+0xba>
 80047ea:	bf00      	nop
 80047ec:	2000000c 	.word	0x2000000c
 80047f0:	08004f7c 	.word	0x08004f7c
 80047f4:	08004f9c 	.word	0x08004f9c
 80047f8:	08004f5c 	.word	0x08004f5c

080047fc <__sflush_r>:
 80047fc:	898a      	ldrh	r2, [r1, #12]
 80047fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004802:	4605      	mov	r5, r0
 8004804:	0710      	lsls	r0, r2, #28
 8004806:	460c      	mov	r4, r1
 8004808:	d458      	bmi.n	80048bc <__sflush_r+0xc0>
 800480a:	684b      	ldr	r3, [r1, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	dc05      	bgt.n	800481c <__sflush_r+0x20>
 8004810:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004812:	2b00      	cmp	r3, #0
 8004814:	dc02      	bgt.n	800481c <__sflush_r+0x20>
 8004816:	2000      	movs	r0, #0
 8004818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800481c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800481e:	2e00      	cmp	r6, #0
 8004820:	d0f9      	beq.n	8004816 <__sflush_r+0x1a>
 8004822:	2300      	movs	r3, #0
 8004824:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004828:	682f      	ldr	r7, [r5, #0]
 800482a:	602b      	str	r3, [r5, #0]
 800482c:	d032      	beq.n	8004894 <__sflush_r+0x98>
 800482e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004830:	89a3      	ldrh	r3, [r4, #12]
 8004832:	075a      	lsls	r2, r3, #29
 8004834:	d505      	bpl.n	8004842 <__sflush_r+0x46>
 8004836:	6863      	ldr	r3, [r4, #4]
 8004838:	1ac0      	subs	r0, r0, r3
 800483a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800483c:	b10b      	cbz	r3, 8004842 <__sflush_r+0x46>
 800483e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004840:	1ac0      	subs	r0, r0, r3
 8004842:	2300      	movs	r3, #0
 8004844:	4602      	mov	r2, r0
 8004846:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004848:	6a21      	ldr	r1, [r4, #32]
 800484a:	4628      	mov	r0, r5
 800484c:	47b0      	blx	r6
 800484e:	1c43      	adds	r3, r0, #1
 8004850:	89a3      	ldrh	r3, [r4, #12]
 8004852:	d106      	bne.n	8004862 <__sflush_r+0x66>
 8004854:	6829      	ldr	r1, [r5, #0]
 8004856:	291d      	cmp	r1, #29
 8004858:	d82c      	bhi.n	80048b4 <__sflush_r+0xb8>
 800485a:	4a2a      	ldr	r2, [pc, #168]	; (8004904 <__sflush_r+0x108>)
 800485c:	40ca      	lsrs	r2, r1
 800485e:	07d6      	lsls	r6, r2, #31
 8004860:	d528      	bpl.n	80048b4 <__sflush_r+0xb8>
 8004862:	2200      	movs	r2, #0
 8004864:	6062      	str	r2, [r4, #4]
 8004866:	04d9      	lsls	r1, r3, #19
 8004868:	6922      	ldr	r2, [r4, #16]
 800486a:	6022      	str	r2, [r4, #0]
 800486c:	d504      	bpl.n	8004878 <__sflush_r+0x7c>
 800486e:	1c42      	adds	r2, r0, #1
 8004870:	d101      	bne.n	8004876 <__sflush_r+0x7a>
 8004872:	682b      	ldr	r3, [r5, #0]
 8004874:	b903      	cbnz	r3, 8004878 <__sflush_r+0x7c>
 8004876:	6560      	str	r0, [r4, #84]	; 0x54
 8004878:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800487a:	602f      	str	r7, [r5, #0]
 800487c:	2900      	cmp	r1, #0
 800487e:	d0ca      	beq.n	8004816 <__sflush_r+0x1a>
 8004880:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004884:	4299      	cmp	r1, r3
 8004886:	d002      	beq.n	800488e <__sflush_r+0x92>
 8004888:	4628      	mov	r0, r5
 800488a:	f000 f9d5 	bl	8004c38 <_free_r>
 800488e:	2000      	movs	r0, #0
 8004890:	6360      	str	r0, [r4, #52]	; 0x34
 8004892:	e7c1      	b.n	8004818 <__sflush_r+0x1c>
 8004894:	6a21      	ldr	r1, [r4, #32]
 8004896:	2301      	movs	r3, #1
 8004898:	4628      	mov	r0, r5
 800489a:	47b0      	blx	r6
 800489c:	1c41      	adds	r1, r0, #1
 800489e:	d1c7      	bne.n	8004830 <__sflush_r+0x34>
 80048a0:	682b      	ldr	r3, [r5, #0]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d0c4      	beq.n	8004830 <__sflush_r+0x34>
 80048a6:	2b1d      	cmp	r3, #29
 80048a8:	d001      	beq.n	80048ae <__sflush_r+0xb2>
 80048aa:	2b16      	cmp	r3, #22
 80048ac:	d101      	bne.n	80048b2 <__sflush_r+0xb6>
 80048ae:	602f      	str	r7, [r5, #0]
 80048b0:	e7b1      	b.n	8004816 <__sflush_r+0x1a>
 80048b2:	89a3      	ldrh	r3, [r4, #12]
 80048b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048b8:	81a3      	strh	r3, [r4, #12]
 80048ba:	e7ad      	b.n	8004818 <__sflush_r+0x1c>
 80048bc:	690f      	ldr	r7, [r1, #16]
 80048be:	2f00      	cmp	r7, #0
 80048c0:	d0a9      	beq.n	8004816 <__sflush_r+0x1a>
 80048c2:	0793      	lsls	r3, r2, #30
 80048c4:	680e      	ldr	r6, [r1, #0]
 80048c6:	bf08      	it	eq
 80048c8:	694b      	ldreq	r3, [r1, #20]
 80048ca:	600f      	str	r7, [r1, #0]
 80048cc:	bf18      	it	ne
 80048ce:	2300      	movne	r3, #0
 80048d0:	eba6 0807 	sub.w	r8, r6, r7
 80048d4:	608b      	str	r3, [r1, #8]
 80048d6:	f1b8 0f00 	cmp.w	r8, #0
 80048da:	dd9c      	ble.n	8004816 <__sflush_r+0x1a>
 80048dc:	6a21      	ldr	r1, [r4, #32]
 80048de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80048e0:	4643      	mov	r3, r8
 80048e2:	463a      	mov	r2, r7
 80048e4:	4628      	mov	r0, r5
 80048e6:	47b0      	blx	r6
 80048e8:	2800      	cmp	r0, #0
 80048ea:	dc06      	bgt.n	80048fa <__sflush_r+0xfe>
 80048ec:	89a3      	ldrh	r3, [r4, #12]
 80048ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048f2:	81a3      	strh	r3, [r4, #12]
 80048f4:	f04f 30ff 	mov.w	r0, #4294967295
 80048f8:	e78e      	b.n	8004818 <__sflush_r+0x1c>
 80048fa:	4407      	add	r7, r0
 80048fc:	eba8 0800 	sub.w	r8, r8, r0
 8004900:	e7e9      	b.n	80048d6 <__sflush_r+0xda>
 8004902:	bf00      	nop
 8004904:	20400001 	.word	0x20400001

08004908 <_fflush_r>:
 8004908:	b538      	push	{r3, r4, r5, lr}
 800490a:	690b      	ldr	r3, [r1, #16]
 800490c:	4605      	mov	r5, r0
 800490e:	460c      	mov	r4, r1
 8004910:	b913      	cbnz	r3, 8004918 <_fflush_r+0x10>
 8004912:	2500      	movs	r5, #0
 8004914:	4628      	mov	r0, r5
 8004916:	bd38      	pop	{r3, r4, r5, pc}
 8004918:	b118      	cbz	r0, 8004922 <_fflush_r+0x1a>
 800491a:	6983      	ldr	r3, [r0, #24]
 800491c:	b90b      	cbnz	r3, 8004922 <_fflush_r+0x1a>
 800491e:	f000 f887 	bl	8004a30 <__sinit>
 8004922:	4b14      	ldr	r3, [pc, #80]	; (8004974 <_fflush_r+0x6c>)
 8004924:	429c      	cmp	r4, r3
 8004926:	d11b      	bne.n	8004960 <_fflush_r+0x58>
 8004928:	686c      	ldr	r4, [r5, #4]
 800492a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d0ef      	beq.n	8004912 <_fflush_r+0xa>
 8004932:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004934:	07d0      	lsls	r0, r2, #31
 8004936:	d404      	bmi.n	8004942 <_fflush_r+0x3a>
 8004938:	0599      	lsls	r1, r3, #22
 800493a:	d402      	bmi.n	8004942 <_fflush_r+0x3a>
 800493c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800493e:	f000 f915 	bl	8004b6c <__retarget_lock_acquire_recursive>
 8004942:	4628      	mov	r0, r5
 8004944:	4621      	mov	r1, r4
 8004946:	f7ff ff59 	bl	80047fc <__sflush_r>
 800494a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800494c:	07da      	lsls	r2, r3, #31
 800494e:	4605      	mov	r5, r0
 8004950:	d4e0      	bmi.n	8004914 <_fflush_r+0xc>
 8004952:	89a3      	ldrh	r3, [r4, #12]
 8004954:	059b      	lsls	r3, r3, #22
 8004956:	d4dd      	bmi.n	8004914 <_fflush_r+0xc>
 8004958:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800495a:	f000 f908 	bl	8004b6e <__retarget_lock_release_recursive>
 800495e:	e7d9      	b.n	8004914 <_fflush_r+0xc>
 8004960:	4b05      	ldr	r3, [pc, #20]	; (8004978 <_fflush_r+0x70>)
 8004962:	429c      	cmp	r4, r3
 8004964:	d101      	bne.n	800496a <_fflush_r+0x62>
 8004966:	68ac      	ldr	r4, [r5, #8]
 8004968:	e7df      	b.n	800492a <_fflush_r+0x22>
 800496a:	4b04      	ldr	r3, [pc, #16]	; (800497c <_fflush_r+0x74>)
 800496c:	429c      	cmp	r4, r3
 800496e:	bf08      	it	eq
 8004970:	68ec      	ldreq	r4, [r5, #12]
 8004972:	e7da      	b.n	800492a <_fflush_r+0x22>
 8004974:	08004f7c 	.word	0x08004f7c
 8004978:	08004f9c 	.word	0x08004f9c
 800497c:	08004f5c 	.word	0x08004f5c

08004980 <std>:
 8004980:	2300      	movs	r3, #0
 8004982:	b510      	push	{r4, lr}
 8004984:	4604      	mov	r4, r0
 8004986:	e9c0 3300 	strd	r3, r3, [r0]
 800498a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800498e:	6083      	str	r3, [r0, #8]
 8004990:	8181      	strh	r1, [r0, #12]
 8004992:	6643      	str	r3, [r0, #100]	; 0x64
 8004994:	81c2      	strh	r2, [r0, #14]
 8004996:	6183      	str	r3, [r0, #24]
 8004998:	4619      	mov	r1, r3
 800499a:	2208      	movs	r2, #8
 800499c:	305c      	adds	r0, #92	; 0x5c
 800499e:	f7ff fdef 	bl	8004580 <memset>
 80049a2:	4b05      	ldr	r3, [pc, #20]	; (80049b8 <std+0x38>)
 80049a4:	6263      	str	r3, [r4, #36]	; 0x24
 80049a6:	4b05      	ldr	r3, [pc, #20]	; (80049bc <std+0x3c>)
 80049a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80049aa:	4b05      	ldr	r3, [pc, #20]	; (80049c0 <std+0x40>)
 80049ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80049ae:	4b05      	ldr	r3, [pc, #20]	; (80049c4 <std+0x44>)
 80049b0:	6224      	str	r4, [r4, #32]
 80049b2:	6323      	str	r3, [r4, #48]	; 0x30
 80049b4:	bd10      	pop	{r4, pc}
 80049b6:	bf00      	nop
 80049b8:	08004dad 	.word	0x08004dad
 80049bc:	08004dcf 	.word	0x08004dcf
 80049c0:	08004e07 	.word	0x08004e07
 80049c4:	08004e2b 	.word	0x08004e2b

080049c8 <_cleanup_r>:
 80049c8:	4901      	ldr	r1, [pc, #4]	; (80049d0 <_cleanup_r+0x8>)
 80049ca:	f000 b8af 	b.w	8004b2c <_fwalk_reent>
 80049ce:	bf00      	nop
 80049d0:	08004909 	.word	0x08004909

080049d4 <__sfmoreglue>:
 80049d4:	b570      	push	{r4, r5, r6, lr}
 80049d6:	1e4a      	subs	r2, r1, #1
 80049d8:	2568      	movs	r5, #104	; 0x68
 80049da:	4355      	muls	r5, r2
 80049dc:	460e      	mov	r6, r1
 80049de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80049e2:	f000 f979 	bl	8004cd8 <_malloc_r>
 80049e6:	4604      	mov	r4, r0
 80049e8:	b140      	cbz	r0, 80049fc <__sfmoreglue+0x28>
 80049ea:	2100      	movs	r1, #0
 80049ec:	e9c0 1600 	strd	r1, r6, [r0]
 80049f0:	300c      	adds	r0, #12
 80049f2:	60a0      	str	r0, [r4, #8]
 80049f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80049f8:	f7ff fdc2 	bl	8004580 <memset>
 80049fc:	4620      	mov	r0, r4
 80049fe:	bd70      	pop	{r4, r5, r6, pc}

08004a00 <__sfp_lock_acquire>:
 8004a00:	4801      	ldr	r0, [pc, #4]	; (8004a08 <__sfp_lock_acquire+0x8>)
 8004a02:	f000 b8b3 	b.w	8004b6c <__retarget_lock_acquire_recursive>
 8004a06:	bf00      	nop
 8004a08:	200136d8 	.word	0x200136d8

08004a0c <__sfp_lock_release>:
 8004a0c:	4801      	ldr	r0, [pc, #4]	; (8004a14 <__sfp_lock_release+0x8>)
 8004a0e:	f000 b8ae 	b.w	8004b6e <__retarget_lock_release_recursive>
 8004a12:	bf00      	nop
 8004a14:	200136d8 	.word	0x200136d8

08004a18 <__sinit_lock_acquire>:
 8004a18:	4801      	ldr	r0, [pc, #4]	; (8004a20 <__sinit_lock_acquire+0x8>)
 8004a1a:	f000 b8a7 	b.w	8004b6c <__retarget_lock_acquire_recursive>
 8004a1e:	bf00      	nop
 8004a20:	200136d3 	.word	0x200136d3

08004a24 <__sinit_lock_release>:
 8004a24:	4801      	ldr	r0, [pc, #4]	; (8004a2c <__sinit_lock_release+0x8>)
 8004a26:	f000 b8a2 	b.w	8004b6e <__retarget_lock_release_recursive>
 8004a2a:	bf00      	nop
 8004a2c:	200136d3 	.word	0x200136d3

08004a30 <__sinit>:
 8004a30:	b510      	push	{r4, lr}
 8004a32:	4604      	mov	r4, r0
 8004a34:	f7ff fff0 	bl	8004a18 <__sinit_lock_acquire>
 8004a38:	69a3      	ldr	r3, [r4, #24]
 8004a3a:	b11b      	cbz	r3, 8004a44 <__sinit+0x14>
 8004a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a40:	f7ff bff0 	b.w	8004a24 <__sinit_lock_release>
 8004a44:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004a48:	6523      	str	r3, [r4, #80]	; 0x50
 8004a4a:	4b13      	ldr	r3, [pc, #76]	; (8004a98 <__sinit+0x68>)
 8004a4c:	4a13      	ldr	r2, [pc, #76]	; (8004a9c <__sinit+0x6c>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	62a2      	str	r2, [r4, #40]	; 0x28
 8004a52:	42a3      	cmp	r3, r4
 8004a54:	bf04      	itt	eq
 8004a56:	2301      	moveq	r3, #1
 8004a58:	61a3      	streq	r3, [r4, #24]
 8004a5a:	4620      	mov	r0, r4
 8004a5c:	f000 f820 	bl	8004aa0 <__sfp>
 8004a60:	6060      	str	r0, [r4, #4]
 8004a62:	4620      	mov	r0, r4
 8004a64:	f000 f81c 	bl	8004aa0 <__sfp>
 8004a68:	60a0      	str	r0, [r4, #8]
 8004a6a:	4620      	mov	r0, r4
 8004a6c:	f000 f818 	bl	8004aa0 <__sfp>
 8004a70:	2200      	movs	r2, #0
 8004a72:	60e0      	str	r0, [r4, #12]
 8004a74:	2104      	movs	r1, #4
 8004a76:	6860      	ldr	r0, [r4, #4]
 8004a78:	f7ff ff82 	bl	8004980 <std>
 8004a7c:	68a0      	ldr	r0, [r4, #8]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	2109      	movs	r1, #9
 8004a82:	f7ff ff7d 	bl	8004980 <std>
 8004a86:	68e0      	ldr	r0, [r4, #12]
 8004a88:	2202      	movs	r2, #2
 8004a8a:	2112      	movs	r1, #18
 8004a8c:	f7ff ff78 	bl	8004980 <std>
 8004a90:	2301      	movs	r3, #1
 8004a92:	61a3      	str	r3, [r4, #24]
 8004a94:	e7d2      	b.n	8004a3c <__sinit+0xc>
 8004a96:	bf00      	nop
 8004a98:	08004f58 	.word	0x08004f58
 8004a9c:	080049c9 	.word	0x080049c9

08004aa0 <__sfp>:
 8004aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aa2:	4607      	mov	r7, r0
 8004aa4:	f7ff ffac 	bl	8004a00 <__sfp_lock_acquire>
 8004aa8:	4b1e      	ldr	r3, [pc, #120]	; (8004b24 <__sfp+0x84>)
 8004aaa:	681e      	ldr	r6, [r3, #0]
 8004aac:	69b3      	ldr	r3, [r6, #24]
 8004aae:	b913      	cbnz	r3, 8004ab6 <__sfp+0x16>
 8004ab0:	4630      	mov	r0, r6
 8004ab2:	f7ff ffbd 	bl	8004a30 <__sinit>
 8004ab6:	3648      	adds	r6, #72	; 0x48
 8004ab8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004abc:	3b01      	subs	r3, #1
 8004abe:	d503      	bpl.n	8004ac8 <__sfp+0x28>
 8004ac0:	6833      	ldr	r3, [r6, #0]
 8004ac2:	b30b      	cbz	r3, 8004b08 <__sfp+0x68>
 8004ac4:	6836      	ldr	r6, [r6, #0]
 8004ac6:	e7f7      	b.n	8004ab8 <__sfp+0x18>
 8004ac8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004acc:	b9d5      	cbnz	r5, 8004b04 <__sfp+0x64>
 8004ace:	4b16      	ldr	r3, [pc, #88]	; (8004b28 <__sfp+0x88>)
 8004ad0:	60e3      	str	r3, [r4, #12]
 8004ad2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004ad6:	6665      	str	r5, [r4, #100]	; 0x64
 8004ad8:	f000 f847 	bl	8004b6a <__retarget_lock_init_recursive>
 8004adc:	f7ff ff96 	bl	8004a0c <__sfp_lock_release>
 8004ae0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004ae4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004ae8:	6025      	str	r5, [r4, #0]
 8004aea:	61a5      	str	r5, [r4, #24]
 8004aec:	2208      	movs	r2, #8
 8004aee:	4629      	mov	r1, r5
 8004af0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004af4:	f7ff fd44 	bl	8004580 <memset>
 8004af8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004afc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004b00:	4620      	mov	r0, r4
 8004b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b04:	3468      	adds	r4, #104	; 0x68
 8004b06:	e7d9      	b.n	8004abc <__sfp+0x1c>
 8004b08:	2104      	movs	r1, #4
 8004b0a:	4638      	mov	r0, r7
 8004b0c:	f7ff ff62 	bl	80049d4 <__sfmoreglue>
 8004b10:	4604      	mov	r4, r0
 8004b12:	6030      	str	r0, [r6, #0]
 8004b14:	2800      	cmp	r0, #0
 8004b16:	d1d5      	bne.n	8004ac4 <__sfp+0x24>
 8004b18:	f7ff ff78 	bl	8004a0c <__sfp_lock_release>
 8004b1c:	230c      	movs	r3, #12
 8004b1e:	603b      	str	r3, [r7, #0]
 8004b20:	e7ee      	b.n	8004b00 <__sfp+0x60>
 8004b22:	bf00      	nop
 8004b24:	08004f58 	.word	0x08004f58
 8004b28:	ffff0001 	.word	0xffff0001

08004b2c <_fwalk_reent>:
 8004b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b30:	4606      	mov	r6, r0
 8004b32:	4688      	mov	r8, r1
 8004b34:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004b38:	2700      	movs	r7, #0
 8004b3a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004b3e:	f1b9 0901 	subs.w	r9, r9, #1
 8004b42:	d505      	bpl.n	8004b50 <_fwalk_reent+0x24>
 8004b44:	6824      	ldr	r4, [r4, #0]
 8004b46:	2c00      	cmp	r4, #0
 8004b48:	d1f7      	bne.n	8004b3a <_fwalk_reent+0xe>
 8004b4a:	4638      	mov	r0, r7
 8004b4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b50:	89ab      	ldrh	r3, [r5, #12]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d907      	bls.n	8004b66 <_fwalk_reent+0x3a>
 8004b56:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	d003      	beq.n	8004b66 <_fwalk_reent+0x3a>
 8004b5e:	4629      	mov	r1, r5
 8004b60:	4630      	mov	r0, r6
 8004b62:	47c0      	blx	r8
 8004b64:	4307      	orrs	r7, r0
 8004b66:	3568      	adds	r5, #104	; 0x68
 8004b68:	e7e9      	b.n	8004b3e <_fwalk_reent+0x12>

08004b6a <__retarget_lock_init_recursive>:
 8004b6a:	4770      	bx	lr

08004b6c <__retarget_lock_acquire_recursive>:
 8004b6c:	4770      	bx	lr

08004b6e <__retarget_lock_release_recursive>:
 8004b6e:	4770      	bx	lr

08004b70 <__swhatbuf_r>:
 8004b70:	b570      	push	{r4, r5, r6, lr}
 8004b72:	460e      	mov	r6, r1
 8004b74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b78:	2900      	cmp	r1, #0
 8004b7a:	b096      	sub	sp, #88	; 0x58
 8004b7c:	4614      	mov	r4, r2
 8004b7e:	461d      	mov	r5, r3
 8004b80:	da07      	bge.n	8004b92 <__swhatbuf_r+0x22>
 8004b82:	2300      	movs	r3, #0
 8004b84:	602b      	str	r3, [r5, #0]
 8004b86:	89b3      	ldrh	r3, [r6, #12]
 8004b88:	061a      	lsls	r2, r3, #24
 8004b8a:	d410      	bmi.n	8004bae <__swhatbuf_r+0x3e>
 8004b8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b90:	e00e      	b.n	8004bb0 <__swhatbuf_r+0x40>
 8004b92:	466a      	mov	r2, sp
 8004b94:	f000 f970 	bl	8004e78 <_fstat_r>
 8004b98:	2800      	cmp	r0, #0
 8004b9a:	dbf2      	blt.n	8004b82 <__swhatbuf_r+0x12>
 8004b9c:	9a01      	ldr	r2, [sp, #4]
 8004b9e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004ba2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004ba6:	425a      	negs	r2, r3
 8004ba8:	415a      	adcs	r2, r3
 8004baa:	602a      	str	r2, [r5, #0]
 8004bac:	e7ee      	b.n	8004b8c <__swhatbuf_r+0x1c>
 8004bae:	2340      	movs	r3, #64	; 0x40
 8004bb0:	2000      	movs	r0, #0
 8004bb2:	6023      	str	r3, [r4, #0]
 8004bb4:	b016      	add	sp, #88	; 0x58
 8004bb6:	bd70      	pop	{r4, r5, r6, pc}

08004bb8 <__smakebuf_r>:
 8004bb8:	898b      	ldrh	r3, [r1, #12]
 8004bba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004bbc:	079d      	lsls	r5, r3, #30
 8004bbe:	4606      	mov	r6, r0
 8004bc0:	460c      	mov	r4, r1
 8004bc2:	d507      	bpl.n	8004bd4 <__smakebuf_r+0x1c>
 8004bc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004bc8:	6023      	str	r3, [r4, #0]
 8004bca:	6123      	str	r3, [r4, #16]
 8004bcc:	2301      	movs	r3, #1
 8004bce:	6163      	str	r3, [r4, #20]
 8004bd0:	b002      	add	sp, #8
 8004bd2:	bd70      	pop	{r4, r5, r6, pc}
 8004bd4:	ab01      	add	r3, sp, #4
 8004bd6:	466a      	mov	r2, sp
 8004bd8:	f7ff ffca 	bl	8004b70 <__swhatbuf_r>
 8004bdc:	9900      	ldr	r1, [sp, #0]
 8004bde:	4605      	mov	r5, r0
 8004be0:	4630      	mov	r0, r6
 8004be2:	f000 f879 	bl	8004cd8 <_malloc_r>
 8004be6:	b948      	cbnz	r0, 8004bfc <__smakebuf_r+0x44>
 8004be8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bec:	059a      	lsls	r2, r3, #22
 8004bee:	d4ef      	bmi.n	8004bd0 <__smakebuf_r+0x18>
 8004bf0:	f023 0303 	bic.w	r3, r3, #3
 8004bf4:	f043 0302 	orr.w	r3, r3, #2
 8004bf8:	81a3      	strh	r3, [r4, #12]
 8004bfa:	e7e3      	b.n	8004bc4 <__smakebuf_r+0xc>
 8004bfc:	4b0d      	ldr	r3, [pc, #52]	; (8004c34 <__smakebuf_r+0x7c>)
 8004bfe:	62b3      	str	r3, [r6, #40]	; 0x28
 8004c00:	89a3      	ldrh	r3, [r4, #12]
 8004c02:	6020      	str	r0, [r4, #0]
 8004c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c08:	81a3      	strh	r3, [r4, #12]
 8004c0a:	9b00      	ldr	r3, [sp, #0]
 8004c0c:	6163      	str	r3, [r4, #20]
 8004c0e:	9b01      	ldr	r3, [sp, #4]
 8004c10:	6120      	str	r0, [r4, #16]
 8004c12:	b15b      	cbz	r3, 8004c2c <__smakebuf_r+0x74>
 8004c14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c18:	4630      	mov	r0, r6
 8004c1a:	f000 f93f 	bl	8004e9c <_isatty_r>
 8004c1e:	b128      	cbz	r0, 8004c2c <__smakebuf_r+0x74>
 8004c20:	89a3      	ldrh	r3, [r4, #12]
 8004c22:	f023 0303 	bic.w	r3, r3, #3
 8004c26:	f043 0301 	orr.w	r3, r3, #1
 8004c2a:	81a3      	strh	r3, [r4, #12]
 8004c2c:	89a0      	ldrh	r0, [r4, #12]
 8004c2e:	4305      	orrs	r5, r0
 8004c30:	81a5      	strh	r5, [r4, #12]
 8004c32:	e7cd      	b.n	8004bd0 <__smakebuf_r+0x18>
 8004c34:	080049c9 	.word	0x080049c9

08004c38 <_free_r>:
 8004c38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c3a:	2900      	cmp	r1, #0
 8004c3c:	d048      	beq.n	8004cd0 <_free_r+0x98>
 8004c3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c42:	9001      	str	r0, [sp, #4]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f1a1 0404 	sub.w	r4, r1, #4
 8004c4a:	bfb8      	it	lt
 8004c4c:	18e4      	addlt	r4, r4, r3
 8004c4e:	f000 f947 	bl	8004ee0 <__malloc_lock>
 8004c52:	4a20      	ldr	r2, [pc, #128]	; (8004cd4 <_free_r+0x9c>)
 8004c54:	9801      	ldr	r0, [sp, #4]
 8004c56:	6813      	ldr	r3, [r2, #0]
 8004c58:	4615      	mov	r5, r2
 8004c5a:	b933      	cbnz	r3, 8004c6a <_free_r+0x32>
 8004c5c:	6063      	str	r3, [r4, #4]
 8004c5e:	6014      	str	r4, [r2, #0]
 8004c60:	b003      	add	sp, #12
 8004c62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c66:	f000 b941 	b.w	8004eec <__malloc_unlock>
 8004c6a:	42a3      	cmp	r3, r4
 8004c6c:	d90b      	bls.n	8004c86 <_free_r+0x4e>
 8004c6e:	6821      	ldr	r1, [r4, #0]
 8004c70:	1862      	adds	r2, r4, r1
 8004c72:	4293      	cmp	r3, r2
 8004c74:	bf04      	itt	eq
 8004c76:	681a      	ldreq	r2, [r3, #0]
 8004c78:	685b      	ldreq	r3, [r3, #4]
 8004c7a:	6063      	str	r3, [r4, #4]
 8004c7c:	bf04      	itt	eq
 8004c7e:	1852      	addeq	r2, r2, r1
 8004c80:	6022      	streq	r2, [r4, #0]
 8004c82:	602c      	str	r4, [r5, #0]
 8004c84:	e7ec      	b.n	8004c60 <_free_r+0x28>
 8004c86:	461a      	mov	r2, r3
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	b10b      	cbz	r3, 8004c90 <_free_r+0x58>
 8004c8c:	42a3      	cmp	r3, r4
 8004c8e:	d9fa      	bls.n	8004c86 <_free_r+0x4e>
 8004c90:	6811      	ldr	r1, [r2, #0]
 8004c92:	1855      	adds	r5, r2, r1
 8004c94:	42a5      	cmp	r5, r4
 8004c96:	d10b      	bne.n	8004cb0 <_free_r+0x78>
 8004c98:	6824      	ldr	r4, [r4, #0]
 8004c9a:	4421      	add	r1, r4
 8004c9c:	1854      	adds	r4, r2, r1
 8004c9e:	42a3      	cmp	r3, r4
 8004ca0:	6011      	str	r1, [r2, #0]
 8004ca2:	d1dd      	bne.n	8004c60 <_free_r+0x28>
 8004ca4:	681c      	ldr	r4, [r3, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	6053      	str	r3, [r2, #4]
 8004caa:	4421      	add	r1, r4
 8004cac:	6011      	str	r1, [r2, #0]
 8004cae:	e7d7      	b.n	8004c60 <_free_r+0x28>
 8004cb0:	d902      	bls.n	8004cb8 <_free_r+0x80>
 8004cb2:	230c      	movs	r3, #12
 8004cb4:	6003      	str	r3, [r0, #0]
 8004cb6:	e7d3      	b.n	8004c60 <_free_r+0x28>
 8004cb8:	6825      	ldr	r5, [r4, #0]
 8004cba:	1961      	adds	r1, r4, r5
 8004cbc:	428b      	cmp	r3, r1
 8004cbe:	bf04      	itt	eq
 8004cc0:	6819      	ldreq	r1, [r3, #0]
 8004cc2:	685b      	ldreq	r3, [r3, #4]
 8004cc4:	6063      	str	r3, [r4, #4]
 8004cc6:	bf04      	itt	eq
 8004cc8:	1949      	addeq	r1, r1, r5
 8004cca:	6021      	streq	r1, [r4, #0]
 8004ccc:	6054      	str	r4, [r2, #4]
 8004cce:	e7c7      	b.n	8004c60 <_free_r+0x28>
 8004cd0:	b003      	add	sp, #12
 8004cd2:	bd30      	pop	{r4, r5, pc}
 8004cd4:	20000090 	.word	0x20000090

08004cd8 <_malloc_r>:
 8004cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cda:	1ccd      	adds	r5, r1, #3
 8004cdc:	f025 0503 	bic.w	r5, r5, #3
 8004ce0:	3508      	adds	r5, #8
 8004ce2:	2d0c      	cmp	r5, #12
 8004ce4:	bf38      	it	cc
 8004ce6:	250c      	movcc	r5, #12
 8004ce8:	2d00      	cmp	r5, #0
 8004cea:	4606      	mov	r6, r0
 8004cec:	db01      	blt.n	8004cf2 <_malloc_r+0x1a>
 8004cee:	42a9      	cmp	r1, r5
 8004cf0:	d903      	bls.n	8004cfa <_malloc_r+0x22>
 8004cf2:	230c      	movs	r3, #12
 8004cf4:	6033      	str	r3, [r6, #0]
 8004cf6:	2000      	movs	r0, #0
 8004cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cfa:	f000 f8f1 	bl	8004ee0 <__malloc_lock>
 8004cfe:	4921      	ldr	r1, [pc, #132]	; (8004d84 <_malloc_r+0xac>)
 8004d00:	680a      	ldr	r2, [r1, #0]
 8004d02:	4614      	mov	r4, r2
 8004d04:	b99c      	cbnz	r4, 8004d2e <_malloc_r+0x56>
 8004d06:	4f20      	ldr	r7, [pc, #128]	; (8004d88 <_malloc_r+0xb0>)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	b923      	cbnz	r3, 8004d16 <_malloc_r+0x3e>
 8004d0c:	4621      	mov	r1, r4
 8004d0e:	4630      	mov	r0, r6
 8004d10:	f000 f83c 	bl	8004d8c <_sbrk_r>
 8004d14:	6038      	str	r0, [r7, #0]
 8004d16:	4629      	mov	r1, r5
 8004d18:	4630      	mov	r0, r6
 8004d1a:	f000 f837 	bl	8004d8c <_sbrk_r>
 8004d1e:	1c43      	adds	r3, r0, #1
 8004d20:	d123      	bne.n	8004d6a <_malloc_r+0x92>
 8004d22:	230c      	movs	r3, #12
 8004d24:	6033      	str	r3, [r6, #0]
 8004d26:	4630      	mov	r0, r6
 8004d28:	f000 f8e0 	bl	8004eec <__malloc_unlock>
 8004d2c:	e7e3      	b.n	8004cf6 <_malloc_r+0x1e>
 8004d2e:	6823      	ldr	r3, [r4, #0]
 8004d30:	1b5b      	subs	r3, r3, r5
 8004d32:	d417      	bmi.n	8004d64 <_malloc_r+0x8c>
 8004d34:	2b0b      	cmp	r3, #11
 8004d36:	d903      	bls.n	8004d40 <_malloc_r+0x68>
 8004d38:	6023      	str	r3, [r4, #0]
 8004d3a:	441c      	add	r4, r3
 8004d3c:	6025      	str	r5, [r4, #0]
 8004d3e:	e004      	b.n	8004d4a <_malloc_r+0x72>
 8004d40:	6863      	ldr	r3, [r4, #4]
 8004d42:	42a2      	cmp	r2, r4
 8004d44:	bf0c      	ite	eq
 8004d46:	600b      	streq	r3, [r1, #0]
 8004d48:	6053      	strne	r3, [r2, #4]
 8004d4a:	4630      	mov	r0, r6
 8004d4c:	f000 f8ce 	bl	8004eec <__malloc_unlock>
 8004d50:	f104 000b 	add.w	r0, r4, #11
 8004d54:	1d23      	adds	r3, r4, #4
 8004d56:	f020 0007 	bic.w	r0, r0, #7
 8004d5a:	1ac2      	subs	r2, r0, r3
 8004d5c:	d0cc      	beq.n	8004cf8 <_malloc_r+0x20>
 8004d5e:	1a1b      	subs	r3, r3, r0
 8004d60:	50a3      	str	r3, [r4, r2]
 8004d62:	e7c9      	b.n	8004cf8 <_malloc_r+0x20>
 8004d64:	4622      	mov	r2, r4
 8004d66:	6864      	ldr	r4, [r4, #4]
 8004d68:	e7cc      	b.n	8004d04 <_malloc_r+0x2c>
 8004d6a:	1cc4      	adds	r4, r0, #3
 8004d6c:	f024 0403 	bic.w	r4, r4, #3
 8004d70:	42a0      	cmp	r0, r4
 8004d72:	d0e3      	beq.n	8004d3c <_malloc_r+0x64>
 8004d74:	1a21      	subs	r1, r4, r0
 8004d76:	4630      	mov	r0, r6
 8004d78:	f000 f808 	bl	8004d8c <_sbrk_r>
 8004d7c:	3001      	adds	r0, #1
 8004d7e:	d1dd      	bne.n	8004d3c <_malloc_r+0x64>
 8004d80:	e7cf      	b.n	8004d22 <_malloc_r+0x4a>
 8004d82:	bf00      	nop
 8004d84:	20000090 	.word	0x20000090
 8004d88:	20000094 	.word	0x20000094

08004d8c <_sbrk_r>:
 8004d8c:	b538      	push	{r3, r4, r5, lr}
 8004d8e:	4d06      	ldr	r5, [pc, #24]	; (8004da8 <_sbrk_r+0x1c>)
 8004d90:	2300      	movs	r3, #0
 8004d92:	4604      	mov	r4, r0
 8004d94:	4608      	mov	r0, r1
 8004d96:	602b      	str	r3, [r5, #0]
 8004d98:	f7fb fea2 	bl	8000ae0 <_sbrk>
 8004d9c:	1c43      	adds	r3, r0, #1
 8004d9e:	d102      	bne.n	8004da6 <_sbrk_r+0x1a>
 8004da0:	682b      	ldr	r3, [r5, #0]
 8004da2:	b103      	cbz	r3, 8004da6 <_sbrk_r+0x1a>
 8004da4:	6023      	str	r3, [r4, #0]
 8004da6:	bd38      	pop	{r3, r4, r5, pc}
 8004da8:	200136dc 	.word	0x200136dc

08004dac <__sread>:
 8004dac:	b510      	push	{r4, lr}
 8004dae:	460c      	mov	r4, r1
 8004db0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004db4:	f000 f8a0 	bl	8004ef8 <_read_r>
 8004db8:	2800      	cmp	r0, #0
 8004dba:	bfab      	itete	ge
 8004dbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004dbe:	89a3      	ldrhlt	r3, [r4, #12]
 8004dc0:	181b      	addge	r3, r3, r0
 8004dc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004dc6:	bfac      	ite	ge
 8004dc8:	6563      	strge	r3, [r4, #84]	; 0x54
 8004dca:	81a3      	strhlt	r3, [r4, #12]
 8004dcc:	bd10      	pop	{r4, pc}

08004dce <__swrite>:
 8004dce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dd2:	461f      	mov	r7, r3
 8004dd4:	898b      	ldrh	r3, [r1, #12]
 8004dd6:	05db      	lsls	r3, r3, #23
 8004dd8:	4605      	mov	r5, r0
 8004dda:	460c      	mov	r4, r1
 8004ddc:	4616      	mov	r6, r2
 8004dde:	d505      	bpl.n	8004dec <__swrite+0x1e>
 8004de0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004de4:	2302      	movs	r3, #2
 8004de6:	2200      	movs	r2, #0
 8004de8:	f000 f868 	bl	8004ebc <_lseek_r>
 8004dec:	89a3      	ldrh	r3, [r4, #12]
 8004dee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004df2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004df6:	81a3      	strh	r3, [r4, #12]
 8004df8:	4632      	mov	r2, r6
 8004dfa:	463b      	mov	r3, r7
 8004dfc:	4628      	mov	r0, r5
 8004dfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e02:	f000 b817 	b.w	8004e34 <_write_r>

08004e06 <__sseek>:
 8004e06:	b510      	push	{r4, lr}
 8004e08:	460c      	mov	r4, r1
 8004e0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e0e:	f000 f855 	bl	8004ebc <_lseek_r>
 8004e12:	1c43      	adds	r3, r0, #1
 8004e14:	89a3      	ldrh	r3, [r4, #12]
 8004e16:	bf15      	itete	ne
 8004e18:	6560      	strne	r0, [r4, #84]	; 0x54
 8004e1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004e1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e22:	81a3      	strheq	r3, [r4, #12]
 8004e24:	bf18      	it	ne
 8004e26:	81a3      	strhne	r3, [r4, #12]
 8004e28:	bd10      	pop	{r4, pc}

08004e2a <__sclose>:
 8004e2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e2e:	f000 b813 	b.w	8004e58 <_close_r>
	...

08004e34 <_write_r>:
 8004e34:	b538      	push	{r3, r4, r5, lr}
 8004e36:	4d07      	ldr	r5, [pc, #28]	; (8004e54 <_write_r+0x20>)
 8004e38:	4604      	mov	r4, r0
 8004e3a:	4608      	mov	r0, r1
 8004e3c:	4611      	mov	r1, r2
 8004e3e:	2200      	movs	r2, #0
 8004e40:	602a      	str	r2, [r5, #0]
 8004e42:	461a      	mov	r2, r3
 8004e44:	f7fb fdfb 	bl	8000a3e <_write>
 8004e48:	1c43      	adds	r3, r0, #1
 8004e4a:	d102      	bne.n	8004e52 <_write_r+0x1e>
 8004e4c:	682b      	ldr	r3, [r5, #0]
 8004e4e:	b103      	cbz	r3, 8004e52 <_write_r+0x1e>
 8004e50:	6023      	str	r3, [r4, #0]
 8004e52:	bd38      	pop	{r3, r4, r5, pc}
 8004e54:	200136dc 	.word	0x200136dc

08004e58 <_close_r>:
 8004e58:	b538      	push	{r3, r4, r5, lr}
 8004e5a:	4d06      	ldr	r5, [pc, #24]	; (8004e74 <_close_r+0x1c>)
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	4604      	mov	r4, r0
 8004e60:	4608      	mov	r0, r1
 8004e62:	602b      	str	r3, [r5, #0]
 8004e64:	f7fb fe07 	bl	8000a76 <_close>
 8004e68:	1c43      	adds	r3, r0, #1
 8004e6a:	d102      	bne.n	8004e72 <_close_r+0x1a>
 8004e6c:	682b      	ldr	r3, [r5, #0]
 8004e6e:	b103      	cbz	r3, 8004e72 <_close_r+0x1a>
 8004e70:	6023      	str	r3, [r4, #0]
 8004e72:	bd38      	pop	{r3, r4, r5, pc}
 8004e74:	200136dc 	.word	0x200136dc

08004e78 <_fstat_r>:
 8004e78:	b538      	push	{r3, r4, r5, lr}
 8004e7a:	4d07      	ldr	r5, [pc, #28]	; (8004e98 <_fstat_r+0x20>)
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	4604      	mov	r4, r0
 8004e80:	4608      	mov	r0, r1
 8004e82:	4611      	mov	r1, r2
 8004e84:	602b      	str	r3, [r5, #0]
 8004e86:	f7fb fe02 	bl	8000a8e <_fstat>
 8004e8a:	1c43      	adds	r3, r0, #1
 8004e8c:	d102      	bne.n	8004e94 <_fstat_r+0x1c>
 8004e8e:	682b      	ldr	r3, [r5, #0]
 8004e90:	b103      	cbz	r3, 8004e94 <_fstat_r+0x1c>
 8004e92:	6023      	str	r3, [r4, #0]
 8004e94:	bd38      	pop	{r3, r4, r5, pc}
 8004e96:	bf00      	nop
 8004e98:	200136dc 	.word	0x200136dc

08004e9c <_isatty_r>:
 8004e9c:	b538      	push	{r3, r4, r5, lr}
 8004e9e:	4d06      	ldr	r5, [pc, #24]	; (8004eb8 <_isatty_r+0x1c>)
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	4604      	mov	r4, r0
 8004ea4:	4608      	mov	r0, r1
 8004ea6:	602b      	str	r3, [r5, #0]
 8004ea8:	f7fb fe01 	bl	8000aae <_isatty>
 8004eac:	1c43      	adds	r3, r0, #1
 8004eae:	d102      	bne.n	8004eb6 <_isatty_r+0x1a>
 8004eb0:	682b      	ldr	r3, [r5, #0]
 8004eb2:	b103      	cbz	r3, 8004eb6 <_isatty_r+0x1a>
 8004eb4:	6023      	str	r3, [r4, #0]
 8004eb6:	bd38      	pop	{r3, r4, r5, pc}
 8004eb8:	200136dc 	.word	0x200136dc

08004ebc <_lseek_r>:
 8004ebc:	b538      	push	{r3, r4, r5, lr}
 8004ebe:	4d07      	ldr	r5, [pc, #28]	; (8004edc <_lseek_r+0x20>)
 8004ec0:	4604      	mov	r4, r0
 8004ec2:	4608      	mov	r0, r1
 8004ec4:	4611      	mov	r1, r2
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	602a      	str	r2, [r5, #0]
 8004eca:	461a      	mov	r2, r3
 8004ecc:	f7fb fdfa 	bl	8000ac4 <_lseek>
 8004ed0:	1c43      	adds	r3, r0, #1
 8004ed2:	d102      	bne.n	8004eda <_lseek_r+0x1e>
 8004ed4:	682b      	ldr	r3, [r5, #0]
 8004ed6:	b103      	cbz	r3, 8004eda <_lseek_r+0x1e>
 8004ed8:	6023      	str	r3, [r4, #0]
 8004eda:	bd38      	pop	{r3, r4, r5, pc}
 8004edc:	200136dc 	.word	0x200136dc

08004ee0 <__malloc_lock>:
 8004ee0:	4801      	ldr	r0, [pc, #4]	; (8004ee8 <__malloc_lock+0x8>)
 8004ee2:	f7ff be43 	b.w	8004b6c <__retarget_lock_acquire_recursive>
 8004ee6:	bf00      	nop
 8004ee8:	200136d4 	.word	0x200136d4

08004eec <__malloc_unlock>:
 8004eec:	4801      	ldr	r0, [pc, #4]	; (8004ef4 <__malloc_unlock+0x8>)
 8004eee:	f7ff be3e 	b.w	8004b6e <__retarget_lock_release_recursive>
 8004ef2:	bf00      	nop
 8004ef4:	200136d4 	.word	0x200136d4

08004ef8 <_read_r>:
 8004ef8:	b538      	push	{r3, r4, r5, lr}
 8004efa:	4d07      	ldr	r5, [pc, #28]	; (8004f18 <_read_r+0x20>)
 8004efc:	4604      	mov	r4, r0
 8004efe:	4608      	mov	r0, r1
 8004f00:	4611      	mov	r1, r2
 8004f02:	2200      	movs	r2, #0
 8004f04:	602a      	str	r2, [r5, #0]
 8004f06:	461a      	mov	r2, r3
 8004f08:	f7fb fd7c 	bl	8000a04 <_read>
 8004f0c:	1c43      	adds	r3, r0, #1
 8004f0e:	d102      	bne.n	8004f16 <_read_r+0x1e>
 8004f10:	682b      	ldr	r3, [r5, #0]
 8004f12:	b103      	cbz	r3, 8004f16 <_read_r+0x1e>
 8004f14:	6023      	str	r3, [r4, #0]
 8004f16:	bd38      	pop	{r3, r4, r5, pc}
 8004f18:	200136dc 	.word	0x200136dc

08004f1c <_init>:
 8004f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f1e:	bf00      	nop
 8004f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f22:	bc08      	pop	{r3}
 8004f24:	469e      	mov	lr, r3
 8004f26:	4770      	bx	lr

08004f28 <_fini>:
 8004f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f2a:	bf00      	nop
 8004f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f2e:	bc08      	pop	{r3}
 8004f30:	469e      	mov	lr, r3
 8004f32:	4770      	bx	lr
