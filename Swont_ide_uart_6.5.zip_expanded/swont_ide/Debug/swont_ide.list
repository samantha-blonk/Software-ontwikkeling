
swont_ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000051e8  08008250  08008250  00018250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d438  0800d438  00020118  2**0
                  CONTENTS
  4 .ARM          00000008  0800d438  0800d438  0001d438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d440  0800d440  00020118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d440  0800d440  0001d440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d444  0800d444  0001d444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000118  20000000  0800d448  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013a28  20000118  0800d560  00020118  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20013b40  0800d560  00023b40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ecfd  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a3a  00000000  00000000  0002ee45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc8  00000000  00000000  00031880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c60  00000000  00000000  00032648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024042  00000000  00000000  000332a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001247f  00000000  00000000  000572ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cba9a  00000000  00000000  00069769  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00135203  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fe0  00000000  00000000  00135254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000118 	.word	0x20000118
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008238 	.word	0x08008238

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000011c 	.word	0x2000011c
 80001cc:	08008238 	.word	0x08008238

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <FL_Input>:
//--------------------------------------------------------------
// @brief Function load input into structs
// @details This function loads the different arguments into the assigned structs
//--------------------------------------------------------------
void FL_Input()
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	switch(input.line_rx_buffer[firstCharacter])
 8000598:	4bbe      	ldr	r3, [pc, #760]	; (8000894 <FL_Input+0x300>)
 800059a:	785b      	ldrb	r3, [r3, #1]
 800059c:	3b62      	subs	r3, #98	; 0x62
 800059e:	2b12      	cmp	r3, #18
 80005a0:	f200 8174 	bhi.w	800088c <FL_Input+0x2f8>
 80005a4:	a201      	add	r2, pc, #4	; (adr r2, 80005ac <FL_Input+0x18>)
 80005a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005aa:	bf00      	nop
 80005ac:	0800080b 	.word	0x0800080b
 80005b0:	08000867 	.word	0x08000867
 80005b4:	0800088d 	.word	0x0800088d
 80005b8:	0800088d 	.word	0x0800088d
 80005bc:	0800088d 	.word	0x0800088d
 80005c0:	0800088d 	.word	0x0800088d
 80005c4:	0800088d 	.word	0x0800088d
 80005c8:	0800088d 	.word	0x0800088d
 80005cc:	0800088d 	.word	0x0800088d
 80005d0:	0800088d 	.word	0x0800088d
 80005d4:	080005f9 	.word	0x080005f9
 80005d8:	0800088d 	.word	0x0800088d
 80005dc:	0800088d 	.word	0x0800088d
 80005e0:	0800088d 	.word	0x0800088d
 80005e4:	0800088d 	.word	0x0800088d
 80005e8:	0800088d 	.word	0x0800088d
 80005ec:	08000741 	.word	0x08000741
 80005f0:	0800088d 	.word	0x0800088d
 80005f4:	08000699 	.word	0x08000699
	{
		case line:	//if the function line is called
			if(checkFunctionLen(lineLen) == false)
 80005f8:	2006      	movs	r0, #6
 80005fa:	f000 f9f5 	bl	80009e8 <checkFunctionLen>
 80005fe:	4603      	mov	r3, r0
 8000600:	f083 0301 	eor.w	r3, r3, #1
 8000604:	b2db      	uxtb	r3, r3
 8000606:	2b00      	cmp	r3, #0
 8000608:	f000 8162 	beq.w	80008d0 <FL_Input+0x33c>
			{
				arg(argumentONE, string_container, NOTEXT);	//collects the information from argument 1
 800060c:	2200      	movs	r2, #0
 800060e:	49a2      	ldr	r1, [pc, #648]	; (8000898 <FL_Input+0x304>)
 8000610:	2001      	movs	r0, #1
 8000612:	f000 f969 	bl	80008e8 <arg>
				line_s.x1 = atoi(string_container);	//stores the information from argument 1 into line struct
 8000616:	48a0      	ldr	r0, [pc, #640]	; (8000898 <FL_Input+0x304>)
 8000618:	f006 fdb6 	bl	8007188 <atoi>
 800061c:	4603      	mov	r3, r0
 800061e:	b29a      	uxth	r2, r3
 8000620:	4b9e      	ldr	r3, [pc, #632]	; (800089c <FL_Input+0x308>)
 8000622:	801a      	strh	r2, [r3, #0]
				arg(argumentTWO, string_container, NOTEXT);	//etc
 8000624:	2200      	movs	r2, #0
 8000626:	499c      	ldr	r1, [pc, #624]	; (8000898 <FL_Input+0x304>)
 8000628:	2002      	movs	r0, #2
 800062a:	f000 f95d 	bl	80008e8 <arg>
				line_s.y1 = atoi(string_container);
 800062e:	489a      	ldr	r0, [pc, #616]	; (8000898 <FL_Input+0x304>)
 8000630:	f006 fdaa 	bl	8007188 <atoi>
 8000634:	4603      	mov	r3, r0
 8000636:	b29a      	uxth	r2, r3
 8000638:	4b98      	ldr	r3, [pc, #608]	; (800089c <FL_Input+0x308>)
 800063a:	805a      	strh	r2, [r3, #2]
				arg(argumentTHREE, string_container, NOTEXT);
 800063c:	2200      	movs	r2, #0
 800063e:	4996      	ldr	r1, [pc, #600]	; (8000898 <FL_Input+0x304>)
 8000640:	2003      	movs	r0, #3
 8000642:	f000 f951 	bl	80008e8 <arg>
				line_s.x2 = atoi(string_container);
 8000646:	4894      	ldr	r0, [pc, #592]	; (8000898 <FL_Input+0x304>)
 8000648:	f006 fd9e 	bl	8007188 <atoi>
 800064c:	4603      	mov	r3, r0
 800064e:	b29a      	uxth	r2, r3
 8000650:	4b92      	ldr	r3, [pc, #584]	; (800089c <FL_Input+0x308>)
 8000652:	809a      	strh	r2, [r3, #4]
				arg(argumentFOUR, string_container, NOTEXT);
 8000654:	2200      	movs	r2, #0
 8000656:	4990      	ldr	r1, [pc, #576]	; (8000898 <FL_Input+0x304>)
 8000658:	2004      	movs	r0, #4
 800065a:	f000 f945 	bl	80008e8 <arg>
				line_s.y2 = atoi(string_container);
 800065e:	488e      	ldr	r0, [pc, #568]	; (8000898 <FL_Input+0x304>)
 8000660:	f006 fd92 	bl	8007188 <atoi>
 8000664:	4603      	mov	r3, r0
 8000666:	b29a      	uxth	r2, r3
 8000668:	4b8c      	ldr	r3, [pc, #560]	; (800089c <FL_Input+0x308>)
 800066a:	80da      	strh	r2, [r3, #6]
				arg(argumentFIVE, string_container, NOTEXT);
 800066c:	2200      	movs	r2, #0
 800066e:	498a      	ldr	r1, [pc, #552]	; (8000898 <FL_Input+0x304>)
 8000670:	2005      	movs	r0, #5
 8000672:	f000 f939 	bl	80008e8 <arg>
				strcpy(line_s.color, string_container);
 8000676:	4988      	ldr	r1, [pc, #544]	; (8000898 <FL_Input+0x304>)
 8000678:	4889      	ldr	r0, [pc, #548]	; (80008a0 <FL_Input+0x30c>)
 800067a:	f006 fdd3 	bl	8007224 <strcpy>
				arg(argumentSIX, string_container, NOTEXT);
 800067e:	2200      	movs	r2, #0
 8000680:	4985      	ldr	r1, [pc, #532]	; (8000898 <FL_Input+0x304>)
 8000682:	2006      	movs	r0, #6
 8000684:	f000 f930 	bl	80008e8 <arg>
				line_s.weight = atoi(string_container);
 8000688:	4883      	ldr	r0, [pc, #524]	; (8000898 <FL_Input+0x304>)
 800068a:	f006 fd7d 	bl	8007188 <atoi>
 800068e:	4603      	mov	r3, r0
 8000690:	b2da      	uxtb	r2, r3
 8000692:	4b82      	ldr	r3, [pc, #520]	; (800089c <FL_Input+0x308>)
 8000694:	751a      	strb	r2, [r3, #20]
				break;
 8000696:	e124      	b.n	80008e2 <FL_Input+0x34e>
			}
			else break;
		case text:	//if the function text is called
			if(checkFunctionLen(textLen) == false)
 8000698:	2007      	movs	r0, #7
 800069a:	f000 f9a5 	bl	80009e8 <checkFunctionLen>
 800069e:	4603      	mov	r3, r0
 80006a0:	f083 0301 	eor.w	r3, r3, #1
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	f000 8114 	beq.w	80008d4 <FL_Input+0x340>
			{
				arg(argumentONE, string_container, NOTEXT);	//collects the information from argument 1
 80006ac:	2200      	movs	r2, #0
 80006ae:	497a      	ldr	r1, [pc, #488]	; (8000898 <FL_Input+0x304>)
 80006b0:	2001      	movs	r0, #1
 80006b2:	f000 f919 	bl	80008e8 <arg>
				text_s.xlup = atoi(string_container);	//stores the information from argument 1 into text struct
 80006b6:	4878      	ldr	r0, [pc, #480]	; (8000898 <FL_Input+0x304>)
 80006b8:	f006 fd66 	bl	8007188 <atoi>
 80006bc:	4603      	mov	r3, r0
 80006be:	b29a      	uxth	r2, r3
 80006c0:	4b78      	ldr	r3, [pc, #480]	; (80008a4 <FL_Input+0x310>)
 80006c2:	801a      	strh	r2, [r3, #0]
				arg(argumentTWO, string_container, NOTEXT);	//etc
 80006c4:	2200      	movs	r2, #0
 80006c6:	4974      	ldr	r1, [pc, #464]	; (8000898 <FL_Input+0x304>)
 80006c8:	2002      	movs	r0, #2
 80006ca:	f000 f90d 	bl	80008e8 <arg>
				text_s.ylup = atoi(string_container);
 80006ce:	4872      	ldr	r0, [pc, #456]	; (8000898 <FL_Input+0x304>)
 80006d0:	f006 fd5a 	bl	8007188 <atoi>
 80006d4:	4603      	mov	r3, r0
 80006d6:	b29a      	uxth	r2, r3
 80006d8:	4b72      	ldr	r3, [pc, #456]	; (80008a4 <FL_Input+0x310>)
 80006da:	805a      	strh	r2, [r3, #2]
				arg(argumentTHREE, string_container, NOTEXT);
 80006dc:	2200      	movs	r2, #0
 80006de:	496e      	ldr	r1, [pc, #440]	; (8000898 <FL_Input+0x304>)
 80006e0:	2003      	movs	r0, #3
 80006e2:	f000 f901 	bl	80008e8 <arg>
				strcpy(text_s.color, string_container);
 80006e6:	496c      	ldr	r1, [pc, #432]	; (8000898 <FL_Input+0x304>)
 80006e8:	486f      	ldr	r0, [pc, #444]	; (80008a8 <FL_Input+0x314>)
 80006ea:	f006 fd9b 	bl	8007224 <strcpy>
				arg(argumentFOUR, string_container, YESTEXT);
 80006ee:	2201      	movs	r2, #1
 80006f0:	4969      	ldr	r1, [pc, #420]	; (8000898 <FL_Input+0x304>)
 80006f2:	2004      	movs	r0, #4
 80006f4:	f000 f8f8 	bl	80008e8 <arg>
				strcpy(text_s.textin, string_container);
 80006f8:	4967      	ldr	r1, [pc, #412]	; (8000898 <FL_Input+0x304>)
 80006fa:	486c      	ldr	r0, [pc, #432]	; (80008ac <FL_Input+0x318>)
 80006fc:	f006 fd92 	bl	8007224 <strcpy>
				arg(argumentFIVE, string_container, NOTEXT);
 8000700:	2200      	movs	r2, #0
 8000702:	4965      	ldr	r1, [pc, #404]	; (8000898 <FL_Input+0x304>)
 8000704:	2005      	movs	r0, #5
 8000706:	f000 f8ef 	bl	80008e8 <arg>
				strcpy(text_s.fontname, string_container);
 800070a:	4963      	ldr	r1, [pc, #396]	; (8000898 <FL_Input+0x304>)
 800070c:	4868      	ldr	r0, [pc, #416]	; (80008b0 <FL_Input+0x31c>)
 800070e:	f006 fd89 	bl	8007224 <strcpy>
				arg(argumentSIX, string_container, NOTEXT);
 8000712:	2200      	movs	r2, #0
 8000714:	4960      	ldr	r1, [pc, #384]	; (8000898 <FL_Input+0x304>)
 8000716:	2006      	movs	r0, #6
 8000718:	f000 f8e6 	bl	80008e8 <arg>
				text_s.fontsize = atoi(string_container);
 800071c:	485e      	ldr	r0, [pc, #376]	; (8000898 <FL_Input+0x304>)
 800071e:	f006 fd33 	bl	8007188 <atoi>
 8000722:	4603      	mov	r3, r0
 8000724:	b2da      	uxtb	r2, r3
 8000726:	4b5f      	ldr	r3, [pc, #380]	; (80008a4 <FL_Input+0x310>)
 8000728:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
				arg(argumentSEVEN, string_container, NOTEXT);
 800072c:	2200      	movs	r2, #0
 800072e:	495a      	ldr	r1, [pc, #360]	; (8000898 <FL_Input+0x304>)
 8000730:	2007      	movs	r0, #7
 8000732:	f000 f8d9 	bl	80008e8 <arg>
				strcpy(text_s.fontstyle, string_container);
 8000736:	4958      	ldr	r1, [pc, #352]	; (8000898 <FL_Input+0x304>)
 8000738:	485e      	ldr	r0, [pc, #376]	; (80008b4 <FL_Input+0x320>)
 800073a:	f006 fd73 	bl	8007224 <strcpy>
				break;
 800073e:	e0d0      	b.n	80008e2 <FL_Input+0x34e>
			}
			else break;
		case rectangle:	//if the function rectangle is called
			if(checkFunctionLen(rectangleLen) == false)
 8000740:	2008      	movs	r0, #8
 8000742:	f000 f951 	bl	80009e8 <checkFunctionLen>
 8000746:	4603      	mov	r3, r0
 8000748:	f083 0301 	eor.w	r3, r3, #1
 800074c:	b2db      	uxtb	r3, r3
 800074e:	2b00      	cmp	r3, #0
 8000750:	f000 80c2 	beq.w	80008d8 <FL_Input+0x344>
			{
				arg(argumentONE, string_container, NOTEXT);	//collects the information from argument 1
 8000754:	2200      	movs	r2, #0
 8000756:	4950      	ldr	r1, [pc, #320]	; (8000898 <FL_Input+0x304>)
 8000758:	2001      	movs	r0, #1
 800075a:	f000 f8c5 	bl	80008e8 <arg>
				rectangle_s.xlup = atoi(string_container);	//stores the information from argument 1 into rectangle struct
 800075e:	484e      	ldr	r0, [pc, #312]	; (8000898 <FL_Input+0x304>)
 8000760:	f006 fd12 	bl	8007188 <atoi>
 8000764:	4603      	mov	r3, r0
 8000766:	b29a      	uxth	r2, r3
 8000768:	4b53      	ldr	r3, [pc, #332]	; (80008b8 <FL_Input+0x324>)
 800076a:	801a      	strh	r2, [r3, #0]
				arg(argumentTWO, string_container, NOTEXT);
 800076c:	2200      	movs	r2, #0
 800076e:	494a      	ldr	r1, [pc, #296]	; (8000898 <FL_Input+0x304>)
 8000770:	2002      	movs	r0, #2
 8000772:	f000 f8b9 	bl	80008e8 <arg>
				rectangle_s.ylup = atoi(string_container);
 8000776:	4848      	ldr	r0, [pc, #288]	; (8000898 <FL_Input+0x304>)
 8000778:	f006 fd06 	bl	8007188 <atoi>
 800077c:	4603      	mov	r3, r0
 800077e:	b29a      	uxth	r2, r3
 8000780:	4b4d      	ldr	r3, [pc, #308]	; (80008b8 <FL_Input+0x324>)
 8000782:	805a      	strh	r2, [r3, #2]
				arg(argumentTHREE, string_container, NOTEXT);
 8000784:	2200      	movs	r2, #0
 8000786:	4944      	ldr	r1, [pc, #272]	; (8000898 <FL_Input+0x304>)
 8000788:	2003      	movs	r0, #3
 800078a:	f000 f8ad 	bl	80008e8 <arg>
				rectangle_s.width = atoi(string_container);
 800078e:	4842      	ldr	r0, [pc, #264]	; (8000898 <FL_Input+0x304>)
 8000790:	f006 fcfa 	bl	8007188 <atoi>
 8000794:	4603      	mov	r3, r0
 8000796:	b2da      	uxtb	r2, r3
 8000798:	4b47      	ldr	r3, [pc, #284]	; (80008b8 <FL_Input+0x324>)
 800079a:	711a      	strb	r2, [r3, #4]
				arg(argumentFOUR, string_container, NOTEXT);
 800079c:	2200      	movs	r2, #0
 800079e:	493e      	ldr	r1, [pc, #248]	; (8000898 <FL_Input+0x304>)
 80007a0:	2004      	movs	r0, #4
 80007a2:	f000 f8a1 	bl	80008e8 <arg>
				rectangle_s.height = atoi(string_container);
 80007a6:	483c      	ldr	r0, [pc, #240]	; (8000898 <FL_Input+0x304>)
 80007a8:	f006 fcee 	bl	8007188 <atoi>
 80007ac:	4603      	mov	r3, r0
 80007ae:	b2da      	uxtb	r2, r3
 80007b0:	4b41      	ldr	r3, [pc, #260]	; (80008b8 <FL_Input+0x324>)
 80007b2:	715a      	strb	r2, [r3, #5]
				arg(argumentFIVE, string_container, NOTEXT);
 80007b4:	2200      	movs	r2, #0
 80007b6:	4938      	ldr	r1, [pc, #224]	; (8000898 <FL_Input+0x304>)
 80007b8:	2005      	movs	r0, #5
 80007ba:	f000 f895 	bl	80008e8 <arg>
				strcpy(rectangle_s.color, string_container);
 80007be:	4936      	ldr	r1, [pc, #216]	; (8000898 <FL_Input+0x304>)
 80007c0:	483e      	ldr	r0, [pc, #248]	; (80008bc <FL_Input+0x328>)
 80007c2:	f006 fd2f 	bl	8007224 <strcpy>
				arg(argumentSIX, string_container, NOTEXT);
 80007c6:	2200      	movs	r2, #0
 80007c8:	4933      	ldr	r1, [pc, #204]	; (8000898 <FL_Input+0x304>)
 80007ca:	2006      	movs	r0, #6
 80007cc:	f000 f88c 	bl	80008e8 <arg>
				rectangle_s.filled = atoi(string_container);
 80007d0:	4831      	ldr	r0, [pc, #196]	; (8000898 <FL_Input+0x304>)
 80007d2:	f006 fcd9 	bl	8007188 <atoi>
 80007d6:	4603      	mov	r3, r0
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	4b37      	ldr	r3, [pc, #220]	; (80008b8 <FL_Input+0x324>)
 80007dc:	749a      	strb	r2, [r3, #18]
				arg(argumentSEVEN, string_container, NOTEXT);
 80007de:	2200      	movs	r2, #0
 80007e0:	492d      	ldr	r1, [pc, #180]	; (8000898 <FL_Input+0x304>)
 80007e2:	2007      	movs	r0, #7
 80007e4:	f000 f880 	bl	80008e8 <arg>
				strcpy(rectangle_s.bordercolor, string_container);
 80007e8:	492b      	ldr	r1, [pc, #172]	; (8000898 <FL_Input+0x304>)
 80007ea:	4835      	ldr	r0, [pc, #212]	; (80008c0 <FL_Input+0x32c>)
 80007ec:	f006 fd1a 	bl	8007224 <strcpy>
				arg(argumentEIGHT, string_container, NOTEXT);
 80007f0:	2200      	movs	r2, #0
 80007f2:	4929      	ldr	r1, [pc, #164]	; (8000898 <FL_Input+0x304>)
 80007f4:	2008      	movs	r0, #8
 80007f6:	f000 f877 	bl	80008e8 <arg>
				rectangle_s.linewidth = atoi(string_container);
 80007fa:	4827      	ldr	r0, [pc, #156]	; (8000898 <FL_Input+0x304>)
 80007fc:	f006 fcc4 	bl	8007188 <atoi>
 8000800:	4603      	mov	r3, r0
 8000802:	b2da      	uxtb	r2, r3
 8000804:	4b2c      	ldr	r3, [pc, #176]	; (80008b8 <FL_Input+0x324>)
 8000806:	77da      	strb	r2, [r3, #31]
				break;
 8000808:	e06b      	b.n	80008e2 <FL_Input+0x34e>
			}
			else break;
		case bitmap:	//if the function bitmap is called
			if(checkFunctionLen(bitmapLen) == false)
 800080a:	2003      	movs	r0, #3
 800080c:	f000 f8ec 	bl	80009e8 <checkFunctionLen>
 8000810:	4603      	mov	r3, r0
 8000812:	f083 0301 	eor.w	r3, r3, #1
 8000816:	b2db      	uxtb	r3, r3
 8000818:	2b00      	cmp	r3, #0
 800081a:	d05f      	beq.n	80008dc <FL_Input+0x348>
			{
				arg(argumentONE, string_container, NOTEXT);	//collects the information from argument 1
 800081c:	2200      	movs	r2, #0
 800081e:	491e      	ldr	r1, [pc, #120]	; (8000898 <FL_Input+0x304>)
 8000820:	2001      	movs	r0, #1
 8000822:	f000 f861 	bl	80008e8 <arg>
				bitmap_s.nr = atoi(string_container);	//stores the information from argument 1 into bitmap struct
 8000826:	481c      	ldr	r0, [pc, #112]	; (8000898 <FL_Input+0x304>)
 8000828:	f006 fcae 	bl	8007188 <atoi>
 800082c:	4603      	mov	r3, r0
 800082e:	b2da      	uxtb	r2, r3
 8000830:	4b24      	ldr	r3, [pc, #144]	; (80008c4 <FL_Input+0x330>)
 8000832:	701a      	strb	r2, [r3, #0]
				arg(argumentTWO, string_container, NOTEXT);
 8000834:	2200      	movs	r2, #0
 8000836:	4918      	ldr	r1, [pc, #96]	; (8000898 <FL_Input+0x304>)
 8000838:	2002      	movs	r0, #2
 800083a:	f000 f855 	bl	80008e8 <arg>
				bitmap_s.xlup = atoi(string_container);
 800083e:	4816      	ldr	r0, [pc, #88]	; (8000898 <FL_Input+0x304>)
 8000840:	f006 fca2 	bl	8007188 <atoi>
 8000844:	4603      	mov	r3, r0
 8000846:	b29a      	uxth	r2, r3
 8000848:	4b1e      	ldr	r3, [pc, #120]	; (80008c4 <FL_Input+0x330>)
 800084a:	805a      	strh	r2, [r3, #2]
				arg(argumentTHREE, string_container, NOTEXT);
 800084c:	2200      	movs	r2, #0
 800084e:	4912      	ldr	r1, [pc, #72]	; (8000898 <FL_Input+0x304>)
 8000850:	2003      	movs	r0, #3
 8000852:	f000 f849 	bl	80008e8 <arg>
				bitmap_s.ylup = atoi(string_container);
 8000856:	4810      	ldr	r0, [pc, #64]	; (8000898 <FL_Input+0x304>)
 8000858:	f006 fc96 	bl	8007188 <atoi>
 800085c:	4603      	mov	r3, r0
 800085e:	b29a      	uxth	r2, r3
 8000860:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <FL_Input+0x330>)
 8000862:	809a      	strh	r2, [r3, #4]
				break;
 8000864:	e03d      	b.n	80008e2 <FL_Input+0x34e>
			}
			else break;
		case clearscreen:	//if the function clearscreen is called
			if(checkFunctionLen(clearscreenLen) == false)
 8000866:	2001      	movs	r0, #1
 8000868:	f000 f8be 	bl	80009e8 <checkFunctionLen>
 800086c:	4603      	mov	r3, r0
 800086e:	f083 0301 	eor.w	r3, r3, #1
 8000872:	b2db      	uxtb	r3, r3
 8000874:	2b00      	cmp	r3, #0
 8000876:	d033      	beq.n	80008e0 <FL_Input+0x34c>
			{
				arg(argumentONE, string_container, NOTEXT);	//collects the information from argument 1
 8000878:	2200      	movs	r2, #0
 800087a:	4907      	ldr	r1, [pc, #28]	; (8000898 <FL_Input+0x304>)
 800087c:	2001      	movs	r0, #1
 800087e:	f000 f833 	bl	80008e8 <arg>
				strcpy(clearscreen_s.color, string_container);	//stores the information from argument 1 into line struct
 8000882:	4905      	ldr	r1, [pc, #20]	; (8000898 <FL_Input+0x304>)
 8000884:	4810      	ldr	r0, [pc, #64]	; (80008c8 <FL_Input+0x334>)
 8000886:	f006 fccd 	bl	8007224 <strcpy>
				break;
 800088a:	e02a      	b.n	80008e2 <FL_Input+0x34e>
			}
			else break;
		default:
			printf("The function name is not correct");
 800088c:	480f      	ldr	r0, [pc, #60]	; (80008cc <FL_Input+0x338>)
 800088e:	f006 fcb1 	bl	80071f4 <iprintf>
			break;
 8000892:	e026      	b.n	80008e2 <FL_Input+0x34e>
 8000894:	200008fc 	.word	0x200008fc
 8000898:	20000134 	.word	0x20000134
 800089c:	200001b4 	.word	0x200001b4
 80008a0:	200001bc 	.word	0x200001bc
 80008a4:	20000200 	.word	0x20000200
 80008a8:	20000204 	.word	0x20000204
 80008ac:	20000210 	.word	0x20000210
 80008b0:	20000290 	.word	0x20000290
 80008b4:	200002af 	.word	0x200002af
 80008b8:	200001e0 	.word	0x200001e0
 80008bc:	200001e6 	.word	0x200001e6
 80008c0:	200001f3 	.word	0x200001f3
 80008c4:	200001cc 	.word	0x200001cc
 80008c8:	200001d4 	.word	0x200001d4
 80008cc:	08008250 	.word	0x08008250
			else break;
 80008d0:	bf00      	nop
 80008d2:	e006      	b.n	80008e2 <FL_Input+0x34e>
			else break;
 80008d4:	bf00      	nop
 80008d6:	e004      	b.n	80008e2 <FL_Input+0x34e>
			else break;
 80008d8:	bf00      	nop
 80008da:	e002      	b.n	80008e2 <FL_Input+0x34e>
			else break;
 80008dc:	bf00      	nop
 80008de:	e000      	b.n	80008e2 <FL_Input+0x34e>
			else break;
 80008e0:	bf00      	nop
	}

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop

080008e8 <arg>:
// @param[in] a: The variable that determines which argument has to be read
// @param[in] *string_container: A pointer where the string will be put into
// @param[in] text_trigger: A boolean that determines if the argument is a text or not
//--------------------------------------------------------------
void arg(uint8_t a,char *string_container ,bool text_trigger)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	6039      	str	r1, [r7, #0]
 80008f2:	71fb      	strb	r3, [r7, #7]
 80008f4:	4613      	mov	r3, r2
 80008f6:	71bb      	strb	r3, [r7, #6]
	uint8_t i = 0;	//counter
 80008f8:	2300      	movs	r3, #0
 80008fa:	73fb      	strb	r3, [r7, #15]
	uint8_t j = 0;	//counter
 80008fc:	2300      	movs	r3, #0
 80008fe:	73bb      	strb	r3, [r7, #14]
	uint8_t arg_counter = 0;	//is needed to check what argument is currently beeing read
 8000900:	2300      	movs	r3, #0
 8000902:	737b      	strb	r3, [r7, #13]
	uint8_t arg_character_counter = 0;	//checks what the current character from the argument is
 8000904:	2300      	movs	r3, #0
 8000906:	733b      	strb	r3, [r7, #12]
	for (j=0; j<=input.msglen; j++)	//cleans string container
 8000908:	2300      	movs	r3, #0
 800090a:	73bb      	strb	r3, [r7, #14]
 800090c:	e007      	b.n	800091e <arg+0x36>
	string_container[j] = 0;
 800090e:	7bbb      	ldrb	r3, [r7, #14]
 8000910:	683a      	ldr	r2, [r7, #0]
 8000912:	4413      	add	r3, r2
 8000914:	2200      	movs	r2, #0
 8000916:	701a      	strb	r2, [r3, #0]
	for (j=0; j<=input.msglen; j++)	//cleans string container
 8000918:	7bbb      	ldrb	r3, [r7, #14]
 800091a:	3301      	adds	r3, #1
 800091c:	73bb      	strb	r3, [r7, #14]
 800091e:	7bba      	ldrb	r2, [r7, #14]
 8000920:	4b30      	ldr	r3, [pc, #192]	; (80009e4 <arg+0xfc>)
 8000922:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8000926:	429a      	cmp	r2, r3
 8000928:	ddf1      	ble.n	800090e <arg+0x26>
	while(i < input.msglen)
 800092a:	e04e      	b.n	80009ca <arg+0xe2>
			{
				if(input.line_rx_buffer[i] == ',')	//if current character is a ',' the argument counter goes up
 800092c:	7bfb      	ldrb	r3, [r7, #15]
 800092e:	4a2d      	ldr	r2, [pc, #180]	; (80009e4 <arg+0xfc>)
 8000930:	4413      	add	r3, r2
 8000932:	785b      	ldrb	r3, [r3, #1]
 8000934:	2b2c      	cmp	r3, #44	; 0x2c
 8000936:	d106      	bne.n	8000946 <arg+0x5e>
				{
					arg_counter++;
 8000938:	7b7b      	ldrb	r3, [r7, #13]
 800093a:	3301      	adds	r3, #1
 800093c:	737b      	strb	r3, [r7, #13]
					i++;
 800093e:	7bfb      	ldrb	r3, [r7, #15]
 8000940:	3301      	adds	r3, #1
 8000942:	73fb      	strb	r3, [r7, #15]
 8000944:	e041      	b.n	80009ca <arg+0xe2>
				}
				else if(input.line_rx_buffer[i] == ' ' && text_trigger == false)	//if its a space it doesnt get read
 8000946:	7bfb      	ldrb	r3, [r7, #15]
 8000948:	4a26      	ldr	r2, [pc, #152]	; (80009e4 <arg+0xfc>)
 800094a:	4413      	add	r3, r2
 800094c:	785b      	ldrb	r3, [r3, #1]
 800094e:	2b20      	cmp	r3, #32
 8000950:	d109      	bne.n	8000966 <arg+0x7e>
 8000952:	79bb      	ldrb	r3, [r7, #6]
 8000954:	f083 0301 	eor.w	r3, r3, #1
 8000958:	b2db      	uxtb	r3, r3
 800095a:	2b00      	cmp	r3, #0
 800095c:	d003      	beq.n	8000966 <arg+0x7e>
				i++;
 800095e:	7bfb      	ldrb	r3, [r7, #15]
 8000960:	3301      	adds	r3, #1
 8000962:	73fb      	strb	r3, [r7, #15]
 8000964:	e031      	b.n	80009ca <arg+0xe2>
				else if(input.line_rx_buffer[i] == ' ' && text_trigger == true && arg_counter == a)	//if its a space but its in a text argument, it gets read
 8000966:	7bfb      	ldrb	r3, [r7, #15]
 8000968:	4a1e      	ldr	r2, [pc, #120]	; (80009e4 <arg+0xfc>)
 800096a:	4413      	add	r3, r2
 800096c:	785b      	ldrb	r3, [r3, #1]
 800096e:	2b20      	cmp	r3, #32
 8000970:	d115      	bne.n	800099e <arg+0xb6>
 8000972:	79bb      	ldrb	r3, [r7, #6]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d012      	beq.n	800099e <arg+0xb6>
 8000978:	7b7a      	ldrb	r2, [r7, #13]
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	429a      	cmp	r2, r3
 800097e:	d10e      	bne.n	800099e <arg+0xb6>
				{
					string_container[arg_character_counter++] = input.line_rx_buffer[i++];
 8000980:	7bfb      	ldrb	r3, [r7, #15]
 8000982:	1c5a      	adds	r2, r3, #1
 8000984:	73fa      	strb	r2, [r7, #15]
 8000986:	4619      	mov	r1, r3
 8000988:	7b3b      	ldrb	r3, [r7, #12]
 800098a:	1c5a      	adds	r2, r3, #1
 800098c:	733a      	strb	r2, [r7, #12]
 800098e:	461a      	mov	r2, r3
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	4413      	add	r3, r2
 8000994:	4a13      	ldr	r2, [pc, #76]	; (80009e4 <arg+0xfc>)
 8000996:	440a      	add	r2, r1
 8000998:	7852      	ldrb	r2, [r2, #1]
 800099a:	701a      	strb	r2, [r3, #0]
 800099c:	e015      	b.n	80009ca <arg+0xe2>
				}
				else if(arg_counter == a)	//if its a character in the correct argument it gets read
 800099e:	7b7a      	ldrb	r2, [r7, #13]
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	429a      	cmp	r2, r3
 80009a4:	d10e      	bne.n	80009c4 <arg+0xdc>
				{
				string_container[arg_character_counter] = input.line_rx_buffer[i];
 80009a6:	7bfa      	ldrb	r2, [r7, #15]
 80009a8:	7b3b      	ldrb	r3, [r7, #12]
 80009aa:	6839      	ldr	r1, [r7, #0]
 80009ac:	440b      	add	r3, r1
 80009ae:	490d      	ldr	r1, [pc, #52]	; (80009e4 <arg+0xfc>)
 80009b0:	440a      	add	r2, r1
 80009b2:	7852      	ldrb	r2, [r2, #1]
 80009b4:	701a      	strb	r2, [r3, #0]
				arg_character_counter++;
 80009b6:	7b3b      	ldrb	r3, [r7, #12]
 80009b8:	3301      	adds	r3, #1
 80009ba:	733b      	strb	r3, [r7, #12]
				i++;
 80009bc:	7bfb      	ldrb	r3, [r7, #15]
 80009be:	3301      	adds	r3, #1
 80009c0:	73fb      	strb	r3, [r7, #15]
 80009c2:	e002      	b.n	80009ca <arg+0xe2>
				}
				else i++;	//else skips
 80009c4:	7bfb      	ldrb	r3, [r7, #15]
 80009c6:	3301      	adds	r3, #1
 80009c8:	73fb      	strb	r3, [r7, #15]
	while(i < input.msglen)
 80009ca:	7bfa      	ldrb	r2, [r7, #15]
 80009cc:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <arg+0xfc>)
 80009ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80009d2:	429a      	cmp	r2, r3
 80009d4:	dbaa      	blt.n	800092c <arg+0x44>
			}
}
 80009d6:	bf00      	nop
 80009d8:	bf00      	nop
 80009da:	3714      	adds	r7, #20
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	200008fc 	.word	0x200008fc

080009e8 <checkFunctionLen>:

bool checkFunctionLen(uint8_t functionLen)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	73fb      	strb	r3, [r7, #15]
	uint8_t arg_counter = 0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	73bb      	strb	r3, [r7, #14]
	bool error = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	737b      	strb	r3, [r7, #13]
	while(i <= input.msglen)
 80009fe:	e00f      	b.n	8000a20 <checkFunctionLen+0x38>
	{
		if(input.line_rx_buffer[i] == ',')	//if current character is a ',' the argument counter goes up
 8000a00:	7bfb      	ldrb	r3, [r7, #15]
 8000a02:	4a19      	ldr	r2, [pc, #100]	; (8000a68 <checkFunctionLen+0x80>)
 8000a04:	4413      	add	r3, r2
 8000a06:	785b      	ldrb	r3, [r3, #1]
 8000a08:	2b2c      	cmp	r3, #44	; 0x2c
 8000a0a:	d106      	bne.n	8000a1a <checkFunctionLen+0x32>
			{
				arg_counter++;
 8000a0c:	7bbb      	ldrb	r3, [r7, #14]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	73bb      	strb	r3, [r7, #14]
				i++;
 8000a12:	7bfb      	ldrb	r3, [r7, #15]
 8000a14:	3301      	adds	r3, #1
 8000a16:	73fb      	strb	r3, [r7, #15]
 8000a18:	e002      	b.n	8000a20 <checkFunctionLen+0x38>
			}
		else i++;
 8000a1a:	7bfb      	ldrb	r3, [r7, #15]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	73fb      	strb	r3, [r7, #15]
	while(i <= input.msglen)
 8000a20:	7bfa      	ldrb	r2, [r7, #15]
 8000a22:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <checkFunctionLen+0x80>)
 8000a24:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	dde9      	ble.n	8000a00 <checkFunctionLen+0x18>
	}
	if(arg_counter > functionLen)
 8000a2c:	7bba      	ldrb	r2, [r7, #14]
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	d908      	bls.n	8000a46 <checkFunctionLen+0x5e>
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)"Warning: the input exceeds the maximum length of this function\n\r", sizeof("Warning: the input exceeds the maximum length of this function"),100);
 8000a34:	2364      	movs	r3, #100	; 0x64
 8000a36:	223f      	movs	r2, #63	; 0x3f
 8000a38:	490c      	ldr	r1, [pc, #48]	; (8000a6c <checkFunctionLen+0x84>)
 8000a3a:	480d      	ldr	r0, [pc, #52]	; (8000a70 <checkFunctionLen+0x88>)
 8000a3c:	f005 fb5d 	bl	80060fa <HAL_UART_Transmit>
		error = false;
 8000a40:	2300      	movs	r3, #0
 8000a42:	737b      	strb	r3, [r7, #13]
 8000a44:	e00b      	b.n	8000a5e <checkFunctionLen+0x76>
	}
	else if(arg_counter < functionLen)
 8000a46:	7bba      	ldrb	r2, [r7, #14]
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	429a      	cmp	r2, r3
 8000a4c:	d207      	bcs.n	8000a5e <checkFunctionLen+0x76>
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)"Error: not enough arguments for this function\n\r", sizeof("Error: not enough arguments for this function"),100);
 8000a4e:	2364      	movs	r3, #100	; 0x64
 8000a50:	222e      	movs	r2, #46	; 0x2e
 8000a52:	4908      	ldr	r1, [pc, #32]	; (8000a74 <checkFunctionLen+0x8c>)
 8000a54:	4806      	ldr	r0, [pc, #24]	; (8000a70 <checkFunctionLen+0x88>)
 8000a56:	f005 fb50 	bl	80060fa <HAL_UART_Transmit>
		error = true;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	737b      	strb	r3, [r7, #13]
	}
	return error;
 8000a5e:	7b7b      	ldrb	r3, [r7, #13]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3710      	adds	r7, #16
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	200008fc 	.word	0x200008fc
 8000a6c:	08008274 	.word	0x08008274
 8000a70:	20000df0 	.word	0x20000df0
 8000a74:	080082b8 	.word	0x080082b8

08000a78 <Bitmap_init>:
//--------------------------------------------------------------
// @brief Initializes bitmap
// @details This function generates and initializes all the necessary memory and registers for the bitmaps to function
//--------------------------------------------------------------
void Bitmap_init()
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
	//----------------------------------------------------------
	// Generate lookup table
	//----------------------------------------------------------
	uint16_t i;

	for(i = 0; i < BM_AMOUNT; i++)
 8000a7e:	2300      	movs	r3, #0
 8000a80:	80fb      	strh	r3, [r7, #6]
 8000a82:	e0aa      	b.n	8000bda <Bitmap_init+0x162>
	{	if(i < ALPHABET_SIZE)
 8000a84:	88fb      	ldrh	r3, [r7, #6]
 8000a86:	2b19      	cmp	r3, #25
 8000a88:	d81c      	bhi.n	8000ac4 <Bitmap_init+0x4c>
		{
			bmLookup[i][ID] = ('a' + i);
 8000a8a:	88fb      	ldrh	r3, [r7, #6]
 8000a8c:	88fa      	ldrh	r2, [r7, #6]
 8000a8e:	3261      	adds	r2, #97	; 0x61
 8000a90:	b291      	uxth	r1, r2
 8000a92:	4a57      	ldr	r2, [pc, #348]	; (8000bf0 <Bitmap_init+0x178>)
 8000a94:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
			bmLookup[i][X_LEN] = 8;
 8000a98:	88fb      	ldrh	r3, [r7, #6]
 8000a9a:	4a55      	ldr	r2, [pc, #340]	; (8000bf0 <Bitmap_init+0x178>)
 8000a9c:	00db      	lsls	r3, r3, #3
 8000a9e:	4413      	add	r3, r2
 8000aa0:	2208      	movs	r2, #8
 8000aa2:	805a      	strh	r2, [r3, #2]
			bmLookup[i][Y_LEN] = 8;
 8000aa4:	88fb      	ldrh	r3, [r7, #6]
 8000aa6:	4a52      	ldr	r2, [pc, #328]	; (8000bf0 <Bitmap_init+0x178>)
 8000aa8:	00db      	lsls	r3, r3, #3
 8000aaa:	4413      	add	r3, r2
 8000aac:	2208      	movs	r2, #8
 8000aae:	809a      	strh	r2, [r3, #4]
			bmLookup[i][OFFSET] = (TEXT_SIZE * TEXT_SIZE * i);
 8000ab0:	88fb      	ldrh	r3, [r7, #6]
 8000ab2:	88fa      	ldrh	r2, [r7, #6]
 8000ab4:	0192      	lsls	r2, r2, #6
 8000ab6:	b291      	uxth	r1, r2
 8000ab8:	4a4d      	ldr	r2, [pc, #308]	; (8000bf0 <Bitmap_init+0x178>)
 8000aba:	00db      	lsls	r3, r3, #3
 8000abc:	4413      	add	r3, r2
 8000abe:	460a      	mov	r2, r1
 8000ac0:	80da      	strh	r2, [r3, #6]
 8000ac2:	e087      	b.n	8000bd4 <Bitmap_init+0x15c>
		}
		else if((i >= ALPHABET_SIZE) && (i < (ALPHABET_SIZE*2)))
 8000ac4:	88fb      	ldrh	r3, [r7, #6]
 8000ac6:	2b19      	cmp	r3, #25
 8000ac8:	d91f      	bls.n	8000b0a <Bitmap_init+0x92>
 8000aca:	88fb      	ldrh	r3, [r7, #6]
 8000acc:	2b33      	cmp	r3, #51	; 0x33
 8000ace:	d81c      	bhi.n	8000b0a <Bitmap_init+0x92>
		{
			bmLookup[i][ID] = ('A' + (i - 26));
 8000ad0:	88fb      	ldrh	r3, [r7, #6]
 8000ad2:	88fa      	ldrh	r2, [r7, #6]
 8000ad4:	3227      	adds	r2, #39	; 0x27
 8000ad6:	b291      	uxth	r1, r2
 8000ad8:	4a45      	ldr	r2, [pc, #276]	; (8000bf0 <Bitmap_init+0x178>)
 8000ada:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
			bmLookup[i][X_LEN] = 8;
 8000ade:	88fb      	ldrh	r3, [r7, #6]
 8000ae0:	4a43      	ldr	r2, [pc, #268]	; (8000bf0 <Bitmap_init+0x178>)
 8000ae2:	00db      	lsls	r3, r3, #3
 8000ae4:	4413      	add	r3, r2
 8000ae6:	2208      	movs	r2, #8
 8000ae8:	805a      	strh	r2, [r3, #2]
			bmLookup[i][Y_LEN] = 8;
 8000aea:	88fb      	ldrh	r3, [r7, #6]
 8000aec:	4a40      	ldr	r2, [pc, #256]	; (8000bf0 <Bitmap_init+0x178>)
 8000aee:	00db      	lsls	r3, r3, #3
 8000af0:	4413      	add	r3, r2
 8000af2:	2208      	movs	r2, #8
 8000af4:	809a      	strh	r2, [r3, #4]
			bmLookup[i][OFFSET] = (TEXT_SIZE * TEXT_SIZE * i);
 8000af6:	88fb      	ldrh	r3, [r7, #6]
 8000af8:	88fa      	ldrh	r2, [r7, #6]
 8000afa:	0192      	lsls	r2, r2, #6
 8000afc:	b291      	uxth	r1, r2
 8000afe:	4a3c      	ldr	r2, [pc, #240]	; (8000bf0 <Bitmap_init+0x178>)
 8000b00:	00db      	lsls	r3, r3, #3
 8000b02:	4413      	add	r3, r2
 8000b04:	460a      	mov	r2, r1
 8000b06:	80da      	strh	r2, [r3, #6]
 8000b08:	e064      	b.n	8000bd4 <Bitmap_init+0x15c>
		}
		else if((i >= (ALPHABET_SIZE*2)) && (i < (ALPHABET_SIZE*4)))
 8000b0a:	88fb      	ldrh	r3, [r7, #6]
 8000b0c:	2b33      	cmp	r3, #51	; 0x33
 8000b0e:	d91f      	bls.n	8000b50 <Bitmap_init+0xd8>
 8000b10:	88fb      	ldrh	r3, [r7, #6]
 8000b12:	2b67      	cmp	r3, #103	; 0x67
 8000b14:	d81c      	bhi.n	8000b50 <Bitmap_init+0xd8>
		{
			bmLookup[i][ID] = (i-(ALPHABET_SIZE*2));
 8000b16:	88fb      	ldrh	r3, [r7, #6]
 8000b18:	88fa      	ldrh	r2, [r7, #6]
 8000b1a:	3a34      	subs	r2, #52	; 0x34
 8000b1c:	b291      	uxth	r1, r2
 8000b1e:	4a34      	ldr	r2, [pc, #208]	; (8000bf0 <Bitmap_init+0x178>)
 8000b20:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
			bmLookup[i][X_LEN] = 8;
 8000b24:	88fb      	ldrh	r3, [r7, #6]
 8000b26:	4a32      	ldr	r2, [pc, #200]	; (8000bf0 <Bitmap_init+0x178>)
 8000b28:	00db      	lsls	r3, r3, #3
 8000b2a:	4413      	add	r3, r2
 8000b2c:	2208      	movs	r2, #8
 8000b2e:	805a      	strh	r2, [r3, #2]
			bmLookup[i][Y_LEN] = 8;
 8000b30:	88fb      	ldrh	r3, [r7, #6]
 8000b32:	4a2f      	ldr	r2, [pc, #188]	; (8000bf0 <Bitmap_init+0x178>)
 8000b34:	00db      	lsls	r3, r3, #3
 8000b36:	4413      	add	r3, r2
 8000b38:	2208      	movs	r2, #8
 8000b3a:	809a      	strh	r2, [r3, #4]
			bmLookup[i][OFFSET] = (TEXT_SIZE * TEXT_SIZE * i);
 8000b3c:	88fb      	ldrh	r3, [r7, #6]
 8000b3e:	88fa      	ldrh	r2, [r7, #6]
 8000b40:	0192      	lsls	r2, r2, #6
 8000b42:	b291      	uxth	r1, r2
 8000b44:	4a2a      	ldr	r2, [pc, #168]	; (8000bf0 <Bitmap_init+0x178>)
 8000b46:	00db      	lsls	r3, r3, #3
 8000b48:	4413      	add	r3, r2
 8000b4a:	460a      	mov	r2, r1
 8000b4c:	80da      	strh	r2, [r3, #6]
 8000b4e:	e041      	b.n	8000bd4 <Bitmap_init+0x15c>
		}
		else if((i >= (ALPHABET_SIZE*4)) && (i < (ALPHABET_SIZE*6)))
 8000b50:	88fb      	ldrh	r3, [r7, #6]
 8000b52:	2b67      	cmp	r3, #103	; 0x67
 8000b54:	d920      	bls.n	8000b98 <Bitmap_init+0x120>
 8000b56:	88fb      	ldrh	r3, [r7, #6]
 8000b58:	2b9b      	cmp	r3, #155	; 0x9b
 8000b5a:	d81d      	bhi.n	8000b98 <Bitmap_init+0x120>
		{
			bmLookup[i][ID] = ((i-(ALPHABET_SIZE*4))+500);
 8000b5c:	88fb      	ldrh	r3, [r7, #6]
 8000b5e:	88fa      	ldrh	r2, [r7, #6]
 8000b60:	f502 72c6 	add.w	r2, r2, #396	; 0x18c
 8000b64:	b291      	uxth	r1, r2
 8000b66:	4a22      	ldr	r2, [pc, #136]	; (8000bf0 <Bitmap_init+0x178>)
 8000b68:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
			bmLookup[i][X_LEN] = 8;
 8000b6c:	88fb      	ldrh	r3, [r7, #6]
 8000b6e:	4a20      	ldr	r2, [pc, #128]	; (8000bf0 <Bitmap_init+0x178>)
 8000b70:	00db      	lsls	r3, r3, #3
 8000b72:	4413      	add	r3, r2
 8000b74:	2208      	movs	r2, #8
 8000b76:	805a      	strh	r2, [r3, #2]
			bmLookup[i][Y_LEN] = 8;
 8000b78:	88fb      	ldrh	r3, [r7, #6]
 8000b7a:	4a1d      	ldr	r2, [pc, #116]	; (8000bf0 <Bitmap_init+0x178>)
 8000b7c:	00db      	lsls	r3, r3, #3
 8000b7e:	4413      	add	r3, r2
 8000b80:	2208      	movs	r2, #8
 8000b82:	809a      	strh	r2, [r3, #4]
			bmLookup[i][OFFSET] = (TEXT_SIZE * TEXT_SIZE * i);
 8000b84:	88fb      	ldrh	r3, [r7, #6]
 8000b86:	88fa      	ldrh	r2, [r7, #6]
 8000b88:	0192      	lsls	r2, r2, #6
 8000b8a:	b291      	uxth	r1, r2
 8000b8c:	4a18      	ldr	r2, [pc, #96]	; (8000bf0 <Bitmap_init+0x178>)
 8000b8e:	00db      	lsls	r3, r3, #3
 8000b90:	4413      	add	r3, r2
 8000b92:	460a      	mov	r2, r1
 8000b94:	80da      	strh	r2, [r3, #6]
 8000b96:	e01d      	b.n	8000bd4 <Bitmap_init+0x15c>
		}
		else if(i==(ALPHABET_SIZE*6))
 8000b98:	88fb      	ldrh	r3, [r7, #6]
 8000b9a:	2b9c      	cmp	r3, #156	; 0x9c
 8000b9c:	d11a      	bne.n	8000bd4 <Bitmap_init+0x15c>
		{
			bmLookup[i][ID] = 690;
 8000b9e:	88fb      	ldrh	r3, [r7, #6]
 8000ba0:	4a13      	ldr	r2, [pc, #76]	; (8000bf0 <Bitmap_init+0x178>)
 8000ba2:	f240 21b2 	movw	r1, #690	; 0x2b2
 8000ba6:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
			bmLookup[i][X_LEN] = 13;
 8000baa:	88fb      	ldrh	r3, [r7, #6]
 8000bac:	4a10      	ldr	r2, [pc, #64]	; (8000bf0 <Bitmap_init+0x178>)
 8000bae:	00db      	lsls	r3, r3, #3
 8000bb0:	4413      	add	r3, r2
 8000bb2:	220d      	movs	r2, #13
 8000bb4:	805a      	strh	r2, [r3, #2]
			bmLookup[i][Y_LEN] = 13;
 8000bb6:	88fb      	ldrh	r3, [r7, #6]
 8000bb8:	4a0d      	ldr	r2, [pc, #52]	; (8000bf0 <Bitmap_init+0x178>)
 8000bba:	00db      	lsls	r3, r3, #3
 8000bbc:	4413      	add	r3, r2
 8000bbe:	220d      	movs	r2, #13
 8000bc0:	809a      	strh	r2, [r3, #4]
			bmLookup[i][OFFSET] = (TEXT_SIZE * TEXT_SIZE * i);
 8000bc2:	88fb      	ldrh	r3, [r7, #6]
 8000bc4:	88fa      	ldrh	r2, [r7, #6]
 8000bc6:	0192      	lsls	r2, r2, #6
 8000bc8:	b291      	uxth	r1, r2
 8000bca:	4a09      	ldr	r2, [pc, #36]	; (8000bf0 <Bitmap_init+0x178>)
 8000bcc:	00db      	lsls	r3, r3, #3
 8000bce:	4413      	add	r3, r2
 8000bd0:	460a      	mov	r2, r1
 8000bd2:	80da      	strh	r2, [r3, #6]
	for(i = 0; i < BM_AMOUNT; i++)
 8000bd4:	88fb      	ldrh	r3, [r7, #6]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	80fb      	strh	r3, [r7, #6]
 8000bda:	88fb      	ldrh	r3, [r7, #6]
 8000bdc:	2bc7      	cmp	r3, #199	; 0xc7
 8000bde:	f67f af51 	bls.w	8000a84 <Bitmap_init+0xc>
		}
	}
}
 8000be2:	bf00      	nop
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	200002bc 	.word	0x200002bc

08000bf4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <MX_DMA_Init+0x3c>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a0b      	ldr	r2, [pc, #44]	; (8000c30 <MX_DMA_Init+0x3c>)
 8000c04:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <MX_DMA_Init+0x3c>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2100      	movs	r1, #0
 8000c1a:	2044      	movs	r0, #68	; 0x44
 8000c1c:	f003 f873 	bl	8003d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000c20:	2044      	movs	r0, #68	; 0x44
 8000c22:	f003 f88c 	bl	8003d3e <HAL_NVIC_EnableIRQ>

}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40023800 	.word	0x40023800

08000c34 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08a      	sub	sp, #40	; 0x28
 8000c38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]
 8000c48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
 8000c4e:	4b32      	ldr	r3, [pc, #200]	; (8000d18 <MX_GPIO_Init+0xe4>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a31      	ldr	r2, [pc, #196]	; (8000d18 <MX_GPIO_Init+0xe4>)
 8000c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b2f      	ldr	r3, [pc, #188]	; (8000d18 <MX_GPIO_Init+0xe4>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c62:	613b      	str	r3, [r7, #16]
 8000c64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	4b2b      	ldr	r3, [pc, #172]	; (8000d18 <MX_GPIO_Init+0xe4>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a2a      	ldr	r2, [pc, #168]	; (8000d18 <MX_GPIO_Init+0xe4>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b28      	ldr	r3, [pc, #160]	; (8000d18 <MX_GPIO_Init+0xe4>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	4b24      	ldr	r3, [pc, #144]	; (8000d18 <MX_GPIO_Init+0xe4>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a23      	ldr	r2, [pc, #140]	; (8000d18 <MX_GPIO_Init+0xe4>)
 8000c8c:	f043 0310 	orr.w	r3, r3, #16
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b21      	ldr	r3, [pc, #132]	; (8000d18 <MX_GPIO_Init+0xe4>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0310 	and.w	r3, r3, #16
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	607b      	str	r3, [r7, #4]
 8000ca2:	4b1d      	ldr	r3, [pc, #116]	; (8000d18 <MX_GPIO_Init+0xe4>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a1c      	ldr	r2, [pc, #112]	; (8000d18 <MX_GPIO_Init+0xe4>)
 8000ca8:	f043 0302 	orr.w	r3, r3, #2
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b1a      	ldr	r3, [pc, #104]	; (8000d18 <MX_GPIO_Init+0xe4>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0302 	and.w	r3, r3, #2
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000cc0:	4816      	ldr	r0, [pc, #88]	; (8000d1c <MX_GPIO_Init+0xe8>)
 8000cc2:	f003 fd85 	bl	80047d0 <HAL_GPIO_WritePin>
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VGA_VSYNC_GPIO_Port, VGA_VSYNC_Pin, GPIO_PIN_RESET);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ccc:	4814      	ldr	r0, [pc, #80]	; (8000d20 <MX_GPIO_Init+0xec>)
 8000cce:	f003 fd7f 	bl	80047d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 8000cd2:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000cd6:	617b      	str	r3, [r7, #20]
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	4619      	mov	r1, r3
 8000cea:	480c      	ldr	r0, [pc, #48]	; (8000d1c <MX_GPIO_Init+0xe8>)
 8000cec:	f003 fbd4 	bl	8004498 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VGA_VSYNC_Pin;
 8000cf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VGA_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000d02:	f107 0314 	add.w	r3, r7, #20
 8000d06:	4619      	mov	r1, r3
 8000d08:	4805      	ldr	r0, [pc, #20]	; (8000d20 <MX_GPIO_Init+0xec>)
 8000d0a:	f003 fbc5 	bl	8004498 <HAL_GPIO_Init>

}
 8000d0e:	bf00      	nop
 8000d10:	3728      	adds	r7, #40	; 0x28
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	40020400 	.word	0x40020400

08000d24 <logic>:
// @param[in] x: The X-coordinate of the top left corner of the bitmap
// @param[in] y: The Y-coordinate of the top left corner of the bitmap
// @param[in] bmNr: The number ID of the bitmap to be loaded in
//--------------------------------------------------------------
void logic()
{
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	b084      	sub	sp, #16
 8000d2a:	af04      	add	r7, sp, #16

	switch(input.line_rx_buffer[firstCharacter])
 8000d2c:	4b64      	ldr	r3, [pc, #400]	; (8000ec0 <logic+0x19c>)
 8000d2e:	785b      	ldrb	r3, [r3, #1]
 8000d30:	3b62      	subs	r3, #98	; 0x62
 8000d32:	2b12      	cmp	r3, #18
 8000d34:	f200 80b9 	bhi.w	8000eaa <logic+0x186>
 8000d38:	a201      	add	r2, pc, #4	; (adr r2, 8000d40 <logic+0x1c>)
 8000d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d3e:	bf00      	nop
 8000d40:	08000e6b 	.word	0x08000e6b
 8000d44:	08000e8f 	.word	0x08000e8f
 8000d48:	08000eab 	.word	0x08000eab
 8000d4c:	08000eab 	.word	0x08000eab
 8000d50:	08000eab 	.word	0x08000eab
 8000d54:	08000eab 	.word	0x08000eab
 8000d58:	08000eab 	.word	0x08000eab
 8000d5c:	08000eab 	.word	0x08000eab
 8000d60:	08000eab 	.word	0x08000eab
 8000d64:	08000eab 	.word	0x08000eab
 8000d68:	08000d8d 	.word	0x08000d8d
 8000d6c:	08000eab 	.word	0x08000eab
 8000d70:	08000eab 	.word	0x08000eab
 8000d74:	08000eab 	.word	0x08000eab
 8000d78:	08000eab 	.word	0x08000eab
 8000d7c:	08000eab 	.word	0x08000eab
 8000d80:	08000dcb 	.word	0x08000dcb
 8000d84:	08000eab 	.word	0x08000eab
 8000d88:	08000e1d 	.word	0x08000e1d
	{
		case line:
			 UB_VGA_SetLine(line_s.x1,
 8000d8c:	4b4d      	ldr	r3, [pc, #308]	; (8000ec4 <logic+0x1a0>)
 8000d8e:	881c      	ldrh	r4, [r3, #0]
 8000d90:	4b4c      	ldr	r3, [pc, #304]	; (8000ec4 <logic+0x1a0>)
 8000d92:	885d      	ldrh	r5, [r3, #2]
 8000d94:	4b4b      	ldr	r3, [pc, #300]	; (8000ec4 <logic+0x1a0>)
 8000d96:	889e      	ldrh	r6, [r3, #4]
 8000d98:	4b4a      	ldr	r3, [pc, #296]	; (8000ec4 <logic+0x1a0>)
 8000d9a:	f8b3 8006 	ldrh.w	r8, [r3, #6]
							 line_s.y1,
							 line_s.x2,
							 line_s.y2,
							 color_check(line_s.color),
 8000d9e:	484a      	ldr	r0, [pc, #296]	; (8000ec8 <logic+0x1a4>)
 8000da0:	f000 f92e 	bl	8001000 <color_check>
 8000da4:	4603      	mov	r3, r0
			 UB_VGA_SetLine(line_s.x1,
 8000da6:	b2db      	uxtb	r3, r3
							 line_s.weight);
 8000da8:	4a46      	ldr	r2, [pc, #280]	; (8000ec4 <logic+0x1a0>)
 8000daa:	7d12      	ldrb	r2, [r2, #20]
			 UB_VGA_SetLine(line_s.x1,
 8000dac:	b292      	uxth	r2, r2
 8000dae:	9201      	str	r2, [sp, #4]
 8000db0:	9300      	str	r3, [sp, #0]
 8000db2:	4643      	mov	r3, r8
 8000db4:	4632      	mov	r2, r6
 8000db6:	4629      	mov	r1, r5
 8000db8:	4620      	mov	r0, r4
 8000dba:	f001 f847 	bl	8001e4c <UB_VGA_SetLine>
			 memset(&line_s, 0, sizeof(LINE_S));
 8000dbe:	2216      	movs	r2, #22
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4840      	ldr	r0, [pc, #256]	; (8000ec4 <logic+0x1a0>)
 8000dc4:	f006 fa0e 	bl	80071e4 <memset>
			 break;
 8000dc8:	e076      	b.n	8000eb8 <logic+0x194>
		case rectangle:
			UB_VGA_DrawRectangle(rectangle_s.xlup,
 8000dca:	4b40      	ldr	r3, [pc, #256]	; (8000ecc <logic+0x1a8>)
 8000dcc:	881e      	ldrh	r6, [r3, #0]
 8000dce:	4b3f      	ldr	r3, [pc, #252]	; (8000ecc <logic+0x1a8>)
 8000dd0:	f8b3 8002 	ldrh.w	r8, [r3, #2]
 8000dd4:	4b3d      	ldr	r3, [pc, #244]	; (8000ecc <logic+0x1a8>)
 8000dd6:	f893 9004 	ldrb.w	r9, [r3, #4]
 8000dda:	4b3c      	ldr	r3, [pc, #240]	; (8000ecc <logic+0x1a8>)
 8000ddc:	f893 a005 	ldrb.w	sl, [r3, #5]
					rectangle_s.ylup,
					rectangle_s.width,
					rectangle_s.height,
					color_check(rectangle_s.color),
 8000de0:	483b      	ldr	r0, [pc, #236]	; (8000ed0 <logic+0x1ac>)
 8000de2:	f000 f90d 	bl	8001000 <color_check>
 8000de6:	4603      	mov	r3, r0
			UB_VGA_DrawRectangle(rectangle_s.xlup,
 8000de8:	b2dc      	uxtb	r4, r3
 8000dea:	4b38      	ldr	r3, [pc, #224]	; (8000ecc <logic+0x1a8>)
 8000dec:	7c9d      	ldrb	r5, [r3, #18]
					rectangle_s.filled,
					color_check(rectangle_s.bordercolor),
 8000dee:	4839      	ldr	r0, [pc, #228]	; (8000ed4 <logic+0x1b0>)
 8000df0:	f000 f906 	bl	8001000 <color_check>
 8000df4:	4603      	mov	r3, r0
			UB_VGA_DrawRectangle(rectangle_s.xlup,
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	4a34      	ldr	r2, [pc, #208]	; (8000ecc <logic+0x1a8>)
 8000dfa:	7fd2      	ldrb	r2, [r2, #31]
 8000dfc:	9203      	str	r2, [sp, #12]
 8000dfe:	9302      	str	r3, [sp, #8]
 8000e00:	9501      	str	r5, [sp, #4]
 8000e02:	9400      	str	r4, [sp, #0]
 8000e04:	4653      	mov	r3, sl
 8000e06:	464a      	mov	r2, r9
 8000e08:	4641      	mov	r1, r8
 8000e0a:	4630      	mov	r0, r6
 8000e0c:	f001 f97f 	bl	800210e <UB_VGA_DrawRectangle>
					rectangle_s.linewidth);
			 memset(&rectangle_s, 0, sizeof(RECTANGLE_S));
 8000e10:	2220      	movs	r2, #32
 8000e12:	2100      	movs	r1, #0
 8000e14:	482d      	ldr	r0, [pc, #180]	; (8000ecc <logic+0x1a8>)
 8000e16:	f006 f9e5 	bl	80071e4 <memset>
			break;
 8000e1a:	e04d      	b.n	8000eb8 <logic+0x194>
		case text:
			UB_VGA_writeText(text_s.xlup,
 8000e1c:	4b2e      	ldr	r3, [pc, #184]	; (8000ed8 <logic+0x1b4>)
 8000e1e:	881e      	ldrh	r6, [r3, #0]
 8000e20:	4b2d      	ldr	r3, [pc, #180]	; (8000ed8 <logic+0x1b4>)
 8000e22:	f8b3 8002 	ldrh.w	r8, [r3, #2]
					text_s.ylup,
					color_check(text_s.color),
 8000e26:	482d      	ldr	r0, [pc, #180]	; (8000edc <logic+0x1b8>)
 8000e28:	f000 f8ea 	bl	8001000 <color_check>
 8000e2c:	4603      	mov	r3, r0
			UB_VGA_writeText(text_s.xlup,
 8000e2e:	fa5f f983 	uxtb.w	r9, r3
					text_s.textin,
					font_check(text_s.fontname),
 8000e32:	482b      	ldr	r0, [pc, #172]	; (8000ee0 <logic+0x1bc>)
 8000e34:	f000 f862 	bl	8000efc <font_check>
 8000e38:	4603      	mov	r3, r0
			UB_VGA_writeText(text_s.xlup,
 8000e3a:	b2dc      	uxtb	r4, r3
 8000e3c:	4b26      	ldr	r3, [pc, #152]	; (8000ed8 <logic+0x1b4>)
 8000e3e:	f893 50ae 	ldrb.w	r5, [r3, #174]	; 0xae
					text_s.fontsize,
					style_check(text_s.fontstyle));
 8000e42:	4828      	ldr	r0, [pc, #160]	; (8000ee4 <logic+0x1c0>)
 8000e44:	f000 f892 	bl	8000f6c <style_check>
 8000e48:	4603      	mov	r3, r0
			UB_VGA_writeText(text_s.xlup,
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	9302      	str	r3, [sp, #8]
 8000e4e:	9501      	str	r5, [sp, #4]
 8000e50:	9400      	str	r4, [sp, #0]
 8000e52:	4b25      	ldr	r3, [pc, #148]	; (8000ee8 <logic+0x1c4>)
 8000e54:	464a      	mov	r2, r9
 8000e56:	4641      	mov	r1, r8
 8000e58:	4630      	mov	r0, r6
 8000e5a:	f001 fb25 	bl	80024a8 <UB_VGA_writeText>
			 memset(&text_s, 0, sizeof(TEXT_S));
 8000e5e:	22bc      	movs	r2, #188	; 0xbc
 8000e60:	2100      	movs	r1, #0
 8000e62:	481d      	ldr	r0, [pc, #116]	; (8000ed8 <logic+0x1b4>)
 8000e64:	f006 f9be 	bl	80071e4 <memset>
			break;
 8000e68:	e026      	b.n	8000eb8 <logic+0x194>
		case bitmap:
			UB_VGA_DrawBitmap(bitmap_s.nr,
 8000e6a:	4b20      	ldr	r3, [pc, #128]	; (8000eec <logic+0x1c8>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	b298      	uxth	r0, r3
 8000e70:	4b1e      	ldr	r3, [pc, #120]	; (8000eec <logic+0x1c8>)
 8000e72:	8859      	ldrh	r1, [r3, #2]
 8000e74:	4b1d      	ldr	r3, [pc, #116]	; (8000eec <logic+0x1c8>)
 8000e76:	889a      	ldrh	r2, [r3, #4]
 8000e78:	2300      	movs	r3, #0
 8000e7a:	9300      	str	r3, [sp, #0]
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	f001 fa57 	bl	8002330 <UB_VGA_DrawBitmap>
					bitmap_s.xlup,
					bitmap_s.ylup, 0, 0);
			 memset(&bitmap_s, 0, sizeof(BITMAP_S));
 8000e82:	2206      	movs	r2, #6
 8000e84:	2100      	movs	r1, #0
 8000e86:	4819      	ldr	r0, [pc, #100]	; (8000eec <logic+0x1c8>)
 8000e88:	f006 f9ac 	bl	80071e4 <memset>
			break;
 8000e8c:	e014      	b.n	8000eb8 <logic+0x194>
		case clearscreen:
			UB_VGA_clearScreen(color_check(clearscreen_s.color));
 8000e8e:	4818      	ldr	r0, [pc, #96]	; (8000ef0 <logic+0x1cc>)
 8000e90:	f000 f8b6 	bl	8001000 <color_check>
 8000e94:	4603      	mov	r3, r0
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f001 fa25 	bl	80022e8 <UB_VGA_clearScreen>
			 memset(&clearscreen_s, 0, sizeof(CLEARSCREEN_S));
 8000e9e:	220c      	movs	r2, #12
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4813      	ldr	r0, [pc, #76]	; (8000ef0 <logic+0x1cc>)
 8000ea4:	f006 f99e 	bl	80071e4 <memset>
			break;
 8000ea8:	e006      	b.n	8000eb8 <logic+0x194>
		default:
			HAL_UART_Transmit(&huart2, (uint8_t *)"no comando\n\r", sizeof("no comando"),100);
 8000eaa:	2364      	movs	r3, #100	; 0x64
 8000eac:	220b      	movs	r2, #11
 8000eae:	4911      	ldr	r1, [pc, #68]	; (8000ef4 <logic+0x1d0>)
 8000eb0:	4811      	ldr	r0, [pc, #68]	; (8000ef8 <logic+0x1d4>)
 8000eb2:	f005 f922 	bl	80060fa <HAL_UART_Transmit>
			break;
 8000eb6:	bf00      	nop
	}
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec0:	200008fc 	.word	0x200008fc
 8000ec4:	200001b4 	.word	0x200001b4
 8000ec8:	200001bc 	.word	0x200001bc
 8000ecc:	200001e0 	.word	0x200001e0
 8000ed0:	200001e6 	.word	0x200001e6
 8000ed4:	200001f3 	.word	0x200001f3
 8000ed8:	20000200 	.word	0x20000200
 8000edc:	20000204 	.word	0x20000204
 8000ee0:	20000290 	.word	0x20000290
 8000ee4:	200002af 	.word	0x200002af
 8000ee8:	20000210 	.word	0x20000210
 8000eec:	200001cc 	.word	0x200001cc
 8000ef0:	200001d4 	.word	0x200001d4
 8000ef4:	080082e8 	.word	0x080082e8
 8000ef8:	20000df0 	.word	0x20000df0

08000efc <font_check>:
// @param[in] fnt: char whit font type
//
// @return return font type as 1 or 2
//--------------------------------------------------------------
int font_check(char fnt[8])
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	int font;
	uint8_t result = 0;
 8000f04:	2300      	movs	r3, #0
 8000f06:	72fb      	strb	r3, [r7, #11]

	result = strcmp(fnt, arial);
 8000f08:	4914      	ldr	r1, [pc, #80]	; (8000f5c <font_check+0x60>)
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff f960 	bl	80001d0 <strcmp>
 8000f10:	4603      	mov	r3, r0
 8000f12:	72fb      	strb	r3, [r7, #11]
	if (result == 0)
 8000f14:	7afb      	ldrb	r3, [r7, #11]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d101      	bne.n	8000f1e <font_check+0x22>
	{
		font = 1;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	60fb      	str	r3, [r7, #12]
	}
	result = strcmp(fnt, consolas);
 8000f1e:	4910      	ldr	r1, [pc, #64]	; (8000f60 <font_check+0x64>)
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f7ff f955 	bl	80001d0 <strcmp>
 8000f26:	4603      	mov	r3, r0
 8000f28:	72fb      	strb	r3, [r7, #11]
	if (result == 0)
 8000f2a:	7afb      	ldrb	r3, [r7, #11]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d102      	bne.n	8000f36 <font_check+0x3a>
	{
		font = 2;
 8000f30:	2302      	movs	r3, #2
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	e00c      	b.n	8000f50 <font_check+0x54>
	}
	else if(strcmp(fnt, arial) != 0)
 8000f36:	4909      	ldr	r1, [pc, #36]	; (8000f5c <font_check+0x60>)
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f7ff f949 	bl	80001d0 <strcmp>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d005      	beq.n	8000f50 <font_check+0x54>
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)"wrong font\n\r", sizeof("wrong font"),100);
 8000f44:	2364      	movs	r3, #100	; 0x64
 8000f46:	220b      	movs	r2, #11
 8000f48:	4906      	ldr	r1, [pc, #24]	; (8000f64 <font_check+0x68>)
 8000f4a:	4807      	ldr	r0, [pc, #28]	; (8000f68 <font_check+0x6c>)
 8000f4c:	f005 f8d5 	bl	80060fa <HAL_UART_Transmit>
	}



	return font;
 8000f50:	68fb      	ldr	r3, [r7, #12]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	2000008c 	.word	0x2000008c
 8000f60:	20000080 	.word	0x20000080
 8000f64:	080082f8 	.word	0x080082f8
 8000f68:	20000df0 	.word	0x20000df0

08000f6c <style_check>:
// @param[in] the char withe the fond style in it
//
// @return return the style code (1,2,3) 1 = normaal, 2 = vet, 3 = cursief
//--------------------------------------------------------------
int style_check(char stl[7])
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
	int style;
	uint8_t result;

	result = strcmp(stl, normaal);
 8000f74:	491d      	ldr	r1, [pc, #116]	; (8000fec <style_check+0x80>)
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f7ff f92a 	bl	80001d0 <strcmp>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	72fb      	strb	r3, [r7, #11]
	if (result == 0)
 8000f80:	7afb      	ldrb	r3, [r7, #11]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d101      	bne.n	8000f8a <style_check+0x1e>
	{
		style = 1;
 8000f86:	2301      	movs	r3, #1
 8000f88:	60fb      	str	r3, [r7, #12]
	}
	result = strcmp(stl, vet);
 8000f8a:	4919      	ldr	r1, [pc, #100]	; (8000ff0 <style_check+0x84>)
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f7ff f91f 	bl	80001d0 <strcmp>
 8000f92:	4603      	mov	r3, r0
 8000f94:	72fb      	strb	r3, [r7, #11]
	if (result == 0)
 8000f96:	7afb      	ldrb	r3, [r7, #11]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d101      	bne.n	8000fa0 <style_check+0x34>
	{
		style = 2;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	60fb      	str	r3, [r7, #12]
	}
	result = strcmp(stl, cursief);
 8000fa0:	4914      	ldr	r1, [pc, #80]	; (8000ff4 <style_check+0x88>)
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f7ff f914 	bl	80001d0 <strcmp>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	72fb      	strb	r3, [r7, #11]
	if (result == 0)
 8000fac:	7afb      	ldrb	r3, [r7, #11]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d102      	bne.n	8000fb8 <style_check+0x4c>
	{
		style = 3;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	e013      	b.n	8000fe0 <style_check+0x74>
	}
	else if(strcmp(stl, vet) != 0 && strcmp(stl, normaal) != 0)
 8000fb8:	490d      	ldr	r1, [pc, #52]	; (8000ff0 <style_check+0x84>)
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff f908 	bl	80001d0 <strcmp>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d00c      	beq.n	8000fe0 <style_check+0x74>
 8000fc6:	4909      	ldr	r1, [pc, #36]	; (8000fec <style_check+0x80>)
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f7ff f901 	bl	80001d0 <strcmp>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d005      	beq.n	8000fe0 <style_check+0x74>
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)"wrong style\n\r", sizeof("wrong style"),100);
 8000fd4:	2364      	movs	r3, #100	; 0x64
 8000fd6:	220c      	movs	r2, #12
 8000fd8:	4907      	ldr	r1, [pc, #28]	; (8000ff8 <style_check+0x8c>)
 8000fda:	4808      	ldr	r0, [pc, #32]	; (8000ffc <style_check+0x90>)
 8000fdc:	f005 f88d 	bl	80060fa <HAL_UART_Transmit>
	}

	return style;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000094 	.word	0x20000094
 8000ff0:	2000009c 	.word	0x2000009c
 8000ff4:	200000a0 	.word	0x200000a0
 8000ff8:	08008308 	.word	0x08008308
 8000ffc:	20000df0 	.word	0x20000df0

08001000 <color_check>:
// @param[in] color: char with the color
//
// @return return the color code
//--------------------------------------------------------------
int color_check(char color[12])
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
		int ret_val = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	60fb      	str	r3, [r7, #12]
		uint8_t result = 1;
 800100c:	2301      	movs	r3, #1
 800100e:	72fb      	strb	r3, [r7, #11]
		switch(color[0])
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	3b62      	subs	r3, #98	; 0x62
 8001016:	2b18      	cmp	r3, #24
 8001018:	f200 81c5 	bhi.w	80013a6 <color_check+0x3a6>
 800101c:	a201      	add	r2, pc, #4	; (adr r2, 8001024 <color_check+0x24>)
 800101e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001022:	bf00      	nop
 8001024:	08001305 	.word	0x08001305
 8001028:	080012b1 	.word	0x080012b1
 800102c:	080013a7 	.word	0x080013a7
 8001030:	080013a7 	.word	0x080013a7
 8001034:	080013a7 	.word	0x080013a7
 8001038:	08001235 	.word	0x08001235
 800103c:	080013a7 	.word	0x080013a7
 8001040:	080013a7 	.word	0x080013a7
 8001044:	080013a7 	.word	0x080013a7
 8001048:	080013a7 	.word	0x080013a7
 800104c:	080010b3 	.word	0x080010b3
 8001050:	080012db 	.word	0x080012db
 8001054:	080013a7 	.word	0x080013a7
 8001058:	080013a7 	.word	0x080013a7
 800105c:	080013a7 	.word	0x080013a7
 8001060:	080013a7 	.word	0x080013a7
 8001064:	080011e1 	.word	0x080011e1
 8001068:	080013a7 	.word	0x080013a7
 800106c:	080013a7 	.word	0x080013a7
 8001070:	080013a7 	.word	0x080013a7
 8001074:	080013a7 	.word	0x080013a7
 8001078:	0800120b 	.word	0x0800120b
 800107c:	080013a7 	.word	0x080013a7
 8001080:	080013a7 	.word	0x080013a7
 8001084:	08001089 	.word	0x08001089
		{
		case 'z':
			result = strcmp(color, zwart);
 8001088:	49ac      	ldr	r1, [pc, #688]	; (800133c <color_check+0x33c>)
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f7ff f8a0 	bl	80001d0 <strcmp>
 8001090:	4603      	mov	r3, r0
 8001092:	72fb      	strb	r3, [r7, #11]
			if (result == 0)
 8001094:	7afb      	ldrb	r3, [r7, #11]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d104      	bne.n	80010a4 <color_check+0xa4>
			{
			ret_val = VGA_COL_BLACK;
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
			result = 1;
 800109e:	2301      	movs	r3, #1
 80010a0:	72fb      	strb	r3, [r7, #11]
			}
			else
			{
				HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
			}
			break;
 80010a2:	e180      	b.n	80013a6 <color_check+0x3a6>
				HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
 80010a4:	2364      	movs	r3, #100	; 0x64
 80010a6:	220c      	movs	r2, #12
 80010a8:	49a5      	ldr	r1, [pc, #660]	; (8001340 <color_check+0x340>)
 80010aa:	48a6      	ldr	r0, [pc, #664]	; (8001344 <color_check+0x344>)
 80010ac:	f005 f825 	bl	80060fa <HAL_UART_Transmit>
			break;
 80010b0:	e179      	b.n	80013a6 <color_check+0x3a6>
		case 'l':
			switch(color[5])
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	3305      	adds	r3, #5
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	3b62      	subs	r3, #98	; 0x62
 80010ba:	2b10      	cmp	r3, #16
 80010bc:	f200 816e 	bhi.w	800139c <color_check+0x39c>
 80010c0:	a201      	add	r2, pc, #4	; (adr r2, 80010c8 <color_check+0xc8>)
 80010c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c6:	bf00      	nop
 80010c8:	0800110d 	.word	0x0800110d
 80010cc:	0800118b 	.word	0x0800118b
 80010d0:	0800139d 	.word	0x0800139d
 80010d4:	0800139d 	.word	0x0800139d
 80010d8:	0800139d 	.word	0x0800139d
 80010dc:	08001137 	.word	0x08001137
 80010e0:	0800139d 	.word	0x0800139d
 80010e4:	0800139d 	.word	0x0800139d
 80010e8:	0800139d 	.word	0x0800139d
 80010ec:	0800139d 	.word	0x0800139d
 80010f0:	0800139d 	.word	0x0800139d
 80010f4:	080011b5 	.word	0x080011b5
 80010f8:	0800139d 	.word	0x0800139d
 80010fc:	0800139d 	.word	0x0800139d
 8001100:	0800139d 	.word	0x0800139d
 8001104:	0800139d 	.word	0x0800139d
 8001108:	08001161 	.word	0x08001161
			{
			case 'b':
				result = strcmp(color, lblauw);
 800110c:	498e      	ldr	r1, [pc, #568]	; (8001348 <color_check+0x348>)
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff f85e 	bl	80001d0 <strcmp>
 8001114:	4603      	mov	r3, r0
 8001116:	72fb      	strb	r3, [r7, #11]
				if (result == 0)
 8001118:	7afb      	ldrb	r3, [r7, #11]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d104      	bne.n	8001128 <color_check+0x128>
				{
				ret_val = VGA_COL_LIGHTBLUE;
 800111e:	232d      	movs	r3, #45	; 0x2d
 8001120:	60fb      	str	r3, [r7, #12]
				result = 1;
 8001122:	2301      	movs	r3, #1
 8001124:	72fb      	strb	r3, [r7, #11]
				}
				else
				{
					HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
				}
				break;
 8001126:	e05a      	b.n	80011de <color_check+0x1de>
					HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
 8001128:	2364      	movs	r3, #100	; 0x64
 800112a:	220c      	movs	r2, #12
 800112c:	4984      	ldr	r1, [pc, #528]	; (8001340 <color_check+0x340>)
 800112e:	4885      	ldr	r0, [pc, #532]	; (8001344 <color_check+0x344>)
 8001130:	f004 ffe3 	bl	80060fa <HAL_UART_Transmit>
				break;
 8001134:	e053      	b.n	80011de <color_check+0x1de>
			case 'g':
				result = strcmp(color, lgroen);
 8001136:	4985      	ldr	r1, [pc, #532]	; (800134c <color_check+0x34c>)
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f7ff f849 	bl	80001d0 <strcmp>
 800113e:	4603      	mov	r3, r0
 8001140:	72fb      	strb	r3, [r7, #11]
				if (result == 0)
 8001142:	7afb      	ldrb	r3, [r7, #11]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d104      	bne.n	8001152 <color_check+0x152>
				{
				ret_val = VGA_COL_LIGHTGREEN;
 8001148:	232e      	movs	r3, #46	; 0x2e
 800114a:	60fb      	str	r3, [r7, #12]
				result = 1;
 800114c:	2301      	movs	r3, #1
 800114e:	72fb      	strb	r3, [r7, #11]
				}
				else
				{
					HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
				}
				break;
 8001150:	e045      	b.n	80011de <color_check+0x1de>
					HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
 8001152:	2364      	movs	r3, #100	; 0x64
 8001154:	220c      	movs	r2, #12
 8001156:	497a      	ldr	r1, [pc, #488]	; (8001340 <color_check+0x340>)
 8001158:	487a      	ldr	r0, [pc, #488]	; (8001344 <color_check+0x344>)
 800115a:	f004 ffce 	bl	80060fa <HAL_UART_Transmit>
				break;
 800115e:	e03e      	b.n	80011de <color_check+0x1de>
			case 'r':
				result = strcmp(color, lrood);
 8001160:	497b      	ldr	r1, [pc, #492]	; (8001350 <color_check+0x350>)
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f7ff f834 	bl	80001d0 <strcmp>
 8001168:	4603      	mov	r3, r0
 800116a:	72fb      	strb	r3, [r7, #11]
				if (result == 0)
 800116c:	7afb      	ldrb	r3, [r7, #11]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d104      	bne.n	800117c <color_check+0x17c>
				{
				ret_val = VGA_COL_LIGHTRED;
 8001172:	23c4      	movs	r3, #196	; 0xc4
 8001174:	60fb      	str	r3, [r7, #12]
				result = 1;
 8001176:	2301      	movs	r3, #1
 8001178:	72fb      	strb	r3, [r7, #11]
				}
				else
				{
					HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
				}
				break;
 800117a:	e030      	b.n	80011de <color_check+0x1de>
					HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
 800117c:	2364      	movs	r3, #100	; 0x64
 800117e:	220c      	movs	r2, #12
 8001180:	496f      	ldr	r1, [pc, #444]	; (8001340 <color_check+0x340>)
 8001182:	4870      	ldr	r0, [pc, #448]	; (8001344 <color_check+0x344>)
 8001184:	f004 ffb9 	bl	80060fa <HAL_UART_Transmit>
				break;
 8001188:	e029      	b.n	80011de <color_check+0x1de>
			case 'c':
				result = strcmp(color, lcyaan);
 800118a:	4972      	ldr	r1, [pc, #456]	; (8001354 <color_check+0x354>)
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f7ff f81f 	bl	80001d0 <strcmp>
 8001192:	4603      	mov	r3, r0
 8001194:	72fb      	strb	r3, [r7, #11]
				if (result == 0)
 8001196:	7afb      	ldrb	r3, [r7, #11]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d104      	bne.n	80011a6 <color_check+0x1a6>
				{
				ret_val = VGA_COL_LIGHTCYAN;
 800119c:	2375      	movs	r3, #117	; 0x75
 800119e:	60fb      	str	r3, [r7, #12]
				result = 1;
 80011a0:	2301      	movs	r3, #1
 80011a2:	72fb      	strb	r3, [r7, #11]
				}
				else
				{
					HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
				}
				break;
 80011a4:	e01b      	b.n	80011de <color_check+0x1de>
					HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
 80011a6:	2364      	movs	r3, #100	; 0x64
 80011a8:	220c      	movs	r2, #12
 80011aa:	4965      	ldr	r1, [pc, #404]	; (8001340 <color_check+0x340>)
 80011ac:	4865      	ldr	r0, [pc, #404]	; (8001344 <color_check+0x344>)
 80011ae:	f004 ffa4 	bl	80060fa <HAL_UART_Transmit>
				break;
 80011b2:	e014      	b.n	80011de <color_check+0x1de>
			case 'm':
				result = strcmp(color, lmagenta);
 80011b4:	4968      	ldr	r1, [pc, #416]	; (8001358 <color_check+0x358>)
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff f80a 	bl	80001d0 <strcmp>
 80011bc:	4603      	mov	r3, r0
 80011be:	72fb      	strb	r3, [r7, #11]
				if (result == 0)
 80011c0:	7afb      	ldrb	r3, [r7, #11]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d104      	bne.n	80011d0 <color_check+0x1d0>
				{
				ret_val = VGA_COL_LIGHTMAGENTA;
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
				result = 1;
 80011ca:	2301      	movs	r3, #1
 80011cc:	72fb      	strb	r3, [r7, #11]
				}
				else
				{
					HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
				}
				break;
 80011ce:	e005      	b.n	80011dc <color_check+0x1dc>
					HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
 80011d0:	2364      	movs	r3, #100	; 0x64
 80011d2:	220c      	movs	r2, #12
 80011d4:	495a      	ldr	r1, [pc, #360]	; (8001340 <color_check+0x340>)
 80011d6:	485b      	ldr	r0, [pc, #364]	; (8001344 <color_check+0x344>)
 80011d8:	f004 ff8f 	bl	80060fa <HAL_UART_Transmit>
				break;
 80011dc:	bf00      	nop
			}
			break;
 80011de:	e0dd      	b.n	800139c <color_check+0x39c>
		case 'r':
			result = strcmp(color, rood);
 80011e0:	495e      	ldr	r1, [pc, #376]	; (800135c <color_check+0x35c>)
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f7fe fff4 	bl	80001d0 <strcmp>
 80011e8:	4603      	mov	r3, r0
 80011ea:	72fb      	strb	r3, [r7, #11]
			if (result == 0)
 80011ec:	7afb      	ldrb	r3, [r7, #11]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d104      	bne.n	80011fc <color_check+0x1fc>
			{
			ret_val = VGA_COL_RED;
 80011f2:	23e0      	movs	r3, #224	; 0xe0
 80011f4:	60fb      	str	r3, [r7, #12]
			result = 1;
 80011f6:	2301      	movs	r3, #1
 80011f8:	72fb      	strb	r3, [r7, #11]
			}
			else
			{
				HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
			}
			break;
 80011fa:	e0d4      	b.n	80013a6 <color_check+0x3a6>
				HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
 80011fc:	2364      	movs	r3, #100	; 0x64
 80011fe:	220c      	movs	r2, #12
 8001200:	494f      	ldr	r1, [pc, #316]	; (8001340 <color_check+0x340>)
 8001202:	4850      	ldr	r0, [pc, #320]	; (8001344 <color_check+0x344>)
 8001204:	f004 ff79 	bl	80060fa <HAL_UART_Transmit>
			break;
 8001208:	e0cd      	b.n	80013a6 <color_check+0x3a6>
		case 'w':
			result = strcmp(color, wit);
 800120a:	4955      	ldr	r1, [pc, #340]	; (8001360 <color_check+0x360>)
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7fe ffdf 	bl	80001d0 <strcmp>
 8001212:	4603      	mov	r3, r0
 8001214:	72fb      	strb	r3, [r7, #11]
			if (result == 0)
 8001216:	7afb      	ldrb	r3, [r7, #11]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d104      	bne.n	8001226 <color_check+0x226>
			{
			ret_val = VGA_COL_WHITE;
 800121c:	23ff      	movs	r3, #255	; 0xff
 800121e:	60fb      	str	r3, [r7, #12]
			result = 1;
 8001220:	2301      	movs	r3, #1
 8001222:	72fb      	strb	r3, [r7, #11]
			}
			else
			{
				HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
			}
			break;
 8001224:	e0bf      	b.n	80013a6 <color_check+0x3a6>
				HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
 8001226:	2364      	movs	r3, #100	; 0x64
 8001228:	220c      	movs	r2, #12
 800122a:	4945      	ldr	r1, [pc, #276]	; (8001340 <color_check+0x340>)
 800122c:	4845      	ldr	r0, [pc, #276]	; (8001344 <color_check+0x344>)
 800122e:	f004 ff64 	bl	80060fa <HAL_UART_Transmit>
			break;
 8001232:	e0b8      	b.n	80013a6 <color_check+0x3a6>
		case 'g':
			result = strcmp(color, geel);
 8001234:	494b      	ldr	r1, [pc, #300]	; (8001364 <color_check+0x364>)
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7fe ffca 	bl	80001d0 <strcmp>
 800123c:	4603      	mov	r3, r0
 800123e:	72fb      	strb	r3, [r7, #11]
			if (result == 0)
 8001240:	7afb      	ldrb	r3, [r7, #11]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d103      	bne.n	800124e <color_check+0x24e>
			{
			ret_val = VGA_COL_YELLOW;
 8001246:	23fc      	movs	r3, #252	; 0xfc
 8001248:	60fb      	str	r3, [r7, #12]
			result = 1;
 800124a:	2301      	movs	r3, #1
 800124c:	72fb      	strb	r3, [r7, #11]
			}
			result = strcmp(color, grijs);
 800124e:	4946      	ldr	r1, [pc, #280]	; (8001368 <color_check+0x368>)
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7fe ffbd 	bl	80001d0 <strcmp>
 8001256:	4603      	mov	r3, r0
 8001258:	72fb      	strb	r3, [r7, #11]
			if (result == 0)
 800125a:	7afb      	ldrb	r3, [r7, #11]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d103      	bne.n	8001268 <color_check+0x268>
			{
			ret_val = VGA_COL_GRAY;
 8001260:	2300      	movs	r3, #0
 8001262:	60fb      	str	r3, [r7, #12]
			result = 1;
 8001264:	2301      	movs	r3, #1
 8001266:	72fb      	strb	r3, [r7, #11]
			}
			result = strcmp(color, groen);
 8001268:	4940      	ldr	r1, [pc, #256]	; (800136c <color_check+0x36c>)
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f7fe ffb0 	bl	80001d0 <strcmp>
 8001270:	4603      	mov	r3, r0
 8001272:	72fb      	strb	r3, [r7, #11]

			if (result == 0)
 8001274:	7afb      	ldrb	r3, [r7, #11]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d104      	bne.n	8001284 <color_check+0x284>
			{
			ret_val = VGA_COL_GREEN;
 800127a:	231c      	movs	r3, #28
 800127c:	60fb      	str	r3, [r7, #12]
			result = 1;
 800127e:	2301      	movs	r3, #1
 8001280:	72fb      	strb	r3, [r7, #11]
			}
			else if(strcmp(color, geel) != 0 && strcmp(color, grijs) != 0)
			{
				HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
			}
			break;
 8001282:	e08d      	b.n	80013a0 <color_check+0x3a0>
			else if(strcmp(color, geel) != 0 && strcmp(color, grijs) != 0)
 8001284:	4937      	ldr	r1, [pc, #220]	; (8001364 <color_check+0x364>)
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7fe ffa2 	bl	80001d0 <strcmp>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	f000 8086 	beq.w	80013a0 <color_check+0x3a0>
 8001294:	4934      	ldr	r1, [pc, #208]	; (8001368 <color_check+0x368>)
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f7fe ff9a 	bl	80001d0 <strcmp>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d07e      	beq.n	80013a0 <color_check+0x3a0>
				HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
 80012a2:	2364      	movs	r3, #100	; 0x64
 80012a4:	220c      	movs	r2, #12
 80012a6:	4926      	ldr	r1, [pc, #152]	; (8001340 <color_check+0x340>)
 80012a8:	4826      	ldr	r0, [pc, #152]	; (8001344 <color_check+0x344>)
 80012aa:	f004 ff26 	bl	80060fa <HAL_UART_Transmit>
			break;
 80012ae:	e077      	b.n	80013a0 <color_check+0x3a0>
		case 'c':
			result = strcmp(color, cyaan);
 80012b0:	492f      	ldr	r1, [pc, #188]	; (8001370 <color_check+0x370>)
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f7fe ff8c 	bl	80001d0 <strcmp>
 80012b8:	4603      	mov	r3, r0
 80012ba:	72fb      	strb	r3, [r7, #11]
			if (result == 0)
 80012bc:	7afb      	ldrb	r3, [r7, #11]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d104      	bne.n	80012cc <color_check+0x2cc>
			{
			ret_val = VGA_COL_CYAN;
 80012c2:	231f      	movs	r3, #31
 80012c4:	60fb      	str	r3, [r7, #12]
			result = 1;
 80012c6:	2301      	movs	r3, #1
 80012c8:	72fb      	strb	r3, [r7, #11]
			}
			else
			{
				HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
			}
			break;
 80012ca:	e06c      	b.n	80013a6 <color_check+0x3a6>
				HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
 80012cc:	2364      	movs	r3, #100	; 0x64
 80012ce:	220c      	movs	r2, #12
 80012d0:	491b      	ldr	r1, [pc, #108]	; (8001340 <color_check+0x340>)
 80012d2:	481c      	ldr	r0, [pc, #112]	; (8001344 <color_check+0x344>)
 80012d4:	f004 ff11 	bl	80060fa <HAL_UART_Transmit>
			break;
 80012d8:	e065      	b.n	80013a6 <color_check+0x3a6>
		case 'm':
			result = strcmp(color, magenta);
 80012da:	4926      	ldr	r1, [pc, #152]	; (8001374 <color_check+0x374>)
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7fe ff77 	bl	80001d0 <strcmp>
 80012e2:	4603      	mov	r3, r0
 80012e4:	72fb      	strb	r3, [r7, #11]
			if (result == 0)
 80012e6:	7afb      	ldrb	r3, [r7, #11]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d104      	bne.n	80012f6 <color_check+0x2f6>
			{
			ret_val = VGA_COL_MAGENTA;
 80012ec:	23e3      	movs	r3, #227	; 0xe3
 80012ee:	60fb      	str	r3, [r7, #12]
			result = 1;
 80012f0:	2301      	movs	r3, #1
 80012f2:	72fb      	strb	r3, [r7, #11]
			}
			else
			{
				HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
			}
			break;
 80012f4:	e057      	b.n	80013a6 <color_check+0x3a6>
				HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
 80012f6:	2364      	movs	r3, #100	; 0x64
 80012f8:	220c      	movs	r2, #12
 80012fa:	4911      	ldr	r1, [pc, #68]	; (8001340 <color_check+0x340>)
 80012fc:	4811      	ldr	r0, [pc, #68]	; (8001344 <color_check+0x344>)
 80012fe:	f004 fefc 	bl	80060fa <HAL_UART_Transmit>
			break;
 8001302:	e050      	b.n	80013a6 <color_check+0x3a6>
		case 'b':
			result = strcmp(color, blauw);
 8001304:	491c      	ldr	r1, [pc, #112]	; (8001378 <color_check+0x378>)
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7fe ff62 	bl	80001d0 <strcmp>
 800130c:	4603      	mov	r3, r0
 800130e:	72fb      	strb	r3, [r7, #11]
			if (result == 0)
 8001310:	7afb      	ldrb	r3, [r7, #11]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d103      	bne.n	800131e <color_check+0x31e>
			{
			ret_val = VGA_COL_BLUE;
 8001316:	2303      	movs	r3, #3
 8001318:	60fb      	str	r3, [r7, #12]
			result = 1;
 800131a:	2301      	movs	r3, #1
 800131c:	72fb      	strb	r3, [r7, #11]
			}
			result = strcmp(color, bruin);
 800131e:	4917      	ldr	r1, [pc, #92]	; (800137c <color_check+0x37c>)
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f7fe ff55 	bl	80001d0 <strcmp>
 8001326:	4603      	mov	r3, r0
 8001328:	72fb      	strb	r3, [r7, #11]
			if (result == 0)
 800132a:	7afb      	ldrb	r3, [r7, #11]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d127      	bne.n	8001380 <color_check+0x380>
			{
			ret_val = VGA_COL_BROWN;
 8001330:	2300      	movs	r3, #0
 8001332:	60fb      	str	r3, [r7, #12]
			result = 1;
 8001334:	2301      	movs	r3, #1
 8001336:	72fb      	strb	r3, [r7, #11]
			}
			else if(strcmp(color, blauw) != 0)
			{
				HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
			}
			break;
 8001338:	e034      	b.n	80013a4 <color_check+0x3a4>
 800133a:	bf00      	nop
 800133c:	2000000c 	.word	0x2000000c
 8001340:	08008318 	.word	0x08008318
 8001344:	20000df0 	.word	0x20000df0
 8001348:	20000014 	.word	0x20000014
 800134c:	20000028 	.word	0x20000028
 8001350:	20000048 	.word	0x20000048
 8001354:	2000003c 	.word	0x2000003c
 8001358:	2000005c 	.word	0x2000005c
 800135c:	20000000 	.word	0x20000000
 8001360:	2000007c 	.word	0x2000007c
 8001364:	20000070 	.word	0x20000070
 8001368:	20000074 	.word	0x20000074
 800136c:	20000020 	.word	0x20000020
 8001370:	20000034 	.word	0x20000034
 8001374:	20000054 	.word	0x20000054
 8001378:	20000004 	.word	0x20000004
 800137c:	20000068 	.word	0x20000068
			else if(strcmp(color, blauw) != 0)
 8001380:	490b      	ldr	r1, [pc, #44]	; (80013b0 <color_check+0x3b0>)
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7fe ff24 	bl	80001d0 <strcmp>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d00a      	beq.n	80013a4 <color_check+0x3a4>
				HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
 800138e:	2364      	movs	r3, #100	; 0x64
 8001390:	220c      	movs	r2, #12
 8001392:	4908      	ldr	r1, [pc, #32]	; (80013b4 <color_check+0x3b4>)
 8001394:	4808      	ldr	r0, [pc, #32]	; (80013b8 <color_check+0x3b8>)
 8001396:	f004 feb0 	bl	80060fa <HAL_UART_Transmit>
			break;
 800139a:	e003      	b.n	80013a4 <color_check+0x3a4>
			break;
 800139c:	bf00      	nop
 800139e:	e002      	b.n	80013a6 <color_check+0x3a6>
			break;
 80013a0:	bf00      	nop
 80013a2:	e000      	b.n	80013a6 <color_check+0x3a6>
			break;
 80013a4:	bf00      	nop
		}

	return ret_val;
 80013a6:	68fb      	ldr	r3, [r7, #12]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000004 	.word	0x20000004
 80013b4:	08008318 	.word	0x08008318
 80013b8:	20000df0 	.word	0x20000df0

080013bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013c2:	f002 fb53 	bl	8003a6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013c6:	f000 f843 	bl	8001450 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ca:	f7ff fc33 	bl	8000c34 <MX_GPIO_Init>
  MX_DMA_Init();
 80013ce:	f7ff fc11 	bl	8000bf4 <MX_DMA_Init>
  MX_TIM1_Init();
 80013d2:	f000 fa91 	bl	80018f8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80013d6:	f000 fadf 	bl	8001998 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80013da:	f000 fbf5 	bl	8001bc8 <MX_USART2_UART_Init>
  Bitmap_init();
 80013de:	f7ff fb4b 	bl	8000a78 <Bitmap_init>
  /* USER CODE BEGIN 2 */

  UB_VGA_Screen_Init(); // Init VGA-Screen
 80013e2:	f000 fc95 	bl	8001d10 <UB_VGA_Screen_Init>

  UB_VGA_FillScreen(VGA_COL_WHITE);
 80013e6:	20ff      	movs	r0, #255	; 0xff
 80013e8:	f000 fce4 	bl	8001db4 <UB_VGA_FillScreen>
//	  UB_VGA_DrawBitmap(0 + (i*9), 145, (i+526), VGA_COL_GREEN, 0);
//  }

//  	  UB_VGA_DrawBitmap(100, 100, 'a', 1, 1);

  for(i = 0; i < LINE_BUFLEN; i++)
 80013ec:	2300      	movs	r3, #0
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	e008      	b.n	8001404 <main+0x48>
	  input.line_rx_buffer[i] = 0;
 80013f2:	4a15      	ldr	r2, [pc, #84]	; (8001448 <main+0x8c>)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4413      	add	r3, r2
 80013f8:	3301      	adds	r3, #1
 80013fa:	2200      	movs	r2, #0
 80013fc:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < LINE_BUFLEN; i++)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	3301      	adds	r3, #1
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800140a:	dbf2      	blt.n	80013f2 <main+0x36>

  // Reset some stuff
  input.byte_buffer_rx[0] = 0;
 800140c:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <main+0x8c>)
 800140e:	2200      	movs	r2, #0
 8001410:	701a      	strb	r2, [r3, #0]
  input.char_counter = 0;
 8001412:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <main+0x8c>)
 8001414:	2200      	movs	r2, #0
 8001416:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  input.command_execute_flag = FALSE;
 800141a:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <main+0x8c>)
 800141c:	2200      	movs	r2, #0
 800141e:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c

  // HAl wants a memory location to store the charachter it receives from the UART
  // We will pass it an array, but we will not use it. We declare our own variable in the interupt handler
  // See stm32f4xx_it.c
  HAL_UART_Receive_IT(&huart2, input.byte_buffer_rx, BYTE_BUFLEN);
 8001422:	2201      	movs	r2, #1
 8001424:	4908      	ldr	r1, [pc, #32]	; (8001448 <main+0x8c>)
 8001426:	4809      	ldr	r0, [pc, #36]	; (800144c <main+0x90>)
 8001428:	f004 ff00 	bl	800622c <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  UB_VGA_SetPixel(160,120,VGA_COL_RED);
	  if(input.command_execute_flag == TRUE)
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <main+0x8c>)
 800142e:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 8001432:	2bff      	cmp	r3, #255	; 0xff
 8001434:	d1fa      	bne.n	800142c <main+0x70>
	  {
		  // jump to parser
		  FL_Input();
 8001436:	f7ff f8ad 	bl	8000594 <FL_Input>
		  logic();
 800143a:	f7ff fc73 	bl	8000d24 <logic>
		  // When finished reset the flag
		  input.command_execute_flag = FALSE;
 800143e:	4b02      	ldr	r3, [pc, #8]	; (8001448 <main+0x8c>)
 8001440:	2200      	movs	r2, #0
 8001442:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
	  if(input.command_execute_flag == TRUE)
 8001446:	e7f1      	b.n	800142c <main+0x70>
 8001448:	200008fc 	.word	0x200008fc
 800144c:	20000df0 	.word	0x20000df0

08001450 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b094      	sub	sp, #80	; 0x50
 8001454:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001456:	f107 0320 	add.w	r3, r7, #32
 800145a:	2230      	movs	r2, #48	; 0x30
 800145c:	2100      	movs	r1, #0
 800145e:	4618      	mov	r0, r3
 8001460:	f005 fec0 	bl	80071e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001464:	f107 030c 	add.w	r3, r7, #12
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001474:	2300      	movs	r3, #0
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	4b28      	ldr	r3, [pc, #160]	; (800151c <SystemClock_Config+0xcc>)
 800147a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147c:	4a27      	ldr	r2, [pc, #156]	; (800151c <SystemClock_Config+0xcc>)
 800147e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001482:	6413      	str	r3, [r2, #64]	; 0x40
 8001484:	4b25      	ldr	r3, [pc, #148]	; (800151c <SystemClock_Config+0xcc>)
 8001486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148c:	60bb      	str	r3, [r7, #8]
 800148e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001490:	2300      	movs	r3, #0
 8001492:	607b      	str	r3, [r7, #4]
 8001494:	4b22      	ldr	r3, [pc, #136]	; (8001520 <SystemClock_Config+0xd0>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a21      	ldr	r2, [pc, #132]	; (8001520 <SystemClock_Config+0xd0>)
 800149a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800149e:	6013      	str	r3, [r2, #0]
 80014a0:	4b1f      	ldr	r3, [pc, #124]	; (8001520 <SystemClock_Config+0xd0>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014a8:	607b      	str	r3, [r7, #4]
 80014aa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014ac:	2301      	movs	r3, #1
 80014ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014b6:	2302      	movs	r3, #2
 80014b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014c0:	2304      	movs	r3, #4
 80014c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80014c4:	23a8      	movs	r3, #168	; 0xa8
 80014c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014c8:	2302      	movs	r3, #2
 80014ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014cc:	2304      	movs	r3, #4
 80014ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014d0:	f107 0320 	add.w	r3, r7, #32
 80014d4:	4618      	mov	r0, r3
 80014d6:	f003 f995 	bl	8004804 <HAL_RCC_OscConfig>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014e0:	f000 f832 	bl	8001548 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014e4:	230f      	movs	r3, #15
 80014e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014e8:	2302      	movs	r3, #2
 80014ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014fc:	f107 030c 	add.w	r3, r7, #12
 8001500:	2105      	movs	r1, #5
 8001502:	4618      	mov	r0, r3
 8001504:	f003 fbec 	bl	8004ce0 <HAL_RCC_ClockConfig>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800150e:	f000 f81b 	bl	8001548 <Error_Handler>
  }
}
 8001512:	bf00      	nop
 8001514:	3750      	adds	r7, #80	; 0x50
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40023800 	.word	0x40023800
 8001520:	40007000 	.word	0x40007000

08001524 <__io_putchar>:
	#define USART_PRINTF int fputc(int ch, FILE *f)		//With other compiler printf calls fputc()
#endif /* __GNUC__ */

//Retargets the C library printf function to the USART
USART_PRINTF
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);	//Write character to UART2
 800152c:	1d39      	adds	r1, r7, #4
 800152e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001532:	2201      	movs	r2, #1
 8001534:	4803      	ldr	r0, [pc, #12]	; (8001544 <__io_putchar+0x20>)
 8001536:	f004 fde0 	bl	80060fa <HAL_UART_Transmit>
	return ch;												//Return the character
 800153a:	687b      	ldr	r3, [r7, #4]
}
 800153c:	4618      	mov	r0, r3
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20000df0 	.word	0x20000df0

08001548 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
	...

08001558 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	607b      	str	r3, [r7, #4]
 8001562:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <HAL_MspInit+0x4c>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001566:	4a0f      	ldr	r2, [pc, #60]	; (80015a4 <HAL_MspInit+0x4c>)
 8001568:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800156c:	6453      	str	r3, [r2, #68]	; 0x44
 800156e:	4b0d      	ldr	r3, [pc, #52]	; (80015a4 <HAL_MspInit+0x4c>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001572:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001576:	607b      	str	r3, [r7, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	603b      	str	r3, [r7, #0]
 800157e:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <HAL_MspInit+0x4c>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	4a08      	ldr	r2, [pc, #32]	; (80015a4 <HAL_MspInit+0x4c>)
 8001584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001588:	6413      	str	r3, [r2, #64]	; 0x40
 800158a:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <HAL_MspInit+0x4c>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001592:	603b      	str	r3, [r7, #0]
 8001594:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	40023800 	.word	0x40023800

080015a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ba:	e7fe      	b.n	80015ba <HardFault_Handler+0x4>

080015bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c0:	e7fe      	b.n	80015c0 <MemManage_Handler+0x4>

080015c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015c6:	e7fe      	b.n	80015c6 <BusFault_Handler+0x4>

080015c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015cc:	e7fe      	b.n	80015cc <UsageFault_Handler+0x4>

080015ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015fc:	f002 fa88 	bl	8003b10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}

08001604 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001608:	4828      	ldr	r0, [pc, #160]	; (80016ac <TIM2_IRQHandler+0xa8>)
 800160a:	f003 fec5 	bl	8005398 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC3); // uncomment HAL_TIM_IRQHandler(&htim2); ^^
 800160e:	4b27      	ldr	r3, [pc, #156]	; (80016ac <TIM2_IRQHandler+0xa8>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f06f 0208 	mvn.w	r2, #8
 8001616:	611a      	str	r2, [r3, #16]

  VGA.hsync_cnt++;
 8001618:	4b25      	ldr	r3, [pc, #148]	; (80016b0 <TIM2_IRQHandler+0xac>)
 800161a:	881b      	ldrh	r3, [r3, #0]
 800161c:	3301      	adds	r3, #1
 800161e:	b29a      	uxth	r2, r3
 8001620:	4b23      	ldr	r3, [pc, #140]	; (80016b0 <TIM2_IRQHandler+0xac>)
 8001622:	801a      	strh	r2, [r3, #0]
  if (VGA.hsync_cnt >= VGA_VSYNC_PERIODE)
 8001624:	4b22      	ldr	r3, [pc, #136]	; (80016b0 <TIM2_IRQHandler+0xac>)
 8001626:	881b      	ldrh	r3, [r3, #0]
 8001628:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 800162c:	d905      	bls.n	800163a <TIM2_IRQHandler+0x36>
  {
    // -----------
    VGA.hsync_cnt = 0;
 800162e:	4b20      	ldr	r3, [pc, #128]	; (80016b0 <TIM2_IRQHandler+0xac>)
 8001630:	2200      	movs	r2, #0
 8001632:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr = (uint32_t)(&VGA_RAM1[0]);
 8001634:	4a1f      	ldr	r2, [pc, #124]	; (80016b4 <TIM2_IRQHandler+0xb0>)
 8001636:	4b1e      	ldr	r3, [pc, #120]	; (80016b0 <TIM2_IRQHandler+0xac>)
 8001638:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  GPIOB->BSRR = (VGA.hsync_cnt < VGA_VSYNC_IMP) ? VGA_VSYNC_Pin << 16u: VGA_VSYNC_Pin;
 800163a:	4b1d      	ldr	r3, [pc, #116]	; (80016b0 <TIM2_IRQHandler+0xac>)
 800163c:	881b      	ldrh	r3, [r3, #0]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d802      	bhi.n	8001648 <TIM2_IRQHandler+0x44>
 8001642:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001646:	e001      	b.n	800164c <TIM2_IRQHandler+0x48>
 8001648:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800164c:	4a1a      	ldr	r2, [pc, #104]	; (80016b8 <TIM2_IRQHandler+0xb4>)
 800164e:	6193      	str	r3, [r2, #24]

  // Test for DMA start
  if((VGA.hsync_cnt >= VGA_VSYNC_BILD_START) && (VGA.hsync_cnt <= VGA_VSYNC_BILD_STOP))
 8001650:	4b17      	ldr	r3, [pc, #92]	; (80016b0 <TIM2_IRQHandler+0xac>)
 8001652:	881b      	ldrh	r3, [r3, #0]
 8001654:	2b23      	cmp	r3, #35	; 0x23
 8001656:	d927      	bls.n	80016a8 <TIM2_IRQHandler+0xa4>
 8001658:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <TIM2_IRQHandler+0xac>)
 800165a:	881b      	ldrh	r3, [r3, #0]
 800165c:	f240 2202 	movw	r2, #514	; 0x202
 8001660:	4293      	cmp	r3, r2
 8001662:	d821      	bhi.n	80016a8 <TIM2_IRQHandler+0xa4>
  {
    // after FP start => DMA Transfer

    // DMA2 init
	  DMA2_Stream5->CR = VGA.dma2_cr_reg;
 8001664:	4a15      	ldr	r2, [pc, #84]	; (80016bc <TIM2_IRQHandler+0xb8>)
 8001666:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <TIM2_IRQHandler+0xac>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR = VGA.start_adr;
 800166c:	4a13      	ldr	r2, [pc, #76]	; (80016bc <TIM2_IRQHandler+0xb8>)
 800166e:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <TIM2_IRQHandler+0xac>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1 |= TIM_CR1_CEN; // __HAL_TIM_ENABLE(&htim1); // too slow?
 8001674:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <TIM2_IRQHandler+0xbc>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a11      	ldr	r2, [pc, #68]	; (80016c0 <TIM2_IRQHandler+0xbc>)
 800167a:	f043 0301 	orr.w	r3, r3, #1
 800167e:	6013      	str	r3, [r2, #0]
    // DMA2 enable
    __HAL_DMA_ENABLE(&hdma_tim1_up);
 8001680:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <TIM2_IRQHandler+0xc0>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <TIM2_IRQHandler+0xc0>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f042 0201 	orr.w	r2, r2, #1
 800168e:	601a      	str	r2, [r3, #0]
    // Test Adrespointer for high
    if(VGA.hsync_cnt & 0x01)
 8001690:	4b07      	ldr	r3, [pc, #28]	; (80016b0 <TIM2_IRQHandler+0xac>)
 8001692:	881b      	ldrh	r3, [r3, #0]
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	2b00      	cmp	r3, #0
 800169a:	d005      	beq.n	80016a8 <TIM2_IRQHandler+0xa4>
      VGA.start_adr += (VGA_DISPLAY_X + 1); // inc after Hsync
 800169c:	4b04      	ldr	r3, [pc, #16]	; (80016b0 <TIM2_IRQHandler+0xac>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f203 1341 	addw	r3, r3, #321	; 0x141
 80016a4:	4a02      	ldr	r2, [pc, #8]	; (80016b0 <TIM2_IRQHandler+0xac>)
 80016a6:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20000d50 	.word	0x20000d50
 80016b0:	20013b20 	.word	0x20013b20
 80016b4:	20000e30 	.word	0x20000e30
 80016b8:	40020400 	.word	0x40020400
 80016bc:	40026488 	.word	0x40026488
 80016c0:	40010000 	.word	0x40010000
 80016c4:	20000d90 	.word	0x20000d90

080016c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	// Store the byte we received on the UART
	char uart_char = USART2->DR;
 80016ce:	4b1a      	ldr	r3, [pc, #104]	; (8001738 <USART2_IRQHandler+0x70>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	71fb      	strb	r3, [r7, #7]

	//Ignore the '\n' character
	if(uart_char != LINE_FEED)
 80016d4:	79fb      	ldrb	r3, [r7, #7]
 80016d6:	2b0a      	cmp	r3, #10
 80016d8:	d026      	beq.n	8001728 <USART2_IRQHandler+0x60>
	{
		// Check for CR or a dot
		// There was a small bug in the terminal program.
		// By terminating your message with a dot you can ignore the CR (Enter) character
		if((uart_char == CARRIAGE_RETURN) || (uart_char == '.'))
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	2b0d      	cmp	r3, #13
 80016de:	d002      	beq.n	80016e6 <USART2_IRQHandler+0x1e>
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	2b2e      	cmp	r3, #46	; 0x2e
 80016e4:	d10e      	bne.n	8001704 <USART2_IRQHandler+0x3c>
		{
			input.command_execute_flag = TRUE;
 80016e6:	4b15      	ldr	r3, [pc, #84]	; (800173c <USART2_IRQHandler+0x74>)
 80016e8:	22ff      	movs	r2, #255	; 0xff
 80016ea:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			// Store the message length for processing
			input.msglen = input.char_counter;
 80016ee:	4b13      	ldr	r3, [pc, #76]	; (800173c <USART2_IRQHandler+0x74>)
 80016f0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80016f4:	4a11      	ldr	r2, [pc, #68]	; (800173c <USART2_IRQHandler+0x74>)
 80016f6:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			// Reset the counter for the next line
			input.char_counter = 0;
 80016fa:	4b10      	ldr	r3, [pc, #64]	; (800173c <USART2_IRQHandler+0x74>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8001702:	e011      	b.n	8001728 <USART2_IRQHandler+0x60>
			//Gently exit interrupt
		}
		else
		{
			input.command_execute_flag = FALSE;
 8001704:	4b0d      	ldr	r3, [pc, #52]	; (800173c <USART2_IRQHandler+0x74>)
 8001706:	2200      	movs	r2, #0
 8001708:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			input.line_rx_buffer[input.char_counter] = uart_char;
 800170c:	4b0b      	ldr	r3, [pc, #44]	; (800173c <USART2_IRQHandler+0x74>)
 800170e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001712:	4a0a      	ldr	r2, [pc, #40]	; (800173c <USART2_IRQHandler+0x74>)
 8001714:	4413      	add	r3, r2
 8001716:	79fa      	ldrb	r2, [r7, #7]
 8001718:	705a      	strb	r2, [r3, #1]
			input.char_counter++;
 800171a:	4b08      	ldr	r3, [pc, #32]	; (800173c <USART2_IRQHandler+0x74>)
 800171c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001720:	3301      	adds	r3, #1
 8001722:	4a06      	ldr	r2, [pc, #24]	; (800173c <USART2_IRQHandler+0x74>)
 8001724:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
		}
	}

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001728:	4805      	ldr	r0, [pc, #20]	; (8001740 <USART2_IRQHandler+0x78>)
 800172a:	f004 fdd5 	bl	80062d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40004400 	.word	0x40004400
 800173c:	200008fc 	.word	0x200008fc
 8001740:	20000df0 	.word	0x20000df0

08001744 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

    // Timer1 stop
    __HAL_TIM_DISABLE(&htim1);
 8001748:	4b10      	ldr	r3, [pc, #64]	; (800178c <DMA2_Stream5_IRQHandler+0x48>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	6a1a      	ldr	r2, [r3, #32]
 800174e:	f241 1311 	movw	r3, #4369	; 0x1111
 8001752:	4013      	ands	r3, r2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d10f      	bne.n	8001778 <DMA2_Stream5_IRQHandler+0x34>
 8001758:	4b0c      	ldr	r3, [pc, #48]	; (800178c <DMA2_Stream5_IRQHandler+0x48>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6a1a      	ldr	r2, [r3, #32]
 800175e:	f240 4344 	movw	r3, #1092	; 0x444
 8001762:	4013      	ands	r3, r2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d107      	bne.n	8001778 <DMA2_Stream5_IRQHandler+0x34>
 8001768:	4b08      	ldr	r3, [pc, #32]	; (800178c <DMA2_Stream5_IRQHandler+0x48>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	4b07      	ldr	r3, [pc, #28]	; (800178c <DMA2_Stream5_IRQHandler+0x48>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f022 0201 	bic.w	r2, r2, #1
 8001776:	601a      	str	r2, [r3, #0]
    // DMA2 disable
    // __HAL_DMA_DISABLE(&hdma_tim1_up); // not needed?
    // switch on black
    GPIOE->BSRR = VGA_GPIO_HINIBBLE << 16u;
 8001778:	4b05      	ldr	r3, [pc, #20]	; (8001790 <DMA2_Stream5_IRQHandler+0x4c>)
 800177a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800177e:	619a      	str	r2, [r3, #24]

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8001780:	4804      	ldr	r0, [pc, #16]	; (8001794 <DMA2_Stream5_IRQHandler+0x50>)
 8001782:	f002 fc1f 	bl	8003fc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000d10 	.word	0x20000d10
 8001790:	40021000 	.word	0x40021000
 8001794:	20000d90 	.word	0x20000d90

08001798 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	e00a      	b.n	80017c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017aa:	f3af 8000 	nop.w
 80017ae:	4601      	mov	r1, r0
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	1c5a      	adds	r2, r3, #1
 80017b4:	60ba      	str	r2, [r7, #8]
 80017b6:	b2ca      	uxtb	r2, r1
 80017b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	3301      	adds	r3, #1
 80017be:	617b      	str	r3, [r7, #20]
 80017c0:	697a      	ldr	r2, [r7, #20]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	dbf0      	blt.n	80017aa <_read+0x12>
	}

return len;
 80017c8:	687b      	ldr	r3, [r7, #4]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b086      	sub	sp, #24
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	60f8      	str	r0, [r7, #12]
 80017da:	60b9      	str	r1, [r7, #8]
 80017dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
 80017e2:	e009      	b.n	80017f8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	1c5a      	adds	r2, r3, #1
 80017e8:	60ba      	str	r2, [r7, #8]
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff fe99 	bl	8001524 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	3301      	adds	r3, #1
 80017f6:	617b      	str	r3, [r7, #20]
 80017f8:	697a      	ldr	r2, [r7, #20]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	dbf1      	blt.n	80017e4 <_write+0x12>
	}
	return len;
 8001800:	687b      	ldr	r3, [r7, #4]
}
 8001802:	4618      	mov	r0, r3
 8001804:	3718      	adds	r7, #24
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <_close>:

int _close(int file)
{
 800180a:	b480      	push	{r7}
 800180c:	b083      	sub	sp, #12
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
	return -1;
 8001812:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001816:	4618      	mov	r0, r3
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001822:	b480      	push	{r7}
 8001824:	b083      	sub	sp, #12
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
 800182a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001832:	605a      	str	r2, [r3, #4]
	return 0;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <_isatty>:

int _isatty(int file)
{
 8001842:	b480      	push	{r7}
 8001844:	b083      	sub	sp, #12
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
	return 1;
 800184a:	2301      	movs	r3, #1
}
 800184c:	4618      	mov	r0, r3
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
	return 0;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3714      	adds	r7, #20
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
	...

08001874 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800187c:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <_sbrk+0x50>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d102      	bne.n	800188a <_sbrk+0x16>
		heap_end = &end;
 8001884:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <_sbrk+0x50>)
 8001886:	4a10      	ldr	r2, [pc, #64]	; (80018c8 <_sbrk+0x54>)
 8001888:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800188a:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <_sbrk+0x50>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001890:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <_sbrk+0x50>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4413      	add	r3, r2
 8001898:	466a      	mov	r2, sp
 800189a:	4293      	cmp	r3, r2
 800189c:	d907      	bls.n	80018ae <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800189e:	f005 fc77 	bl	8007190 <__errno>
 80018a2:	4603      	mov	r3, r0
 80018a4:	220c      	movs	r2, #12
 80018a6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80018a8:	f04f 33ff 	mov.w	r3, #4294967295
 80018ac:	e006      	b.n	80018bc <_sbrk+0x48>
	}

	heap_end += incr;
 80018ae:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <_sbrk+0x50>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4413      	add	r3, r2
 80018b6:	4a03      	ldr	r2, [pc, #12]	; (80018c4 <_sbrk+0x50>)
 80018b8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80018ba:	68fb      	ldr	r3, [r7, #12]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20000d0c 	.word	0x20000d0c
 80018c8:	20013b40 	.word	0x20013b40

080018cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018d0:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <SystemInit+0x28>)
 80018d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018d6:	4a07      	ldr	r2, [pc, #28]	; (80018f4 <SystemInit+0x28>)
 80018d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018e0:	4b04      	ldr	r3, [pc, #16]	; (80018f4 <SystemInit+0x28>)
 80018e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018e6:	609a      	str	r2, [r3, #8]
#endif
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim1_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018fe:	f107 0308 	add.w	r3, r7, #8
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	605a      	str	r2, [r3, #4]
 8001908:	609a      	str	r2, [r3, #8]
 800190a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800190c:	463b      	mov	r3, r7
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8001914:	4b1e      	ldr	r3, [pc, #120]	; (8001990 <MX_TIM1_Init+0x98>)
 8001916:	4a1f      	ldr	r2, [pc, #124]	; (8001994 <MX_TIM1_Init+0x9c>)
 8001918:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = VGA_TIM1_PRESCALE;
 800191a:	4b1d      	ldr	r3, [pc, #116]	; (8001990 <MX_TIM1_Init+0x98>)
 800191c:	2200      	movs	r2, #0
 800191e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001920:	4b1b      	ldr	r3, [pc, #108]	; (8001990 <MX_TIM1_Init+0x98>)
 8001922:	2200      	movs	r2, #0
 8001924:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = VGA_TIM1_PERIODE;
 8001926:	4b1a      	ldr	r3, [pc, #104]	; (8001990 <MX_TIM1_Init+0x98>)
 8001928:	220b      	movs	r2, #11
 800192a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800192c:	4b18      	ldr	r3, [pc, #96]	; (8001990 <MX_TIM1_Init+0x98>)
 800192e:	2200      	movs	r2, #0
 8001930:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001932:	4b17      	ldr	r3, [pc, #92]	; (8001990 <MX_TIM1_Init+0x98>)
 8001934:	2200      	movs	r2, #0
 8001936:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001938:	4b15      	ldr	r3, [pc, #84]	; (8001990 <MX_TIM1_Init+0x98>)
 800193a:	2200      	movs	r2, #0
 800193c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800193e:	4814      	ldr	r0, [pc, #80]	; (8001990 <MX_TIM1_Init+0x98>)
 8001940:	f003 fbee 	bl	8005120 <HAL_TIM_Base_Init>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 800194a:	f7ff fdfd 	bl	8001548 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800194e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001952:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001954:	f107 0308 	add.w	r3, r7, #8
 8001958:	4619      	mov	r1, r3
 800195a:	480d      	ldr	r0, [pc, #52]	; (8001990 <MX_TIM1_Init+0x98>)
 800195c:	f003 feea 	bl	8005734 <HAL_TIM_ConfigClockSource>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8001966:	f7ff fdef 	bl	8001548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800196a:	2300      	movs	r3, #0
 800196c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800196e:	2300      	movs	r3, #0
 8001970:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001972:	463b      	mov	r3, r7
 8001974:	4619      	mov	r1, r3
 8001976:	4806      	ldr	r0, [pc, #24]	; (8001990 <MX_TIM1_Init+0x98>)
 8001978:	f004 fae2 	bl	8005f40 <HAL_TIMEx_MasterConfigSynchronization>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8001982:	f7ff fde1 	bl	8001548 <Error_Handler>
  }

}
 8001986:	bf00      	nop
 8001988:	3718      	adds	r7, #24
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20000d10 	.word	0x20000d10
 8001994:	40010000 	.word	0x40010000

08001998 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08a      	sub	sp, #40	; 0x28
 800199c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800199e:	f107 0320 	add.w	r3, r7, #32
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019a8:	1d3b      	adds	r3, r7, #4
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	605a      	str	r2, [r3, #4]
 80019b0:	609a      	str	r2, [r3, #8]
 80019b2:	60da      	str	r2, [r3, #12]
 80019b4:	611a      	str	r2, [r3, #16]
 80019b6:	615a      	str	r2, [r3, #20]
 80019b8:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 80019ba:	4b2a      	ldr	r3, [pc, #168]	; (8001a64 <MX_TIM2_Init+0xcc>)
 80019bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019c0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 80019c2:	4b28      	ldr	r3, [pc, #160]	; (8001a64 <MX_TIM2_Init+0xcc>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019c8:	4b26      	ldr	r3, [pc, #152]	; (8001a64 <MX_TIM2_Init+0xcc>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = VGA_TIM2_HSYNC_PERIODE;
 80019ce:	4b25      	ldr	r3, [pc, #148]	; (8001a64 <MX_TIM2_Init+0xcc>)
 80019d0:	f640 226b 	movw	r2, #2667	; 0xa6b
 80019d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019d6:	4b23      	ldr	r3, [pc, #140]	; (8001a64 <MX_TIM2_Init+0xcc>)
 80019d8:	2200      	movs	r2, #0
 80019da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019dc:	4b21      	ldr	r3, [pc, #132]	; (8001a64 <MX_TIM2_Init+0xcc>)
 80019de:	2200      	movs	r2, #0
 80019e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019e2:	4820      	ldr	r0, [pc, #128]	; (8001a64 <MX_TIM2_Init+0xcc>)
 80019e4:	f003 fbeb 	bl	80051be <HAL_TIM_PWM_Init>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80019ee:	f7ff fdab 	bl	8001548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019f2:	2300      	movs	r3, #0
 80019f4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019f6:	2300      	movs	r3, #0
 80019f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019fa:	f107 0320 	add.w	r3, r7, #32
 80019fe:	4619      	mov	r1, r3
 8001a00:	4818      	ldr	r0, [pc, #96]	; (8001a64 <MX_TIM2_Init+0xcc>)
 8001a02:	f004 fa9d 	bl	8005f40 <HAL_TIMEx_MasterConfigSynchronization>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001a0c:	f7ff fd9c 	bl	8001548 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a10:	2360      	movs	r3, #96	; 0x60
 8001a12:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = VGA_TIM2_HTRIGGER_START - VGA_TIM2_DMA_DELAY;
 8001a14:	f240 13bb 	movw	r3, #443	; 0x1bb
 8001a18:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a22:	1d3b      	adds	r3, r7, #4
 8001a24:	2208      	movs	r2, #8
 8001a26:	4619      	mov	r1, r3
 8001a28:	480e      	ldr	r0, [pc, #56]	; (8001a64 <MX_TIM2_Init+0xcc>)
 8001a2a:	f003 fdbd 	bl	80055a8 <HAL_TIM_PWM_ConfigChannel>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001a34:	f7ff fd88 	bl	8001548 <Error_Handler>
  }
  sConfigOC.Pulse = VGA_TIM2_HSYNC_IMP;
 8001a38:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001a3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a3e:	1d3b      	adds	r3, r7, #4
 8001a40:	220c      	movs	r2, #12
 8001a42:	4619      	mov	r1, r3
 8001a44:	4807      	ldr	r0, [pc, #28]	; (8001a64 <MX_TIM2_Init+0xcc>)
 8001a46:	f003 fdaf 	bl	80055a8 <HAL_TIM_PWM_ConfigChannel>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8001a50:	f7ff fd7a 	bl	8001548 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8001a54:	4803      	ldr	r0, [pc, #12]	; (8001a64 <MX_TIM2_Init+0xcc>)
 8001a56:	f000 f87f 	bl	8001b58 <HAL_TIM_MspPostInit>

}
 8001a5a:	bf00      	nop
 8001a5c:	3728      	adds	r7, #40	; 0x28
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20000d50 	.word	0x20000d50

08001a68 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a21      	ldr	r2, [pc, #132]	; (8001afc <HAL_TIM_Base_MspInit+0x94>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d13c      	bne.n	8001af4 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	4b20      	ldr	r3, [pc, #128]	; (8001b00 <HAL_TIM_Base_MspInit+0x98>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a82:	4a1f      	ldr	r2, [pc, #124]	; (8001b00 <HAL_TIM_Base_MspInit+0x98>)
 8001a84:	f043 0301 	orr.w	r3, r3, #1
 8001a88:	6453      	str	r3, [r2, #68]	; 0x44
 8001a8a:	4b1d      	ldr	r3, [pc, #116]	; (8001b00 <HAL_TIM_Base_MspInit+0x98>)
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 8001a96:	4b1b      	ldr	r3, [pc, #108]	; (8001b04 <HAL_TIM_Base_MspInit+0x9c>)
 8001a98:	4a1b      	ldr	r2, [pc, #108]	; (8001b08 <HAL_TIM_Base_MspInit+0xa0>)
 8001a9a:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8001a9c:	4b19      	ldr	r3, [pc, #100]	; (8001b04 <HAL_TIM_Base_MspInit+0x9c>)
 8001a9e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001aa2:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001aa4:	4b17      	ldr	r3, [pc, #92]	; (8001b04 <HAL_TIM_Base_MspInit+0x9c>)
 8001aa6:	2240      	movs	r2, #64	; 0x40
 8001aa8:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aaa:	4b16      	ldr	r3, [pc, #88]	; (8001b04 <HAL_TIM_Base_MspInit+0x9c>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8001ab0:	4b14      	ldr	r3, [pc, #80]	; (8001b04 <HAL_TIM_Base_MspInit+0x9c>)
 8001ab2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ab6:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ab8:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <HAL_TIM_Base_MspInit+0x9c>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001abe:	4b11      	ldr	r3, [pc, #68]	; (8001b04 <HAL_TIM_Base_MspInit+0x9c>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 8001ac4:	4b0f      	ldr	r3, [pc, #60]	; (8001b04 <HAL_TIM_Base_MspInit+0x9c>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001aca:	4b0e      	ldr	r3, [pc, #56]	; (8001b04 <HAL_TIM_Base_MspInit+0x9c>)
 8001acc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001ad0:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ad2:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <HAL_TIM_Base_MspInit+0x9c>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8001ad8:	480a      	ldr	r0, [pc, #40]	; (8001b04 <HAL_TIM_Base_MspInit+0x9c>)
 8001ada:	f002 f94b 	bl	8003d74 <HAL_DMA_Init>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <HAL_TIM_Base_MspInit+0x80>
    {
      Error_Handler();
 8001ae4:	f7ff fd30 	bl	8001548 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4a06      	ldr	r2, [pc, #24]	; (8001b04 <HAL_TIM_Base_MspInit+0x9c>)
 8001aec:	621a      	str	r2, [r3, #32]
 8001aee:	4a05      	ldr	r2, [pc, #20]	; (8001b04 <HAL_TIM_Base_MspInit+0x9c>)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001af4:	bf00      	nop
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40010000 	.word	0x40010000
 8001b00:	40023800 	.word	0x40023800
 8001b04:	20000d90 	.word	0x20000d90
 8001b08:	40026488 	.word	0x40026488

08001b0c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b1c:	d115      	bne.n	8001b4a <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <HAL_TIM_PWM_MspInit+0x48>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	4a0b      	ldr	r2, [pc, #44]	; (8001b54 <HAL_TIM_PWM_MspInit+0x48>)
 8001b28:	f043 0301 	orr.w	r3, r3, #1
 8001b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b2e:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <HAL_TIM_PWM_MspInit+0x48>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	201c      	movs	r0, #28
 8001b40:	f002 f8e1 	bl	8003d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b44:	201c      	movs	r0, #28
 8001b46:	f002 f8fa 	bl	8003d3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001b4a:	bf00      	nop
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40023800 	.word	0x40023800

08001b58 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b088      	sub	sp, #32
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b60:	f107 030c 	add.w	r3, r7, #12
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	60da      	str	r2, [r3, #12]
 8001b6e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b78:	d11e      	bne.n	8001bb8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60bb      	str	r3, [r7, #8]
 8001b7e:	4b10      	ldr	r3, [pc, #64]	; (8001bc0 <HAL_TIM_MspPostInit+0x68>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	4a0f      	ldr	r2, [pc, #60]	; (8001bc0 <HAL_TIM_MspPostInit+0x68>)
 8001b84:	f043 0302 	orr.w	r3, r3, #2
 8001b88:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8a:	4b0d      	ldr	r3, [pc, #52]	; (8001bc0 <HAL_TIM_MspPostInit+0x68>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	60bb      	str	r3, [r7, #8]
 8001b94:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = VGA_HSYNC_Pin;
 8001b96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b9a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VGA_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8001bac:	f107 030c 	add.w	r3, r7, #12
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4804      	ldr	r0, [pc, #16]	; (8001bc4 <HAL_TIM_MspPostInit+0x6c>)
 8001bb4:	f002 fc70 	bl	8004498 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001bb8:	bf00      	nop
 8001bba:	3720      	adds	r7, #32
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	40020400 	.word	0x40020400

08001bc8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001bcc:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <MX_USART2_UART_Init+0x4c>)
 8001bce:	4a12      	ldr	r2, [pc, #72]	; (8001c18 <MX_USART2_UART_Init+0x50>)
 8001bd0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bd2:	4b10      	ldr	r3, [pc, #64]	; (8001c14 <MX_USART2_UART_Init+0x4c>)
 8001bd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bd8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bda:	4b0e      	ldr	r3, [pc, #56]	; (8001c14 <MX_USART2_UART_Init+0x4c>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001be0:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <MX_USART2_UART_Init+0x4c>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001be6:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <MX_USART2_UART_Init+0x4c>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bec:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <MX_USART2_UART_Init+0x4c>)
 8001bee:	220c      	movs	r2, #12
 8001bf0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bf2:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <MX_USART2_UART_Init+0x4c>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bf8:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <MX_USART2_UART_Init+0x4c>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bfe:	4805      	ldr	r0, [pc, #20]	; (8001c14 <MX_USART2_UART_Init+0x4c>)
 8001c00:	f004 fa2e 	bl	8006060 <HAL_UART_Init>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c0a:	f7ff fc9d 	bl	8001548 <Error_Handler>
  }

}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	20000df0 	.word	0x20000df0
 8001c18:	40004400 	.word	0x40004400

08001c1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b08a      	sub	sp, #40	; 0x28
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c24:	f107 0314 	add.w	r3, r7, #20
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	60da      	str	r2, [r3, #12]
 8001c32:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a1d      	ldr	r2, [pc, #116]	; (8001cb0 <HAL_UART_MspInit+0x94>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d133      	bne.n	8001ca6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	613b      	str	r3, [r7, #16]
 8001c42:	4b1c      	ldr	r3, [pc, #112]	; (8001cb4 <HAL_UART_MspInit+0x98>)
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	4a1b      	ldr	r2, [pc, #108]	; (8001cb4 <HAL_UART_MspInit+0x98>)
 8001c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c4e:	4b19      	ldr	r3, [pc, #100]	; (8001cb4 <HAL_UART_MspInit+0x98>)
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c56:	613b      	str	r3, [r7, #16]
 8001c58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <HAL_UART_MspInit+0x98>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	4a14      	ldr	r2, [pc, #80]	; (8001cb4 <HAL_UART_MspInit+0x98>)
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6a:	4b12      	ldr	r3, [pc, #72]	; (8001cb4 <HAL_UART_MspInit+0x98>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c76:	230c      	movs	r3, #12
 8001c78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c82:	2303      	movs	r3, #3
 8001c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c86:	2307      	movs	r3, #7
 8001c88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c8a:	f107 0314 	add.w	r3, r7, #20
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4809      	ldr	r0, [pc, #36]	; (8001cb8 <HAL_UART_MspInit+0x9c>)
 8001c92:	f002 fc01 	bl	8004498 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c96:	2200      	movs	r2, #0
 8001c98:	2100      	movs	r1, #0
 8001c9a:	2026      	movs	r0, #38	; 0x26
 8001c9c:	f002 f833 	bl	8003d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ca0:	2026      	movs	r0, #38	; 0x26
 8001ca2:	f002 f84c 	bl	8003d3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001ca6:	bf00      	nop
 8001ca8:	3728      	adds	r7, #40	; 0x28
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40004400 	.word	0x40004400
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	40020000 	.word	0x40020000

08001cbc <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack     /* set stack pointer */
 8001cbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cf4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001cc0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001cc2:	e003      	b.n	8001ccc <LoopCopyDataInit>

08001cc4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001cc4:	4b0c      	ldr	r3, [pc, #48]	; (8001cf8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001cc6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001cc8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001cca:	3104      	adds	r1, #4

08001ccc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ccc:	480b      	ldr	r0, [pc, #44]	; (8001cfc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001cce:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001cd0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001cd2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001cd4:	d3f6      	bcc.n	8001cc4 <CopyDataInit>
  ldr  r2, =_sbss
 8001cd6:	4a0b      	ldr	r2, [pc, #44]	; (8001d04 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001cd8:	e002      	b.n	8001ce0 <LoopFillZerobss>

08001cda <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001cda:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001cdc:	f842 3b04 	str.w	r3, [r2], #4

08001ce0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ce0:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001ce2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ce4:	d3f9      	bcc.n	8001cda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ce6:	f7ff fdf1 	bl	80018cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cea:	f005 fa57 	bl	800719c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cee:	f7ff fb65 	bl	80013bc <main>
  bx  lr    
 8001cf2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001cf4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001cf8:	0800d448 	.word	0x0800d448
  ldr  r0, =_sdata
 8001cfc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d00:	20000118 	.word	0x20000118
  ldr  r2, =_sbss
 8001d04:	20000118 	.word	0x20000118
  ldr  r3, = _ebss
 8001d08:	20013b40 	.word	0x20013b40

08001d0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d0c:	e7fe      	b.n	8001d0c <ADC_IRQHandler>
	...

08001d10 <UB_VGA_Screen_Init>:
// @brief The initialisation of the VGA driver
// @details The function initialises the timer registers of timer 1 & 2.
//			It also initialises the DMA register.
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  VGA.hsync_cnt = 0;
 8001d14:	4b1f      	ldr	r3, [pc, #124]	; (8001d94 <UB_VGA_Screen_Init+0x84>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	801a      	strh	r2, [r3, #0]
  VGA.start_adr = 0;
 8001d1a:	4b1e      	ldr	r3, [pc, #120]	; (8001d94 <UB_VGA_Screen_Init+0x84>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg = 0;
 8001d20:	4b1c      	ldr	r3, [pc, #112]	; (8001d94 <UB_VGA_Screen_Init+0x84>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	609a      	str	r2, [r3, #8]

  GPIOB->BSRR = VGA_VSYNC_Pin;
 8001d26:	4b1c      	ldr	r3, [pc, #112]	; (8001d98 <UB_VGA_Screen_Init+0x88>)
 8001d28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d2c:	619a      	str	r2, [r3, #24]

  // TIM2
  HAL_TIM_Base_Start(&htim2);
 8001d2e:	481b      	ldr	r0, [pc, #108]	; (8001d9c <UB_VGA_Screen_Init+0x8c>)
 8001d30:	f003 fa21 	bl	8005176 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001d34:	210c      	movs	r1, #12
 8001d36:	4819      	ldr	r0, [pc, #100]	; (8001d9c <UB_VGA_Screen_Init+0x8c>)
 8001d38:	f003 fa6c 	bl	8005214 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 8001d3c:	2108      	movs	r1, #8
 8001d3e:	4817      	ldr	r0, [pc, #92]	; (8001d9c <UB_VGA_Screen_Init+0x8c>)
 8001d40:	f003 faa6 	bl	8005290 <HAL_TIM_PWM_Start_IT>

  // TIM1
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8001d44:	4b16      	ldr	r3, [pc, #88]	; (8001da0 <UB_VGA_Screen_Init+0x90>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	68da      	ldr	r2, [r3, #12]
 8001d4a:	4b15      	ldr	r3, [pc, #84]	; (8001da0 <UB_VGA_Screen_Init+0x90>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d52:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 8001d54:	4b12      	ldr	r3, [pc, #72]	; (8001da0 <UB_VGA_Screen_Init+0x90>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <UB_VGA_Screen_Init+0x90>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f042 0201 	orr.w	r2, r2, #1
 8001d62:	601a      	str	r2, [r3, #0]
  HAL_DMA_Start_IT(&hdma_tim1_up, (uint32_t)&VGA_RAM1[0], VGA_GPIOE_ODR_ADDRESS, VGA_DISPLAY_X + 1);
 8001d64:	490f      	ldr	r1, [pc, #60]	; (8001da4 <UB_VGA_Screen_Init+0x94>)
 8001d66:	f240 1341 	movw	r3, #321	; 0x141
 8001d6a:	4a0f      	ldr	r2, [pc, #60]	; (8001da8 <UB_VGA_Screen_Init+0x98>)
 8001d6c:	480f      	ldr	r0, [pc, #60]	; (8001dac <UB_VGA_Screen_Init+0x9c>)
 8001d6e:	f002 f8af 	bl	8003ed0 <HAL_DMA_Start_IT>

  HAL_DMA_Init(&hdma_tim1_up);
 8001d72:	480e      	ldr	r0, [pc, #56]	; (8001dac <UB_VGA_Screen_Init+0x9c>)
 8001d74:	f001 fffe 	bl	8003d74 <HAL_DMA_Init>
  __HAL_DMA_ENABLE_IT(&hdma_tim1_up, DMA_IT_TC);
 8001d78:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <UB_VGA_Screen_Init+0x9c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <UB_VGA_Screen_Init+0x9c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f042 0210 	orr.w	r2, r2, #16
 8001d86:	601a      	str	r2, [r3, #0]

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg = DMA2_Stream5->CR;
 8001d88:	4b09      	ldr	r3, [pc, #36]	; (8001db0 <UB_VGA_Screen_Init+0xa0>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a01      	ldr	r2, [pc, #4]	; (8001d94 <UB_VGA_Screen_Init+0x84>)
 8001d8e:	6093      	str	r3, [r2, #8]
}
 8001d90:	bf00      	nop
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	20013b20 	.word	0x20013b20
 8001d98:	40020400 	.word	0x40020400
 8001d9c:	20000d50 	.word	0x20000d50
 8001da0:	20000d10 	.word	0x20000d10
 8001da4:	20000e30 	.word	0x20000e30
 8001da8:	40021015 	.word	0x40021015
 8001dac:	20000d90 	.word	0x20000d90
 8001db0:	40026488 	.word	0x40026488

08001db4 <UB_VGA_FillScreen>:
// @details This function writes for all pixels a single color to the ram.
//
// @param[in] color The 8-bit color-code to display
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	81bb      	strh	r3, [r7, #12]
 8001dc2:	e012      	b.n	8001dea <UB_VGA_FillScreen+0x36>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	81fb      	strh	r3, [r7, #14]
 8001dc8:	e008      	b.n	8001ddc <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp, yp, color);
 8001dca:	79fa      	ldrb	r2, [r7, #7]
 8001dcc:	89b9      	ldrh	r1, [r7, #12]
 8001dce:	89fb      	ldrh	r3, [r7, #14]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f000 f813 	bl	8001dfc <UB_VGA_SetPixel>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 8001dd6:	89fb      	ldrh	r3, [r7, #14]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	81fb      	strh	r3, [r7, #14]
 8001ddc:	89fb      	ldrh	r3, [r7, #14]
 8001dde:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001de2:	d3f2      	bcc.n	8001dca <UB_VGA_FillScreen+0x16>
  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 8001de4:	89bb      	ldrh	r3, [r7, #12]
 8001de6:	3301      	adds	r3, #1
 8001de8:	81bb      	strh	r3, [r7, #12]
 8001dea:	89bb      	ldrh	r3, [r7, #12]
 8001dec:	2bef      	cmp	r3, #239	; 0xef
 8001dee:	d9e9      	bls.n	8001dc4 <UB_VGA_FillScreen+0x10>
    }
  }
}
 8001df0:	bf00      	nop
 8001df2:	bf00      	nop
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
	...

08001dfc <UB_VGA_SetPixel>:
// @param[in] xp The X-coordinate of the pixel
// @param[in] yp The Y-coordinate of the pixel
// @param[in] color The 8-bit color-code to display
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	80fb      	strh	r3, [r7, #6]
 8001e06:	460b      	mov	r3, r1
 8001e08:	80bb      	strh	r3, [r7, #4]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	70fb      	strb	r3, [r7, #3]
  if(xp >= VGA_DISPLAY_X)
 8001e0e:	88fb      	ldrh	r3, [r7, #6]
 8001e10:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001e14:	d301      	bcc.n	8001e1a <UB_VGA_SetPixel+0x1e>
    xp = 0;
 8001e16:	2300      	movs	r3, #0
 8001e18:	80fb      	strh	r3, [r7, #6]
  if(yp >= VGA_DISPLAY_Y)
 8001e1a:	88bb      	ldrh	r3, [r7, #4]
 8001e1c:	2bef      	cmp	r3, #239	; 0xef
 8001e1e:	d901      	bls.n	8001e24 <UB_VGA_SetPixel+0x28>
    yp = 0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp * (VGA_DISPLAY_X + 1)) + xp] = color;
 8001e24:	88ba      	ldrh	r2, [r7, #4]
 8001e26:	4613      	mov	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4413      	add	r3, r2
 8001e2c:	019b      	lsls	r3, r3, #6
 8001e2e:	441a      	add	r2, r3
 8001e30:	88fb      	ldrh	r3, [r7, #6]
 8001e32:	4413      	add	r3, r2
 8001e34:	4904      	ldr	r1, [pc, #16]	; (8001e48 <UB_VGA_SetPixel+0x4c>)
 8001e36:	78fa      	ldrb	r2, [r7, #3]
 8001e38:	54ca      	strb	r2, [r1, r3]
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	20000e30 	.word	0x20000e30

08001e4c <UB_VGA_SetLine>:
// @param[in] y2 The Y-coordinate of point 2 of the line
// @param[in] color The 8-bit color-code to display
// @param[in] width The width of the line in pixels
//--------------------------------------------------------------
void UB_VGA_SetLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t color, uint16_t width)
{
 8001e4c:	b590      	push	{r4, r7, lr}
 8001e4e:	b089      	sub	sp, #36	; 0x24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4604      	mov	r4, r0
 8001e54:	4608      	mov	r0, r1
 8001e56:	4611      	mov	r1, r2
 8001e58:	461a      	mov	r2, r3
 8001e5a:	4623      	mov	r3, r4
 8001e5c:	80fb      	strh	r3, [r7, #6]
 8001e5e:	4603      	mov	r3, r0
 8001e60:	80bb      	strh	r3, [r7, #4]
 8001e62:	460b      	mov	r3, r1
 8001e64:	807b      	strh	r3, [r7, #2]
 8001e66:	4613      	mov	r3, r2
 8001e68:	803b      	strh	r3, [r7, #0]
  uint16_t j; 								//Count amount of width pixels
  uint8_t neg;
  uint16_t amPerSide;
  float slope;

  dx=x2-x1;      							//the horizontal distance of the line
 8001e6a:	887a      	ldrh	r2, [r7, #2]
 8001e6c:	88fb      	ldrh	r3, [r7, #6]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	837b      	strh	r3, [r7, #26]
  dy=y2-y1;      							//the vertical distance of the line
 8001e74:	883a      	ldrh	r2, [r7, #0]
 8001e76:	88bb      	ldrh	r3, [r7, #4]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	833b      	strh	r3, [r7, #24]
  dxabs=abs(dx);
 8001e7e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	bfb8      	it	lt
 8001e86:	425b      	neglt	r3, r3
 8001e88:	82fb      	strh	r3, [r7, #22]
  dyabs=abs(dy);
 8001e8a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	bfb8      	it	lt
 8001e92:	425b      	neglt	r3, r3
 8001e94:	82bb      	strh	r3, [r7, #20]
  amPerSide = width / 2;
 8001e96:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001e98:	085b      	lsrs	r3, r3, #1
 8001e9a:	827b      	strh	r3, [r7, #18]
  neg = width % 2;
 8001e9c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	f003 0301 	and.w	r3, r3, #1
 8001ea4:	747b      	strb	r3, [r7, #17]

  if (dxabs>=dyabs) 						//the line is more horizontal than vertical
 8001ea6:	8afa      	ldrh	r2, [r7, #22]
 8001ea8:	8abb      	ldrh	r3, [r7, #20]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	f0c0 8096 	bcc.w	8001fdc <UB_VGA_SetLine+0x190>
  {
    slope=(float)dy / (float)dx;
 8001eb0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001eb4:	ee07 3a90 	vmov	s15, r3
 8001eb8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ebc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001ec0:	ee07 3a90 	vmov	s15, r3
 8001ec4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ec8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ecc:	edc7 7a03 	vstr	s15, [r7, #12]
    for(i=0;i!=dx;i++)
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	83fb      	strh	r3, [r7, #30]
 8001ed4:	e07b      	b.n	8001fce <UB_VGA_SetLine+0x182>
    {
      px=i+x1;
 8001ed6:	8bfa      	ldrh	r2, [r7, #30]
 8001ed8:	88fb      	ldrh	r3, [r7, #6]
 8001eda:	4413      	add	r3, r2
 8001edc:	817b      	strh	r3, [r7, #10]
      py=slope*i+y1;						//Calculate Y-value for the current Y-value
 8001ede:	8bfb      	ldrh	r3, [r7, #30]
 8001ee0:	ee07 3a90 	vmov	s15, r3
 8001ee4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ee8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001eec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ef0:	88bb      	ldrh	r3, [r7, #4]
 8001ef2:	ee07 3a90 	vmov	s15, r3
 8001ef6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001efa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001efe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f02:	ee17 3a90 	vmov	r3, s15
 8001f06:	813b      	strh	r3, [r7, #8]
      UB_VGA_SetPixel(px,py,color);
 8001f08:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001f0c:	8939      	ldrh	r1, [r7, #8]
 8001f0e:	897b      	ldrh	r3, [r7, #10]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff ff73 	bl	8001dfc <UB_VGA_SetPixel>

      for(j = 0; j <= amPerSide; j++)
 8001f16:	2300      	movs	r3, #0
 8001f18:	83bb      	strh	r3, [r7, #28]
 8001f1a:	e04f      	b.n	8001fbc <UB_VGA_SetLine+0x170>
      {
          py = slope * i + y1 + j;			//Calculate extra width-pixels on the positive side
 8001f1c:	8bfb      	ldrh	r3, [r7, #30]
 8001f1e:	ee07 3a90 	vmov	s15, r3
 8001f22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f26:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f2e:	88bb      	ldrh	r3, [r7, #4]
 8001f30:	ee07 3a90 	vmov	s15, r3
 8001f34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f3c:	8bbb      	ldrh	r3, [r7, #28]
 8001f3e:	ee07 3a90 	vmov	s15, r3
 8001f42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f4e:	ee17 3a90 	vmov	r3, s15
 8001f52:	813b      	strh	r3, [r7, #8]
          UB_VGA_SetPixel(px,py,color);
 8001f54:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001f58:	8939      	ldrh	r1, [r7, #8]
 8001f5a:	897b      	ldrh	r3, [r7, #10]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff ff4d 	bl	8001dfc <UB_VGA_SetPixel>

          if(!(neg) && (j == amPerSide))
 8001f62:	7c7b      	ldrb	r3, [r7, #17]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d103      	bne.n	8001f70 <UB_VGA_SetLine+0x124>
 8001f68:	8bba      	ldrh	r2, [r7, #28]
 8001f6a:	8a7b      	ldrh	r3, [r7, #18]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d02a      	beq.n	8001fc6 <UB_VGA_SetLine+0x17a>
        	  break;						//Break when positive and last width pixel

          py = slope * i + y1 - j;			//Calculate extra width-pixels on the negative side
 8001f70:	8bfb      	ldrh	r3, [r7, #30]
 8001f72:	ee07 3a90 	vmov	s15, r3
 8001f76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f7a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f82:	88bb      	ldrh	r3, [r7, #4]
 8001f84:	ee07 3a90 	vmov	s15, r3
 8001f88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f90:	8bbb      	ldrh	r3, [r7, #28]
 8001f92:	ee07 3a90 	vmov	s15, r3
 8001f96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fa2:	ee17 3a90 	vmov	r3, s15
 8001fa6:	813b      	strh	r3, [r7, #8]
          UB_VGA_SetPixel(px,py,color);
 8001fa8:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001fac:	8939      	ldrh	r1, [r7, #8]
 8001fae:	897b      	ldrh	r3, [r7, #10]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff ff23 	bl	8001dfc <UB_VGA_SetPixel>
      for(j = 0; j <= amPerSide; j++)
 8001fb6:	8bbb      	ldrh	r3, [r7, #28]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	83bb      	strh	r3, [r7, #28]
 8001fbc:	8bba      	ldrh	r2, [r7, #28]
 8001fbe:	8a7b      	ldrh	r3, [r7, #18]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d9ab      	bls.n	8001f1c <UB_VGA_SetLine+0xd0>
 8001fc4:	e000      	b.n	8001fc8 <UB_VGA_SetLine+0x17c>
        	  break;						//Break when positive and last width pixel
 8001fc6:	bf00      	nop
    for(i=0;i!=dx;i++)
 8001fc8:	8bfb      	ldrh	r3, [r7, #30]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	83fb      	strh	r3, [r7, #30]
 8001fce:	8bfa      	ldrh	r2, [r7, #30]
 8001fd0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	f47f af7e 	bne.w	8001ed6 <UB_VGA_SetLine+0x8a>
          px = slope * i + x1 - j;			//Calculate extra width-pixels on the negative side
    	  UB_VGA_SetPixel(px,py,color);
      }
    }
  }
}
 8001fda:	e094      	b.n	8002106 <UB_VGA_SetLine+0x2ba>
    slope=(float)dx / (float)dy;
 8001fdc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001fe0:	ee07 3a90 	vmov	s15, r3
 8001fe4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001fe8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001fec:	ee07 3a90 	vmov	s15, r3
 8001ff0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ff4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ff8:	edc7 7a03 	vstr	s15, [r7, #12]
    for(i=0;i!=dy;i++)
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	83fb      	strh	r3, [r7, #30]
 8002000:	e07b      	b.n	80020fa <UB_VGA_SetLine+0x2ae>
      px=slope*i+x1; 						//Calculate X-value for the current Y-value
 8002002:	8bfb      	ldrh	r3, [r7, #30]
 8002004:	ee07 3a90 	vmov	s15, r3
 8002008:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800200c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002010:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002014:	88fb      	ldrh	r3, [r7, #6]
 8002016:	ee07 3a90 	vmov	s15, r3
 800201a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800201e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002022:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002026:	ee17 3a90 	vmov	r3, s15
 800202a:	817b      	strh	r3, [r7, #10]
      py=i+y1;
 800202c:	8bfa      	ldrh	r2, [r7, #30]
 800202e:	88bb      	ldrh	r3, [r7, #4]
 8002030:	4413      	add	r3, r2
 8002032:	813b      	strh	r3, [r7, #8]
      UB_VGA_SetPixel(px,py,color);
 8002034:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002038:	8939      	ldrh	r1, [r7, #8]
 800203a:	897b      	ldrh	r3, [r7, #10]
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff fedd 	bl	8001dfc <UB_VGA_SetPixel>
      for(j = 0; j <= amPerSide; j++)
 8002042:	2300      	movs	r3, #0
 8002044:	83bb      	strh	r3, [r7, #28]
 8002046:	e04f      	b.n	80020e8 <UB_VGA_SetLine+0x29c>
          px = slope * i + x1 + j;			//Calculate extra width-pixels on the positive side
 8002048:	8bfb      	ldrh	r3, [r7, #30]
 800204a:	ee07 3a90 	vmov	s15, r3
 800204e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002052:	edd7 7a03 	vldr	s15, [r7, #12]
 8002056:	ee27 7a27 	vmul.f32	s14, s14, s15
 800205a:	88fb      	ldrh	r3, [r7, #6]
 800205c:	ee07 3a90 	vmov	s15, r3
 8002060:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002064:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002068:	8bbb      	ldrh	r3, [r7, #28]
 800206a:	ee07 3a90 	vmov	s15, r3
 800206e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002072:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002076:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800207a:	ee17 3a90 	vmov	r3, s15
 800207e:	817b      	strh	r3, [r7, #10]
    	  UB_VGA_SetPixel(px,py,color);
 8002080:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002084:	8939      	ldrh	r1, [r7, #8]
 8002086:	897b      	ldrh	r3, [r7, #10]
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff feb7 	bl	8001dfc <UB_VGA_SetPixel>
    	  if(!(neg) && (j == amPerSide))
 800208e:	7c7b      	ldrb	r3, [r7, #17]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d103      	bne.n	800209c <UB_VGA_SetLine+0x250>
 8002094:	8bba      	ldrh	r2, [r7, #28]
 8002096:	8a7b      	ldrh	r3, [r7, #18]
 8002098:	429a      	cmp	r2, r3
 800209a:	d02a      	beq.n	80020f2 <UB_VGA_SetLine+0x2a6>
          px = slope * i + x1 - j;			//Calculate extra width-pixels on the negative side
 800209c:	8bfb      	ldrh	r3, [r7, #30]
 800209e:	ee07 3a90 	vmov	s15, r3
 80020a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80020aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020ae:	88fb      	ldrh	r3, [r7, #6]
 80020b0:	ee07 3a90 	vmov	s15, r3
 80020b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020bc:	8bbb      	ldrh	r3, [r7, #28]
 80020be:	ee07 3a90 	vmov	s15, r3
 80020c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020ce:	ee17 3a90 	vmov	r3, s15
 80020d2:	817b      	strh	r3, [r7, #10]
    	  UB_VGA_SetPixel(px,py,color);
 80020d4:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80020d8:	8939      	ldrh	r1, [r7, #8]
 80020da:	897b      	ldrh	r3, [r7, #10]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff fe8d 	bl	8001dfc <UB_VGA_SetPixel>
      for(j = 0; j <= amPerSide; j++)
 80020e2:	8bbb      	ldrh	r3, [r7, #28]
 80020e4:	3301      	adds	r3, #1
 80020e6:	83bb      	strh	r3, [r7, #28]
 80020e8:	8bba      	ldrh	r2, [r7, #28]
 80020ea:	8a7b      	ldrh	r3, [r7, #18]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d9ab      	bls.n	8002048 <UB_VGA_SetLine+0x1fc>
 80020f0:	e000      	b.n	80020f4 <UB_VGA_SetLine+0x2a8>
    		  break;						//Break when positive and last width pixel
 80020f2:	bf00      	nop
    for(i=0;i!=dy;i++)
 80020f4:	8bfb      	ldrh	r3, [r7, #30]
 80020f6:	3301      	adds	r3, #1
 80020f8:	83fb      	strh	r3, [r7, #30]
 80020fa:	8bfa      	ldrh	r2, [r7, #30]
 80020fc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002100:	429a      	cmp	r2, r3
 8002102:	f47f af7e 	bne.w	8002002 <UB_VGA_SetLine+0x1b6>
}
 8002106:	bf00      	nop
 8002108:	3724      	adds	r7, #36	; 0x24
 800210a:	46bd      	mov	sp, r7
 800210c:	bd90      	pop	{r4, r7, pc}

0800210e <UB_VGA_DrawRectangle>:
// @param[in] lineWidth: The width of the line that determines the border of the rectangle
//--------------------------------------------------------------

void UB_VGA_DrawRectangle(uint16_t xp, uint16_t yp, uint8_t width, uint8_t height, uint8_t color, uint8_t filled,
		uint8_t bordercolor, uint8_t lineWidth)
{
 800210e:	b590      	push	{r4, r7, lr}
 8002110:	b085      	sub	sp, #20
 8002112:	af00      	add	r7, sp, #0
 8002114:	4604      	mov	r4, r0
 8002116:	4608      	mov	r0, r1
 8002118:	4611      	mov	r1, r2
 800211a:	461a      	mov	r2, r3
 800211c:	4623      	mov	r3, r4
 800211e:	80fb      	strh	r3, [r7, #6]
 8002120:	4603      	mov	r3, r0
 8002122:	80bb      	strh	r3, [r7, #4]
 8002124:	460b      	mov	r3, r1
 8002126:	70fb      	strb	r3, [r7, #3]
 8002128:	4613      	mov	r3, r2
 800212a:	70bb      	strb	r3, [r7, #2]
	uint16_t px;
	uint16_t py;
	uint16_t i;
	uint16_t j;

	if(xp >= VGA_DISPLAY_X)
 800212c:	88fb      	ldrh	r3, [r7, #6]
 800212e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002132:	d301      	bcc.n	8002138 <UB_VGA_DrawRectangle+0x2a>
	  xp = 0;
 8002134:	2300      	movs	r3, #0
 8002136:	80fb      	strh	r3, [r7, #6]
	if(yp >= VGA_DISPLAY_Y)
 8002138:	88bb      	ldrh	r3, [r7, #4]
 800213a:	2bef      	cmp	r3, #239	; 0xef
 800213c:	d901      	bls.n	8002142 <UB_VGA_DrawRectangle+0x34>
	  yp = 0;
 800213e:	2300      	movs	r3, #0
 8002140:	80bb      	strh	r3, [r7, #4]

	/* the vertical part of the rectangle */
	for(j=0; j < lineWidth; j++)
 8002142:	2300      	movs	r3, #0
 8002144:	81bb      	strh	r3, [r7, #12]
 8002146:	e03a      	b.n	80021be <UB_VGA_DrawRectangle+0xb0>
	{
		for(i=0; i <= height; i++)
 8002148:	2300      	movs	r3, #0
 800214a:	81fb      	strh	r3, [r7, #14]
 800214c:	e011      	b.n	8002172 <UB_VGA_DrawRectangle+0x64>
		{
			py = yp + i;
 800214e:	88ba      	ldrh	r2, [r7, #4]
 8002150:	89fb      	ldrh	r3, [r7, #14]
 8002152:	4413      	add	r3, r2
 8002154:	813b      	strh	r3, [r7, #8]
			px = xp + j;
 8002156:	88fa      	ldrh	r2, [r7, #6]
 8002158:	89bb      	ldrh	r3, [r7, #12]
 800215a:	4413      	add	r3, r2
 800215c:	817b      	strh	r3, [r7, #10]
			UB_VGA_SetPixel(px,py,bordercolor);
 800215e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002162:	8939      	ldrh	r1, [r7, #8]
 8002164:	897b      	ldrh	r3, [r7, #10]
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff fe48 	bl	8001dfc <UB_VGA_SetPixel>
		for(i=0; i <= height; i++)
 800216c:	89fb      	ldrh	r3, [r7, #14]
 800216e:	3301      	adds	r3, #1
 8002170:	81fb      	strh	r3, [r7, #14]
 8002172:	78bb      	ldrb	r3, [r7, #2]
 8002174:	b29b      	uxth	r3, r3
 8002176:	89fa      	ldrh	r2, [r7, #14]
 8002178:	429a      	cmp	r2, r3
 800217a:	d9e8      	bls.n	800214e <UB_VGA_DrawRectangle+0x40>
		}
		for(i=0; i <= height; i++)
 800217c:	2300      	movs	r3, #0
 800217e:	81fb      	strh	r3, [r7, #14]
 8002180:	e015      	b.n	80021ae <UB_VGA_DrawRectangle+0xa0>
		{
			py = yp + i;
 8002182:	88ba      	ldrh	r2, [r7, #4]
 8002184:	89fb      	ldrh	r3, [r7, #14]
 8002186:	4413      	add	r3, r2
 8002188:	813b      	strh	r3, [r7, #8]
			px = xp + width - j;
 800218a:	78fb      	ldrb	r3, [r7, #3]
 800218c:	b29a      	uxth	r2, r3
 800218e:	88fb      	ldrh	r3, [r7, #6]
 8002190:	4413      	add	r3, r2
 8002192:	b29a      	uxth	r2, r3
 8002194:	89bb      	ldrh	r3, [r7, #12]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	817b      	strh	r3, [r7, #10]
			UB_VGA_SetPixel(px,py,bordercolor);
 800219a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800219e:	8939      	ldrh	r1, [r7, #8]
 80021a0:	897b      	ldrh	r3, [r7, #10]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff fe2a 	bl	8001dfc <UB_VGA_SetPixel>
		for(i=0; i <= height; i++)
 80021a8:	89fb      	ldrh	r3, [r7, #14]
 80021aa:	3301      	adds	r3, #1
 80021ac:	81fb      	strh	r3, [r7, #14]
 80021ae:	78bb      	ldrb	r3, [r7, #2]
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	89fa      	ldrh	r2, [r7, #14]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d9e4      	bls.n	8002182 <UB_VGA_DrawRectangle+0x74>
	for(j=0; j < lineWidth; j++)
 80021b8:	89bb      	ldrh	r3, [r7, #12]
 80021ba:	3301      	adds	r3, #1
 80021bc:	81bb      	strh	r3, [r7, #12]
 80021be:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	89ba      	ldrh	r2, [r7, #12]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d3be      	bcc.n	8002148 <UB_VGA_DrawRectangle+0x3a>
		}
	}

    /* the horizontal part of the rectangle */
	for(j=0; j < lineWidth; j++)
 80021ca:	2300      	movs	r3, #0
 80021cc:	81bb      	strh	r3, [r7, #12]
 80021ce:	e048      	b.n	8002262 <UB_VGA_DrawRectangle+0x154>
	{
		for(i=0; i <= width-lineWidth; i++)
 80021d0:	2300      	movs	r3, #0
 80021d2:	81fb      	strh	r3, [r7, #14]
 80021d4:	e016      	b.n	8002204 <UB_VGA_DrawRectangle+0xf6>
		{
			py = yp + j;
 80021d6:	88ba      	ldrh	r2, [r7, #4]
 80021d8:	89bb      	ldrh	r3, [r7, #12]
 80021da:	4413      	add	r3, r2
 80021dc:	813b      	strh	r3, [r7, #8]
			px = xp + i + lineWidth;
 80021de:	88fa      	ldrh	r2, [r7, #6]
 80021e0:	89fb      	ldrh	r3, [r7, #14]
 80021e2:	4413      	add	r3, r2
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	4413      	add	r3, r2
 80021ee:	817b      	strh	r3, [r7, #10]
			UB_VGA_SetPixel(px,py,bordercolor);
 80021f0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80021f4:	8939      	ldrh	r1, [r7, #8]
 80021f6:	897b      	ldrh	r3, [r7, #10]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff fdff 	bl	8001dfc <UB_VGA_SetPixel>
		for(i=0; i <= width-lineWidth; i++)
 80021fe:	89fb      	ldrh	r3, [r7, #14]
 8002200:	3301      	adds	r3, #1
 8002202:	81fb      	strh	r3, [r7, #14]
 8002204:	89fa      	ldrh	r2, [r7, #14]
 8002206:	78f9      	ldrb	r1, [r7, #3]
 8002208:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800220c:	1acb      	subs	r3, r1, r3
 800220e:	429a      	cmp	r2, r3
 8002210:	dde1      	ble.n	80021d6 <UB_VGA_DrawRectangle+0xc8>
		}
		for(i=0; i <= width-lineWidth; i++)
 8002212:	2300      	movs	r3, #0
 8002214:	81fb      	strh	r3, [r7, #14]
 8002216:	e01a      	b.n	800224e <UB_VGA_DrawRectangle+0x140>
		{
			py = yp + height - j;
 8002218:	78bb      	ldrb	r3, [r7, #2]
 800221a:	b29a      	uxth	r2, r3
 800221c:	88bb      	ldrh	r3, [r7, #4]
 800221e:	4413      	add	r3, r2
 8002220:	b29a      	uxth	r2, r3
 8002222:	89bb      	ldrh	r3, [r7, #12]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	813b      	strh	r3, [r7, #8]
			px = xp + i + lineWidth;
 8002228:	88fa      	ldrh	r2, [r7, #6]
 800222a:	89fb      	ldrh	r3, [r7, #14]
 800222c:	4413      	add	r3, r2
 800222e:	b29a      	uxth	r2, r3
 8002230:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002234:	b29b      	uxth	r3, r3
 8002236:	4413      	add	r3, r2
 8002238:	817b      	strh	r3, [r7, #10]
			UB_VGA_SetPixel(px,py,bordercolor);
 800223a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800223e:	8939      	ldrh	r1, [r7, #8]
 8002240:	897b      	ldrh	r3, [r7, #10]
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff fdda 	bl	8001dfc <UB_VGA_SetPixel>
		for(i=0; i <= width-lineWidth; i++)
 8002248:	89fb      	ldrh	r3, [r7, #14]
 800224a:	3301      	adds	r3, #1
 800224c:	81fb      	strh	r3, [r7, #14]
 800224e:	89fa      	ldrh	r2, [r7, #14]
 8002250:	78f9      	ldrb	r1, [r7, #3]
 8002252:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002256:	1acb      	subs	r3, r1, r3
 8002258:	429a      	cmp	r2, r3
 800225a:	dddd      	ble.n	8002218 <UB_VGA_DrawRectangle+0x10a>
	for(j=0; j < lineWidth; j++)
 800225c:	89bb      	ldrh	r3, [r7, #12]
 800225e:	3301      	adds	r3, #1
 8002260:	81bb      	strh	r3, [r7, #12]
 8002262:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002266:	b29b      	uxth	r3, r3
 8002268:	89ba      	ldrh	r2, [r7, #12]
 800226a:	429a      	cmp	r2, r3
 800226c:	d3b0      	bcc.n	80021d0 <UB_VGA_DrawRectangle+0xc2>
		}
	}

    /* filling in the rectangle */
    if(filled == 1)
 800226e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002272:	2b01      	cmp	r3, #1
 8002274:	d134      	bne.n	80022e0 <UB_VGA_DrawRectangle+0x1d2>
    {
    	for(i=0; i <= width-lineWidth*2; i++)
 8002276:	2300      	movs	r3, #0
 8002278:	81fb      	strh	r3, [r7, #14]
 800227a:	e029      	b.n	80022d0 <UB_VGA_DrawRectangle+0x1c2>
    	{
    		px = xp + i + lineWidth;
 800227c:	88fa      	ldrh	r2, [r7, #6]
 800227e:	89fb      	ldrh	r3, [r7, #14]
 8002280:	4413      	add	r3, r2
 8002282:	b29a      	uxth	r2, r3
 8002284:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002288:	b29b      	uxth	r3, r3
 800228a:	4413      	add	r3, r2
 800228c:	817b      	strh	r3, [r7, #10]

        	for(j=0; j <= height-(lineWidth*2); j++)
 800228e:	2300      	movs	r3, #0
 8002290:	81bb      	strh	r3, [r7, #12]
 8002292:	e012      	b.n	80022ba <UB_VGA_DrawRectangle+0x1ac>
        	{
        		py = yp + j + lineWidth;
 8002294:	88ba      	ldrh	r2, [r7, #4]
 8002296:	89bb      	ldrh	r3, [r7, #12]
 8002298:	4413      	add	r3, r2
 800229a:	b29a      	uxth	r2, r3
 800229c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	4413      	add	r3, r2
 80022a4:	813b      	strh	r3, [r7, #8]
        		UB_VGA_SetPixel(px,py,color);
 80022a6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80022aa:	8939      	ldrh	r1, [r7, #8]
 80022ac:	897b      	ldrh	r3, [r7, #10]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff fda4 	bl	8001dfc <UB_VGA_SetPixel>
        	for(j=0; j <= height-(lineWidth*2); j++)
 80022b4:	89bb      	ldrh	r3, [r7, #12]
 80022b6:	3301      	adds	r3, #1
 80022b8:	81bb      	strh	r3, [r7, #12]
 80022ba:	89ba      	ldrh	r2, [r7, #12]
 80022bc:	78b9      	ldrb	r1, [r7, #2]
 80022be:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	1acb      	subs	r3, r1, r3
 80022c6:	429a      	cmp	r2, r3
 80022c8:	dde4      	ble.n	8002294 <UB_VGA_DrawRectangle+0x186>
    	for(i=0; i <= width-lineWidth*2; i++)
 80022ca:	89fb      	ldrh	r3, [r7, #14]
 80022cc:	3301      	adds	r3, #1
 80022ce:	81fb      	strh	r3, [r7, #14]
 80022d0:	89fa      	ldrh	r2, [r7, #14]
 80022d2:	78f9      	ldrb	r1, [r7, #3]
 80022d4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	1acb      	subs	r3, r1, r3
 80022dc:	429a      	cmp	r2, r3
 80022de:	ddcd      	ble.n	800227c <UB_VGA_DrawRectangle+0x16e>
        	}
    	}
    }

}
 80022e0:	bf00      	nop
 80022e2:	3714      	adds	r7, #20
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd90      	pop	{r4, r7, pc}

080022e8 <UB_VGA_clearScreen>:
//--------------------------------------------------------------
// @brief Function to clear the whole screen.
// @details This function writes for all pixels the color white to the ram.
//--------------------------------------------------------------
void UB_VGA_clearScreen(uint8_t color)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 80022f2:	2300      	movs	r3, #0
 80022f4:	81bb      	strh	r3, [r7, #12]
 80022f6:	e012      	b.n	800231e <UB_VGA_clearScreen+0x36>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 80022f8:	2300      	movs	r3, #0
 80022fa:	81fb      	strh	r3, [r7, #14]
 80022fc:	e008      	b.n	8002310 <UB_VGA_clearScreen+0x28>
      UB_VGA_SetPixel(xp, yp, color);
 80022fe:	79fa      	ldrb	r2, [r7, #7]
 8002300:	89b9      	ldrh	r1, [r7, #12]
 8002302:	89fb      	ldrh	r3, [r7, #14]
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff fd79 	bl	8001dfc <UB_VGA_SetPixel>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 800230a:	89fb      	ldrh	r3, [r7, #14]
 800230c:	3301      	adds	r3, #1
 800230e:	81fb      	strh	r3, [r7, #14]
 8002310:	89fb      	ldrh	r3, [r7, #14]
 8002312:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002316:	d3f2      	bcc.n	80022fe <UB_VGA_clearScreen+0x16>
  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 8002318:	89bb      	ldrh	r3, [r7, #12]
 800231a:	3301      	adds	r3, #1
 800231c:	81bb      	strh	r3, [r7, #12]
 800231e:	89bb      	ldrh	r3, [r7, #12]
 8002320:	2bef      	cmp	r3, #239	; 0xef
 8002322:	d9e9      	bls.n	80022f8 <UB_VGA_clearScreen+0x10>
    }
  }
}
 8002324:	bf00      	nop
 8002326:	bf00      	nop
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
	...

08002330 <UB_VGA_DrawBitmap>:
// @param[in] x: The X-coordinate of the top left corner of the bitmap
// @param[in] y: The Y-coordinate of the top left corner of the bitmap
// @param[in] bmNr: The number ID of the bitmap to be loaded in
//--------------------------------------------------------------
void UB_VGA_DrawBitmap(uint16_t x, uint16_t y, uint16_t bmNr, uint8_t color, uint8_t double_size)
{
 8002330:	b590      	push	{r4, r7, lr}
 8002332:	b087      	sub	sp, #28
 8002334:	af00      	add	r7, sp, #0
 8002336:	4604      	mov	r4, r0
 8002338:	4608      	mov	r0, r1
 800233a:	4611      	mov	r1, r2
 800233c:	461a      	mov	r2, r3
 800233e:	4623      	mov	r3, r4
 8002340:	80fb      	strh	r3, [r7, #6]
 8002342:	4603      	mov	r3, r0
 8002344:	80bb      	strh	r3, [r7, #4]
 8002346:	460b      	mov	r3, r1
 8002348:	807b      	strh	r3, [r7, #2]
 800234a:	4613      	mov	r3, r2
 800234c:	707b      	strb	r3, [r7, #1]
  	uint8_t yBm; //Counts y of the bitmap
  	uint16_t bmCoord;
  	uint8_t doubleXFlag;
  	uint8_t doubleYFlag;

  	doubleXFlag = 0;
 800234e:	2300      	movs	r3, #0
 8002350:	73fb      	strb	r3, [r7, #15]
  	doubleYFlag = 0;
 8002352:	2300      	movs	r3, #0
 8002354:	73bb      	strb	r3, [r7, #14]
  	bmCoord = 0;
 8002356:	2300      	movs	r3, #0
 8002358:	823b      	strh	r3, [r7, #16]
  	yBm = 0;
 800235a:	2300      	movs	r3, #0
 800235c:	74bb      	strb	r3, [r7, #18]
  	xBm = 0;
 800235e:	2300      	movs	r3, #0
 8002360:	74fb      	strb	r3, [r7, #19]

  	for(i = 0; i < BM_AMOUNT; i++) //Look for bm ID
 8002362:	2300      	movs	r3, #0
 8002364:	82fb      	strh	r3, [r7, #22]
 8002366:	e00c      	b.n	8002382 <UB_VGA_DrawBitmap+0x52>
  	{
  		if(bmNr == bmLookup[i][ID])
 8002368:	8afb      	ldrh	r3, [r7, #22]
 800236a:	4a4d      	ldr	r2, [pc, #308]	; (80024a0 <UB_VGA_DrawBitmap+0x170>)
 800236c:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 8002370:	887a      	ldrh	r2, [r7, #2]
 8002372:	429a      	cmp	r2, r3
 8002374:	d102      	bne.n	800237c <UB_VGA_DrawBitmap+0x4c>
  		{
  			bmNr = i;
 8002376:	8afb      	ldrh	r3, [r7, #22]
 8002378:	807b      	strh	r3, [r7, #2]
  			break;
 800237a:	e005      	b.n	8002388 <UB_VGA_DrawBitmap+0x58>
  	for(i = 0; i < BM_AMOUNT; i++) //Look for bm ID
 800237c:	8afb      	ldrh	r3, [r7, #22]
 800237e:	3301      	adds	r3, #1
 8002380:	82fb      	strh	r3, [r7, #22]
 8002382:	8afb      	ldrh	r3, [r7, #22]
 8002384:	2bc7      	cmp	r3, #199	; 0xc7
 8002386:	d9ef      	bls.n	8002368 <UB_VGA_DrawBitmap+0x38>
  		}
  	}

  	bmCoord = bmLookup[bmNr][OFFSET];
 8002388:	887b      	ldrh	r3, [r7, #2]
 800238a:	4a45      	ldr	r2, [pc, #276]	; (80024a0 <UB_VGA_DrawBitmap+0x170>)
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	4413      	add	r3, r2
 8002390:	88db      	ldrh	r3, [r3, #6]
 8002392:	823b      	strh	r3, [r7, #16]

  	for(i = 0; i < VGA_DISPLAY_Y; i++)
 8002394:	2300      	movs	r3, #0
 8002396:	82fb      	strh	r3, [r7, #22]
 8002398:	e078      	b.n	800248c <UB_VGA_DrawBitmap+0x15c>
    {
  		if(i >= y)
 800239a:	8afa      	ldrh	r2, [r7, #22]
 800239c:	88bb      	ldrh	r3, [r7, #4]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d371      	bcc.n	8002486 <UB_VGA_DrawBitmap+0x156>
  		{
  			if(yBm == bmLookup[bmNr][Y_LEN]) //Check for Y length of bm
 80023a2:	7cbb      	ldrb	r3, [r7, #18]
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	887b      	ldrh	r3, [r7, #2]
 80023a8:	493d      	ldr	r1, [pc, #244]	; (80024a0 <UB_VGA_DrawBitmap+0x170>)
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	440b      	add	r3, r1
 80023ae:	889b      	ldrh	r3, [r3, #4]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d06f      	beq.n	8002494 <UB_VGA_DrawBitmap+0x164>
  				break;
  			for(j = 0; j < VGA_DISPLAY_X; j++)
 80023b4:	2300      	movs	r3, #0
 80023b6:	82bb      	strh	r3, [r7, #20]
 80023b8:	e044      	b.n	8002444 <UB_VGA_DrawBitmap+0x114>
  			{
  				if(j >= x)
 80023ba:	8aba      	ldrh	r2, [r7, #20]
 80023bc:	88fb      	ldrh	r3, [r7, #6]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d33d      	bcc.n	800243e <UB_VGA_DrawBitmap+0x10e>
  				{
  					if(xBm == bmLookup[bmNr][X_LEN]) //Check for X length of bm
 80023c2:	7cfb      	ldrb	r3, [r7, #19]
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	887b      	ldrh	r3, [r7, #2]
 80023c8:	4935      	ldr	r1, [pc, #212]	; (80024a0 <UB_VGA_DrawBitmap+0x170>)
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	440b      	add	r3, r1
 80023ce:	885b      	ldrh	r3, [r3, #2]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d03c      	beq.n	800244e <UB_VGA_DrawBitmap+0x11e>
  						break;

  					if (color)
 80023d4:	787b      	ldrb	r3, [r7, #1]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d013      	beq.n	8002402 <UB_VGA_DrawBitmap+0xd2>
  					{
  						if (bitmap_test[bmCoord] == 0XFF)
 80023da:	8a3b      	ldrh	r3, [r7, #16]
 80023dc:	4a31      	ldr	r2, [pc, #196]	; (80024a4 <UB_VGA_DrawBitmap+0x174>)
 80023de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023e2:	2bff      	cmp	r3, #255	; 0xff
 80023e4:	d106      	bne.n	80023f4 <UB_VGA_DrawBitmap+0xc4>
  						{
  							UB_VGA_SetPixel(j, i, color);
 80023e6:	787a      	ldrb	r2, [r7, #1]
 80023e8:	8af9      	ldrh	r1, [r7, #22]
 80023ea:	8abb      	ldrh	r3, [r7, #20]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff fd05 	bl	8001dfc <UB_VGA_SetPixel>
 80023f2:	e010      	b.n	8002416 <UB_VGA_DrawBitmap+0xe6>
  						}
  						else
  							UB_VGA_SetPixel(j, i, 0xFF);
 80023f4:	8af9      	ldrh	r1, [r7, #22]
 80023f6:	8abb      	ldrh	r3, [r7, #20]
 80023f8:	22ff      	movs	r2, #255	; 0xff
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff fcfe 	bl	8001dfc <UB_VGA_SetPixel>
 8002400:	e009      	b.n	8002416 <UB_VGA_DrawBitmap+0xe6>
  					}
  					else
  						UB_VGA_SetPixel(j, i, bitmap_test[bmCoord]);
 8002402:	8a3b      	ldrh	r3, [r7, #16]
 8002404:	4a27      	ldr	r2, [pc, #156]	; (80024a4 <UB_VGA_DrawBitmap+0x174>)
 8002406:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800240a:	b2da      	uxtb	r2, r3
 800240c:	8af9      	ldrh	r1, [r7, #22]
 800240e:	8abb      	ldrh	r3, [r7, #20]
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff fcf3 	bl	8001dfc <UB_VGA_SetPixel>

  					if(double_size && !doubleXFlag)
 8002416:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800241a:	2b00      	cmp	r3, #0
 800241c:	d006      	beq.n	800242c <UB_VGA_DrawBitmap+0xfc>
 800241e:	7bfb      	ldrb	r3, [r7, #15]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d103      	bne.n	800242c <UB_VGA_DrawBitmap+0xfc>
  						doubleXFlag++;
 8002424:	7bfb      	ldrb	r3, [r7, #15]
 8002426:	3301      	adds	r3, #1
 8002428:	73fb      	strb	r3, [r7, #15]
 800242a:	e008      	b.n	800243e <UB_VGA_DrawBitmap+0x10e>
  					else
  					{
  						doubleXFlag--;
 800242c:	7bfb      	ldrb	r3, [r7, #15]
 800242e:	3b01      	subs	r3, #1
 8002430:	73fb      	strb	r3, [r7, #15]
  	  					xBm++;
 8002432:	7cfb      	ldrb	r3, [r7, #19]
 8002434:	3301      	adds	r3, #1
 8002436:	74fb      	strb	r3, [r7, #19]
  	  					bmCoord++;
 8002438:	8a3b      	ldrh	r3, [r7, #16]
 800243a:	3301      	adds	r3, #1
 800243c:	823b      	strh	r3, [r7, #16]
  			for(j = 0; j < VGA_DISPLAY_X; j++)
 800243e:	8abb      	ldrh	r3, [r7, #20]
 8002440:	3301      	adds	r3, #1
 8002442:	82bb      	strh	r3, [r7, #20]
 8002444:	8abb      	ldrh	r3, [r7, #20]
 8002446:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800244a:	d3b6      	bcc.n	80023ba <UB_VGA_DrawBitmap+0x8a>
 800244c:	e000      	b.n	8002450 <UB_VGA_DrawBitmap+0x120>
  						break;
 800244e:	bf00      	nop
  					}
  				}
	    	}
  			xBm = 0;
 8002450:	2300      	movs	r3, #0
 8002452:	74fb      	strb	r3, [r7, #19]


			if(double_size && !doubleYFlag)
 8002454:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00e      	beq.n	800247a <UB_VGA_DrawBitmap+0x14a>
 800245c:	7bbb      	ldrb	r3, [r7, #14]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10b      	bne.n	800247a <UB_VGA_DrawBitmap+0x14a>
			{
				doubleYFlag++;
 8002462:	7bbb      	ldrb	r3, [r7, #14]
 8002464:	3301      	adds	r3, #1
 8002466:	73bb      	strb	r3, [r7, #14]
				bmCoord -= bmLookup[bmNr][X_LEN];
 8002468:	887b      	ldrh	r3, [r7, #2]
 800246a:	4a0d      	ldr	r2, [pc, #52]	; (80024a0 <UB_VGA_DrawBitmap+0x170>)
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	4413      	add	r3, r2
 8002470:	885b      	ldrh	r3, [r3, #2]
 8002472:	8a3a      	ldrh	r2, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	823b      	strh	r3, [r7, #16]
 8002478:	e005      	b.n	8002486 <UB_VGA_DrawBitmap+0x156>
			}
			else
			{
				doubleYFlag--;
 800247a:	7bbb      	ldrb	r3, [r7, #14]
 800247c:	3b01      	subs	r3, #1
 800247e:	73bb      	strb	r3, [r7, #14]
				yBm++;
 8002480:	7cbb      	ldrb	r3, [r7, #18]
 8002482:	3301      	adds	r3, #1
 8002484:	74bb      	strb	r3, [r7, #18]
  	for(i = 0; i < VGA_DISPLAY_Y; i++)
 8002486:	8afb      	ldrh	r3, [r7, #22]
 8002488:	3301      	adds	r3, #1
 800248a:	82fb      	strh	r3, [r7, #22]
 800248c:	8afb      	ldrh	r3, [r7, #22]
 800248e:	2bef      	cmp	r3, #239	; 0xef
 8002490:	d983      	bls.n	800239a <UB_VGA_DrawBitmap+0x6a>
			}
  		}
    }
}
 8002492:	e000      	b.n	8002496 <UB_VGA_DrawBitmap+0x166>
  				break;
 8002494:	bf00      	nop
}
 8002496:	bf00      	nop
 8002498:	371c      	adds	r7, #28
 800249a:	46bd      	mov	sp, r7
 800249c:	bd90      	pop	{r4, r7, pc}
 800249e:	bf00      	nop
 80024a0:	200002bc 	.word	0x200002bc
 80024a4:	08008328 	.word	0x08008328

080024a8 <UB_VGA_writeText>:
// @param[in] fontname: The fontname that the text is printed in
// @param[in] fontsize: The fontsize that the text is printed in
// @param[in] fontstyle: The fontstyle that the text is printed in
//--------------------------------------------------------------
void UB_VGA_writeText(uint16_t x_lup, uint16_t y_lup, uint8_t color, char text[20], char fontname, uint8_t fontsize, uint8_t fontstyle)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b088      	sub	sp, #32
 80024ac:	af02      	add	r7, sp, #8
 80024ae:	607b      	str	r3, [r7, #4]
 80024b0:	4603      	mov	r3, r0
 80024b2:	81fb      	strh	r3, [r7, #14]
 80024b4:	460b      	mov	r3, r1
 80024b6:	81bb      	strh	r3, [r7, #12]
 80024b8:	4613      	mov	r3, r2
 80024ba:	72fb      	strb	r3, [r7, #11]
    uint16_t px = 0;
 80024bc:	2300      	movs	r3, #0
 80024be:	82bb      	strh	r3, [r7, #20]
    uint8_t i = 0;
 80024c0:	2300      	movs	r3, #0
 80024c2:	75fb      	strb	r3, [r7, #23]
    uint8_t letterWidth = 0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	75bb      	strb	r3, [r7, #22]
    if(fontsize == 1)	//normal fontsize is selected
 80024c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d102      	bne.n	80024d6 <UB_VGA_writeText+0x2e>
    {
        letterWidth = 16;
 80024d0:	2310      	movs	r3, #16
 80024d2:	75bb      	strb	r3, [r7, #22]
 80024d4:	e005      	b.n	80024e2 <UB_VGA_writeText+0x3a>
    }
    else if(fontsize == 2)	//large fontsize is selected
 80024d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d101      	bne.n	80024e2 <UB_VGA_writeText+0x3a>
    {
        letterWidth = 24;
 80024de:	2318      	movs	r3, #24
 80024e0:	75bb      	strb	r3, [r7, #22]
    }


    for(i=0; i < 20; i++)	//maximum text size of 20 letters
 80024e2:	2300      	movs	r3, #0
 80024e4:	75fb      	strb	r3, [r7, #23]
 80024e6:	f001 bab8 	b.w	8003a5a <UB_VGA_writeText+0x15b2>
    {
        px = x_lup + (i * letterWidth);	//changes the position of x
 80024ea:	7dfb      	ldrb	r3, [r7, #23]
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	7dbb      	ldrb	r3, [r7, #22]
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	fb12 f303 	smulbb	r3, r2, r3
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	89fb      	ldrh	r3, [r7, #14]
 80024fa:	4413      	add	r3, r2
 80024fc:	82bb      	strh	r3, [r7, #20]
        switch(text[i])
 80024fe:	7dfb      	ldrb	r3, [r7, #23]
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	4413      	add	r3, r2
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	3b61      	subs	r3, #97	; 0x61
 8002508:	2b19      	cmp	r3, #25
 800250a:	f201 82a2 	bhi.w	8003a52 <UB_VGA_writeText+0x15aa>
 800250e:	a201      	add	r2, pc, #4	; (adr r2, 8002514 <UB_VGA_writeText+0x6c>)
 8002510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002514:	0800257d 	.word	0x0800257d
 8002518:	0800264b 	.word	0x0800264b
 800251c:	08002719 	.word	0x08002719
 8002520:	080027e7 	.word	0x080027e7
 8002524:	080028b5 	.word	0x080028b5
 8002528:	08002983 	.word	0x08002983
 800252c:	08002a51 	.word	0x08002a51
 8002530:	08002b1f 	.word	0x08002b1f
 8002534:	08002bed 	.word	0x08002bed
 8002538:	08002cbb 	.word	0x08002cbb
 800253c:	08002d89 	.word	0x08002d89
 8002540:	08002e57 	.word	0x08002e57
 8002544:	08002f25 	.word	0x08002f25
 8002548:	08002ff3 	.word	0x08002ff3
 800254c:	080030c1 	.word	0x080030c1
 8002550:	0800318f 	.word	0x0800318f
 8002554:	0800325b 	.word	0x0800325b
 8002558:	08003327 	.word	0x08003327
 800255c:	080033f3 	.word	0x080033f3
 8002560:	080034bf 	.word	0x080034bf
 8002564:	0800358b 	.word	0x0800358b
 8002568:	08003657 	.word	0x08003657
 800256c:	08003723 	.word	0x08003723
 8002570:	080037ef 	.word	0x080037ef
 8002574:	080038bb 	.word	0x080038bb
 8002578:	08003987 	.word	0x08003987
        {
            case 'a':	//if the letter is 'a'
            	switch(fontname)	//checks what the fontname is
 800257c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d002      	beq.n	800258a <UB_VGA_writeText+0xe2>
 8002584:	2b02      	cmp	r3, #2
 8002586:	d02f      	beq.n	80025e8 <UB_VGA_writeText+0x140>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 0, color, fontsize); break;	//normal fontstyle
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 26, color, fontsize); break;	//bold fontstyle
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 500, color, fontsize); break;	//cursive fontstyle
                			default: break;
                		}
                	default: break;
 8002588:	e05c      	b.n	8002644 <UB_VGA_writeText+0x19c>
            			switch(fontstyle)	//checks what fontname is
 800258a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800258e:	2b03      	cmp	r3, #3
 8002590:	d01c      	beq.n	80025cc <UB_VGA_writeText+0x124>
 8002592:	2b03      	cmp	r3, #3
 8002594:	dc26      	bgt.n	80025e4 <UB_VGA_writeText+0x13c>
 8002596:	2b01      	cmp	r3, #1
 8002598:	d002      	beq.n	80025a0 <UB_VGA_writeText+0xf8>
 800259a:	2b02      	cmp	r3, #2
 800259c:	d00b      	beq.n	80025b6 <UB_VGA_writeText+0x10e>
            				default: break;
 800259e:	e021      	b.n	80025e4 <UB_VGA_writeText+0x13c>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'a', color, fontsize); break;	//normal fontstyle
 80025a0:	7afa      	ldrb	r2, [r7, #11]
 80025a2:	89b9      	ldrh	r1, [r7, #12]
 80025a4:	8ab8      	ldrh	r0, [r7, #20]
 80025a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	4613      	mov	r3, r2
 80025ae:	2261      	movs	r2, #97	; 0x61
 80025b0:	f7ff febe 	bl	8002330 <UB_VGA_DrawBitmap>
 80025b4:	e017      	b.n	80025e6 <UB_VGA_writeText+0x13e>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'A', color, fontsize); break;	//bold fontstyle
 80025b6:	7afa      	ldrb	r2, [r7, #11]
 80025b8:	89b9      	ldrh	r1, [r7, #12]
 80025ba:	8ab8      	ldrh	r0, [r7, #20]
 80025bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80025c0:	9300      	str	r3, [sp, #0]
 80025c2:	4613      	mov	r3, r2
 80025c4:	2241      	movs	r2, #65	; 0x41
 80025c6:	f7ff feb3 	bl	8002330 <UB_VGA_DrawBitmap>
 80025ca:	e00c      	b.n	80025e6 <UB_VGA_writeText+0x13e>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 526, color, fontsize); break;	//cursive fontstyle
 80025cc:	7afa      	ldrb	r2, [r7, #11]
 80025ce:	89b9      	ldrh	r1, [r7, #12]
 80025d0:	8ab8      	ldrh	r0, [r7, #20]
 80025d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80025d6:	9300      	str	r3, [sp, #0]
 80025d8:	4613      	mov	r3, r2
 80025da:	f240 220e 	movw	r2, #526	; 0x20e
 80025de:	f7ff fea7 	bl	8002330 <UB_VGA_DrawBitmap>
 80025e2:	e000      	b.n	80025e6 <UB_VGA_writeText+0x13e>
            				default: break;
 80025e4:	bf00      	nop
            			break;
 80025e6:	e02e      	b.n	8002646 <UB_VGA_writeText+0x19e>
                		switch(fontstyle)
 80025e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80025ec:	2b03      	cmp	r3, #3
 80025ee:	d01c      	beq.n	800262a <UB_VGA_writeText+0x182>
 80025f0:	2b03      	cmp	r3, #3
 80025f2:	dc26      	bgt.n	8002642 <UB_VGA_writeText+0x19a>
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d002      	beq.n	80025fe <UB_VGA_writeText+0x156>
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d00b      	beq.n	8002614 <UB_VGA_writeText+0x16c>
                			default: break;
 80025fc:	e021      	b.n	8002642 <UB_VGA_writeText+0x19a>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 0, color, fontsize); break;	//normal fontstyle
 80025fe:	7afa      	ldrb	r2, [r7, #11]
 8002600:	89b9      	ldrh	r1, [r7, #12]
 8002602:	8ab8      	ldrh	r0, [r7, #20]
 8002604:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002608:	9300      	str	r3, [sp, #0]
 800260a:	4613      	mov	r3, r2
 800260c:	2200      	movs	r2, #0
 800260e:	f7ff fe8f 	bl	8002330 <UB_VGA_DrawBitmap>
 8002612:	e017      	b.n	8002644 <UB_VGA_writeText+0x19c>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 26, color, fontsize); break;	//bold fontstyle
 8002614:	7afa      	ldrb	r2, [r7, #11]
 8002616:	89b9      	ldrh	r1, [r7, #12]
 8002618:	8ab8      	ldrh	r0, [r7, #20]
 800261a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800261e:	9300      	str	r3, [sp, #0]
 8002620:	4613      	mov	r3, r2
 8002622:	221a      	movs	r2, #26
 8002624:	f7ff fe84 	bl	8002330 <UB_VGA_DrawBitmap>
 8002628:	e00c      	b.n	8002644 <UB_VGA_writeText+0x19c>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 500, color, fontsize); break;	//cursive fontstyle
 800262a:	7afa      	ldrb	r2, [r7, #11]
 800262c:	89b9      	ldrh	r1, [r7, #12]
 800262e:	8ab8      	ldrh	r0, [r7, #20]
 8002630:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002634:	9300      	str	r3, [sp, #0]
 8002636:	4613      	mov	r3, r2
 8002638:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800263c:	f7ff fe78 	bl	8002330 <UB_VGA_DrawBitmap>
 8002640:	e000      	b.n	8002644 <UB_VGA_writeText+0x19c>
                			default: break;
 8002642:	bf00      	nop
                	default: break;
 8002644:	bf00      	nop
            	}
                break;
 8002646:	f001 ba05 	b.w	8003a54 <UB_VGA_writeText+0x15ac>
            case 'b':
            	switch(fontname)
 800264a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d002      	beq.n	8002658 <UB_VGA_writeText+0x1b0>
 8002652:	2b02      	cmp	r3, #2
 8002654:	d02f      	beq.n	80026b6 <UB_VGA_writeText+0x20e>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 1, color, fontsize); break;
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 27, color, fontsize); break;
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 501, color, fontsize); break;
                			default: break;
                		}
                	default: break;
 8002656:	e05c      	b.n	8002712 <UB_VGA_writeText+0x26a>
            			switch(fontstyle)
 8002658:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800265c:	2b03      	cmp	r3, #3
 800265e:	d01c      	beq.n	800269a <UB_VGA_writeText+0x1f2>
 8002660:	2b03      	cmp	r3, #3
 8002662:	dc26      	bgt.n	80026b2 <UB_VGA_writeText+0x20a>
 8002664:	2b01      	cmp	r3, #1
 8002666:	d002      	beq.n	800266e <UB_VGA_writeText+0x1c6>
 8002668:	2b02      	cmp	r3, #2
 800266a:	d00b      	beq.n	8002684 <UB_VGA_writeText+0x1dc>
            				default: break;
 800266c:	e021      	b.n	80026b2 <UB_VGA_writeText+0x20a>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'b', color, fontsize); break;
 800266e:	7afa      	ldrb	r2, [r7, #11]
 8002670:	89b9      	ldrh	r1, [r7, #12]
 8002672:	8ab8      	ldrh	r0, [r7, #20]
 8002674:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	4613      	mov	r3, r2
 800267c:	2262      	movs	r2, #98	; 0x62
 800267e:	f7ff fe57 	bl	8002330 <UB_VGA_DrawBitmap>
 8002682:	e017      	b.n	80026b4 <UB_VGA_writeText+0x20c>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'B', color, fontsize); break;
 8002684:	7afa      	ldrb	r2, [r7, #11]
 8002686:	89b9      	ldrh	r1, [r7, #12]
 8002688:	8ab8      	ldrh	r0, [r7, #20]
 800268a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800268e:	9300      	str	r3, [sp, #0]
 8002690:	4613      	mov	r3, r2
 8002692:	2242      	movs	r2, #66	; 0x42
 8002694:	f7ff fe4c 	bl	8002330 <UB_VGA_DrawBitmap>
 8002698:	e00c      	b.n	80026b4 <UB_VGA_writeText+0x20c>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 527, color, fontsize); break;
 800269a:	7afa      	ldrb	r2, [r7, #11]
 800269c:	89b9      	ldrh	r1, [r7, #12]
 800269e:	8ab8      	ldrh	r0, [r7, #20]
 80026a0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80026a4:	9300      	str	r3, [sp, #0]
 80026a6:	4613      	mov	r3, r2
 80026a8:	f240 220f 	movw	r2, #527	; 0x20f
 80026ac:	f7ff fe40 	bl	8002330 <UB_VGA_DrawBitmap>
 80026b0:	e000      	b.n	80026b4 <UB_VGA_writeText+0x20c>
            				default: break;
 80026b2:	bf00      	nop
            			break;
 80026b4:	e02e      	b.n	8002714 <UB_VGA_writeText+0x26c>
                		switch(fontstyle)
 80026b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80026ba:	2b03      	cmp	r3, #3
 80026bc:	d01c      	beq.n	80026f8 <UB_VGA_writeText+0x250>
 80026be:	2b03      	cmp	r3, #3
 80026c0:	dc26      	bgt.n	8002710 <UB_VGA_writeText+0x268>
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d002      	beq.n	80026cc <UB_VGA_writeText+0x224>
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d00b      	beq.n	80026e2 <UB_VGA_writeText+0x23a>
                			default: break;
 80026ca:	e021      	b.n	8002710 <UB_VGA_writeText+0x268>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 1, color, fontsize); break;
 80026cc:	7afa      	ldrb	r2, [r7, #11]
 80026ce:	89b9      	ldrh	r1, [r7, #12]
 80026d0:	8ab8      	ldrh	r0, [r7, #20]
 80026d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80026d6:	9300      	str	r3, [sp, #0]
 80026d8:	4613      	mov	r3, r2
 80026da:	2201      	movs	r2, #1
 80026dc:	f7ff fe28 	bl	8002330 <UB_VGA_DrawBitmap>
 80026e0:	e017      	b.n	8002712 <UB_VGA_writeText+0x26a>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 27, color, fontsize); break;
 80026e2:	7afa      	ldrb	r2, [r7, #11]
 80026e4:	89b9      	ldrh	r1, [r7, #12]
 80026e6:	8ab8      	ldrh	r0, [r7, #20]
 80026e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	4613      	mov	r3, r2
 80026f0:	221b      	movs	r2, #27
 80026f2:	f7ff fe1d 	bl	8002330 <UB_VGA_DrawBitmap>
 80026f6:	e00c      	b.n	8002712 <UB_VGA_writeText+0x26a>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 501, color, fontsize); break;
 80026f8:	7afa      	ldrb	r2, [r7, #11]
 80026fa:	89b9      	ldrh	r1, [r7, #12]
 80026fc:	8ab8      	ldrh	r0, [r7, #20]
 80026fe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002702:	9300      	str	r3, [sp, #0]
 8002704:	4613      	mov	r3, r2
 8002706:	f240 12f5 	movw	r2, #501	; 0x1f5
 800270a:	f7ff fe11 	bl	8002330 <UB_VGA_DrawBitmap>
 800270e:	e000      	b.n	8002712 <UB_VGA_writeText+0x26a>
                			default: break;
 8002710:	bf00      	nop
                	default: break;
 8002712:	bf00      	nop
            	}
                break;
 8002714:	f001 b99e 	b.w	8003a54 <UB_VGA_writeText+0x15ac>
            case 'c':
            	switch(fontname)
 8002718:	f897 3020 	ldrb.w	r3, [r7, #32]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d002      	beq.n	8002726 <UB_VGA_writeText+0x27e>
 8002720:	2b02      	cmp	r3, #2
 8002722:	d02f      	beq.n	8002784 <UB_VGA_writeText+0x2dc>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 2, color, fontsize); break;
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 28, color, fontsize); break;
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 502, color, fontsize); break;
                			default: break;
                		}
                	default: break;
 8002724:	e05c      	b.n	80027e0 <UB_VGA_writeText+0x338>
            			switch(fontstyle)
 8002726:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800272a:	2b03      	cmp	r3, #3
 800272c:	d01c      	beq.n	8002768 <UB_VGA_writeText+0x2c0>
 800272e:	2b03      	cmp	r3, #3
 8002730:	dc26      	bgt.n	8002780 <UB_VGA_writeText+0x2d8>
 8002732:	2b01      	cmp	r3, #1
 8002734:	d002      	beq.n	800273c <UB_VGA_writeText+0x294>
 8002736:	2b02      	cmp	r3, #2
 8002738:	d00b      	beq.n	8002752 <UB_VGA_writeText+0x2aa>
            				default: break;
 800273a:	e021      	b.n	8002780 <UB_VGA_writeText+0x2d8>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'c', color, fontsize); break;
 800273c:	7afa      	ldrb	r2, [r7, #11]
 800273e:	89b9      	ldrh	r1, [r7, #12]
 8002740:	8ab8      	ldrh	r0, [r7, #20]
 8002742:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002746:	9300      	str	r3, [sp, #0]
 8002748:	4613      	mov	r3, r2
 800274a:	2263      	movs	r2, #99	; 0x63
 800274c:	f7ff fdf0 	bl	8002330 <UB_VGA_DrawBitmap>
 8002750:	e017      	b.n	8002782 <UB_VGA_writeText+0x2da>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'C', color, fontsize); break;
 8002752:	7afa      	ldrb	r2, [r7, #11]
 8002754:	89b9      	ldrh	r1, [r7, #12]
 8002756:	8ab8      	ldrh	r0, [r7, #20]
 8002758:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800275c:	9300      	str	r3, [sp, #0]
 800275e:	4613      	mov	r3, r2
 8002760:	2243      	movs	r2, #67	; 0x43
 8002762:	f7ff fde5 	bl	8002330 <UB_VGA_DrawBitmap>
 8002766:	e00c      	b.n	8002782 <UB_VGA_writeText+0x2da>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 528, color, fontsize); break;
 8002768:	7afa      	ldrb	r2, [r7, #11]
 800276a:	89b9      	ldrh	r1, [r7, #12]
 800276c:	8ab8      	ldrh	r0, [r7, #20]
 800276e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	4613      	mov	r3, r2
 8002776:	f44f 7204 	mov.w	r2, #528	; 0x210
 800277a:	f7ff fdd9 	bl	8002330 <UB_VGA_DrawBitmap>
 800277e:	e000      	b.n	8002782 <UB_VGA_writeText+0x2da>
            				default: break;
 8002780:	bf00      	nop
            			break;
 8002782:	e02e      	b.n	80027e2 <UB_VGA_writeText+0x33a>
                		switch(fontstyle)
 8002784:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002788:	2b03      	cmp	r3, #3
 800278a:	d01c      	beq.n	80027c6 <UB_VGA_writeText+0x31e>
 800278c:	2b03      	cmp	r3, #3
 800278e:	dc26      	bgt.n	80027de <UB_VGA_writeText+0x336>
 8002790:	2b01      	cmp	r3, #1
 8002792:	d002      	beq.n	800279a <UB_VGA_writeText+0x2f2>
 8002794:	2b02      	cmp	r3, #2
 8002796:	d00b      	beq.n	80027b0 <UB_VGA_writeText+0x308>
                			default: break;
 8002798:	e021      	b.n	80027de <UB_VGA_writeText+0x336>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 2, color, fontsize); break;
 800279a:	7afa      	ldrb	r2, [r7, #11]
 800279c:	89b9      	ldrh	r1, [r7, #12]
 800279e:	8ab8      	ldrh	r0, [r7, #20]
 80027a0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	4613      	mov	r3, r2
 80027a8:	2202      	movs	r2, #2
 80027aa:	f7ff fdc1 	bl	8002330 <UB_VGA_DrawBitmap>
 80027ae:	e017      	b.n	80027e0 <UB_VGA_writeText+0x338>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 28, color, fontsize); break;
 80027b0:	7afa      	ldrb	r2, [r7, #11]
 80027b2:	89b9      	ldrh	r1, [r7, #12]
 80027b4:	8ab8      	ldrh	r0, [r7, #20]
 80027b6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80027ba:	9300      	str	r3, [sp, #0]
 80027bc:	4613      	mov	r3, r2
 80027be:	221c      	movs	r2, #28
 80027c0:	f7ff fdb6 	bl	8002330 <UB_VGA_DrawBitmap>
 80027c4:	e00c      	b.n	80027e0 <UB_VGA_writeText+0x338>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 502, color, fontsize); break;
 80027c6:	7afa      	ldrb	r2, [r7, #11]
 80027c8:	89b9      	ldrh	r1, [r7, #12]
 80027ca:	8ab8      	ldrh	r0, [r7, #20]
 80027cc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	4613      	mov	r3, r2
 80027d4:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 80027d8:	f7ff fdaa 	bl	8002330 <UB_VGA_DrawBitmap>
 80027dc:	e000      	b.n	80027e0 <UB_VGA_writeText+0x338>
                			default: break;
 80027de:	bf00      	nop
                	default: break;
 80027e0:	bf00      	nop
            	}
                break;
 80027e2:	f001 b937 	b.w	8003a54 <UB_VGA_writeText+0x15ac>
            case 'd':
            	switch(fontname)
 80027e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d002      	beq.n	80027f4 <UB_VGA_writeText+0x34c>
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d02f      	beq.n	8002852 <UB_VGA_writeText+0x3aa>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 3, color, fontsize); break;
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 29, color, fontsize); break;
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 503, color, fontsize); break;
                			default: break;
                		}
                	default: break;
 80027f2:	e05c      	b.n	80028ae <UB_VGA_writeText+0x406>
            			switch(fontstyle)
 80027f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80027f8:	2b03      	cmp	r3, #3
 80027fa:	d01c      	beq.n	8002836 <UB_VGA_writeText+0x38e>
 80027fc:	2b03      	cmp	r3, #3
 80027fe:	dc26      	bgt.n	800284e <UB_VGA_writeText+0x3a6>
 8002800:	2b01      	cmp	r3, #1
 8002802:	d002      	beq.n	800280a <UB_VGA_writeText+0x362>
 8002804:	2b02      	cmp	r3, #2
 8002806:	d00b      	beq.n	8002820 <UB_VGA_writeText+0x378>
            				default: break;
 8002808:	e021      	b.n	800284e <UB_VGA_writeText+0x3a6>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'd', color, fontsize); break;
 800280a:	7afa      	ldrb	r2, [r7, #11]
 800280c:	89b9      	ldrh	r1, [r7, #12]
 800280e:	8ab8      	ldrh	r0, [r7, #20]
 8002810:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	4613      	mov	r3, r2
 8002818:	2264      	movs	r2, #100	; 0x64
 800281a:	f7ff fd89 	bl	8002330 <UB_VGA_DrawBitmap>
 800281e:	e017      	b.n	8002850 <UB_VGA_writeText+0x3a8>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'D', color, fontsize); break;
 8002820:	7afa      	ldrb	r2, [r7, #11]
 8002822:	89b9      	ldrh	r1, [r7, #12]
 8002824:	8ab8      	ldrh	r0, [r7, #20]
 8002826:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	4613      	mov	r3, r2
 800282e:	2244      	movs	r2, #68	; 0x44
 8002830:	f7ff fd7e 	bl	8002330 <UB_VGA_DrawBitmap>
 8002834:	e00c      	b.n	8002850 <UB_VGA_writeText+0x3a8>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 529, color, fontsize); break;
 8002836:	7afa      	ldrb	r2, [r7, #11]
 8002838:	89b9      	ldrh	r1, [r7, #12]
 800283a:	8ab8      	ldrh	r0, [r7, #20]
 800283c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	4613      	mov	r3, r2
 8002844:	f240 2211 	movw	r2, #529	; 0x211
 8002848:	f7ff fd72 	bl	8002330 <UB_VGA_DrawBitmap>
 800284c:	e000      	b.n	8002850 <UB_VGA_writeText+0x3a8>
            				default: break;
 800284e:	bf00      	nop
            			break;
 8002850:	e02e      	b.n	80028b0 <UB_VGA_writeText+0x408>
                		switch(fontstyle)
 8002852:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002856:	2b03      	cmp	r3, #3
 8002858:	d01c      	beq.n	8002894 <UB_VGA_writeText+0x3ec>
 800285a:	2b03      	cmp	r3, #3
 800285c:	dc26      	bgt.n	80028ac <UB_VGA_writeText+0x404>
 800285e:	2b01      	cmp	r3, #1
 8002860:	d002      	beq.n	8002868 <UB_VGA_writeText+0x3c0>
 8002862:	2b02      	cmp	r3, #2
 8002864:	d00b      	beq.n	800287e <UB_VGA_writeText+0x3d6>
                			default: break;
 8002866:	e021      	b.n	80028ac <UB_VGA_writeText+0x404>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 3, color, fontsize); break;
 8002868:	7afa      	ldrb	r2, [r7, #11]
 800286a:	89b9      	ldrh	r1, [r7, #12]
 800286c:	8ab8      	ldrh	r0, [r7, #20]
 800286e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002872:	9300      	str	r3, [sp, #0]
 8002874:	4613      	mov	r3, r2
 8002876:	2203      	movs	r2, #3
 8002878:	f7ff fd5a 	bl	8002330 <UB_VGA_DrawBitmap>
 800287c:	e017      	b.n	80028ae <UB_VGA_writeText+0x406>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 29, color, fontsize); break;
 800287e:	7afa      	ldrb	r2, [r7, #11]
 8002880:	89b9      	ldrh	r1, [r7, #12]
 8002882:	8ab8      	ldrh	r0, [r7, #20]
 8002884:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	4613      	mov	r3, r2
 800288c:	221d      	movs	r2, #29
 800288e:	f7ff fd4f 	bl	8002330 <UB_VGA_DrawBitmap>
 8002892:	e00c      	b.n	80028ae <UB_VGA_writeText+0x406>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 503, color, fontsize); break;
 8002894:	7afa      	ldrb	r2, [r7, #11]
 8002896:	89b9      	ldrh	r1, [r7, #12]
 8002898:	8ab8      	ldrh	r0, [r7, #20]
 800289a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800289e:	9300      	str	r3, [sp, #0]
 80028a0:	4613      	mov	r3, r2
 80028a2:	f240 12f7 	movw	r2, #503	; 0x1f7
 80028a6:	f7ff fd43 	bl	8002330 <UB_VGA_DrawBitmap>
 80028aa:	e000      	b.n	80028ae <UB_VGA_writeText+0x406>
                			default: break;
 80028ac:	bf00      	nop
                	default: break;
 80028ae:	bf00      	nop
            	}
                break;
 80028b0:	f001 b8d0 	b.w	8003a54 <UB_VGA_writeText+0x15ac>
            case 'e':
            	switch(fontname)
 80028b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d002      	beq.n	80028c2 <UB_VGA_writeText+0x41a>
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d02f      	beq.n	8002920 <UB_VGA_writeText+0x478>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 4, color, fontsize); break;
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 30, color, fontsize); break;
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 504, color, fontsize); break;
                			default: break;
                		}
                	default: break;
 80028c0:	e05c      	b.n	800297c <UB_VGA_writeText+0x4d4>
            			switch(fontstyle)
 80028c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80028c6:	2b03      	cmp	r3, #3
 80028c8:	d01c      	beq.n	8002904 <UB_VGA_writeText+0x45c>
 80028ca:	2b03      	cmp	r3, #3
 80028cc:	dc26      	bgt.n	800291c <UB_VGA_writeText+0x474>
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d002      	beq.n	80028d8 <UB_VGA_writeText+0x430>
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d00b      	beq.n	80028ee <UB_VGA_writeText+0x446>
            				default: break;
 80028d6:	e021      	b.n	800291c <UB_VGA_writeText+0x474>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'e', color, fontsize); break;
 80028d8:	7afa      	ldrb	r2, [r7, #11]
 80028da:	89b9      	ldrh	r1, [r7, #12]
 80028dc:	8ab8      	ldrh	r0, [r7, #20]
 80028de:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	4613      	mov	r3, r2
 80028e6:	2265      	movs	r2, #101	; 0x65
 80028e8:	f7ff fd22 	bl	8002330 <UB_VGA_DrawBitmap>
 80028ec:	e017      	b.n	800291e <UB_VGA_writeText+0x476>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'E', color, fontsize); break;
 80028ee:	7afa      	ldrb	r2, [r7, #11]
 80028f0:	89b9      	ldrh	r1, [r7, #12]
 80028f2:	8ab8      	ldrh	r0, [r7, #20]
 80028f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	4613      	mov	r3, r2
 80028fc:	2245      	movs	r2, #69	; 0x45
 80028fe:	f7ff fd17 	bl	8002330 <UB_VGA_DrawBitmap>
 8002902:	e00c      	b.n	800291e <UB_VGA_writeText+0x476>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 530, color, fontsize); break;
 8002904:	7afa      	ldrb	r2, [r7, #11]
 8002906:	89b9      	ldrh	r1, [r7, #12]
 8002908:	8ab8      	ldrh	r0, [r7, #20]
 800290a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	4613      	mov	r3, r2
 8002912:	f240 2212 	movw	r2, #530	; 0x212
 8002916:	f7ff fd0b 	bl	8002330 <UB_VGA_DrawBitmap>
 800291a:	e000      	b.n	800291e <UB_VGA_writeText+0x476>
            				default: break;
 800291c:	bf00      	nop
            			break;
 800291e:	e02e      	b.n	800297e <UB_VGA_writeText+0x4d6>
                		switch(fontstyle)
 8002920:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002924:	2b03      	cmp	r3, #3
 8002926:	d01c      	beq.n	8002962 <UB_VGA_writeText+0x4ba>
 8002928:	2b03      	cmp	r3, #3
 800292a:	dc26      	bgt.n	800297a <UB_VGA_writeText+0x4d2>
 800292c:	2b01      	cmp	r3, #1
 800292e:	d002      	beq.n	8002936 <UB_VGA_writeText+0x48e>
 8002930:	2b02      	cmp	r3, #2
 8002932:	d00b      	beq.n	800294c <UB_VGA_writeText+0x4a4>
                			default: break;
 8002934:	e021      	b.n	800297a <UB_VGA_writeText+0x4d2>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 4, color, fontsize); break;
 8002936:	7afa      	ldrb	r2, [r7, #11]
 8002938:	89b9      	ldrh	r1, [r7, #12]
 800293a:	8ab8      	ldrh	r0, [r7, #20]
 800293c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002940:	9300      	str	r3, [sp, #0]
 8002942:	4613      	mov	r3, r2
 8002944:	2204      	movs	r2, #4
 8002946:	f7ff fcf3 	bl	8002330 <UB_VGA_DrawBitmap>
 800294a:	e017      	b.n	800297c <UB_VGA_writeText+0x4d4>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 30, color, fontsize); break;
 800294c:	7afa      	ldrb	r2, [r7, #11]
 800294e:	89b9      	ldrh	r1, [r7, #12]
 8002950:	8ab8      	ldrh	r0, [r7, #20]
 8002952:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	4613      	mov	r3, r2
 800295a:	221e      	movs	r2, #30
 800295c:	f7ff fce8 	bl	8002330 <UB_VGA_DrawBitmap>
 8002960:	e00c      	b.n	800297c <UB_VGA_writeText+0x4d4>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 504, color, fontsize); break;
 8002962:	7afa      	ldrb	r2, [r7, #11]
 8002964:	89b9      	ldrh	r1, [r7, #12]
 8002966:	8ab8      	ldrh	r0, [r7, #20]
 8002968:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	4613      	mov	r3, r2
 8002970:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8002974:	f7ff fcdc 	bl	8002330 <UB_VGA_DrawBitmap>
 8002978:	e000      	b.n	800297c <UB_VGA_writeText+0x4d4>
                			default: break;
 800297a:	bf00      	nop
                	default: break;
 800297c:	bf00      	nop
            	}
                break;
 800297e:	f001 b869 	b.w	8003a54 <UB_VGA_writeText+0x15ac>
            case 'f':
            	switch(fontname)
 8002982:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d002      	beq.n	8002990 <UB_VGA_writeText+0x4e8>
 800298a:	2b02      	cmp	r3, #2
 800298c:	d02f      	beq.n	80029ee <UB_VGA_writeText+0x546>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 5, color, fontsize); break;
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 31, color, fontsize); break;
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 505, color, fontsize); break;
                			default: break;
                		}
                	default: break;
 800298e:	e05c      	b.n	8002a4a <UB_VGA_writeText+0x5a2>
            			switch(fontstyle)
 8002990:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002994:	2b03      	cmp	r3, #3
 8002996:	d01c      	beq.n	80029d2 <UB_VGA_writeText+0x52a>
 8002998:	2b03      	cmp	r3, #3
 800299a:	dc26      	bgt.n	80029ea <UB_VGA_writeText+0x542>
 800299c:	2b01      	cmp	r3, #1
 800299e:	d002      	beq.n	80029a6 <UB_VGA_writeText+0x4fe>
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d00b      	beq.n	80029bc <UB_VGA_writeText+0x514>
            				default: break;
 80029a4:	e021      	b.n	80029ea <UB_VGA_writeText+0x542>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'f', color, fontsize); break;
 80029a6:	7afa      	ldrb	r2, [r7, #11]
 80029a8:	89b9      	ldrh	r1, [r7, #12]
 80029aa:	8ab8      	ldrh	r0, [r7, #20]
 80029ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80029b0:	9300      	str	r3, [sp, #0]
 80029b2:	4613      	mov	r3, r2
 80029b4:	2266      	movs	r2, #102	; 0x66
 80029b6:	f7ff fcbb 	bl	8002330 <UB_VGA_DrawBitmap>
 80029ba:	e017      	b.n	80029ec <UB_VGA_writeText+0x544>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'F', color, fontsize); break;
 80029bc:	7afa      	ldrb	r2, [r7, #11]
 80029be:	89b9      	ldrh	r1, [r7, #12]
 80029c0:	8ab8      	ldrh	r0, [r7, #20]
 80029c2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80029c6:	9300      	str	r3, [sp, #0]
 80029c8:	4613      	mov	r3, r2
 80029ca:	2246      	movs	r2, #70	; 0x46
 80029cc:	f7ff fcb0 	bl	8002330 <UB_VGA_DrawBitmap>
 80029d0:	e00c      	b.n	80029ec <UB_VGA_writeText+0x544>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 531, color, fontsize); break;
 80029d2:	7afa      	ldrb	r2, [r7, #11]
 80029d4:	89b9      	ldrh	r1, [r7, #12]
 80029d6:	8ab8      	ldrh	r0, [r7, #20]
 80029d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80029dc:	9300      	str	r3, [sp, #0]
 80029de:	4613      	mov	r3, r2
 80029e0:	f240 2213 	movw	r2, #531	; 0x213
 80029e4:	f7ff fca4 	bl	8002330 <UB_VGA_DrawBitmap>
 80029e8:	e000      	b.n	80029ec <UB_VGA_writeText+0x544>
            				default: break;
 80029ea:	bf00      	nop
            			break;
 80029ec:	e02e      	b.n	8002a4c <UB_VGA_writeText+0x5a4>
                		switch(fontstyle)
 80029ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80029f2:	2b03      	cmp	r3, #3
 80029f4:	d01c      	beq.n	8002a30 <UB_VGA_writeText+0x588>
 80029f6:	2b03      	cmp	r3, #3
 80029f8:	dc26      	bgt.n	8002a48 <UB_VGA_writeText+0x5a0>
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d002      	beq.n	8002a04 <UB_VGA_writeText+0x55c>
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d00b      	beq.n	8002a1a <UB_VGA_writeText+0x572>
                			default: break;
 8002a02:	e021      	b.n	8002a48 <UB_VGA_writeText+0x5a0>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 5, color, fontsize); break;
 8002a04:	7afa      	ldrb	r2, [r7, #11]
 8002a06:	89b9      	ldrh	r1, [r7, #12]
 8002a08:	8ab8      	ldrh	r0, [r7, #20]
 8002a0a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	4613      	mov	r3, r2
 8002a12:	2205      	movs	r2, #5
 8002a14:	f7ff fc8c 	bl	8002330 <UB_VGA_DrawBitmap>
 8002a18:	e017      	b.n	8002a4a <UB_VGA_writeText+0x5a2>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 31, color, fontsize); break;
 8002a1a:	7afa      	ldrb	r2, [r7, #11]
 8002a1c:	89b9      	ldrh	r1, [r7, #12]
 8002a1e:	8ab8      	ldrh	r0, [r7, #20]
 8002a20:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002a24:	9300      	str	r3, [sp, #0]
 8002a26:	4613      	mov	r3, r2
 8002a28:	221f      	movs	r2, #31
 8002a2a:	f7ff fc81 	bl	8002330 <UB_VGA_DrawBitmap>
 8002a2e:	e00c      	b.n	8002a4a <UB_VGA_writeText+0x5a2>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 505, color, fontsize); break;
 8002a30:	7afa      	ldrb	r2, [r7, #11]
 8002a32:	89b9      	ldrh	r1, [r7, #12]
 8002a34:	8ab8      	ldrh	r0, [r7, #20]
 8002a36:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002a3a:	9300      	str	r3, [sp, #0]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	f240 12f9 	movw	r2, #505	; 0x1f9
 8002a42:	f7ff fc75 	bl	8002330 <UB_VGA_DrawBitmap>
 8002a46:	e000      	b.n	8002a4a <UB_VGA_writeText+0x5a2>
                			default: break;
 8002a48:	bf00      	nop
                	default: break;
 8002a4a:	bf00      	nop
            	}
                break;
 8002a4c:	f001 b802 	b.w	8003a54 <UB_VGA_writeText+0x15ac>
            case 'g':
            	switch(fontname)
 8002a50:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d002      	beq.n	8002a5e <UB_VGA_writeText+0x5b6>
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d02f      	beq.n	8002abc <UB_VGA_writeText+0x614>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 6, color, fontsize); break;
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 32, color, fontsize); break;
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 506, color, fontsize); break;
                			default: break;
                		}
                	default: break;
 8002a5c:	e05c      	b.n	8002b18 <UB_VGA_writeText+0x670>
            			switch(fontstyle)
 8002a5e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002a62:	2b03      	cmp	r3, #3
 8002a64:	d01c      	beq.n	8002aa0 <UB_VGA_writeText+0x5f8>
 8002a66:	2b03      	cmp	r3, #3
 8002a68:	dc26      	bgt.n	8002ab8 <UB_VGA_writeText+0x610>
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d002      	beq.n	8002a74 <UB_VGA_writeText+0x5cc>
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d00b      	beq.n	8002a8a <UB_VGA_writeText+0x5e2>
            				default: break;
 8002a72:	e021      	b.n	8002ab8 <UB_VGA_writeText+0x610>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'g', color, fontsize); break;
 8002a74:	7afa      	ldrb	r2, [r7, #11]
 8002a76:	89b9      	ldrh	r1, [r7, #12]
 8002a78:	8ab8      	ldrh	r0, [r7, #20]
 8002a7a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	4613      	mov	r3, r2
 8002a82:	2267      	movs	r2, #103	; 0x67
 8002a84:	f7ff fc54 	bl	8002330 <UB_VGA_DrawBitmap>
 8002a88:	e017      	b.n	8002aba <UB_VGA_writeText+0x612>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'G', color, fontsize); break;
 8002a8a:	7afa      	ldrb	r2, [r7, #11]
 8002a8c:	89b9      	ldrh	r1, [r7, #12]
 8002a8e:	8ab8      	ldrh	r0, [r7, #20]
 8002a90:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	4613      	mov	r3, r2
 8002a98:	2247      	movs	r2, #71	; 0x47
 8002a9a:	f7ff fc49 	bl	8002330 <UB_VGA_DrawBitmap>
 8002a9e:	e00c      	b.n	8002aba <UB_VGA_writeText+0x612>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 532, color, fontsize); break;
 8002aa0:	7afa      	ldrb	r2, [r7, #11]
 8002aa2:	89b9      	ldrh	r1, [r7, #12]
 8002aa4:	8ab8      	ldrh	r0, [r7, #20]
 8002aa6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002aaa:	9300      	str	r3, [sp, #0]
 8002aac:	4613      	mov	r3, r2
 8002aae:	f44f 7205 	mov.w	r2, #532	; 0x214
 8002ab2:	f7ff fc3d 	bl	8002330 <UB_VGA_DrawBitmap>
 8002ab6:	e000      	b.n	8002aba <UB_VGA_writeText+0x612>
            				default: break;
 8002ab8:	bf00      	nop
            			break;
 8002aba:	e02e      	b.n	8002b1a <UB_VGA_writeText+0x672>
                		switch(fontstyle)
 8002abc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002ac0:	2b03      	cmp	r3, #3
 8002ac2:	d01c      	beq.n	8002afe <UB_VGA_writeText+0x656>
 8002ac4:	2b03      	cmp	r3, #3
 8002ac6:	dc26      	bgt.n	8002b16 <UB_VGA_writeText+0x66e>
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d002      	beq.n	8002ad2 <UB_VGA_writeText+0x62a>
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d00b      	beq.n	8002ae8 <UB_VGA_writeText+0x640>
                			default: break;
 8002ad0:	e021      	b.n	8002b16 <UB_VGA_writeText+0x66e>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 6, color, fontsize); break;
 8002ad2:	7afa      	ldrb	r2, [r7, #11]
 8002ad4:	89b9      	ldrh	r1, [r7, #12]
 8002ad6:	8ab8      	ldrh	r0, [r7, #20]
 8002ad8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	2206      	movs	r2, #6
 8002ae2:	f7ff fc25 	bl	8002330 <UB_VGA_DrawBitmap>
 8002ae6:	e017      	b.n	8002b18 <UB_VGA_writeText+0x670>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 32, color, fontsize); break;
 8002ae8:	7afa      	ldrb	r2, [r7, #11]
 8002aea:	89b9      	ldrh	r1, [r7, #12]
 8002aec:	8ab8      	ldrh	r0, [r7, #20]
 8002aee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	4613      	mov	r3, r2
 8002af6:	2220      	movs	r2, #32
 8002af8:	f7ff fc1a 	bl	8002330 <UB_VGA_DrawBitmap>
 8002afc:	e00c      	b.n	8002b18 <UB_VGA_writeText+0x670>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 506, color, fontsize); break;
 8002afe:	7afa      	ldrb	r2, [r7, #11]
 8002b00:	89b9      	ldrh	r1, [r7, #12]
 8002b02:	8ab8      	ldrh	r0, [r7, #20]
 8002b04:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002b08:	9300      	str	r3, [sp, #0]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	f44f 72fd 	mov.w	r2, #506	; 0x1fa
 8002b10:	f7ff fc0e 	bl	8002330 <UB_VGA_DrawBitmap>
 8002b14:	e000      	b.n	8002b18 <UB_VGA_writeText+0x670>
                			default: break;
 8002b16:	bf00      	nop
                	default: break;
 8002b18:	bf00      	nop
            	}
                break;
 8002b1a:	f000 bf9b 	b.w	8003a54 <UB_VGA_writeText+0x15ac>
            case 'h':
            	switch(fontname)
 8002b1e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d002      	beq.n	8002b2c <UB_VGA_writeText+0x684>
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d02f      	beq.n	8002b8a <UB_VGA_writeText+0x6e2>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 7, color, fontsize); break;
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 33, color, fontsize); break;
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 507, color, fontsize); break;
                			default: break;
                		}
                	default: break;
 8002b2a:	e05c      	b.n	8002be6 <UB_VGA_writeText+0x73e>
            			switch(fontstyle)
 8002b2c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002b30:	2b03      	cmp	r3, #3
 8002b32:	d01c      	beq.n	8002b6e <UB_VGA_writeText+0x6c6>
 8002b34:	2b03      	cmp	r3, #3
 8002b36:	dc26      	bgt.n	8002b86 <UB_VGA_writeText+0x6de>
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d002      	beq.n	8002b42 <UB_VGA_writeText+0x69a>
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d00b      	beq.n	8002b58 <UB_VGA_writeText+0x6b0>
            				default: break;
 8002b40:	e021      	b.n	8002b86 <UB_VGA_writeText+0x6de>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'h', color, fontsize); break;
 8002b42:	7afa      	ldrb	r2, [r7, #11]
 8002b44:	89b9      	ldrh	r1, [r7, #12]
 8002b46:	8ab8      	ldrh	r0, [r7, #20]
 8002b48:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002b4c:	9300      	str	r3, [sp, #0]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	2268      	movs	r2, #104	; 0x68
 8002b52:	f7ff fbed 	bl	8002330 <UB_VGA_DrawBitmap>
 8002b56:	e017      	b.n	8002b88 <UB_VGA_writeText+0x6e0>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'H', color, fontsize); break;
 8002b58:	7afa      	ldrb	r2, [r7, #11]
 8002b5a:	89b9      	ldrh	r1, [r7, #12]
 8002b5c:	8ab8      	ldrh	r0, [r7, #20]
 8002b5e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	4613      	mov	r3, r2
 8002b66:	2248      	movs	r2, #72	; 0x48
 8002b68:	f7ff fbe2 	bl	8002330 <UB_VGA_DrawBitmap>
 8002b6c:	e00c      	b.n	8002b88 <UB_VGA_writeText+0x6e0>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 533, color, fontsize); break;
 8002b6e:	7afa      	ldrb	r2, [r7, #11]
 8002b70:	89b9      	ldrh	r1, [r7, #12]
 8002b72:	8ab8      	ldrh	r0, [r7, #20]
 8002b74:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	f240 2215 	movw	r2, #533	; 0x215
 8002b80:	f7ff fbd6 	bl	8002330 <UB_VGA_DrawBitmap>
 8002b84:	e000      	b.n	8002b88 <UB_VGA_writeText+0x6e0>
            				default: break;
 8002b86:	bf00      	nop
            			break;
 8002b88:	e02e      	b.n	8002be8 <UB_VGA_writeText+0x740>
                		switch(fontstyle)
 8002b8a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002b8e:	2b03      	cmp	r3, #3
 8002b90:	d01c      	beq.n	8002bcc <UB_VGA_writeText+0x724>
 8002b92:	2b03      	cmp	r3, #3
 8002b94:	dc26      	bgt.n	8002be4 <UB_VGA_writeText+0x73c>
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d002      	beq.n	8002ba0 <UB_VGA_writeText+0x6f8>
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d00b      	beq.n	8002bb6 <UB_VGA_writeText+0x70e>
                			default: break;
 8002b9e:	e021      	b.n	8002be4 <UB_VGA_writeText+0x73c>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 7, color, fontsize); break;
 8002ba0:	7afa      	ldrb	r2, [r7, #11]
 8002ba2:	89b9      	ldrh	r1, [r7, #12]
 8002ba4:	8ab8      	ldrh	r0, [r7, #20]
 8002ba6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	4613      	mov	r3, r2
 8002bae:	2207      	movs	r2, #7
 8002bb0:	f7ff fbbe 	bl	8002330 <UB_VGA_DrawBitmap>
 8002bb4:	e017      	b.n	8002be6 <UB_VGA_writeText+0x73e>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 33, color, fontsize); break;
 8002bb6:	7afa      	ldrb	r2, [r7, #11]
 8002bb8:	89b9      	ldrh	r1, [r7, #12]
 8002bba:	8ab8      	ldrh	r0, [r7, #20]
 8002bbc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	2221      	movs	r2, #33	; 0x21
 8002bc6:	f7ff fbb3 	bl	8002330 <UB_VGA_DrawBitmap>
 8002bca:	e00c      	b.n	8002be6 <UB_VGA_writeText+0x73e>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 507, color, fontsize); break;
 8002bcc:	7afa      	ldrb	r2, [r7, #11]
 8002bce:	89b9      	ldrh	r1, [r7, #12]
 8002bd0:	8ab8      	ldrh	r0, [r7, #20]
 8002bd2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002bd6:	9300      	str	r3, [sp, #0]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	f240 12fb 	movw	r2, #507	; 0x1fb
 8002bde:	f7ff fba7 	bl	8002330 <UB_VGA_DrawBitmap>
 8002be2:	e000      	b.n	8002be6 <UB_VGA_writeText+0x73e>
                			default: break;
 8002be4:	bf00      	nop
                	default: break;
 8002be6:	bf00      	nop
            	}
                break;
 8002be8:	f000 bf34 	b.w	8003a54 <UB_VGA_writeText+0x15ac>
            case 'i':
            	switch(fontname)
 8002bec:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d002      	beq.n	8002bfa <UB_VGA_writeText+0x752>
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d02f      	beq.n	8002c58 <UB_VGA_writeText+0x7b0>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 8, color, fontsize); break;
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 34, color, fontsize); break;
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 508, color, fontsize); break;
                			default: break;
                		}
                	default: break;
 8002bf8:	e05c      	b.n	8002cb4 <UB_VGA_writeText+0x80c>
            			switch(fontstyle)
 8002bfa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002bfe:	2b03      	cmp	r3, #3
 8002c00:	d01c      	beq.n	8002c3c <UB_VGA_writeText+0x794>
 8002c02:	2b03      	cmp	r3, #3
 8002c04:	dc26      	bgt.n	8002c54 <UB_VGA_writeText+0x7ac>
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d002      	beq.n	8002c10 <UB_VGA_writeText+0x768>
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d00b      	beq.n	8002c26 <UB_VGA_writeText+0x77e>
            				default: break;
 8002c0e:	e021      	b.n	8002c54 <UB_VGA_writeText+0x7ac>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'i', color, fontsize); break;
 8002c10:	7afa      	ldrb	r2, [r7, #11]
 8002c12:	89b9      	ldrh	r1, [r7, #12]
 8002c14:	8ab8      	ldrh	r0, [r7, #20]
 8002c16:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	2269      	movs	r2, #105	; 0x69
 8002c20:	f7ff fb86 	bl	8002330 <UB_VGA_DrawBitmap>
 8002c24:	e017      	b.n	8002c56 <UB_VGA_writeText+0x7ae>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'I', color, fontsize); break;
 8002c26:	7afa      	ldrb	r2, [r7, #11]
 8002c28:	89b9      	ldrh	r1, [r7, #12]
 8002c2a:	8ab8      	ldrh	r0, [r7, #20]
 8002c2c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	4613      	mov	r3, r2
 8002c34:	2249      	movs	r2, #73	; 0x49
 8002c36:	f7ff fb7b 	bl	8002330 <UB_VGA_DrawBitmap>
 8002c3a:	e00c      	b.n	8002c56 <UB_VGA_writeText+0x7ae>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 534, color, fontsize); break;
 8002c3c:	7afa      	ldrb	r2, [r7, #11]
 8002c3e:	89b9      	ldrh	r1, [r7, #12]
 8002c40:	8ab8      	ldrh	r0, [r7, #20]
 8002c42:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	f240 2216 	movw	r2, #534	; 0x216
 8002c4e:	f7ff fb6f 	bl	8002330 <UB_VGA_DrawBitmap>
 8002c52:	e000      	b.n	8002c56 <UB_VGA_writeText+0x7ae>
            				default: break;
 8002c54:	bf00      	nop
            			break;
 8002c56:	e02e      	b.n	8002cb6 <UB_VGA_writeText+0x80e>
                		switch(fontstyle)
 8002c58:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002c5c:	2b03      	cmp	r3, #3
 8002c5e:	d01c      	beq.n	8002c9a <UB_VGA_writeText+0x7f2>
 8002c60:	2b03      	cmp	r3, #3
 8002c62:	dc26      	bgt.n	8002cb2 <UB_VGA_writeText+0x80a>
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d002      	beq.n	8002c6e <UB_VGA_writeText+0x7c6>
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d00b      	beq.n	8002c84 <UB_VGA_writeText+0x7dc>
                			default: break;
 8002c6c:	e021      	b.n	8002cb2 <UB_VGA_writeText+0x80a>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 8, color, fontsize); break;
 8002c6e:	7afa      	ldrb	r2, [r7, #11]
 8002c70:	89b9      	ldrh	r1, [r7, #12]
 8002c72:	8ab8      	ldrh	r0, [r7, #20]
 8002c74:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002c78:	9300      	str	r3, [sp, #0]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	2208      	movs	r2, #8
 8002c7e:	f7ff fb57 	bl	8002330 <UB_VGA_DrawBitmap>
 8002c82:	e017      	b.n	8002cb4 <UB_VGA_writeText+0x80c>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 34, color, fontsize); break;
 8002c84:	7afa      	ldrb	r2, [r7, #11]
 8002c86:	89b9      	ldrh	r1, [r7, #12]
 8002c88:	8ab8      	ldrh	r0, [r7, #20]
 8002c8a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002c8e:	9300      	str	r3, [sp, #0]
 8002c90:	4613      	mov	r3, r2
 8002c92:	2222      	movs	r2, #34	; 0x22
 8002c94:	f7ff fb4c 	bl	8002330 <UB_VGA_DrawBitmap>
 8002c98:	e00c      	b.n	8002cb4 <UB_VGA_writeText+0x80c>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 508, color, fontsize); break;
 8002c9a:	7afa      	ldrb	r2, [r7, #11]
 8002c9c:	89b9      	ldrh	r1, [r7, #12]
 8002c9e:	8ab8      	ldrh	r0, [r7, #20]
 8002ca0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 8002cac:	f7ff fb40 	bl	8002330 <UB_VGA_DrawBitmap>
 8002cb0:	e000      	b.n	8002cb4 <UB_VGA_writeText+0x80c>
                			default: break;
 8002cb2:	bf00      	nop
                	default: break;
 8002cb4:	bf00      	nop
            	}
                break;
 8002cb6:	f000 becd 	b.w	8003a54 <UB_VGA_writeText+0x15ac>
            case 'j':
            	switch(fontname)
 8002cba:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d002      	beq.n	8002cc8 <UB_VGA_writeText+0x820>
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d02f      	beq.n	8002d26 <UB_VGA_writeText+0x87e>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 9, color, fontsize); break;
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 35, color, fontsize); break;
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 509, color, fontsize); break;
                			default: break;
                		}
                	default: break;
 8002cc6:	e05c      	b.n	8002d82 <UB_VGA_writeText+0x8da>
            			switch(fontstyle)
 8002cc8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002ccc:	2b03      	cmp	r3, #3
 8002cce:	d01c      	beq.n	8002d0a <UB_VGA_writeText+0x862>
 8002cd0:	2b03      	cmp	r3, #3
 8002cd2:	dc26      	bgt.n	8002d22 <UB_VGA_writeText+0x87a>
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d002      	beq.n	8002cde <UB_VGA_writeText+0x836>
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d00b      	beq.n	8002cf4 <UB_VGA_writeText+0x84c>
            				default: break;
 8002cdc:	e021      	b.n	8002d22 <UB_VGA_writeText+0x87a>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'j', color, fontsize); break;
 8002cde:	7afa      	ldrb	r2, [r7, #11]
 8002ce0:	89b9      	ldrh	r1, [r7, #12]
 8002ce2:	8ab8      	ldrh	r0, [r7, #20]
 8002ce4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	4613      	mov	r3, r2
 8002cec:	226a      	movs	r2, #106	; 0x6a
 8002cee:	f7ff fb1f 	bl	8002330 <UB_VGA_DrawBitmap>
 8002cf2:	e017      	b.n	8002d24 <UB_VGA_writeText+0x87c>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'J', color, fontsize); break;
 8002cf4:	7afa      	ldrb	r2, [r7, #11]
 8002cf6:	89b9      	ldrh	r1, [r7, #12]
 8002cf8:	8ab8      	ldrh	r0, [r7, #20]
 8002cfa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002cfe:	9300      	str	r3, [sp, #0]
 8002d00:	4613      	mov	r3, r2
 8002d02:	224a      	movs	r2, #74	; 0x4a
 8002d04:	f7ff fb14 	bl	8002330 <UB_VGA_DrawBitmap>
 8002d08:	e00c      	b.n	8002d24 <UB_VGA_writeText+0x87c>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 535, color, fontsize); break;
 8002d0a:	7afa      	ldrb	r2, [r7, #11]
 8002d0c:	89b9      	ldrh	r1, [r7, #12]
 8002d0e:	8ab8      	ldrh	r0, [r7, #20]
 8002d10:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002d14:	9300      	str	r3, [sp, #0]
 8002d16:	4613      	mov	r3, r2
 8002d18:	f240 2217 	movw	r2, #535	; 0x217
 8002d1c:	f7ff fb08 	bl	8002330 <UB_VGA_DrawBitmap>
 8002d20:	e000      	b.n	8002d24 <UB_VGA_writeText+0x87c>
            				default: break;
 8002d22:	bf00      	nop
            			break;
 8002d24:	e02e      	b.n	8002d84 <UB_VGA_writeText+0x8dc>
                		switch(fontstyle)
 8002d26:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002d2a:	2b03      	cmp	r3, #3
 8002d2c:	d01c      	beq.n	8002d68 <UB_VGA_writeText+0x8c0>
 8002d2e:	2b03      	cmp	r3, #3
 8002d30:	dc26      	bgt.n	8002d80 <UB_VGA_writeText+0x8d8>
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d002      	beq.n	8002d3c <UB_VGA_writeText+0x894>
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d00b      	beq.n	8002d52 <UB_VGA_writeText+0x8aa>
                			default: break;
 8002d3a:	e021      	b.n	8002d80 <UB_VGA_writeText+0x8d8>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 9, color, fontsize); break;
 8002d3c:	7afa      	ldrb	r2, [r7, #11]
 8002d3e:	89b9      	ldrh	r1, [r7, #12]
 8002d40:	8ab8      	ldrh	r0, [r7, #20]
 8002d42:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002d46:	9300      	str	r3, [sp, #0]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	2209      	movs	r2, #9
 8002d4c:	f7ff faf0 	bl	8002330 <UB_VGA_DrawBitmap>
 8002d50:	e017      	b.n	8002d82 <UB_VGA_writeText+0x8da>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 35, color, fontsize); break;
 8002d52:	7afa      	ldrb	r2, [r7, #11]
 8002d54:	89b9      	ldrh	r1, [r7, #12]
 8002d56:	8ab8      	ldrh	r0, [r7, #20]
 8002d58:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	2223      	movs	r2, #35	; 0x23
 8002d62:	f7ff fae5 	bl	8002330 <UB_VGA_DrawBitmap>
 8002d66:	e00c      	b.n	8002d82 <UB_VGA_writeText+0x8da>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 509, color, fontsize); break;
 8002d68:	7afa      	ldrb	r2, [r7, #11]
 8002d6a:	89b9      	ldrh	r1, [r7, #12]
 8002d6c:	8ab8      	ldrh	r0, [r7, #20]
 8002d6e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	4613      	mov	r3, r2
 8002d76:	f240 12fd 	movw	r2, #509	; 0x1fd
 8002d7a:	f7ff fad9 	bl	8002330 <UB_VGA_DrawBitmap>
 8002d7e:	e000      	b.n	8002d82 <UB_VGA_writeText+0x8da>
                			default: break;
 8002d80:	bf00      	nop
                	default: break;
 8002d82:	bf00      	nop
            	}
                break;
 8002d84:	f000 be66 	b.w	8003a54 <UB_VGA_writeText+0x15ac>
            case 'k':
            	switch(fontname)
 8002d88:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d002      	beq.n	8002d96 <UB_VGA_writeText+0x8ee>
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d02f      	beq.n	8002df4 <UB_VGA_writeText+0x94c>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 10, color, fontsize); break;
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 36, color, fontsize); break;
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 510, color, fontsize); break;
                			default: break;
                		}
                	default: break;
 8002d94:	e05c      	b.n	8002e50 <UB_VGA_writeText+0x9a8>
            			switch(fontstyle)
 8002d96:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002d9a:	2b03      	cmp	r3, #3
 8002d9c:	d01c      	beq.n	8002dd8 <UB_VGA_writeText+0x930>
 8002d9e:	2b03      	cmp	r3, #3
 8002da0:	dc26      	bgt.n	8002df0 <UB_VGA_writeText+0x948>
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d002      	beq.n	8002dac <UB_VGA_writeText+0x904>
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d00b      	beq.n	8002dc2 <UB_VGA_writeText+0x91a>
            				default: break;
 8002daa:	e021      	b.n	8002df0 <UB_VGA_writeText+0x948>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'k', color, fontsize); break;
 8002dac:	7afa      	ldrb	r2, [r7, #11]
 8002dae:	89b9      	ldrh	r1, [r7, #12]
 8002db0:	8ab8      	ldrh	r0, [r7, #20]
 8002db2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	4613      	mov	r3, r2
 8002dba:	226b      	movs	r2, #107	; 0x6b
 8002dbc:	f7ff fab8 	bl	8002330 <UB_VGA_DrawBitmap>
 8002dc0:	e017      	b.n	8002df2 <UB_VGA_writeText+0x94a>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'K', color, fontsize); break;
 8002dc2:	7afa      	ldrb	r2, [r7, #11]
 8002dc4:	89b9      	ldrh	r1, [r7, #12]
 8002dc6:	8ab8      	ldrh	r0, [r7, #20]
 8002dc8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	224b      	movs	r2, #75	; 0x4b
 8002dd2:	f7ff faad 	bl	8002330 <UB_VGA_DrawBitmap>
 8002dd6:	e00c      	b.n	8002df2 <UB_VGA_writeText+0x94a>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 536, color, fontsize); break;
 8002dd8:	7afa      	ldrb	r2, [r7, #11]
 8002dda:	89b9      	ldrh	r1, [r7, #12]
 8002ddc:	8ab8      	ldrh	r0, [r7, #20]
 8002dde:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002de2:	9300      	str	r3, [sp, #0]
 8002de4:	4613      	mov	r3, r2
 8002de6:	f44f 7206 	mov.w	r2, #536	; 0x218
 8002dea:	f7ff faa1 	bl	8002330 <UB_VGA_DrawBitmap>
 8002dee:	e000      	b.n	8002df2 <UB_VGA_writeText+0x94a>
            				default: break;
 8002df0:	bf00      	nop
            			break;
 8002df2:	e02e      	b.n	8002e52 <UB_VGA_writeText+0x9aa>
                		switch(fontstyle)
 8002df4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002df8:	2b03      	cmp	r3, #3
 8002dfa:	d01c      	beq.n	8002e36 <UB_VGA_writeText+0x98e>
 8002dfc:	2b03      	cmp	r3, #3
 8002dfe:	dc26      	bgt.n	8002e4e <UB_VGA_writeText+0x9a6>
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d002      	beq.n	8002e0a <UB_VGA_writeText+0x962>
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d00b      	beq.n	8002e20 <UB_VGA_writeText+0x978>
                			default: break;
 8002e08:	e021      	b.n	8002e4e <UB_VGA_writeText+0x9a6>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 10, color, fontsize); break;
 8002e0a:	7afa      	ldrb	r2, [r7, #11]
 8002e0c:	89b9      	ldrh	r1, [r7, #12]
 8002e0e:	8ab8      	ldrh	r0, [r7, #20]
 8002e10:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	4613      	mov	r3, r2
 8002e18:	220a      	movs	r2, #10
 8002e1a:	f7ff fa89 	bl	8002330 <UB_VGA_DrawBitmap>
 8002e1e:	e017      	b.n	8002e50 <UB_VGA_writeText+0x9a8>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 36, color, fontsize); break;
 8002e20:	7afa      	ldrb	r2, [r7, #11]
 8002e22:	89b9      	ldrh	r1, [r7, #12]
 8002e24:	8ab8      	ldrh	r0, [r7, #20]
 8002e26:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002e2a:	9300      	str	r3, [sp, #0]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	2224      	movs	r2, #36	; 0x24
 8002e30:	f7ff fa7e 	bl	8002330 <UB_VGA_DrawBitmap>
 8002e34:	e00c      	b.n	8002e50 <UB_VGA_writeText+0x9a8>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 510, color, fontsize); break;
 8002e36:	7afa      	ldrb	r2, [r7, #11]
 8002e38:	89b9      	ldrh	r1, [r7, #12]
 8002e3a:	8ab8      	ldrh	r0, [r7, #20]
 8002e3c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	4613      	mov	r3, r2
 8002e44:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 8002e48:	f7ff fa72 	bl	8002330 <UB_VGA_DrawBitmap>
 8002e4c:	e000      	b.n	8002e50 <UB_VGA_writeText+0x9a8>
                			default: break;
 8002e4e:	bf00      	nop
                	default: break;
 8002e50:	bf00      	nop
            	}
                break;
 8002e52:	f000 bdff 	b.w	8003a54 <UB_VGA_writeText+0x15ac>
            case 'l':
            	switch(fontname)
 8002e56:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d002      	beq.n	8002e64 <UB_VGA_writeText+0x9bc>
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d02f      	beq.n	8002ec2 <UB_VGA_writeText+0xa1a>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 11, color, fontsize); break;
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 37, color, fontsize); break;
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 511, color, fontsize); break;
                			default: break;
                		}
                	default: break;
 8002e62:	e05c      	b.n	8002f1e <UB_VGA_writeText+0xa76>
            			switch(fontstyle)
 8002e64:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002e68:	2b03      	cmp	r3, #3
 8002e6a:	d01c      	beq.n	8002ea6 <UB_VGA_writeText+0x9fe>
 8002e6c:	2b03      	cmp	r3, #3
 8002e6e:	dc26      	bgt.n	8002ebe <UB_VGA_writeText+0xa16>
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d002      	beq.n	8002e7a <UB_VGA_writeText+0x9d2>
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d00b      	beq.n	8002e90 <UB_VGA_writeText+0x9e8>
            				default: break;
 8002e78:	e021      	b.n	8002ebe <UB_VGA_writeText+0xa16>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'l', color, fontsize); break;
 8002e7a:	7afa      	ldrb	r2, [r7, #11]
 8002e7c:	89b9      	ldrh	r1, [r7, #12]
 8002e7e:	8ab8      	ldrh	r0, [r7, #20]
 8002e80:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002e84:	9300      	str	r3, [sp, #0]
 8002e86:	4613      	mov	r3, r2
 8002e88:	226c      	movs	r2, #108	; 0x6c
 8002e8a:	f7ff fa51 	bl	8002330 <UB_VGA_DrawBitmap>
 8002e8e:	e017      	b.n	8002ec0 <UB_VGA_writeText+0xa18>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'L', color, fontsize); break;
 8002e90:	7afa      	ldrb	r2, [r7, #11]
 8002e92:	89b9      	ldrh	r1, [r7, #12]
 8002e94:	8ab8      	ldrh	r0, [r7, #20]
 8002e96:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002e9a:	9300      	str	r3, [sp, #0]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	224c      	movs	r2, #76	; 0x4c
 8002ea0:	f7ff fa46 	bl	8002330 <UB_VGA_DrawBitmap>
 8002ea4:	e00c      	b.n	8002ec0 <UB_VGA_writeText+0xa18>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 537, color, fontsize); break;
 8002ea6:	7afa      	ldrb	r2, [r7, #11]
 8002ea8:	89b9      	ldrh	r1, [r7, #12]
 8002eaa:	8ab8      	ldrh	r0, [r7, #20]
 8002eac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002eb0:	9300      	str	r3, [sp, #0]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	f240 2219 	movw	r2, #537	; 0x219
 8002eb8:	f7ff fa3a 	bl	8002330 <UB_VGA_DrawBitmap>
 8002ebc:	e000      	b.n	8002ec0 <UB_VGA_writeText+0xa18>
            				default: break;
 8002ebe:	bf00      	nop
            			break;
 8002ec0:	e02e      	b.n	8002f20 <UB_VGA_writeText+0xa78>
                		switch(fontstyle)
 8002ec2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002ec6:	2b03      	cmp	r3, #3
 8002ec8:	d01c      	beq.n	8002f04 <UB_VGA_writeText+0xa5c>
 8002eca:	2b03      	cmp	r3, #3
 8002ecc:	dc26      	bgt.n	8002f1c <UB_VGA_writeText+0xa74>
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d002      	beq.n	8002ed8 <UB_VGA_writeText+0xa30>
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d00b      	beq.n	8002eee <UB_VGA_writeText+0xa46>
                			default: break;
 8002ed6:	e021      	b.n	8002f1c <UB_VGA_writeText+0xa74>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 11, color, fontsize); break;
 8002ed8:	7afa      	ldrb	r2, [r7, #11]
 8002eda:	89b9      	ldrh	r1, [r7, #12]
 8002edc:	8ab8      	ldrh	r0, [r7, #20]
 8002ede:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	220b      	movs	r2, #11
 8002ee8:	f7ff fa22 	bl	8002330 <UB_VGA_DrawBitmap>
 8002eec:	e017      	b.n	8002f1e <UB_VGA_writeText+0xa76>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 37, color, fontsize); break;
 8002eee:	7afa      	ldrb	r2, [r7, #11]
 8002ef0:	89b9      	ldrh	r1, [r7, #12]
 8002ef2:	8ab8      	ldrh	r0, [r7, #20]
 8002ef4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002ef8:	9300      	str	r3, [sp, #0]
 8002efa:	4613      	mov	r3, r2
 8002efc:	2225      	movs	r2, #37	; 0x25
 8002efe:	f7ff fa17 	bl	8002330 <UB_VGA_DrawBitmap>
 8002f02:	e00c      	b.n	8002f1e <UB_VGA_writeText+0xa76>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 511, color, fontsize); break;
 8002f04:	7afa      	ldrb	r2, [r7, #11]
 8002f06:	89b9      	ldrh	r1, [r7, #12]
 8002f08:	8ab8      	ldrh	r0, [r7, #20]
 8002f0a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002f0e:	9300      	str	r3, [sp, #0]
 8002f10:	4613      	mov	r3, r2
 8002f12:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002f16:	f7ff fa0b 	bl	8002330 <UB_VGA_DrawBitmap>
 8002f1a:	e000      	b.n	8002f1e <UB_VGA_writeText+0xa76>
                			default: break;
 8002f1c:	bf00      	nop
                	default: break;
 8002f1e:	bf00      	nop
            	}
                break;
 8002f20:	f000 bd98 	b.w	8003a54 <UB_VGA_writeText+0x15ac>
            case 'm':
            	switch(fontname)
 8002f24:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d002      	beq.n	8002f32 <UB_VGA_writeText+0xa8a>
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d02f      	beq.n	8002f90 <UB_VGA_writeText+0xae8>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 12, color, fontsize); break;
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 38, color, fontsize); break;
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 512, color, fontsize); break;
                			default: break;
                		}
                	default: break;
 8002f30:	e05c      	b.n	8002fec <UB_VGA_writeText+0xb44>
            			switch(fontstyle)
 8002f32:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002f36:	2b03      	cmp	r3, #3
 8002f38:	d01c      	beq.n	8002f74 <UB_VGA_writeText+0xacc>
 8002f3a:	2b03      	cmp	r3, #3
 8002f3c:	dc26      	bgt.n	8002f8c <UB_VGA_writeText+0xae4>
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d002      	beq.n	8002f48 <UB_VGA_writeText+0xaa0>
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d00b      	beq.n	8002f5e <UB_VGA_writeText+0xab6>
            				default: break;
 8002f46:	e021      	b.n	8002f8c <UB_VGA_writeText+0xae4>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'm', color, fontsize); break;
 8002f48:	7afa      	ldrb	r2, [r7, #11]
 8002f4a:	89b9      	ldrh	r1, [r7, #12]
 8002f4c:	8ab8      	ldrh	r0, [r7, #20]
 8002f4e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002f52:	9300      	str	r3, [sp, #0]
 8002f54:	4613      	mov	r3, r2
 8002f56:	226d      	movs	r2, #109	; 0x6d
 8002f58:	f7ff f9ea 	bl	8002330 <UB_VGA_DrawBitmap>
 8002f5c:	e017      	b.n	8002f8e <UB_VGA_writeText+0xae6>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'M', color, fontsize); break;
 8002f5e:	7afa      	ldrb	r2, [r7, #11]
 8002f60:	89b9      	ldrh	r1, [r7, #12]
 8002f62:	8ab8      	ldrh	r0, [r7, #20]
 8002f64:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002f68:	9300      	str	r3, [sp, #0]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	224d      	movs	r2, #77	; 0x4d
 8002f6e:	f7ff f9df 	bl	8002330 <UB_VGA_DrawBitmap>
 8002f72:	e00c      	b.n	8002f8e <UB_VGA_writeText+0xae6>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 538, color, fontsize); break;
 8002f74:	7afa      	ldrb	r2, [r7, #11]
 8002f76:	89b9      	ldrh	r1, [r7, #12]
 8002f78:	8ab8      	ldrh	r0, [r7, #20]
 8002f7a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002f7e:	9300      	str	r3, [sp, #0]
 8002f80:	4613      	mov	r3, r2
 8002f82:	f240 221a 	movw	r2, #538	; 0x21a
 8002f86:	f7ff f9d3 	bl	8002330 <UB_VGA_DrawBitmap>
 8002f8a:	e000      	b.n	8002f8e <UB_VGA_writeText+0xae6>
            				default: break;
 8002f8c:	bf00      	nop
            			break;
 8002f8e:	e02e      	b.n	8002fee <UB_VGA_writeText+0xb46>
                		switch(fontstyle)
 8002f90:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002f94:	2b03      	cmp	r3, #3
 8002f96:	d01c      	beq.n	8002fd2 <UB_VGA_writeText+0xb2a>
 8002f98:	2b03      	cmp	r3, #3
 8002f9a:	dc26      	bgt.n	8002fea <UB_VGA_writeText+0xb42>
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d002      	beq.n	8002fa6 <UB_VGA_writeText+0xafe>
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d00b      	beq.n	8002fbc <UB_VGA_writeText+0xb14>
                			default: break;
 8002fa4:	e021      	b.n	8002fea <UB_VGA_writeText+0xb42>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 12, color, fontsize); break;
 8002fa6:	7afa      	ldrb	r2, [r7, #11]
 8002fa8:	89b9      	ldrh	r1, [r7, #12]
 8002faa:	8ab8      	ldrh	r0, [r7, #20]
 8002fac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002fb0:	9300      	str	r3, [sp, #0]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	220c      	movs	r2, #12
 8002fb6:	f7ff f9bb 	bl	8002330 <UB_VGA_DrawBitmap>
 8002fba:	e017      	b.n	8002fec <UB_VGA_writeText+0xb44>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 38, color, fontsize); break;
 8002fbc:	7afa      	ldrb	r2, [r7, #11]
 8002fbe:	89b9      	ldrh	r1, [r7, #12]
 8002fc0:	8ab8      	ldrh	r0, [r7, #20]
 8002fc2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002fc6:	9300      	str	r3, [sp, #0]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	2226      	movs	r2, #38	; 0x26
 8002fcc:	f7ff f9b0 	bl	8002330 <UB_VGA_DrawBitmap>
 8002fd0:	e00c      	b.n	8002fec <UB_VGA_writeText+0xb44>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 512, color, fontsize); break;
 8002fd2:	7afa      	ldrb	r2, [r7, #11]
 8002fd4:	89b9      	ldrh	r1, [r7, #12]
 8002fd6:	8ab8      	ldrh	r0, [r7, #20]
 8002fd8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002fdc:	9300      	str	r3, [sp, #0]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fe4:	f7ff f9a4 	bl	8002330 <UB_VGA_DrawBitmap>
 8002fe8:	e000      	b.n	8002fec <UB_VGA_writeText+0xb44>
                			default: break;
 8002fea:	bf00      	nop
                	default: break;
 8002fec:	bf00      	nop
            	}
                break;
 8002fee:	f000 bd31 	b.w	8003a54 <UB_VGA_writeText+0x15ac>
            case 'n':
            	switch(fontname)
 8002ff2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d002      	beq.n	8003000 <UB_VGA_writeText+0xb58>
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d02f      	beq.n	800305e <UB_VGA_writeText+0xbb6>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 13, color, fontsize); break;
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 39, color, fontsize); break;
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 513, color, fontsize); break;
                			default: break;
                		}
                	default: break;
 8002ffe:	e05c      	b.n	80030ba <UB_VGA_writeText+0xc12>
            			switch(fontstyle)
 8003000:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003004:	2b03      	cmp	r3, #3
 8003006:	d01c      	beq.n	8003042 <UB_VGA_writeText+0xb9a>
 8003008:	2b03      	cmp	r3, #3
 800300a:	dc26      	bgt.n	800305a <UB_VGA_writeText+0xbb2>
 800300c:	2b01      	cmp	r3, #1
 800300e:	d002      	beq.n	8003016 <UB_VGA_writeText+0xb6e>
 8003010:	2b02      	cmp	r3, #2
 8003012:	d00b      	beq.n	800302c <UB_VGA_writeText+0xb84>
            				default: break;
 8003014:	e021      	b.n	800305a <UB_VGA_writeText+0xbb2>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'n', color, fontsize); break;
 8003016:	7afa      	ldrb	r2, [r7, #11]
 8003018:	89b9      	ldrh	r1, [r7, #12]
 800301a:	8ab8      	ldrh	r0, [r7, #20]
 800301c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	4613      	mov	r3, r2
 8003024:	226e      	movs	r2, #110	; 0x6e
 8003026:	f7ff f983 	bl	8002330 <UB_VGA_DrawBitmap>
 800302a:	e017      	b.n	800305c <UB_VGA_writeText+0xbb4>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'N', color, fontsize); break;
 800302c:	7afa      	ldrb	r2, [r7, #11]
 800302e:	89b9      	ldrh	r1, [r7, #12]
 8003030:	8ab8      	ldrh	r0, [r7, #20]
 8003032:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	4613      	mov	r3, r2
 800303a:	224e      	movs	r2, #78	; 0x4e
 800303c:	f7ff f978 	bl	8002330 <UB_VGA_DrawBitmap>
 8003040:	e00c      	b.n	800305c <UB_VGA_writeText+0xbb4>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 539, color, fontsize); break;
 8003042:	7afa      	ldrb	r2, [r7, #11]
 8003044:	89b9      	ldrh	r1, [r7, #12]
 8003046:	8ab8      	ldrh	r0, [r7, #20]
 8003048:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800304c:	9300      	str	r3, [sp, #0]
 800304e:	4613      	mov	r3, r2
 8003050:	f240 221b 	movw	r2, #539	; 0x21b
 8003054:	f7ff f96c 	bl	8002330 <UB_VGA_DrawBitmap>
 8003058:	e000      	b.n	800305c <UB_VGA_writeText+0xbb4>
            				default: break;
 800305a:	bf00      	nop
            			break;
 800305c:	e02e      	b.n	80030bc <UB_VGA_writeText+0xc14>
                		switch(fontstyle)
 800305e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003062:	2b03      	cmp	r3, #3
 8003064:	d01c      	beq.n	80030a0 <UB_VGA_writeText+0xbf8>
 8003066:	2b03      	cmp	r3, #3
 8003068:	dc26      	bgt.n	80030b8 <UB_VGA_writeText+0xc10>
 800306a:	2b01      	cmp	r3, #1
 800306c:	d002      	beq.n	8003074 <UB_VGA_writeText+0xbcc>
 800306e:	2b02      	cmp	r3, #2
 8003070:	d00b      	beq.n	800308a <UB_VGA_writeText+0xbe2>
                			default: break;
 8003072:	e021      	b.n	80030b8 <UB_VGA_writeText+0xc10>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 13, color, fontsize); break;
 8003074:	7afa      	ldrb	r2, [r7, #11]
 8003076:	89b9      	ldrh	r1, [r7, #12]
 8003078:	8ab8      	ldrh	r0, [r7, #20]
 800307a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800307e:	9300      	str	r3, [sp, #0]
 8003080:	4613      	mov	r3, r2
 8003082:	220d      	movs	r2, #13
 8003084:	f7ff f954 	bl	8002330 <UB_VGA_DrawBitmap>
 8003088:	e017      	b.n	80030ba <UB_VGA_writeText+0xc12>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 39, color, fontsize); break;
 800308a:	7afa      	ldrb	r2, [r7, #11]
 800308c:	89b9      	ldrh	r1, [r7, #12]
 800308e:	8ab8      	ldrh	r0, [r7, #20]
 8003090:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	4613      	mov	r3, r2
 8003098:	2227      	movs	r2, #39	; 0x27
 800309a:	f7ff f949 	bl	8002330 <UB_VGA_DrawBitmap>
 800309e:	e00c      	b.n	80030ba <UB_VGA_writeText+0xc12>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 513, color, fontsize); break;
 80030a0:	7afa      	ldrb	r2, [r7, #11]
 80030a2:	89b9      	ldrh	r1, [r7, #12]
 80030a4:	8ab8      	ldrh	r0, [r7, #20]
 80030a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80030aa:	9300      	str	r3, [sp, #0]
 80030ac:	4613      	mov	r3, r2
 80030ae:	f240 2201 	movw	r2, #513	; 0x201
 80030b2:	f7ff f93d 	bl	8002330 <UB_VGA_DrawBitmap>
 80030b6:	e000      	b.n	80030ba <UB_VGA_writeText+0xc12>
                			default: break;
 80030b8:	bf00      	nop
                	default: break;
 80030ba:	bf00      	nop
            	}
                break;
 80030bc:	f000 bcca 	b.w	8003a54 <UB_VGA_writeText+0x15ac>
            case 'o':
            	switch(fontname)
 80030c0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d002      	beq.n	80030ce <UB_VGA_writeText+0xc26>
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d02f      	beq.n	800312c <UB_VGA_writeText+0xc84>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 14, color, fontsize); break;
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 40, color, fontsize); break;
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 514, color, fontsize); break;
                			default: break;
                		}
                	default: break;
 80030cc:	e05c      	b.n	8003188 <UB_VGA_writeText+0xce0>
            			switch(fontstyle)
 80030ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80030d2:	2b03      	cmp	r3, #3
 80030d4:	d01c      	beq.n	8003110 <UB_VGA_writeText+0xc68>
 80030d6:	2b03      	cmp	r3, #3
 80030d8:	dc26      	bgt.n	8003128 <UB_VGA_writeText+0xc80>
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d002      	beq.n	80030e4 <UB_VGA_writeText+0xc3c>
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d00b      	beq.n	80030fa <UB_VGA_writeText+0xc52>
            				default: break;
 80030e2:	e021      	b.n	8003128 <UB_VGA_writeText+0xc80>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'o', color, fontsize); break;
 80030e4:	7afa      	ldrb	r2, [r7, #11]
 80030e6:	89b9      	ldrh	r1, [r7, #12]
 80030e8:	8ab8      	ldrh	r0, [r7, #20]
 80030ea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	4613      	mov	r3, r2
 80030f2:	226f      	movs	r2, #111	; 0x6f
 80030f4:	f7ff f91c 	bl	8002330 <UB_VGA_DrawBitmap>
 80030f8:	e017      	b.n	800312a <UB_VGA_writeText+0xc82>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'O', color, fontsize); break;
 80030fa:	7afa      	ldrb	r2, [r7, #11]
 80030fc:	89b9      	ldrh	r1, [r7, #12]
 80030fe:	8ab8      	ldrh	r0, [r7, #20]
 8003100:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	4613      	mov	r3, r2
 8003108:	224f      	movs	r2, #79	; 0x4f
 800310a:	f7ff f911 	bl	8002330 <UB_VGA_DrawBitmap>
 800310e:	e00c      	b.n	800312a <UB_VGA_writeText+0xc82>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 540, color, fontsize); break;
 8003110:	7afa      	ldrb	r2, [r7, #11]
 8003112:	89b9      	ldrh	r1, [r7, #12]
 8003114:	8ab8      	ldrh	r0, [r7, #20]
 8003116:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800311a:	9300      	str	r3, [sp, #0]
 800311c:	4613      	mov	r3, r2
 800311e:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8003122:	f7ff f905 	bl	8002330 <UB_VGA_DrawBitmap>
 8003126:	e000      	b.n	800312a <UB_VGA_writeText+0xc82>
            				default: break;
 8003128:	bf00      	nop
            			break;
 800312a:	e02e      	b.n	800318a <UB_VGA_writeText+0xce2>
                		switch(fontstyle)
 800312c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003130:	2b03      	cmp	r3, #3
 8003132:	d01c      	beq.n	800316e <UB_VGA_writeText+0xcc6>
 8003134:	2b03      	cmp	r3, #3
 8003136:	dc26      	bgt.n	8003186 <UB_VGA_writeText+0xcde>
 8003138:	2b01      	cmp	r3, #1
 800313a:	d002      	beq.n	8003142 <UB_VGA_writeText+0xc9a>
 800313c:	2b02      	cmp	r3, #2
 800313e:	d00b      	beq.n	8003158 <UB_VGA_writeText+0xcb0>
                			default: break;
 8003140:	e021      	b.n	8003186 <UB_VGA_writeText+0xcde>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 14, color, fontsize); break;
 8003142:	7afa      	ldrb	r2, [r7, #11]
 8003144:	89b9      	ldrh	r1, [r7, #12]
 8003146:	8ab8      	ldrh	r0, [r7, #20]
 8003148:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800314c:	9300      	str	r3, [sp, #0]
 800314e:	4613      	mov	r3, r2
 8003150:	220e      	movs	r2, #14
 8003152:	f7ff f8ed 	bl	8002330 <UB_VGA_DrawBitmap>
 8003156:	e017      	b.n	8003188 <UB_VGA_writeText+0xce0>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 40, color, fontsize); break;
 8003158:	7afa      	ldrb	r2, [r7, #11]
 800315a:	89b9      	ldrh	r1, [r7, #12]
 800315c:	8ab8      	ldrh	r0, [r7, #20]
 800315e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003162:	9300      	str	r3, [sp, #0]
 8003164:	4613      	mov	r3, r2
 8003166:	2228      	movs	r2, #40	; 0x28
 8003168:	f7ff f8e2 	bl	8002330 <UB_VGA_DrawBitmap>
 800316c:	e00c      	b.n	8003188 <UB_VGA_writeText+0xce0>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 514, color, fontsize); break;
 800316e:	7afa      	ldrb	r2, [r7, #11]
 8003170:	89b9      	ldrh	r1, [r7, #12]
 8003172:	8ab8      	ldrh	r0, [r7, #20]
 8003174:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	4613      	mov	r3, r2
 800317c:	f240 2202 	movw	r2, #514	; 0x202
 8003180:	f7ff f8d6 	bl	8002330 <UB_VGA_DrawBitmap>
 8003184:	e000      	b.n	8003188 <UB_VGA_writeText+0xce0>
                			default: break;
 8003186:	bf00      	nop
                	default: break;
 8003188:	bf00      	nop
            	}
                break;
 800318a:	f000 bc63 	b.w	8003a54 <UB_VGA_writeText+0x15ac>
            case 'p':
            	switch(fontname)
 800318e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d002      	beq.n	800319c <UB_VGA_writeText+0xcf4>
 8003196:	2b02      	cmp	r3, #2
 8003198:	d02f      	beq.n	80031fa <UB_VGA_writeText+0xd52>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 15, color, fontsize); break;
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 41, color, fontsize); break;
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 515, color, fontsize); break;
                			default: break;
                		}
                	default: break;
 800319a:	e05c      	b.n	8003256 <UB_VGA_writeText+0xdae>
            			switch(fontstyle)
 800319c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80031a0:	2b03      	cmp	r3, #3
 80031a2:	d01c      	beq.n	80031de <UB_VGA_writeText+0xd36>
 80031a4:	2b03      	cmp	r3, #3
 80031a6:	dc26      	bgt.n	80031f6 <UB_VGA_writeText+0xd4e>
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d002      	beq.n	80031b2 <UB_VGA_writeText+0xd0a>
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d00b      	beq.n	80031c8 <UB_VGA_writeText+0xd20>
            				default: break;
 80031b0:	e021      	b.n	80031f6 <UB_VGA_writeText+0xd4e>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'p', color, fontsize); break;
 80031b2:	7afa      	ldrb	r2, [r7, #11]
 80031b4:	89b9      	ldrh	r1, [r7, #12]
 80031b6:	8ab8      	ldrh	r0, [r7, #20]
 80031b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80031bc:	9300      	str	r3, [sp, #0]
 80031be:	4613      	mov	r3, r2
 80031c0:	2270      	movs	r2, #112	; 0x70
 80031c2:	f7ff f8b5 	bl	8002330 <UB_VGA_DrawBitmap>
 80031c6:	e017      	b.n	80031f8 <UB_VGA_writeText+0xd50>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'P', color, fontsize); break;
 80031c8:	7afa      	ldrb	r2, [r7, #11]
 80031ca:	89b9      	ldrh	r1, [r7, #12]
 80031cc:	8ab8      	ldrh	r0, [r7, #20]
 80031ce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80031d2:	9300      	str	r3, [sp, #0]
 80031d4:	4613      	mov	r3, r2
 80031d6:	2250      	movs	r2, #80	; 0x50
 80031d8:	f7ff f8aa 	bl	8002330 <UB_VGA_DrawBitmap>
 80031dc:	e00c      	b.n	80031f8 <UB_VGA_writeText+0xd50>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 541, color, fontsize); break;
 80031de:	7afa      	ldrb	r2, [r7, #11]
 80031e0:	89b9      	ldrh	r1, [r7, #12]
 80031e2:	8ab8      	ldrh	r0, [r7, #20]
 80031e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80031e8:	9300      	str	r3, [sp, #0]
 80031ea:	4613      	mov	r3, r2
 80031ec:	f240 221d 	movw	r2, #541	; 0x21d
 80031f0:	f7ff f89e 	bl	8002330 <UB_VGA_DrawBitmap>
 80031f4:	e000      	b.n	80031f8 <UB_VGA_writeText+0xd50>
            				default: break;
 80031f6:	bf00      	nop
            			break;
 80031f8:	e02e      	b.n	8003258 <UB_VGA_writeText+0xdb0>
                		switch(fontstyle)
 80031fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80031fe:	2b03      	cmp	r3, #3
 8003200:	d01c      	beq.n	800323c <UB_VGA_writeText+0xd94>
 8003202:	2b03      	cmp	r3, #3
 8003204:	dc26      	bgt.n	8003254 <UB_VGA_writeText+0xdac>
 8003206:	2b01      	cmp	r3, #1
 8003208:	d002      	beq.n	8003210 <UB_VGA_writeText+0xd68>
 800320a:	2b02      	cmp	r3, #2
 800320c:	d00b      	beq.n	8003226 <UB_VGA_writeText+0xd7e>
                			default: break;
 800320e:	e021      	b.n	8003254 <UB_VGA_writeText+0xdac>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 15, color, fontsize); break;
 8003210:	7afa      	ldrb	r2, [r7, #11]
 8003212:	89b9      	ldrh	r1, [r7, #12]
 8003214:	8ab8      	ldrh	r0, [r7, #20]
 8003216:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800321a:	9300      	str	r3, [sp, #0]
 800321c:	4613      	mov	r3, r2
 800321e:	220f      	movs	r2, #15
 8003220:	f7ff f886 	bl	8002330 <UB_VGA_DrawBitmap>
 8003224:	e017      	b.n	8003256 <UB_VGA_writeText+0xdae>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 41, color, fontsize); break;
 8003226:	7afa      	ldrb	r2, [r7, #11]
 8003228:	89b9      	ldrh	r1, [r7, #12]
 800322a:	8ab8      	ldrh	r0, [r7, #20]
 800322c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003230:	9300      	str	r3, [sp, #0]
 8003232:	4613      	mov	r3, r2
 8003234:	2229      	movs	r2, #41	; 0x29
 8003236:	f7ff f87b 	bl	8002330 <UB_VGA_DrawBitmap>
 800323a:	e00c      	b.n	8003256 <UB_VGA_writeText+0xdae>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 515, color, fontsize); break;
 800323c:	7afa      	ldrb	r2, [r7, #11]
 800323e:	89b9      	ldrh	r1, [r7, #12]
 8003240:	8ab8      	ldrh	r0, [r7, #20]
 8003242:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003246:	9300      	str	r3, [sp, #0]
 8003248:	4613      	mov	r3, r2
 800324a:	f240 2203 	movw	r2, #515	; 0x203
 800324e:	f7ff f86f 	bl	8002330 <UB_VGA_DrawBitmap>
 8003252:	e000      	b.n	8003256 <UB_VGA_writeText+0xdae>
                			default: break;
 8003254:	bf00      	nop
                	default: break;
 8003256:	bf00      	nop
            	}
                break;
 8003258:	e3fc      	b.n	8003a54 <UB_VGA_writeText+0x15ac>
            case 'q':
            	switch(fontname)
 800325a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d002      	beq.n	8003268 <UB_VGA_writeText+0xdc0>
 8003262:	2b02      	cmp	r3, #2
 8003264:	d02f      	beq.n	80032c6 <UB_VGA_writeText+0xe1e>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 16, color, fontsize); break;
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 42, color, fontsize); break;
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 516, color, fontsize); break;
                			default: break;
                		}
                	default: break;
 8003266:	e05c      	b.n	8003322 <UB_VGA_writeText+0xe7a>
            			switch(fontstyle)
 8003268:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800326c:	2b03      	cmp	r3, #3
 800326e:	d01c      	beq.n	80032aa <UB_VGA_writeText+0xe02>
 8003270:	2b03      	cmp	r3, #3
 8003272:	dc26      	bgt.n	80032c2 <UB_VGA_writeText+0xe1a>
 8003274:	2b01      	cmp	r3, #1
 8003276:	d002      	beq.n	800327e <UB_VGA_writeText+0xdd6>
 8003278:	2b02      	cmp	r3, #2
 800327a:	d00b      	beq.n	8003294 <UB_VGA_writeText+0xdec>
            				default: break;
 800327c:	e021      	b.n	80032c2 <UB_VGA_writeText+0xe1a>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'q', color, fontsize); break;
 800327e:	7afa      	ldrb	r2, [r7, #11]
 8003280:	89b9      	ldrh	r1, [r7, #12]
 8003282:	8ab8      	ldrh	r0, [r7, #20]
 8003284:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003288:	9300      	str	r3, [sp, #0]
 800328a:	4613      	mov	r3, r2
 800328c:	2271      	movs	r2, #113	; 0x71
 800328e:	f7ff f84f 	bl	8002330 <UB_VGA_DrawBitmap>
 8003292:	e017      	b.n	80032c4 <UB_VGA_writeText+0xe1c>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'Q', color, fontsize); break;
 8003294:	7afa      	ldrb	r2, [r7, #11]
 8003296:	89b9      	ldrh	r1, [r7, #12]
 8003298:	8ab8      	ldrh	r0, [r7, #20]
 800329a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800329e:	9300      	str	r3, [sp, #0]
 80032a0:	4613      	mov	r3, r2
 80032a2:	2251      	movs	r2, #81	; 0x51
 80032a4:	f7ff f844 	bl	8002330 <UB_VGA_DrawBitmap>
 80032a8:	e00c      	b.n	80032c4 <UB_VGA_writeText+0xe1c>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 542, color, fontsize); break;
 80032aa:	7afa      	ldrb	r2, [r7, #11]
 80032ac:	89b9      	ldrh	r1, [r7, #12]
 80032ae:	8ab8      	ldrh	r0, [r7, #20]
 80032b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80032b4:	9300      	str	r3, [sp, #0]
 80032b6:	4613      	mov	r3, r2
 80032b8:	f240 221e 	movw	r2, #542	; 0x21e
 80032bc:	f7ff f838 	bl	8002330 <UB_VGA_DrawBitmap>
 80032c0:	e000      	b.n	80032c4 <UB_VGA_writeText+0xe1c>
            				default: break;
 80032c2:	bf00      	nop
            			break;
 80032c4:	e02e      	b.n	8003324 <UB_VGA_writeText+0xe7c>
                		switch(fontstyle)
 80032c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80032ca:	2b03      	cmp	r3, #3
 80032cc:	d01c      	beq.n	8003308 <UB_VGA_writeText+0xe60>
 80032ce:	2b03      	cmp	r3, #3
 80032d0:	dc26      	bgt.n	8003320 <UB_VGA_writeText+0xe78>
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d002      	beq.n	80032dc <UB_VGA_writeText+0xe34>
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d00b      	beq.n	80032f2 <UB_VGA_writeText+0xe4a>
                			default: break;
 80032da:	e021      	b.n	8003320 <UB_VGA_writeText+0xe78>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 16, color, fontsize); break;
 80032dc:	7afa      	ldrb	r2, [r7, #11]
 80032de:	89b9      	ldrh	r1, [r7, #12]
 80032e0:	8ab8      	ldrh	r0, [r7, #20]
 80032e2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80032e6:	9300      	str	r3, [sp, #0]
 80032e8:	4613      	mov	r3, r2
 80032ea:	2210      	movs	r2, #16
 80032ec:	f7ff f820 	bl	8002330 <UB_VGA_DrawBitmap>
 80032f0:	e017      	b.n	8003322 <UB_VGA_writeText+0xe7a>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 42, color, fontsize); break;
 80032f2:	7afa      	ldrb	r2, [r7, #11]
 80032f4:	89b9      	ldrh	r1, [r7, #12]
 80032f6:	8ab8      	ldrh	r0, [r7, #20]
 80032f8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80032fc:	9300      	str	r3, [sp, #0]
 80032fe:	4613      	mov	r3, r2
 8003300:	222a      	movs	r2, #42	; 0x2a
 8003302:	f7ff f815 	bl	8002330 <UB_VGA_DrawBitmap>
 8003306:	e00c      	b.n	8003322 <UB_VGA_writeText+0xe7a>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 516, color, fontsize); break;
 8003308:	7afa      	ldrb	r2, [r7, #11]
 800330a:	89b9      	ldrh	r1, [r7, #12]
 800330c:	8ab8      	ldrh	r0, [r7, #20]
 800330e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003312:	9300      	str	r3, [sp, #0]
 8003314:	4613      	mov	r3, r2
 8003316:	f44f 7201 	mov.w	r2, #516	; 0x204
 800331a:	f7ff f809 	bl	8002330 <UB_VGA_DrawBitmap>
 800331e:	e000      	b.n	8003322 <UB_VGA_writeText+0xe7a>
                			default: break;
 8003320:	bf00      	nop
                	default: break;
 8003322:	bf00      	nop
            	}
                break;
 8003324:	e396      	b.n	8003a54 <UB_VGA_writeText+0x15ac>
            case 'r':
            	switch(fontname)
 8003326:	f897 3020 	ldrb.w	r3, [r7, #32]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d002      	beq.n	8003334 <UB_VGA_writeText+0xe8c>
 800332e:	2b02      	cmp	r3, #2
 8003330:	d02f      	beq.n	8003392 <UB_VGA_writeText+0xeea>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 17, color, fontsize); break;
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 43, color, fontsize); break;
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 517, color, fontsize); break;
                			default: break;
                		}
                	default: break;
 8003332:	e05c      	b.n	80033ee <UB_VGA_writeText+0xf46>
            			switch(fontstyle)
 8003334:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003338:	2b03      	cmp	r3, #3
 800333a:	d01c      	beq.n	8003376 <UB_VGA_writeText+0xece>
 800333c:	2b03      	cmp	r3, #3
 800333e:	dc26      	bgt.n	800338e <UB_VGA_writeText+0xee6>
 8003340:	2b01      	cmp	r3, #1
 8003342:	d002      	beq.n	800334a <UB_VGA_writeText+0xea2>
 8003344:	2b02      	cmp	r3, #2
 8003346:	d00b      	beq.n	8003360 <UB_VGA_writeText+0xeb8>
            				default: break;
 8003348:	e021      	b.n	800338e <UB_VGA_writeText+0xee6>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'r', color, fontsize); break;
 800334a:	7afa      	ldrb	r2, [r7, #11]
 800334c:	89b9      	ldrh	r1, [r7, #12]
 800334e:	8ab8      	ldrh	r0, [r7, #20]
 8003350:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	4613      	mov	r3, r2
 8003358:	2272      	movs	r2, #114	; 0x72
 800335a:	f7fe ffe9 	bl	8002330 <UB_VGA_DrawBitmap>
 800335e:	e017      	b.n	8003390 <UB_VGA_writeText+0xee8>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'R', color, fontsize); break;
 8003360:	7afa      	ldrb	r2, [r7, #11]
 8003362:	89b9      	ldrh	r1, [r7, #12]
 8003364:	8ab8      	ldrh	r0, [r7, #20]
 8003366:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800336a:	9300      	str	r3, [sp, #0]
 800336c:	4613      	mov	r3, r2
 800336e:	2252      	movs	r2, #82	; 0x52
 8003370:	f7fe ffde 	bl	8002330 <UB_VGA_DrawBitmap>
 8003374:	e00c      	b.n	8003390 <UB_VGA_writeText+0xee8>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 543, color, fontsize); break;
 8003376:	7afa      	ldrb	r2, [r7, #11]
 8003378:	89b9      	ldrh	r1, [r7, #12]
 800337a:	8ab8      	ldrh	r0, [r7, #20]
 800337c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	4613      	mov	r3, r2
 8003384:	f240 221f 	movw	r2, #543	; 0x21f
 8003388:	f7fe ffd2 	bl	8002330 <UB_VGA_DrawBitmap>
 800338c:	e000      	b.n	8003390 <UB_VGA_writeText+0xee8>
            				default: break;
 800338e:	bf00      	nop
            			break;
 8003390:	e02e      	b.n	80033f0 <UB_VGA_writeText+0xf48>
                		switch(fontstyle)
 8003392:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003396:	2b03      	cmp	r3, #3
 8003398:	d01c      	beq.n	80033d4 <UB_VGA_writeText+0xf2c>
 800339a:	2b03      	cmp	r3, #3
 800339c:	dc26      	bgt.n	80033ec <UB_VGA_writeText+0xf44>
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d002      	beq.n	80033a8 <UB_VGA_writeText+0xf00>
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d00b      	beq.n	80033be <UB_VGA_writeText+0xf16>
                			default: break;
 80033a6:	e021      	b.n	80033ec <UB_VGA_writeText+0xf44>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 17, color, fontsize); break;
 80033a8:	7afa      	ldrb	r2, [r7, #11]
 80033aa:	89b9      	ldrh	r1, [r7, #12]
 80033ac:	8ab8      	ldrh	r0, [r7, #20]
 80033ae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80033b2:	9300      	str	r3, [sp, #0]
 80033b4:	4613      	mov	r3, r2
 80033b6:	2211      	movs	r2, #17
 80033b8:	f7fe ffba 	bl	8002330 <UB_VGA_DrawBitmap>
 80033bc:	e017      	b.n	80033ee <UB_VGA_writeText+0xf46>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 43, color, fontsize); break;
 80033be:	7afa      	ldrb	r2, [r7, #11]
 80033c0:	89b9      	ldrh	r1, [r7, #12]
 80033c2:	8ab8      	ldrh	r0, [r7, #20]
 80033c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80033c8:	9300      	str	r3, [sp, #0]
 80033ca:	4613      	mov	r3, r2
 80033cc:	222b      	movs	r2, #43	; 0x2b
 80033ce:	f7fe ffaf 	bl	8002330 <UB_VGA_DrawBitmap>
 80033d2:	e00c      	b.n	80033ee <UB_VGA_writeText+0xf46>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 517, color, fontsize); break;
 80033d4:	7afa      	ldrb	r2, [r7, #11]
 80033d6:	89b9      	ldrh	r1, [r7, #12]
 80033d8:	8ab8      	ldrh	r0, [r7, #20]
 80033da:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80033de:	9300      	str	r3, [sp, #0]
 80033e0:	4613      	mov	r3, r2
 80033e2:	f240 2205 	movw	r2, #517	; 0x205
 80033e6:	f7fe ffa3 	bl	8002330 <UB_VGA_DrawBitmap>
 80033ea:	e000      	b.n	80033ee <UB_VGA_writeText+0xf46>
                			default: break;
 80033ec:	bf00      	nop
                	default: break;
 80033ee:	bf00      	nop
            	}
                break;
 80033f0:	e330      	b.n	8003a54 <UB_VGA_writeText+0x15ac>
            case 's':
            	switch(fontname)
 80033f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d002      	beq.n	8003400 <UB_VGA_writeText+0xf58>
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d02f      	beq.n	800345e <UB_VGA_writeText+0xfb6>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 18, color, fontsize); break;
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 44, color, fontsize); break;
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 518, color, fontsize); break;
                			default: break;
                		}
                	default: break;
 80033fe:	e05c      	b.n	80034ba <UB_VGA_writeText+0x1012>
            			switch(fontstyle)
 8003400:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003404:	2b03      	cmp	r3, #3
 8003406:	d01c      	beq.n	8003442 <UB_VGA_writeText+0xf9a>
 8003408:	2b03      	cmp	r3, #3
 800340a:	dc26      	bgt.n	800345a <UB_VGA_writeText+0xfb2>
 800340c:	2b01      	cmp	r3, #1
 800340e:	d002      	beq.n	8003416 <UB_VGA_writeText+0xf6e>
 8003410:	2b02      	cmp	r3, #2
 8003412:	d00b      	beq.n	800342c <UB_VGA_writeText+0xf84>
            				default: break;
 8003414:	e021      	b.n	800345a <UB_VGA_writeText+0xfb2>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 's', color, fontsize); break;
 8003416:	7afa      	ldrb	r2, [r7, #11]
 8003418:	89b9      	ldrh	r1, [r7, #12]
 800341a:	8ab8      	ldrh	r0, [r7, #20]
 800341c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003420:	9300      	str	r3, [sp, #0]
 8003422:	4613      	mov	r3, r2
 8003424:	2273      	movs	r2, #115	; 0x73
 8003426:	f7fe ff83 	bl	8002330 <UB_VGA_DrawBitmap>
 800342a:	e017      	b.n	800345c <UB_VGA_writeText+0xfb4>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'S', color, fontsize); break;
 800342c:	7afa      	ldrb	r2, [r7, #11]
 800342e:	89b9      	ldrh	r1, [r7, #12]
 8003430:	8ab8      	ldrh	r0, [r7, #20]
 8003432:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003436:	9300      	str	r3, [sp, #0]
 8003438:	4613      	mov	r3, r2
 800343a:	2253      	movs	r2, #83	; 0x53
 800343c:	f7fe ff78 	bl	8002330 <UB_VGA_DrawBitmap>
 8003440:	e00c      	b.n	800345c <UB_VGA_writeText+0xfb4>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 544, color, fontsize); break;
 8003442:	7afa      	ldrb	r2, [r7, #11]
 8003444:	89b9      	ldrh	r1, [r7, #12]
 8003446:	8ab8      	ldrh	r0, [r7, #20]
 8003448:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	4613      	mov	r3, r2
 8003450:	f44f 7208 	mov.w	r2, #544	; 0x220
 8003454:	f7fe ff6c 	bl	8002330 <UB_VGA_DrawBitmap>
 8003458:	e000      	b.n	800345c <UB_VGA_writeText+0xfb4>
            				default: break;
 800345a:	bf00      	nop
            			break;
 800345c:	e02e      	b.n	80034bc <UB_VGA_writeText+0x1014>
                		switch(fontstyle)
 800345e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003462:	2b03      	cmp	r3, #3
 8003464:	d01c      	beq.n	80034a0 <UB_VGA_writeText+0xff8>
 8003466:	2b03      	cmp	r3, #3
 8003468:	dc26      	bgt.n	80034b8 <UB_VGA_writeText+0x1010>
 800346a:	2b01      	cmp	r3, #1
 800346c:	d002      	beq.n	8003474 <UB_VGA_writeText+0xfcc>
 800346e:	2b02      	cmp	r3, #2
 8003470:	d00b      	beq.n	800348a <UB_VGA_writeText+0xfe2>
                			default: break;
 8003472:	e021      	b.n	80034b8 <UB_VGA_writeText+0x1010>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 18, color, fontsize); break;
 8003474:	7afa      	ldrb	r2, [r7, #11]
 8003476:	89b9      	ldrh	r1, [r7, #12]
 8003478:	8ab8      	ldrh	r0, [r7, #20]
 800347a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800347e:	9300      	str	r3, [sp, #0]
 8003480:	4613      	mov	r3, r2
 8003482:	2212      	movs	r2, #18
 8003484:	f7fe ff54 	bl	8002330 <UB_VGA_DrawBitmap>
 8003488:	e017      	b.n	80034ba <UB_VGA_writeText+0x1012>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 44, color, fontsize); break;
 800348a:	7afa      	ldrb	r2, [r7, #11]
 800348c:	89b9      	ldrh	r1, [r7, #12]
 800348e:	8ab8      	ldrh	r0, [r7, #20]
 8003490:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	4613      	mov	r3, r2
 8003498:	222c      	movs	r2, #44	; 0x2c
 800349a:	f7fe ff49 	bl	8002330 <UB_VGA_DrawBitmap>
 800349e:	e00c      	b.n	80034ba <UB_VGA_writeText+0x1012>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 518, color, fontsize); break;
 80034a0:	7afa      	ldrb	r2, [r7, #11]
 80034a2:	89b9      	ldrh	r1, [r7, #12]
 80034a4:	8ab8      	ldrh	r0, [r7, #20]
 80034a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	4613      	mov	r3, r2
 80034ae:	f240 2206 	movw	r2, #518	; 0x206
 80034b2:	f7fe ff3d 	bl	8002330 <UB_VGA_DrawBitmap>
 80034b6:	e000      	b.n	80034ba <UB_VGA_writeText+0x1012>
                			default: break;
 80034b8:	bf00      	nop
                	default: break;
 80034ba:	bf00      	nop
            	}
            	break;
 80034bc:	e2ca      	b.n	8003a54 <UB_VGA_writeText+0x15ac>
            case 't':
            	switch(fontname)
 80034be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d002      	beq.n	80034cc <UB_VGA_writeText+0x1024>
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d02f      	beq.n	800352a <UB_VGA_writeText+0x1082>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 19, color, fontsize); break;
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 45, color, fontsize); break;
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 519, color, fontsize); break;
                			default: break;
                		}
                	default: break;
 80034ca:	e05c      	b.n	8003586 <UB_VGA_writeText+0x10de>
            			switch(fontstyle)
 80034cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80034d0:	2b03      	cmp	r3, #3
 80034d2:	d01c      	beq.n	800350e <UB_VGA_writeText+0x1066>
 80034d4:	2b03      	cmp	r3, #3
 80034d6:	dc26      	bgt.n	8003526 <UB_VGA_writeText+0x107e>
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d002      	beq.n	80034e2 <UB_VGA_writeText+0x103a>
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d00b      	beq.n	80034f8 <UB_VGA_writeText+0x1050>
            				default: break;
 80034e0:	e021      	b.n	8003526 <UB_VGA_writeText+0x107e>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 't', color, fontsize); break;
 80034e2:	7afa      	ldrb	r2, [r7, #11]
 80034e4:	89b9      	ldrh	r1, [r7, #12]
 80034e6:	8ab8      	ldrh	r0, [r7, #20]
 80034e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	4613      	mov	r3, r2
 80034f0:	2274      	movs	r2, #116	; 0x74
 80034f2:	f7fe ff1d 	bl	8002330 <UB_VGA_DrawBitmap>
 80034f6:	e017      	b.n	8003528 <UB_VGA_writeText+0x1080>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'T', color, fontsize); break;
 80034f8:	7afa      	ldrb	r2, [r7, #11]
 80034fa:	89b9      	ldrh	r1, [r7, #12]
 80034fc:	8ab8      	ldrh	r0, [r7, #20]
 80034fe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003502:	9300      	str	r3, [sp, #0]
 8003504:	4613      	mov	r3, r2
 8003506:	2254      	movs	r2, #84	; 0x54
 8003508:	f7fe ff12 	bl	8002330 <UB_VGA_DrawBitmap>
 800350c:	e00c      	b.n	8003528 <UB_VGA_writeText+0x1080>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 545, color, fontsize); break;
 800350e:	7afa      	ldrb	r2, [r7, #11]
 8003510:	89b9      	ldrh	r1, [r7, #12]
 8003512:	8ab8      	ldrh	r0, [r7, #20]
 8003514:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	4613      	mov	r3, r2
 800351c:	f240 2221 	movw	r2, #545	; 0x221
 8003520:	f7fe ff06 	bl	8002330 <UB_VGA_DrawBitmap>
 8003524:	e000      	b.n	8003528 <UB_VGA_writeText+0x1080>
            				default: break;
 8003526:	bf00      	nop
            			break;
 8003528:	e02e      	b.n	8003588 <UB_VGA_writeText+0x10e0>
                		switch(fontstyle)
 800352a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800352e:	2b03      	cmp	r3, #3
 8003530:	d01c      	beq.n	800356c <UB_VGA_writeText+0x10c4>
 8003532:	2b03      	cmp	r3, #3
 8003534:	dc26      	bgt.n	8003584 <UB_VGA_writeText+0x10dc>
 8003536:	2b01      	cmp	r3, #1
 8003538:	d002      	beq.n	8003540 <UB_VGA_writeText+0x1098>
 800353a:	2b02      	cmp	r3, #2
 800353c:	d00b      	beq.n	8003556 <UB_VGA_writeText+0x10ae>
                			default: break;
 800353e:	e021      	b.n	8003584 <UB_VGA_writeText+0x10dc>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 19, color, fontsize); break;
 8003540:	7afa      	ldrb	r2, [r7, #11]
 8003542:	89b9      	ldrh	r1, [r7, #12]
 8003544:	8ab8      	ldrh	r0, [r7, #20]
 8003546:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800354a:	9300      	str	r3, [sp, #0]
 800354c:	4613      	mov	r3, r2
 800354e:	2213      	movs	r2, #19
 8003550:	f7fe feee 	bl	8002330 <UB_VGA_DrawBitmap>
 8003554:	e017      	b.n	8003586 <UB_VGA_writeText+0x10de>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 45, color, fontsize); break;
 8003556:	7afa      	ldrb	r2, [r7, #11]
 8003558:	89b9      	ldrh	r1, [r7, #12]
 800355a:	8ab8      	ldrh	r0, [r7, #20]
 800355c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	4613      	mov	r3, r2
 8003564:	222d      	movs	r2, #45	; 0x2d
 8003566:	f7fe fee3 	bl	8002330 <UB_VGA_DrawBitmap>
 800356a:	e00c      	b.n	8003586 <UB_VGA_writeText+0x10de>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 519, color, fontsize); break;
 800356c:	7afa      	ldrb	r2, [r7, #11]
 800356e:	89b9      	ldrh	r1, [r7, #12]
 8003570:	8ab8      	ldrh	r0, [r7, #20]
 8003572:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003576:	9300      	str	r3, [sp, #0]
 8003578:	4613      	mov	r3, r2
 800357a:	f240 2207 	movw	r2, #519	; 0x207
 800357e:	f7fe fed7 	bl	8002330 <UB_VGA_DrawBitmap>
 8003582:	e000      	b.n	8003586 <UB_VGA_writeText+0x10de>
                			default: break;
 8003584:	bf00      	nop
                	default: break;
 8003586:	bf00      	nop
            	}
                break;
 8003588:	e264      	b.n	8003a54 <UB_VGA_writeText+0x15ac>
            case 'u':
            	switch(fontname)
 800358a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d002      	beq.n	8003598 <UB_VGA_writeText+0x10f0>
 8003592:	2b02      	cmp	r3, #2
 8003594:	d02f      	beq.n	80035f6 <UB_VGA_writeText+0x114e>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 20, color, fontsize); break;
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 46, color, fontsize); break;
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 520, color, fontsize); break;
                			default: break;
                		}
                	default: break;
 8003596:	e05c      	b.n	8003652 <UB_VGA_writeText+0x11aa>
            			switch(fontstyle)
 8003598:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800359c:	2b03      	cmp	r3, #3
 800359e:	d01c      	beq.n	80035da <UB_VGA_writeText+0x1132>
 80035a0:	2b03      	cmp	r3, #3
 80035a2:	dc26      	bgt.n	80035f2 <UB_VGA_writeText+0x114a>
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d002      	beq.n	80035ae <UB_VGA_writeText+0x1106>
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d00b      	beq.n	80035c4 <UB_VGA_writeText+0x111c>
            				default: break;
 80035ac:	e021      	b.n	80035f2 <UB_VGA_writeText+0x114a>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'u', color, fontsize); break;
 80035ae:	7afa      	ldrb	r2, [r7, #11]
 80035b0:	89b9      	ldrh	r1, [r7, #12]
 80035b2:	8ab8      	ldrh	r0, [r7, #20]
 80035b4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80035b8:	9300      	str	r3, [sp, #0]
 80035ba:	4613      	mov	r3, r2
 80035bc:	2275      	movs	r2, #117	; 0x75
 80035be:	f7fe feb7 	bl	8002330 <UB_VGA_DrawBitmap>
 80035c2:	e017      	b.n	80035f4 <UB_VGA_writeText+0x114c>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'U', color, fontsize); break;
 80035c4:	7afa      	ldrb	r2, [r7, #11]
 80035c6:	89b9      	ldrh	r1, [r7, #12]
 80035c8:	8ab8      	ldrh	r0, [r7, #20]
 80035ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80035ce:	9300      	str	r3, [sp, #0]
 80035d0:	4613      	mov	r3, r2
 80035d2:	2255      	movs	r2, #85	; 0x55
 80035d4:	f7fe feac 	bl	8002330 <UB_VGA_DrawBitmap>
 80035d8:	e00c      	b.n	80035f4 <UB_VGA_writeText+0x114c>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 546, color, fontsize); break;
 80035da:	7afa      	ldrb	r2, [r7, #11]
 80035dc:	89b9      	ldrh	r1, [r7, #12]
 80035de:	8ab8      	ldrh	r0, [r7, #20]
 80035e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	4613      	mov	r3, r2
 80035e8:	f240 2222 	movw	r2, #546	; 0x222
 80035ec:	f7fe fea0 	bl	8002330 <UB_VGA_DrawBitmap>
 80035f0:	e000      	b.n	80035f4 <UB_VGA_writeText+0x114c>
            				default: break;
 80035f2:	bf00      	nop
            			break;
 80035f4:	e02e      	b.n	8003654 <UB_VGA_writeText+0x11ac>
                		switch(fontstyle)
 80035f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80035fa:	2b03      	cmp	r3, #3
 80035fc:	d01c      	beq.n	8003638 <UB_VGA_writeText+0x1190>
 80035fe:	2b03      	cmp	r3, #3
 8003600:	dc26      	bgt.n	8003650 <UB_VGA_writeText+0x11a8>
 8003602:	2b01      	cmp	r3, #1
 8003604:	d002      	beq.n	800360c <UB_VGA_writeText+0x1164>
 8003606:	2b02      	cmp	r3, #2
 8003608:	d00b      	beq.n	8003622 <UB_VGA_writeText+0x117a>
                			default: break;
 800360a:	e021      	b.n	8003650 <UB_VGA_writeText+0x11a8>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 20, color, fontsize); break;
 800360c:	7afa      	ldrb	r2, [r7, #11]
 800360e:	89b9      	ldrh	r1, [r7, #12]
 8003610:	8ab8      	ldrh	r0, [r7, #20]
 8003612:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	4613      	mov	r3, r2
 800361a:	2214      	movs	r2, #20
 800361c:	f7fe fe88 	bl	8002330 <UB_VGA_DrawBitmap>
 8003620:	e017      	b.n	8003652 <UB_VGA_writeText+0x11aa>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 46, color, fontsize); break;
 8003622:	7afa      	ldrb	r2, [r7, #11]
 8003624:	89b9      	ldrh	r1, [r7, #12]
 8003626:	8ab8      	ldrh	r0, [r7, #20]
 8003628:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	4613      	mov	r3, r2
 8003630:	222e      	movs	r2, #46	; 0x2e
 8003632:	f7fe fe7d 	bl	8002330 <UB_VGA_DrawBitmap>
 8003636:	e00c      	b.n	8003652 <UB_VGA_writeText+0x11aa>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 520, color, fontsize); break;
 8003638:	7afa      	ldrb	r2, [r7, #11]
 800363a:	89b9      	ldrh	r1, [r7, #12]
 800363c:	8ab8      	ldrh	r0, [r7, #20]
 800363e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003642:	9300      	str	r3, [sp, #0]
 8003644:	4613      	mov	r3, r2
 8003646:	f44f 7202 	mov.w	r2, #520	; 0x208
 800364a:	f7fe fe71 	bl	8002330 <UB_VGA_DrawBitmap>
 800364e:	e000      	b.n	8003652 <UB_VGA_writeText+0x11aa>
                			default: break;
 8003650:	bf00      	nop
                	default: break;
 8003652:	bf00      	nop
            	}
                break;
 8003654:	e1fe      	b.n	8003a54 <UB_VGA_writeText+0x15ac>
            case 'v':
            	switch(fontname)
 8003656:	f897 3020 	ldrb.w	r3, [r7, #32]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d002      	beq.n	8003664 <UB_VGA_writeText+0x11bc>
 800365e:	2b02      	cmp	r3, #2
 8003660:	d02f      	beq.n	80036c2 <UB_VGA_writeText+0x121a>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 21, color, fontsize); break;
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 47, color, fontsize); break;
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 521, color, fontsize); break;
                			default: break;
                		}
                	default: break;
 8003662:	e05c      	b.n	800371e <UB_VGA_writeText+0x1276>
            			switch(fontstyle)
 8003664:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003668:	2b03      	cmp	r3, #3
 800366a:	d01c      	beq.n	80036a6 <UB_VGA_writeText+0x11fe>
 800366c:	2b03      	cmp	r3, #3
 800366e:	dc26      	bgt.n	80036be <UB_VGA_writeText+0x1216>
 8003670:	2b01      	cmp	r3, #1
 8003672:	d002      	beq.n	800367a <UB_VGA_writeText+0x11d2>
 8003674:	2b02      	cmp	r3, #2
 8003676:	d00b      	beq.n	8003690 <UB_VGA_writeText+0x11e8>
            				default: break;
 8003678:	e021      	b.n	80036be <UB_VGA_writeText+0x1216>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'v', color, fontsize); break;
 800367a:	7afa      	ldrb	r2, [r7, #11]
 800367c:	89b9      	ldrh	r1, [r7, #12]
 800367e:	8ab8      	ldrh	r0, [r7, #20]
 8003680:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	4613      	mov	r3, r2
 8003688:	2276      	movs	r2, #118	; 0x76
 800368a:	f7fe fe51 	bl	8002330 <UB_VGA_DrawBitmap>
 800368e:	e017      	b.n	80036c0 <UB_VGA_writeText+0x1218>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'V', color, fontsize); break;
 8003690:	7afa      	ldrb	r2, [r7, #11]
 8003692:	89b9      	ldrh	r1, [r7, #12]
 8003694:	8ab8      	ldrh	r0, [r7, #20]
 8003696:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800369a:	9300      	str	r3, [sp, #0]
 800369c:	4613      	mov	r3, r2
 800369e:	2256      	movs	r2, #86	; 0x56
 80036a0:	f7fe fe46 	bl	8002330 <UB_VGA_DrawBitmap>
 80036a4:	e00c      	b.n	80036c0 <UB_VGA_writeText+0x1218>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 547, color, fontsize); break;
 80036a6:	7afa      	ldrb	r2, [r7, #11]
 80036a8:	89b9      	ldrh	r1, [r7, #12]
 80036aa:	8ab8      	ldrh	r0, [r7, #20]
 80036ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80036b0:	9300      	str	r3, [sp, #0]
 80036b2:	4613      	mov	r3, r2
 80036b4:	f240 2223 	movw	r2, #547	; 0x223
 80036b8:	f7fe fe3a 	bl	8002330 <UB_VGA_DrawBitmap>
 80036bc:	e000      	b.n	80036c0 <UB_VGA_writeText+0x1218>
            				default: break;
 80036be:	bf00      	nop
            			break;
 80036c0:	e02e      	b.n	8003720 <UB_VGA_writeText+0x1278>
                		switch(fontstyle)
 80036c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80036c6:	2b03      	cmp	r3, #3
 80036c8:	d01c      	beq.n	8003704 <UB_VGA_writeText+0x125c>
 80036ca:	2b03      	cmp	r3, #3
 80036cc:	dc26      	bgt.n	800371c <UB_VGA_writeText+0x1274>
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d002      	beq.n	80036d8 <UB_VGA_writeText+0x1230>
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d00b      	beq.n	80036ee <UB_VGA_writeText+0x1246>
                			default: break;
 80036d6:	e021      	b.n	800371c <UB_VGA_writeText+0x1274>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 21, color, fontsize); break;
 80036d8:	7afa      	ldrb	r2, [r7, #11]
 80036da:	89b9      	ldrh	r1, [r7, #12]
 80036dc:	8ab8      	ldrh	r0, [r7, #20]
 80036de:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80036e2:	9300      	str	r3, [sp, #0]
 80036e4:	4613      	mov	r3, r2
 80036e6:	2215      	movs	r2, #21
 80036e8:	f7fe fe22 	bl	8002330 <UB_VGA_DrawBitmap>
 80036ec:	e017      	b.n	800371e <UB_VGA_writeText+0x1276>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 47, color, fontsize); break;
 80036ee:	7afa      	ldrb	r2, [r7, #11]
 80036f0:	89b9      	ldrh	r1, [r7, #12]
 80036f2:	8ab8      	ldrh	r0, [r7, #20]
 80036f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80036f8:	9300      	str	r3, [sp, #0]
 80036fa:	4613      	mov	r3, r2
 80036fc:	222f      	movs	r2, #47	; 0x2f
 80036fe:	f7fe fe17 	bl	8002330 <UB_VGA_DrawBitmap>
 8003702:	e00c      	b.n	800371e <UB_VGA_writeText+0x1276>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 521, color, fontsize); break;
 8003704:	7afa      	ldrb	r2, [r7, #11]
 8003706:	89b9      	ldrh	r1, [r7, #12]
 8003708:	8ab8      	ldrh	r0, [r7, #20]
 800370a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	4613      	mov	r3, r2
 8003712:	f240 2209 	movw	r2, #521	; 0x209
 8003716:	f7fe fe0b 	bl	8002330 <UB_VGA_DrawBitmap>
 800371a:	e000      	b.n	800371e <UB_VGA_writeText+0x1276>
                			default: break;
 800371c:	bf00      	nop
                	default: break;
 800371e:	bf00      	nop
            	}
                break;
 8003720:	e198      	b.n	8003a54 <UB_VGA_writeText+0x15ac>
            case 'w':
            	switch(fontname)
 8003722:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d002      	beq.n	8003730 <UB_VGA_writeText+0x1288>
 800372a:	2b02      	cmp	r3, #2
 800372c:	d02f      	beq.n	800378e <UB_VGA_writeText+0x12e6>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 22, color, fontsize); break;
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 48, color, fontsize); break;
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 522, color, fontsize); break;
                			default: break;
                		}
                	default: break;
 800372e:	e05c      	b.n	80037ea <UB_VGA_writeText+0x1342>
            			switch(fontstyle)
 8003730:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003734:	2b03      	cmp	r3, #3
 8003736:	d01c      	beq.n	8003772 <UB_VGA_writeText+0x12ca>
 8003738:	2b03      	cmp	r3, #3
 800373a:	dc26      	bgt.n	800378a <UB_VGA_writeText+0x12e2>
 800373c:	2b01      	cmp	r3, #1
 800373e:	d002      	beq.n	8003746 <UB_VGA_writeText+0x129e>
 8003740:	2b02      	cmp	r3, #2
 8003742:	d00b      	beq.n	800375c <UB_VGA_writeText+0x12b4>
            				default: break;
 8003744:	e021      	b.n	800378a <UB_VGA_writeText+0x12e2>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'w', color, fontsize); break;
 8003746:	7afa      	ldrb	r2, [r7, #11]
 8003748:	89b9      	ldrh	r1, [r7, #12]
 800374a:	8ab8      	ldrh	r0, [r7, #20]
 800374c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	4613      	mov	r3, r2
 8003754:	2277      	movs	r2, #119	; 0x77
 8003756:	f7fe fdeb 	bl	8002330 <UB_VGA_DrawBitmap>
 800375a:	e017      	b.n	800378c <UB_VGA_writeText+0x12e4>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'W', color, fontsize); break;
 800375c:	7afa      	ldrb	r2, [r7, #11]
 800375e:	89b9      	ldrh	r1, [r7, #12]
 8003760:	8ab8      	ldrh	r0, [r7, #20]
 8003762:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	4613      	mov	r3, r2
 800376a:	2257      	movs	r2, #87	; 0x57
 800376c:	f7fe fde0 	bl	8002330 <UB_VGA_DrawBitmap>
 8003770:	e00c      	b.n	800378c <UB_VGA_writeText+0x12e4>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 548, color, fontsize); break;
 8003772:	7afa      	ldrb	r2, [r7, #11]
 8003774:	89b9      	ldrh	r1, [r7, #12]
 8003776:	8ab8      	ldrh	r0, [r7, #20]
 8003778:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800377c:	9300      	str	r3, [sp, #0]
 800377e:	4613      	mov	r3, r2
 8003780:	f44f 7209 	mov.w	r2, #548	; 0x224
 8003784:	f7fe fdd4 	bl	8002330 <UB_VGA_DrawBitmap>
 8003788:	e000      	b.n	800378c <UB_VGA_writeText+0x12e4>
            				default: break;
 800378a:	bf00      	nop
            			break;
 800378c:	e02e      	b.n	80037ec <UB_VGA_writeText+0x1344>
                		switch(fontstyle)
 800378e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003792:	2b03      	cmp	r3, #3
 8003794:	d01c      	beq.n	80037d0 <UB_VGA_writeText+0x1328>
 8003796:	2b03      	cmp	r3, #3
 8003798:	dc26      	bgt.n	80037e8 <UB_VGA_writeText+0x1340>
 800379a:	2b01      	cmp	r3, #1
 800379c:	d002      	beq.n	80037a4 <UB_VGA_writeText+0x12fc>
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d00b      	beq.n	80037ba <UB_VGA_writeText+0x1312>
                			default: break;
 80037a2:	e021      	b.n	80037e8 <UB_VGA_writeText+0x1340>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 22, color, fontsize); break;
 80037a4:	7afa      	ldrb	r2, [r7, #11]
 80037a6:	89b9      	ldrh	r1, [r7, #12]
 80037a8:	8ab8      	ldrh	r0, [r7, #20]
 80037aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80037ae:	9300      	str	r3, [sp, #0]
 80037b0:	4613      	mov	r3, r2
 80037b2:	2216      	movs	r2, #22
 80037b4:	f7fe fdbc 	bl	8002330 <UB_VGA_DrawBitmap>
 80037b8:	e017      	b.n	80037ea <UB_VGA_writeText+0x1342>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 48, color, fontsize); break;
 80037ba:	7afa      	ldrb	r2, [r7, #11]
 80037bc:	89b9      	ldrh	r1, [r7, #12]
 80037be:	8ab8      	ldrh	r0, [r7, #20]
 80037c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	4613      	mov	r3, r2
 80037c8:	2230      	movs	r2, #48	; 0x30
 80037ca:	f7fe fdb1 	bl	8002330 <UB_VGA_DrawBitmap>
 80037ce:	e00c      	b.n	80037ea <UB_VGA_writeText+0x1342>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 522, color, fontsize); break;
 80037d0:	7afa      	ldrb	r2, [r7, #11]
 80037d2:	89b9      	ldrh	r1, [r7, #12]
 80037d4:	8ab8      	ldrh	r0, [r7, #20]
 80037d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80037da:	9300      	str	r3, [sp, #0]
 80037dc:	4613      	mov	r3, r2
 80037de:	f240 220a 	movw	r2, #522	; 0x20a
 80037e2:	f7fe fda5 	bl	8002330 <UB_VGA_DrawBitmap>
 80037e6:	e000      	b.n	80037ea <UB_VGA_writeText+0x1342>
                			default: break;
 80037e8:	bf00      	nop
                	default: break;
 80037ea:	bf00      	nop
            	}
                break;
 80037ec:	e132      	b.n	8003a54 <UB_VGA_writeText+0x15ac>
            case 'x':
            	switch(fontname)
 80037ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d002      	beq.n	80037fc <UB_VGA_writeText+0x1354>
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d02f      	beq.n	800385a <UB_VGA_writeText+0x13b2>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 23, color, fontsize); break;
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 49, color, fontsize); break;
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 523, color, fontsize); break;
                			default: break;
                		}
                	default: break;
 80037fa:	e05c      	b.n	80038b6 <UB_VGA_writeText+0x140e>
            			switch(fontstyle)
 80037fc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003800:	2b03      	cmp	r3, #3
 8003802:	d01c      	beq.n	800383e <UB_VGA_writeText+0x1396>
 8003804:	2b03      	cmp	r3, #3
 8003806:	dc26      	bgt.n	8003856 <UB_VGA_writeText+0x13ae>
 8003808:	2b01      	cmp	r3, #1
 800380a:	d002      	beq.n	8003812 <UB_VGA_writeText+0x136a>
 800380c:	2b02      	cmp	r3, #2
 800380e:	d00b      	beq.n	8003828 <UB_VGA_writeText+0x1380>
            				default: break;
 8003810:	e021      	b.n	8003856 <UB_VGA_writeText+0x13ae>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'x', color, fontsize); break;
 8003812:	7afa      	ldrb	r2, [r7, #11]
 8003814:	89b9      	ldrh	r1, [r7, #12]
 8003816:	8ab8      	ldrh	r0, [r7, #20]
 8003818:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	4613      	mov	r3, r2
 8003820:	2278      	movs	r2, #120	; 0x78
 8003822:	f7fe fd85 	bl	8002330 <UB_VGA_DrawBitmap>
 8003826:	e017      	b.n	8003858 <UB_VGA_writeText+0x13b0>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'X', color, fontsize); break;
 8003828:	7afa      	ldrb	r2, [r7, #11]
 800382a:	89b9      	ldrh	r1, [r7, #12]
 800382c:	8ab8      	ldrh	r0, [r7, #20]
 800382e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	4613      	mov	r3, r2
 8003836:	2258      	movs	r2, #88	; 0x58
 8003838:	f7fe fd7a 	bl	8002330 <UB_VGA_DrawBitmap>
 800383c:	e00c      	b.n	8003858 <UB_VGA_writeText+0x13b0>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 549, color, fontsize); break;
 800383e:	7afa      	ldrb	r2, [r7, #11]
 8003840:	89b9      	ldrh	r1, [r7, #12]
 8003842:	8ab8      	ldrh	r0, [r7, #20]
 8003844:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	4613      	mov	r3, r2
 800384c:	f240 2225 	movw	r2, #549	; 0x225
 8003850:	f7fe fd6e 	bl	8002330 <UB_VGA_DrawBitmap>
 8003854:	e000      	b.n	8003858 <UB_VGA_writeText+0x13b0>
            				default: break;
 8003856:	bf00      	nop
            			break;
 8003858:	e02e      	b.n	80038b8 <UB_VGA_writeText+0x1410>
                		switch(fontstyle)
 800385a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800385e:	2b03      	cmp	r3, #3
 8003860:	d01c      	beq.n	800389c <UB_VGA_writeText+0x13f4>
 8003862:	2b03      	cmp	r3, #3
 8003864:	dc26      	bgt.n	80038b4 <UB_VGA_writeText+0x140c>
 8003866:	2b01      	cmp	r3, #1
 8003868:	d002      	beq.n	8003870 <UB_VGA_writeText+0x13c8>
 800386a:	2b02      	cmp	r3, #2
 800386c:	d00b      	beq.n	8003886 <UB_VGA_writeText+0x13de>
                			default: break;
 800386e:	e021      	b.n	80038b4 <UB_VGA_writeText+0x140c>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 23, color, fontsize); break;
 8003870:	7afa      	ldrb	r2, [r7, #11]
 8003872:	89b9      	ldrh	r1, [r7, #12]
 8003874:	8ab8      	ldrh	r0, [r7, #20]
 8003876:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	4613      	mov	r3, r2
 800387e:	2217      	movs	r2, #23
 8003880:	f7fe fd56 	bl	8002330 <UB_VGA_DrawBitmap>
 8003884:	e017      	b.n	80038b6 <UB_VGA_writeText+0x140e>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 49, color, fontsize); break;
 8003886:	7afa      	ldrb	r2, [r7, #11]
 8003888:	89b9      	ldrh	r1, [r7, #12]
 800388a:	8ab8      	ldrh	r0, [r7, #20]
 800388c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	4613      	mov	r3, r2
 8003894:	2231      	movs	r2, #49	; 0x31
 8003896:	f7fe fd4b 	bl	8002330 <UB_VGA_DrawBitmap>
 800389a:	e00c      	b.n	80038b6 <UB_VGA_writeText+0x140e>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 523, color, fontsize); break;
 800389c:	7afa      	ldrb	r2, [r7, #11]
 800389e:	89b9      	ldrh	r1, [r7, #12]
 80038a0:	8ab8      	ldrh	r0, [r7, #20]
 80038a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80038a6:	9300      	str	r3, [sp, #0]
 80038a8:	4613      	mov	r3, r2
 80038aa:	f240 220b 	movw	r2, #523	; 0x20b
 80038ae:	f7fe fd3f 	bl	8002330 <UB_VGA_DrawBitmap>
 80038b2:	e000      	b.n	80038b6 <UB_VGA_writeText+0x140e>
                			default: break;
 80038b4:	bf00      	nop
                	default: break;
 80038b6:	bf00      	nop
            	}
                break;
 80038b8:	e0cc      	b.n	8003a54 <UB_VGA_writeText+0x15ac>
            case 'y':
            	switch(fontname)
 80038ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d002      	beq.n	80038c8 <UB_VGA_writeText+0x1420>
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d02f      	beq.n	8003926 <UB_VGA_writeText+0x147e>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 24, color, fontsize); break;
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 50, color, fontsize); break;
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 524, color, fontsize); break;
                			default: break;
                		}
                	default: break;
 80038c6:	e05c      	b.n	8003982 <UB_VGA_writeText+0x14da>
            			switch(fontstyle)
 80038c8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80038cc:	2b03      	cmp	r3, #3
 80038ce:	d01c      	beq.n	800390a <UB_VGA_writeText+0x1462>
 80038d0:	2b03      	cmp	r3, #3
 80038d2:	dc26      	bgt.n	8003922 <UB_VGA_writeText+0x147a>
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d002      	beq.n	80038de <UB_VGA_writeText+0x1436>
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d00b      	beq.n	80038f4 <UB_VGA_writeText+0x144c>
            				default: break;
 80038dc:	e021      	b.n	8003922 <UB_VGA_writeText+0x147a>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'y', color, fontsize); break;
 80038de:	7afa      	ldrb	r2, [r7, #11]
 80038e0:	89b9      	ldrh	r1, [r7, #12]
 80038e2:	8ab8      	ldrh	r0, [r7, #20]
 80038e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80038e8:	9300      	str	r3, [sp, #0]
 80038ea:	4613      	mov	r3, r2
 80038ec:	2279      	movs	r2, #121	; 0x79
 80038ee:	f7fe fd1f 	bl	8002330 <UB_VGA_DrawBitmap>
 80038f2:	e017      	b.n	8003924 <UB_VGA_writeText+0x147c>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'Y', color, fontsize); break;
 80038f4:	7afa      	ldrb	r2, [r7, #11]
 80038f6:	89b9      	ldrh	r1, [r7, #12]
 80038f8:	8ab8      	ldrh	r0, [r7, #20]
 80038fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80038fe:	9300      	str	r3, [sp, #0]
 8003900:	4613      	mov	r3, r2
 8003902:	2259      	movs	r2, #89	; 0x59
 8003904:	f7fe fd14 	bl	8002330 <UB_VGA_DrawBitmap>
 8003908:	e00c      	b.n	8003924 <UB_VGA_writeText+0x147c>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 550, color, fontsize); break;
 800390a:	7afa      	ldrb	r2, [r7, #11]
 800390c:	89b9      	ldrh	r1, [r7, #12]
 800390e:	8ab8      	ldrh	r0, [r7, #20]
 8003910:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003914:	9300      	str	r3, [sp, #0]
 8003916:	4613      	mov	r3, r2
 8003918:	f240 2226 	movw	r2, #550	; 0x226
 800391c:	f7fe fd08 	bl	8002330 <UB_VGA_DrawBitmap>
 8003920:	e000      	b.n	8003924 <UB_VGA_writeText+0x147c>
            				default: break;
 8003922:	bf00      	nop
            			break;
 8003924:	e02e      	b.n	8003984 <UB_VGA_writeText+0x14dc>
                		switch(fontstyle)
 8003926:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800392a:	2b03      	cmp	r3, #3
 800392c:	d01c      	beq.n	8003968 <UB_VGA_writeText+0x14c0>
 800392e:	2b03      	cmp	r3, #3
 8003930:	dc26      	bgt.n	8003980 <UB_VGA_writeText+0x14d8>
 8003932:	2b01      	cmp	r3, #1
 8003934:	d002      	beq.n	800393c <UB_VGA_writeText+0x1494>
 8003936:	2b02      	cmp	r3, #2
 8003938:	d00b      	beq.n	8003952 <UB_VGA_writeText+0x14aa>
                			default: break;
 800393a:	e021      	b.n	8003980 <UB_VGA_writeText+0x14d8>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 24, color, fontsize); break;
 800393c:	7afa      	ldrb	r2, [r7, #11]
 800393e:	89b9      	ldrh	r1, [r7, #12]
 8003940:	8ab8      	ldrh	r0, [r7, #20]
 8003942:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	4613      	mov	r3, r2
 800394a:	2218      	movs	r2, #24
 800394c:	f7fe fcf0 	bl	8002330 <UB_VGA_DrawBitmap>
 8003950:	e017      	b.n	8003982 <UB_VGA_writeText+0x14da>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 50, color, fontsize); break;
 8003952:	7afa      	ldrb	r2, [r7, #11]
 8003954:	89b9      	ldrh	r1, [r7, #12]
 8003956:	8ab8      	ldrh	r0, [r7, #20]
 8003958:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800395c:	9300      	str	r3, [sp, #0]
 800395e:	4613      	mov	r3, r2
 8003960:	2232      	movs	r2, #50	; 0x32
 8003962:	f7fe fce5 	bl	8002330 <UB_VGA_DrawBitmap>
 8003966:	e00c      	b.n	8003982 <UB_VGA_writeText+0x14da>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 524, color, fontsize); break;
 8003968:	7afa      	ldrb	r2, [r7, #11]
 800396a:	89b9      	ldrh	r1, [r7, #12]
 800396c:	8ab8      	ldrh	r0, [r7, #20]
 800396e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003972:	9300      	str	r3, [sp, #0]
 8003974:	4613      	mov	r3, r2
 8003976:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800397a:	f7fe fcd9 	bl	8002330 <UB_VGA_DrawBitmap>
 800397e:	e000      	b.n	8003982 <UB_VGA_writeText+0x14da>
                			default: break;
 8003980:	bf00      	nop
                	default: break;
 8003982:	bf00      	nop
            	}
                break;
 8003984:	e066      	b.n	8003a54 <UB_VGA_writeText+0x15ac>
            case 'z':
            	switch(fontname)
 8003986:	f897 3020 	ldrb.w	r3, [r7, #32]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d002      	beq.n	8003994 <UB_VGA_writeText+0x14ec>
 800398e:	2b02      	cmp	r3, #2
 8003990:	d02f      	beq.n	80039f2 <UB_VGA_writeText+0x154a>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 25, color, fontsize); break;
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 51, color, fontsize); break;
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 525, color, fontsize); break;
                			default: break;
                		}
                	default: break;
 8003992:	e05c      	b.n	8003a4e <UB_VGA_writeText+0x15a6>
            			switch(fontstyle)
 8003994:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003998:	2b03      	cmp	r3, #3
 800399a:	d01c      	beq.n	80039d6 <UB_VGA_writeText+0x152e>
 800399c:	2b03      	cmp	r3, #3
 800399e:	dc26      	bgt.n	80039ee <UB_VGA_writeText+0x1546>
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d002      	beq.n	80039aa <UB_VGA_writeText+0x1502>
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d00b      	beq.n	80039c0 <UB_VGA_writeText+0x1518>
            				default: break;
 80039a8:	e021      	b.n	80039ee <UB_VGA_writeText+0x1546>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'z', color, fontsize); break;
 80039aa:	7afa      	ldrb	r2, [r7, #11]
 80039ac:	89b9      	ldrh	r1, [r7, #12]
 80039ae:	8ab8      	ldrh	r0, [r7, #20]
 80039b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80039b4:	9300      	str	r3, [sp, #0]
 80039b6:	4613      	mov	r3, r2
 80039b8:	227a      	movs	r2, #122	; 0x7a
 80039ba:	f7fe fcb9 	bl	8002330 <UB_VGA_DrawBitmap>
 80039be:	e017      	b.n	80039f0 <UB_VGA_writeText+0x1548>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'Z', color, fontsize); break;
 80039c0:	7afa      	ldrb	r2, [r7, #11]
 80039c2:	89b9      	ldrh	r1, [r7, #12]
 80039c4:	8ab8      	ldrh	r0, [r7, #20]
 80039c6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80039ca:	9300      	str	r3, [sp, #0]
 80039cc:	4613      	mov	r3, r2
 80039ce:	225a      	movs	r2, #90	; 0x5a
 80039d0:	f7fe fcae 	bl	8002330 <UB_VGA_DrawBitmap>
 80039d4:	e00c      	b.n	80039f0 <UB_VGA_writeText+0x1548>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 551, color, fontsize); break;
 80039d6:	7afa      	ldrb	r2, [r7, #11]
 80039d8:	89b9      	ldrh	r1, [r7, #12]
 80039da:	8ab8      	ldrh	r0, [r7, #20]
 80039dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80039e0:	9300      	str	r3, [sp, #0]
 80039e2:	4613      	mov	r3, r2
 80039e4:	f240 2227 	movw	r2, #551	; 0x227
 80039e8:	f7fe fca2 	bl	8002330 <UB_VGA_DrawBitmap>
 80039ec:	e000      	b.n	80039f0 <UB_VGA_writeText+0x1548>
            				default: break;
 80039ee:	bf00      	nop
            			break;
 80039f0:	e02e      	b.n	8003a50 <UB_VGA_writeText+0x15a8>
                		switch(fontstyle)
 80039f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80039f6:	2b03      	cmp	r3, #3
 80039f8:	d01c      	beq.n	8003a34 <UB_VGA_writeText+0x158c>
 80039fa:	2b03      	cmp	r3, #3
 80039fc:	dc26      	bgt.n	8003a4c <UB_VGA_writeText+0x15a4>
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d002      	beq.n	8003a08 <UB_VGA_writeText+0x1560>
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d00b      	beq.n	8003a1e <UB_VGA_writeText+0x1576>
                			default: break;
 8003a06:	e021      	b.n	8003a4c <UB_VGA_writeText+0x15a4>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 25, color, fontsize); break;
 8003a08:	7afa      	ldrb	r2, [r7, #11]
 8003a0a:	89b9      	ldrh	r1, [r7, #12]
 8003a0c:	8ab8      	ldrh	r0, [r7, #20]
 8003a0e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	4613      	mov	r3, r2
 8003a16:	2219      	movs	r2, #25
 8003a18:	f7fe fc8a 	bl	8002330 <UB_VGA_DrawBitmap>
 8003a1c:	e017      	b.n	8003a4e <UB_VGA_writeText+0x15a6>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 51, color, fontsize); break;
 8003a1e:	7afa      	ldrb	r2, [r7, #11]
 8003a20:	89b9      	ldrh	r1, [r7, #12]
 8003a22:	8ab8      	ldrh	r0, [r7, #20]
 8003a24:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003a28:	9300      	str	r3, [sp, #0]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	2233      	movs	r2, #51	; 0x33
 8003a2e:	f7fe fc7f 	bl	8002330 <UB_VGA_DrawBitmap>
 8003a32:	e00c      	b.n	8003a4e <UB_VGA_writeText+0x15a6>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 525, color, fontsize); break;
 8003a34:	7afa      	ldrb	r2, [r7, #11]
 8003a36:	89b9      	ldrh	r1, [r7, #12]
 8003a38:	8ab8      	ldrh	r0, [r7, #20]
 8003a3a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003a3e:	9300      	str	r3, [sp, #0]
 8003a40:	4613      	mov	r3, r2
 8003a42:	f240 220d 	movw	r2, #525	; 0x20d
 8003a46:	f7fe fc73 	bl	8002330 <UB_VGA_DrawBitmap>
 8003a4a:	e000      	b.n	8003a4e <UB_VGA_writeText+0x15a6>
                			default: break;
 8003a4c:	bf00      	nop
                	default: break;
 8003a4e:	bf00      	nop
            	}
                break;
 8003a50:	e000      	b.n	8003a54 <UB_VGA_writeText+0x15ac>
            default:
                break;
 8003a52:	bf00      	nop
    for(i=0; i < 20; i++)	//maximum text size of 20 letters
 8003a54:	7dfb      	ldrb	r3, [r7, #23]
 8003a56:	3301      	adds	r3, #1
 8003a58:	75fb      	strb	r3, [r7, #23]
 8003a5a:	7dfb      	ldrb	r3, [r7, #23]
 8003a5c:	2b13      	cmp	r3, #19
 8003a5e:	f67e ad44 	bls.w	80024ea <UB_VGA_writeText+0x42>


        }
    }
}
 8003a62:	bf00      	nop
 8003a64:	bf00      	nop
 8003a66:	3718      	adds	r7, #24
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a70:	4b0e      	ldr	r3, [pc, #56]	; (8003aac <HAL_Init+0x40>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a0d      	ldr	r2, [pc, #52]	; (8003aac <HAL_Init+0x40>)
 8003a76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a7c:	4b0b      	ldr	r3, [pc, #44]	; (8003aac <HAL_Init+0x40>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a0a      	ldr	r2, [pc, #40]	; (8003aac <HAL_Init+0x40>)
 8003a82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a88:	4b08      	ldr	r3, [pc, #32]	; (8003aac <HAL_Init+0x40>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a07      	ldr	r2, [pc, #28]	; (8003aac <HAL_Init+0x40>)
 8003a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a94:	2003      	movs	r0, #3
 8003a96:	f000 f92b 	bl	8003cf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a9a:	2000      	movs	r0, #0
 8003a9c:	f000 f808 	bl	8003ab0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003aa0:	f7fd fd5a 	bl	8001558 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	40023c00 	.word	0x40023c00

08003ab0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ab8:	4b12      	ldr	r3, [pc, #72]	; (8003b04 <HAL_InitTick+0x54>)
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	4b12      	ldr	r3, [pc, #72]	; (8003b08 <HAL_InitTick+0x58>)
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ac6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f000 f943 	bl	8003d5a <HAL_SYSTICK_Config>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e00e      	b.n	8003afc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2b0f      	cmp	r3, #15
 8003ae2:	d80a      	bhi.n	8003afa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	6879      	ldr	r1, [r7, #4]
 8003ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8003aec:	f000 f90b 	bl	8003d06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003af0:	4a06      	ldr	r2, [pc, #24]	; (8003b0c <HAL_InitTick+0x5c>)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
 8003af8:	e000      	b.n	8003afc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3708      	adds	r7, #8
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	200000a8 	.word	0x200000a8
 8003b08:	200000b0 	.word	0x200000b0
 8003b0c:	200000ac 	.word	0x200000ac

08003b10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b14:	4b06      	ldr	r3, [pc, #24]	; (8003b30 <HAL_IncTick+0x20>)
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	461a      	mov	r2, r3
 8003b1a:	4b06      	ldr	r3, [pc, #24]	; (8003b34 <HAL_IncTick+0x24>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4413      	add	r3, r2
 8003b20:	4a04      	ldr	r2, [pc, #16]	; (8003b34 <HAL_IncTick+0x24>)
 8003b22:	6013      	str	r3, [r2, #0]
}
 8003b24:	bf00      	nop
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	200000b0 	.word	0x200000b0
 8003b34:	20013b2c 	.word	0x20013b2c

08003b38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
  return uwTick;
 8003b3c:	4b03      	ldr	r3, [pc, #12]	; (8003b4c <HAL_GetTick+0x14>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	20013b2c 	.word	0x20013b2c

08003b50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f003 0307 	and.w	r3, r3, #7
 8003b5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b60:	4b0c      	ldr	r3, [pc, #48]	; (8003b94 <__NVIC_SetPriorityGrouping+0x44>)
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b82:	4a04      	ldr	r2, [pc, #16]	; (8003b94 <__NVIC_SetPriorityGrouping+0x44>)
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	60d3      	str	r3, [r2, #12]
}
 8003b88:	bf00      	nop
 8003b8a:	3714      	adds	r7, #20
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr
 8003b94:	e000ed00 	.word	0xe000ed00

08003b98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b9c:	4b04      	ldr	r3, [pc, #16]	; (8003bb0 <__NVIC_GetPriorityGrouping+0x18>)
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	0a1b      	lsrs	r3, r3, #8
 8003ba2:	f003 0307 	and.w	r3, r3, #7
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr
 8003bb0:	e000ed00 	.word	0xe000ed00

08003bb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	4603      	mov	r3, r0
 8003bbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	db0b      	blt.n	8003bde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bc6:	79fb      	ldrb	r3, [r7, #7]
 8003bc8:	f003 021f 	and.w	r2, r3, #31
 8003bcc:	4907      	ldr	r1, [pc, #28]	; (8003bec <__NVIC_EnableIRQ+0x38>)
 8003bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bd2:	095b      	lsrs	r3, r3, #5
 8003bd4:	2001      	movs	r0, #1
 8003bd6:	fa00 f202 	lsl.w	r2, r0, r2
 8003bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003bde:	bf00      	nop
 8003be0:	370c      	adds	r7, #12
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	e000e100 	.word	0xe000e100

08003bf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	6039      	str	r1, [r7, #0]
 8003bfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	db0a      	blt.n	8003c1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	b2da      	uxtb	r2, r3
 8003c08:	490c      	ldr	r1, [pc, #48]	; (8003c3c <__NVIC_SetPriority+0x4c>)
 8003c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c0e:	0112      	lsls	r2, r2, #4
 8003c10:	b2d2      	uxtb	r2, r2
 8003c12:	440b      	add	r3, r1
 8003c14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c18:	e00a      	b.n	8003c30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	b2da      	uxtb	r2, r3
 8003c1e:	4908      	ldr	r1, [pc, #32]	; (8003c40 <__NVIC_SetPriority+0x50>)
 8003c20:	79fb      	ldrb	r3, [r7, #7]
 8003c22:	f003 030f 	and.w	r3, r3, #15
 8003c26:	3b04      	subs	r3, #4
 8003c28:	0112      	lsls	r2, r2, #4
 8003c2a:	b2d2      	uxtb	r2, r2
 8003c2c:	440b      	add	r3, r1
 8003c2e:	761a      	strb	r2, [r3, #24]
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	e000e100 	.word	0xe000e100
 8003c40:	e000ed00 	.word	0xe000ed00

08003c44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b089      	sub	sp, #36	; 0x24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f003 0307 	and.w	r3, r3, #7
 8003c56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	f1c3 0307 	rsb	r3, r3, #7
 8003c5e:	2b04      	cmp	r3, #4
 8003c60:	bf28      	it	cs
 8003c62:	2304      	movcs	r3, #4
 8003c64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	3304      	adds	r3, #4
 8003c6a:	2b06      	cmp	r3, #6
 8003c6c:	d902      	bls.n	8003c74 <NVIC_EncodePriority+0x30>
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	3b03      	subs	r3, #3
 8003c72:	e000      	b.n	8003c76 <NVIC_EncodePriority+0x32>
 8003c74:	2300      	movs	r3, #0
 8003c76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c78:	f04f 32ff 	mov.w	r2, #4294967295
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c82:	43da      	mvns	r2, r3
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	401a      	ands	r2, r3
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	fa01 f303 	lsl.w	r3, r1, r3
 8003c96:	43d9      	mvns	r1, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c9c:	4313      	orrs	r3, r2
         );
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3724      	adds	r7, #36	; 0x24
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
	...

08003cac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cbc:	d301      	bcc.n	8003cc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e00f      	b.n	8003ce2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cc2:	4a0a      	ldr	r2, [pc, #40]	; (8003cec <SysTick_Config+0x40>)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cca:	210f      	movs	r1, #15
 8003ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8003cd0:	f7ff ff8e 	bl	8003bf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cd4:	4b05      	ldr	r3, [pc, #20]	; (8003cec <SysTick_Config+0x40>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cda:	4b04      	ldr	r3, [pc, #16]	; (8003cec <SysTick_Config+0x40>)
 8003cdc:	2207      	movs	r2, #7
 8003cde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	e000e010 	.word	0xe000e010

08003cf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f7ff ff29 	bl	8003b50 <__NVIC_SetPriorityGrouping>
}
 8003cfe:	bf00      	nop
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b086      	sub	sp, #24
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	60b9      	str	r1, [r7, #8]
 8003d10:	607a      	str	r2, [r7, #4]
 8003d12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d14:	2300      	movs	r3, #0
 8003d16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d18:	f7ff ff3e 	bl	8003b98 <__NVIC_GetPriorityGrouping>
 8003d1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	68b9      	ldr	r1, [r7, #8]
 8003d22:	6978      	ldr	r0, [r7, #20]
 8003d24:	f7ff ff8e 	bl	8003c44 <NVIC_EncodePriority>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d2e:	4611      	mov	r1, r2
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7ff ff5d 	bl	8003bf0 <__NVIC_SetPriority>
}
 8003d36:	bf00      	nop
 8003d38:	3718      	adds	r7, #24
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b082      	sub	sp, #8
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	4603      	mov	r3, r0
 8003d46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7ff ff31 	bl	8003bb4 <__NVIC_EnableIRQ>
}
 8003d52:	bf00      	nop
 8003d54:	3708      	adds	r7, #8
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b082      	sub	sp, #8
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f7ff ffa2 	bl	8003cac <SysTick_Config>
 8003d68:	4603      	mov	r3, r0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
	...

08003d74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003d80:	f7ff feda 	bl	8003b38 <HAL_GetTick>
 8003d84:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d101      	bne.n	8003d90 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e099      	b.n	8003ec4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f022 0201 	bic.w	r2, r2, #1
 8003dae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003db0:	e00f      	b.n	8003dd2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003db2:	f7ff fec1 	bl	8003b38 <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	2b05      	cmp	r3, #5
 8003dbe:	d908      	bls.n	8003dd2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2220      	movs	r2, #32
 8003dc4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2203      	movs	r2, #3
 8003dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e078      	b.n	8003ec4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1e8      	bne.n	8003db2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	4b38      	ldr	r3, [pc, #224]	; (8003ecc <HAL_DMA_Init+0x158>)
 8003dec:	4013      	ands	r3, r2
 8003dee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685a      	ldr	r2, [r3, #4]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003dfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a1b      	ldr	r3, [r3, #32]
 8003e1c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e28:	2b04      	cmp	r3, #4
 8003e2a:	d107      	bne.n	8003e3c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e34:	4313      	orrs	r3, r2
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	697a      	ldr	r2, [r7, #20]
 8003e42:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	f023 0307 	bic.w	r3, r3, #7
 8003e52:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e58:	697a      	ldr	r2, [r7, #20]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e62:	2b04      	cmp	r3, #4
 8003e64:	d117      	bne.n	8003e96 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00e      	beq.n	8003e96 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 fa91 	bl	80043a0 <DMA_CheckFifoParam>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d008      	beq.n	8003e96 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2240      	movs	r2, #64	; 0x40
 8003e88:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003e92:	2301      	movs	r3, #1
 8003e94:	e016      	b.n	8003ec4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	697a      	ldr	r2, [r7, #20]
 8003e9c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 fa48 	bl	8004334 <DMA_CalcBaseAndBitshift>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eac:	223f      	movs	r2, #63	; 0x3f
 8003eae:	409a      	lsls	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3718      	adds	r7, #24
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	f010803f 	.word	0xf010803f

08003ed0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	607a      	str	r2, [r7, #4]
 8003edc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d101      	bne.n	8003ef6 <HAL_DMA_Start_IT+0x26>
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	e040      	b.n	8003f78 <HAL_DMA_Start_IT+0xa8>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d12f      	bne.n	8003f6a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2202      	movs	r2, #2
 8003f0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	68b9      	ldr	r1, [r7, #8]
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f000 f9da 	bl	80042d8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f28:	223f      	movs	r2, #63	; 0x3f
 8003f2a:	409a      	lsls	r2, r3
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f042 0216 	orr.w	r2, r2, #22
 8003f3e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d007      	beq.n	8003f58 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f042 0208 	orr.w	r2, r2, #8
 8003f56:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f042 0201 	orr.w	r2, r2, #1
 8003f66:	601a      	str	r2, [r3, #0]
 8003f68:	e005      	b.n	8003f76 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003f72:	2302      	movs	r3, #2
 8003f74:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3718      	adds	r7, #24
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d004      	beq.n	8003f9e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2280      	movs	r2, #128	; 0x80
 8003f98:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e00c      	b.n	8003fb8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2205      	movs	r2, #5
 8003fa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 0201 	bic.w	r2, r2, #1
 8003fb4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b086      	sub	sp, #24
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003fd0:	4b8e      	ldr	r3, [pc, #568]	; (800420c <HAL_DMA_IRQHandler+0x248>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a8e      	ldr	r2, [pc, #568]	; (8004210 <HAL_DMA_IRQHandler+0x24c>)
 8003fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fda:	0a9b      	lsrs	r3, r3, #10
 8003fdc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fee:	2208      	movs	r2, #8
 8003ff0:	409a      	lsls	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d01a      	beq.n	8004030 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b00      	cmp	r3, #0
 8004006:	d013      	beq.n	8004030 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f022 0204 	bic.w	r2, r2, #4
 8004016:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800401c:	2208      	movs	r2, #8
 800401e:	409a      	lsls	r2, r3
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004028:	f043 0201 	orr.w	r2, r3, #1
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004034:	2201      	movs	r2, #1
 8004036:	409a      	lsls	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	4013      	ands	r3, r2
 800403c:	2b00      	cmp	r3, #0
 800403e:	d012      	beq.n	8004066 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00b      	beq.n	8004066 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004052:	2201      	movs	r2, #1
 8004054:	409a      	lsls	r2, r3
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800405e:	f043 0202 	orr.w	r2, r3, #2
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800406a:	2204      	movs	r2, #4
 800406c:	409a      	lsls	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	4013      	ands	r3, r2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d012      	beq.n	800409c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00b      	beq.n	800409c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004088:	2204      	movs	r2, #4
 800408a:	409a      	lsls	r2, r3
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004094:	f043 0204 	orr.w	r2, r3, #4
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a0:	2210      	movs	r2, #16
 80040a2:	409a      	lsls	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	4013      	ands	r3, r2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d043      	beq.n	8004134 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0308 	and.w	r3, r3, #8
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d03c      	beq.n	8004134 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040be:	2210      	movs	r2, #16
 80040c0:	409a      	lsls	r2, r3
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d018      	beq.n	8004106 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d108      	bne.n	80040f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d024      	beq.n	8004134 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	4798      	blx	r3
 80040f2:	e01f      	b.n	8004134 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d01b      	beq.n	8004134 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	4798      	blx	r3
 8004104:	e016      	b.n	8004134 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004110:	2b00      	cmp	r3, #0
 8004112:	d107      	bne.n	8004124 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f022 0208 	bic.w	r2, r2, #8
 8004122:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004128:	2b00      	cmp	r3, #0
 800412a:	d003      	beq.n	8004134 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004138:	2220      	movs	r2, #32
 800413a:	409a      	lsls	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	4013      	ands	r3, r2
 8004140:	2b00      	cmp	r3, #0
 8004142:	f000 808f 	beq.w	8004264 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0310 	and.w	r3, r3, #16
 8004150:	2b00      	cmp	r3, #0
 8004152:	f000 8087 	beq.w	8004264 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800415a:	2220      	movs	r2, #32
 800415c:	409a      	lsls	r2, r3
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b05      	cmp	r3, #5
 800416c:	d136      	bne.n	80041dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f022 0216 	bic.w	r2, r2, #22
 800417c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	695a      	ldr	r2, [r3, #20]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800418c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004192:	2b00      	cmp	r3, #0
 8004194:	d103      	bne.n	800419e <HAL_DMA_IRQHandler+0x1da>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800419a:	2b00      	cmp	r3, #0
 800419c:	d007      	beq.n	80041ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f022 0208 	bic.w	r2, r2, #8
 80041ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041b2:	223f      	movs	r2, #63	; 0x3f
 80041b4:	409a      	lsls	r2, r3
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d07e      	beq.n	80042d0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	4798      	blx	r3
        }
        return;
 80041da:	e079      	b.n	80042d0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d01d      	beq.n	8004226 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d10d      	bne.n	8004214 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d031      	beq.n	8004264 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	4798      	blx	r3
 8004208:	e02c      	b.n	8004264 <HAL_DMA_IRQHandler+0x2a0>
 800420a:	bf00      	nop
 800420c:	200000a8 	.word	0x200000a8
 8004210:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004218:	2b00      	cmp	r3, #0
 800421a:	d023      	beq.n	8004264 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	4798      	blx	r3
 8004224:	e01e      	b.n	8004264 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004230:	2b00      	cmp	r3, #0
 8004232:	d10f      	bne.n	8004254 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 0210 	bic.w	r2, r2, #16
 8004242:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004258:	2b00      	cmp	r3, #0
 800425a:	d003      	beq.n	8004264 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004268:	2b00      	cmp	r3, #0
 800426a:	d032      	beq.n	80042d2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004270:	f003 0301 	and.w	r3, r3, #1
 8004274:	2b00      	cmp	r3, #0
 8004276:	d022      	beq.n	80042be <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2205      	movs	r2, #5
 800427c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f022 0201 	bic.w	r2, r2, #1
 800428e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	3301      	adds	r3, #1
 8004294:	60bb      	str	r3, [r7, #8]
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	429a      	cmp	r2, r3
 800429a:	d307      	bcc.n	80042ac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1f2      	bne.n	8004290 <HAL_DMA_IRQHandler+0x2cc>
 80042aa:	e000      	b.n	80042ae <HAL_DMA_IRQHandler+0x2ea>
          break;
 80042ac:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d005      	beq.n	80042d2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	4798      	blx	r3
 80042ce:	e000      	b.n	80042d2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80042d0:	bf00      	nop
    }
  }
}
 80042d2:	3718      	adds	r7, #24
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
 80042e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80042f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	2b40      	cmp	r3, #64	; 0x40
 8004304:	d108      	bne.n	8004318 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68ba      	ldr	r2, [r7, #8]
 8004314:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004316:	e007      	b.n	8004328 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68ba      	ldr	r2, [r7, #8]
 800431e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	60da      	str	r2, [r3, #12]
}
 8004328:	bf00      	nop
 800432a:	3714      	adds	r7, #20
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	b2db      	uxtb	r3, r3
 8004342:	3b10      	subs	r3, #16
 8004344:	4a14      	ldr	r2, [pc, #80]	; (8004398 <DMA_CalcBaseAndBitshift+0x64>)
 8004346:	fba2 2303 	umull	r2, r3, r2, r3
 800434a:	091b      	lsrs	r3, r3, #4
 800434c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800434e:	4a13      	ldr	r2, [pc, #76]	; (800439c <DMA_CalcBaseAndBitshift+0x68>)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	4413      	add	r3, r2
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	461a      	mov	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2b03      	cmp	r3, #3
 8004360:	d909      	bls.n	8004376 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800436a:	f023 0303 	bic.w	r3, r3, #3
 800436e:	1d1a      	adds	r2, r3, #4
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	659a      	str	r2, [r3, #88]	; 0x58
 8004374:	e007      	b.n	8004386 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800437e:	f023 0303 	bic.w	r3, r3, #3
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800438a:	4618      	mov	r0, r3
 800438c:	3714      	adds	r7, #20
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	aaaaaaab 	.word	0xaaaaaaab
 800439c:	0800d294 	.word	0x0800d294

080043a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043a8:	2300      	movs	r3, #0
 80043aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d11f      	bne.n	80043fa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	2b03      	cmp	r3, #3
 80043be:	d856      	bhi.n	800446e <DMA_CheckFifoParam+0xce>
 80043c0:	a201      	add	r2, pc, #4	; (adr r2, 80043c8 <DMA_CheckFifoParam+0x28>)
 80043c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c6:	bf00      	nop
 80043c8:	080043d9 	.word	0x080043d9
 80043cc:	080043eb 	.word	0x080043eb
 80043d0:	080043d9 	.word	0x080043d9
 80043d4:	0800446f 	.word	0x0800446f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d046      	beq.n	8004472 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043e8:	e043      	b.n	8004472 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80043f2:	d140      	bne.n	8004476 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043f8:	e03d      	b.n	8004476 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004402:	d121      	bne.n	8004448 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	2b03      	cmp	r3, #3
 8004408:	d837      	bhi.n	800447a <DMA_CheckFifoParam+0xda>
 800440a:	a201      	add	r2, pc, #4	; (adr r2, 8004410 <DMA_CheckFifoParam+0x70>)
 800440c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004410:	08004421 	.word	0x08004421
 8004414:	08004427 	.word	0x08004427
 8004418:	08004421 	.word	0x08004421
 800441c:	08004439 	.word	0x08004439
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	73fb      	strb	r3, [r7, #15]
      break;
 8004424:	e030      	b.n	8004488 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d025      	beq.n	800447e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004436:	e022      	b.n	800447e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004440:	d11f      	bne.n	8004482 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004446:	e01c      	b.n	8004482 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	2b02      	cmp	r3, #2
 800444c:	d903      	bls.n	8004456 <DMA_CheckFifoParam+0xb6>
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	2b03      	cmp	r3, #3
 8004452:	d003      	beq.n	800445c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004454:	e018      	b.n	8004488 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	73fb      	strb	r3, [r7, #15]
      break;
 800445a:	e015      	b.n	8004488 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004460:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00e      	beq.n	8004486 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	73fb      	strb	r3, [r7, #15]
      break;
 800446c:	e00b      	b.n	8004486 <DMA_CheckFifoParam+0xe6>
      break;
 800446e:	bf00      	nop
 8004470:	e00a      	b.n	8004488 <DMA_CheckFifoParam+0xe8>
      break;
 8004472:	bf00      	nop
 8004474:	e008      	b.n	8004488 <DMA_CheckFifoParam+0xe8>
      break;
 8004476:	bf00      	nop
 8004478:	e006      	b.n	8004488 <DMA_CheckFifoParam+0xe8>
      break;
 800447a:	bf00      	nop
 800447c:	e004      	b.n	8004488 <DMA_CheckFifoParam+0xe8>
      break;
 800447e:	bf00      	nop
 8004480:	e002      	b.n	8004488 <DMA_CheckFifoParam+0xe8>
      break;   
 8004482:	bf00      	nop
 8004484:	e000      	b.n	8004488 <DMA_CheckFifoParam+0xe8>
      break;
 8004486:	bf00      	nop
    }
  } 
  
  return status; 
 8004488:	7bfb      	ldrb	r3, [r7, #15]
}
 800448a:	4618      	mov	r0, r3
 800448c:	3714      	adds	r7, #20
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop

08004498 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004498:	b480      	push	{r7}
 800449a:	b089      	sub	sp, #36	; 0x24
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80044a2:	2300      	movs	r3, #0
 80044a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80044a6:	2300      	movs	r3, #0
 80044a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80044aa:	2300      	movs	r3, #0
 80044ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044ae:	2300      	movs	r3, #0
 80044b0:	61fb      	str	r3, [r7, #28]
 80044b2:	e16b      	b.n	800478c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80044b4:	2201      	movs	r2, #1
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	fa02 f303 	lsl.w	r3, r2, r3
 80044bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	4013      	ands	r3, r2
 80044c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	f040 815a 	bne.w	8004786 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d00b      	beq.n	80044f2 <HAL_GPIO_Init+0x5a>
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d007      	beq.n	80044f2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80044e6:	2b11      	cmp	r3, #17
 80044e8:	d003      	beq.n	80044f2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	2b12      	cmp	r3, #18
 80044f0:	d130      	bne.n	8004554 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	005b      	lsls	r3, r3, #1
 80044fc:	2203      	movs	r2, #3
 80044fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004502:	43db      	mvns	r3, r3
 8004504:	69ba      	ldr	r2, [r7, #24]
 8004506:	4013      	ands	r3, r2
 8004508:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	68da      	ldr	r2, [r3, #12]
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	005b      	lsls	r3, r3, #1
 8004512:	fa02 f303 	lsl.w	r3, r2, r3
 8004516:	69ba      	ldr	r2, [r7, #24]
 8004518:	4313      	orrs	r3, r2
 800451a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	69ba      	ldr	r2, [r7, #24]
 8004520:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004528:	2201      	movs	r2, #1
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	fa02 f303 	lsl.w	r3, r2, r3
 8004530:	43db      	mvns	r3, r3
 8004532:	69ba      	ldr	r2, [r7, #24]
 8004534:	4013      	ands	r3, r2
 8004536:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	091b      	lsrs	r3, r3, #4
 800453e:	f003 0201 	and.w	r2, r3, #1
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	fa02 f303 	lsl.w	r3, r2, r3
 8004548:	69ba      	ldr	r2, [r7, #24]
 800454a:	4313      	orrs	r3, r2
 800454c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	005b      	lsls	r3, r3, #1
 800455e:	2203      	movs	r2, #3
 8004560:	fa02 f303 	lsl.w	r3, r2, r3
 8004564:	43db      	mvns	r3, r3
 8004566:	69ba      	ldr	r2, [r7, #24]
 8004568:	4013      	ands	r3, r2
 800456a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	689a      	ldr	r2, [r3, #8]
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	005b      	lsls	r3, r3, #1
 8004574:	fa02 f303 	lsl.w	r3, r2, r3
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	4313      	orrs	r3, r2
 800457c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	69ba      	ldr	r2, [r7, #24]
 8004582:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	2b02      	cmp	r3, #2
 800458a:	d003      	beq.n	8004594 <HAL_GPIO_Init+0xfc>
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	2b12      	cmp	r3, #18
 8004592:	d123      	bne.n	80045dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	08da      	lsrs	r2, r3, #3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	3208      	adds	r2, #8
 800459c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	f003 0307 	and.w	r3, r3, #7
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	220f      	movs	r2, #15
 80045ac:	fa02 f303 	lsl.w	r3, r2, r3
 80045b0:	43db      	mvns	r3, r3
 80045b2:	69ba      	ldr	r2, [r7, #24]
 80045b4:	4013      	ands	r3, r2
 80045b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	691a      	ldr	r2, [r3, #16]
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	f003 0307 	and.w	r3, r3, #7
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	fa02 f303 	lsl.w	r3, r2, r3
 80045c8:	69ba      	ldr	r2, [r7, #24]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	08da      	lsrs	r2, r3, #3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	3208      	adds	r2, #8
 80045d6:	69b9      	ldr	r1, [r7, #24]
 80045d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	005b      	lsls	r3, r3, #1
 80045e6:	2203      	movs	r2, #3
 80045e8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ec:	43db      	mvns	r3, r3
 80045ee:	69ba      	ldr	r2, [r7, #24]
 80045f0:	4013      	ands	r3, r2
 80045f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f003 0203 	and.w	r2, r3, #3
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	005b      	lsls	r3, r3, #1
 8004600:	fa02 f303 	lsl.w	r3, r2, r3
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	4313      	orrs	r3, r2
 8004608:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	69ba      	ldr	r2, [r7, #24]
 800460e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 80b4 	beq.w	8004786 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800461e:	2300      	movs	r3, #0
 8004620:	60fb      	str	r3, [r7, #12]
 8004622:	4b60      	ldr	r3, [pc, #384]	; (80047a4 <HAL_GPIO_Init+0x30c>)
 8004624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004626:	4a5f      	ldr	r2, [pc, #380]	; (80047a4 <HAL_GPIO_Init+0x30c>)
 8004628:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800462c:	6453      	str	r3, [r2, #68]	; 0x44
 800462e:	4b5d      	ldr	r3, [pc, #372]	; (80047a4 <HAL_GPIO_Init+0x30c>)
 8004630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004636:	60fb      	str	r3, [r7, #12]
 8004638:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800463a:	4a5b      	ldr	r2, [pc, #364]	; (80047a8 <HAL_GPIO_Init+0x310>)
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	089b      	lsrs	r3, r3, #2
 8004640:	3302      	adds	r3, #2
 8004642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004646:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	f003 0303 	and.w	r3, r3, #3
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	220f      	movs	r2, #15
 8004652:	fa02 f303 	lsl.w	r3, r2, r3
 8004656:	43db      	mvns	r3, r3
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	4013      	ands	r3, r2
 800465c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a52      	ldr	r2, [pc, #328]	; (80047ac <HAL_GPIO_Init+0x314>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d02b      	beq.n	80046be <HAL_GPIO_Init+0x226>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a51      	ldr	r2, [pc, #324]	; (80047b0 <HAL_GPIO_Init+0x318>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d025      	beq.n	80046ba <HAL_GPIO_Init+0x222>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a50      	ldr	r2, [pc, #320]	; (80047b4 <HAL_GPIO_Init+0x31c>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d01f      	beq.n	80046b6 <HAL_GPIO_Init+0x21e>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a4f      	ldr	r2, [pc, #316]	; (80047b8 <HAL_GPIO_Init+0x320>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d019      	beq.n	80046b2 <HAL_GPIO_Init+0x21a>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a4e      	ldr	r2, [pc, #312]	; (80047bc <HAL_GPIO_Init+0x324>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d013      	beq.n	80046ae <HAL_GPIO_Init+0x216>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a4d      	ldr	r2, [pc, #308]	; (80047c0 <HAL_GPIO_Init+0x328>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d00d      	beq.n	80046aa <HAL_GPIO_Init+0x212>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a4c      	ldr	r2, [pc, #304]	; (80047c4 <HAL_GPIO_Init+0x32c>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d007      	beq.n	80046a6 <HAL_GPIO_Init+0x20e>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a4b      	ldr	r2, [pc, #300]	; (80047c8 <HAL_GPIO_Init+0x330>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d101      	bne.n	80046a2 <HAL_GPIO_Init+0x20a>
 800469e:	2307      	movs	r3, #7
 80046a0:	e00e      	b.n	80046c0 <HAL_GPIO_Init+0x228>
 80046a2:	2308      	movs	r3, #8
 80046a4:	e00c      	b.n	80046c0 <HAL_GPIO_Init+0x228>
 80046a6:	2306      	movs	r3, #6
 80046a8:	e00a      	b.n	80046c0 <HAL_GPIO_Init+0x228>
 80046aa:	2305      	movs	r3, #5
 80046ac:	e008      	b.n	80046c0 <HAL_GPIO_Init+0x228>
 80046ae:	2304      	movs	r3, #4
 80046b0:	e006      	b.n	80046c0 <HAL_GPIO_Init+0x228>
 80046b2:	2303      	movs	r3, #3
 80046b4:	e004      	b.n	80046c0 <HAL_GPIO_Init+0x228>
 80046b6:	2302      	movs	r3, #2
 80046b8:	e002      	b.n	80046c0 <HAL_GPIO_Init+0x228>
 80046ba:	2301      	movs	r3, #1
 80046bc:	e000      	b.n	80046c0 <HAL_GPIO_Init+0x228>
 80046be:	2300      	movs	r3, #0
 80046c0:	69fa      	ldr	r2, [r7, #28]
 80046c2:	f002 0203 	and.w	r2, r2, #3
 80046c6:	0092      	lsls	r2, r2, #2
 80046c8:	4093      	lsls	r3, r2
 80046ca:	69ba      	ldr	r2, [r7, #24]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046d0:	4935      	ldr	r1, [pc, #212]	; (80047a8 <HAL_GPIO_Init+0x310>)
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	089b      	lsrs	r3, r3, #2
 80046d6:	3302      	adds	r3, #2
 80046d8:	69ba      	ldr	r2, [r7, #24]
 80046da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80046de:	4b3b      	ldr	r3, [pc, #236]	; (80047cc <HAL_GPIO_Init+0x334>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	43db      	mvns	r3, r3
 80046e8:	69ba      	ldr	r2, [r7, #24]
 80046ea:	4013      	ands	r3, r2
 80046ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d003      	beq.n	8004702 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80046fa:	69ba      	ldr	r2, [r7, #24]
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	4313      	orrs	r3, r2
 8004700:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004702:	4a32      	ldr	r2, [pc, #200]	; (80047cc <HAL_GPIO_Init+0x334>)
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004708:	4b30      	ldr	r3, [pc, #192]	; (80047cc <HAL_GPIO_Init+0x334>)
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	43db      	mvns	r3, r3
 8004712:	69ba      	ldr	r2, [r7, #24]
 8004714:	4013      	ands	r3, r2
 8004716:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d003      	beq.n	800472c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004724:	69ba      	ldr	r2, [r7, #24]
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	4313      	orrs	r3, r2
 800472a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800472c:	4a27      	ldr	r2, [pc, #156]	; (80047cc <HAL_GPIO_Init+0x334>)
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004732:	4b26      	ldr	r3, [pc, #152]	; (80047cc <HAL_GPIO_Init+0x334>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	43db      	mvns	r3, r3
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	4013      	ands	r3, r2
 8004740:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d003      	beq.n	8004756 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800474e:	69ba      	ldr	r2, [r7, #24]
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	4313      	orrs	r3, r2
 8004754:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004756:	4a1d      	ldr	r2, [pc, #116]	; (80047cc <HAL_GPIO_Init+0x334>)
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800475c:	4b1b      	ldr	r3, [pc, #108]	; (80047cc <HAL_GPIO_Init+0x334>)
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	43db      	mvns	r3, r3
 8004766:	69ba      	ldr	r2, [r7, #24]
 8004768:	4013      	ands	r3, r2
 800476a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d003      	beq.n	8004780 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004778:	69ba      	ldr	r2, [r7, #24]
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	4313      	orrs	r3, r2
 800477e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004780:	4a12      	ldr	r2, [pc, #72]	; (80047cc <HAL_GPIO_Init+0x334>)
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	3301      	adds	r3, #1
 800478a:	61fb      	str	r3, [r7, #28]
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	2b0f      	cmp	r3, #15
 8004790:	f67f ae90 	bls.w	80044b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004794:	bf00      	nop
 8004796:	bf00      	nop
 8004798:	3724      	adds	r7, #36	; 0x24
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	40023800 	.word	0x40023800
 80047a8:	40013800 	.word	0x40013800
 80047ac:	40020000 	.word	0x40020000
 80047b0:	40020400 	.word	0x40020400
 80047b4:	40020800 	.word	0x40020800
 80047b8:	40020c00 	.word	0x40020c00
 80047bc:	40021000 	.word	0x40021000
 80047c0:	40021400 	.word	0x40021400
 80047c4:	40021800 	.word	0x40021800
 80047c8:	40021c00 	.word	0x40021c00
 80047cc:	40013c00 	.word	0x40013c00

080047d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	460b      	mov	r3, r1
 80047da:	807b      	strh	r3, [r7, #2]
 80047dc:	4613      	mov	r3, r2
 80047de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047e0:	787b      	ldrb	r3, [r7, #1]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d003      	beq.n	80047ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047e6:	887a      	ldrh	r2, [r7, #2]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80047ec:	e003      	b.n	80047f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80047ee:	887b      	ldrh	r3, [r7, #2]
 80047f0:	041a      	lsls	r2, r3, #16
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	619a      	str	r2, [r3, #24]
}
 80047f6:	bf00      	nop
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
	...

08004804 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b086      	sub	sp, #24
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d101      	bne.n	8004816 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e25e      	b.n	8004cd4 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	2b00      	cmp	r3, #0
 8004820:	d075      	beq.n	800490e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004822:	4b88      	ldr	r3, [pc, #544]	; (8004a44 <HAL_RCC_OscConfig+0x240>)
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f003 030c 	and.w	r3, r3, #12
 800482a:	2b04      	cmp	r3, #4
 800482c:	d00c      	beq.n	8004848 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800482e:	4b85      	ldr	r3, [pc, #532]	; (8004a44 <HAL_RCC_OscConfig+0x240>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004836:	2b08      	cmp	r3, #8
 8004838:	d112      	bne.n	8004860 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800483a:	4b82      	ldr	r3, [pc, #520]	; (8004a44 <HAL_RCC_OscConfig+0x240>)
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004842:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004846:	d10b      	bne.n	8004860 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004848:	4b7e      	ldr	r3, [pc, #504]	; (8004a44 <HAL_RCC_OscConfig+0x240>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d05b      	beq.n	800490c <HAL_RCC_OscConfig+0x108>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d157      	bne.n	800490c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e239      	b.n	8004cd4 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004868:	d106      	bne.n	8004878 <HAL_RCC_OscConfig+0x74>
 800486a:	4b76      	ldr	r3, [pc, #472]	; (8004a44 <HAL_RCC_OscConfig+0x240>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a75      	ldr	r2, [pc, #468]	; (8004a44 <HAL_RCC_OscConfig+0x240>)
 8004870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004874:	6013      	str	r3, [r2, #0]
 8004876:	e01d      	b.n	80048b4 <HAL_RCC_OscConfig+0xb0>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004880:	d10c      	bne.n	800489c <HAL_RCC_OscConfig+0x98>
 8004882:	4b70      	ldr	r3, [pc, #448]	; (8004a44 <HAL_RCC_OscConfig+0x240>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a6f      	ldr	r2, [pc, #444]	; (8004a44 <HAL_RCC_OscConfig+0x240>)
 8004888:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800488c:	6013      	str	r3, [r2, #0]
 800488e:	4b6d      	ldr	r3, [pc, #436]	; (8004a44 <HAL_RCC_OscConfig+0x240>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a6c      	ldr	r2, [pc, #432]	; (8004a44 <HAL_RCC_OscConfig+0x240>)
 8004894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004898:	6013      	str	r3, [r2, #0]
 800489a:	e00b      	b.n	80048b4 <HAL_RCC_OscConfig+0xb0>
 800489c:	4b69      	ldr	r3, [pc, #420]	; (8004a44 <HAL_RCC_OscConfig+0x240>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a68      	ldr	r2, [pc, #416]	; (8004a44 <HAL_RCC_OscConfig+0x240>)
 80048a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048a6:	6013      	str	r3, [r2, #0]
 80048a8:	4b66      	ldr	r3, [pc, #408]	; (8004a44 <HAL_RCC_OscConfig+0x240>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a65      	ldr	r2, [pc, #404]	; (8004a44 <HAL_RCC_OscConfig+0x240>)
 80048ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d013      	beq.n	80048e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048bc:	f7ff f93c 	bl	8003b38 <HAL_GetTick>
 80048c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048c2:	e008      	b.n	80048d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048c4:	f7ff f938 	bl	8003b38 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b64      	cmp	r3, #100	; 0x64
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e1fe      	b.n	8004cd4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048d6:	4b5b      	ldr	r3, [pc, #364]	; (8004a44 <HAL_RCC_OscConfig+0x240>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d0f0      	beq.n	80048c4 <HAL_RCC_OscConfig+0xc0>
 80048e2:	e014      	b.n	800490e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e4:	f7ff f928 	bl	8003b38 <HAL_GetTick>
 80048e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ea:	e008      	b.n	80048fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048ec:	f7ff f924 	bl	8003b38 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b64      	cmp	r3, #100	; 0x64
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e1ea      	b.n	8004cd4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048fe:	4b51      	ldr	r3, [pc, #324]	; (8004a44 <HAL_RCC_OscConfig+0x240>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1f0      	bne.n	80048ec <HAL_RCC_OscConfig+0xe8>
 800490a:	e000      	b.n	800490e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800490c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	2b00      	cmp	r3, #0
 8004918:	d063      	beq.n	80049e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800491a:	4b4a      	ldr	r3, [pc, #296]	; (8004a44 <HAL_RCC_OscConfig+0x240>)
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f003 030c 	and.w	r3, r3, #12
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00b      	beq.n	800493e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004926:	4b47      	ldr	r3, [pc, #284]	; (8004a44 <HAL_RCC_OscConfig+0x240>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800492e:	2b08      	cmp	r3, #8
 8004930:	d11c      	bne.n	800496c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004932:	4b44      	ldr	r3, [pc, #272]	; (8004a44 <HAL_RCC_OscConfig+0x240>)
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d116      	bne.n	800496c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800493e:	4b41      	ldr	r3, [pc, #260]	; (8004a44 <HAL_RCC_OscConfig+0x240>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b00      	cmp	r3, #0
 8004948:	d005      	beq.n	8004956 <HAL_RCC_OscConfig+0x152>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d001      	beq.n	8004956 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e1be      	b.n	8004cd4 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004956:	4b3b      	ldr	r3, [pc, #236]	; (8004a44 <HAL_RCC_OscConfig+0x240>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	00db      	lsls	r3, r3, #3
 8004964:	4937      	ldr	r1, [pc, #220]	; (8004a44 <HAL_RCC_OscConfig+0x240>)
 8004966:	4313      	orrs	r3, r2
 8004968:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800496a:	e03a      	b.n	80049e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d020      	beq.n	80049b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004974:	4b34      	ldr	r3, [pc, #208]	; (8004a48 <HAL_RCC_OscConfig+0x244>)
 8004976:	2201      	movs	r2, #1
 8004978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800497a:	f7ff f8dd 	bl	8003b38 <HAL_GetTick>
 800497e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004980:	e008      	b.n	8004994 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004982:	f7ff f8d9 	bl	8003b38 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	2b02      	cmp	r3, #2
 800498e:	d901      	bls.n	8004994 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e19f      	b.n	8004cd4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004994:	4b2b      	ldr	r3, [pc, #172]	; (8004a44 <HAL_RCC_OscConfig+0x240>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	2b00      	cmp	r3, #0
 800499e:	d0f0      	beq.n	8004982 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049a0:	4b28      	ldr	r3, [pc, #160]	; (8004a44 <HAL_RCC_OscConfig+0x240>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	00db      	lsls	r3, r3, #3
 80049ae:	4925      	ldr	r1, [pc, #148]	; (8004a44 <HAL_RCC_OscConfig+0x240>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	600b      	str	r3, [r1, #0]
 80049b4:	e015      	b.n	80049e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049b6:	4b24      	ldr	r3, [pc, #144]	; (8004a48 <HAL_RCC_OscConfig+0x244>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049bc:	f7ff f8bc 	bl	8003b38 <HAL_GetTick>
 80049c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049c2:	e008      	b.n	80049d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049c4:	f7ff f8b8 	bl	8003b38 <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d901      	bls.n	80049d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e17e      	b.n	8004cd4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049d6:	4b1b      	ldr	r3, [pc, #108]	; (8004a44 <HAL_RCC_OscConfig+0x240>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d1f0      	bne.n	80049c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0308 	and.w	r3, r3, #8
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d036      	beq.n	8004a5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d016      	beq.n	8004a24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049f6:	4b15      	ldr	r3, [pc, #84]	; (8004a4c <HAL_RCC_OscConfig+0x248>)
 80049f8:	2201      	movs	r2, #1
 80049fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049fc:	f7ff f89c 	bl	8003b38 <HAL_GetTick>
 8004a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a02:	e008      	b.n	8004a16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a04:	f7ff f898 	bl	8003b38 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d901      	bls.n	8004a16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e15e      	b.n	8004cd4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a16:	4b0b      	ldr	r3, [pc, #44]	; (8004a44 <HAL_RCC_OscConfig+0x240>)
 8004a18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d0f0      	beq.n	8004a04 <HAL_RCC_OscConfig+0x200>
 8004a22:	e01b      	b.n	8004a5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a24:	4b09      	ldr	r3, [pc, #36]	; (8004a4c <HAL_RCC_OscConfig+0x248>)
 8004a26:	2200      	movs	r2, #0
 8004a28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a2a:	f7ff f885 	bl	8003b38 <HAL_GetTick>
 8004a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a30:	e00e      	b.n	8004a50 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a32:	f7ff f881 	bl	8003b38 <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d907      	bls.n	8004a50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e147      	b.n	8004cd4 <HAL_RCC_OscConfig+0x4d0>
 8004a44:	40023800 	.word	0x40023800
 8004a48:	42470000 	.word	0x42470000
 8004a4c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a50:	4b88      	ldr	r3, [pc, #544]	; (8004c74 <HAL_RCC_OscConfig+0x470>)
 8004a52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a54:	f003 0302 	and.w	r3, r3, #2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1ea      	bne.n	8004a32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0304 	and.w	r3, r3, #4
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	f000 8097 	beq.w	8004b98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a6e:	4b81      	ldr	r3, [pc, #516]	; (8004c74 <HAL_RCC_OscConfig+0x470>)
 8004a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10f      	bne.n	8004a9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	60bb      	str	r3, [r7, #8]
 8004a7e:	4b7d      	ldr	r3, [pc, #500]	; (8004c74 <HAL_RCC_OscConfig+0x470>)
 8004a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a82:	4a7c      	ldr	r2, [pc, #496]	; (8004c74 <HAL_RCC_OscConfig+0x470>)
 8004a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a88:	6413      	str	r3, [r2, #64]	; 0x40
 8004a8a:	4b7a      	ldr	r3, [pc, #488]	; (8004c74 <HAL_RCC_OscConfig+0x470>)
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a92:	60bb      	str	r3, [r7, #8]
 8004a94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a96:	2301      	movs	r3, #1
 8004a98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a9a:	4b77      	ldr	r3, [pc, #476]	; (8004c78 <HAL_RCC_OscConfig+0x474>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d118      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004aa6:	4b74      	ldr	r3, [pc, #464]	; (8004c78 <HAL_RCC_OscConfig+0x474>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a73      	ldr	r2, [pc, #460]	; (8004c78 <HAL_RCC_OscConfig+0x474>)
 8004aac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ab0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ab2:	f7ff f841 	bl	8003b38 <HAL_GetTick>
 8004ab6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ab8:	e008      	b.n	8004acc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aba:	f7ff f83d 	bl	8003b38 <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d901      	bls.n	8004acc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e103      	b.n	8004cd4 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004acc:	4b6a      	ldr	r3, [pc, #424]	; (8004c78 <HAL_RCC_OscConfig+0x474>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d0f0      	beq.n	8004aba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d106      	bne.n	8004aee <HAL_RCC_OscConfig+0x2ea>
 8004ae0:	4b64      	ldr	r3, [pc, #400]	; (8004c74 <HAL_RCC_OscConfig+0x470>)
 8004ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae4:	4a63      	ldr	r2, [pc, #396]	; (8004c74 <HAL_RCC_OscConfig+0x470>)
 8004ae6:	f043 0301 	orr.w	r3, r3, #1
 8004aea:	6713      	str	r3, [r2, #112]	; 0x70
 8004aec:	e01c      	b.n	8004b28 <HAL_RCC_OscConfig+0x324>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	2b05      	cmp	r3, #5
 8004af4:	d10c      	bne.n	8004b10 <HAL_RCC_OscConfig+0x30c>
 8004af6:	4b5f      	ldr	r3, [pc, #380]	; (8004c74 <HAL_RCC_OscConfig+0x470>)
 8004af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004afa:	4a5e      	ldr	r2, [pc, #376]	; (8004c74 <HAL_RCC_OscConfig+0x470>)
 8004afc:	f043 0304 	orr.w	r3, r3, #4
 8004b00:	6713      	str	r3, [r2, #112]	; 0x70
 8004b02:	4b5c      	ldr	r3, [pc, #368]	; (8004c74 <HAL_RCC_OscConfig+0x470>)
 8004b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b06:	4a5b      	ldr	r2, [pc, #364]	; (8004c74 <HAL_RCC_OscConfig+0x470>)
 8004b08:	f043 0301 	orr.w	r3, r3, #1
 8004b0c:	6713      	str	r3, [r2, #112]	; 0x70
 8004b0e:	e00b      	b.n	8004b28 <HAL_RCC_OscConfig+0x324>
 8004b10:	4b58      	ldr	r3, [pc, #352]	; (8004c74 <HAL_RCC_OscConfig+0x470>)
 8004b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b14:	4a57      	ldr	r2, [pc, #348]	; (8004c74 <HAL_RCC_OscConfig+0x470>)
 8004b16:	f023 0301 	bic.w	r3, r3, #1
 8004b1a:	6713      	str	r3, [r2, #112]	; 0x70
 8004b1c:	4b55      	ldr	r3, [pc, #340]	; (8004c74 <HAL_RCC_OscConfig+0x470>)
 8004b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b20:	4a54      	ldr	r2, [pc, #336]	; (8004c74 <HAL_RCC_OscConfig+0x470>)
 8004b22:	f023 0304 	bic.w	r3, r3, #4
 8004b26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d015      	beq.n	8004b5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b30:	f7ff f802 	bl	8003b38 <HAL_GetTick>
 8004b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b36:	e00a      	b.n	8004b4e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b38:	f7fe fffe 	bl	8003b38 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d901      	bls.n	8004b4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e0c2      	b.n	8004cd4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b4e:	4b49      	ldr	r3, [pc, #292]	; (8004c74 <HAL_RCC_OscConfig+0x470>)
 8004b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d0ee      	beq.n	8004b38 <HAL_RCC_OscConfig+0x334>
 8004b5a:	e014      	b.n	8004b86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b5c:	f7fe ffec 	bl	8003b38 <HAL_GetTick>
 8004b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b62:	e00a      	b.n	8004b7a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b64:	f7fe ffe8 	bl	8003b38 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e0ac      	b.n	8004cd4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b7a:	4b3e      	ldr	r3, [pc, #248]	; (8004c74 <HAL_RCC_OscConfig+0x470>)
 8004b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b7e:	f003 0302 	and.w	r3, r3, #2
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1ee      	bne.n	8004b64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b86:	7dfb      	ldrb	r3, [r7, #23]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d105      	bne.n	8004b98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b8c:	4b39      	ldr	r3, [pc, #228]	; (8004c74 <HAL_RCC_OscConfig+0x470>)
 8004b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b90:	4a38      	ldr	r2, [pc, #224]	; (8004c74 <HAL_RCC_OscConfig+0x470>)
 8004b92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b96:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	699b      	ldr	r3, [r3, #24]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	f000 8098 	beq.w	8004cd2 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ba2:	4b34      	ldr	r3, [pc, #208]	; (8004c74 <HAL_RCC_OscConfig+0x470>)
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f003 030c 	and.w	r3, r3, #12
 8004baa:	2b08      	cmp	r3, #8
 8004bac:	d05c      	beq.n	8004c68 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d141      	bne.n	8004c3a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bb6:	4b31      	ldr	r3, [pc, #196]	; (8004c7c <HAL_RCC_OscConfig+0x478>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bbc:	f7fe ffbc 	bl	8003b38 <HAL_GetTick>
 8004bc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bc2:	e008      	b.n	8004bd6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bc4:	f7fe ffb8 	bl	8003b38 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d901      	bls.n	8004bd6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e07e      	b.n	8004cd4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bd6:	4b27      	ldr	r3, [pc, #156]	; (8004c74 <HAL_RCC_OscConfig+0x470>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1f0      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	69da      	ldr	r2, [r3, #28]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	431a      	orrs	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf0:	019b      	lsls	r3, r3, #6
 8004bf2:	431a      	orrs	r2, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf8:	085b      	lsrs	r3, r3, #1
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	041b      	lsls	r3, r3, #16
 8004bfe:	431a      	orrs	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c04:	061b      	lsls	r3, r3, #24
 8004c06:	491b      	ldr	r1, [pc, #108]	; (8004c74 <HAL_RCC_OscConfig+0x470>)
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c0c:	4b1b      	ldr	r3, [pc, #108]	; (8004c7c <HAL_RCC_OscConfig+0x478>)
 8004c0e:	2201      	movs	r2, #1
 8004c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c12:	f7fe ff91 	bl	8003b38 <HAL_GetTick>
 8004c16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c18:	e008      	b.n	8004c2c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c1a:	f7fe ff8d 	bl	8003b38 <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d901      	bls.n	8004c2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e053      	b.n	8004cd4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c2c:	4b11      	ldr	r3, [pc, #68]	; (8004c74 <HAL_RCC_OscConfig+0x470>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d0f0      	beq.n	8004c1a <HAL_RCC_OscConfig+0x416>
 8004c38:	e04b      	b.n	8004cd2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c3a:	4b10      	ldr	r3, [pc, #64]	; (8004c7c <HAL_RCC_OscConfig+0x478>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c40:	f7fe ff7a 	bl	8003b38 <HAL_GetTick>
 8004c44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c46:	e008      	b.n	8004c5a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c48:	f7fe ff76 	bl	8003b38 <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d901      	bls.n	8004c5a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e03c      	b.n	8004cd4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c5a:	4b06      	ldr	r3, [pc, #24]	; (8004c74 <HAL_RCC_OscConfig+0x470>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1f0      	bne.n	8004c48 <HAL_RCC_OscConfig+0x444>
 8004c66:	e034      	b.n	8004cd2 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d107      	bne.n	8004c80 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e02f      	b.n	8004cd4 <HAL_RCC_OscConfig+0x4d0>
 8004c74:	40023800 	.word	0x40023800
 8004c78:	40007000 	.word	0x40007000
 8004c7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c80:	4b16      	ldr	r3, [pc, #88]	; (8004cdc <HAL_RCC_OscConfig+0x4d8>)
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	69db      	ldr	r3, [r3, #28]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d11c      	bne.n	8004cce <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d115      	bne.n	8004cce <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ca8:	4013      	ands	r3, r2
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d10d      	bne.n	8004cce <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d106      	bne.n	8004cce <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d001      	beq.n	8004cd2 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e000      	b.n	8004cd4 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3718      	adds	r7, #24
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	40023800 	.word	0x40023800

08004ce0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d101      	bne.n	8004cf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e0cc      	b.n	8004e8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cf4:	4b68      	ldr	r3, [pc, #416]	; (8004e98 <HAL_RCC_ClockConfig+0x1b8>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 030f 	and.w	r3, r3, #15
 8004cfc:	683a      	ldr	r2, [r7, #0]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d90c      	bls.n	8004d1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d02:	4b65      	ldr	r3, [pc, #404]	; (8004e98 <HAL_RCC_ClockConfig+0x1b8>)
 8004d04:	683a      	ldr	r2, [r7, #0]
 8004d06:	b2d2      	uxtb	r2, r2
 8004d08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d0a:	4b63      	ldr	r3, [pc, #396]	; (8004e98 <HAL_RCC_ClockConfig+0x1b8>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 030f 	and.w	r3, r3, #15
 8004d12:	683a      	ldr	r2, [r7, #0]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d001      	beq.n	8004d1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e0b8      	b.n	8004e8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0302 	and.w	r3, r3, #2
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d020      	beq.n	8004d6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0304 	and.w	r3, r3, #4
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d005      	beq.n	8004d40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d34:	4b59      	ldr	r3, [pc, #356]	; (8004e9c <HAL_RCC_ClockConfig+0x1bc>)
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	4a58      	ldr	r2, [pc, #352]	; (8004e9c <HAL_RCC_ClockConfig+0x1bc>)
 8004d3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0308 	and.w	r3, r3, #8
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d005      	beq.n	8004d58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d4c:	4b53      	ldr	r3, [pc, #332]	; (8004e9c <HAL_RCC_ClockConfig+0x1bc>)
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	4a52      	ldr	r2, [pc, #328]	; (8004e9c <HAL_RCC_ClockConfig+0x1bc>)
 8004d52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d58:	4b50      	ldr	r3, [pc, #320]	; (8004e9c <HAL_RCC_ClockConfig+0x1bc>)
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	494d      	ldr	r1, [pc, #308]	; (8004e9c <HAL_RCC_ClockConfig+0x1bc>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d044      	beq.n	8004e00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d107      	bne.n	8004d8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d7e:	4b47      	ldr	r3, [pc, #284]	; (8004e9c <HAL_RCC_ClockConfig+0x1bc>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d119      	bne.n	8004dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e07f      	b.n	8004e8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d003      	beq.n	8004d9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d9a:	2b03      	cmp	r3, #3
 8004d9c:	d107      	bne.n	8004dae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d9e:	4b3f      	ldr	r3, [pc, #252]	; (8004e9c <HAL_RCC_ClockConfig+0x1bc>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d109      	bne.n	8004dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e06f      	b.n	8004e8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dae:	4b3b      	ldr	r3, [pc, #236]	; (8004e9c <HAL_RCC_ClockConfig+0x1bc>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0302 	and.w	r3, r3, #2
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e067      	b.n	8004e8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dbe:	4b37      	ldr	r3, [pc, #220]	; (8004e9c <HAL_RCC_ClockConfig+0x1bc>)
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f023 0203 	bic.w	r2, r3, #3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	4934      	ldr	r1, [pc, #208]	; (8004e9c <HAL_RCC_ClockConfig+0x1bc>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004dd0:	f7fe feb2 	bl	8003b38 <HAL_GetTick>
 8004dd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dd6:	e00a      	b.n	8004dee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dd8:	f7fe feae 	bl	8003b38 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d901      	bls.n	8004dee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e04f      	b.n	8004e8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dee:	4b2b      	ldr	r3, [pc, #172]	; (8004e9c <HAL_RCC_ClockConfig+0x1bc>)
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f003 020c 	and.w	r2, r3, #12
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d1eb      	bne.n	8004dd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e00:	4b25      	ldr	r3, [pc, #148]	; (8004e98 <HAL_RCC_ClockConfig+0x1b8>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 030f 	and.w	r3, r3, #15
 8004e08:	683a      	ldr	r2, [r7, #0]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d20c      	bcs.n	8004e28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e0e:	4b22      	ldr	r3, [pc, #136]	; (8004e98 <HAL_RCC_ClockConfig+0x1b8>)
 8004e10:	683a      	ldr	r2, [r7, #0]
 8004e12:	b2d2      	uxtb	r2, r2
 8004e14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e16:	4b20      	ldr	r3, [pc, #128]	; (8004e98 <HAL_RCC_ClockConfig+0x1b8>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 030f 	and.w	r3, r3, #15
 8004e1e:	683a      	ldr	r2, [r7, #0]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d001      	beq.n	8004e28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e032      	b.n	8004e8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0304 	and.w	r3, r3, #4
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d008      	beq.n	8004e46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e34:	4b19      	ldr	r3, [pc, #100]	; (8004e9c <HAL_RCC_ClockConfig+0x1bc>)
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	4916      	ldr	r1, [pc, #88]	; (8004e9c <HAL_RCC_ClockConfig+0x1bc>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0308 	and.w	r3, r3, #8
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d009      	beq.n	8004e66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e52:	4b12      	ldr	r3, [pc, #72]	; (8004e9c <HAL_RCC_ClockConfig+0x1bc>)
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	00db      	lsls	r3, r3, #3
 8004e60:	490e      	ldr	r1, [pc, #56]	; (8004e9c <HAL_RCC_ClockConfig+0x1bc>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e66:	f000 f821 	bl	8004eac <HAL_RCC_GetSysClockFreq>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	4b0b      	ldr	r3, [pc, #44]	; (8004e9c <HAL_RCC_ClockConfig+0x1bc>)
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	091b      	lsrs	r3, r3, #4
 8004e72:	f003 030f 	and.w	r3, r3, #15
 8004e76:	490a      	ldr	r1, [pc, #40]	; (8004ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8004e78:	5ccb      	ldrb	r3, [r1, r3]
 8004e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e7e:	4a09      	ldr	r2, [pc, #36]	; (8004ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8004e80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e82:	4b09      	ldr	r3, [pc, #36]	; (8004ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7fe fe12 	bl	8003ab0 <HAL_InitTick>

  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3710      	adds	r7, #16
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	40023c00 	.word	0x40023c00
 8004e9c:	40023800 	.word	0x40023800
 8004ea0:	0800d27c 	.word	0x0800d27c
 8004ea4:	200000a8 	.word	0x200000a8
 8004ea8:	200000ac 	.word	0x200000ac

08004eac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004eac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004eb0:	b094      	sub	sp, #80	; 0x50
 8004eb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	647b      	str	r3, [r7, #68]	; 0x44
 8004eb8:	2300      	movs	r3, #0
 8004eba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ec4:	4b79      	ldr	r3, [pc, #484]	; (80050ac <HAL_RCC_GetSysClockFreq+0x200>)
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f003 030c 	and.w	r3, r3, #12
 8004ecc:	2b08      	cmp	r3, #8
 8004ece:	d00d      	beq.n	8004eec <HAL_RCC_GetSysClockFreq+0x40>
 8004ed0:	2b08      	cmp	r3, #8
 8004ed2:	f200 80e1 	bhi.w	8005098 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d002      	beq.n	8004ee0 <HAL_RCC_GetSysClockFreq+0x34>
 8004eda:	2b04      	cmp	r3, #4
 8004edc:	d003      	beq.n	8004ee6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004ede:	e0db      	b.n	8005098 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ee0:	4b73      	ldr	r3, [pc, #460]	; (80050b0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ee2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004ee4:	e0db      	b.n	800509e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ee6:	4b73      	ldr	r3, [pc, #460]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004ee8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004eea:	e0d8      	b.n	800509e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004eec:	4b6f      	ldr	r3, [pc, #444]	; (80050ac <HAL_RCC_GetSysClockFreq+0x200>)
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ef4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ef6:	4b6d      	ldr	r3, [pc, #436]	; (80050ac <HAL_RCC_GetSysClockFreq+0x200>)
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d063      	beq.n	8004fca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f02:	4b6a      	ldr	r3, [pc, #424]	; (80050ac <HAL_RCC_GetSysClockFreq+0x200>)
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	099b      	lsrs	r3, r3, #6
 8004f08:	2200      	movs	r2, #0
 8004f0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f0c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f14:	633b      	str	r3, [r7, #48]	; 0x30
 8004f16:	2300      	movs	r3, #0
 8004f18:	637b      	str	r3, [r7, #52]	; 0x34
 8004f1a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004f1e:	4622      	mov	r2, r4
 8004f20:	462b      	mov	r3, r5
 8004f22:	f04f 0000 	mov.w	r0, #0
 8004f26:	f04f 0100 	mov.w	r1, #0
 8004f2a:	0159      	lsls	r1, r3, #5
 8004f2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f30:	0150      	lsls	r0, r2, #5
 8004f32:	4602      	mov	r2, r0
 8004f34:	460b      	mov	r3, r1
 8004f36:	4621      	mov	r1, r4
 8004f38:	1a51      	subs	r1, r2, r1
 8004f3a:	6139      	str	r1, [r7, #16]
 8004f3c:	4629      	mov	r1, r5
 8004f3e:	eb63 0301 	sbc.w	r3, r3, r1
 8004f42:	617b      	str	r3, [r7, #20]
 8004f44:	f04f 0200 	mov.w	r2, #0
 8004f48:	f04f 0300 	mov.w	r3, #0
 8004f4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f50:	4659      	mov	r1, fp
 8004f52:	018b      	lsls	r3, r1, #6
 8004f54:	4651      	mov	r1, sl
 8004f56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f5a:	4651      	mov	r1, sl
 8004f5c:	018a      	lsls	r2, r1, #6
 8004f5e:	4651      	mov	r1, sl
 8004f60:	ebb2 0801 	subs.w	r8, r2, r1
 8004f64:	4659      	mov	r1, fp
 8004f66:	eb63 0901 	sbc.w	r9, r3, r1
 8004f6a:	f04f 0200 	mov.w	r2, #0
 8004f6e:	f04f 0300 	mov.w	r3, #0
 8004f72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f7e:	4690      	mov	r8, r2
 8004f80:	4699      	mov	r9, r3
 8004f82:	4623      	mov	r3, r4
 8004f84:	eb18 0303 	adds.w	r3, r8, r3
 8004f88:	60bb      	str	r3, [r7, #8]
 8004f8a:	462b      	mov	r3, r5
 8004f8c:	eb49 0303 	adc.w	r3, r9, r3
 8004f90:	60fb      	str	r3, [r7, #12]
 8004f92:	f04f 0200 	mov.w	r2, #0
 8004f96:	f04f 0300 	mov.w	r3, #0
 8004f9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004f9e:	4629      	mov	r1, r5
 8004fa0:	024b      	lsls	r3, r1, #9
 8004fa2:	4621      	mov	r1, r4
 8004fa4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004fa8:	4621      	mov	r1, r4
 8004faa:	024a      	lsls	r2, r1, #9
 8004fac:	4610      	mov	r0, r2
 8004fae:	4619      	mov	r1, r3
 8004fb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fb8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004fbc:	f7fb f968 	bl	8000290 <__aeabi_uldivmod>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fc8:	e058      	b.n	800507c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fca:	4b38      	ldr	r3, [pc, #224]	; (80050ac <HAL_RCC_GetSysClockFreq+0x200>)
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	099b      	lsrs	r3, r3, #6
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	4611      	mov	r1, r2
 8004fd6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004fda:	623b      	str	r3, [r7, #32]
 8004fdc:	2300      	movs	r3, #0
 8004fde:	627b      	str	r3, [r7, #36]	; 0x24
 8004fe0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004fe4:	4642      	mov	r2, r8
 8004fe6:	464b      	mov	r3, r9
 8004fe8:	f04f 0000 	mov.w	r0, #0
 8004fec:	f04f 0100 	mov.w	r1, #0
 8004ff0:	0159      	lsls	r1, r3, #5
 8004ff2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ff6:	0150      	lsls	r0, r2, #5
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	4641      	mov	r1, r8
 8004ffe:	ebb2 0a01 	subs.w	sl, r2, r1
 8005002:	4649      	mov	r1, r9
 8005004:	eb63 0b01 	sbc.w	fp, r3, r1
 8005008:	f04f 0200 	mov.w	r2, #0
 800500c:	f04f 0300 	mov.w	r3, #0
 8005010:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005014:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005018:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800501c:	ebb2 040a 	subs.w	r4, r2, sl
 8005020:	eb63 050b 	sbc.w	r5, r3, fp
 8005024:	f04f 0200 	mov.w	r2, #0
 8005028:	f04f 0300 	mov.w	r3, #0
 800502c:	00eb      	lsls	r3, r5, #3
 800502e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005032:	00e2      	lsls	r2, r4, #3
 8005034:	4614      	mov	r4, r2
 8005036:	461d      	mov	r5, r3
 8005038:	4643      	mov	r3, r8
 800503a:	18e3      	adds	r3, r4, r3
 800503c:	603b      	str	r3, [r7, #0]
 800503e:	464b      	mov	r3, r9
 8005040:	eb45 0303 	adc.w	r3, r5, r3
 8005044:	607b      	str	r3, [r7, #4]
 8005046:	f04f 0200 	mov.w	r2, #0
 800504a:	f04f 0300 	mov.w	r3, #0
 800504e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005052:	4629      	mov	r1, r5
 8005054:	028b      	lsls	r3, r1, #10
 8005056:	4621      	mov	r1, r4
 8005058:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800505c:	4621      	mov	r1, r4
 800505e:	028a      	lsls	r2, r1, #10
 8005060:	4610      	mov	r0, r2
 8005062:	4619      	mov	r1, r3
 8005064:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005066:	2200      	movs	r2, #0
 8005068:	61bb      	str	r3, [r7, #24]
 800506a:	61fa      	str	r2, [r7, #28]
 800506c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005070:	f7fb f90e 	bl	8000290 <__aeabi_uldivmod>
 8005074:	4602      	mov	r2, r0
 8005076:	460b      	mov	r3, r1
 8005078:	4613      	mov	r3, r2
 800507a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800507c:	4b0b      	ldr	r3, [pc, #44]	; (80050ac <HAL_RCC_GetSysClockFreq+0x200>)
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	0c1b      	lsrs	r3, r3, #16
 8005082:	f003 0303 	and.w	r3, r3, #3
 8005086:	3301      	adds	r3, #1
 8005088:	005b      	lsls	r3, r3, #1
 800508a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800508c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800508e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005090:	fbb2 f3f3 	udiv	r3, r2, r3
 8005094:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005096:	e002      	b.n	800509e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005098:	4b05      	ldr	r3, [pc, #20]	; (80050b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800509a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800509c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800509e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3750      	adds	r7, #80	; 0x50
 80050a4:	46bd      	mov	sp, r7
 80050a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050aa:	bf00      	nop
 80050ac:	40023800 	.word	0x40023800
 80050b0:	00f42400 	.word	0x00f42400
 80050b4:	007a1200 	.word	0x007a1200

080050b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050b8:	b480      	push	{r7}
 80050ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050bc:	4b03      	ldr	r3, [pc, #12]	; (80050cc <HAL_RCC_GetHCLKFreq+0x14>)
 80050be:	681b      	ldr	r3, [r3, #0]
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	200000a8 	.word	0x200000a8

080050d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80050d4:	f7ff fff0 	bl	80050b8 <HAL_RCC_GetHCLKFreq>
 80050d8:	4602      	mov	r2, r0
 80050da:	4b05      	ldr	r3, [pc, #20]	; (80050f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	0a9b      	lsrs	r3, r3, #10
 80050e0:	f003 0307 	and.w	r3, r3, #7
 80050e4:	4903      	ldr	r1, [pc, #12]	; (80050f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050e6:	5ccb      	ldrb	r3, [r1, r3]
 80050e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	40023800 	.word	0x40023800
 80050f4:	0800d28c 	.word	0x0800d28c

080050f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80050fc:	f7ff ffdc 	bl	80050b8 <HAL_RCC_GetHCLKFreq>
 8005100:	4602      	mov	r2, r0
 8005102:	4b05      	ldr	r3, [pc, #20]	; (8005118 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	0b5b      	lsrs	r3, r3, #13
 8005108:	f003 0307 	and.w	r3, r3, #7
 800510c:	4903      	ldr	r1, [pc, #12]	; (800511c <HAL_RCC_GetPCLK2Freq+0x24>)
 800510e:	5ccb      	ldrb	r3, [r1, r3]
 8005110:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005114:	4618      	mov	r0, r3
 8005116:	bd80      	pop	{r7, pc}
 8005118:	40023800 	.word	0x40023800
 800511c:	0800d28c 	.word	0x0800d28c

08005120 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d101      	bne.n	8005132 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e01d      	b.n	800516e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005138:	b2db      	uxtb	r3, r3
 800513a:	2b00      	cmp	r3, #0
 800513c:	d106      	bne.n	800514c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f7fc fc8e 	bl	8001a68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2202      	movs	r2, #2
 8005150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	3304      	adds	r3, #4
 800515c:	4619      	mov	r1, r3
 800515e:	4610      	mov	r0, r2
 8005160:	f000 fbde 	bl	8005920 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3708      	adds	r7, #8
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}

08005176 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005176:	b480      	push	{r7}
 8005178:	b085      	sub	sp, #20
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2202      	movs	r2, #2
 8005182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	f003 0307 	and.w	r3, r3, #7
 8005190:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2b06      	cmp	r3, #6
 8005196:	d007      	beq.n	80051a8 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f042 0201 	orr.w	r2, r2, #1
 80051a6:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3714      	adds	r7, #20
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr

080051be <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051be:	b580      	push	{r7, lr}
 80051c0:	b082      	sub	sp, #8
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d101      	bne.n	80051d0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e01d      	b.n	800520c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d106      	bne.n	80051ea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f7fc fc91 	bl	8001b0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2202      	movs	r2, #2
 80051ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	3304      	adds	r3, #4
 80051fa:	4619      	mov	r1, r3
 80051fc:	4610      	mov	r0, r2
 80051fe:	f000 fb8f 	bl	8005920 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800520a:	2300      	movs	r3, #0
}
 800520c:	4618      	mov	r0, r3
 800520e:	3708      	adds	r7, #8
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2201      	movs	r2, #1
 8005224:	6839      	ldr	r1, [r7, #0]
 8005226:	4618      	mov	r0, r3
 8005228:	f000 fe64 	bl	8005ef4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a15      	ldr	r2, [pc, #84]	; (8005288 <HAL_TIM_PWM_Start+0x74>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d004      	beq.n	8005240 <HAL_TIM_PWM_Start+0x2c>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a14      	ldr	r2, [pc, #80]	; (800528c <HAL_TIM_PWM_Start+0x78>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d101      	bne.n	8005244 <HAL_TIM_PWM_Start+0x30>
 8005240:	2301      	movs	r3, #1
 8005242:	e000      	b.n	8005246 <HAL_TIM_PWM_Start+0x32>
 8005244:	2300      	movs	r3, #0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d007      	beq.n	800525a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005258:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	f003 0307 	and.w	r3, r3, #7
 8005264:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2b06      	cmp	r3, #6
 800526a:	d007      	beq.n	800527c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f042 0201 	orr.w	r2, r2, #1
 800527a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3710      	adds	r7, #16
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	40010000 	.word	0x40010000
 800528c:	40010400 	.word	0x40010400

08005290 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	2b0c      	cmp	r3, #12
 800529e:	d841      	bhi.n	8005324 <HAL_TIM_PWM_Start_IT+0x94>
 80052a0:	a201      	add	r2, pc, #4	; (adr r2, 80052a8 <HAL_TIM_PWM_Start_IT+0x18>)
 80052a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a6:	bf00      	nop
 80052a8:	080052dd 	.word	0x080052dd
 80052ac:	08005325 	.word	0x08005325
 80052b0:	08005325 	.word	0x08005325
 80052b4:	08005325 	.word	0x08005325
 80052b8:	080052ef 	.word	0x080052ef
 80052bc:	08005325 	.word	0x08005325
 80052c0:	08005325 	.word	0x08005325
 80052c4:	08005325 	.word	0x08005325
 80052c8:	08005301 	.word	0x08005301
 80052cc:	08005325 	.word	0x08005325
 80052d0:	08005325 	.word	0x08005325
 80052d4:	08005325 	.word	0x08005325
 80052d8:	08005313 	.word	0x08005313
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68da      	ldr	r2, [r3, #12]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f042 0202 	orr.w	r2, r2, #2
 80052ea:	60da      	str	r2, [r3, #12]
      break;
 80052ec:	e01b      	b.n	8005326 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68da      	ldr	r2, [r3, #12]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f042 0204 	orr.w	r2, r2, #4
 80052fc:	60da      	str	r2, [r3, #12]
      break;
 80052fe:	e012      	b.n	8005326 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68da      	ldr	r2, [r3, #12]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f042 0208 	orr.w	r2, r2, #8
 800530e:	60da      	str	r2, [r3, #12]
      break;
 8005310:	e009      	b.n	8005326 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68da      	ldr	r2, [r3, #12]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f042 0210 	orr.w	r2, r2, #16
 8005320:	60da      	str	r2, [r3, #12]
      break;
 8005322:	e000      	b.n	8005326 <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 8005324:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2201      	movs	r2, #1
 800532c:	6839      	ldr	r1, [r7, #0]
 800532e:	4618      	mov	r0, r3
 8005330:	f000 fde0 	bl	8005ef4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a15      	ldr	r2, [pc, #84]	; (8005390 <HAL_TIM_PWM_Start_IT+0x100>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d004      	beq.n	8005348 <HAL_TIM_PWM_Start_IT+0xb8>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a14      	ldr	r2, [pc, #80]	; (8005394 <HAL_TIM_PWM_Start_IT+0x104>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d101      	bne.n	800534c <HAL_TIM_PWM_Start_IT+0xbc>
 8005348:	2301      	movs	r3, #1
 800534a:	e000      	b.n	800534e <HAL_TIM_PWM_Start_IT+0xbe>
 800534c:	2300      	movs	r3, #0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d007      	beq.n	8005362 <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005360:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f003 0307 	and.w	r3, r3, #7
 800536c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2b06      	cmp	r3, #6
 8005372:	d007      	beq.n	8005384 <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f042 0201 	orr.w	r2, r2, #1
 8005382:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3710      	adds	r7, #16
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	40010000 	.word	0x40010000
 8005394:	40010400 	.word	0x40010400

08005398 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	f003 0302 	and.w	r3, r3, #2
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d122      	bne.n	80053f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	f003 0302 	and.w	r3, r3, #2
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	d11b      	bne.n	80053f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f06f 0202 	mvn.w	r2, #2
 80053c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2201      	movs	r2, #1
 80053ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	699b      	ldr	r3, [r3, #24]
 80053d2:	f003 0303 	and.w	r3, r3, #3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d003      	beq.n	80053e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 fa82 	bl	80058e4 <HAL_TIM_IC_CaptureCallback>
 80053e0:	e005      	b.n	80053ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 fa74 	bl	80058d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 fa85 	bl	80058f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	f003 0304 	and.w	r3, r3, #4
 80053fe:	2b04      	cmp	r3, #4
 8005400:	d122      	bne.n	8005448 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	f003 0304 	and.w	r3, r3, #4
 800540c:	2b04      	cmp	r3, #4
 800540e:	d11b      	bne.n	8005448 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f06f 0204 	mvn.w	r2, #4
 8005418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2202      	movs	r2, #2
 800541e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800542a:	2b00      	cmp	r3, #0
 800542c:	d003      	beq.n	8005436 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 fa58 	bl	80058e4 <HAL_TIM_IC_CaptureCallback>
 8005434:	e005      	b.n	8005442 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 fa4a 	bl	80058d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f000 fa5b 	bl	80058f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	f003 0308 	and.w	r3, r3, #8
 8005452:	2b08      	cmp	r3, #8
 8005454:	d122      	bne.n	800549c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	f003 0308 	and.w	r3, r3, #8
 8005460:	2b08      	cmp	r3, #8
 8005462:	d11b      	bne.n	800549c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f06f 0208 	mvn.w	r2, #8
 800546c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2204      	movs	r2, #4
 8005472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	69db      	ldr	r3, [r3, #28]
 800547a:	f003 0303 	and.w	r3, r3, #3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d003      	beq.n	800548a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 fa2e 	bl	80058e4 <HAL_TIM_IC_CaptureCallback>
 8005488:	e005      	b.n	8005496 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 fa20 	bl	80058d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 fa31 	bl	80058f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	f003 0310 	and.w	r3, r3, #16
 80054a6:	2b10      	cmp	r3, #16
 80054a8:	d122      	bne.n	80054f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	f003 0310 	and.w	r3, r3, #16
 80054b4:	2b10      	cmp	r3, #16
 80054b6:	d11b      	bne.n	80054f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f06f 0210 	mvn.w	r2, #16
 80054c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2208      	movs	r2, #8
 80054c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	69db      	ldr	r3, [r3, #28]
 80054ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d003      	beq.n	80054de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 fa04 	bl	80058e4 <HAL_TIM_IC_CaptureCallback>
 80054dc:	e005      	b.n	80054ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 f9f6 	bl	80058d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 fa07 	bl	80058f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d10e      	bne.n	800551c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	f003 0301 	and.w	r3, r3, #1
 8005508:	2b01      	cmp	r3, #1
 800550a:	d107      	bne.n	800551c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f06f 0201 	mvn.w	r2, #1
 8005514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 f9d0 	bl	80058bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005526:	2b80      	cmp	r3, #128	; 0x80
 8005528:	d10e      	bne.n	8005548 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005534:	2b80      	cmp	r3, #128	; 0x80
 8005536:	d107      	bne.n	8005548 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 fd82 	bl	800604c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005552:	2b40      	cmp	r3, #64	; 0x40
 8005554:	d10e      	bne.n	8005574 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005560:	2b40      	cmp	r3, #64	; 0x40
 8005562:	d107      	bne.n	8005574 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800556c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 f9cc 	bl	800590c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	f003 0320 	and.w	r3, r3, #32
 800557e:	2b20      	cmp	r3, #32
 8005580:	d10e      	bne.n	80055a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	f003 0320 	and.w	r3, r3, #32
 800558c:	2b20      	cmp	r3, #32
 800558e:	d107      	bne.n	80055a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f06f 0220 	mvn.w	r2, #32
 8005598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 fd4c 	bl	8006038 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055a0:	bf00      	nop
 80055a2:	3708      	adds	r7, #8
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d101      	bne.n	80055c2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80055be:	2302      	movs	r3, #2
 80055c0:	e0b4      	b.n	800572c <HAL_TIM_PWM_ConfigChannel+0x184>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2201      	movs	r2, #1
 80055c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2202      	movs	r2, #2
 80055ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2b0c      	cmp	r3, #12
 80055d6:	f200 809f 	bhi.w	8005718 <HAL_TIM_PWM_ConfigChannel+0x170>
 80055da:	a201      	add	r2, pc, #4	; (adr r2, 80055e0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80055dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e0:	08005615 	.word	0x08005615
 80055e4:	08005719 	.word	0x08005719
 80055e8:	08005719 	.word	0x08005719
 80055ec:	08005719 	.word	0x08005719
 80055f0:	08005655 	.word	0x08005655
 80055f4:	08005719 	.word	0x08005719
 80055f8:	08005719 	.word	0x08005719
 80055fc:	08005719 	.word	0x08005719
 8005600:	08005697 	.word	0x08005697
 8005604:	08005719 	.word	0x08005719
 8005608:	08005719 	.word	0x08005719
 800560c:	08005719 	.word	0x08005719
 8005610:	080056d7 	.word	0x080056d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68b9      	ldr	r1, [r7, #8]
 800561a:	4618      	mov	r0, r3
 800561c:	f000 fa20 	bl	8005a60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	699a      	ldr	r2, [r3, #24]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f042 0208 	orr.w	r2, r2, #8
 800562e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	699a      	ldr	r2, [r3, #24]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f022 0204 	bic.w	r2, r2, #4
 800563e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	6999      	ldr	r1, [r3, #24]
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	691a      	ldr	r2, [r3, #16]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	430a      	orrs	r2, r1
 8005650:	619a      	str	r2, [r3, #24]
      break;
 8005652:	e062      	b.n	800571a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68b9      	ldr	r1, [r7, #8]
 800565a:	4618      	mov	r0, r3
 800565c:	f000 fa70 	bl	8005b40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	699a      	ldr	r2, [r3, #24]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800566e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	699a      	ldr	r2, [r3, #24]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800567e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	6999      	ldr	r1, [r3, #24]
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	021a      	lsls	r2, r3, #8
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	430a      	orrs	r2, r1
 8005692:	619a      	str	r2, [r3, #24]
      break;
 8005694:	e041      	b.n	800571a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68b9      	ldr	r1, [r7, #8]
 800569c:	4618      	mov	r0, r3
 800569e:	f000 fac5 	bl	8005c2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	69da      	ldr	r2, [r3, #28]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f042 0208 	orr.w	r2, r2, #8
 80056b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	69da      	ldr	r2, [r3, #28]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f022 0204 	bic.w	r2, r2, #4
 80056c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	69d9      	ldr	r1, [r3, #28]
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	691a      	ldr	r2, [r3, #16]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	430a      	orrs	r2, r1
 80056d2:	61da      	str	r2, [r3, #28]
      break;
 80056d4:	e021      	b.n	800571a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68b9      	ldr	r1, [r7, #8]
 80056dc:	4618      	mov	r0, r3
 80056de:	f000 fb19 	bl	8005d14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	69da      	ldr	r2, [r3, #28]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	69da      	ldr	r2, [r3, #28]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005700:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	69d9      	ldr	r1, [r3, #28]
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	021a      	lsls	r2, r3, #8
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	430a      	orrs	r2, r1
 8005714:	61da      	str	r2, [r3, #28]
      break;
 8005716:	e000      	b.n	800571a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005718:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	3710      	adds	r7, #16
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005744:	2b01      	cmp	r3, #1
 8005746:	d101      	bne.n	800574c <HAL_TIM_ConfigClockSource+0x18>
 8005748:	2302      	movs	r3, #2
 800574a:	e0b3      	b.n	80058b4 <HAL_TIM_ConfigClockSource+0x180>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2202      	movs	r2, #2
 8005758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800576a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005772:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005784:	d03e      	beq.n	8005804 <HAL_TIM_ConfigClockSource+0xd0>
 8005786:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800578a:	f200 8087 	bhi.w	800589c <HAL_TIM_ConfigClockSource+0x168>
 800578e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005792:	f000 8085 	beq.w	80058a0 <HAL_TIM_ConfigClockSource+0x16c>
 8005796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800579a:	d87f      	bhi.n	800589c <HAL_TIM_ConfigClockSource+0x168>
 800579c:	2b70      	cmp	r3, #112	; 0x70
 800579e:	d01a      	beq.n	80057d6 <HAL_TIM_ConfigClockSource+0xa2>
 80057a0:	2b70      	cmp	r3, #112	; 0x70
 80057a2:	d87b      	bhi.n	800589c <HAL_TIM_ConfigClockSource+0x168>
 80057a4:	2b60      	cmp	r3, #96	; 0x60
 80057a6:	d050      	beq.n	800584a <HAL_TIM_ConfigClockSource+0x116>
 80057a8:	2b60      	cmp	r3, #96	; 0x60
 80057aa:	d877      	bhi.n	800589c <HAL_TIM_ConfigClockSource+0x168>
 80057ac:	2b50      	cmp	r3, #80	; 0x50
 80057ae:	d03c      	beq.n	800582a <HAL_TIM_ConfigClockSource+0xf6>
 80057b0:	2b50      	cmp	r3, #80	; 0x50
 80057b2:	d873      	bhi.n	800589c <HAL_TIM_ConfigClockSource+0x168>
 80057b4:	2b40      	cmp	r3, #64	; 0x40
 80057b6:	d058      	beq.n	800586a <HAL_TIM_ConfigClockSource+0x136>
 80057b8:	2b40      	cmp	r3, #64	; 0x40
 80057ba:	d86f      	bhi.n	800589c <HAL_TIM_ConfigClockSource+0x168>
 80057bc:	2b30      	cmp	r3, #48	; 0x30
 80057be:	d064      	beq.n	800588a <HAL_TIM_ConfigClockSource+0x156>
 80057c0:	2b30      	cmp	r3, #48	; 0x30
 80057c2:	d86b      	bhi.n	800589c <HAL_TIM_ConfigClockSource+0x168>
 80057c4:	2b20      	cmp	r3, #32
 80057c6:	d060      	beq.n	800588a <HAL_TIM_ConfigClockSource+0x156>
 80057c8:	2b20      	cmp	r3, #32
 80057ca:	d867      	bhi.n	800589c <HAL_TIM_ConfigClockSource+0x168>
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d05c      	beq.n	800588a <HAL_TIM_ConfigClockSource+0x156>
 80057d0:	2b10      	cmp	r3, #16
 80057d2:	d05a      	beq.n	800588a <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80057d4:	e062      	b.n	800589c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6818      	ldr	r0, [r3, #0]
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	6899      	ldr	r1, [r3, #8]
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	685a      	ldr	r2, [r3, #4]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	f000 fb65 	bl	8005eb4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80057f8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	609a      	str	r2, [r3, #8]
      break;
 8005802:	e04e      	b.n	80058a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6818      	ldr	r0, [r3, #0]
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	6899      	ldr	r1, [r3, #8]
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	685a      	ldr	r2, [r3, #4]
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	f000 fb4e 	bl	8005eb4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	689a      	ldr	r2, [r3, #8]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005826:	609a      	str	r2, [r3, #8]
      break;
 8005828:	e03b      	b.n	80058a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6818      	ldr	r0, [r3, #0]
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	6859      	ldr	r1, [r3, #4]
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	461a      	mov	r2, r3
 8005838:	f000 fac2 	bl	8005dc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2150      	movs	r1, #80	; 0x50
 8005842:	4618      	mov	r0, r3
 8005844:	f000 fb1b 	bl	8005e7e <TIM_ITRx_SetConfig>
      break;
 8005848:	e02b      	b.n	80058a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6818      	ldr	r0, [r3, #0]
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	6859      	ldr	r1, [r3, #4]
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	461a      	mov	r2, r3
 8005858:	f000 fae1 	bl	8005e1e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2160      	movs	r1, #96	; 0x60
 8005862:	4618      	mov	r0, r3
 8005864:	f000 fb0b 	bl	8005e7e <TIM_ITRx_SetConfig>
      break;
 8005868:	e01b      	b.n	80058a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6818      	ldr	r0, [r3, #0]
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	6859      	ldr	r1, [r3, #4]
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	461a      	mov	r2, r3
 8005878:	f000 faa2 	bl	8005dc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2140      	movs	r1, #64	; 0x40
 8005882:	4618      	mov	r0, r3
 8005884:	f000 fafb 	bl	8005e7e <TIM_ITRx_SetConfig>
      break;
 8005888:	e00b      	b.n	80058a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4619      	mov	r1, r3
 8005894:	4610      	mov	r0, r2
 8005896:	f000 faf2 	bl	8005e7e <TIM_ITRx_SetConfig>
      break;
 800589a:	e002      	b.n	80058a2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800589c:	bf00      	nop
 800589e:	e000      	b.n	80058a2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80058a0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2201      	movs	r2, #1
 80058a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80058c4:	bf00      	nop
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058d8:	bf00      	nop
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058ec:	bf00      	nop
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005900:	bf00      	nop
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005914:	bf00      	nop
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a40      	ldr	r2, [pc, #256]	; (8005a34 <TIM_Base_SetConfig+0x114>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d013      	beq.n	8005960 <TIM_Base_SetConfig+0x40>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800593e:	d00f      	beq.n	8005960 <TIM_Base_SetConfig+0x40>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a3d      	ldr	r2, [pc, #244]	; (8005a38 <TIM_Base_SetConfig+0x118>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d00b      	beq.n	8005960 <TIM_Base_SetConfig+0x40>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a3c      	ldr	r2, [pc, #240]	; (8005a3c <TIM_Base_SetConfig+0x11c>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d007      	beq.n	8005960 <TIM_Base_SetConfig+0x40>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a3b      	ldr	r2, [pc, #236]	; (8005a40 <TIM_Base_SetConfig+0x120>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d003      	beq.n	8005960 <TIM_Base_SetConfig+0x40>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a3a      	ldr	r2, [pc, #232]	; (8005a44 <TIM_Base_SetConfig+0x124>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d108      	bne.n	8005972 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005966:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	4313      	orrs	r3, r2
 8005970:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a2f      	ldr	r2, [pc, #188]	; (8005a34 <TIM_Base_SetConfig+0x114>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d02b      	beq.n	80059d2 <TIM_Base_SetConfig+0xb2>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005980:	d027      	beq.n	80059d2 <TIM_Base_SetConfig+0xb2>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a2c      	ldr	r2, [pc, #176]	; (8005a38 <TIM_Base_SetConfig+0x118>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d023      	beq.n	80059d2 <TIM_Base_SetConfig+0xb2>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a2b      	ldr	r2, [pc, #172]	; (8005a3c <TIM_Base_SetConfig+0x11c>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d01f      	beq.n	80059d2 <TIM_Base_SetConfig+0xb2>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a2a      	ldr	r2, [pc, #168]	; (8005a40 <TIM_Base_SetConfig+0x120>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d01b      	beq.n	80059d2 <TIM_Base_SetConfig+0xb2>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a29      	ldr	r2, [pc, #164]	; (8005a44 <TIM_Base_SetConfig+0x124>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d017      	beq.n	80059d2 <TIM_Base_SetConfig+0xb2>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a28      	ldr	r2, [pc, #160]	; (8005a48 <TIM_Base_SetConfig+0x128>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d013      	beq.n	80059d2 <TIM_Base_SetConfig+0xb2>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a27      	ldr	r2, [pc, #156]	; (8005a4c <TIM_Base_SetConfig+0x12c>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d00f      	beq.n	80059d2 <TIM_Base_SetConfig+0xb2>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a26      	ldr	r2, [pc, #152]	; (8005a50 <TIM_Base_SetConfig+0x130>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d00b      	beq.n	80059d2 <TIM_Base_SetConfig+0xb2>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a25      	ldr	r2, [pc, #148]	; (8005a54 <TIM_Base_SetConfig+0x134>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d007      	beq.n	80059d2 <TIM_Base_SetConfig+0xb2>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a24      	ldr	r2, [pc, #144]	; (8005a58 <TIM_Base_SetConfig+0x138>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d003      	beq.n	80059d2 <TIM_Base_SetConfig+0xb2>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a23      	ldr	r2, [pc, #140]	; (8005a5c <TIM_Base_SetConfig+0x13c>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d108      	bne.n	80059e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	695b      	ldr	r3, [r3, #20]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	689a      	ldr	r2, [r3, #8]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a0a      	ldr	r2, [pc, #40]	; (8005a34 <TIM_Base_SetConfig+0x114>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d003      	beq.n	8005a18 <TIM_Base_SetConfig+0xf8>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a0c      	ldr	r2, [pc, #48]	; (8005a44 <TIM_Base_SetConfig+0x124>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d103      	bne.n	8005a20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	691a      	ldr	r2, [r3, #16]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	615a      	str	r2, [r3, #20]
}
 8005a26:	bf00      	nop
 8005a28:	3714      	adds	r7, #20
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	40010000 	.word	0x40010000
 8005a38:	40000400 	.word	0x40000400
 8005a3c:	40000800 	.word	0x40000800
 8005a40:	40000c00 	.word	0x40000c00
 8005a44:	40010400 	.word	0x40010400
 8005a48:	40014000 	.word	0x40014000
 8005a4c:	40014400 	.word	0x40014400
 8005a50:	40014800 	.word	0x40014800
 8005a54:	40001800 	.word	0x40001800
 8005a58:	40001c00 	.word	0x40001c00
 8005a5c:	40002000 	.word	0x40002000

08005a60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b087      	sub	sp, #28
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	f023 0201 	bic.w	r2, r3, #1
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f023 0303 	bic.w	r3, r3, #3
 8005a96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	f023 0302 	bic.w	r3, r3, #2
 8005aa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	697a      	ldr	r2, [r7, #20]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a20      	ldr	r2, [pc, #128]	; (8005b38 <TIM_OC1_SetConfig+0xd8>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d003      	beq.n	8005ac4 <TIM_OC1_SetConfig+0x64>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a1f      	ldr	r2, [pc, #124]	; (8005b3c <TIM_OC1_SetConfig+0xdc>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d10c      	bne.n	8005ade <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	f023 0308 	bic.w	r3, r3, #8
 8005aca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	697a      	ldr	r2, [r7, #20]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	f023 0304 	bic.w	r3, r3, #4
 8005adc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a15      	ldr	r2, [pc, #84]	; (8005b38 <TIM_OC1_SetConfig+0xd8>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d003      	beq.n	8005aee <TIM_OC1_SetConfig+0x8e>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a14      	ldr	r2, [pc, #80]	; (8005b3c <TIM_OC1_SetConfig+0xdc>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d111      	bne.n	8005b12 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005af4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005afc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	695b      	ldr	r3, [r3, #20]
 8005b02:	693a      	ldr	r2, [r7, #16]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	699b      	ldr	r3, [r3, #24]
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	685a      	ldr	r2, [r3, #4]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	697a      	ldr	r2, [r7, #20]
 8005b2a:	621a      	str	r2, [r3, #32]
}
 8005b2c:	bf00      	nop
 8005b2e:	371c      	adds	r7, #28
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr
 8005b38:	40010000 	.word	0x40010000
 8005b3c:	40010400 	.word	0x40010400

08005b40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b087      	sub	sp, #28
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
 8005b4e:	f023 0210 	bic.w	r2, r3, #16
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	021b      	lsls	r3, r3, #8
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	f023 0320 	bic.w	r3, r3, #32
 8005b8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	011b      	lsls	r3, r3, #4
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a22      	ldr	r2, [pc, #136]	; (8005c24 <TIM_OC2_SetConfig+0xe4>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d003      	beq.n	8005ba8 <TIM_OC2_SetConfig+0x68>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a21      	ldr	r2, [pc, #132]	; (8005c28 <TIM_OC2_SetConfig+0xe8>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d10d      	bne.n	8005bc4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	011b      	lsls	r3, r3, #4
 8005bb6:	697a      	ldr	r2, [r7, #20]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bc2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a17      	ldr	r2, [pc, #92]	; (8005c24 <TIM_OC2_SetConfig+0xe4>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d003      	beq.n	8005bd4 <TIM_OC2_SetConfig+0x94>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a16      	ldr	r2, [pc, #88]	; (8005c28 <TIM_OC2_SetConfig+0xe8>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d113      	bne.n	8005bfc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005be2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	695b      	ldr	r3, [r3, #20]
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	693a      	ldr	r2, [r7, #16]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	699b      	ldr	r3, [r3, #24]
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	693a      	ldr	r2, [r7, #16]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	685a      	ldr	r2, [r3, #4]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	621a      	str	r2, [r3, #32]
}
 8005c16:	bf00      	nop
 8005c18:	371c      	adds	r7, #28
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop
 8005c24:	40010000 	.word	0x40010000
 8005c28:	40010400 	.word	0x40010400

08005c2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b087      	sub	sp, #28
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a1b      	ldr	r3, [r3, #32]
 8005c3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a1b      	ldr	r3, [r3, #32]
 8005c46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	69db      	ldr	r3, [r3, #28]
 8005c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f023 0303 	bic.w	r3, r3, #3
 8005c62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	021b      	lsls	r3, r3, #8
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a21      	ldr	r2, [pc, #132]	; (8005d0c <TIM_OC3_SetConfig+0xe0>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d003      	beq.n	8005c92 <TIM_OC3_SetConfig+0x66>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a20      	ldr	r2, [pc, #128]	; (8005d10 <TIM_OC3_SetConfig+0xe4>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d10d      	bne.n	8005cae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	021b      	lsls	r3, r3, #8
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a16      	ldr	r2, [pc, #88]	; (8005d0c <TIM_OC3_SetConfig+0xe0>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d003      	beq.n	8005cbe <TIM_OC3_SetConfig+0x92>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a15      	ldr	r2, [pc, #84]	; (8005d10 <TIM_OC3_SetConfig+0xe4>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d113      	bne.n	8005ce6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ccc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	695b      	ldr	r3, [r3, #20]
 8005cd2:	011b      	lsls	r3, r3, #4
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	699b      	ldr	r3, [r3, #24]
 8005cde:	011b      	lsls	r3, r3, #4
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	685a      	ldr	r2, [r3, #4]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	697a      	ldr	r2, [r7, #20]
 8005cfe:	621a      	str	r2, [r3, #32]
}
 8005d00:	bf00      	nop
 8005d02:	371c      	adds	r7, #28
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr
 8005d0c:	40010000 	.word	0x40010000
 8005d10:	40010400 	.word	0x40010400

08005d14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b087      	sub	sp, #28
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
 8005d2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	69db      	ldr	r3, [r3, #28]
 8005d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	021b      	lsls	r3, r3, #8
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	031b      	lsls	r3, r3, #12
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a12      	ldr	r2, [pc, #72]	; (8005db8 <TIM_OC4_SetConfig+0xa4>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d003      	beq.n	8005d7c <TIM_OC4_SetConfig+0x68>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a11      	ldr	r2, [pc, #68]	; (8005dbc <TIM_OC4_SetConfig+0xa8>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d109      	bne.n	8005d90 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	695b      	ldr	r3, [r3, #20]
 8005d88:	019b      	lsls	r3, r3, #6
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	685a      	ldr	r2, [r3, #4]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	693a      	ldr	r2, [r7, #16]
 8005da8:	621a      	str	r2, [r3, #32]
}
 8005daa:	bf00      	nop
 8005dac:	371c      	adds	r7, #28
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
 8005db6:	bf00      	nop
 8005db8:	40010000 	.word	0x40010000
 8005dbc:	40010400 	.word	0x40010400

08005dc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b087      	sub	sp, #28
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6a1b      	ldr	r3, [r3, #32]
 8005dd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6a1b      	ldr	r3, [r3, #32]
 8005dd6:	f023 0201 	bic.w	r2, r3, #1
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	699b      	ldr	r3, [r3, #24]
 8005de2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005dea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	011b      	lsls	r3, r3, #4
 8005df0:	693a      	ldr	r2, [r7, #16]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	f023 030a 	bic.w	r3, r3, #10
 8005dfc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005dfe:	697a      	ldr	r2, [r7, #20]
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	697a      	ldr	r2, [r7, #20]
 8005e10:	621a      	str	r2, [r3, #32]
}
 8005e12:	bf00      	nop
 8005e14:	371c      	adds	r7, #28
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr

08005e1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e1e:	b480      	push	{r7}
 8005e20:	b087      	sub	sp, #28
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	60f8      	str	r0, [r7, #12]
 8005e26:	60b9      	str	r1, [r7, #8]
 8005e28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6a1b      	ldr	r3, [r3, #32]
 8005e2e:	f023 0210 	bic.w	r2, r3, #16
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	699b      	ldr	r3, [r3, #24]
 8005e3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6a1b      	ldr	r3, [r3, #32]
 8005e40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	031b      	lsls	r3, r3, #12
 8005e4e:	697a      	ldr	r2, [r7, #20]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e5a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	011b      	lsls	r3, r3, #4
 8005e60:	693a      	ldr	r2, [r7, #16]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	697a      	ldr	r2, [r7, #20]
 8005e6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	693a      	ldr	r2, [r7, #16]
 8005e70:	621a      	str	r2, [r3, #32]
}
 8005e72:	bf00      	nop
 8005e74:	371c      	adds	r7, #28
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr

08005e7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e7e:	b480      	push	{r7}
 8005e80:	b085      	sub	sp, #20
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
 8005e86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e96:	683a      	ldr	r2, [r7, #0]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	f043 0307 	orr.w	r3, r3, #7
 8005ea0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	609a      	str	r2, [r3, #8]
}
 8005ea8:	bf00      	nop
 8005eaa:	3714      	adds	r7, #20
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b087      	sub	sp, #28
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	607a      	str	r2, [r7, #4]
 8005ec0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ece:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	021a      	lsls	r2, r3, #8
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	431a      	orrs	r2, r3
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	697a      	ldr	r2, [r7, #20]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	697a      	ldr	r2, [r7, #20]
 8005ee6:	609a      	str	r2, [r3, #8]
}
 8005ee8:	bf00      	nop
 8005eea:	371c      	adds	r7, #28
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b087      	sub	sp, #28
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	f003 031f 	and.w	r3, r3, #31
 8005f06:	2201      	movs	r2, #1
 8005f08:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6a1a      	ldr	r2, [r3, #32]
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	43db      	mvns	r3, r3
 8005f16:	401a      	ands	r2, r3
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6a1a      	ldr	r2, [r3, #32]
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	f003 031f 	and.w	r3, r3, #31
 8005f26:	6879      	ldr	r1, [r7, #4]
 8005f28:	fa01 f303 	lsl.w	r3, r1, r3
 8005f2c:	431a      	orrs	r2, r3
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	621a      	str	r2, [r3, #32]
}
 8005f32:	bf00      	nop
 8005f34:	371c      	adds	r7, #28
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr
	...

08005f40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b085      	sub	sp, #20
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d101      	bne.n	8005f58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f54:	2302      	movs	r3, #2
 8005f56:	e05a      	b.n	800600e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2202      	movs	r2, #2
 8005f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a21      	ldr	r2, [pc, #132]	; (800601c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d022      	beq.n	8005fe2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fa4:	d01d      	beq.n	8005fe2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a1d      	ldr	r2, [pc, #116]	; (8006020 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d018      	beq.n	8005fe2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a1b      	ldr	r2, [pc, #108]	; (8006024 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d013      	beq.n	8005fe2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a1a      	ldr	r2, [pc, #104]	; (8006028 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d00e      	beq.n	8005fe2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a18      	ldr	r2, [pc, #96]	; (800602c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d009      	beq.n	8005fe2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a17      	ldr	r2, [pc, #92]	; (8006030 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d004      	beq.n	8005fe2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a15      	ldr	r2, [pc, #84]	; (8006034 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d10c      	bne.n	8005ffc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fe8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	68ba      	ldr	r2, [r7, #8]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	68ba      	ldr	r2, [r7, #8]
 8005ffa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800600c:	2300      	movs	r3, #0
}
 800600e:	4618      	mov	r0, r3
 8006010:	3714      	adds	r7, #20
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	40010000 	.word	0x40010000
 8006020:	40000400 	.word	0x40000400
 8006024:	40000800 	.word	0x40000800
 8006028:	40000c00 	.word	0x40000c00
 800602c:	40010400 	.word	0x40010400
 8006030:	40014000 	.word	0x40014000
 8006034:	40001800 	.word	0x40001800

08006038 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006040:	bf00      	nop
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006054:	bf00      	nop
 8006056:	370c      	adds	r7, #12
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d101      	bne.n	8006072 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e03f      	b.n	80060f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006078:	b2db      	uxtb	r3, r3
 800607a:	2b00      	cmp	r3, #0
 800607c:	d106      	bne.n	800608c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f7fb fdc8 	bl	8001c1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2224      	movs	r2, #36	; 0x24
 8006090:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68da      	ldr	r2, [r3, #12]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 fba1 	bl	80067ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	691a      	ldr	r2, [r3, #16]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	695a      	ldr	r2, [r3, #20]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80060c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68da      	ldr	r2, [r3, #12]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2220      	movs	r2, #32
 80060e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2220      	movs	r2, #32
 80060ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3708      	adds	r7, #8
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b088      	sub	sp, #32
 80060fe:	af02      	add	r7, sp, #8
 8006100:	60f8      	str	r0, [r7, #12]
 8006102:	60b9      	str	r1, [r7, #8]
 8006104:	603b      	str	r3, [r7, #0]
 8006106:	4613      	mov	r3, r2
 8006108:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800610a:	2300      	movs	r3, #0
 800610c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006114:	b2db      	uxtb	r3, r3
 8006116:	2b20      	cmp	r3, #32
 8006118:	f040 8083 	bne.w	8006222 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d002      	beq.n	8006128 <HAL_UART_Transmit+0x2e>
 8006122:	88fb      	ldrh	r3, [r7, #6]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d101      	bne.n	800612c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	e07b      	b.n	8006224 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006132:	2b01      	cmp	r3, #1
 8006134:	d101      	bne.n	800613a <HAL_UART_Transmit+0x40>
 8006136:	2302      	movs	r3, #2
 8006138:	e074      	b.n	8006224 <HAL_UART_Transmit+0x12a>
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2201      	movs	r2, #1
 800613e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2200      	movs	r2, #0
 8006146:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2221      	movs	r2, #33	; 0x21
 800614c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006150:	f7fd fcf2 	bl	8003b38 <HAL_GetTick>
 8006154:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	88fa      	ldrh	r2, [r7, #6]
 800615a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	88fa      	ldrh	r2, [r7, #6]
 8006160:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800616a:	e042      	b.n	80061f2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006170:	b29b      	uxth	r3, r3
 8006172:	3b01      	subs	r3, #1
 8006174:	b29a      	uxth	r2, r3
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006182:	d122      	bne.n	80061ca <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	9300      	str	r3, [sp, #0]
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	2200      	movs	r2, #0
 800618c:	2180      	movs	r1, #128	; 0x80
 800618e:	68f8      	ldr	r0, [r7, #12]
 8006190:	f000 f9c0 	bl	8006514 <UART_WaitOnFlagUntilTimeout>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d001      	beq.n	800619e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	e042      	b.n	8006224 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	881b      	ldrh	r3, [r3, #0]
 80061a6:	461a      	mov	r2, r3
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061b0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d103      	bne.n	80061c2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	3302      	adds	r3, #2
 80061be:	60bb      	str	r3, [r7, #8]
 80061c0:	e017      	b.n	80061f2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	3301      	adds	r3, #1
 80061c6:	60bb      	str	r3, [r7, #8]
 80061c8:	e013      	b.n	80061f2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	9300      	str	r3, [sp, #0]
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	2200      	movs	r2, #0
 80061d2:	2180      	movs	r1, #128	; 0x80
 80061d4:	68f8      	ldr	r0, [r7, #12]
 80061d6:	f000 f99d 	bl	8006514 <UART_WaitOnFlagUntilTimeout>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d001      	beq.n	80061e4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80061e0:	2303      	movs	r3, #3
 80061e2:	e01f      	b.n	8006224 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	1c5a      	adds	r2, r3, #1
 80061e8:	60ba      	str	r2, [r7, #8]
 80061ea:	781a      	ldrb	r2, [r3, #0]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d1b7      	bne.n	800616c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	9300      	str	r3, [sp, #0]
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	2200      	movs	r2, #0
 8006204:	2140      	movs	r1, #64	; 0x40
 8006206:	68f8      	ldr	r0, [r7, #12]
 8006208:	f000 f984 	bl	8006514 <UART_WaitOnFlagUntilTimeout>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d001      	beq.n	8006216 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8006212:	2303      	movs	r3, #3
 8006214:	e006      	b.n	8006224 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2220      	movs	r2, #32
 800621a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800621e:	2300      	movs	r3, #0
 8006220:	e000      	b.n	8006224 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006222:	2302      	movs	r3, #2
  }
}
 8006224:	4618      	mov	r0, r3
 8006226:	3718      	adds	r7, #24
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800622c:	b480      	push	{r7}
 800622e:	b085      	sub	sp, #20
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	4613      	mov	r3, r2
 8006238:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006240:	b2db      	uxtb	r3, r3
 8006242:	2b20      	cmp	r3, #32
 8006244:	d140      	bne.n	80062c8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d002      	beq.n	8006252 <HAL_UART_Receive_IT+0x26>
 800624c:	88fb      	ldrh	r3, [r7, #6]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d101      	bne.n	8006256 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e039      	b.n	80062ca <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800625c:	2b01      	cmp	r3, #1
 800625e:	d101      	bne.n	8006264 <HAL_UART_Receive_IT+0x38>
 8006260:	2302      	movs	r3, #2
 8006262:	e032      	b.n	80062ca <HAL_UART_Receive_IT+0x9e>
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	68ba      	ldr	r2, [r7, #8]
 8006270:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	88fa      	ldrh	r2, [r7, #6]
 8006276:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	88fa      	ldrh	r2, [r7, #6]
 800627c:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2200      	movs	r2, #0
 8006282:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2222      	movs	r2, #34	; 0x22
 8006288:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	68da      	ldr	r2, [r3, #12]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062a2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	695a      	ldr	r2, [r3, #20]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f042 0201 	orr.w	r2, r2, #1
 80062b2:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68da      	ldr	r2, [r3, #12]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f042 0220 	orr.w	r2, r2, #32
 80062c2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80062c4:	2300      	movs	r3, #0
 80062c6:	e000      	b.n	80062ca <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80062c8:	2302      	movs	r3, #2
  }
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3714      	adds	r7, #20
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
	...

080062d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b088      	sub	sp, #32
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	695b      	ldr	r3, [r3, #20]
 80062f6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80062f8:	2300      	movs	r3, #0
 80062fa:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80062fc:	2300      	movs	r3, #0
 80062fe:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	f003 030f 	and.w	r3, r3, #15
 8006306:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d10d      	bne.n	800632a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	f003 0320 	and.w	r3, r3, #32
 8006314:	2b00      	cmp	r3, #0
 8006316:	d008      	beq.n	800632a <HAL_UART_IRQHandler+0x52>
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	f003 0320 	and.w	r3, r3, #32
 800631e:	2b00      	cmp	r3, #0
 8006320:	d003      	beq.n	800632a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 f9e0 	bl	80066e8 <UART_Receive_IT>
      return;
 8006328:	e0d0      	b.n	80064cc <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	2b00      	cmp	r3, #0
 800632e:	f000 80b0 	beq.w	8006492 <HAL_UART_IRQHandler+0x1ba>
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	f003 0301 	and.w	r3, r3, #1
 8006338:	2b00      	cmp	r3, #0
 800633a:	d105      	bne.n	8006348 <HAL_UART_IRQHandler+0x70>
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006342:	2b00      	cmp	r3, #0
 8006344:	f000 80a5 	beq.w	8006492 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	f003 0301 	and.w	r3, r3, #1
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00a      	beq.n	8006368 <HAL_UART_IRQHandler+0x90>
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006358:	2b00      	cmp	r3, #0
 800635a:	d005      	beq.n	8006368 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006360:	f043 0201 	orr.w	r2, r3, #1
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	f003 0304 	and.w	r3, r3, #4
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00a      	beq.n	8006388 <HAL_UART_IRQHandler+0xb0>
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	f003 0301 	and.w	r3, r3, #1
 8006378:	2b00      	cmp	r3, #0
 800637a:	d005      	beq.n	8006388 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006380:	f043 0202 	orr.w	r2, r3, #2
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	f003 0302 	and.w	r3, r3, #2
 800638e:	2b00      	cmp	r3, #0
 8006390:	d00a      	beq.n	80063a8 <HAL_UART_IRQHandler+0xd0>
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	f003 0301 	and.w	r3, r3, #1
 8006398:	2b00      	cmp	r3, #0
 800639a:	d005      	beq.n	80063a8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063a0:	f043 0204 	orr.w	r2, r3, #4
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	f003 0308 	and.w	r3, r3, #8
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d00f      	beq.n	80063d2 <HAL_UART_IRQHandler+0xfa>
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	f003 0320 	and.w	r3, r3, #32
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d104      	bne.n	80063c6 <HAL_UART_IRQHandler+0xee>
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	f003 0301 	and.w	r3, r3, #1
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d005      	beq.n	80063d2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ca:	f043 0208 	orr.w	r2, r3, #8
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d077      	beq.n	80064ca <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	f003 0320 	and.w	r3, r3, #32
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d007      	beq.n	80063f4 <HAL_UART_IRQHandler+0x11c>
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	f003 0320 	and.w	r3, r3, #32
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d002      	beq.n	80063f4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 f97a 	bl	80066e8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	695b      	ldr	r3, [r3, #20]
 80063fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063fe:	2b40      	cmp	r3, #64	; 0x40
 8006400:	bf0c      	ite	eq
 8006402:	2301      	moveq	r3, #1
 8006404:	2300      	movne	r3, #0
 8006406:	b2db      	uxtb	r3, r3
 8006408:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800640e:	f003 0308 	and.w	r3, r3, #8
 8006412:	2b00      	cmp	r3, #0
 8006414:	d102      	bne.n	800641c <HAL_UART_IRQHandler+0x144>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d031      	beq.n	8006480 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 f8c3 	bl	80065a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	695b      	ldr	r3, [r3, #20]
 8006428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800642c:	2b40      	cmp	r3, #64	; 0x40
 800642e:	d123      	bne.n	8006478 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	695a      	ldr	r2, [r3, #20]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800643e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006444:	2b00      	cmp	r3, #0
 8006446:	d013      	beq.n	8006470 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800644c:	4a21      	ldr	r2, [pc, #132]	; (80064d4 <HAL_UART_IRQHandler+0x1fc>)
 800644e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006454:	4618      	mov	r0, r3
 8006456:	f7fd fd93 	bl	8003f80 <HAL_DMA_Abort_IT>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d016      	beq.n	800648e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006464:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800646a:	4610      	mov	r0, r2
 800646c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800646e:	e00e      	b.n	800648e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 f845 	bl	8006500 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006476:	e00a      	b.n	800648e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 f841 	bl	8006500 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800647e:	e006      	b.n	800648e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 f83d 	bl	8006500 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800648c:	e01d      	b.n	80064ca <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800648e:	bf00      	nop
    return;
 8006490:	e01b      	b.n	80064ca <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006498:	2b00      	cmp	r3, #0
 800649a:	d008      	beq.n	80064ae <HAL_UART_IRQHandler+0x1d6>
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d003      	beq.n	80064ae <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 f8b0 	bl	800660c <UART_Transmit_IT>
    return;
 80064ac:	e00e      	b.n	80064cc <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d009      	beq.n	80064cc <HAL_UART_IRQHandler+0x1f4>
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d004      	beq.n	80064cc <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 f8f8 	bl	80066b8 <UART_EndTransmit_IT>
    return;
 80064c8:	e000      	b.n	80064cc <HAL_UART_IRQHandler+0x1f4>
    return;
 80064ca:	bf00      	nop
  }
}
 80064cc:	3720      	adds	r7, #32
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	080065e5 	.word	0x080065e5

080064d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80064e0:	bf00      	nop
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	603b      	str	r3, [r7, #0]
 8006520:	4613      	mov	r3, r2
 8006522:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006524:	e02c      	b.n	8006580 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800652c:	d028      	beq.n	8006580 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d007      	beq.n	8006544 <UART_WaitOnFlagUntilTimeout+0x30>
 8006534:	f7fd fb00 	bl	8003b38 <HAL_GetTick>
 8006538:	4602      	mov	r2, r0
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	69ba      	ldr	r2, [r7, #24]
 8006540:	429a      	cmp	r2, r3
 8006542:	d21d      	bcs.n	8006580 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68da      	ldr	r2, [r3, #12]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006552:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	695a      	ldr	r2, [r3, #20]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f022 0201 	bic.w	r2, r2, #1
 8006562:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2220      	movs	r2, #32
 8006568:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2220      	movs	r2, #32
 8006570:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2200      	movs	r2, #0
 8006578:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800657c:	2303      	movs	r3, #3
 800657e:	e00f      	b.n	80065a0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	4013      	ands	r3, r2
 800658a:	68ba      	ldr	r2, [r7, #8]
 800658c:	429a      	cmp	r2, r3
 800658e:	bf0c      	ite	eq
 8006590:	2301      	moveq	r3, #1
 8006592:	2300      	movne	r3, #0
 8006594:	b2db      	uxtb	r3, r3
 8006596:	461a      	mov	r2, r3
 8006598:	79fb      	ldrb	r3, [r7, #7]
 800659a:	429a      	cmp	r2, r3
 800659c:	d0c3      	beq.n	8006526 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800659e:	2300      	movs	r3, #0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3710      	adds	r7, #16
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68da      	ldr	r2, [r3, #12]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80065be:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	695a      	ldr	r2, [r3, #20]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f022 0201 	bic.w	r2, r2, #1
 80065ce:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2220      	movs	r2, #32
 80065d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80065d8:	bf00      	nop
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2200      	movs	r2, #0
 80065f6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2200      	movs	r2, #0
 80065fc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80065fe:	68f8      	ldr	r0, [r7, #12]
 8006600:	f7ff ff7e 	bl	8006500 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006604:	bf00      	nop
 8006606:	3710      	adds	r7, #16
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800660c:	b480      	push	{r7}
 800660e:	b085      	sub	sp, #20
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800661a:	b2db      	uxtb	r3, r3
 800661c:	2b21      	cmp	r3, #33	; 0x21
 800661e:	d144      	bne.n	80066aa <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006628:	d11a      	bne.n	8006660 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a1b      	ldr	r3, [r3, #32]
 800662e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	881b      	ldrh	r3, [r3, #0]
 8006634:	461a      	mov	r2, r3
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800663e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	691b      	ldr	r3, [r3, #16]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d105      	bne.n	8006654 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6a1b      	ldr	r3, [r3, #32]
 800664c:	1c9a      	adds	r2, r3, #2
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	621a      	str	r2, [r3, #32]
 8006652:	e00e      	b.n	8006672 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6a1b      	ldr	r3, [r3, #32]
 8006658:	1c5a      	adds	r2, r3, #1
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	621a      	str	r2, [r3, #32]
 800665e:	e008      	b.n	8006672 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6a1b      	ldr	r3, [r3, #32]
 8006664:	1c59      	adds	r1, r3, #1
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	6211      	str	r1, [r2, #32]
 800666a:	781a      	ldrb	r2, [r3, #0]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006676:	b29b      	uxth	r3, r3
 8006678:	3b01      	subs	r3, #1
 800667a:	b29b      	uxth	r3, r3
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	4619      	mov	r1, r3
 8006680:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006682:	2b00      	cmp	r3, #0
 8006684:	d10f      	bne.n	80066a6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68da      	ldr	r2, [r3, #12]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006694:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	68da      	ldr	r2, [r3, #12]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066a4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80066a6:	2300      	movs	r3, #0
 80066a8:	e000      	b.n	80066ac <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80066aa:	2302      	movs	r3, #2
  }
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3714      	adds	r7, #20
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b082      	sub	sp, #8
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68da      	ldr	r2, [r3, #12]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066ce:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2220      	movs	r2, #32
 80066d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f7ff fefd 	bl	80064d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3708      	adds	r7, #8
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	2b22      	cmp	r3, #34	; 0x22
 80066fa:	d171      	bne.n	80067e0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006704:	d123      	bne.n	800674e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800670a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	691b      	ldr	r3, [r3, #16]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d10e      	bne.n	8006732 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	b29b      	uxth	r3, r3
 800671c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006720:	b29a      	uxth	r2, r3
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800672a:	1c9a      	adds	r2, r3, #2
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	629a      	str	r2, [r3, #40]	; 0x28
 8006730:	e029      	b.n	8006786 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	b29b      	uxth	r3, r3
 800673a:	b2db      	uxtb	r3, r3
 800673c:	b29a      	uxth	r2, r3
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006746:	1c5a      	adds	r2, r3, #1
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	629a      	str	r2, [r3, #40]	; 0x28
 800674c:	e01b      	b.n	8006786 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d10a      	bne.n	800676c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	6858      	ldr	r0, [r3, #4]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006760:	1c59      	adds	r1, r3, #1
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	6291      	str	r1, [r2, #40]	; 0x28
 8006766:	b2c2      	uxtb	r2, r0
 8006768:	701a      	strb	r2, [r3, #0]
 800676a:	e00c      	b.n	8006786 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	b2da      	uxtb	r2, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006778:	1c58      	adds	r0, r3, #1
 800677a:	6879      	ldr	r1, [r7, #4]
 800677c:	6288      	str	r0, [r1, #40]	; 0x28
 800677e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006782:	b2d2      	uxtb	r2, r2
 8006784:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800678a:	b29b      	uxth	r3, r3
 800678c:	3b01      	subs	r3, #1
 800678e:	b29b      	uxth	r3, r3
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	4619      	mov	r1, r3
 8006794:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006796:	2b00      	cmp	r3, #0
 8006798:	d120      	bne.n	80067dc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68da      	ldr	r2, [r3, #12]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f022 0220 	bic.w	r2, r2, #32
 80067a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68da      	ldr	r2, [r3, #12]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	695a      	ldr	r2, [r3, #20]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f022 0201 	bic.w	r2, r2, #1
 80067c8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2220      	movs	r2, #32
 80067ce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f7ff fe8a 	bl	80064ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80067d8:	2300      	movs	r3, #0
 80067da:	e002      	b.n	80067e2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80067dc:	2300      	movs	r3, #0
 80067de:	e000      	b.n	80067e2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80067e0:	2302      	movs	r3, #2
  }
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3710      	adds	r7, #16
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
	...

080067ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067f0:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067fa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006806:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800680a:	68d9      	ldr	r1, [r3, #12]
 800680c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	ea40 0301 	orr.w	r3, r0, r1
 8006816:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006818:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800681c:	689a      	ldr	r2, [r3, #8]
 800681e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	431a      	orrs	r2, r3
 8006826:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800682a:	695b      	ldr	r3, [r3, #20]
 800682c:	431a      	orrs	r2, r3
 800682e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006832:	69db      	ldr	r3, [r3, #28]
 8006834:	4313      	orrs	r3, r2
 8006836:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 800683a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006846:	f021 010c 	bic.w	r1, r1, #12
 800684a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8006854:	430b      	orrs	r3, r1
 8006856:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006858:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	695b      	ldr	r3, [r3, #20]
 8006860:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006864:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006868:	6999      	ldr	r1, [r3, #24]
 800686a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	ea40 0301 	orr.w	r3, r0, r1
 8006874:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006876:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800687a:	69db      	ldr	r3, [r3, #28]
 800687c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006880:	f040 824a 	bne.w	8006d18 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006884:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	4b96      	ldr	r3, [pc, #600]	; (8006ae4 <UART_SetConfig+0x2f8>)
 800688c:	429a      	cmp	r2, r3
 800688e:	d006      	beq.n	800689e <UART_SetConfig+0xb2>
 8006890:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	4b94      	ldr	r3, [pc, #592]	; (8006ae8 <UART_SetConfig+0x2fc>)
 8006898:	429a      	cmp	r2, r3
 800689a:	f040 8129 	bne.w	8006af0 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800689e:	f7fe fc2b 	bl	80050f8 <HAL_RCC_GetPCLK2Freq>
 80068a2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80068a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80068aa:	2200      	movs	r2, #0
 80068ac:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 80068b0:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 80068b4:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 80068b8:	4622      	mov	r2, r4
 80068ba:	462b      	mov	r3, r5
 80068bc:	1891      	adds	r1, r2, r2
 80068be:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80068c2:	415b      	adcs	r3, r3
 80068c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80068c8:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80068cc:	4621      	mov	r1, r4
 80068ce:	1851      	adds	r1, r2, r1
 80068d0:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 80068d4:	4629      	mov	r1, r5
 80068d6:	414b      	adcs	r3, r1
 80068d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80068dc:	f04f 0200 	mov.w	r2, #0
 80068e0:	f04f 0300 	mov.w	r3, #0
 80068e4:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 80068e8:	4649      	mov	r1, r9
 80068ea:	00cb      	lsls	r3, r1, #3
 80068ec:	4641      	mov	r1, r8
 80068ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068f2:	4641      	mov	r1, r8
 80068f4:	00ca      	lsls	r2, r1, #3
 80068f6:	4610      	mov	r0, r2
 80068f8:	4619      	mov	r1, r3
 80068fa:	4603      	mov	r3, r0
 80068fc:	4622      	mov	r2, r4
 80068fe:	189b      	adds	r3, r3, r2
 8006900:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8006904:	462b      	mov	r3, r5
 8006906:	460a      	mov	r2, r1
 8006908:	eb42 0303 	adc.w	r3, r2, r3
 800690c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8006910:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800691c:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8006920:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 8006924:	460b      	mov	r3, r1
 8006926:	18db      	adds	r3, r3, r3
 8006928:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800692c:	4613      	mov	r3, r2
 800692e:	eb42 0303 	adc.w	r3, r2, r3
 8006932:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006936:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800693a:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 800693e:	f7f9 fca7 	bl	8000290 <__aeabi_uldivmod>
 8006942:	4602      	mov	r2, r0
 8006944:	460b      	mov	r3, r1
 8006946:	4b69      	ldr	r3, [pc, #420]	; (8006aec <UART_SetConfig+0x300>)
 8006948:	fba3 2302 	umull	r2, r3, r3, r2
 800694c:	095b      	lsrs	r3, r3, #5
 800694e:	011c      	lsls	r4, r3, #4
 8006950:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006954:	2200      	movs	r2, #0
 8006956:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 800695a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800695e:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 8006962:	4642      	mov	r2, r8
 8006964:	464b      	mov	r3, r9
 8006966:	1891      	adds	r1, r2, r2
 8006968:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800696c:	415b      	adcs	r3, r3
 800696e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006972:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006976:	4641      	mov	r1, r8
 8006978:	1851      	adds	r1, r2, r1
 800697a:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 800697e:	4649      	mov	r1, r9
 8006980:	414b      	adcs	r3, r1
 8006982:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006986:	f04f 0200 	mov.w	r2, #0
 800698a:	f04f 0300 	mov.w	r3, #0
 800698e:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 8006992:	4659      	mov	r1, fp
 8006994:	00cb      	lsls	r3, r1, #3
 8006996:	4651      	mov	r1, sl
 8006998:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800699c:	4651      	mov	r1, sl
 800699e:	00ca      	lsls	r2, r1, #3
 80069a0:	4610      	mov	r0, r2
 80069a2:	4619      	mov	r1, r3
 80069a4:	4603      	mov	r3, r0
 80069a6:	4642      	mov	r2, r8
 80069a8:	189b      	adds	r3, r3, r2
 80069aa:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80069ae:	464b      	mov	r3, r9
 80069b0:	460a      	mov	r2, r1
 80069b2:	eb42 0303 	adc.w	r3, r2, r3
 80069b6:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 80069ba:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80069c6:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 80069ca:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 80069ce:	460b      	mov	r3, r1
 80069d0:	18db      	adds	r3, r3, r3
 80069d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80069d6:	4613      	mov	r3, r2
 80069d8:	eb42 0303 	adc.w	r3, r2, r3
 80069dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80069e0:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80069e4:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 80069e8:	f7f9 fc52 	bl	8000290 <__aeabi_uldivmod>
 80069ec:	4602      	mov	r2, r0
 80069ee:	460b      	mov	r3, r1
 80069f0:	4611      	mov	r1, r2
 80069f2:	4b3e      	ldr	r3, [pc, #248]	; (8006aec <UART_SetConfig+0x300>)
 80069f4:	fba3 2301 	umull	r2, r3, r3, r1
 80069f8:	095b      	lsrs	r3, r3, #5
 80069fa:	2264      	movs	r2, #100	; 0x64
 80069fc:	fb02 f303 	mul.w	r3, r2, r3
 8006a00:	1acb      	subs	r3, r1, r3
 8006a02:	00db      	lsls	r3, r3, #3
 8006a04:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006a08:	4b38      	ldr	r3, [pc, #224]	; (8006aec <UART_SetConfig+0x300>)
 8006a0a:	fba3 2302 	umull	r2, r3, r3, r2
 8006a0e:	095b      	lsrs	r3, r3, #5
 8006a10:	005b      	lsls	r3, r3, #1
 8006a12:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006a16:	441c      	add	r4, r3
 8006a18:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8006a22:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8006a26:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 8006a2a:	4642      	mov	r2, r8
 8006a2c:	464b      	mov	r3, r9
 8006a2e:	1891      	adds	r1, r2, r2
 8006a30:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8006a34:	415b      	adcs	r3, r3
 8006a36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006a3a:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8006a3e:	4641      	mov	r1, r8
 8006a40:	1851      	adds	r1, r2, r1
 8006a42:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8006a46:	4649      	mov	r1, r9
 8006a48:	414b      	adcs	r3, r1
 8006a4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006a4e:	f04f 0200 	mov.w	r2, #0
 8006a52:	f04f 0300 	mov.w	r3, #0
 8006a56:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 8006a5a:	4659      	mov	r1, fp
 8006a5c:	00cb      	lsls	r3, r1, #3
 8006a5e:	4651      	mov	r1, sl
 8006a60:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a64:	4651      	mov	r1, sl
 8006a66:	00ca      	lsls	r2, r1, #3
 8006a68:	4610      	mov	r0, r2
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	4642      	mov	r2, r8
 8006a70:	189b      	adds	r3, r3, r2
 8006a72:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8006a76:	464b      	mov	r3, r9
 8006a78:	460a      	mov	r2, r1
 8006a7a:	eb42 0303 	adc.w	r3, r2, r3
 8006a7e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8006a82:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8006a8e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8006a92:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 8006a96:	460b      	mov	r3, r1
 8006a98:	18db      	adds	r3, r3, r3
 8006a9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	eb42 0303 	adc.w	r3, r2, r3
 8006aa4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006aa8:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8006aac:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8006ab0:	f7f9 fbee 	bl	8000290 <__aeabi_uldivmod>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	4b0c      	ldr	r3, [pc, #48]	; (8006aec <UART_SetConfig+0x300>)
 8006aba:	fba3 1302 	umull	r1, r3, r3, r2
 8006abe:	095b      	lsrs	r3, r3, #5
 8006ac0:	2164      	movs	r1, #100	; 0x64
 8006ac2:	fb01 f303 	mul.w	r3, r1, r3
 8006ac6:	1ad3      	subs	r3, r2, r3
 8006ac8:	00db      	lsls	r3, r3, #3
 8006aca:	3332      	adds	r3, #50	; 0x32
 8006acc:	4a07      	ldr	r2, [pc, #28]	; (8006aec <UART_SetConfig+0x300>)
 8006ace:	fba2 2303 	umull	r2, r3, r2, r3
 8006ad2:	095b      	lsrs	r3, r3, #5
 8006ad4:	f003 0207 	and.w	r2, r3, #7
 8006ad8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4422      	add	r2, r4
 8006ae0:	609a      	str	r2, [r3, #8]
 8006ae2:	e349      	b.n	8007178 <UART_SetConfig+0x98c>
 8006ae4:	40011000 	.word	0x40011000
 8006ae8:	40011400 	.word	0x40011400
 8006aec:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006af0:	f7fe faee 	bl	80050d0 <HAL_RCC_GetPCLK1Freq>
 8006af4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006af8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006afc:	2200      	movs	r2, #0
 8006afe:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8006b02:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8006b06:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8006b0a:	4622      	mov	r2, r4
 8006b0c:	462b      	mov	r3, r5
 8006b0e:	1891      	adds	r1, r2, r2
 8006b10:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8006b14:	415b      	adcs	r3, r3
 8006b16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006b1a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006b1e:	4621      	mov	r1, r4
 8006b20:	eb12 0a01 	adds.w	sl, r2, r1
 8006b24:	4629      	mov	r1, r5
 8006b26:	eb43 0b01 	adc.w	fp, r3, r1
 8006b2a:	f04f 0200 	mov.w	r2, #0
 8006b2e:	f04f 0300 	mov.w	r3, #0
 8006b32:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006b36:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006b3a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b3e:	4692      	mov	sl, r2
 8006b40:	469b      	mov	fp, r3
 8006b42:	4623      	mov	r3, r4
 8006b44:	eb1a 0303 	adds.w	r3, sl, r3
 8006b48:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8006b4c:	462b      	mov	r3, r5
 8006b4e:	eb4b 0303 	adc.w	r3, fp, r3
 8006b52:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8006b56:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8006b62:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8006b66:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	18db      	adds	r3, r3, r3
 8006b6e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b72:	4613      	mov	r3, r2
 8006b74:	eb42 0303 	adc.w	r3, r2, r3
 8006b78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006b7c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8006b80:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8006b84:	f7f9 fb84 	bl	8000290 <__aeabi_uldivmod>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	4b61      	ldr	r3, [pc, #388]	; (8006d14 <UART_SetConfig+0x528>)
 8006b8e:	fba3 2302 	umull	r2, r3, r3, r2
 8006b92:	095b      	lsrs	r3, r3, #5
 8006b94:	011c      	lsls	r4, r3, #4
 8006b96:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8006ba0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8006ba4:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8006ba8:	4642      	mov	r2, r8
 8006baa:	464b      	mov	r3, r9
 8006bac:	1891      	adds	r1, r2, r2
 8006bae:	67b9      	str	r1, [r7, #120]	; 0x78
 8006bb0:	415b      	adcs	r3, r3
 8006bb2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006bb4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8006bb8:	4641      	mov	r1, r8
 8006bba:	1851      	adds	r1, r2, r1
 8006bbc:	6739      	str	r1, [r7, #112]	; 0x70
 8006bbe:	4649      	mov	r1, r9
 8006bc0:	414b      	adcs	r3, r1
 8006bc2:	677b      	str	r3, [r7, #116]	; 0x74
 8006bc4:	f04f 0200 	mov.w	r2, #0
 8006bc8:	f04f 0300 	mov.w	r3, #0
 8006bcc:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8006bd0:	4659      	mov	r1, fp
 8006bd2:	00cb      	lsls	r3, r1, #3
 8006bd4:	4651      	mov	r1, sl
 8006bd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bda:	4651      	mov	r1, sl
 8006bdc:	00ca      	lsls	r2, r1, #3
 8006bde:	4610      	mov	r0, r2
 8006be0:	4619      	mov	r1, r3
 8006be2:	4603      	mov	r3, r0
 8006be4:	4642      	mov	r2, r8
 8006be6:	189b      	adds	r3, r3, r2
 8006be8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8006bec:	464b      	mov	r3, r9
 8006bee:	460a      	mov	r2, r1
 8006bf0:	eb42 0303 	adc.w	r3, r2, r3
 8006bf4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8006bf8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8006c04:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8006c08:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8006c0c:	460b      	mov	r3, r1
 8006c0e:	18db      	adds	r3, r3, r3
 8006c10:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c12:	4613      	mov	r3, r2
 8006c14:	eb42 0303 	adc.w	r3, r2, r3
 8006c18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c1a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8006c1e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8006c22:	f7f9 fb35 	bl	8000290 <__aeabi_uldivmod>
 8006c26:	4602      	mov	r2, r0
 8006c28:	460b      	mov	r3, r1
 8006c2a:	4611      	mov	r1, r2
 8006c2c:	4b39      	ldr	r3, [pc, #228]	; (8006d14 <UART_SetConfig+0x528>)
 8006c2e:	fba3 2301 	umull	r2, r3, r3, r1
 8006c32:	095b      	lsrs	r3, r3, #5
 8006c34:	2264      	movs	r2, #100	; 0x64
 8006c36:	fb02 f303 	mul.w	r3, r2, r3
 8006c3a:	1acb      	subs	r3, r1, r3
 8006c3c:	00db      	lsls	r3, r3, #3
 8006c3e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006c42:	4b34      	ldr	r3, [pc, #208]	; (8006d14 <UART_SetConfig+0x528>)
 8006c44:	fba3 2302 	umull	r2, r3, r3, r2
 8006c48:	095b      	lsrs	r3, r3, #5
 8006c4a:	005b      	lsls	r3, r3, #1
 8006c4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006c50:	441c      	add	r4, r3
 8006c52:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006c56:	2200      	movs	r2, #0
 8006c58:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8006c5c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8006c60:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8006c64:	4642      	mov	r2, r8
 8006c66:	464b      	mov	r3, r9
 8006c68:	1891      	adds	r1, r2, r2
 8006c6a:	6639      	str	r1, [r7, #96]	; 0x60
 8006c6c:	415b      	adcs	r3, r3
 8006c6e:	667b      	str	r3, [r7, #100]	; 0x64
 8006c70:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8006c74:	4641      	mov	r1, r8
 8006c76:	1851      	adds	r1, r2, r1
 8006c78:	65b9      	str	r1, [r7, #88]	; 0x58
 8006c7a:	4649      	mov	r1, r9
 8006c7c:	414b      	adcs	r3, r1
 8006c7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c80:	f04f 0200 	mov.w	r2, #0
 8006c84:	f04f 0300 	mov.w	r3, #0
 8006c88:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8006c8c:	4659      	mov	r1, fp
 8006c8e:	00cb      	lsls	r3, r1, #3
 8006c90:	4651      	mov	r1, sl
 8006c92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c96:	4651      	mov	r1, sl
 8006c98:	00ca      	lsls	r2, r1, #3
 8006c9a:	4610      	mov	r0, r2
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	4642      	mov	r2, r8
 8006ca2:	189b      	adds	r3, r3, r2
 8006ca4:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8006ca8:	464b      	mov	r3, r9
 8006caa:	460a      	mov	r2, r1
 8006cac:	eb42 0303 	adc.w	r3, r2, r3
 8006cb0:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8006cb4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8006cc0:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8006cc4:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8006cc8:	460b      	mov	r3, r1
 8006cca:	18db      	adds	r3, r3, r3
 8006ccc:	653b      	str	r3, [r7, #80]	; 0x50
 8006cce:	4613      	mov	r3, r2
 8006cd0:	eb42 0303 	adc.w	r3, r2, r3
 8006cd4:	657b      	str	r3, [r7, #84]	; 0x54
 8006cd6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006cda:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8006cde:	f7f9 fad7 	bl	8000290 <__aeabi_uldivmod>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	4b0b      	ldr	r3, [pc, #44]	; (8006d14 <UART_SetConfig+0x528>)
 8006ce8:	fba3 1302 	umull	r1, r3, r3, r2
 8006cec:	095b      	lsrs	r3, r3, #5
 8006cee:	2164      	movs	r1, #100	; 0x64
 8006cf0:	fb01 f303 	mul.w	r3, r1, r3
 8006cf4:	1ad3      	subs	r3, r2, r3
 8006cf6:	00db      	lsls	r3, r3, #3
 8006cf8:	3332      	adds	r3, #50	; 0x32
 8006cfa:	4a06      	ldr	r2, [pc, #24]	; (8006d14 <UART_SetConfig+0x528>)
 8006cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8006d00:	095b      	lsrs	r3, r3, #5
 8006d02:	f003 0207 	and.w	r2, r3, #7
 8006d06:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4422      	add	r2, r4
 8006d0e:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006d10:	e232      	b.n	8007178 <UART_SetConfig+0x98c>
 8006d12:	bf00      	nop
 8006d14:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d18:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	4b8d      	ldr	r3, [pc, #564]	; (8006f54 <UART_SetConfig+0x768>)
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d006      	beq.n	8006d32 <UART_SetConfig+0x546>
 8006d24:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	4b8b      	ldr	r3, [pc, #556]	; (8006f58 <UART_SetConfig+0x76c>)
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	f040 8117 	bne.w	8006f60 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006d32:	f7fe f9e1 	bl	80050f8 <HAL_RCC_GetPCLK2Freq>
 8006d36:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d3a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8006d44:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8006d48:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8006d4c:	4622      	mov	r2, r4
 8006d4e:	462b      	mov	r3, r5
 8006d50:	1891      	adds	r1, r2, r2
 8006d52:	64b9      	str	r1, [r7, #72]	; 0x48
 8006d54:	415b      	adcs	r3, r3
 8006d56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006d5c:	4621      	mov	r1, r4
 8006d5e:	eb12 0801 	adds.w	r8, r2, r1
 8006d62:	4629      	mov	r1, r5
 8006d64:	eb43 0901 	adc.w	r9, r3, r1
 8006d68:	f04f 0200 	mov.w	r2, #0
 8006d6c:	f04f 0300 	mov.w	r3, #0
 8006d70:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d74:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d78:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d7c:	4690      	mov	r8, r2
 8006d7e:	4699      	mov	r9, r3
 8006d80:	4623      	mov	r3, r4
 8006d82:	eb18 0303 	adds.w	r3, r8, r3
 8006d86:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8006d8a:	462b      	mov	r3, r5
 8006d8c:	eb49 0303 	adc.w	r3, r9, r3
 8006d90:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8006d94:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8006da0:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8006da4:	f04f 0200 	mov.w	r2, #0
 8006da8:	f04f 0300 	mov.w	r3, #0
 8006dac:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8006db0:	4629      	mov	r1, r5
 8006db2:	008b      	lsls	r3, r1, #2
 8006db4:	4621      	mov	r1, r4
 8006db6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006dba:	4621      	mov	r1, r4
 8006dbc:	008a      	lsls	r2, r1, #2
 8006dbe:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8006dc2:	f7f9 fa65 	bl	8000290 <__aeabi_uldivmod>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	460b      	mov	r3, r1
 8006dca:	4b64      	ldr	r3, [pc, #400]	; (8006f5c <UART_SetConfig+0x770>)
 8006dcc:	fba3 2302 	umull	r2, r3, r3, r2
 8006dd0:	095b      	lsrs	r3, r3, #5
 8006dd2:	011c      	lsls	r4, r3, #4
 8006dd4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8006dde:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8006de2:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 8006de6:	4642      	mov	r2, r8
 8006de8:	464b      	mov	r3, r9
 8006dea:	1891      	adds	r1, r2, r2
 8006dec:	6439      	str	r1, [r7, #64]	; 0x40
 8006dee:	415b      	adcs	r3, r3
 8006df0:	647b      	str	r3, [r7, #68]	; 0x44
 8006df2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006df6:	4641      	mov	r1, r8
 8006df8:	1851      	adds	r1, r2, r1
 8006dfa:	63b9      	str	r1, [r7, #56]	; 0x38
 8006dfc:	4649      	mov	r1, r9
 8006dfe:	414b      	adcs	r3, r1
 8006e00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e02:	f04f 0200 	mov.w	r2, #0
 8006e06:	f04f 0300 	mov.w	r3, #0
 8006e0a:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8006e0e:	4659      	mov	r1, fp
 8006e10:	00cb      	lsls	r3, r1, #3
 8006e12:	4651      	mov	r1, sl
 8006e14:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e18:	4651      	mov	r1, sl
 8006e1a:	00ca      	lsls	r2, r1, #3
 8006e1c:	4610      	mov	r0, r2
 8006e1e:	4619      	mov	r1, r3
 8006e20:	4603      	mov	r3, r0
 8006e22:	4642      	mov	r2, r8
 8006e24:	189b      	adds	r3, r3, r2
 8006e26:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8006e2a:	464b      	mov	r3, r9
 8006e2c:	460a      	mov	r2, r1
 8006e2e:	eb42 0303 	adc.w	r3, r2, r3
 8006e32:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8006e36:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8006e42:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8006e46:	f04f 0200 	mov.w	r2, #0
 8006e4a:	f04f 0300 	mov.w	r3, #0
 8006e4e:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8006e52:	4649      	mov	r1, r9
 8006e54:	008b      	lsls	r3, r1, #2
 8006e56:	4641      	mov	r1, r8
 8006e58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e5c:	4641      	mov	r1, r8
 8006e5e:	008a      	lsls	r2, r1, #2
 8006e60:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8006e64:	f7f9 fa14 	bl	8000290 <__aeabi_uldivmod>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	4b3b      	ldr	r3, [pc, #236]	; (8006f5c <UART_SetConfig+0x770>)
 8006e6e:	fba3 1302 	umull	r1, r3, r3, r2
 8006e72:	095b      	lsrs	r3, r3, #5
 8006e74:	2164      	movs	r1, #100	; 0x64
 8006e76:	fb01 f303 	mul.w	r3, r1, r3
 8006e7a:	1ad3      	subs	r3, r2, r3
 8006e7c:	011b      	lsls	r3, r3, #4
 8006e7e:	3332      	adds	r3, #50	; 0x32
 8006e80:	4a36      	ldr	r2, [pc, #216]	; (8006f5c <UART_SetConfig+0x770>)
 8006e82:	fba2 2303 	umull	r2, r3, r2, r3
 8006e86:	095b      	lsrs	r3, r3, #5
 8006e88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e8c:	441c      	add	r4, r3
 8006e8e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006e92:	2200      	movs	r2, #0
 8006e94:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8006e98:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8006e9c:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8006ea0:	4642      	mov	r2, r8
 8006ea2:	464b      	mov	r3, r9
 8006ea4:	1891      	adds	r1, r2, r2
 8006ea6:	6339      	str	r1, [r7, #48]	; 0x30
 8006ea8:	415b      	adcs	r3, r3
 8006eaa:	637b      	str	r3, [r7, #52]	; 0x34
 8006eac:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006eb0:	4641      	mov	r1, r8
 8006eb2:	1851      	adds	r1, r2, r1
 8006eb4:	62b9      	str	r1, [r7, #40]	; 0x28
 8006eb6:	4649      	mov	r1, r9
 8006eb8:	414b      	adcs	r3, r1
 8006eba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ebc:	f04f 0200 	mov.w	r2, #0
 8006ec0:	f04f 0300 	mov.w	r3, #0
 8006ec4:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8006ec8:	4659      	mov	r1, fp
 8006eca:	00cb      	lsls	r3, r1, #3
 8006ecc:	4651      	mov	r1, sl
 8006ece:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ed2:	4651      	mov	r1, sl
 8006ed4:	00ca      	lsls	r2, r1, #3
 8006ed6:	4610      	mov	r0, r2
 8006ed8:	4619      	mov	r1, r3
 8006eda:	4603      	mov	r3, r0
 8006edc:	4642      	mov	r2, r8
 8006ede:	189b      	adds	r3, r3, r2
 8006ee0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006ee4:	464b      	mov	r3, r9
 8006ee6:	460a      	mov	r2, r1
 8006ee8:	eb42 0303 	adc.w	r3, r2, r3
 8006eec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006ef0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006efc:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8006f00:	f04f 0200 	mov.w	r2, #0
 8006f04:	f04f 0300 	mov.w	r3, #0
 8006f08:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 8006f0c:	4649      	mov	r1, r9
 8006f0e:	008b      	lsls	r3, r1, #2
 8006f10:	4641      	mov	r1, r8
 8006f12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f16:	4641      	mov	r1, r8
 8006f18:	008a      	lsls	r2, r1, #2
 8006f1a:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8006f1e:	f7f9 f9b7 	bl	8000290 <__aeabi_uldivmod>
 8006f22:	4602      	mov	r2, r0
 8006f24:	460b      	mov	r3, r1
 8006f26:	4b0d      	ldr	r3, [pc, #52]	; (8006f5c <UART_SetConfig+0x770>)
 8006f28:	fba3 1302 	umull	r1, r3, r3, r2
 8006f2c:	095b      	lsrs	r3, r3, #5
 8006f2e:	2164      	movs	r1, #100	; 0x64
 8006f30:	fb01 f303 	mul.w	r3, r1, r3
 8006f34:	1ad3      	subs	r3, r2, r3
 8006f36:	011b      	lsls	r3, r3, #4
 8006f38:	3332      	adds	r3, #50	; 0x32
 8006f3a:	4a08      	ldr	r2, [pc, #32]	; (8006f5c <UART_SetConfig+0x770>)
 8006f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f40:	095b      	lsrs	r3, r3, #5
 8006f42:	f003 020f 	and.w	r2, r3, #15
 8006f46:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4422      	add	r2, r4
 8006f4e:	609a      	str	r2, [r3, #8]
 8006f50:	e112      	b.n	8007178 <UART_SetConfig+0x98c>
 8006f52:	bf00      	nop
 8006f54:	40011000 	.word	0x40011000
 8006f58:	40011400 	.word	0x40011400
 8006f5c:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8006f60:	f7fe f8b6 	bl	80050d0 <HAL_RCC_GetPCLK1Freq>
 8006f64:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f68:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006f72:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8006f76:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8006f7a:	4642      	mov	r2, r8
 8006f7c:	464b      	mov	r3, r9
 8006f7e:	1891      	adds	r1, r2, r2
 8006f80:	6239      	str	r1, [r7, #32]
 8006f82:	415b      	adcs	r3, r3
 8006f84:	627b      	str	r3, [r7, #36]	; 0x24
 8006f86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006f8a:	4641      	mov	r1, r8
 8006f8c:	1854      	adds	r4, r2, r1
 8006f8e:	4649      	mov	r1, r9
 8006f90:	eb43 0501 	adc.w	r5, r3, r1
 8006f94:	f04f 0200 	mov.w	r2, #0
 8006f98:	f04f 0300 	mov.w	r3, #0
 8006f9c:	00eb      	lsls	r3, r5, #3
 8006f9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006fa2:	00e2      	lsls	r2, r4, #3
 8006fa4:	4614      	mov	r4, r2
 8006fa6:	461d      	mov	r5, r3
 8006fa8:	4643      	mov	r3, r8
 8006faa:	18e3      	adds	r3, r4, r3
 8006fac:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006fb0:	464b      	mov	r3, r9
 8006fb2:	eb45 0303 	adc.w	r3, r5, r3
 8006fb6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006fba:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006fc6:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8006fca:	f04f 0200 	mov.w	r2, #0
 8006fce:	f04f 0300 	mov.w	r3, #0
 8006fd2:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8006fd6:	4629      	mov	r1, r5
 8006fd8:	008b      	lsls	r3, r1, #2
 8006fda:	4621      	mov	r1, r4
 8006fdc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fe0:	4621      	mov	r1, r4
 8006fe2:	008a      	lsls	r2, r1, #2
 8006fe4:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8006fe8:	f7f9 f952 	bl	8000290 <__aeabi_uldivmod>
 8006fec:	4602      	mov	r2, r0
 8006fee:	460b      	mov	r3, r1
 8006ff0:	4b64      	ldr	r3, [pc, #400]	; (8007184 <UART_SetConfig+0x998>)
 8006ff2:	fba3 2302 	umull	r2, r3, r3, r2
 8006ff6:	095b      	lsrs	r3, r3, #5
 8006ff8:	011c      	lsls	r4, r3, #4
 8006ffa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006ffe:	2200      	movs	r2, #0
 8007000:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007004:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8007008:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 800700c:	4642      	mov	r2, r8
 800700e:	464b      	mov	r3, r9
 8007010:	1891      	adds	r1, r2, r2
 8007012:	61b9      	str	r1, [r7, #24]
 8007014:	415b      	adcs	r3, r3
 8007016:	61fb      	str	r3, [r7, #28]
 8007018:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800701c:	4641      	mov	r1, r8
 800701e:	1851      	adds	r1, r2, r1
 8007020:	6139      	str	r1, [r7, #16]
 8007022:	4649      	mov	r1, r9
 8007024:	414b      	adcs	r3, r1
 8007026:	617b      	str	r3, [r7, #20]
 8007028:	f04f 0200 	mov.w	r2, #0
 800702c:	f04f 0300 	mov.w	r3, #0
 8007030:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007034:	4659      	mov	r1, fp
 8007036:	00cb      	lsls	r3, r1, #3
 8007038:	4651      	mov	r1, sl
 800703a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800703e:	4651      	mov	r1, sl
 8007040:	00ca      	lsls	r2, r1, #3
 8007042:	4610      	mov	r0, r2
 8007044:	4619      	mov	r1, r3
 8007046:	4603      	mov	r3, r0
 8007048:	4642      	mov	r2, r8
 800704a:	189b      	adds	r3, r3, r2
 800704c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007050:	464b      	mov	r3, r9
 8007052:	460a      	mov	r2, r1
 8007054:	eb42 0303 	adc.w	r3, r2, r3
 8007058:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800705c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007068:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800706c:	f04f 0200 	mov.w	r2, #0
 8007070:	f04f 0300 	mov.w	r3, #0
 8007074:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8007078:	4649      	mov	r1, r9
 800707a:	008b      	lsls	r3, r1, #2
 800707c:	4641      	mov	r1, r8
 800707e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007082:	4641      	mov	r1, r8
 8007084:	008a      	lsls	r2, r1, #2
 8007086:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800708a:	f7f9 f901 	bl	8000290 <__aeabi_uldivmod>
 800708e:	4602      	mov	r2, r0
 8007090:	460b      	mov	r3, r1
 8007092:	4b3c      	ldr	r3, [pc, #240]	; (8007184 <UART_SetConfig+0x998>)
 8007094:	fba3 1302 	umull	r1, r3, r3, r2
 8007098:	095b      	lsrs	r3, r3, #5
 800709a:	2164      	movs	r1, #100	; 0x64
 800709c:	fb01 f303 	mul.w	r3, r1, r3
 80070a0:	1ad3      	subs	r3, r2, r3
 80070a2:	011b      	lsls	r3, r3, #4
 80070a4:	3332      	adds	r3, #50	; 0x32
 80070a6:	4a37      	ldr	r2, [pc, #220]	; (8007184 <UART_SetConfig+0x998>)
 80070a8:	fba2 2303 	umull	r2, r3, r2, r3
 80070ac:	095b      	lsrs	r3, r3, #5
 80070ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80070b2:	441c      	add	r4, r3
 80070b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80070b8:	2200      	movs	r2, #0
 80070ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80070be:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80070c2:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80070c6:	4642      	mov	r2, r8
 80070c8:	464b      	mov	r3, r9
 80070ca:	1891      	adds	r1, r2, r2
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	415b      	adcs	r3, r3
 80070d0:	60fb      	str	r3, [r7, #12]
 80070d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80070d6:	4641      	mov	r1, r8
 80070d8:	1851      	adds	r1, r2, r1
 80070da:	6039      	str	r1, [r7, #0]
 80070dc:	4649      	mov	r1, r9
 80070de:	414b      	adcs	r3, r1
 80070e0:	607b      	str	r3, [r7, #4]
 80070e2:	f04f 0200 	mov.w	r2, #0
 80070e6:	f04f 0300 	mov.w	r3, #0
 80070ea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80070ee:	4659      	mov	r1, fp
 80070f0:	00cb      	lsls	r3, r1, #3
 80070f2:	4651      	mov	r1, sl
 80070f4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070f8:	4651      	mov	r1, sl
 80070fa:	00ca      	lsls	r2, r1, #3
 80070fc:	4610      	mov	r0, r2
 80070fe:	4619      	mov	r1, r3
 8007100:	4603      	mov	r3, r0
 8007102:	4642      	mov	r2, r8
 8007104:	189b      	adds	r3, r3, r2
 8007106:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800710a:	464b      	mov	r3, r9
 800710c:	460a      	mov	r2, r1
 800710e:	eb42 0303 	adc.w	r3, r2, r3
 8007112:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007116:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007122:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007126:	f04f 0200 	mov.w	r2, #0
 800712a:	f04f 0300 	mov.w	r3, #0
 800712e:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8007132:	4649      	mov	r1, r9
 8007134:	008b      	lsls	r3, r1, #2
 8007136:	4641      	mov	r1, r8
 8007138:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800713c:	4641      	mov	r1, r8
 800713e:	008a      	lsls	r2, r1, #2
 8007140:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007144:	f7f9 f8a4 	bl	8000290 <__aeabi_uldivmod>
 8007148:	4602      	mov	r2, r0
 800714a:	460b      	mov	r3, r1
 800714c:	4b0d      	ldr	r3, [pc, #52]	; (8007184 <UART_SetConfig+0x998>)
 800714e:	fba3 1302 	umull	r1, r3, r3, r2
 8007152:	095b      	lsrs	r3, r3, #5
 8007154:	2164      	movs	r1, #100	; 0x64
 8007156:	fb01 f303 	mul.w	r3, r1, r3
 800715a:	1ad3      	subs	r3, r2, r3
 800715c:	011b      	lsls	r3, r3, #4
 800715e:	3332      	adds	r3, #50	; 0x32
 8007160:	4a08      	ldr	r2, [pc, #32]	; (8007184 <UART_SetConfig+0x998>)
 8007162:	fba2 2303 	umull	r2, r3, r2, r3
 8007166:	095b      	lsrs	r3, r3, #5
 8007168:	f003 020f 	and.w	r2, r3, #15
 800716c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4422      	add	r2, r4
 8007174:	609a      	str	r2, [r3, #8]
}
 8007176:	e7ff      	b.n	8007178 <UART_SetConfig+0x98c>
 8007178:	bf00      	nop
 800717a:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800717e:	46bd      	mov	sp, r7
 8007180:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007184:	51eb851f 	.word	0x51eb851f

08007188 <atoi>:
 8007188:	220a      	movs	r2, #10
 800718a:	2100      	movs	r1, #0
 800718c:	f000 b8d4 	b.w	8007338 <strtol>

08007190 <__errno>:
 8007190:	4b01      	ldr	r3, [pc, #4]	; (8007198 <__errno+0x8>)
 8007192:	6818      	ldr	r0, [r3, #0]
 8007194:	4770      	bx	lr
 8007196:	bf00      	nop
 8007198:	200000b4 	.word	0x200000b4

0800719c <__libc_init_array>:
 800719c:	b570      	push	{r4, r5, r6, lr}
 800719e:	4d0d      	ldr	r5, [pc, #52]	; (80071d4 <__libc_init_array+0x38>)
 80071a0:	4c0d      	ldr	r4, [pc, #52]	; (80071d8 <__libc_init_array+0x3c>)
 80071a2:	1b64      	subs	r4, r4, r5
 80071a4:	10a4      	asrs	r4, r4, #2
 80071a6:	2600      	movs	r6, #0
 80071a8:	42a6      	cmp	r6, r4
 80071aa:	d109      	bne.n	80071c0 <__libc_init_array+0x24>
 80071ac:	4d0b      	ldr	r5, [pc, #44]	; (80071dc <__libc_init_array+0x40>)
 80071ae:	4c0c      	ldr	r4, [pc, #48]	; (80071e0 <__libc_init_array+0x44>)
 80071b0:	f001 f842 	bl	8008238 <_init>
 80071b4:	1b64      	subs	r4, r4, r5
 80071b6:	10a4      	asrs	r4, r4, #2
 80071b8:	2600      	movs	r6, #0
 80071ba:	42a6      	cmp	r6, r4
 80071bc:	d105      	bne.n	80071ca <__libc_init_array+0x2e>
 80071be:	bd70      	pop	{r4, r5, r6, pc}
 80071c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80071c4:	4798      	blx	r3
 80071c6:	3601      	adds	r6, #1
 80071c8:	e7ee      	b.n	80071a8 <__libc_init_array+0xc>
 80071ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80071ce:	4798      	blx	r3
 80071d0:	3601      	adds	r6, #1
 80071d2:	e7f2      	b.n	80071ba <__libc_init_array+0x1e>
 80071d4:	0800d440 	.word	0x0800d440
 80071d8:	0800d440 	.word	0x0800d440
 80071dc:	0800d440 	.word	0x0800d440
 80071e0:	0800d444 	.word	0x0800d444

080071e4 <memset>:
 80071e4:	4402      	add	r2, r0
 80071e6:	4603      	mov	r3, r0
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d100      	bne.n	80071ee <memset+0xa>
 80071ec:	4770      	bx	lr
 80071ee:	f803 1b01 	strb.w	r1, [r3], #1
 80071f2:	e7f9      	b.n	80071e8 <memset+0x4>

080071f4 <iprintf>:
 80071f4:	b40f      	push	{r0, r1, r2, r3}
 80071f6:	4b0a      	ldr	r3, [pc, #40]	; (8007220 <iprintf+0x2c>)
 80071f8:	b513      	push	{r0, r1, r4, lr}
 80071fa:	681c      	ldr	r4, [r3, #0]
 80071fc:	b124      	cbz	r4, 8007208 <iprintf+0x14>
 80071fe:	69a3      	ldr	r3, [r4, #24]
 8007200:	b913      	cbnz	r3, 8007208 <iprintf+0x14>
 8007202:	4620      	mov	r0, r4
 8007204:	f000 f8fa 	bl	80073fc <__sinit>
 8007208:	ab05      	add	r3, sp, #20
 800720a:	9a04      	ldr	r2, [sp, #16]
 800720c:	68a1      	ldr	r1, [r4, #8]
 800720e:	9301      	str	r3, [sp, #4]
 8007210:	4620      	mov	r0, r4
 8007212:	f000 fa51 	bl	80076b8 <_vfiprintf_r>
 8007216:	b002      	add	sp, #8
 8007218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800721c:	b004      	add	sp, #16
 800721e:	4770      	bx	lr
 8007220:	200000b4 	.word	0x200000b4

08007224 <strcpy>:
 8007224:	4603      	mov	r3, r0
 8007226:	f811 2b01 	ldrb.w	r2, [r1], #1
 800722a:	f803 2b01 	strb.w	r2, [r3], #1
 800722e:	2a00      	cmp	r2, #0
 8007230:	d1f9      	bne.n	8007226 <strcpy+0x2>
 8007232:	4770      	bx	lr

08007234 <_strtol_l.constprop.0>:
 8007234:	2b01      	cmp	r3, #1
 8007236:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800723a:	d001      	beq.n	8007240 <_strtol_l.constprop.0+0xc>
 800723c:	2b24      	cmp	r3, #36	; 0x24
 800723e:	d906      	bls.n	800724e <_strtol_l.constprop.0+0x1a>
 8007240:	f7ff ffa6 	bl	8007190 <__errno>
 8007244:	2316      	movs	r3, #22
 8007246:	6003      	str	r3, [r0, #0]
 8007248:	2000      	movs	r0, #0
 800724a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800724e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007334 <_strtol_l.constprop.0+0x100>
 8007252:	460d      	mov	r5, r1
 8007254:	462e      	mov	r6, r5
 8007256:	f815 4b01 	ldrb.w	r4, [r5], #1
 800725a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800725e:	f017 0708 	ands.w	r7, r7, #8
 8007262:	d1f7      	bne.n	8007254 <_strtol_l.constprop.0+0x20>
 8007264:	2c2d      	cmp	r4, #45	; 0x2d
 8007266:	d132      	bne.n	80072ce <_strtol_l.constprop.0+0x9a>
 8007268:	782c      	ldrb	r4, [r5, #0]
 800726a:	2701      	movs	r7, #1
 800726c:	1cb5      	adds	r5, r6, #2
 800726e:	2b00      	cmp	r3, #0
 8007270:	d05b      	beq.n	800732a <_strtol_l.constprop.0+0xf6>
 8007272:	2b10      	cmp	r3, #16
 8007274:	d109      	bne.n	800728a <_strtol_l.constprop.0+0x56>
 8007276:	2c30      	cmp	r4, #48	; 0x30
 8007278:	d107      	bne.n	800728a <_strtol_l.constprop.0+0x56>
 800727a:	782c      	ldrb	r4, [r5, #0]
 800727c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007280:	2c58      	cmp	r4, #88	; 0x58
 8007282:	d14d      	bne.n	8007320 <_strtol_l.constprop.0+0xec>
 8007284:	786c      	ldrb	r4, [r5, #1]
 8007286:	2310      	movs	r3, #16
 8007288:	3502      	adds	r5, #2
 800728a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800728e:	f108 38ff 	add.w	r8, r8, #4294967295
 8007292:	f04f 0c00 	mov.w	ip, #0
 8007296:	fbb8 f9f3 	udiv	r9, r8, r3
 800729a:	4666      	mov	r6, ip
 800729c:	fb03 8a19 	mls	sl, r3, r9, r8
 80072a0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80072a4:	f1be 0f09 	cmp.w	lr, #9
 80072a8:	d816      	bhi.n	80072d8 <_strtol_l.constprop.0+0xa4>
 80072aa:	4674      	mov	r4, lr
 80072ac:	42a3      	cmp	r3, r4
 80072ae:	dd24      	ble.n	80072fa <_strtol_l.constprop.0+0xc6>
 80072b0:	f1bc 0f00 	cmp.w	ip, #0
 80072b4:	db1e      	blt.n	80072f4 <_strtol_l.constprop.0+0xc0>
 80072b6:	45b1      	cmp	r9, r6
 80072b8:	d31c      	bcc.n	80072f4 <_strtol_l.constprop.0+0xc0>
 80072ba:	d101      	bne.n	80072c0 <_strtol_l.constprop.0+0x8c>
 80072bc:	45a2      	cmp	sl, r4
 80072be:	db19      	blt.n	80072f4 <_strtol_l.constprop.0+0xc0>
 80072c0:	fb06 4603 	mla	r6, r6, r3, r4
 80072c4:	f04f 0c01 	mov.w	ip, #1
 80072c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80072cc:	e7e8      	b.n	80072a0 <_strtol_l.constprop.0+0x6c>
 80072ce:	2c2b      	cmp	r4, #43	; 0x2b
 80072d0:	bf04      	itt	eq
 80072d2:	782c      	ldrbeq	r4, [r5, #0]
 80072d4:	1cb5      	addeq	r5, r6, #2
 80072d6:	e7ca      	b.n	800726e <_strtol_l.constprop.0+0x3a>
 80072d8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80072dc:	f1be 0f19 	cmp.w	lr, #25
 80072e0:	d801      	bhi.n	80072e6 <_strtol_l.constprop.0+0xb2>
 80072e2:	3c37      	subs	r4, #55	; 0x37
 80072e4:	e7e2      	b.n	80072ac <_strtol_l.constprop.0+0x78>
 80072e6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80072ea:	f1be 0f19 	cmp.w	lr, #25
 80072ee:	d804      	bhi.n	80072fa <_strtol_l.constprop.0+0xc6>
 80072f0:	3c57      	subs	r4, #87	; 0x57
 80072f2:	e7db      	b.n	80072ac <_strtol_l.constprop.0+0x78>
 80072f4:	f04f 3cff 	mov.w	ip, #4294967295
 80072f8:	e7e6      	b.n	80072c8 <_strtol_l.constprop.0+0x94>
 80072fa:	f1bc 0f00 	cmp.w	ip, #0
 80072fe:	da05      	bge.n	800730c <_strtol_l.constprop.0+0xd8>
 8007300:	2322      	movs	r3, #34	; 0x22
 8007302:	6003      	str	r3, [r0, #0]
 8007304:	4646      	mov	r6, r8
 8007306:	b942      	cbnz	r2, 800731a <_strtol_l.constprop.0+0xe6>
 8007308:	4630      	mov	r0, r6
 800730a:	e79e      	b.n	800724a <_strtol_l.constprop.0+0x16>
 800730c:	b107      	cbz	r7, 8007310 <_strtol_l.constprop.0+0xdc>
 800730e:	4276      	negs	r6, r6
 8007310:	2a00      	cmp	r2, #0
 8007312:	d0f9      	beq.n	8007308 <_strtol_l.constprop.0+0xd4>
 8007314:	f1bc 0f00 	cmp.w	ip, #0
 8007318:	d000      	beq.n	800731c <_strtol_l.constprop.0+0xe8>
 800731a:	1e69      	subs	r1, r5, #1
 800731c:	6011      	str	r1, [r2, #0]
 800731e:	e7f3      	b.n	8007308 <_strtol_l.constprop.0+0xd4>
 8007320:	2430      	movs	r4, #48	; 0x30
 8007322:	2b00      	cmp	r3, #0
 8007324:	d1b1      	bne.n	800728a <_strtol_l.constprop.0+0x56>
 8007326:	2308      	movs	r3, #8
 8007328:	e7af      	b.n	800728a <_strtol_l.constprop.0+0x56>
 800732a:	2c30      	cmp	r4, #48	; 0x30
 800732c:	d0a5      	beq.n	800727a <_strtol_l.constprop.0+0x46>
 800732e:	230a      	movs	r3, #10
 8007330:	e7ab      	b.n	800728a <_strtol_l.constprop.0+0x56>
 8007332:	bf00      	nop
 8007334:	0800d2a1 	.word	0x0800d2a1

08007338 <strtol>:
 8007338:	4613      	mov	r3, r2
 800733a:	460a      	mov	r2, r1
 800733c:	4601      	mov	r1, r0
 800733e:	4802      	ldr	r0, [pc, #8]	; (8007348 <strtol+0x10>)
 8007340:	6800      	ldr	r0, [r0, #0]
 8007342:	f7ff bf77 	b.w	8007234 <_strtol_l.constprop.0>
 8007346:	bf00      	nop
 8007348:	200000b4 	.word	0x200000b4

0800734c <std>:
 800734c:	2300      	movs	r3, #0
 800734e:	b510      	push	{r4, lr}
 8007350:	4604      	mov	r4, r0
 8007352:	e9c0 3300 	strd	r3, r3, [r0]
 8007356:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800735a:	6083      	str	r3, [r0, #8]
 800735c:	8181      	strh	r1, [r0, #12]
 800735e:	6643      	str	r3, [r0, #100]	; 0x64
 8007360:	81c2      	strh	r2, [r0, #14]
 8007362:	6183      	str	r3, [r0, #24]
 8007364:	4619      	mov	r1, r3
 8007366:	2208      	movs	r2, #8
 8007368:	305c      	adds	r0, #92	; 0x5c
 800736a:	f7ff ff3b 	bl	80071e4 <memset>
 800736e:	4b05      	ldr	r3, [pc, #20]	; (8007384 <std+0x38>)
 8007370:	6263      	str	r3, [r4, #36]	; 0x24
 8007372:	4b05      	ldr	r3, [pc, #20]	; (8007388 <std+0x3c>)
 8007374:	62a3      	str	r3, [r4, #40]	; 0x28
 8007376:	4b05      	ldr	r3, [pc, #20]	; (800738c <std+0x40>)
 8007378:	62e3      	str	r3, [r4, #44]	; 0x2c
 800737a:	4b05      	ldr	r3, [pc, #20]	; (8007390 <std+0x44>)
 800737c:	6224      	str	r4, [r4, #32]
 800737e:	6323      	str	r3, [r4, #48]	; 0x30
 8007380:	bd10      	pop	{r4, pc}
 8007382:	bf00      	nop
 8007384:	08007c61 	.word	0x08007c61
 8007388:	08007c83 	.word	0x08007c83
 800738c:	08007cbb 	.word	0x08007cbb
 8007390:	08007cdf 	.word	0x08007cdf

08007394 <_cleanup_r>:
 8007394:	4901      	ldr	r1, [pc, #4]	; (800739c <_cleanup_r+0x8>)
 8007396:	f000 b8af 	b.w	80074f8 <_fwalk_reent>
 800739a:	bf00      	nop
 800739c:	08007fb9 	.word	0x08007fb9

080073a0 <__sfmoreglue>:
 80073a0:	b570      	push	{r4, r5, r6, lr}
 80073a2:	2268      	movs	r2, #104	; 0x68
 80073a4:	1e4d      	subs	r5, r1, #1
 80073a6:	4355      	muls	r5, r2
 80073a8:	460e      	mov	r6, r1
 80073aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80073ae:	f000 f8e5 	bl	800757c <_malloc_r>
 80073b2:	4604      	mov	r4, r0
 80073b4:	b140      	cbz	r0, 80073c8 <__sfmoreglue+0x28>
 80073b6:	2100      	movs	r1, #0
 80073b8:	e9c0 1600 	strd	r1, r6, [r0]
 80073bc:	300c      	adds	r0, #12
 80073be:	60a0      	str	r0, [r4, #8]
 80073c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80073c4:	f7ff ff0e 	bl	80071e4 <memset>
 80073c8:	4620      	mov	r0, r4
 80073ca:	bd70      	pop	{r4, r5, r6, pc}

080073cc <__sfp_lock_acquire>:
 80073cc:	4801      	ldr	r0, [pc, #4]	; (80073d4 <__sfp_lock_acquire+0x8>)
 80073ce:	f000 b8b3 	b.w	8007538 <__retarget_lock_acquire_recursive>
 80073d2:	bf00      	nop
 80073d4:	20013b31 	.word	0x20013b31

080073d8 <__sfp_lock_release>:
 80073d8:	4801      	ldr	r0, [pc, #4]	; (80073e0 <__sfp_lock_release+0x8>)
 80073da:	f000 b8ae 	b.w	800753a <__retarget_lock_release_recursive>
 80073de:	bf00      	nop
 80073e0:	20013b31 	.word	0x20013b31

080073e4 <__sinit_lock_acquire>:
 80073e4:	4801      	ldr	r0, [pc, #4]	; (80073ec <__sinit_lock_acquire+0x8>)
 80073e6:	f000 b8a7 	b.w	8007538 <__retarget_lock_acquire_recursive>
 80073ea:	bf00      	nop
 80073ec:	20013b32 	.word	0x20013b32

080073f0 <__sinit_lock_release>:
 80073f0:	4801      	ldr	r0, [pc, #4]	; (80073f8 <__sinit_lock_release+0x8>)
 80073f2:	f000 b8a2 	b.w	800753a <__retarget_lock_release_recursive>
 80073f6:	bf00      	nop
 80073f8:	20013b32 	.word	0x20013b32

080073fc <__sinit>:
 80073fc:	b510      	push	{r4, lr}
 80073fe:	4604      	mov	r4, r0
 8007400:	f7ff fff0 	bl	80073e4 <__sinit_lock_acquire>
 8007404:	69a3      	ldr	r3, [r4, #24]
 8007406:	b11b      	cbz	r3, 8007410 <__sinit+0x14>
 8007408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800740c:	f7ff bff0 	b.w	80073f0 <__sinit_lock_release>
 8007410:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007414:	6523      	str	r3, [r4, #80]	; 0x50
 8007416:	4b13      	ldr	r3, [pc, #76]	; (8007464 <__sinit+0x68>)
 8007418:	4a13      	ldr	r2, [pc, #76]	; (8007468 <__sinit+0x6c>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	62a2      	str	r2, [r4, #40]	; 0x28
 800741e:	42a3      	cmp	r3, r4
 8007420:	bf04      	itt	eq
 8007422:	2301      	moveq	r3, #1
 8007424:	61a3      	streq	r3, [r4, #24]
 8007426:	4620      	mov	r0, r4
 8007428:	f000 f820 	bl	800746c <__sfp>
 800742c:	6060      	str	r0, [r4, #4]
 800742e:	4620      	mov	r0, r4
 8007430:	f000 f81c 	bl	800746c <__sfp>
 8007434:	60a0      	str	r0, [r4, #8]
 8007436:	4620      	mov	r0, r4
 8007438:	f000 f818 	bl	800746c <__sfp>
 800743c:	2200      	movs	r2, #0
 800743e:	60e0      	str	r0, [r4, #12]
 8007440:	2104      	movs	r1, #4
 8007442:	6860      	ldr	r0, [r4, #4]
 8007444:	f7ff ff82 	bl	800734c <std>
 8007448:	68a0      	ldr	r0, [r4, #8]
 800744a:	2201      	movs	r2, #1
 800744c:	2109      	movs	r1, #9
 800744e:	f7ff ff7d 	bl	800734c <std>
 8007452:	68e0      	ldr	r0, [r4, #12]
 8007454:	2202      	movs	r2, #2
 8007456:	2112      	movs	r1, #18
 8007458:	f7ff ff78 	bl	800734c <std>
 800745c:	2301      	movs	r3, #1
 800745e:	61a3      	str	r3, [r4, #24]
 8007460:	e7d2      	b.n	8007408 <__sinit+0xc>
 8007462:	bf00      	nop
 8007464:	0800d29c 	.word	0x0800d29c
 8007468:	08007395 	.word	0x08007395

0800746c <__sfp>:
 800746c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800746e:	4607      	mov	r7, r0
 8007470:	f7ff ffac 	bl	80073cc <__sfp_lock_acquire>
 8007474:	4b1e      	ldr	r3, [pc, #120]	; (80074f0 <__sfp+0x84>)
 8007476:	681e      	ldr	r6, [r3, #0]
 8007478:	69b3      	ldr	r3, [r6, #24]
 800747a:	b913      	cbnz	r3, 8007482 <__sfp+0x16>
 800747c:	4630      	mov	r0, r6
 800747e:	f7ff ffbd 	bl	80073fc <__sinit>
 8007482:	3648      	adds	r6, #72	; 0x48
 8007484:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007488:	3b01      	subs	r3, #1
 800748a:	d503      	bpl.n	8007494 <__sfp+0x28>
 800748c:	6833      	ldr	r3, [r6, #0]
 800748e:	b30b      	cbz	r3, 80074d4 <__sfp+0x68>
 8007490:	6836      	ldr	r6, [r6, #0]
 8007492:	e7f7      	b.n	8007484 <__sfp+0x18>
 8007494:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007498:	b9d5      	cbnz	r5, 80074d0 <__sfp+0x64>
 800749a:	4b16      	ldr	r3, [pc, #88]	; (80074f4 <__sfp+0x88>)
 800749c:	60e3      	str	r3, [r4, #12]
 800749e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80074a2:	6665      	str	r5, [r4, #100]	; 0x64
 80074a4:	f000 f847 	bl	8007536 <__retarget_lock_init_recursive>
 80074a8:	f7ff ff96 	bl	80073d8 <__sfp_lock_release>
 80074ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80074b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80074b4:	6025      	str	r5, [r4, #0]
 80074b6:	61a5      	str	r5, [r4, #24]
 80074b8:	2208      	movs	r2, #8
 80074ba:	4629      	mov	r1, r5
 80074bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80074c0:	f7ff fe90 	bl	80071e4 <memset>
 80074c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80074c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80074cc:	4620      	mov	r0, r4
 80074ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074d0:	3468      	adds	r4, #104	; 0x68
 80074d2:	e7d9      	b.n	8007488 <__sfp+0x1c>
 80074d4:	2104      	movs	r1, #4
 80074d6:	4638      	mov	r0, r7
 80074d8:	f7ff ff62 	bl	80073a0 <__sfmoreglue>
 80074dc:	4604      	mov	r4, r0
 80074de:	6030      	str	r0, [r6, #0]
 80074e0:	2800      	cmp	r0, #0
 80074e2:	d1d5      	bne.n	8007490 <__sfp+0x24>
 80074e4:	f7ff ff78 	bl	80073d8 <__sfp_lock_release>
 80074e8:	230c      	movs	r3, #12
 80074ea:	603b      	str	r3, [r7, #0]
 80074ec:	e7ee      	b.n	80074cc <__sfp+0x60>
 80074ee:	bf00      	nop
 80074f0:	0800d29c 	.word	0x0800d29c
 80074f4:	ffff0001 	.word	0xffff0001

080074f8 <_fwalk_reent>:
 80074f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074fc:	4606      	mov	r6, r0
 80074fe:	4688      	mov	r8, r1
 8007500:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007504:	2700      	movs	r7, #0
 8007506:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800750a:	f1b9 0901 	subs.w	r9, r9, #1
 800750e:	d505      	bpl.n	800751c <_fwalk_reent+0x24>
 8007510:	6824      	ldr	r4, [r4, #0]
 8007512:	2c00      	cmp	r4, #0
 8007514:	d1f7      	bne.n	8007506 <_fwalk_reent+0xe>
 8007516:	4638      	mov	r0, r7
 8007518:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800751c:	89ab      	ldrh	r3, [r5, #12]
 800751e:	2b01      	cmp	r3, #1
 8007520:	d907      	bls.n	8007532 <_fwalk_reent+0x3a>
 8007522:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007526:	3301      	adds	r3, #1
 8007528:	d003      	beq.n	8007532 <_fwalk_reent+0x3a>
 800752a:	4629      	mov	r1, r5
 800752c:	4630      	mov	r0, r6
 800752e:	47c0      	blx	r8
 8007530:	4307      	orrs	r7, r0
 8007532:	3568      	adds	r5, #104	; 0x68
 8007534:	e7e9      	b.n	800750a <_fwalk_reent+0x12>

08007536 <__retarget_lock_init_recursive>:
 8007536:	4770      	bx	lr

08007538 <__retarget_lock_acquire_recursive>:
 8007538:	4770      	bx	lr

0800753a <__retarget_lock_release_recursive>:
 800753a:	4770      	bx	lr

0800753c <sbrk_aligned>:
 800753c:	b570      	push	{r4, r5, r6, lr}
 800753e:	4e0e      	ldr	r6, [pc, #56]	; (8007578 <sbrk_aligned+0x3c>)
 8007540:	460c      	mov	r4, r1
 8007542:	6831      	ldr	r1, [r6, #0]
 8007544:	4605      	mov	r5, r0
 8007546:	b911      	cbnz	r1, 800754e <sbrk_aligned+0x12>
 8007548:	f000 fb7a 	bl	8007c40 <_sbrk_r>
 800754c:	6030      	str	r0, [r6, #0]
 800754e:	4621      	mov	r1, r4
 8007550:	4628      	mov	r0, r5
 8007552:	f000 fb75 	bl	8007c40 <_sbrk_r>
 8007556:	1c43      	adds	r3, r0, #1
 8007558:	d00a      	beq.n	8007570 <sbrk_aligned+0x34>
 800755a:	1cc4      	adds	r4, r0, #3
 800755c:	f024 0403 	bic.w	r4, r4, #3
 8007560:	42a0      	cmp	r0, r4
 8007562:	d007      	beq.n	8007574 <sbrk_aligned+0x38>
 8007564:	1a21      	subs	r1, r4, r0
 8007566:	4628      	mov	r0, r5
 8007568:	f000 fb6a 	bl	8007c40 <_sbrk_r>
 800756c:	3001      	adds	r0, #1
 800756e:	d101      	bne.n	8007574 <sbrk_aligned+0x38>
 8007570:	f04f 34ff 	mov.w	r4, #4294967295
 8007574:	4620      	mov	r0, r4
 8007576:	bd70      	pop	{r4, r5, r6, pc}
 8007578:	20013b38 	.word	0x20013b38

0800757c <_malloc_r>:
 800757c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007580:	1ccd      	adds	r5, r1, #3
 8007582:	f025 0503 	bic.w	r5, r5, #3
 8007586:	3508      	adds	r5, #8
 8007588:	2d0c      	cmp	r5, #12
 800758a:	bf38      	it	cc
 800758c:	250c      	movcc	r5, #12
 800758e:	2d00      	cmp	r5, #0
 8007590:	4607      	mov	r7, r0
 8007592:	db01      	blt.n	8007598 <_malloc_r+0x1c>
 8007594:	42a9      	cmp	r1, r5
 8007596:	d905      	bls.n	80075a4 <_malloc_r+0x28>
 8007598:	230c      	movs	r3, #12
 800759a:	603b      	str	r3, [r7, #0]
 800759c:	2600      	movs	r6, #0
 800759e:	4630      	mov	r0, r6
 80075a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075a4:	4e2e      	ldr	r6, [pc, #184]	; (8007660 <_malloc_r+0xe4>)
 80075a6:	f000 fdbb 	bl	8008120 <__malloc_lock>
 80075aa:	6833      	ldr	r3, [r6, #0]
 80075ac:	461c      	mov	r4, r3
 80075ae:	bb34      	cbnz	r4, 80075fe <_malloc_r+0x82>
 80075b0:	4629      	mov	r1, r5
 80075b2:	4638      	mov	r0, r7
 80075b4:	f7ff ffc2 	bl	800753c <sbrk_aligned>
 80075b8:	1c43      	adds	r3, r0, #1
 80075ba:	4604      	mov	r4, r0
 80075bc:	d14d      	bne.n	800765a <_malloc_r+0xde>
 80075be:	6834      	ldr	r4, [r6, #0]
 80075c0:	4626      	mov	r6, r4
 80075c2:	2e00      	cmp	r6, #0
 80075c4:	d140      	bne.n	8007648 <_malloc_r+0xcc>
 80075c6:	6823      	ldr	r3, [r4, #0]
 80075c8:	4631      	mov	r1, r6
 80075ca:	4638      	mov	r0, r7
 80075cc:	eb04 0803 	add.w	r8, r4, r3
 80075d0:	f000 fb36 	bl	8007c40 <_sbrk_r>
 80075d4:	4580      	cmp	r8, r0
 80075d6:	d13a      	bne.n	800764e <_malloc_r+0xd2>
 80075d8:	6821      	ldr	r1, [r4, #0]
 80075da:	3503      	adds	r5, #3
 80075dc:	1a6d      	subs	r5, r5, r1
 80075de:	f025 0503 	bic.w	r5, r5, #3
 80075e2:	3508      	adds	r5, #8
 80075e4:	2d0c      	cmp	r5, #12
 80075e6:	bf38      	it	cc
 80075e8:	250c      	movcc	r5, #12
 80075ea:	4629      	mov	r1, r5
 80075ec:	4638      	mov	r0, r7
 80075ee:	f7ff ffa5 	bl	800753c <sbrk_aligned>
 80075f2:	3001      	adds	r0, #1
 80075f4:	d02b      	beq.n	800764e <_malloc_r+0xd2>
 80075f6:	6823      	ldr	r3, [r4, #0]
 80075f8:	442b      	add	r3, r5
 80075fa:	6023      	str	r3, [r4, #0]
 80075fc:	e00e      	b.n	800761c <_malloc_r+0xa0>
 80075fe:	6822      	ldr	r2, [r4, #0]
 8007600:	1b52      	subs	r2, r2, r5
 8007602:	d41e      	bmi.n	8007642 <_malloc_r+0xc6>
 8007604:	2a0b      	cmp	r2, #11
 8007606:	d916      	bls.n	8007636 <_malloc_r+0xba>
 8007608:	1961      	adds	r1, r4, r5
 800760a:	42a3      	cmp	r3, r4
 800760c:	6025      	str	r5, [r4, #0]
 800760e:	bf18      	it	ne
 8007610:	6059      	strne	r1, [r3, #4]
 8007612:	6863      	ldr	r3, [r4, #4]
 8007614:	bf08      	it	eq
 8007616:	6031      	streq	r1, [r6, #0]
 8007618:	5162      	str	r2, [r4, r5]
 800761a:	604b      	str	r3, [r1, #4]
 800761c:	4638      	mov	r0, r7
 800761e:	f104 060b 	add.w	r6, r4, #11
 8007622:	f000 fd83 	bl	800812c <__malloc_unlock>
 8007626:	f026 0607 	bic.w	r6, r6, #7
 800762a:	1d23      	adds	r3, r4, #4
 800762c:	1af2      	subs	r2, r6, r3
 800762e:	d0b6      	beq.n	800759e <_malloc_r+0x22>
 8007630:	1b9b      	subs	r3, r3, r6
 8007632:	50a3      	str	r3, [r4, r2]
 8007634:	e7b3      	b.n	800759e <_malloc_r+0x22>
 8007636:	6862      	ldr	r2, [r4, #4]
 8007638:	42a3      	cmp	r3, r4
 800763a:	bf0c      	ite	eq
 800763c:	6032      	streq	r2, [r6, #0]
 800763e:	605a      	strne	r2, [r3, #4]
 8007640:	e7ec      	b.n	800761c <_malloc_r+0xa0>
 8007642:	4623      	mov	r3, r4
 8007644:	6864      	ldr	r4, [r4, #4]
 8007646:	e7b2      	b.n	80075ae <_malloc_r+0x32>
 8007648:	4634      	mov	r4, r6
 800764a:	6876      	ldr	r6, [r6, #4]
 800764c:	e7b9      	b.n	80075c2 <_malloc_r+0x46>
 800764e:	230c      	movs	r3, #12
 8007650:	603b      	str	r3, [r7, #0]
 8007652:	4638      	mov	r0, r7
 8007654:	f000 fd6a 	bl	800812c <__malloc_unlock>
 8007658:	e7a1      	b.n	800759e <_malloc_r+0x22>
 800765a:	6025      	str	r5, [r4, #0]
 800765c:	e7de      	b.n	800761c <_malloc_r+0xa0>
 800765e:	bf00      	nop
 8007660:	20013b34 	.word	0x20013b34

08007664 <__sfputc_r>:
 8007664:	6893      	ldr	r3, [r2, #8]
 8007666:	3b01      	subs	r3, #1
 8007668:	2b00      	cmp	r3, #0
 800766a:	b410      	push	{r4}
 800766c:	6093      	str	r3, [r2, #8]
 800766e:	da08      	bge.n	8007682 <__sfputc_r+0x1e>
 8007670:	6994      	ldr	r4, [r2, #24]
 8007672:	42a3      	cmp	r3, r4
 8007674:	db01      	blt.n	800767a <__sfputc_r+0x16>
 8007676:	290a      	cmp	r1, #10
 8007678:	d103      	bne.n	8007682 <__sfputc_r+0x1e>
 800767a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800767e:	f000 bb33 	b.w	8007ce8 <__swbuf_r>
 8007682:	6813      	ldr	r3, [r2, #0]
 8007684:	1c58      	adds	r0, r3, #1
 8007686:	6010      	str	r0, [r2, #0]
 8007688:	7019      	strb	r1, [r3, #0]
 800768a:	4608      	mov	r0, r1
 800768c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007690:	4770      	bx	lr

08007692 <__sfputs_r>:
 8007692:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007694:	4606      	mov	r6, r0
 8007696:	460f      	mov	r7, r1
 8007698:	4614      	mov	r4, r2
 800769a:	18d5      	adds	r5, r2, r3
 800769c:	42ac      	cmp	r4, r5
 800769e:	d101      	bne.n	80076a4 <__sfputs_r+0x12>
 80076a0:	2000      	movs	r0, #0
 80076a2:	e007      	b.n	80076b4 <__sfputs_r+0x22>
 80076a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076a8:	463a      	mov	r2, r7
 80076aa:	4630      	mov	r0, r6
 80076ac:	f7ff ffda 	bl	8007664 <__sfputc_r>
 80076b0:	1c43      	adds	r3, r0, #1
 80076b2:	d1f3      	bne.n	800769c <__sfputs_r+0xa>
 80076b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080076b8 <_vfiprintf_r>:
 80076b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076bc:	460d      	mov	r5, r1
 80076be:	b09d      	sub	sp, #116	; 0x74
 80076c0:	4614      	mov	r4, r2
 80076c2:	4698      	mov	r8, r3
 80076c4:	4606      	mov	r6, r0
 80076c6:	b118      	cbz	r0, 80076d0 <_vfiprintf_r+0x18>
 80076c8:	6983      	ldr	r3, [r0, #24]
 80076ca:	b90b      	cbnz	r3, 80076d0 <_vfiprintf_r+0x18>
 80076cc:	f7ff fe96 	bl	80073fc <__sinit>
 80076d0:	4b89      	ldr	r3, [pc, #548]	; (80078f8 <_vfiprintf_r+0x240>)
 80076d2:	429d      	cmp	r5, r3
 80076d4:	d11b      	bne.n	800770e <_vfiprintf_r+0x56>
 80076d6:	6875      	ldr	r5, [r6, #4]
 80076d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076da:	07d9      	lsls	r1, r3, #31
 80076dc:	d405      	bmi.n	80076ea <_vfiprintf_r+0x32>
 80076de:	89ab      	ldrh	r3, [r5, #12]
 80076e0:	059a      	lsls	r2, r3, #22
 80076e2:	d402      	bmi.n	80076ea <_vfiprintf_r+0x32>
 80076e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076e6:	f7ff ff27 	bl	8007538 <__retarget_lock_acquire_recursive>
 80076ea:	89ab      	ldrh	r3, [r5, #12]
 80076ec:	071b      	lsls	r3, r3, #28
 80076ee:	d501      	bpl.n	80076f4 <_vfiprintf_r+0x3c>
 80076f0:	692b      	ldr	r3, [r5, #16]
 80076f2:	b9eb      	cbnz	r3, 8007730 <_vfiprintf_r+0x78>
 80076f4:	4629      	mov	r1, r5
 80076f6:	4630      	mov	r0, r6
 80076f8:	f000 fb5a 	bl	8007db0 <__swsetup_r>
 80076fc:	b1c0      	cbz	r0, 8007730 <_vfiprintf_r+0x78>
 80076fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007700:	07dc      	lsls	r4, r3, #31
 8007702:	d50e      	bpl.n	8007722 <_vfiprintf_r+0x6a>
 8007704:	f04f 30ff 	mov.w	r0, #4294967295
 8007708:	b01d      	add	sp, #116	; 0x74
 800770a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800770e:	4b7b      	ldr	r3, [pc, #492]	; (80078fc <_vfiprintf_r+0x244>)
 8007710:	429d      	cmp	r5, r3
 8007712:	d101      	bne.n	8007718 <_vfiprintf_r+0x60>
 8007714:	68b5      	ldr	r5, [r6, #8]
 8007716:	e7df      	b.n	80076d8 <_vfiprintf_r+0x20>
 8007718:	4b79      	ldr	r3, [pc, #484]	; (8007900 <_vfiprintf_r+0x248>)
 800771a:	429d      	cmp	r5, r3
 800771c:	bf08      	it	eq
 800771e:	68f5      	ldreq	r5, [r6, #12]
 8007720:	e7da      	b.n	80076d8 <_vfiprintf_r+0x20>
 8007722:	89ab      	ldrh	r3, [r5, #12]
 8007724:	0598      	lsls	r0, r3, #22
 8007726:	d4ed      	bmi.n	8007704 <_vfiprintf_r+0x4c>
 8007728:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800772a:	f7ff ff06 	bl	800753a <__retarget_lock_release_recursive>
 800772e:	e7e9      	b.n	8007704 <_vfiprintf_r+0x4c>
 8007730:	2300      	movs	r3, #0
 8007732:	9309      	str	r3, [sp, #36]	; 0x24
 8007734:	2320      	movs	r3, #32
 8007736:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800773a:	f8cd 800c 	str.w	r8, [sp, #12]
 800773e:	2330      	movs	r3, #48	; 0x30
 8007740:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007904 <_vfiprintf_r+0x24c>
 8007744:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007748:	f04f 0901 	mov.w	r9, #1
 800774c:	4623      	mov	r3, r4
 800774e:	469a      	mov	sl, r3
 8007750:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007754:	b10a      	cbz	r2, 800775a <_vfiprintf_r+0xa2>
 8007756:	2a25      	cmp	r2, #37	; 0x25
 8007758:	d1f9      	bne.n	800774e <_vfiprintf_r+0x96>
 800775a:	ebba 0b04 	subs.w	fp, sl, r4
 800775e:	d00b      	beq.n	8007778 <_vfiprintf_r+0xc0>
 8007760:	465b      	mov	r3, fp
 8007762:	4622      	mov	r2, r4
 8007764:	4629      	mov	r1, r5
 8007766:	4630      	mov	r0, r6
 8007768:	f7ff ff93 	bl	8007692 <__sfputs_r>
 800776c:	3001      	adds	r0, #1
 800776e:	f000 80aa 	beq.w	80078c6 <_vfiprintf_r+0x20e>
 8007772:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007774:	445a      	add	r2, fp
 8007776:	9209      	str	r2, [sp, #36]	; 0x24
 8007778:	f89a 3000 	ldrb.w	r3, [sl]
 800777c:	2b00      	cmp	r3, #0
 800777e:	f000 80a2 	beq.w	80078c6 <_vfiprintf_r+0x20e>
 8007782:	2300      	movs	r3, #0
 8007784:	f04f 32ff 	mov.w	r2, #4294967295
 8007788:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800778c:	f10a 0a01 	add.w	sl, sl, #1
 8007790:	9304      	str	r3, [sp, #16]
 8007792:	9307      	str	r3, [sp, #28]
 8007794:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007798:	931a      	str	r3, [sp, #104]	; 0x68
 800779a:	4654      	mov	r4, sl
 800779c:	2205      	movs	r2, #5
 800779e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077a2:	4858      	ldr	r0, [pc, #352]	; (8007904 <_vfiprintf_r+0x24c>)
 80077a4:	f7f8 fd24 	bl	80001f0 <memchr>
 80077a8:	9a04      	ldr	r2, [sp, #16]
 80077aa:	b9d8      	cbnz	r0, 80077e4 <_vfiprintf_r+0x12c>
 80077ac:	06d1      	lsls	r1, r2, #27
 80077ae:	bf44      	itt	mi
 80077b0:	2320      	movmi	r3, #32
 80077b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077b6:	0713      	lsls	r3, r2, #28
 80077b8:	bf44      	itt	mi
 80077ba:	232b      	movmi	r3, #43	; 0x2b
 80077bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077c0:	f89a 3000 	ldrb.w	r3, [sl]
 80077c4:	2b2a      	cmp	r3, #42	; 0x2a
 80077c6:	d015      	beq.n	80077f4 <_vfiprintf_r+0x13c>
 80077c8:	9a07      	ldr	r2, [sp, #28]
 80077ca:	4654      	mov	r4, sl
 80077cc:	2000      	movs	r0, #0
 80077ce:	f04f 0c0a 	mov.w	ip, #10
 80077d2:	4621      	mov	r1, r4
 80077d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077d8:	3b30      	subs	r3, #48	; 0x30
 80077da:	2b09      	cmp	r3, #9
 80077dc:	d94e      	bls.n	800787c <_vfiprintf_r+0x1c4>
 80077de:	b1b0      	cbz	r0, 800780e <_vfiprintf_r+0x156>
 80077e0:	9207      	str	r2, [sp, #28]
 80077e2:	e014      	b.n	800780e <_vfiprintf_r+0x156>
 80077e4:	eba0 0308 	sub.w	r3, r0, r8
 80077e8:	fa09 f303 	lsl.w	r3, r9, r3
 80077ec:	4313      	orrs	r3, r2
 80077ee:	9304      	str	r3, [sp, #16]
 80077f0:	46a2      	mov	sl, r4
 80077f2:	e7d2      	b.n	800779a <_vfiprintf_r+0xe2>
 80077f4:	9b03      	ldr	r3, [sp, #12]
 80077f6:	1d19      	adds	r1, r3, #4
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	9103      	str	r1, [sp, #12]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	bfbb      	ittet	lt
 8007800:	425b      	neglt	r3, r3
 8007802:	f042 0202 	orrlt.w	r2, r2, #2
 8007806:	9307      	strge	r3, [sp, #28]
 8007808:	9307      	strlt	r3, [sp, #28]
 800780a:	bfb8      	it	lt
 800780c:	9204      	strlt	r2, [sp, #16]
 800780e:	7823      	ldrb	r3, [r4, #0]
 8007810:	2b2e      	cmp	r3, #46	; 0x2e
 8007812:	d10c      	bne.n	800782e <_vfiprintf_r+0x176>
 8007814:	7863      	ldrb	r3, [r4, #1]
 8007816:	2b2a      	cmp	r3, #42	; 0x2a
 8007818:	d135      	bne.n	8007886 <_vfiprintf_r+0x1ce>
 800781a:	9b03      	ldr	r3, [sp, #12]
 800781c:	1d1a      	adds	r2, r3, #4
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	9203      	str	r2, [sp, #12]
 8007822:	2b00      	cmp	r3, #0
 8007824:	bfb8      	it	lt
 8007826:	f04f 33ff 	movlt.w	r3, #4294967295
 800782a:	3402      	adds	r4, #2
 800782c:	9305      	str	r3, [sp, #20]
 800782e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007914 <_vfiprintf_r+0x25c>
 8007832:	7821      	ldrb	r1, [r4, #0]
 8007834:	2203      	movs	r2, #3
 8007836:	4650      	mov	r0, sl
 8007838:	f7f8 fcda 	bl	80001f0 <memchr>
 800783c:	b140      	cbz	r0, 8007850 <_vfiprintf_r+0x198>
 800783e:	2340      	movs	r3, #64	; 0x40
 8007840:	eba0 000a 	sub.w	r0, r0, sl
 8007844:	fa03 f000 	lsl.w	r0, r3, r0
 8007848:	9b04      	ldr	r3, [sp, #16]
 800784a:	4303      	orrs	r3, r0
 800784c:	3401      	adds	r4, #1
 800784e:	9304      	str	r3, [sp, #16]
 8007850:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007854:	482c      	ldr	r0, [pc, #176]	; (8007908 <_vfiprintf_r+0x250>)
 8007856:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800785a:	2206      	movs	r2, #6
 800785c:	f7f8 fcc8 	bl	80001f0 <memchr>
 8007860:	2800      	cmp	r0, #0
 8007862:	d03f      	beq.n	80078e4 <_vfiprintf_r+0x22c>
 8007864:	4b29      	ldr	r3, [pc, #164]	; (800790c <_vfiprintf_r+0x254>)
 8007866:	bb1b      	cbnz	r3, 80078b0 <_vfiprintf_r+0x1f8>
 8007868:	9b03      	ldr	r3, [sp, #12]
 800786a:	3307      	adds	r3, #7
 800786c:	f023 0307 	bic.w	r3, r3, #7
 8007870:	3308      	adds	r3, #8
 8007872:	9303      	str	r3, [sp, #12]
 8007874:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007876:	443b      	add	r3, r7
 8007878:	9309      	str	r3, [sp, #36]	; 0x24
 800787a:	e767      	b.n	800774c <_vfiprintf_r+0x94>
 800787c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007880:	460c      	mov	r4, r1
 8007882:	2001      	movs	r0, #1
 8007884:	e7a5      	b.n	80077d2 <_vfiprintf_r+0x11a>
 8007886:	2300      	movs	r3, #0
 8007888:	3401      	adds	r4, #1
 800788a:	9305      	str	r3, [sp, #20]
 800788c:	4619      	mov	r1, r3
 800788e:	f04f 0c0a 	mov.w	ip, #10
 8007892:	4620      	mov	r0, r4
 8007894:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007898:	3a30      	subs	r2, #48	; 0x30
 800789a:	2a09      	cmp	r2, #9
 800789c:	d903      	bls.n	80078a6 <_vfiprintf_r+0x1ee>
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d0c5      	beq.n	800782e <_vfiprintf_r+0x176>
 80078a2:	9105      	str	r1, [sp, #20]
 80078a4:	e7c3      	b.n	800782e <_vfiprintf_r+0x176>
 80078a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80078aa:	4604      	mov	r4, r0
 80078ac:	2301      	movs	r3, #1
 80078ae:	e7f0      	b.n	8007892 <_vfiprintf_r+0x1da>
 80078b0:	ab03      	add	r3, sp, #12
 80078b2:	9300      	str	r3, [sp, #0]
 80078b4:	462a      	mov	r2, r5
 80078b6:	4b16      	ldr	r3, [pc, #88]	; (8007910 <_vfiprintf_r+0x258>)
 80078b8:	a904      	add	r1, sp, #16
 80078ba:	4630      	mov	r0, r6
 80078bc:	f3af 8000 	nop.w
 80078c0:	4607      	mov	r7, r0
 80078c2:	1c78      	adds	r0, r7, #1
 80078c4:	d1d6      	bne.n	8007874 <_vfiprintf_r+0x1bc>
 80078c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078c8:	07d9      	lsls	r1, r3, #31
 80078ca:	d405      	bmi.n	80078d8 <_vfiprintf_r+0x220>
 80078cc:	89ab      	ldrh	r3, [r5, #12]
 80078ce:	059a      	lsls	r2, r3, #22
 80078d0:	d402      	bmi.n	80078d8 <_vfiprintf_r+0x220>
 80078d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078d4:	f7ff fe31 	bl	800753a <__retarget_lock_release_recursive>
 80078d8:	89ab      	ldrh	r3, [r5, #12]
 80078da:	065b      	lsls	r3, r3, #25
 80078dc:	f53f af12 	bmi.w	8007704 <_vfiprintf_r+0x4c>
 80078e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078e2:	e711      	b.n	8007708 <_vfiprintf_r+0x50>
 80078e4:	ab03      	add	r3, sp, #12
 80078e6:	9300      	str	r3, [sp, #0]
 80078e8:	462a      	mov	r2, r5
 80078ea:	4b09      	ldr	r3, [pc, #36]	; (8007910 <_vfiprintf_r+0x258>)
 80078ec:	a904      	add	r1, sp, #16
 80078ee:	4630      	mov	r0, r6
 80078f0:	f000 f880 	bl	80079f4 <_printf_i>
 80078f4:	e7e4      	b.n	80078c0 <_vfiprintf_r+0x208>
 80078f6:	bf00      	nop
 80078f8:	0800d3c4 	.word	0x0800d3c4
 80078fc:	0800d3e4 	.word	0x0800d3e4
 8007900:	0800d3a4 	.word	0x0800d3a4
 8007904:	0800d404 	.word	0x0800d404
 8007908:	0800d40e 	.word	0x0800d40e
 800790c:	00000000 	.word	0x00000000
 8007910:	08007693 	.word	0x08007693
 8007914:	0800d40a 	.word	0x0800d40a

08007918 <_printf_common>:
 8007918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800791c:	4616      	mov	r6, r2
 800791e:	4699      	mov	r9, r3
 8007920:	688a      	ldr	r2, [r1, #8]
 8007922:	690b      	ldr	r3, [r1, #16]
 8007924:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007928:	4293      	cmp	r3, r2
 800792a:	bfb8      	it	lt
 800792c:	4613      	movlt	r3, r2
 800792e:	6033      	str	r3, [r6, #0]
 8007930:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007934:	4607      	mov	r7, r0
 8007936:	460c      	mov	r4, r1
 8007938:	b10a      	cbz	r2, 800793e <_printf_common+0x26>
 800793a:	3301      	adds	r3, #1
 800793c:	6033      	str	r3, [r6, #0]
 800793e:	6823      	ldr	r3, [r4, #0]
 8007940:	0699      	lsls	r1, r3, #26
 8007942:	bf42      	ittt	mi
 8007944:	6833      	ldrmi	r3, [r6, #0]
 8007946:	3302      	addmi	r3, #2
 8007948:	6033      	strmi	r3, [r6, #0]
 800794a:	6825      	ldr	r5, [r4, #0]
 800794c:	f015 0506 	ands.w	r5, r5, #6
 8007950:	d106      	bne.n	8007960 <_printf_common+0x48>
 8007952:	f104 0a19 	add.w	sl, r4, #25
 8007956:	68e3      	ldr	r3, [r4, #12]
 8007958:	6832      	ldr	r2, [r6, #0]
 800795a:	1a9b      	subs	r3, r3, r2
 800795c:	42ab      	cmp	r3, r5
 800795e:	dc26      	bgt.n	80079ae <_printf_common+0x96>
 8007960:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007964:	1e13      	subs	r3, r2, #0
 8007966:	6822      	ldr	r2, [r4, #0]
 8007968:	bf18      	it	ne
 800796a:	2301      	movne	r3, #1
 800796c:	0692      	lsls	r2, r2, #26
 800796e:	d42b      	bmi.n	80079c8 <_printf_common+0xb0>
 8007970:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007974:	4649      	mov	r1, r9
 8007976:	4638      	mov	r0, r7
 8007978:	47c0      	blx	r8
 800797a:	3001      	adds	r0, #1
 800797c:	d01e      	beq.n	80079bc <_printf_common+0xa4>
 800797e:	6823      	ldr	r3, [r4, #0]
 8007980:	68e5      	ldr	r5, [r4, #12]
 8007982:	6832      	ldr	r2, [r6, #0]
 8007984:	f003 0306 	and.w	r3, r3, #6
 8007988:	2b04      	cmp	r3, #4
 800798a:	bf08      	it	eq
 800798c:	1aad      	subeq	r5, r5, r2
 800798e:	68a3      	ldr	r3, [r4, #8]
 8007990:	6922      	ldr	r2, [r4, #16]
 8007992:	bf0c      	ite	eq
 8007994:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007998:	2500      	movne	r5, #0
 800799a:	4293      	cmp	r3, r2
 800799c:	bfc4      	itt	gt
 800799e:	1a9b      	subgt	r3, r3, r2
 80079a0:	18ed      	addgt	r5, r5, r3
 80079a2:	2600      	movs	r6, #0
 80079a4:	341a      	adds	r4, #26
 80079a6:	42b5      	cmp	r5, r6
 80079a8:	d11a      	bne.n	80079e0 <_printf_common+0xc8>
 80079aa:	2000      	movs	r0, #0
 80079ac:	e008      	b.n	80079c0 <_printf_common+0xa8>
 80079ae:	2301      	movs	r3, #1
 80079b0:	4652      	mov	r2, sl
 80079b2:	4649      	mov	r1, r9
 80079b4:	4638      	mov	r0, r7
 80079b6:	47c0      	blx	r8
 80079b8:	3001      	adds	r0, #1
 80079ba:	d103      	bne.n	80079c4 <_printf_common+0xac>
 80079bc:	f04f 30ff 	mov.w	r0, #4294967295
 80079c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079c4:	3501      	adds	r5, #1
 80079c6:	e7c6      	b.n	8007956 <_printf_common+0x3e>
 80079c8:	18e1      	adds	r1, r4, r3
 80079ca:	1c5a      	adds	r2, r3, #1
 80079cc:	2030      	movs	r0, #48	; 0x30
 80079ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80079d2:	4422      	add	r2, r4
 80079d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80079d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80079dc:	3302      	adds	r3, #2
 80079de:	e7c7      	b.n	8007970 <_printf_common+0x58>
 80079e0:	2301      	movs	r3, #1
 80079e2:	4622      	mov	r2, r4
 80079e4:	4649      	mov	r1, r9
 80079e6:	4638      	mov	r0, r7
 80079e8:	47c0      	blx	r8
 80079ea:	3001      	adds	r0, #1
 80079ec:	d0e6      	beq.n	80079bc <_printf_common+0xa4>
 80079ee:	3601      	adds	r6, #1
 80079f0:	e7d9      	b.n	80079a6 <_printf_common+0x8e>
	...

080079f4 <_printf_i>:
 80079f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079f8:	7e0f      	ldrb	r7, [r1, #24]
 80079fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80079fc:	2f78      	cmp	r7, #120	; 0x78
 80079fe:	4691      	mov	r9, r2
 8007a00:	4680      	mov	r8, r0
 8007a02:	460c      	mov	r4, r1
 8007a04:	469a      	mov	sl, r3
 8007a06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007a0a:	d807      	bhi.n	8007a1c <_printf_i+0x28>
 8007a0c:	2f62      	cmp	r7, #98	; 0x62
 8007a0e:	d80a      	bhi.n	8007a26 <_printf_i+0x32>
 8007a10:	2f00      	cmp	r7, #0
 8007a12:	f000 80d8 	beq.w	8007bc6 <_printf_i+0x1d2>
 8007a16:	2f58      	cmp	r7, #88	; 0x58
 8007a18:	f000 80a3 	beq.w	8007b62 <_printf_i+0x16e>
 8007a1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a24:	e03a      	b.n	8007a9c <_printf_i+0xa8>
 8007a26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a2a:	2b15      	cmp	r3, #21
 8007a2c:	d8f6      	bhi.n	8007a1c <_printf_i+0x28>
 8007a2e:	a101      	add	r1, pc, #4	; (adr r1, 8007a34 <_printf_i+0x40>)
 8007a30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a34:	08007a8d 	.word	0x08007a8d
 8007a38:	08007aa1 	.word	0x08007aa1
 8007a3c:	08007a1d 	.word	0x08007a1d
 8007a40:	08007a1d 	.word	0x08007a1d
 8007a44:	08007a1d 	.word	0x08007a1d
 8007a48:	08007a1d 	.word	0x08007a1d
 8007a4c:	08007aa1 	.word	0x08007aa1
 8007a50:	08007a1d 	.word	0x08007a1d
 8007a54:	08007a1d 	.word	0x08007a1d
 8007a58:	08007a1d 	.word	0x08007a1d
 8007a5c:	08007a1d 	.word	0x08007a1d
 8007a60:	08007bad 	.word	0x08007bad
 8007a64:	08007ad1 	.word	0x08007ad1
 8007a68:	08007b8f 	.word	0x08007b8f
 8007a6c:	08007a1d 	.word	0x08007a1d
 8007a70:	08007a1d 	.word	0x08007a1d
 8007a74:	08007bcf 	.word	0x08007bcf
 8007a78:	08007a1d 	.word	0x08007a1d
 8007a7c:	08007ad1 	.word	0x08007ad1
 8007a80:	08007a1d 	.word	0x08007a1d
 8007a84:	08007a1d 	.word	0x08007a1d
 8007a88:	08007b97 	.word	0x08007b97
 8007a8c:	682b      	ldr	r3, [r5, #0]
 8007a8e:	1d1a      	adds	r2, r3, #4
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	602a      	str	r2, [r5, #0]
 8007a94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	e0a3      	b.n	8007be8 <_printf_i+0x1f4>
 8007aa0:	6820      	ldr	r0, [r4, #0]
 8007aa2:	6829      	ldr	r1, [r5, #0]
 8007aa4:	0606      	lsls	r6, r0, #24
 8007aa6:	f101 0304 	add.w	r3, r1, #4
 8007aaa:	d50a      	bpl.n	8007ac2 <_printf_i+0xce>
 8007aac:	680e      	ldr	r6, [r1, #0]
 8007aae:	602b      	str	r3, [r5, #0]
 8007ab0:	2e00      	cmp	r6, #0
 8007ab2:	da03      	bge.n	8007abc <_printf_i+0xc8>
 8007ab4:	232d      	movs	r3, #45	; 0x2d
 8007ab6:	4276      	negs	r6, r6
 8007ab8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007abc:	485e      	ldr	r0, [pc, #376]	; (8007c38 <_printf_i+0x244>)
 8007abe:	230a      	movs	r3, #10
 8007ac0:	e019      	b.n	8007af6 <_printf_i+0x102>
 8007ac2:	680e      	ldr	r6, [r1, #0]
 8007ac4:	602b      	str	r3, [r5, #0]
 8007ac6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007aca:	bf18      	it	ne
 8007acc:	b236      	sxthne	r6, r6
 8007ace:	e7ef      	b.n	8007ab0 <_printf_i+0xbc>
 8007ad0:	682b      	ldr	r3, [r5, #0]
 8007ad2:	6820      	ldr	r0, [r4, #0]
 8007ad4:	1d19      	adds	r1, r3, #4
 8007ad6:	6029      	str	r1, [r5, #0]
 8007ad8:	0601      	lsls	r1, r0, #24
 8007ada:	d501      	bpl.n	8007ae0 <_printf_i+0xec>
 8007adc:	681e      	ldr	r6, [r3, #0]
 8007ade:	e002      	b.n	8007ae6 <_printf_i+0xf2>
 8007ae0:	0646      	lsls	r6, r0, #25
 8007ae2:	d5fb      	bpl.n	8007adc <_printf_i+0xe8>
 8007ae4:	881e      	ldrh	r6, [r3, #0]
 8007ae6:	4854      	ldr	r0, [pc, #336]	; (8007c38 <_printf_i+0x244>)
 8007ae8:	2f6f      	cmp	r7, #111	; 0x6f
 8007aea:	bf0c      	ite	eq
 8007aec:	2308      	moveq	r3, #8
 8007aee:	230a      	movne	r3, #10
 8007af0:	2100      	movs	r1, #0
 8007af2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007af6:	6865      	ldr	r5, [r4, #4]
 8007af8:	60a5      	str	r5, [r4, #8]
 8007afa:	2d00      	cmp	r5, #0
 8007afc:	bfa2      	ittt	ge
 8007afe:	6821      	ldrge	r1, [r4, #0]
 8007b00:	f021 0104 	bicge.w	r1, r1, #4
 8007b04:	6021      	strge	r1, [r4, #0]
 8007b06:	b90e      	cbnz	r6, 8007b0c <_printf_i+0x118>
 8007b08:	2d00      	cmp	r5, #0
 8007b0a:	d04d      	beq.n	8007ba8 <_printf_i+0x1b4>
 8007b0c:	4615      	mov	r5, r2
 8007b0e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007b12:	fb03 6711 	mls	r7, r3, r1, r6
 8007b16:	5dc7      	ldrb	r7, [r0, r7]
 8007b18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007b1c:	4637      	mov	r7, r6
 8007b1e:	42bb      	cmp	r3, r7
 8007b20:	460e      	mov	r6, r1
 8007b22:	d9f4      	bls.n	8007b0e <_printf_i+0x11a>
 8007b24:	2b08      	cmp	r3, #8
 8007b26:	d10b      	bne.n	8007b40 <_printf_i+0x14c>
 8007b28:	6823      	ldr	r3, [r4, #0]
 8007b2a:	07de      	lsls	r6, r3, #31
 8007b2c:	d508      	bpl.n	8007b40 <_printf_i+0x14c>
 8007b2e:	6923      	ldr	r3, [r4, #16]
 8007b30:	6861      	ldr	r1, [r4, #4]
 8007b32:	4299      	cmp	r1, r3
 8007b34:	bfde      	ittt	le
 8007b36:	2330      	movle	r3, #48	; 0x30
 8007b38:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b3c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007b40:	1b52      	subs	r2, r2, r5
 8007b42:	6122      	str	r2, [r4, #16]
 8007b44:	f8cd a000 	str.w	sl, [sp]
 8007b48:	464b      	mov	r3, r9
 8007b4a:	aa03      	add	r2, sp, #12
 8007b4c:	4621      	mov	r1, r4
 8007b4e:	4640      	mov	r0, r8
 8007b50:	f7ff fee2 	bl	8007918 <_printf_common>
 8007b54:	3001      	adds	r0, #1
 8007b56:	d14c      	bne.n	8007bf2 <_printf_i+0x1fe>
 8007b58:	f04f 30ff 	mov.w	r0, #4294967295
 8007b5c:	b004      	add	sp, #16
 8007b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b62:	4835      	ldr	r0, [pc, #212]	; (8007c38 <_printf_i+0x244>)
 8007b64:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007b68:	6829      	ldr	r1, [r5, #0]
 8007b6a:	6823      	ldr	r3, [r4, #0]
 8007b6c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007b70:	6029      	str	r1, [r5, #0]
 8007b72:	061d      	lsls	r5, r3, #24
 8007b74:	d514      	bpl.n	8007ba0 <_printf_i+0x1ac>
 8007b76:	07df      	lsls	r7, r3, #31
 8007b78:	bf44      	itt	mi
 8007b7a:	f043 0320 	orrmi.w	r3, r3, #32
 8007b7e:	6023      	strmi	r3, [r4, #0]
 8007b80:	b91e      	cbnz	r6, 8007b8a <_printf_i+0x196>
 8007b82:	6823      	ldr	r3, [r4, #0]
 8007b84:	f023 0320 	bic.w	r3, r3, #32
 8007b88:	6023      	str	r3, [r4, #0]
 8007b8a:	2310      	movs	r3, #16
 8007b8c:	e7b0      	b.n	8007af0 <_printf_i+0xfc>
 8007b8e:	6823      	ldr	r3, [r4, #0]
 8007b90:	f043 0320 	orr.w	r3, r3, #32
 8007b94:	6023      	str	r3, [r4, #0]
 8007b96:	2378      	movs	r3, #120	; 0x78
 8007b98:	4828      	ldr	r0, [pc, #160]	; (8007c3c <_printf_i+0x248>)
 8007b9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b9e:	e7e3      	b.n	8007b68 <_printf_i+0x174>
 8007ba0:	0659      	lsls	r1, r3, #25
 8007ba2:	bf48      	it	mi
 8007ba4:	b2b6      	uxthmi	r6, r6
 8007ba6:	e7e6      	b.n	8007b76 <_printf_i+0x182>
 8007ba8:	4615      	mov	r5, r2
 8007baa:	e7bb      	b.n	8007b24 <_printf_i+0x130>
 8007bac:	682b      	ldr	r3, [r5, #0]
 8007bae:	6826      	ldr	r6, [r4, #0]
 8007bb0:	6961      	ldr	r1, [r4, #20]
 8007bb2:	1d18      	adds	r0, r3, #4
 8007bb4:	6028      	str	r0, [r5, #0]
 8007bb6:	0635      	lsls	r5, r6, #24
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	d501      	bpl.n	8007bc0 <_printf_i+0x1cc>
 8007bbc:	6019      	str	r1, [r3, #0]
 8007bbe:	e002      	b.n	8007bc6 <_printf_i+0x1d2>
 8007bc0:	0670      	lsls	r0, r6, #25
 8007bc2:	d5fb      	bpl.n	8007bbc <_printf_i+0x1c8>
 8007bc4:	8019      	strh	r1, [r3, #0]
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	6123      	str	r3, [r4, #16]
 8007bca:	4615      	mov	r5, r2
 8007bcc:	e7ba      	b.n	8007b44 <_printf_i+0x150>
 8007bce:	682b      	ldr	r3, [r5, #0]
 8007bd0:	1d1a      	adds	r2, r3, #4
 8007bd2:	602a      	str	r2, [r5, #0]
 8007bd4:	681d      	ldr	r5, [r3, #0]
 8007bd6:	6862      	ldr	r2, [r4, #4]
 8007bd8:	2100      	movs	r1, #0
 8007bda:	4628      	mov	r0, r5
 8007bdc:	f7f8 fb08 	bl	80001f0 <memchr>
 8007be0:	b108      	cbz	r0, 8007be6 <_printf_i+0x1f2>
 8007be2:	1b40      	subs	r0, r0, r5
 8007be4:	6060      	str	r0, [r4, #4]
 8007be6:	6863      	ldr	r3, [r4, #4]
 8007be8:	6123      	str	r3, [r4, #16]
 8007bea:	2300      	movs	r3, #0
 8007bec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bf0:	e7a8      	b.n	8007b44 <_printf_i+0x150>
 8007bf2:	6923      	ldr	r3, [r4, #16]
 8007bf4:	462a      	mov	r2, r5
 8007bf6:	4649      	mov	r1, r9
 8007bf8:	4640      	mov	r0, r8
 8007bfa:	47d0      	blx	sl
 8007bfc:	3001      	adds	r0, #1
 8007bfe:	d0ab      	beq.n	8007b58 <_printf_i+0x164>
 8007c00:	6823      	ldr	r3, [r4, #0]
 8007c02:	079b      	lsls	r3, r3, #30
 8007c04:	d413      	bmi.n	8007c2e <_printf_i+0x23a>
 8007c06:	68e0      	ldr	r0, [r4, #12]
 8007c08:	9b03      	ldr	r3, [sp, #12]
 8007c0a:	4298      	cmp	r0, r3
 8007c0c:	bfb8      	it	lt
 8007c0e:	4618      	movlt	r0, r3
 8007c10:	e7a4      	b.n	8007b5c <_printf_i+0x168>
 8007c12:	2301      	movs	r3, #1
 8007c14:	4632      	mov	r2, r6
 8007c16:	4649      	mov	r1, r9
 8007c18:	4640      	mov	r0, r8
 8007c1a:	47d0      	blx	sl
 8007c1c:	3001      	adds	r0, #1
 8007c1e:	d09b      	beq.n	8007b58 <_printf_i+0x164>
 8007c20:	3501      	adds	r5, #1
 8007c22:	68e3      	ldr	r3, [r4, #12]
 8007c24:	9903      	ldr	r1, [sp, #12]
 8007c26:	1a5b      	subs	r3, r3, r1
 8007c28:	42ab      	cmp	r3, r5
 8007c2a:	dcf2      	bgt.n	8007c12 <_printf_i+0x21e>
 8007c2c:	e7eb      	b.n	8007c06 <_printf_i+0x212>
 8007c2e:	2500      	movs	r5, #0
 8007c30:	f104 0619 	add.w	r6, r4, #25
 8007c34:	e7f5      	b.n	8007c22 <_printf_i+0x22e>
 8007c36:	bf00      	nop
 8007c38:	0800d415 	.word	0x0800d415
 8007c3c:	0800d426 	.word	0x0800d426

08007c40 <_sbrk_r>:
 8007c40:	b538      	push	{r3, r4, r5, lr}
 8007c42:	4d06      	ldr	r5, [pc, #24]	; (8007c5c <_sbrk_r+0x1c>)
 8007c44:	2300      	movs	r3, #0
 8007c46:	4604      	mov	r4, r0
 8007c48:	4608      	mov	r0, r1
 8007c4a:	602b      	str	r3, [r5, #0]
 8007c4c:	f7f9 fe12 	bl	8001874 <_sbrk>
 8007c50:	1c43      	adds	r3, r0, #1
 8007c52:	d102      	bne.n	8007c5a <_sbrk_r+0x1a>
 8007c54:	682b      	ldr	r3, [r5, #0]
 8007c56:	b103      	cbz	r3, 8007c5a <_sbrk_r+0x1a>
 8007c58:	6023      	str	r3, [r4, #0]
 8007c5a:	bd38      	pop	{r3, r4, r5, pc}
 8007c5c:	20013b3c 	.word	0x20013b3c

08007c60 <__sread>:
 8007c60:	b510      	push	{r4, lr}
 8007c62:	460c      	mov	r4, r1
 8007c64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c68:	f000 fab2 	bl	80081d0 <_read_r>
 8007c6c:	2800      	cmp	r0, #0
 8007c6e:	bfab      	itete	ge
 8007c70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007c72:	89a3      	ldrhlt	r3, [r4, #12]
 8007c74:	181b      	addge	r3, r3, r0
 8007c76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007c7a:	bfac      	ite	ge
 8007c7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007c7e:	81a3      	strhlt	r3, [r4, #12]
 8007c80:	bd10      	pop	{r4, pc}

08007c82 <__swrite>:
 8007c82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c86:	461f      	mov	r7, r3
 8007c88:	898b      	ldrh	r3, [r1, #12]
 8007c8a:	05db      	lsls	r3, r3, #23
 8007c8c:	4605      	mov	r5, r0
 8007c8e:	460c      	mov	r4, r1
 8007c90:	4616      	mov	r6, r2
 8007c92:	d505      	bpl.n	8007ca0 <__swrite+0x1e>
 8007c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c98:	2302      	movs	r3, #2
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f000 f9c8 	bl	8008030 <_lseek_r>
 8007ca0:	89a3      	ldrh	r3, [r4, #12]
 8007ca2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ca6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007caa:	81a3      	strh	r3, [r4, #12]
 8007cac:	4632      	mov	r2, r6
 8007cae:	463b      	mov	r3, r7
 8007cb0:	4628      	mov	r0, r5
 8007cb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cb6:	f000 b869 	b.w	8007d8c <_write_r>

08007cba <__sseek>:
 8007cba:	b510      	push	{r4, lr}
 8007cbc:	460c      	mov	r4, r1
 8007cbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cc2:	f000 f9b5 	bl	8008030 <_lseek_r>
 8007cc6:	1c43      	adds	r3, r0, #1
 8007cc8:	89a3      	ldrh	r3, [r4, #12]
 8007cca:	bf15      	itete	ne
 8007ccc:	6560      	strne	r0, [r4, #84]	; 0x54
 8007cce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007cd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007cd6:	81a3      	strheq	r3, [r4, #12]
 8007cd8:	bf18      	it	ne
 8007cda:	81a3      	strhne	r3, [r4, #12]
 8007cdc:	bd10      	pop	{r4, pc}

08007cde <__sclose>:
 8007cde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ce2:	f000 b8d3 	b.w	8007e8c <_close_r>
	...

08007ce8 <__swbuf_r>:
 8007ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cea:	460e      	mov	r6, r1
 8007cec:	4614      	mov	r4, r2
 8007cee:	4605      	mov	r5, r0
 8007cf0:	b118      	cbz	r0, 8007cfa <__swbuf_r+0x12>
 8007cf2:	6983      	ldr	r3, [r0, #24]
 8007cf4:	b90b      	cbnz	r3, 8007cfa <__swbuf_r+0x12>
 8007cf6:	f7ff fb81 	bl	80073fc <__sinit>
 8007cfa:	4b21      	ldr	r3, [pc, #132]	; (8007d80 <__swbuf_r+0x98>)
 8007cfc:	429c      	cmp	r4, r3
 8007cfe:	d12b      	bne.n	8007d58 <__swbuf_r+0x70>
 8007d00:	686c      	ldr	r4, [r5, #4]
 8007d02:	69a3      	ldr	r3, [r4, #24]
 8007d04:	60a3      	str	r3, [r4, #8]
 8007d06:	89a3      	ldrh	r3, [r4, #12]
 8007d08:	071a      	lsls	r2, r3, #28
 8007d0a:	d52f      	bpl.n	8007d6c <__swbuf_r+0x84>
 8007d0c:	6923      	ldr	r3, [r4, #16]
 8007d0e:	b36b      	cbz	r3, 8007d6c <__swbuf_r+0x84>
 8007d10:	6923      	ldr	r3, [r4, #16]
 8007d12:	6820      	ldr	r0, [r4, #0]
 8007d14:	1ac0      	subs	r0, r0, r3
 8007d16:	6963      	ldr	r3, [r4, #20]
 8007d18:	b2f6      	uxtb	r6, r6
 8007d1a:	4283      	cmp	r3, r0
 8007d1c:	4637      	mov	r7, r6
 8007d1e:	dc04      	bgt.n	8007d2a <__swbuf_r+0x42>
 8007d20:	4621      	mov	r1, r4
 8007d22:	4628      	mov	r0, r5
 8007d24:	f000 f948 	bl	8007fb8 <_fflush_r>
 8007d28:	bb30      	cbnz	r0, 8007d78 <__swbuf_r+0x90>
 8007d2a:	68a3      	ldr	r3, [r4, #8]
 8007d2c:	3b01      	subs	r3, #1
 8007d2e:	60a3      	str	r3, [r4, #8]
 8007d30:	6823      	ldr	r3, [r4, #0]
 8007d32:	1c5a      	adds	r2, r3, #1
 8007d34:	6022      	str	r2, [r4, #0]
 8007d36:	701e      	strb	r6, [r3, #0]
 8007d38:	6963      	ldr	r3, [r4, #20]
 8007d3a:	3001      	adds	r0, #1
 8007d3c:	4283      	cmp	r3, r0
 8007d3e:	d004      	beq.n	8007d4a <__swbuf_r+0x62>
 8007d40:	89a3      	ldrh	r3, [r4, #12]
 8007d42:	07db      	lsls	r3, r3, #31
 8007d44:	d506      	bpl.n	8007d54 <__swbuf_r+0x6c>
 8007d46:	2e0a      	cmp	r6, #10
 8007d48:	d104      	bne.n	8007d54 <__swbuf_r+0x6c>
 8007d4a:	4621      	mov	r1, r4
 8007d4c:	4628      	mov	r0, r5
 8007d4e:	f000 f933 	bl	8007fb8 <_fflush_r>
 8007d52:	b988      	cbnz	r0, 8007d78 <__swbuf_r+0x90>
 8007d54:	4638      	mov	r0, r7
 8007d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d58:	4b0a      	ldr	r3, [pc, #40]	; (8007d84 <__swbuf_r+0x9c>)
 8007d5a:	429c      	cmp	r4, r3
 8007d5c:	d101      	bne.n	8007d62 <__swbuf_r+0x7a>
 8007d5e:	68ac      	ldr	r4, [r5, #8]
 8007d60:	e7cf      	b.n	8007d02 <__swbuf_r+0x1a>
 8007d62:	4b09      	ldr	r3, [pc, #36]	; (8007d88 <__swbuf_r+0xa0>)
 8007d64:	429c      	cmp	r4, r3
 8007d66:	bf08      	it	eq
 8007d68:	68ec      	ldreq	r4, [r5, #12]
 8007d6a:	e7ca      	b.n	8007d02 <__swbuf_r+0x1a>
 8007d6c:	4621      	mov	r1, r4
 8007d6e:	4628      	mov	r0, r5
 8007d70:	f000 f81e 	bl	8007db0 <__swsetup_r>
 8007d74:	2800      	cmp	r0, #0
 8007d76:	d0cb      	beq.n	8007d10 <__swbuf_r+0x28>
 8007d78:	f04f 37ff 	mov.w	r7, #4294967295
 8007d7c:	e7ea      	b.n	8007d54 <__swbuf_r+0x6c>
 8007d7e:	bf00      	nop
 8007d80:	0800d3c4 	.word	0x0800d3c4
 8007d84:	0800d3e4 	.word	0x0800d3e4
 8007d88:	0800d3a4 	.word	0x0800d3a4

08007d8c <_write_r>:
 8007d8c:	b538      	push	{r3, r4, r5, lr}
 8007d8e:	4d07      	ldr	r5, [pc, #28]	; (8007dac <_write_r+0x20>)
 8007d90:	4604      	mov	r4, r0
 8007d92:	4608      	mov	r0, r1
 8007d94:	4611      	mov	r1, r2
 8007d96:	2200      	movs	r2, #0
 8007d98:	602a      	str	r2, [r5, #0]
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	f7f9 fd19 	bl	80017d2 <_write>
 8007da0:	1c43      	adds	r3, r0, #1
 8007da2:	d102      	bne.n	8007daa <_write_r+0x1e>
 8007da4:	682b      	ldr	r3, [r5, #0]
 8007da6:	b103      	cbz	r3, 8007daa <_write_r+0x1e>
 8007da8:	6023      	str	r3, [r4, #0]
 8007daa:	bd38      	pop	{r3, r4, r5, pc}
 8007dac:	20013b3c 	.word	0x20013b3c

08007db0 <__swsetup_r>:
 8007db0:	4b32      	ldr	r3, [pc, #200]	; (8007e7c <__swsetup_r+0xcc>)
 8007db2:	b570      	push	{r4, r5, r6, lr}
 8007db4:	681d      	ldr	r5, [r3, #0]
 8007db6:	4606      	mov	r6, r0
 8007db8:	460c      	mov	r4, r1
 8007dba:	b125      	cbz	r5, 8007dc6 <__swsetup_r+0x16>
 8007dbc:	69ab      	ldr	r3, [r5, #24]
 8007dbe:	b913      	cbnz	r3, 8007dc6 <__swsetup_r+0x16>
 8007dc0:	4628      	mov	r0, r5
 8007dc2:	f7ff fb1b 	bl	80073fc <__sinit>
 8007dc6:	4b2e      	ldr	r3, [pc, #184]	; (8007e80 <__swsetup_r+0xd0>)
 8007dc8:	429c      	cmp	r4, r3
 8007dca:	d10f      	bne.n	8007dec <__swsetup_r+0x3c>
 8007dcc:	686c      	ldr	r4, [r5, #4]
 8007dce:	89a3      	ldrh	r3, [r4, #12]
 8007dd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007dd4:	0719      	lsls	r1, r3, #28
 8007dd6:	d42c      	bmi.n	8007e32 <__swsetup_r+0x82>
 8007dd8:	06dd      	lsls	r5, r3, #27
 8007dda:	d411      	bmi.n	8007e00 <__swsetup_r+0x50>
 8007ddc:	2309      	movs	r3, #9
 8007dde:	6033      	str	r3, [r6, #0]
 8007de0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007de4:	81a3      	strh	r3, [r4, #12]
 8007de6:	f04f 30ff 	mov.w	r0, #4294967295
 8007dea:	e03e      	b.n	8007e6a <__swsetup_r+0xba>
 8007dec:	4b25      	ldr	r3, [pc, #148]	; (8007e84 <__swsetup_r+0xd4>)
 8007dee:	429c      	cmp	r4, r3
 8007df0:	d101      	bne.n	8007df6 <__swsetup_r+0x46>
 8007df2:	68ac      	ldr	r4, [r5, #8]
 8007df4:	e7eb      	b.n	8007dce <__swsetup_r+0x1e>
 8007df6:	4b24      	ldr	r3, [pc, #144]	; (8007e88 <__swsetup_r+0xd8>)
 8007df8:	429c      	cmp	r4, r3
 8007dfa:	bf08      	it	eq
 8007dfc:	68ec      	ldreq	r4, [r5, #12]
 8007dfe:	e7e6      	b.n	8007dce <__swsetup_r+0x1e>
 8007e00:	0758      	lsls	r0, r3, #29
 8007e02:	d512      	bpl.n	8007e2a <__swsetup_r+0x7a>
 8007e04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e06:	b141      	cbz	r1, 8007e1a <__swsetup_r+0x6a>
 8007e08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e0c:	4299      	cmp	r1, r3
 8007e0e:	d002      	beq.n	8007e16 <__swsetup_r+0x66>
 8007e10:	4630      	mov	r0, r6
 8007e12:	f000 f991 	bl	8008138 <_free_r>
 8007e16:	2300      	movs	r3, #0
 8007e18:	6363      	str	r3, [r4, #52]	; 0x34
 8007e1a:	89a3      	ldrh	r3, [r4, #12]
 8007e1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007e20:	81a3      	strh	r3, [r4, #12]
 8007e22:	2300      	movs	r3, #0
 8007e24:	6063      	str	r3, [r4, #4]
 8007e26:	6923      	ldr	r3, [r4, #16]
 8007e28:	6023      	str	r3, [r4, #0]
 8007e2a:	89a3      	ldrh	r3, [r4, #12]
 8007e2c:	f043 0308 	orr.w	r3, r3, #8
 8007e30:	81a3      	strh	r3, [r4, #12]
 8007e32:	6923      	ldr	r3, [r4, #16]
 8007e34:	b94b      	cbnz	r3, 8007e4a <__swsetup_r+0x9a>
 8007e36:	89a3      	ldrh	r3, [r4, #12]
 8007e38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007e3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e40:	d003      	beq.n	8007e4a <__swsetup_r+0x9a>
 8007e42:	4621      	mov	r1, r4
 8007e44:	4630      	mov	r0, r6
 8007e46:	f000 f92b 	bl	80080a0 <__smakebuf_r>
 8007e4a:	89a0      	ldrh	r0, [r4, #12]
 8007e4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e50:	f010 0301 	ands.w	r3, r0, #1
 8007e54:	d00a      	beq.n	8007e6c <__swsetup_r+0xbc>
 8007e56:	2300      	movs	r3, #0
 8007e58:	60a3      	str	r3, [r4, #8]
 8007e5a:	6963      	ldr	r3, [r4, #20]
 8007e5c:	425b      	negs	r3, r3
 8007e5e:	61a3      	str	r3, [r4, #24]
 8007e60:	6923      	ldr	r3, [r4, #16]
 8007e62:	b943      	cbnz	r3, 8007e76 <__swsetup_r+0xc6>
 8007e64:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007e68:	d1ba      	bne.n	8007de0 <__swsetup_r+0x30>
 8007e6a:	bd70      	pop	{r4, r5, r6, pc}
 8007e6c:	0781      	lsls	r1, r0, #30
 8007e6e:	bf58      	it	pl
 8007e70:	6963      	ldrpl	r3, [r4, #20]
 8007e72:	60a3      	str	r3, [r4, #8]
 8007e74:	e7f4      	b.n	8007e60 <__swsetup_r+0xb0>
 8007e76:	2000      	movs	r0, #0
 8007e78:	e7f7      	b.n	8007e6a <__swsetup_r+0xba>
 8007e7a:	bf00      	nop
 8007e7c:	200000b4 	.word	0x200000b4
 8007e80:	0800d3c4 	.word	0x0800d3c4
 8007e84:	0800d3e4 	.word	0x0800d3e4
 8007e88:	0800d3a4 	.word	0x0800d3a4

08007e8c <_close_r>:
 8007e8c:	b538      	push	{r3, r4, r5, lr}
 8007e8e:	4d06      	ldr	r5, [pc, #24]	; (8007ea8 <_close_r+0x1c>)
 8007e90:	2300      	movs	r3, #0
 8007e92:	4604      	mov	r4, r0
 8007e94:	4608      	mov	r0, r1
 8007e96:	602b      	str	r3, [r5, #0]
 8007e98:	f7f9 fcb7 	bl	800180a <_close>
 8007e9c:	1c43      	adds	r3, r0, #1
 8007e9e:	d102      	bne.n	8007ea6 <_close_r+0x1a>
 8007ea0:	682b      	ldr	r3, [r5, #0]
 8007ea2:	b103      	cbz	r3, 8007ea6 <_close_r+0x1a>
 8007ea4:	6023      	str	r3, [r4, #0]
 8007ea6:	bd38      	pop	{r3, r4, r5, pc}
 8007ea8:	20013b3c 	.word	0x20013b3c

08007eac <__sflush_r>:
 8007eac:	898a      	ldrh	r2, [r1, #12]
 8007eae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007eb2:	4605      	mov	r5, r0
 8007eb4:	0710      	lsls	r0, r2, #28
 8007eb6:	460c      	mov	r4, r1
 8007eb8:	d458      	bmi.n	8007f6c <__sflush_r+0xc0>
 8007eba:	684b      	ldr	r3, [r1, #4]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	dc05      	bgt.n	8007ecc <__sflush_r+0x20>
 8007ec0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	dc02      	bgt.n	8007ecc <__sflush_r+0x20>
 8007ec6:	2000      	movs	r0, #0
 8007ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ecc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ece:	2e00      	cmp	r6, #0
 8007ed0:	d0f9      	beq.n	8007ec6 <__sflush_r+0x1a>
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007ed8:	682f      	ldr	r7, [r5, #0]
 8007eda:	602b      	str	r3, [r5, #0]
 8007edc:	d032      	beq.n	8007f44 <__sflush_r+0x98>
 8007ede:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007ee0:	89a3      	ldrh	r3, [r4, #12]
 8007ee2:	075a      	lsls	r2, r3, #29
 8007ee4:	d505      	bpl.n	8007ef2 <__sflush_r+0x46>
 8007ee6:	6863      	ldr	r3, [r4, #4]
 8007ee8:	1ac0      	subs	r0, r0, r3
 8007eea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007eec:	b10b      	cbz	r3, 8007ef2 <__sflush_r+0x46>
 8007eee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ef0:	1ac0      	subs	r0, r0, r3
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ef8:	6a21      	ldr	r1, [r4, #32]
 8007efa:	4628      	mov	r0, r5
 8007efc:	47b0      	blx	r6
 8007efe:	1c43      	adds	r3, r0, #1
 8007f00:	89a3      	ldrh	r3, [r4, #12]
 8007f02:	d106      	bne.n	8007f12 <__sflush_r+0x66>
 8007f04:	6829      	ldr	r1, [r5, #0]
 8007f06:	291d      	cmp	r1, #29
 8007f08:	d82c      	bhi.n	8007f64 <__sflush_r+0xb8>
 8007f0a:	4a2a      	ldr	r2, [pc, #168]	; (8007fb4 <__sflush_r+0x108>)
 8007f0c:	40ca      	lsrs	r2, r1
 8007f0e:	07d6      	lsls	r6, r2, #31
 8007f10:	d528      	bpl.n	8007f64 <__sflush_r+0xb8>
 8007f12:	2200      	movs	r2, #0
 8007f14:	6062      	str	r2, [r4, #4]
 8007f16:	04d9      	lsls	r1, r3, #19
 8007f18:	6922      	ldr	r2, [r4, #16]
 8007f1a:	6022      	str	r2, [r4, #0]
 8007f1c:	d504      	bpl.n	8007f28 <__sflush_r+0x7c>
 8007f1e:	1c42      	adds	r2, r0, #1
 8007f20:	d101      	bne.n	8007f26 <__sflush_r+0x7a>
 8007f22:	682b      	ldr	r3, [r5, #0]
 8007f24:	b903      	cbnz	r3, 8007f28 <__sflush_r+0x7c>
 8007f26:	6560      	str	r0, [r4, #84]	; 0x54
 8007f28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f2a:	602f      	str	r7, [r5, #0]
 8007f2c:	2900      	cmp	r1, #0
 8007f2e:	d0ca      	beq.n	8007ec6 <__sflush_r+0x1a>
 8007f30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f34:	4299      	cmp	r1, r3
 8007f36:	d002      	beq.n	8007f3e <__sflush_r+0x92>
 8007f38:	4628      	mov	r0, r5
 8007f3a:	f000 f8fd 	bl	8008138 <_free_r>
 8007f3e:	2000      	movs	r0, #0
 8007f40:	6360      	str	r0, [r4, #52]	; 0x34
 8007f42:	e7c1      	b.n	8007ec8 <__sflush_r+0x1c>
 8007f44:	6a21      	ldr	r1, [r4, #32]
 8007f46:	2301      	movs	r3, #1
 8007f48:	4628      	mov	r0, r5
 8007f4a:	47b0      	blx	r6
 8007f4c:	1c41      	adds	r1, r0, #1
 8007f4e:	d1c7      	bne.n	8007ee0 <__sflush_r+0x34>
 8007f50:	682b      	ldr	r3, [r5, #0]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d0c4      	beq.n	8007ee0 <__sflush_r+0x34>
 8007f56:	2b1d      	cmp	r3, #29
 8007f58:	d001      	beq.n	8007f5e <__sflush_r+0xb2>
 8007f5a:	2b16      	cmp	r3, #22
 8007f5c:	d101      	bne.n	8007f62 <__sflush_r+0xb6>
 8007f5e:	602f      	str	r7, [r5, #0]
 8007f60:	e7b1      	b.n	8007ec6 <__sflush_r+0x1a>
 8007f62:	89a3      	ldrh	r3, [r4, #12]
 8007f64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f68:	81a3      	strh	r3, [r4, #12]
 8007f6a:	e7ad      	b.n	8007ec8 <__sflush_r+0x1c>
 8007f6c:	690f      	ldr	r7, [r1, #16]
 8007f6e:	2f00      	cmp	r7, #0
 8007f70:	d0a9      	beq.n	8007ec6 <__sflush_r+0x1a>
 8007f72:	0793      	lsls	r3, r2, #30
 8007f74:	680e      	ldr	r6, [r1, #0]
 8007f76:	bf08      	it	eq
 8007f78:	694b      	ldreq	r3, [r1, #20]
 8007f7a:	600f      	str	r7, [r1, #0]
 8007f7c:	bf18      	it	ne
 8007f7e:	2300      	movne	r3, #0
 8007f80:	eba6 0807 	sub.w	r8, r6, r7
 8007f84:	608b      	str	r3, [r1, #8]
 8007f86:	f1b8 0f00 	cmp.w	r8, #0
 8007f8a:	dd9c      	ble.n	8007ec6 <__sflush_r+0x1a>
 8007f8c:	6a21      	ldr	r1, [r4, #32]
 8007f8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007f90:	4643      	mov	r3, r8
 8007f92:	463a      	mov	r2, r7
 8007f94:	4628      	mov	r0, r5
 8007f96:	47b0      	blx	r6
 8007f98:	2800      	cmp	r0, #0
 8007f9a:	dc06      	bgt.n	8007faa <__sflush_r+0xfe>
 8007f9c:	89a3      	ldrh	r3, [r4, #12]
 8007f9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fa2:	81a3      	strh	r3, [r4, #12]
 8007fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8007fa8:	e78e      	b.n	8007ec8 <__sflush_r+0x1c>
 8007faa:	4407      	add	r7, r0
 8007fac:	eba8 0800 	sub.w	r8, r8, r0
 8007fb0:	e7e9      	b.n	8007f86 <__sflush_r+0xda>
 8007fb2:	bf00      	nop
 8007fb4:	20400001 	.word	0x20400001

08007fb8 <_fflush_r>:
 8007fb8:	b538      	push	{r3, r4, r5, lr}
 8007fba:	690b      	ldr	r3, [r1, #16]
 8007fbc:	4605      	mov	r5, r0
 8007fbe:	460c      	mov	r4, r1
 8007fc0:	b913      	cbnz	r3, 8007fc8 <_fflush_r+0x10>
 8007fc2:	2500      	movs	r5, #0
 8007fc4:	4628      	mov	r0, r5
 8007fc6:	bd38      	pop	{r3, r4, r5, pc}
 8007fc8:	b118      	cbz	r0, 8007fd2 <_fflush_r+0x1a>
 8007fca:	6983      	ldr	r3, [r0, #24]
 8007fcc:	b90b      	cbnz	r3, 8007fd2 <_fflush_r+0x1a>
 8007fce:	f7ff fa15 	bl	80073fc <__sinit>
 8007fd2:	4b14      	ldr	r3, [pc, #80]	; (8008024 <_fflush_r+0x6c>)
 8007fd4:	429c      	cmp	r4, r3
 8007fd6:	d11b      	bne.n	8008010 <_fflush_r+0x58>
 8007fd8:	686c      	ldr	r4, [r5, #4]
 8007fda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d0ef      	beq.n	8007fc2 <_fflush_r+0xa>
 8007fe2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007fe4:	07d0      	lsls	r0, r2, #31
 8007fe6:	d404      	bmi.n	8007ff2 <_fflush_r+0x3a>
 8007fe8:	0599      	lsls	r1, r3, #22
 8007fea:	d402      	bmi.n	8007ff2 <_fflush_r+0x3a>
 8007fec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fee:	f7ff faa3 	bl	8007538 <__retarget_lock_acquire_recursive>
 8007ff2:	4628      	mov	r0, r5
 8007ff4:	4621      	mov	r1, r4
 8007ff6:	f7ff ff59 	bl	8007eac <__sflush_r>
 8007ffa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ffc:	07da      	lsls	r2, r3, #31
 8007ffe:	4605      	mov	r5, r0
 8008000:	d4e0      	bmi.n	8007fc4 <_fflush_r+0xc>
 8008002:	89a3      	ldrh	r3, [r4, #12]
 8008004:	059b      	lsls	r3, r3, #22
 8008006:	d4dd      	bmi.n	8007fc4 <_fflush_r+0xc>
 8008008:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800800a:	f7ff fa96 	bl	800753a <__retarget_lock_release_recursive>
 800800e:	e7d9      	b.n	8007fc4 <_fflush_r+0xc>
 8008010:	4b05      	ldr	r3, [pc, #20]	; (8008028 <_fflush_r+0x70>)
 8008012:	429c      	cmp	r4, r3
 8008014:	d101      	bne.n	800801a <_fflush_r+0x62>
 8008016:	68ac      	ldr	r4, [r5, #8]
 8008018:	e7df      	b.n	8007fda <_fflush_r+0x22>
 800801a:	4b04      	ldr	r3, [pc, #16]	; (800802c <_fflush_r+0x74>)
 800801c:	429c      	cmp	r4, r3
 800801e:	bf08      	it	eq
 8008020:	68ec      	ldreq	r4, [r5, #12]
 8008022:	e7da      	b.n	8007fda <_fflush_r+0x22>
 8008024:	0800d3c4 	.word	0x0800d3c4
 8008028:	0800d3e4 	.word	0x0800d3e4
 800802c:	0800d3a4 	.word	0x0800d3a4

08008030 <_lseek_r>:
 8008030:	b538      	push	{r3, r4, r5, lr}
 8008032:	4d07      	ldr	r5, [pc, #28]	; (8008050 <_lseek_r+0x20>)
 8008034:	4604      	mov	r4, r0
 8008036:	4608      	mov	r0, r1
 8008038:	4611      	mov	r1, r2
 800803a:	2200      	movs	r2, #0
 800803c:	602a      	str	r2, [r5, #0]
 800803e:	461a      	mov	r2, r3
 8008040:	f7f9 fc0a 	bl	8001858 <_lseek>
 8008044:	1c43      	adds	r3, r0, #1
 8008046:	d102      	bne.n	800804e <_lseek_r+0x1e>
 8008048:	682b      	ldr	r3, [r5, #0]
 800804a:	b103      	cbz	r3, 800804e <_lseek_r+0x1e>
 800804c:	6023      	str	r3, [r4, #0]
 800804e:	bd38      	pop	{r3, r4, r5, pc}
 8008050:	20013b3c 	.word	0x20013b3c

08008054 <__swhatbuf_r>:
 8008054:	b570      	push	{r4, r5, r6, lr}
 8008056:	460e      	mov	r6, r1
 8008058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800805c:	2900      	cmp	r1, #0
 800805e:	b096      	sub	sp, #88	; 0x58
 8008060:	4614      	mov	r4, r2
 8008062:	461d      	mov	r5, r3
 8008064:	da08      	bge.n	8008078 <__swhatbuf_r+0x24>
 8008066:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800806a:	2200      	movs	r2, #0
 800806c:	602a      	str	r2, [r5, #0]
 800806e:	061a      	lsls	r2, r3, #24
 8008070:	d410      	bmi.n	8008094 <__swhatbuf_r+0x40>
 8008072:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008076:	e00e      	b.n	8008096 <__swhatbuf_r+0x42>
 8008078:	466a      	mov	r2, sp
 800807a:	f000 f8bb 	bl	80081f4 <_fstat_r>
 800807e:	2800      	cmp	r0, #0
 8008080:	dbf1      	blt.n	8008066 <__swhatbuf_r+0x12>
 8008082:	9a01      	ldr	r2, [sp, #4]
 8008084:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008088:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800808c:	425a      	negs	r2, r3
 800808e:	415a      	adcs	r2, r3
 8008090:	602a      	str	r2, [r5, #0]
 8008092:	e7ee      	b.n	8008072 <__swhatbuf_r+0x1e>
 8008094:	2340      	movs	r3, #64	; 0x40
 8008096:	2000      	movs	r0, #0
 8008098:	6023      	str	r3, [r4, #0]
 800809a:	b016      	add	sp, #88	; 0x58
 800809c:	bd70      	pop	{r4, r5, r6, pc}
	...

080080a0 <__smakebuf_r>:
 80080a0:	898b      	ldrh	r3, [r1, #12]
 80080a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80080a4:	079d      	lsls	r5, r3, #30
 80080a6:	4606      	mov	r6, r0
 80080a8:	460c      	mov	r4, r1
 80080aa:	d507      	bpl.n	80080bc <__smakebuf_r+0x1c>
 80080ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80080b0:	6023      	str	r3, [r4, #0]
 80080b2:	6123      	str	r3, [r4, #16]
 80080b4:	2301      	movs	r3, #1
 80080b6:	6163      	str	r3, [r4, #20]
 80080b8:	b002      	add	sp, #8
 80080ba:	bd70      	pop	{r4, r5, r6, pc}
 80080bc:	ab01      	add	r3, sp, #4
 80080be:	466a      	mov	r2, sp
 80080c0:	f7ff ffc8 	bl	8008054 <__swhatbuf_r>
 80080c4:	9900      	ldr	r1, [sp, #0]
 80080c6:	4605      	mov	r5, r0
 80080c8:	4630      	mov	r0, r6
 80080ca:	f7ff fa57 	bl	800757c <_malloc_r>
 80080ce:	b948      	cbnz	r0, 80080e4 <__smakebuf_r+0x44>
 80080d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080d4:	059a      	lsls	r2, r3, #22
 80080d6:	d4ef      	bmi.n	80080b8 <__smakebuf_r+0x18>
 80080d8:	f023 0303 	bic.w	r3, r3, #3
 80080dc:	f043 0302 	orr.w	r3, r3, #2
 80080e0:	81a3      	strh	r3, [r4, #12]
 80080e2:	e7e3      	b.n	80080ac <__smakebuf_r+0xc>
 80080e4:	4b0d      	ldr	r3, [pc, #52]	; (800811c <__smakebuf_r+0x7c>)
 80080e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80080e8:	89a3      	ldrh	r3, [r4, #12]
 80080ea:	6020      	str	r0, [r4, #0]
 80080ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080f0:	81a3      	strh	r3, [r4, #12]
 80080f2:	9b00      	ldr	r3, [sp, #0]
 80080f4:	6163      	str	r3, [r4, #20]
 80080f6:	9b01      	ldr	r3, [sp, #4]
 80080f8:	6120      	str	r0, [r4, #16]
 80080fa:	b15b      	cbz	r3, 8008114 <__smakebuf_r+0x74>
 80080fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008100:	4630      	mov	r0, r6
 8008102:	f000 f889 	bl	8008218 <_isatty_r>
 8008106:	b128      	cbz	r0, 8008114 <__smakebuf_r+0x74>
 8008108:	89a3      	ldrh	r3, [r4, #12]
 800810a:	f023 0303 	bic.w	r3, r3, #3
 800810e:	f043 0301 	orr.w	r3, r3, #1
 8008112:	81a3      	strh	r3, [r4, #12]
 8008114:	89a0      	ldrh	r0, [r4, #12]
 8008116:	4305      	orrs	r5, r0
 8008118:	81a5      	strh	r5, [r4, #12]
 800811a:	e7cd      	b.n	80080b8 <__smakebuf_r+0x18>
 800811c:	08007395 	.word	0x08007395

08008120 <__malloc_lock>:
 8008120:	4801      	ldr	r0, [pc, #4]	; (8008128 <__malloc_lock+0x8>)
 8008122:	f7ff ba09 	b.w	8007538 <__retarget_lock_acquire_recursive>
 8008126:	bf00      	nop
 8008128:	20013b30 	.word	0x20013b30

0800812c <__malloc_unlock>:
 800812c:	4801      	ldr	r0, [pc, #4]	; (8008134 <__malloc_unlock+0x8>)
 800812e:	f7ff ba04 	b.w	800753a <__retarget_lock_release_recursive>
 8008132:	bf00      	nop
 8008134:	20013b30 	.word	0x20013b30

08008138 <_free_r>:
 8008138:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800813a:	2900      	cmp	r1, #0
 800813c:	d044      	beq.n	80081c8 <_free_r+0x90>
 800813e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008142:	9001      	str	r0, [sp, #4]
 8008144:	2b00      	cmp	r3, #0
 8008146:	f1a1 0404 	sub.w	r4, r1, #4
 800814a:	bfb8      	it	lt
 800814c:	18e4      	addlt	r4, r4, r3
 800814e:	f7ff ffe7 	bl	8008120 <__malloc_lock>
 8008152:	4a1e      	ldr	r2, [pc, #120]	; (80081cc <_free_r+0x94>)
 8008154:	9801      	ldr	r0, [sp, #4]
 8008156:	6813      	ldr	r3, [r2, #0]
 8008158:	b933      	cbnz	r3, 8008168 <_free_r+0x30>
 800815a:	6063      	str	r3, [r4, #4]
 800815c:	6014      	str	r4, [r2, #0]
 800815e:	b003      	add	sp, #12
 8008160:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008164:	f7ff bfe2 	b.w	800812c <__malloc_unlock>
 8008168:	42a3      	cmp	r3, r4
 800816a:	d908      	bls.n	800817e <_free_r+0x46>
 800816c:	6825      	ldr	r5, [r4, #0]
 800816e:	1961      	adds	r1, r4, r5
 8008170:	428b      	cmp	r3, r1
 8008172:	bf01      	itttt	eq
 8008174:	6819      	ldreq	r1, [r3, #0]
 8008176:	685b      	ldreq	r3, [r3, #4]
 8008178:	1949      	addeq	r1, r1, r5
 800817a:	6021      	streq	r1, [r4, #0]
 800817c:	e7ed      	b.n	800815a <_free_r+0x22>
 800817e:	461a      	mov	r2, r3
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	b10b      	cbz	r3, 8008188 <_free_r+0x50>
 8008184:	42a3      	cmp	r3, r4
 8008186:	d9fa      	bls.n	800817e <_free_r+0x46>
 8008188:	6811      	ldr	r1, [r2, #0]
 800818a:	1855      	adds	r5, r2, r1
 800818c:	42a5      	cmp	r5, r4
 800818e:	d10b      	bne.n	80081a8 <_free_r+0x70>
 8008190:	6824      	ldr	r4, [r4, #0]
 8008192:	4421      	add	r1, r4
 8008194:	1854      	adds	r4, r2, r1
 8008196:	42a3      	cmp	r3, r4
 8008198:	6011      	str	r1, [r2, #0]
 800819a:	d1e0      	bne.n	800815e <_free_r+0x26>
 800819c:	681c      	ldr	r4, [r3, #0]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	6053      	str	r3, [r2, #4]
 80081a2:	4421      	add	r1, r4
 80081a4:	6011      	str	r1, [r2, #0]
 80081a6:	e7da      	b.n	800815e <_free_r+0x26>
 80081a8:	d902      	bls.n	80081b0 <_free_r+0x78>
 80081aa:	230c      	movs	r3, #12
 80081ac:	6003      	str	r3, [r0, #0]
 80081ae:	e7d6      	b.n	800815e <_free_r+0x26>
 80081b0:	6825      	ldr	r5, [r4, #0]
 80081b2:	1961      	adds	r1, r4, r5
 80081b4:	428b      	cmp	r3, r1
 80081b6:	bf04      	itt	eq
 80081b8:	6819      	ldreq	r1, [r3, #0]
 80081ba:	685b      	ldreq	r3, [r3, #4]
 80081bc:	6063      	str	r3, [r4, #4]
 80081be:	bf04      	itt	eq
 80081c0:	1949      	addeq	r1, r1, r5
 80081c2:	6021      	streq	r1, [r4, #0]
 80081c4:	6054      	str	r4, [r2, #4]
 80081c6:	e7ca      	b.n	800815e <_free_r+0x26>
 80081c8:	b003      	add	sp, #12
 80081ca:	bd30      	pop	{r4, r5, pc}
 80081cc:	20013b34 	.word	0x20013b34

080081d0 <_read_r>:
 80081d0:	b538      	push	{r3, r4, r5, lr}
 80081d2:	4d07      	ldr	r5, [pc, #28]	; (80081f0 <_read_r+0x20>)
 80081d4:	4604      	mov	r4, r0
 80081d6:	4608      	mov	r0, r1
 80081d8:	4611      	mov	r1, r2
 80081da:	2200      	movs	r2, #0
 80081dc:	602a      	str	r2, [r5, #0]
 80081de:	461a      	mov	r2, r3
 80081e0:	f7f9 fada 	bl	8001798 <_read>
 80081e4:	1c43      	adds	r3, r0, #1
 80081e6:	d102      	bne.n	80081ee <_read_r+0x1e>
 80081e8:	682b      	ldr	r3, [r5, #0]
 80081ea:	b103      	cbz	r3, 80081ee <_read_r+0x1e>
 80081ec:	6023      	str	r3, [r4, #0]
 80081ee:	bd38      	pop	{r3, r4, r5, pc}
 80081f0:	20013b3c 	.word	0x20013b3c

080081f4 <_fstat_r>:
 80081f4:	b538      	push	{r3, r4, r5, lr}
 80081f6:	4d07      	ldr	r5, [pc, #28]	; (8008214 <_fstat_r+0x20>)
 80081f8:	2300      	movs	r3, #0
 80081fa:	4604      	mov	r4, r0
 80081fc:	4608      	mov	r0, r1
 80081fe:	4611      	mov	r1, r2
 8008200:	602b      	str	r3, [r5, #0]
 8008202:	f7f9 fb0e 	bl	8001822 <_fstat>
 8008206:	1c43      	adds	r3, r0, #1
 8008208:	d102      	bne.n	8008210 <_fstat_r+0x1c>
 800820a:	682b      	ldr	r3, [r5, #0]
 800820c:	b103      	cbz	r3, 8008210 <_fstat_r+0x1c>
 800820e:	6023      	str	r3, [r4, #0]
 8008210:	bd38      	pop	{r3, r4, r5, pc}
 8008212:	bf00      	nop
 8008214:	20013b3c 	.word	0x20013b3c

08008218 <_isatty_r>:
 8008218:	b538      	push	{r3, r4, r5, lr}
 800821a:	4d06      	ldr	r5, [pc, #24]	; (8008234 <_isatty_r+0x1c>)
 800821c:	2300      	movs	r3, #0
 800821e:	4604      	mov	r4, r0
 8008220:	4608      	mov	r0, r1
 8008222:	602b      	str	r3, [r5, #0]
 8008224:	f7f9 fb0d 	bl	8001842 <_isatty>
 8008228:	1c43      	adds	r3, r0, #1
 800822a:	d102      	bne.n	8008232 <_isatty_r+0x1a>
 800822c:	682b      	ldr	r3, [r5, #0]
 800822e:	b103      	cbz	r3, 8008232 <_isatty_r+0x1a>
 8008230:	6023      	str	r3, [r4, #0]
 8008232:	bd38      	pop	{r3, r4, r5, pc}
 8008234:	20013b3c 	.word	0x20013b3c

08008238 <_init>:
 8008238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800823a:	bf00      	nop
 800823c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800823e:	bc08      	pop	{r3}
 8008240:	469e      	mov	lr, r3
 8008242:	4770      	bx	lr

08008244 <_fini>:
 8008244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008246:	bf00      	nop
 8008248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800824a:	bc08      	pop	{r3}
 800824c:	469e      	mov	lr, r3
 800824e:	4770      	bx	lr
