
swont_ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048a8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08004a30  08004a30  00014a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b54  08004b54  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004b54  08004b54  00014b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b5c  08004b5c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b5c  08004b5c  00014b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b60  08004b60  00014b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004b64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000133d4  20000070  08004bd4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20013444  08004bd4  00023444  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd8f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002361  00000000  00000000  0002ce2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c78  00000000  00000000  0002f190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b50  00000000  00000000  0002fe08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000229e7  00000000  00000000  00030958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f39b  00000000  00000000  0005333f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca058  00000000  00000000  000626da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012c732  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003354  00000000  00000000  0012c784  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004a18 	.word	0x08004a18

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08004a18 	.word	0x08004a18

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <FL_Input>:
//--------------------------------------------------------------
// @brief Function load input into structs
// @details This function loads the different arguments into the assigned structs
//--------------------------------------------------------------
void FL_Input()
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	switch(input.line_rx_buffer[firstCharacter])
 80004d0:	4ba6      	ldr	r3, [pc, #664]	; (800076c <FL_Input+0x2a0>)
 80004d2:	785b      	ldrb	r3, [r3, #1]
 80004d4:	3b62      	subs	r3, #98	; 0x62
 80004d6:	2b12      	cmp	r3, #18
 80004d8:	f200 8144 	bhi.w	8000764 <FL_Input+0x298>
 80004dc:	a201      	add	r2, pc, #4	; (adr r2, 80004e4 <FL_Input+0x18>)
 80004de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004e2:	bf00      	nop
 80004e4:	08000707 	.word	0x08000707
 80004e8:	08000751 	.word	0x08000751
 80004ec:	08000765 	.word	0x08000765
 80004f0:	08000765 	.word	0x08000765
 80004f4:	08000765 	.word	0x08000765
 80004f8:	08000765 	.word	0x08000765
 80004fc:	08000765 	.word	0x08000765
 8000500:	08000765 	.word	0x08000765
 8000504:	08000765 	.word	0x08000765
 8000508:	08000765 	.word	0x08000765
 800050c:	08000531 	.word	0x08000531
 8000510:	08000765 	.word	0x08000765
 8000514:	08000765 	.word	0x08000765
 8000518:	08000765 	.word	0x08000765
 800051c:	08000765 	.word	0x08000765
 8000520:	08000765 	.word	0x08000765
 8000524:	08000651 	.word	0x08000651
 8000528:	08000765 	.word	0x08000765
 800052c:	080005bd 	.word	0x080005bd
	{
		case line:	//if the function line is called
			arg(argumentONE, string_container, NOTEXT);	//collects the information from argument 1
 8000530:	2200      	movs	r2, #0
 8000532:	498f      	ldr	r1, [pc, #572]	; (8000770 <FL_Input+0x2a4>)
 8000534:	2001      	movs	r0, #1
 8000536:	f000 f935 	bl	80007a4 <arg>
			line_s.x1 = atoi(string_container);	//stores the information from argument 1 into line struct
 800053a:	488d      	ldr	r0, [pc, #564]	; (8000770 <FL_Input+0x2a4>)
 800053c:	f004 f9a2 	bl	8004884 <atoi>
 8000540:	4603      	mov	r3, r0
 8000542:	b29a      	uxth	r2, r3
 8000544:	4b8b      	ldr	r3, [pc, #556]	; (8000774 <FL_Input+0x2a8>)
 8000546:	801a      	strh	r2, [r3, #0]
			arg(argumentTWO, string_container, NOTEXT);	//etc
 8000548:	2200      	movs	r2, #0
 800054a:	4989      	ldr	r1, [pc, #548]	; (8000770 <FL_Input+0x2a4>)
 800054c:	2002      	movs	r0, #2
 800054e:	f000 f929 	bl	80007a4 <arg>
			line_s.y1 = atoi(string_container);
 8000552:	4887      	ldr	r0, [pc, #540]	; (8000770 <FL_Input+0x2a4>)
 8000554:	f004 f996 	bl	8004884 <atoi>
 8000558:	4603      	mov	r3, r0
 800055a:	b29a      	uxth	r2, r3
 800055c:	4b85      	ldr	r3, [pc, #532]	; (8000774 <FL_Input+0x2a8>)
 800055e:	805a      	strh	r2, [r3, #2]
			arg(argumentTHREE, string_container, NOTEXT);
 8000560:	2200      	movs	r2, #0
 8000562:	4983      	ldr	r1, [pc, #524]	; (8000770 <FL_Input+0x2a4>)
 8000564:	2003      	movs	r0, #3
 8000566:	f000 f91d 	bl	80007a4 <arg>
			line_s.x2 = atoi(string_container);
 800056a:	4881      	ldr	r0, [pc, #516]	; (8000770 <FL_Input+0x2a4>)
 800056c:	f004 f98a 	bl	8004884 <atoi>
 8000570:	4603      	mov	r3, r0
 8000572:	b29a      	uxth	r2, r3
 8000574:	4b7f      	ldr	r3, [pc, #508]	; (8000774 <FL_Input+0x2a8>)
 8000576:	809a      	strh	r2, [r3, #4]
			arg(argumentFOUR, string_container, NOTEXT);
 8000578:	2200      	movs	r2, #0
 800057a:	497d      	ldr	r1, [pc, #500]	; (8000770 <FL_Input+0x2a4>)
 800057c:	2004      	movs	r0, #4
 800057e:	f000 f911 	bl	80007a4 <arg>
			line_s.y2 = atoi(string_container);
 8000582:	487b      	ldr	r0, [pc, #492]	; (8000770 <FL_Input+0x2a4>)
 8000584:	f004 f97e 	bl	8004884 <atoi>
 8000588:	4603      	mov	r3, r0
 800058a:	b29a      	uxth	r2, r3
 800058c:	4b79      	ldr	r3, [pc, #484]	; (8000774 <FL_Input+0x2a8>)
 800058e:	80da      	strh	r2, [r3, #6]
			arg(argumentFIVE, string_container, NOTEXT);
 8000590:	2200      	movs	r2, #0
 8000592:	4977      	ldr	r1, [pc, #476]	; (8000770 <FL_Input+0x2a4>)
 8000594:	2005      	movs	r0, #5
 8000596:	f000 f905 	bl	80007a4 <arg>
			strcpy(line_s.color, string_container);
 800059a:	4975      	ldr	r1, [pc, #468]	; (8000770 <FL_Input+0x2a4>)
 800059c:	4876      	ldr	r0, [pc, #472]	; (8000778 <FL_Input+0x2ac>)
 800059e:	f004 f9a7 	bl	80048f0 <strcpy>
			arg(argumentSIX, string_container, NOTEXT);
 80005a2:	2200      	movs	r2, #0
 80005a4:	4972      	ldr	r1, [pc, #456]	; (8000770 <FL_Input+0x2a4>)
 80005a6:	2006      	movs	r0, #6
 80005a8:	f000 f8fc 	bl	80007a4 <arg>
			line_s.weight = atoi(string_container);
 80005ac:	4870      	ldr	r0, [pc, #448]	; (8000770 <FL_Input+0x2a4>)
 80005ae:	f004 f969 	bl	8004884 <atoi>
 80005b2:	4603      	mov	r3, r0
 80005b4:	b2da      	uxtb	r2, r3
 80005b6:	4b6f      	ldr	r3, [pc, #444]	; (8000774 <FL_Input+0x2a8>)
 80005b8:	751a      	strb	r2, [r3, #20]
			break;
 80005ba:	e0d4      	b.n	8000766 <FL_Input+0x29a>
		case text:	//if the function text is called
			arg(argumentONE, string_container, NOTEXT);	//collects the information from argument 1
 80005bc:	2200      	movs	r2, #0
 80005be:	496c      	ldr	r1, [pc, #432]	; (8000770 <FL_Input+0x2a4>)
 80005c0:	2001      	movs	r0, #1
 80005c2:	f000 f8ef 	bl	80007a4 <arg>
			text_s.xlup = atoi(string_container);	//stores the information from argument 1 into text struct
 80005c6:	486a      	ldr	r0, [pc, #424]	; (8000770 <FL_Input+0x2a4>)
 80005c8:	f004 f95c 	bl	8004884 <atoi>
 80005cc:	4603      	mov	r3, r0
 80005ce:	b29a      	uxth	r2, r3
 80005d0:	4b6a      	ldr	r3, [pc, #424]	; (800077c <FL_Input+0x2b0>)
 80005d2:	801a      	strh	r2, [r3, #0]
			arg(argumentTWO, string_container, NOTEXT);	//etc
 80005d4:	2200      	movs	r2, #0
 80005d6:	4966      	ldr	r1, [pc, #408]	; (8000770 <FL_Input+0x2a4>)
 80005d8:	2002      	movs	r0, #2
 80005da:	f000 f8e3 	bl	80007a4 <arg>
			text_s.ylup = atoi(string_container);
 80005de:	4864      	ldr	r0, [pc, #400]	; (8000770 <FL_Input+0x2a4>)
 80005e0:	f004 f950 	bl	8004884 <atoi>
 80005e4:	4603      	mov	r3, r0
 80005e6:	b29a      	uxth	r2, r3
 80005e8:	4b64      	ldr	r3, [pc, #400]	; (800077c <FL_Input+0x2b0>)
 80005ea:	805a      	strh	r2, [r3, #2]
			arg(argumentTHREE, string_container, NOTEXT);
 80005ec:	2200      	movs	r2, #0
 80005ee:	4960      	ldr	r1, [pc, #384]	; (8000770 <FL_Input+0x2a4>)
 80005f0:	2003      	movs	r0, #3
 80005f2:	f000 f8d7 	bl	80007a4 <arg>
			strcpy(text_s.color, string_container);
 80005f6:	495e      	ldr	r1, [pc, #376]	; (8000770 <FL_Input+0x2a4>)
 80005f8:	4861      	ldr	r0, [pc, #388]	; (8000780 <FL_Input+0x2b4>)
 80005fa:	f004 f979 	bl	80048f0 <strcpy>
			arg(argumentFOUR, string_container, YESTEXT);
 80005fe:	2201      	movs	r2, #1
 8000600:	495b      	ldr	r1, [pc, #364]	; (8000770 <FL_Input+0x2a4>)
 8000602:	2004      	movs	r0, #4
 8000604:	f000 f8ce 	bl	80007a4 <arg>
			strcpy(text_s.textin, string_container);
 8000608:	4959      	ldr	r1, [pc, #356]	; (8000770 <FL_Input+0x2a4>)
 800060a:	485e      	ldr	r0, [pc, #376]	; (8000784 <FL_Input+0x2b8>)
 800060c:	f004 f970 	bl	80048f0 <strcpy>
			arg(argumentFIVE, string_container, YESTEXT);
 8000610:	2201      	movs	r2, #1
 8000612:	4957      	ldr	r1, [pc, #348]	; (8000770 <FL_Input+0x2a4>)
 8000614:	2005      	movs	r0, #5
 8000616:	f000 f8c5 	bl	80007a4 <arg>
			strcpy(text_s.fontname, string_container);
 800061a:	4955      	ldr	r1, [pc, #340]	; (8000770 <FL_Input+0x2a4>)
 800061c:	485a      	ldr	r0, [pc, #360]	; (8000788 <FL_Input+0x2bc>)
 800061e:	f004 f967 	bl	80048f0 <strcpy>
			arg(argumentSIX, string_container, NOTEXT);
 8000622:	2200      	movs	r2, #0
 8000624:	4952      	ldr	r1, [pc, #328]	; (8000770 <FL_Input+0x2a4>)
 8000626:	2006      	movs	r0, #6
 8000628:	f000 f8bc 	bl	80007a4 <arg>
			text_s.fontsize = atoi(string_container);
 800062c:	4850      	ldr	r0, [pc, #320]	; (8000770 <FL_Input+0x2a4>)
 800062e:	f004 f929 	bl	8004884 <atoi>
 8000632:	4603      	mov	r3, r0
 8000634:	b2da      	uxtb	r2, r3
 8000636:	4b51      	ldr	r3, [pc, #324]	; (800077c <FL_Input+0x2b0>)
 8000638:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
			arg(argumentSEVEN, string_container, NOTEXT);
 800063c:	2200      	movs	r2, #0
 800063e:	494c      	ldr	r1, [pc, #304]	; (8000770 <FL_Input+0x2a4>)
 8000640:	2007      	movs	r0, #7
 8000642:	f000 f8af 	bl	80007a4 <arg>
			strcpy(text_s.fontstyle, string_container);
 8000646:	494a      	ldr	r1, [pc, #296]	; (8000770 <FL_Input+0x2a4>)
 8000648:	4850      	ldr	r0, [pc, #320]	; (800078c <FL_Input+0x2c0>)
 800064a:	f004 f951 	bl	80048f0 <strcpy>
			break;
 800064e:	e08a      	b.n	8000766 <FL_Input+0x29a>
		case rectangle:	//if the function rectangle is called
			arg(argumentONE, string_container, NOTEXT);	//collects the information from argument 1
 8000650:	2200      	movs	r2, #0
 8000652:	4947      	ldr	r1, [pc, #284]	; (8000770 <FL_Input+0x2a4>)
 8000654:	2001      	movs	r0, #1
 8000656:	f000 f8a5 	bl	80007a4 <arg>
			rectangle_s.xlup = atoi(string_container);	//stores the information from argument 1 into rectangle struct
 800065a:	4845      	ldr	r0, [pc, #276]	; (8000770 <FL_Input+0x2a4>)
 800065c:	f004 f912 	bl	8004884 <atoi>
 8000660:	4603      	mov	r3, r0
 8000662:	b29a      	uxth	r2, r3
 8000664:	4b4a      	ldr	r3, [pc, #296]	; (8000790 <FL_Input+0x2c4>)
 8000666:	801a      	strh	r2, [r3, #0]
			arg(argumentTWO, string_container, NOTEXT);
 8000668:	2200      	movs	r2, #0
 800066a:	4941      	ldr	r1, [pc, #260]	; (8000770 <FL_Input+0x2a4>)
 800066c:	2002      	movs	r0, #2
 800066e:	f000 f899 	bl	80007a4 <arg>
			rectangle_s.ylup = atoi(string_container);
 8000672:	483f      	ldr	r0, [pc, #252]	; (8000770 <FL_Input+0x2a4>)
 8000674:	f004 f906 	bl	8004884 <atoi>
 8000678:	4603      	mov	r3, r0
 800067a:	b29a      	uxth	r2, r3
 800067c:	4b44      	ldr	r3, [pc, #272]	; (8000790 <FL_Input+0x2c4>)
 800067e:	805a      	strh	r2, [r3, #2]
			arg(argumentTHREE, string_container, NOTEXT);
 8000680:	2200      	movs	r2, #0
 8000682:	493b      	ldr	r1, [pc, #236]	; (8000770 <FL_Input+0x2a4>)
 8000684:	2003      	movs	r0, #3
 8000686:	f000 f88d 	bl	80007a4 <arg>
			rectangle_s.width = atoi(string_container);
 800068a:	4839      	ldr	r0, [pc, #228]	; (8000770 <FL_Input+0x2a4>)
 800068c:	f004 f8fa 	bl	8004884 <atoi>
 8000690:	4603      	mov	r3, r0
 8000692:	b2da      	uxtb	r2, r3
 8000694:	4b3e      	ldr	r3, [pc, #248]	; (8000790 <FL_Input+0x2c4>)
 8000696:	711a      	strb	r2, [r3, #4]
			arg(argumentFOUR, string_container, NOTEXT);
 8000698:	2200      	movs	r2, #0
 800069a:	4935      	ldr	r1, [pc, #212]	; (8000770 <FL_Input+0x2a4>)
 800069c:	2004      	movs	r0, #4
 800069e:	f000 f881 	bl	80007a4 <arg>
			rectangle_s.height = atoi(string_container);
 80006a2:	4833      	ldr	r0, [pc, #204]	; (8000770 <FL_Input+0x2a4>)
 80006a4:	f004 f8ee 	bl	8004884 <atoi>
 80006a8:	4603      	mov	r3, r0
 80006aa:	b2da      	uxtb	r2, r3
 80006ac:	4b38      	ldr	r3, [pc, #224]	; (8000790 <FL_Input+0x2c4>)
 80006ae:	715a      	strb	r2, [r3, #5]
			arg(argumentFIVE, string_container, NOTEXT);
 80006b0:	2200      	movs	r2, #0
 80006b2:	492f      	ldr	r1, [pc, #188]	; (8000770 <FL_Input+0x2a4>)
 80006b4:	2005      	movs	r0, #5
 80006b6:	f000 f875 	bl	80007a4 <arg>
			strcpy(rectangle_s.color, string_container);
 80006ba:	492d      	ldr	r1, [pc, #180]	; (8000770 <FL_Input+0x2a4>)
 80006bc:	4835      	ldr	r0, [pc, #212]	; (8000794 <FL_Input+0x2c8>)
 80006be:	f004 f917 	bl	80048f0 <strcpy>
			arg(argumentSIX, string_container, NOTEXT);
 80006c2:	2200      	movs	r2, #0
 80006c4:	492a      	ldr	r1, [pc, #168]	; (8000770 <FL_Input+0x2a4>)
 80006c6:	2006      	movs	r0, #6
 80006c8:	f000 f86c 	bl	80007a4 <arg>
			rectangle_s.filled = atoi(string_container);
 80006cc:	4828      	ldr	r0, [pc, #160]	; (8000770 <FL_Input+0x2a4>)
 80006ce:	f004 f8d9 	bl	8004884 <atoi>
 80006d2:	4603      	mov	r3, r0
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <FL_Input+0x2c4>)
 80006d8:	749a      	strb	r2, [r3, #18]
			arg(argumentSEVEN, string_container, NOTEXT);
 80006da:	2200      	movs	r2, #0
 80006dc:	4924      	ldr	r1, [pc, #144]	; (8000770 <FL_Input+0x2a4>)
 80006de:	2007      	movs	r0, #7
 80006e0:	f000 f860 	bl	80007a4 <arg>
			strcpy(rectangle_s.bordercolor, string_container);
 80006e4:	4922      	ldr	r1, [pc, #136]	; (8000770 <FL_Input+0x2a4>)
 80006e6:	482c      	ldr	r0, [pc, #176]	; (8000798 <FL_Input+0x2cc>)
 80006e8:	f004 f902 	bl	80048f0 <strcpy>
			arg(argumentEIGHT, string_container, NOTEXT);
 80006ec:	2200      	movs	r2, #0
 80006ee:	4920      	ldr	r1, [pc, #128]	; (8000770 <FL_Input+0x2a4>)
 80006f0:	2008      	movs	r0, #8
 80006f2:	f000 f857 	bl	80007a4 <arg>
			rectangle_s.linewidth = atoi(string_container);
 80006f6:	481e      	ldr	r0, [pc, #120]	; (8000770 <FL_Input+0x2a4>)
 80006f8:	f004 f8c4 	bl	8004884 <atoi>
 80006fc:	4603      	mov	r3, r0
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	4b23      	ldr	r3, [pc, #140]	; (8000790 <FL_Input+0x2c4>)
 8000702:	77da      	strb	r2, [r3, #31]
			break;
 8000704:	e02f      	b.n	8000766 <FL_Input+0x29a>
		case bitmap:	//if the function bitmap is called
			arg(argumentONE, string_container, NOTEXT);	//collects the information from argument 1
 8000706:	2200      	movs	r2, #0
 8000708:	4919      	ldr	r1, [pc, #100]	; (8000770 <FL_Input+0x2a4>)
 800070a:	2001      	movs	r0, #1
 800070c:	f000 f84a 	bl	80007a4 <arg>
			bitmap_s.nr = atoi(string_container);	//stores the information from argument 1 into bitmap struct
 8000710:	4817      	ldr	r0, [pc, #92]	; (8000770 <FL_Input+0x2a4>)
 8000712:	f004 f8b7 	bl	8004884 <atoi>
 8000716:	4603      	mov	r3, r0
 8000718:	b2da      	uxtb	r2, r3
 800071a:	4b20      	ldr	r3, [pc, #128]	; (800079c <FL_Input+0x2d0>)
 800071c:	701a      	strb	r2, [r3, #0]
			arg(argumentTWO, string_container, NOTEXT);
 800071e:	2200      	movs	r2, #0
 8000720:	4913      	ldr	r1, [pc, #76]	; (8000770 <FL_Input+0x2a4>)
 8000722:	2002      	movs	r0, #2
 8000724:	f000 f83e 	bl	80007a4 <arg>
			bitmap_s.xlup = atoi(string_container);
 8000728:	4811      	ldr	r0, [pc, #68]	; (8000770 <FL_Input+0x2a4>)
 800072a:	f004 f8ab 	bl	8004884 <atoi>
 800072e:	4603      	mov	r3, r0
 8000730:	b29a      	uxth	r2, r3
 8000732:	4b1a      	ldr	r3, [pc, #104]	; (800079c <FL_Input+0x2d0>)
 8000734:	805a      	strh	r2, [r3, #2]
			arg(argumentTHREE, string_container, NOTEXT);
 8000736:	2200      	movs	r2, #0
 8000738:	490d      	ldr	r1, [pc, #52]	; (8000770 <FL_Input+0x2a4>)
 800073a:	2003      	movs	r0, #3
 800073c:	f000 f832 	bl	80007a4 <arg>
			bitmap_s.ylup = atoi(string_container);
 8000740:	480b      	ldr	r0, [pc, #44]	; (8000770 <FL_Input+0x2a4>)
 8000742:	f004 f89f 	bl	8004884 <atoi>
 8000746:	4603      	mov	r3, r0
 8000748:	b29a      	uxth	r2, r3
 800074a:	4b14      	ldr	r3, [pc, #80]	; (800079c <FL_Input+0x2d0>)
 800074c:	809a      	strh	r2, [r3, #4]
			break;
 800074e:	e00a      	b.n	8000766 <FL_Input+0x29a>
		case clearscreen:	//if the function clearscreen is called
			arg(argumentONE, string_container, NOTEXT);	//collects the information from argument 1
 8000750:	2200      	movs	r2, #0
 8000752:	4907      	ldr	r1, [pc, #28]	; (8000770 <FL_Input+0x2a4>)
 8000754:	2001      	movs	r0, #1
 8000756:	f000 f825 	bl	80007a4 <arg>
			strcpy(clearscreen_s.color, string_container);	//stores the information from argument 1 into line struct
 800075a:	4905      	ldr	r1, [pc, #20]	; (8000770 <FL_Input+0x2a4>)
 800075c:	4810      	ldr	r0, [pc, #64]	; (80007a0 <FL_Input+0x2d4>)
 800075e:	f004 f8c7 	bl	80048f0 <strcpy>
			break;
 8000762:	e000      	b.n	8000766 <FL_Input+0x29a>
		default:
			break;
 8000764:	bf00      	nop
	}

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000214 	.word	0x20000214
 8000770:	2000008c 	.word	0x2000008c
 8000774:	2000010c 	.word	0x2000010c
 8000778:	20000114 	.word	0x20000114
 800077c:	20000158 	.word	0x20000158
 8000780:	2000015c 	.word	0x2000015c
 8000784:	20000168 	.word	0x20000168
 8000788:	200001e8 	.word	0x200001e8
 800078c:	20000207 	.word	0x20000207
 8000790:	20000138 	.word	0x20000138
 8000794:	2000013e 	.word	0x2000013e
 8000798:	2000014b 	.word	0x2000014b
 800079c:	20000124 	.word	0x20000124
 80007a0:	2000012c 	.word	0x2000012c

080007a4 <arg>:
// @param[in] a: The variable that determines which argument has to be read
// @param[in] *string_container: A pointer where the string will be put into
// @param[in] text_trigger: A boolean that determines if the argument is a text or not
//--------------------------------------------------------------
void arg(uint8_t a,char *string_container ,bool text_trigger)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	6039      	str	r1, [r7, #0]
 80007ae:	71fb      	strb	r3, [r7, #7]
 80007b0:	4613      	mov	r3, r2
 80007b2:	71bb      	strb	r3, [r7, #6]
	uint8_t i = 0;	//counter
 80007b4:	2300      	movs	r3, #0
 80007b6:	73fb      	strb	r3, [r7, #15]
	uint8_t j = 0;	//counter
 80007b8:	2300      	movs	r3, #0
 80007ba:	73bb      	strb	r3, [r7, #14]
	uint8_t arg_counter = 0;	//is needed to check what argument is currently beeing read
 80007bc:	2300      	movs	r3, #0
 80007be:	737b      	strb	r3, [r7, #13]
	uint8_t arg_character_counter = 0;	//checks what the current character from the argument is
 80007c0:	2300      	movs	r3, #0
 80007c2:	733b      	strb	r3, [r7, #12]
	for (j=0; j<input.msglen; j++)	//cleans string container
 80007c4:	2300      	movs	r3, #0
 80007c6:	73bb      	strb	r3, [r7, #14]
 80007c8:	e007      	b.n	80007da <arg+0x36>
	string_container[j] = 0;
 80007ca:	7bbb      	ldrb	r3, [r7, #14]
 80007cc:	683a      	ldr	r2, [r7, #0]
 80007ce:	4413      	add	r3, r2
 80007d0:	2200      	movs	r2, #0
 80007d2:	701a      	strb	r2, [r3, #0]
	for (j=0; j<input.msglen; j++)	//cleans string container
 80007d4:	7bbb      	ldrb	r3, [r7, #14]
 80007d6:	3301      	adds	r3, #1
 80007d8:	73bb      	strb	r3, [r7, #14]
 80007da:	7bba      	ldrb	r2, [r7, #14]
 80007dc:	4b30      	ldr	r3, [pc, #192]	; (80008a0 <arg+0xfc>)
 80007de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80007e2:	429a      	cmp	r2, r3
 80007e4:	dbf1      	blt.n	80007ca <arg+0x26>
	while(i <= input.msglen)
 80007e6:	e04e      	b.n	8000886 <arg+0xe2>
			{
				if(input.line_rx_buffer[i] == ',')	//if current character is a ',' the argument counter goes up
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
 80007ea:	4a2d      	ldr	r2, [pc, #180]	; (80008a0 <arg+0xfc>)
 80007ec:	4413      	add	r3, r2
 80007ee:	785b      	ldrb	r3, [r3, #1]
 80007f0:	2b2c      	cmp	r3, #44	; 0x2c
 80007f2:	d106      	bne.n	8000802 <arg+0x5e>
				{
					arg_counter++;
 80007f4:	7b7b      	ldrb	r3, [r7, #13]
 80007f6:	3301      	adds	r3, #1
 80007f8:	737b      	strb	r3, [r7, #13]
					i++;
 80007fa:	7bfb      	ldrb	r3, [r7, #15]
 80007fc:	3301      	adds	r3, #1
 80007fe:	73fb      	strb	r3, [r7, #15]
 8000800:	e041      	b.n	8000886 <arg+0xe2>
				}
				else if(input.line_rx_buffer[i] == ' ' && text_trigger == false)	//if its a space it doesnt get read
 8000802:	7bfb      	ldrb	r3, [r7, #15]
 8000804:	4a26      	ldr	r2, [pc, #152]	; (80008a0 <arg+0xfc>)
 8000806:	4413      	add	r3, r2
 8000808:	785b      	ldrb	r3, [r3, #1]
 800080a:	2b20      	cmp	r3, #32
 800080c:	d109      	bne.n	8000822 <arg+0x7e>
 800080e:	79bb      	ldrb	r3, [r7, #6]
 8000810:	f083 0301 	eor.w	r3, r3, #1
 8000814:	b2db      	uxtb	r3, r3
 8000816:	2b00      	cmp	r3, #0
 8000818:	d003      	beq.n	8000822 <arg+0x7e>
				i++;
 800081a:	7bfb      	ldrb	r3, [r7, #15]
 800081c:	3301      	adds	r3, #1
 800081e:	73fb      	strb	r3, [r7, #15]
 8000820:	e031      	b.n	8000886 <arg+0xe2>
				else if(input.line_rx_buffer[i] == ' ' && text_trigger == true && arg_counter == a)	//if its a space but its in a text argument, it gets read
 8000822:	7bfb      	ldrb	r3, [r7, #15]
 8000824:	4a1e      	ldr	r2, [pc, #120]	; (80008a0 <arg+0xfc>)
 8000826:	4413      	add	r3, r2
 8000828:	785b      	ldrb	r3, [r3, #1]
 800082a:	2b20      	cmp	r3, #32
 800082c:	d115      	bne.n	800085a <arg+0xb6>
 800082e:	79bb      	ldrb	r3, [r7, #6]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d012      	beq.n	800085a <arg+0xb6>
 8000834:	7b7a      	ldrb	r2, [r7, #13]
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	429a      	cmp	r2, r3
 800083a:	d10e      	bne.n	800085a <arg+0xb6>
				{
					string_container[arg_character_counter++] = input.line_rx_buffer[i++];
 800083c:	7bfb      	ldrb	r3, [r7, #15]
 800083e:	1c5a      	adds	r2, r3, #1
 8000840:	73fa      	strb	r2, [r7, #15]
 8000842:	4619      	mov	r1, r3
 8000844:	7b3b      	ldrb	r3, [r7, #12]
 8000846:	1c5a      	adds	r2, r3, #1
 8000848:	733a      	strb	r2, [r7, #12]
 800084a:	461a      	mov	r2, r3
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	4413      	add	r3, r2
 8000850:	4a13      	ldr	r2, [pc, #76]	; (80008a0 <arg+0xfc>)
 8000852:	440a      	add	r2, r1
 8000854:	7852      	ldrb	r2, [r2, #1]
 8000856:	701a      	strb	r2, [r3, #0]
 8000858:	e015      	b.n	8000886 <arg+0xe2>
				}
				else if(arg_counter == a)	//if its a character in the correct argument it gets read
 800085a:	7b7a      	ldrb	r2, [r7, #13]
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	429a      	cmp	r2, r3
 8000860:	d10e      	bne.n	8000880 <arg+0xdc>
				string_container[arg_character_counter++] = input.line_rx_buffer[i++];
 8000862:	7bfb      	ldrb	r3, [r7, #15]
 8000864:	1c5a      	adds	r2, r3, #1
 8000866:	73fa      	strb	r2, [r7, #15]
 8000868:	4619      	mov	r1, r3
 800086a:	7b3b      	ldrb	r3, [r7, #12]
 800086c:	1c5a      	adds	r2, r3, #1
 800086e:	733a      	strb	r2, [r7, #12]
 8000870:	461a      	mov	r2, r3
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	4413      	add	r3, r2
 8000876:	4a0a      	ldr	r2, [pc, #40]	; (80008a0 <arg+0xfc>)
 8000878:	440a      	add	r2, r1
 800087a:	7852      	ldrb	r2, [r2, #1]
 800087c:	701a      	strb	r2, [r3, #0]
 800087e:	e002      	b.n	8000886 <arg+0xe2>
				else i++;	//else skips
 8000880:	7bfb      	ldrb	r3, [r7, #15]
 8000882:	3301      	adds	r3, #1
 8000884:	73fb      	strb	r3, [r7, #15]
	while(i <= input.msglen)
 8000886:	7bfa      	ldrb	r2, [r7, #15]
 8000888:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <arg+0xfc>)
 800088a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800088e:	429a      	cmp	r2, r3
 8000890:	ddaa      	ble.n	80007e8 <arg+0x44>
			}
}
 8000892:	bf00      	nop
 8000894:	bf00      	nop
 8000896:	3714      	adds	r7, #20
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr
 80008a0:	20000214 	.word	0x20000214

080008a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_DMA_Init+0x3c>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a0b      	ldr	r2, [pc, #44]	; (80008e0 <MX_DMA_Init+0x3c>)
 80008b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_DMA_Init+0x3c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2100      	movs	r1, #0
 80008ca:	2044      	movs	r0, #68	; 0x44
 80008cc:	f000 fe7d 	bl	80015ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80008d0:	2044      	movs	r0, #68	; 0x44
 80008d2:	f000 fe96 	bl	8001602 <HAL_NVIC_EnableIRQ>

}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40023800 	.word	0x40023800

080008e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08a      	sub	sp, #40	; 0x28
 80008e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	613b      	str	r3, [r7, #16]
 80008fe:	4b32      	ldr	r3, [pc, #200]	; (80009c8 <MX_GPIO_Init+0xe4>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a31      	ldr	r2, [pc, #196]	; (80009c8 <MX_GPIO_Init+0xe4>)
 8000904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b2f      	ldr	r3, [pc, #188]	; (80009c8 <MX_GPIO_Init+0xe4>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000912:	613b      	str	r3, [r7, #16]
 8000914:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	4b2b      	ldr	r3, [pc, #172]	; (80009c8 <MX_GPIO_Init+0xe4>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a2a      	ldr	r2, [pc, #168]	; (80009c8 <MX_GPIO_Init+0xe4>)
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b28      	ldr	r3, [pc, #160]	; (80009c8 <MX_GPIO_Init+0xe4>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	60bb      	str	r3, [r7, #8]
 8000936:	4b24      	ldr	r3, [pc, #144]	; (80009c8 <MX_GPIO_Init+0xe4>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a23      	ldr	r2, [pc, #140]	; (80009c8 <MX_GPIO_Init+0xe4>)
 800093c:	f043 0310 	orr.w	r3, r3, #16
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b21      	ldr	r3, [pc, #132]	; (80009c8 <MX_GPIO_Init+0xe4>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0310 	and.w	r3, r3, #16
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	4b1d      	ldr	r3, [pc, #116]	; (80009c8 <MX_GPIO_Init+0xe4>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a1c      	ldr	r2, [pc, #112]	; (80009c8 <MX_GPIO_Init+0xe4>)
 8000958:	f043 0302 	orr.w	r3, r3, #2
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <MX_GPIO_Init+0xe4>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0302 	and.w	r3, r3, #2
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 800096a:	2200      	movs	r2, #0
 800096c:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000970:	4816      	ldr	r0, [pc, #88]	; (80009cc <MX_GPIO_Init+0xe8>)
 8000972:	f001 fb8f 	bl	8002094 <HAL_GPIO_WritePin>
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VGA_VSYNC_GPIO_Port, VGA_VSYNC_Pin, GPIO_PIN_RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800097c:	4814      	ldr	r0, [pc, #80]	; (80009d0 <MX_GPIO_Init+0xec>)
 800097e:	f001 fb89 	bl	8002094 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 8000982:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000986:	617b      	str	r3, [r7, #20]
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000988:	2301      	movs	r3, #1
 800098a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000990:	2303      	movs	r3, #3
 8000992:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000994:	f107 0314 	add.w	r3, r7, #20
 8000998:	4619      	mov	r1, r3
 800099a:	480c      	ldr	r0, [pc, #48]	; (80009cc <MX_GPIO_Init+0xe8>)
 800099c:	f001 f9de 	bl	8001d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VGA_VSYNC_Pin;
 80009a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a6:	2301      	movs	r3, #1
 80009a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ae:	2303      	movs	r3, #3
 80009b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VGA_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 0314 	add.w	r3, r7, #20
 80009b6:	4619      	mov	r1, r3
 80009b8:	4805      	ldr	r0, [pc, #20]	; (80009d0 <MX_GPIO_Init+0xec>)
 80009ba:	f001 f9cf 	bl	8001d5c <HAL_GPIO_Init>

}
 80009be:	bf00      	nop
 80009c0:	3728      	adds	r7, #40	; 0x28
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40021000 	.word	0x40021000
 80009d0:	40020400 	.word	0x40020400

080009d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009da:	f000 fca9 	bl	8001330 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009de:	f000 f855 	bl	8000a8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e2:	f7ff ff7f 	bl	80008e4 <MX_GPIO_Init>
  MX_DMA_Init();
 80009e6:	f7ff ff5d 	bl	80008a4 <MX_DMA_Init>
  MX_TIM1_Init();
 80009ea:	f000 f9f7 	bl	8000ddc <MX_TIM1_Init>
  MX_TIM2_Init();
 80009ee:	f000 fa45 	bl	8000e7c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80009f2:	f000 fb5b 	bl	80010ac <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  UB_VGA_Screen_Init(); // Init VGA-Screen
 80009f6:	f000 fbfd 	bl	80011f4 <UB_VGA_Screen_Init>

  UB_VGA_FillScreen(VGA_COL_WHITE);
 80009fa:	20ff      	movs	r0, #255	; 0xff
 80009fc:	f000 fc4c 	bl	8001298 <UB_VGA_FillScreen>
  UB_VGA_SetPixel(10,10,10);
 8000a00:	220a      	movs	r2, #10
 8000a02:	210a      	movs	r1, #10
 8000a04:	200a      	movs	r0, #10
 8000a06:	f000 fc6b 	bl	80012e0 <UB_VGA_SetPixel>
  UB_VGA_SetPixel(0,0,0x00);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	2000      	movs	r0, #0
 8000a10:	f000 fc66 	bl	80012e0 <UB_VGA_SetPixel>
  UB_VGA_SetPixel(319,0,0x00);
 8000a14:	2200      	movs	r2, #0
 8000a16:	2100      	movs	r1, #0
 8000a18:	f240 103f 	movw	r0, #319	; 0x13f
 8000a1c:	f000 fc60 	bl	80012e0 <UB_VGA_SetPixel>

  int i;

  for(i = 0; i < LINE_BUFLEN; i++)
 8000a20:	2300      	movs	r3, #0
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	e008      	b.n	8000a38 <main+0x64>
	  input.line_rx_buffer[i] = 0;
 8000a26:	4a17      	ldr	r2, [pc, #92]	; (8000a84 <main+0xb0>)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	2200      	movs	r2, #0
 8000a30:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < LINE_BUFLEN; i++)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	3301      	adds	r3, #1
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a3e:	dbf2      	blt.n	8000a26 <main+0x52>

  // Reset some stuff
  input.byte_buffer_rx[0] = 0;
 8000a40:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <main+0xb0>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	701a      	strb	r2, [r3, #0]
  input.char_counter = 0;
 8000a46:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <main+0xb0>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  input.command_execute_flag = FALSE;
 8000a4e:	4b0d      	ldr	r3, [pc, #52]	; (8000a84 <main+0xb0>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c

  // HAl wants a memory location to store the charachter it receives from the UART
  // We will pass it an array, but we will not use it. We declare our own variable in the interupt handler
  // See stm32f4xx_it.c
  HAL_UART_Receive_IT(&huart2, input.byte_buffer_rx, BYTE_BUFLEN);
 8000a56:	2201      	movs	r2, #1
 8000a58:	490a      	ldr	r1, [pc, #40]	; (8000a84 <main+0xb0>)
 8000a5a:	480b      	ldr	r0, [pc, #44]	; (8000a88 <main+0xb4>)
 8000a5c:	f002 ffaf 	bl	80039be <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  UB_VGA_SetPixel(160,120,VGA_COL_RED);
 8000a60:	22e0      	movs	r2, #224	; 0xe0
 8000a62:	2178      	movs	r1, #120	; 0x78
 8000a64:	20a0      	movs	r0, #160	; 0xa0
 8000a66:	f000 fc3b 	bl	80012e0 <UB_VGA_SetPixel>
	  if(input.command_execute_flag == TRUE)
 8000a6a:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <main+0xb0>)
 8000a6c:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 8000a70:	2bff      	cmp	r3, #255	; 0xff
 8000a72:	d1f5      	bne.n	8000a60 <main+0x8c>
	  {
		  // jump to parser
		  FL_Input();
 8000a74:	f7ff fd2a 	bl	80004cc <FL_Input>
		  // When finished reset the flag
		  input.command_execute_flag = FALSE;
 8000a78:	4b02      	ldr	r3, [pc, #8]	; (8000a84 <main+0xb0>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
	  UB_VGA_SetPixel(160,120,VGA_COL_RED);
 8000a80:	e7ee      	b.n	8000a60 <main+0x8c>
 8000a82:	bf00      	nop
 8000a84:	20000214 	.word	0x20000214
 8000a88:	20000704 	.word	0x20000704

08000a8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b094      	sub	sp, #80	; 0x50
 8000a90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a92:	f107 0320 	add.w	r3, r7, #32
 8000a96:	2230      	movs	r2, #48	; 0x30
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f003 ff20 	bl	80048e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa0:	f107 030c 	add.w	r3, r7, #12
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	4b28      	ldr	r3, [pc, #160]	; (8000b58 <SystemClock_Config+0xcc>)
 8000ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab8:	4a27      	ldr	r2, [pc, #156]	; (8000b58 <SystemClock_Config+0xcc>)
 8000aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000abe:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac0:	4b25      	ldr	r3, [pc, #148]	; (8000b58 <SystemClock_Config+0xcc>)
 8000ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000acc:	2300      	movs	r3, #0
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	4b22      	ldr	r3, [pc, #136]	; (8000b5c <SystemClock_Config+0xd0>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a21      	ldr	r2, [pc, #132]	; (8000b5c <SystemClock_Config+0xd0>)
 8000ad6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ada:	6013      	str	r3, [r2, #0]
 8000adc:	4b1f      	ldr	r3, [pc, #124]	; (8000b5c <SystemClock_Config+0xd0>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000aec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af2:	2302      	movs	r3, #2
 8000af4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000af6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000afa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000afc:	2304      	movs	r3, #4
 8000afe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b00:	23a8      	movs	r3, #168	; 0xa8
 8000b02:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b04:	2302      	movs	r3, #2
 8000b06:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b08:	2304      	movs	r3, #4
 8000b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b0c:	f107 0320 	add.w	r3, r7, #32
 8000b10:	4618      	mov	r0, r3
 8000b12:	f001 fad9 	bl	80020c8 <HAL_RCC_OscConfig>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b1c:	f000 f820 	bl	8000b60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b20:	230f      	movs	r3, #15
 8000b22:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b24:	2302      	movs	r3, #2
 8000b26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b2c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b36:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b38:	f107 030c 	add.w	r3, r7, #12
 8000b3c:	2105      	movs	r1, #5
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f001 fd30 	bl	80025a4 <HAL_RCC_ClockConfig>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b4a:	f000 f809 	bl	8000b60 <Error_Handler>
  }
}
 8000b4e:	bf00      	nop
 8000b50:	3750      	adds	r7, #80	; 0x50
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40007000 	.word	0x40007000

08000b60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
	...

08000b70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <HAL_MspInit+0x4c>)
 8000b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7e:	4a0f      	ldr	r2, [pc, #60]	; (8000bbc <HAL_MspInit+0x4c>)
 8000b80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b84:	6453      	str	r3, [r2, #68]	; 0x44
 8000b86:	4b0d      	ldr	r3, [pc, #52]	; (8000bbc <HAL_MspInit+0x4c>)
 8000b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	603b      	str	r3, [r7, #0]
 8000b96:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <HAL_MspInit+0x4c>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9a:	4a08      	ldr	r2, [pc, #32]	; (8000bbc <HAL_MspInit+0x4c>)
 8000b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba2:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <HAL_MspInit+0x4c>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000baa:	603b      	str	r3, [r7, #0]
 8000bac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	40023800 	.word	0x40023800

08000bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <HardFault_Handler+0x4>

08000bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <MemManage_Handler+0x4>

08000bda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bde:	e7fe      	b.n	8000bde <BusFault_Handler+0x4>

08000be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <UsageFault_Handler+0x4>

08000be6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr

08000c02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c14:	f000 fbde 	bl	80013d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c20:	4828      	ldr	r0, [pc, #160]	; (8000cc4 <TIM2_IRQHandler+0xa8>)
 8000c22:	f002 f81b 	bl	8002c5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC3); // uncomment HAL_TIM_IRQHandler(&htim2); ^^
 8000c26:	4b27      	ldr	r3, [pc, #156]	; (8000cc4 <TIM2_IRQHandler+0xa8>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f06f 0208 	mvn.w	r2, #8
 8000c2e:	611a      	str	r2, [r3, #16]

  VGA.hsync_cnt++;
 8000c30:	4b25      	ldr	r3, [pc, #148]	; (8000cc8 <TIM2_IRQHandler+0xac>)
 8000c32:	881b      	ldrh	r3, [r3, #0]
 8000c34:	3301      	adds	r3, #1
 8000c36:	b29a      	uxth	r2, r3
 8000c38:	4b23      	ldr	r3, [pc, #140]	; (8000cc8 <TIM2_IRQHandler+0xac>)
 8000c3a:	801a      	strh	r2, [r3, #0]
  if (VGA.hsync_cnt >= VGA_VSYNC_PERIODE)
 8000c3c:	4b22      	ldr	r3, [pc, #136]	; (8000cc8 <TIM2_IRQHandler+0xac>)
 8000c3e:	881b      	ldrh	r3, [r3, #0]
 8000c40:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8000c44:	d905      	bls.n	8000c52 <TIM2_IRQHandler+0x36>
  {
    // -----------
    VGA.hsync_cnt = 0;
 8000c46:	4b20      	ldr	r3, [pc, #128]	; (8000cc8 <TIM2_IRQHandler+0xac>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr = (uint32_t)(&VGA_RAM1[0]);
 8000c4c:	4a1f      	ldr	r2, [pc, #124]	; (8000ccc <TIM2_IRQHandler+0xb0>)
 8000c4e:	4b1e      	ldr	r3, [pc, #120]	; (8000cc8 <TIM2_IRQHandler+0xac>)
 8000c50:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  GPIOB->BSRR = (VGA.hsync_cnt < VGA_VSYNC_IMP) ? VGA_VSYNC_Pin << 16u: VGA_VSYNC_Pin;
 8000c52:	4b1d      	ldr	r3, [pc, #116]	; (8000cc8 <TIM2_IRQHandler+0xac>)
 8000c54:	881b      	ldrh	r3, [r3, #0]
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d802      	bhi.n	8000c60 <TIM2_IRQHandler+0x44>
 8000c5a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000c5e:	e001      	b.n	8000c64 <TIM2_IRQHandler+0x48>
 8000c60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c64:	4a1a      	ldr	r2, [pc, #104]	; (8000cd0 <TIM2_IRQHandler+0xb4>)
 8000c66:	6193      	str	r3, [r2, #24]

  // Test for DMA start
  if((VGA.hsync_cnt >= VGA_VSYNC_BILD_START) && (VGA.hsync_cnt <= VGA_VSYNC_BILD_STOP))
 8000c68:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <TIM2_IRQHandler+0xac>)
 8000c6a:	881b      	ldrh	r3, [r3, #0]
 8000c6c:	2b23      	cmp	r3, #35	; 0x23
 8000c6e:	d927      	bls.n	8000cc0 <TIM2_IRQHandler+0xa4>
 8000c70:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <TIM2_IRQHandler+0xac>)
 8000c72:	881b      	ldrh	r3, [r3, #0]
 8000c74:	f240 2202 	movw	r2, #514	; 0x202
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d821      	bhi.n	8000cc0 <TIM2_IRQHandler+0xa4>
  {
    // after FP start => DMA Transfer

    // DMA2 init
	  DMA2_Stream5->CR = VGA.dma2_cr_reg;
 8000c7c:	4a15      	ldr	r2, [pc, #84]	; (8000cd4 <TIM2_IRQHandler+0xb8>)
 8000c7e:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <TIM2_IRQHandler+0xac>)
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR = VGA.start_adr;
 8000c84:	4a13      	ldr	r2, [pc, #76]	; (8000cd4 <TIM2_IRQHandler+0xb8>)
 8000c86:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <TIM2_IRQHandler+0xac>)
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1 |= TIM_CR1_CEN; // __HAL_TIM_ENABLE(&htim1); // too slow?
 8000c8c:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <TIM2_IRQHandler+0xbc>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a11      	ldr	r2, [pc, #68]	; (8000cd8 <TIM2_IRQHandler+0xbc>)
 8000c92:	f043 0301 	orr.w	r3, r3, #1
 8000c96:	6013      	str	r3, [r2, #0]
    // DMA2 enable
    __HAL_DMA_ENABLE(&hdma_tim1_up);
 8000c98:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <TIM2_IRQHandler+0xc0>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <TIM2_IRQHandler+0xc0>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f042 0201 	orr.w	r2, r2, #1
 8000ca6:	601a      	str	r2, [r3, #0]
    // Test Adrespointer for high
    if(VGA.hsync_cnt & 0x01)
 8000ca8:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <TIM2_IRQHandler+0xac>)
 8000caa:	881b      	ldrh	r3, [r3, #0]
 8000cac:	f003 0301 	and.w	r3, r3, #1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d005      	beq.n	8000cc0 <TIM2_IRQHandler+0xa4>
      VGA.start_adr += (VGA_DISPLAY_X + 1); // inc after Hsync
 8000cb4:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <TIM2_IRQHandler+0xac>)
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f203 1341 	addw	r3, r3, #321	; 0x141
 8000cbc:	4a02      	ldr	r2, [pc, #8]	; (8000cc8 <TIM2_IRQHandler+0xac>)
 8000cbe:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000664 	.word	0x20000664
 8000cc8:	20013434 	.word	0x20013434
 8000ccc:	20000744 	.word	0x20000744
 8000cd0:	40020400 	.word	0x40020400
 8000cd4:	40026488 	.word	0x40026488
 8000cd8:	40010000 	.word	0x40010000
 8000cdc:	200006a4 	.word	0x200006a4

08000ce0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	// Store the byte we received on the UART
	char uart_char = USART2->DR;
 8000ce6:	4b1a      	ldr	r3, [pc, #104]	; (8000d50 <USART2_IRQHandler+0x70>)
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	71fb      	strb	r3, [r7, #7]

	//Ignore the '\n' character
	if(uart_char != LINE_FEED)
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	2b0a      	cmp	r3, #10
 8000cf0:	d026      	beq.n	8000d40 <USART2_IRQHandler+0x60>
	{
		// Check for CR or a dot
		// There was a small bug in the terminal program.
		// By terminating your message with a dot you can ignore the CR (Enter) character
		if((uart_char == CARRIAGE_RETURN) || (uart_char == '.'))
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	2b0d      	cmp	r3, #13
 8000cf6:	d002      	beq.n	8000cfe <USART2_IRQHandler+0x1e>
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	2b2e      	cmp	r3, #46	; 0x2e
 8000cfc:	d10e      	bne.n	8000d1c <USART2_IRQHandler+0x3c>
		{
			input.command_execute_flag = TRUE;
 8000cfe:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <USART2_IRQHandler+0x74>)
 8000d00:	22ff      	movs	r2, #255	; 0xff
 8000d02:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			// Store the message length for processing
			input.msglen = input.char_counter;
 8000d06:	4b13      	ldr	r3, [pc, #76]	; (8000d54 <USART2_IRQHandler+0x74>)
 8000d08:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000d0c:	4a11      	ldr	r2, [pc, #68]	; (8000d54 <USART2_IRQHandler+0x74>)
 8000d0e:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			// Reset the counter for the next line
			input.char_counter = 0;
 8000d12:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <USART2_IRQHandler+0x74>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8000d1a:	e011      	b.n	8000d40 <USART2_IRQHandler+0x60>
			//Gently exit interrupt
		}
		else
		{
			input.command_execute_flag = FALSE;
 8000d1c:	4b0d      	ldr	r3, [pc, #52]	; (8000d54 <USART2_IRQHandler+0x74>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			input.line_rx_buffer[input.char_counter] = uart_char;
 8000d24:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <USART2_IRQHandler+0x74>)
 8000d26:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <USART2_IRQHandler+0x74>)
 8000d2c:	4413      	add	r3, r2
 8000d2e:	79fa      	ldrb	r2, [r7, #7]
 8000d30:	705a      	strb	r2, [r3, #1]
			input.char_counter++;
 8000d32:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <USART2_IRQHandler+0x74>)
 8000d34:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000d38:	3301      	adds	r3, #1
 8000d3a:	4a06      	ldr	r2, [pc, #24]	; (8000d54 <USART2_IRQHandler+0x74>)
 8000d3c:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
		}
	}

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d40:	4805      	ldr	r0, [pc, #20]	; (8000d58 <USART2_IRQHandler+0x78>)
 8000d42:	f002 fe91 	bl	8003a68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40004400 	.word	0x40004400
 8000d54:	20000214 	.word	0x20000214
 8000d58:	20000704 	.word	0x20000704

08000d5c <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

    // Timer1 stop
    __HAL_TIM_DISABLE(&htim1);
 8000d60:	4b10      	ldr	r3, [pc, #64]	; (8000da4 <DMA2_Stream5_IRQHandler+0x48>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	6a1a      	ldr	r2, [r3, #32]
 8000d66:	f241 1311 	movw	r3, #4369	; 0x1111
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d10f      	bne.n	8000d90 <DMA2_Stream5_IRQHandler+0x34>
 8000d70:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <DMA2_Stream5_IRQHandler+0x48>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	6a1a      	ldr	r2, [r3, #32]
 8000d76:	f240 4344 	movw	r3, #1092	; 0x444
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d107      	bne.n	8000d90 <DMA2_Stream5_IRQHandler+0x34>
 8000d80:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <DMA2_Stream5_IRQHandler+0x48>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <DMA2_Stream5_IRQHandler+0x48>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f022 0201 	bic.w	r2, r2, #1
 8000d8e:	601a      	str	r2, [r3, #0]
    // DMA2 disable
    // __HAL_DMA_DISABLE(&hdma_tim1_up); // not needed?
    // switch on black
    GPIOE->BSRR = VGA_GPIO_HINIBBLE << 16u;
 8000d90:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <DMA2_Stream5_IRQHandler+0x4c>)
 8000d92:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000d96:	619a      	str	r2, [r3, #24]

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8000d98:	4804      	ldr	r0, [pc, #16]	; (8000dac <DMA2_Stream5_IRQHandler+0x50>)
 8000d9a:	f000 fd75 	bl	8001888 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000624 	.word	0x20000624
 8000da8:	40021000 	.word	0x40021000
 8000dac:	200006a4 	.word	0x200006a4

08000db0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000db4:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <SystemInit+0x28>)
 8000db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dba:	4a07      	ldr	r2, [pc, #28]	; (8000dd8 <SystemInit+0x28>)
 8000dbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000dc4:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <SystemInit+0x28>)
 8000dc6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dca:	609a      	str	r2, [r3, #8]
#endif
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim1_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000de2:	f107 0308 	add.w	r3, r7, #8
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df0:	463b      	mov	r3, r7
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8000df8:	4b1e      	ldr	r3, [pc, #120]	; (8000e74 <MX_TIM1_Init+0x98>)
 8000dfa:	4a1f      	ldr	r2, [pc, #124]	; (8000e78 <MX_TIM1_Init+0x9c>)
 8000dfc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = VGA_TIM1_PRESCALE;
 8000dfe:	4b1d      	ldr	r3, [pc, #116]	; (8000e74 <MX_TIM1_Init+0x98>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e04:	4b1b      	ldr	r3, [pc, #108]	; (8000e74 <MX_TIM1_Init+0x98>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = VGA_TIM1_PERIODE;
 8000e0a:	4b1a      	ldr	r3, [pc, #104]	; (8000e74 <MX_TIM1_Init+0x98>)
 8000e0c:	220b      	movs	r2, #11
 8000e0e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e10:	4b18      	ldr	r3, [pc, #96]	; (8000e74 <MX_TIM1_Init+0x98>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e16:	4b17      	ldr	r3, [pc, #92]	; (8000e74 <MX_TIM1_Init+0x98>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e1c:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <MX_TIM1_Init+0x98>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e22:	4814      	ldr	r0, [pc, #80]	; (8000e74 <MX_TIM1_Init+0x98>)
 8000e24:	f001 fdde 	bl	80029e4 <HAL_TIM_Base_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8000e2e:	f7ff fe97 	bl	8000b60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e36:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e38:	f107 0308 	add.w	r3, r7, #8
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	480d      	ldr	r0, [pc, #52]	; (8000e74 <MX_TIM1_Init+0x98>)
 8000e40:	f002 f8da 	bl	8002ff8 <HAL_TIM_ConfigClockSource>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8000e4a:	f7ff fe89 	bl	8000b60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e52:	2300      	movs	r3, #0
 8000e54:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e56:	463b      	mov	r3, r7
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4806      	ldr	r0, [pc, #24]	; (8000e74 <MX_TIM1_Init+0x98>)
 8000e5c:	f002 fcd2 	bl	8003804 <HAL_TIMEx_MasterConfigSynchronization>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000e66:	f7ff fe7b 	bl	8000b60 <Error_Handler>
  }

}
 8000e6a:	bf00      	nop
 8000e6c:	3718      	adds	r7, #24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000624 	.word	0x20000624
 8000e78:	40010000 	.word	0x40010000

08000e7c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08a      	sub	sp, #40	; 0x28
 8000e80:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e82:	f107 0320 	add.w	r3, r7, #32
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e8c:	1d3b      	adds	r3, r7, #4
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]
 8000e98:	611a      	str	r2, [r3, #16]
 8000e9a:	615a      	str	r2, [r3, #20]
 8000e9c:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000e9e:	4b2a      	ldr	r3, [pc, #168]	; (8000f48 <MX_TIM2_Init+0xcc>)
 8000ea0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ea4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 8000ea6:	4b28      	ldr	r3, [pc, #160]	; (8000f48 <MX_TIM2_Init+0xcc>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eac:	4b26      	ldr	r3, [pc, #152]	; (8000f48 <MX_TIM2_Init+0xcc>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = VGA_TIM2_HSYNC_PERIODE;
 8000eb2:	4b25      	ldr	r3, [pc, #148]	; (8000f48 <MX_TIM2_Init+0xcc>)
 8000eb4:	f640 226b 	movw	r2, #2667	; 0xa6b
 8000eb8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eba:	4b23      	ldr	r3, [pc, #140]	; (8000f48 <MX_TIM2_Init+0xcc>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ec0:	4b21      	ldr	r3, [pc, #132]	; (8000f48 <MX_TIM2_Init+0xcc>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ec6:	4820      	ldr	r0, [pc, #128]	; (8000f48 <MX_TIM2_Init+0xcc>)
 8000ec8:	f001 fddb 	bl	8002a82 <HAL_TIM_PWM_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000ed2:	f7ff fe45 	bl	8000b60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eda:	2300      	movs	r3, #0
 8000edc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ede:	f107 0320 	add.w	r3, r7, #32
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4818      	ldr	r0, [pc, #96]	; (8000f48 <MX_TIM2_Init+0xcc>)
 8000ee6:	f002 fc8d 	bl	8003804 <HAL_TIMEx_MasterConfigSynchronization>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000ef0:	f7ff fe36 	bl	8000b60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ef4:	2360      	movs	r3, #96	; 0x60
 8000ef6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = VGA_TIM2_HTRIGGER_START - VGA_TIM2_DMA_DELAY;
 8000ef8:	f240 13bb 	movw	r3, #443	; 0x1bb
 8000efc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000efe:	2302      	movs	r3, #2
 8000f00:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	2208      	movs	r2, #8
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	480e      	ldr	r0, [pc, #56]	; (8000f48 <MX_TIM2_Init+0xcc>)
 8000f0e:	f001 ffad 	bl	8002e6c <HAL_TIM_PWM_ConfigChannel>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000f18:	f7ff fe22 	bl	8000b60 <Error_Handler>
  }
  sConfigOC.Pulse = VGA_TIM2_HSYNC_IMP;
 8000f1c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000f20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	220c      	movs	r2, #12
 8000f26:	4619      	mov	r1, r3
 8000f28:	4807      	ldr	r0, [pc, #28]	; (8000f48 <MX_TIM2_Init+0xcc>)
 8000f2a:	f001 ff9f 	bl	8002e6c <HAL_TIM_PWM_ConfigChannel>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8000f34:	f7ff fe14 	bl	8000b60 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000f38:	4803      	ldr	r0, [pc, #12]	; (8000f48 <MX_TIM2_Init+0xcc>)
 8000f3a:	f000 f87f 	bl	800103c <HAL_TIM_MspPostInit>

}
 8000f3e:	bf00      	nop
 8000f40:	3728      	adds	r7, #40	; 0x28
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000664 	.word	0x20000664

08000f4c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a21      	ldr	r2, [pc, #132]	; (8000fe0 <HAL_TIM_Base_MspInit+0x94>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d13c      	bne.n	8000fd8 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	4b20      	ldr	r3, [pc, #128]	; (8000fe4 <HAL_TIM_Base_MspInit+0x98>)
 8000f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f66:	4a1f      	ldr	r2, [pc, #124]	; (8000fe4 <HAL_TIM_Base_MspInit+0x98>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f6e:	4b1d      	ldr	r3, [pc, #116]	; (8000fe4 <HAL_TIM_Base_MspInit+0x98>)
 8000f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 8000f7a:	4b1b      	ldr	r3, [pc, #108]	; (8000fe8 <HAL_TIM_Base_MspInit+0x9c>)
 8000f7c:	4a1b      	ldr	r2, [pc, #108]	; (8000fec <HAL_TIM_Base_MspInit+0xa0>)
 8000f7e:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8000f80:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <HAL_TIM_Base_MspInit+0x9c>)
 8000f82:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000f86:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f88:	4b17      	ldr	r3, [pc, #92]	; (8000fe8 <HAL_TIM_Base_MspInit+0x9c>)
 8000f8a:	2240      	movs	r2, #64	; 0x40
 8000f8c:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f8e:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <HAL_TIM_Base_MspInit+0x9c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8000f94:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <HAL_TIM_Base_MspInit+0x9c>)
 8000f96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f9a:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f9c:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <HAL_TIM_Base_MspInit+0x9c>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fa2:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <HAL_TIM_Base_MspInit+0x9c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 8000fa8:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <HAL_TIM_Base_MspInit+0x9c>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000fae:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <HAL_TIM_Base_MspInit+0x9c>)
 8000fb0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000fb4:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <HAL_TIM_Base_MspInit+0x9c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8000fbc:	480a      	ldr	r0, [pc, #40]	; (8000fe8 <HAL_TIM_Base_MspInit+0x9c>)
 8000fbe:	f000 fb3b 	bl	8001638 <HAL_DMA_Init>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <HAL_TIM_Base_MspInit+0x80>
    {
      Error_Handler();
 8000fc8:	f7ff fdca 	bl	8000b60 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4a06      	ldr	r2, [pc, #24]	; (8000fe8 <HAL_TIM_Base_MspInit+0x9c>)
 8000fd0:	621a      	str	r2, [r3, #32]
 8000fd2:	4a05      	ldr	r2, [pc, #20]	; (8000fe8 <HAL_TIM_Base_MspInit+0x9c>)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000fd8:	bf00      	nop
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40010000 	.word	0x40010000
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	200006a4 	.word	0x200006a4
 8000fec:	40026488 	.word	0x40026488

08000ff0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001000:	d115      	bne.n	800102e <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <HAL_TIM_PWM_MspInit+0x48>)
 8001008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100a:	4a0b      	ldr	r2, [pc, #44]	; (8001038 <HAL_TIM_PWM_MspInit+0x48>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	6413      	str	r3, [r2, #64]	; 0x40
 8001012:	4b09      	ldr	r3, [pc, #36]	; (8001038 <HAL_TIM_PWM_MspInit+0x48>)
 8001014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800101e:	2200      	movs	r2, #0
 8001020:	2100      	movs	r1, #0
 8001022:	201c      	movs	r0, #28
 8001024:	f000 fad1 	bl	80015ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001028:	201c      	movs	r0, #28
 800102a:	f000 faea 	bl	8001602 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800102e:	bf00      	nop
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40023800 	.word	0x40023800

0800103c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800105c:	d11e      	bne.n	800109c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <HAL_TIM_MspPostInit+0x68>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a0f      	ldr	r2, [pc, #60]	; (80010a4 <HAL_TIM_MspPostInit+0x68>)
 8001068:	f043 0302 	orr.w	r3, r3, #2
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b0d      	ldr	r3, [pc, #52]	; (80010a4 <HAL_TIM_MspPostInit+0x68>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f003 0302 	and.w	r3, r3, #2
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = VGA_HSYNC_Pin;
 800107a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800107e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001080:	2302      	movs	r3, #2
 8001082:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001088:	2303      	movs	r3, #3
 800108a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800108c:	2301      	movs	r3, #1
 800108e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VGA_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8001090:	f107 030c 	add.w	r3, r7, #12
 8001094:	4619      	mov	r1, r3
 8001096:	4804      	ldr	r0, [pc, #16]	; (80010a8 <HAL_TIM_MspPostInit+0x6c>)
 8001098:	f000 fe60 	bl	8001d5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800109c:	bf00      	nop
 800109e:	3720      	adds	r7, #32
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40023800 	.word	0x40023800
 80010a8:	40020400 	.word	0x40020400

080010ac <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80010b0:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010b2:	4a12      	ldr	r2, [pc, #72]	; (80010fc <MX_USART2_UART_Init+0x50>)
 80010b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010b6:	4b10      	ldr	r3, [pc, #64]	; (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010be:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010c4:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010ca:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010d0:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010d2:	220c      	movs	r2, #12
 80010d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010d6:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010de:	2200      	movs	r2, #0
 80010e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010e2:	4805      	ldr	r0, [pc, #20]	; (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010e4:	f002 fc1e 	bl	8003924 <HAL_UART_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010ee:	f7ff fd37 	bl	8000b60 <Error_Handler>
  }

}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000704 	.word	0x20000704
 80010fc:	40004400 	.word	0x40004400

08001100 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08a      	sub	sp, #40	; 0x28
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a1d      	ldr	r2, [pc, #116]	; (8001194 <HAL_UART_MspInit+0x94>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d133      	bne.n	800118a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	613b      	str	r3, [r7, #16]
 8001126:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <HAL_UART_MspInit+0x98>)
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	4a1b      	ldr	r2, [pc, #108]	; (8001198 <HAL_UART_MspInit+0x98>)
 800112c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001130:	6413      	str	r3, [r2, #64]	; 0x40
 8001132:	4b19      	ldr	r3, [pc, #100]	; (8001198 <HAL_UART_MspInit+0x98>)
 8001134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113a:	613b      	str	r3, [r7, #16]
 800113c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	4b15      	ldr	r3, [pc, #84]	; (8001198 <HAL_UART_MspInit+0x98>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a14      	ldr	r2, [pc, #80]	; (8001198 <HAL_UART_MspInit+0x98>)
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b12      	ldr	r3, [pc, #72]	; (8001198 <HAL_UART_MspInit+0x98>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800115a:	230c      	movs	r3, #12
 800115c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115e:	2302      	movs	r3, #2
 8001160:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001166:	2303      	movs	r3, #3
 8001168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800116a:	2307      	movs	r3, #7
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116e:	f107 0314 	add.w	r3, r7, #20
 8001172:	4619      	mov	r1, r3
 8001174:	4809      	ldr	r0, [pc, #36]	; (800119c <HAL_UART_MspInit+0x9c>)
 8001176:	f000 fdf1 	bl	8001d5c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800117a:	2200      	movs	r2, #0
 800117c:	2100      	movs	r1, #0
 800117e:	2026      	movs	r0, #38	; 0x26
 8001180:	f000 fa23 	bl	80015ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001184:	2026      	movs	r0, #38	; 0x26
 8001186:	f000 fa3c 	bl	8001602 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800118a:	bf00      	nop
 800118c:	3728      	adds	r7, #40	; 0x28
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40004400 	.word	0x40004400
 8001198:	40023800 	.word	0x40023800
 800119c:	40020000 	.word	0x40020000

080011a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80011a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80011a6:	e003      	b.n	80011b0 <LoopCopyDataInit>

080011a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80011a8:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80011aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80011ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80011ae:	3104      	adds	r1, #4

080011b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80011b0:	480b      	ldr	r0, [pc, #44]	; (80011e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80011b2:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80011b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80011b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80011b8:	d3f6      	bcc.n	80011a8 <CopyDataInit>
  ldr  r2, =_sbss
 80011ba:	4a0b      	ldr	r2, [pc, #44]	; (80011e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80011bc:	e002      	b.n	80011c4 <LoopFillZerobss>

080011be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80011be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80011c0:	f842 3b04 	str.w	r3, [r2], #4

080011c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80011c4:	4b09      	ldr	r3, [pc, #36]	; (80011ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80011c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80011c8:	d3f9      	bcc.n	80011be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80011ca:	f7ff fdf1 	bl	8000db0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011ce:	f003 fb63 	bl	8004898 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011d2:	f7ff fbff 	bl	80009d4 <main>
  bx  lr    
 80011d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011d8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80011dc:	08004b64 	.word	0x08004b64
  ldr  r0, =_sdata
 80011e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80011e4:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80011e8:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80011ec:	20013444 	.word	0x20013444

080011f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011f0:	e7fe      	b.n	80011f0 <ADC_IRQHandler>
	...

080011f4 <UB_VGA_Screen_Init>:
// @return
//
// @retval
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  VGA.hsync_cnt = 0;
 80011f8:	4b1f      	ldr	r3, [pc, #124]	; (8001278 <UB_VGA_Screen_Init+0x84>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	801a      	strh	r2, [r3, #0]
  VGA.start_adr = 0;
 80011fe:	4b1e      	ldr	r3, [pc, #120]	; (8001278 <UB_VGA_Screen_Init+0x84>)
 8001200:	2200      	movs	r2, #0
 8001202:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg = 0;
 8001204:	4b1c      	ldr	r3, [pc, #112]	; (8001278 <UB_VGA_Screen_Init+0x84>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]

  GPIOB->BSRR = VGA_VSYNC_Pin;
 800120a:	4b1c      	ldr	r3, [pc, #112]	; (800127c <UB_VGA_Screen_Init+0x88>)
 800120c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001210:	619a      	str	r2, [r3, #24]

  // TIM2
  HAL_TIM_Base_Start(&htim2);
 8001212:	481b      	ldr	r0, [pc, #108]	; (8001280 <UB_VGA_Screen_Init+0x8c>)
 8001214:	f001 fc11 	bl	8002a3a <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001218:	210c      	movs	r1, #12
 800121a:	4819      	ldr	r0, [pc, #100]	; (8001280 <UB_VGA_Screen_Init+0x8c>)
 800121c:	f001 fc5c 	bl	8002ad8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 8001220:	2108      	movs	r1, #8
 8001222:	4817      	ldr	r0, [pc, #92]	; (8001280 <UB_VGA_Screen_Init+0x8c>)
 8001224:	f001 fc96 	bl	8002b54 <HAL_TIM_PWM_Start_IT>

  // TIM1
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8001228:	4b16      	ldr	r3, [pc, #88]	; (8001284 <UB_VGA_Screen_Init+0x90>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	68da      	ldr	r2, [r3, #12]
 800122e:	4b15      	ldr	r3, [pc, #84]	; (8001284 <UB_VGA_Screen_Init+0x90>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001236:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 8001238:	4b12      	ldr	r3, [pc, #72]	; (8001284 <UB_VGA_Screen_Init+0x90>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	4b11      	ldr	r3, [pc, #68]	; (8001284 <UB_VGA_Screen_Init+0x90>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f042 0201 	orr.w	r2, r2, #1
 8001246:	601a      	str	r2, [r3, #0]
  HAL_DMA_Start_IT(&hdma_tim1_up, (uint32_t)&VGA_RAM1[0], VGA_GPIOE_ODR_ADDRESS, VGA_DISPLAY_X + 1);
 8001248:	490f      	ldr	r1, [pc, #60]	; (8001288 <UB_VGA_Screen_Init+0x94>)
 800124a:	f240 1341 	movw	r3, #321	; 0x141
 800124e:	4a0f      	ldr	r2, [pc, #60]	; (800128c <UB_VGA_Screen_Init+0x98>)
 8001250:	480f      	ldr	r0, [pc, #60]	; (8001290 <UB_VGA_Screen_Init+0x9c>)
 8001252:	f000 fa9f 	bl	8001794 <HAL_DMA_Start_IT>

  HAL_DMA_Init(&hdma_tim1_up);
 8001256:	480e      	ldr	r0, [pc, #56]	; (8001290 <UB_VGA_Screen_Init+0x9c>)
 8001258:	f000 f9ee 	bl	8001638 <HAL_DMA_Init>
  __HAL_DMA_ENABLE_IT(&hdma_tim1_up, DMA_IT_TC);
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <UB_VGA_Screen_Init+0x9c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <UB_VGA_Screen_Init+0x9c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f042 0210 	orr.w	r2, r2, #16
 800126a:	601a      	str	r2, [r3, #0]

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg = DMA2_Stream5->CR;
 800126c:	4b09      	ldr	r3, [pc, #36]	; (8001294 <UB_VGA_Screen_Init+0xa0>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a01      	ldr	r2, [pc, #4]	; (8001278 <UB_VGA_Screen_Init+0x84>)
 8001272:	6093      	str	r3, [r2, #8]
}
 8001274:	bf00      	nop
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20013434 	.word	0x20013434
 800127c:	40020400 	.word	0x40020400
 8001280:	20000664 	.word	0x20000664
 8001284:	20000624 	.word	0x20000624
 8001288:	20000744 	.word	0x20000744
 800128c:	40021015 	.word	0x40021015
 8001290:	200006a4 	.word	0x200006a4
 8001294:	40026488 	.word	0x40026488

08001298 <UB_VGA_FillScreen>:
// @return
//
// @retval
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 80012a2:	2300      	movs	r3, #0
 80012a4:	81bb      	strh	r3, [r7, #12]
 80012a6:	e012      	b.n	80012ce <UB_VGA_FillScreen+0x36>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 80012a8:	2300      	movs	r3, #0
 80012aa:	81fb      	strh	r3, [r7, #14]
 80012ac:	e008      	b.n	80012c0 <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp, yp, color);
 80012ae:	79fa      	ldrb	r2, [r7, #7]
 80012b0:	89b9      	ldrh	r1, [r7, #12]
 80012b2:	89fb      	ldrh	r3, [r7, #14]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f000 f813 	bl	80012e0 <UB_VGA_SetPixel>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 80012ba:	89fb      	ldrh	r3, [r7, #14]
 80012bc:	3301      	adds	r3, #1
 80012be:	81fb      	strh	r3, [r7, #14]
 80012c0:	89fb      	ldrh	r3, [r7, #14]
 80012c2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80012c6:	d3f2      	bcc.n	80012ae <UB_VGA_FillScreen+0x16>
  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 80012c8:	89bb      	ldrh	r3, [r7, #12]
 80012ca:	3301      	adds	r3, #1
 80012cc:	81bb      	strh	r3, [r7, #12]
 80012ce:	89bb      	ldrh	r3, [r7, #12]
 80012d0:	2bef      	cmp	r3, #239	; 0xef
 80012d2:	d9e9      	bls.n	80012a8 <UB_VGA_FillScreen+0x10>
    }
  }
}
 80012d4:	bf00      	nop
 80012d6:	bf00      	nop
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <UB_VGA_SetPixel>:
// @return
//
// @retval
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	80fb      	strh	r3, [r7, #6]
 80012ea:	460b      	mov	r3, r1
 80012ec:	80bb      	strh	r3, [r7, #4]
 80012ee:	4613      	mov	r3, r2
 80012f0:	70fb      	strb	r3, [r7, #3]
  if(xp >= VGA_DISPLAY_X)
 80012f2:	88fb      	ldrh	r3, [r7, #6]
 80012f4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80012f8:	d301      	bcc.n	80012fe <UB_VGA_SetPixel+0x1e>
    xp = 0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	80fb      	strh	r3, [r7, #6]
  if(yp >= VGA_DISPLAY_Y)
 80012fe:	88bb      	ldrh	r3, [r7, #4]
 8001300:	2bef      	cmp	r3, #239	; 0xef
 8001302:	d901      	bls.n	8001308 <UB_VGA_SetPixel+0x28>
    yp = 0;
 8001304:	2300      	movs	r3, #0
 8001306:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp * (VGA_DISPLAY_X + 1)) + xp] = color;
 8001308:	88ba      	ldrh	r2, [r7, #4]
 800130a:	4613      	mov	r3, r2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	4413      	add	r3, r2
 8001310:	019b      	lsls	r3, r3, #6
 8001312:	441a      	add	r2, r3
 8001314:	88fb      	ldrh	r3, [r7, #6]
 8001316:	4413      	add	r3, r2
 8001318:	4904      	ldr	r1, [pc, #16]	; (800132c <UB_VGA_SetPixel+0x4c>)
 800131a:	78fa      	ldrb	r2, [r7, #3]
 800131c:	54ca      	strb	r2, [r1, r3]
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	20000744 	.word	0x20000744

08001330 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001334:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <HAL_Init+0x40>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a0d      	ldr	r2, [pc, #52]	; (8001370 <HAL_Init+0x40>)
 800133a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800133e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001340:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <HAL_Init+0x40>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a0a      	ldr	r2, [pc, #40]	; (8001370 <HAL_Init+0x40>)
 8001346:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800134a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800134c:	4b08      	ldr	r3, [pc, #32]	; (8001370 <HAL_Init+0x40>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a07      	ldr	r2, [pc, #28]	; (8001370 <HAL_Init+0x40>)
 8001352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001356:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001358:	2003      	movs	r0, #3
 800135a:	f000 f92b 	bl	80015b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800135e:	2000      	movs	r0, #0
 8001360:	f000 f808 	bl	8001374 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001364:	f7ff fc04 	bl	8000b70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40023c00 	.word	0x40023c00

08001374 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800137c:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <HAL_InitTick+0x54>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	4b12      	ldr	r3, [pc, #72]	; (80013cc <HAL_InitTick+0x58>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	4619      	mov	r1, r3
 8001386:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800138a:	fbb3 f3f1 	udiv	r3, r3, r1
 800138e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001392:	4618      	mov	r0, r3
 8001394:	f000 f943 	bl	800161e <HAL_SYSTICK_Config>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e00e      	b.n	80013c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2b0f      	cmp	r3, #15
 80013a6:	d80a      	bhi.n	80013be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013a8:	2200      	movs	r2, #0
 80013aa:	6879      	ldr	r1, [r7, #4]
 80013ac:	f04f 30ff 	mov.w	r0, #4294967295
 80013b0:	f000 f90b 	bl	80015ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013b4:	4a06      	ldr	r2, [pc, #24]	; (80013d0 <HAL_InitTick+0x5c>)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
 80013bc:	e000      	b.n	80013c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20000000 	.word	0x20000000
 80013cc:	20000008 	.word	0x20000008
 80013d0:	20000004 	.word	0x20000004

080013d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <HAL_IncTick+0x20>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	461a      	mov	r2, r3
 80013de:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <HAL_IncTick+0x24>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4413      	add	r3, r2
 80013e4:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <HAL_IncTick+0x24>)
 80013e6:	6013      	str	r3, [r2, #0]
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	20000008 	.word	0x20000008
 80013f8:	20013440 	.word	0x20013440

080013fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001400:	4b03      	ldr	r3, [pc, #12]	; (8001410 <HAL_GetTick+0x14>)
 8001402:	681b      	ldr	r3, [r3, #0]
}
 8001404:	4618      	mov	r0, r3
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	20013440 	.word	0x20013440

08001414 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001424:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <__NVIC_SetPriorityGrouping+0x44>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800142a:	68ba      	ldr	r2, [r7, #8]
 800142c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001430:	4013      	ands	r3, r2
 8001432:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800143c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001440:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001444:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001446:	4a04      	ldr	r2, [pc, #16]	; (8001458 <__NVIC_SetPriorityGrouping+0x44>)
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	60d3      	str	r3, [r2, #12]
}
 800144c:	bf00      	nop
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001460:	4b04      	ldr	r3, [pc, #16]	; (8001474 <__NVIC_GetPriorityGrouping+0x18>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	0a1b      	lsrs	r3, r3, #8
 8001466:	f003 0307 	and.w	r3, r3, #7
}
 800146a:	4618      	mov	r0, r3
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	2b00      	cmp	r3, #0
 8001488:	db0b      	blt.n	80014a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	f003 021f 	and.w	r2, r3, #31
 8001490:	4907      	ldr	r1, [pc, #28]	; (80014b0 <__NVIC_EnableIRQ+0x38>)
 8001492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001496:	095b      	lsrs	r3, r3, #5
 8001498:	2001      	movs	r0, #1
 800149a:	fa00 f202 	lsl.w	r2, r0, r2
 800149e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	e000e100 	.word	0xe000e100

080014b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	6039      	str	r1, [r7, #0]
 80014be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	db0a      	blt.n	80014de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	b2da      	uxtb	r2, r3
 80014cc:	490c      	ldr	r1, [pc, #48]	; (8001500 <__NVIC_SetPriority+0x4c>)
 80014ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d2:	0112      	lsls	r2, r2, #4
 80014d4:	b2d2      	uxtb	r2, r2
 80014d6:	440b      	add	r3, r1
 80014d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014dc:	e00a      	b.n	80014f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	4908      	ldr	r1, [pc, #32]	; (8001504 <__NVIC_SetPriority+0x50>)
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	f003 030f 	and.w	r3, r3, #15
 80014ea:	3b04      	subs	r3, #4
 80014ec:	0112      	lsls	r2, r2, #4
 80014ee:	b2d2      	uxtb	r2, r2
 80014f0:	440b      	add	r3, r1
 80014f2:	761a      	strb	r2, [r3, #24]
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	e000e100 	.word	0xe000e100
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001508:	b480      	push	{r7}
 800150a:	b089      	sub	sp, #36	; 0x24
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f003 0307 	and.w	r3, r3, #7
 800151a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	f1c3 0307 	rsb	r3, r3, #7
 8001522:	2b04      	cmp	r3, #4
 8001524:	bf28      	it	cs
 8001526:	2304      	movcs	r3, #4
 8001528:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	3304      	adds	r3, #4
 800152e:	2b06      	cmp	r3, #6
 8001530:	d902      	bls.n	8001538 <NVIC_EncodePriority+0x30>
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	3b03      	subs	r3, #3
 8001536:	e000      	b.n	800153a <NVIC_EncodePriority+0x32>
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800153c:	f04f 32ff 	mov.w	r2, #4294967295
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	43da      	mvns	r2, r3
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	401a      	ands	r2, r3
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001550:	f04f 31ff 	mov.w	r1, #4294967295
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	fa01 f303 	lsl.w	r3, r1, r3
 800155a:	43d9      	mvns	r1, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001560:	4313      	orrs	r3, r2
         );
}
 8001562:	4618      	mov	r0, r3
 8001564:	3724      	adds	r7, #36	; 0x24
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
	...

08001570 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3b01      	subs	r3, #1
 800157c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001580:	d301      	bcc.n	8001586 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001582:	2301      	movs	r3, #1
 8001584:	e00f      	b.n	80015a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001586:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <SysTick_Config+0x40>)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3b01      	subs	r3, #1
 800158c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800158e:	210f      	movs	r1, #15
 8001590:	f04f 30ff 	mov.w	r0, #4294967295
 8001594:	f7ff ff8e 	bl	80014b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001598:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <SysTick_Config+0x40>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800159e:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <SysTick_Config+0x40>)
 80015a0:	2207      	movs	r2, #7
 80015a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	e000e010 	.word	0xe000e010

080015b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7ff ff29 	bl	8001414 <__NVIC_SetPriorityGrouping>
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b086      	sub	sp, #24
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	4603      	mov	r3, r0
 80015d2:	60b9      	str	r1, [r7, #8]
 80015d4:	607a      	str	r2, [r7, #4]
 80015d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015dc:	f7ff ff3e 	bl	800145c <__NVIC_GetPriorityGrouping>
 80015e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	68b9      	ldr	r1, [r7, #8]
 80015e6:	6978      	ldr	r0, [r7, #20]
 80015e8:	f7ff ff8e 	bl	8001508 <NVIC_EncodePriority>
 80015ec:	4602      	mov	r2, r0
 80015ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015f2:	4611      	mov	r1, r2
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff ff5d 	bl	80014b4 <__NVIC_SetPriority>
}
 80015fa:	bf00      	nop
 80015fc:	3718      	adds	r7, #24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
 8001608:	4603      	mov	r3, r0
 800160a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800160c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff31 	bl	8001478 <__NVIC_EnableIRQ>
}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b082      	sub	sp, #8
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff ffa2 	bl	8001570 <SysTick_Config>
 800162c:	4603      	mov	r3, r0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
	...

08001638 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001644:	f7ff feda 	bl	80013fc <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d101      	bne.n	8001654 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e099      	b.n	8001788 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2200      	movs	r2, #0
 8001658:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2202      	movs	r2, #2
 8001660:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f022 0201 	bic.w	r2, r2, #1
 8001672:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001674:	e00f      	b.n	8001696 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001676:	f7ff fec1 	bl	80013fc <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b05      	cmp	r3, #5
 8001682:	d908      	bls.n	8001696 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2220      	movs	r2, #32
 8001688:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2203      	movs	r2, #3
 800168e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e078      	b.n	8001788 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d1e8      	bne.n	8001676 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80016ac:	697a      	ldr	r2, [r7, #20]
 80016ae:	4b38      	ldr	r3, [pc, #224]	; (8001790 <HAL_DMA_Init+0x158>)
 80016b0:	4013      	ands	r3, r2
 80016b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a1b      	ldr	r3, [r3, #32]
 80016e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016e2:	697a      	ldr	r2, [r7, #20]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ec:	2b04      	cmp	r3, #4
 80016ee:	d107      	bne.n	8001700 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f8:	4313      	orrs	r3, r2
 80016fa:	697a      	ldr	r2, [r7, #20]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	697a      	ldr	r2, [r7, #20]
 8001706:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	695b      	ldr	r3, [r3, #20]
 800170e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	f023 0307 	bic.w	r3, r3, #7
 8001716:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171c:	697a      	ldr	r2, [r7, #20]
 800171e:	4313      	orrs	r3, r2
 8001720:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001726:	2b04      	cmp	r3, #4
 8001728:	d117      	bne.n	800175a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172e:	697a      	ldr	r2, [r7, #20]
 8001730:	4313      	orrs	r3, r2
 8001732:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001738:	2b00      	cmp	r3, #0
 800173a:	d00e      	beq.n	800175a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f000 fa91 	bl	8001c64 <DMA_CheckFifoParam>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d008      	beq.n	800175a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2240      	movs	r2, #64	; 0x40
 800174c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2201      	movs	r2, #1
 8001752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001756:	2301      	movs	r3, #1
 8001758:	e016      	b.n	8001788 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	697a      	ldr	r2, [r7, #20]
 8001760:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f000 fa48 	bl	8001bf8 <DMA_CalcBaseAndBitshift>
 8001768:	4603      	mov	r3, r0
 800176a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001770:	223f      	movs	r2, #63	; 0x3f
 8001772:	409a      	lsls	r2, r3
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2201      	movs	r2, #1
 8001782:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001786:	2300      	movs	r3, #0
}
 8001788:	4618      	mov	r0, r3
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	f010803f 	.word	0xf010803f

08001794 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
 80017a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017a2:	2300      	movs	r3, #0
 80017a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d101      	bne.n	80017ba <HAL_DMA_Start_IT+0x26>
 80017b6:	2302      	movs	r3, #2
 80017b8:	e040      	b.n	800183c <HAL_DMA_Start_IT+0xa8>
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2201      	movs	r2, #1
 80017be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d12f      	bne.n	800182e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2202      	movs	r2, #2
 80017d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2200      	movs	r2, #0
 80017da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	68b9      	ldr	r1, [r7, #8]
 80017e2:	68f8      	ldr	r0, [r7, #12]
 80017e4:	f000 f9da 	bl	8001b9c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ec:	223f      	movs	r2, #63	; 0x3f
 80017ee:	409a      	lsls	r2, r3
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f042 0216 	orr.w	r2, r2, #22
 8001802:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001808:	2b00      	cmp	r3, #0
 800180a:	d007      	beq.n	800181c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f042 0208 	orr.w	r2, r2, #8
 800181a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f042 0201 	orr.w	r2, r2, #1
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	e005      	b.n	800183a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2200      	movs	r2, #0
 8001832:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001836:	2302      	movs	r3, #2
 8001838:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800183a:	7dfb      	ldrb	r3, [r7, #23]
}
 800183c:	4618      	mov	r0, r3
 800183e:	3718      	adds	r7, #24
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001852:	b2db      	uxtb	r3, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d004      	beq.n	8001862 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2280      	movs	r2, #128	; 0x80
 800185c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e00c      	b.n	800187c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2205      	movs	r2, #5
 8001866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f022 0201 	bic.w	r2, r2, #1
 8001878:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001890:	2300      	movs	r3, #0
 8001892:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001894:	4b8e      	ldr	r3, [pc, #568]	; (8001ad0 <HAL_DMA_IRQHandler+0x248>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a8e      	ldr	r2, [pc, #568]	; (8001ad4 <HAL_DMA_IRQHandler+0x24c>)
 800189a:	fba2 2303 	umull	r2, r3, r2, r3
 800189e:	0a9b      	lsrs	r3, r3, #10
 80018a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b2:	2208      	movs	r2, #8
 80018b4:	409a      	lsls	r2, r3
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	4013      	ands	r3, r2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d01a      	beq.n	80018f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0304 	and.w	r3, r3, #4
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d013      	beq.n	80018f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f022 0204 	bic.w	r2, r2, #4
 80018da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e0:	2208      	movs	r2, #8
 80018e2:	409a      	lsls	r2, r3
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ec:	f043 0201 	orr.w	r2, r3, #1
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018f8:	2201      	movs	r2, #1
 80018fa:	409a      	lsls	r2, r3
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	4013      	ands	r3, r2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d012      	beq.n	800192a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800190e:	2b00      	cmp	r3, #0
 8001910:	d00b      	beq.n	800192a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001916:	2201      	movs	r2, #1
 8001918:	409a      	lsls	r2, r3
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001922:	f043 0202 	orr.w	r2, r3, #2
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800192e:	2204      	movs	r2, #4
 8001930:	409a      	lsls	r2, r3
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	4013      	ands	r3, r2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d012      	beq.n	8001960 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0302 	and.w	r3, r3, #2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d00b      	beq.n	8001960 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800194c:	2204      	movs	r2, #4
 800194e:	409a      	lsls	r2, r3
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001958:	f043 0204 	orr.w	r2, r3, #4
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001964:	2210      	movs	r2, #16
 8001966:	409a      	lsls	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4013      	ands	r3, r2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d043      	beq.n	80019f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0308 	and.w	r3, r3, #8
 800197a:	2b00      	cmp	r3, #0
 800197c:	d03c      	beq.n	80019f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001982:	2210      	movs	r2, #16
 8001984:	409a      	lsls	r2, r3
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d018      	beq.n	80019ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d108      	bne.n	80019b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d024      	beq.n	80019f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	4798      	blx	r3
 80019b6:	e01f      	b.n	80019f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d01b      	beq.n	80019f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	4798      	blx	r3
 80019c8:	e016      	b.n	80019f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d107      	bne.n	80019e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f022 0208 	bic.w	r2, r2, #8
 80019e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d003      	beq.n	80019f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019fc:	2220      	movs	r2, #32
 80019fe:	409a      	lsls	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4013      	ands	r3, r2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 808f 	beq.w	8001b28 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0310 	and.w	r3, r3, #16
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	f000 8087 	beq.w	8001b28 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a1e:	2220      	movs	r2, #32
 8001a20:	409a      	lsls	r2, r3
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b05      	cmp	r3, #5
 8001a30:	d136      	bne.n	8001aa0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f022 0216 	bic.w	r2, r2, #22
 8001a40:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	695a      	ldr	r2, [r3, #20]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a50:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d103      	bne.n	8001a62 <HAL_DMA_IRQHandler+0x1da>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d007      	beq.n	8001a72 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f022 0208 	bic.w	r2, r2, #8
 8001a70:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a76:	223f      	movs	r2, #63	; 0x3f
 8001a78:	409a      	lsls	r2, r3
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d07e      	beq.n	8001b94 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	4798      	blx	r3
        }
        return;
 8001a9e:	e079      	b.n	8001b94 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d01d      	beq.n	8001aea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d10d      	bne.n	8001ad8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d031      	beq.n	8001b28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	4798      	blx	r3
 8001acc:	e02c      	b.n	8001b28 <HAL_DMA_IRQHandler+0x2a0>
 8001ace:	bf00      	nop
 8001ad0:	20000000 	.word	0x20000000
 8001ad4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d023      	beq.n	8001b28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	4798      	blx	r3
 8001ae8:	e01e      	b.n	8001b28 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d10f      	bne.n	8001b18 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f022 0210 	bic.w	r2, r2, #16
 8001b06:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d003      	beq.n	8001b28 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d032      	beq.n	8001b96 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d022      	beq.n	8001b82 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2205      	movs	r2, #5
 8001b40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 0201 	bic.w	r2, r2, #1
 8001b52:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	3301      	adds	r3, #1
 8001b58:	60bb      	str	r3, [r7, #8]
 8001b5a:	697a      	ldr	r2, [r7, #20]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d307      	bcc.n	8001b70 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1f2      	bne.n	8001b54 <HAL_DMA_IRQHandler+0x2cc>
 8001b6e:	e000      	b.n	8001b72 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001b70:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d005      	beq.n	8001b96 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	4798      	blx	r3
 8001b92:	e000      	b.n	8001b96 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001b94:	bf00      	nop
    }
  }
}
 8001b96:	3718      	adds	r7, #24
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
 8001ba8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001bb8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	2b40      	cmp	r3, #64	; 0x40
 8001bc8:	d108      	bne.n	8001bdc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	68ba      	ldr	r2, [r7, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001bda:	e007      	b.n	8001bec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	68ba      	ldr	r2, [r7, #8]
 8001be2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	60da      	str	r2, [r3, #12]
}
 8001bec:	bf00      	nop
 8001bee:	3714      	adds	r7, #20
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	3b10      	subs	r3, #16
 8001c08:	4a14      	ldr	r2, [pc, #80]	; (8001c5c <DMA_CalcBaseAndBitshift+0x64>)
 8001c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c0e:	091b      	lsrs	r3, r3, #4
 8001c10:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c12:	4a13      	ldr	r2, [pc, #76]	; (8001c60 <DMA_CalcBaseAndBitshift+0x68>)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	4413      	add	r3, r2
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2b03      	cmp	r3, #3
 8001c24:	d909      	bls.n	8001c3a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c2e:	f023 0303 	bic.w	r3, r3, #3
 8001c32:	1d1a      	adds	r2, r3, #4
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	659a      	str	r2, [r3, #88]	; 0x58
 8001c38:	e007      	b.n	8001c4a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c42:	f023 0303 	bic.w	r3, r3, #3
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3714      	adds	r7, #20
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	aaaaaaab 	.word	0xaaaaaaab
 8001c60:	08004a48 	.word	0x08004a48

08001c64 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c74:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d11f      	bne.n	8001cbe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	2b03      	cmp	r3, #3
 8001c82:	d856      	bhi.n	8001d32 <DMA_CheckFifoParam+0xce>
 8001c84:	a201      	add	r2, pc, #4	; (adr r2, 8001c8c <DMA_CheckFifoParam+0x28>)
 8001c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c8a:	bf00      	nop
 8001c8c:	08001c9d 	.word	0x08001c9d
 8001c90:	08001caf 	.word	0x08001caf
 8001c94:	08001c9d 	.word	0x08001c9d
 8001c98:	08001d33 	.word	0x08001d33
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d046      	beq.n	8001d36 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cac:	e043      	b.n	8001d36 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001cb6:	d140      	bne.n	8001d3a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cbc:	e03d      	b.n	8001d3a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cc6:	d121      	bne.n	8001d0c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	2b03      	cmp	r3, #3
 8001ccc:	d837      	bhi.n	8001d3e <DMA_CheckFifoParam+0xda>
 8001cce:	a201      	add	r2, pc, #4	; (adr r2, 8001cd4 <DMA_CheckFifoParam+0x70>)
 8001cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd4:	08001ce5 	.word	0x08001ce5
 8001cd8:	08001ceb 	.word	0x08001ceb
 8001cdc:	08001ce5 	.word	0x08001ce5
 8001ce0:	08001cfd 	.word	0x08001cfd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	73fb      	strb	r3, [r7, #15]
      break;
 8001ce8:	e030      	b.n	8001d4c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d025      	beq.n	8001d42 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cfa:	e022      	b.n	8001d42 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d00:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d04:	d11f      	bne.n	8001d46 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d0a:	e01c      	b.n	8001d46 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d903      	bls.n	8001d1a <DMA_CheckFifoParam+0xb6>
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	2b03      	cmp	r3, #3
 8001d16:	d003      	beq.n	8001d20 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d18:	e018      	b.n	8001d4c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	73fb      	strb	r3, [r7, #15]
      break;
 8001d1e:	e015      	b.n	8001d4c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d00e      	beq.n	8001d4a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	73fb      	strb	r3, [r7, #15]
      break;
 8001d30:	e00b      	b.n	8001d4a <DMA_CheckFifoParam+0xe6>
      break;
 8001d32:	bf00      	nop
 8001d34:	e00a      	b.n	8001d4c <DMA_CheckFifoParam+0xe8>
      break;
 8001d36:	bf00      	nop
 8001d38:	e008      	b.n	8001d4c <DMA_CheckFifoParam+0xe8>
      break;
 8001d3a:	bf00      	nop
 8001d3c:	e006      	b.n	8001d4c <DMA_CheckFifoParam+0xe8>
      break;
 8001d3e:	bf00      	nop
 8001d40:	e004      	b.n	8001d4c <DMA_CheckFifoParam+0xe8>
      break;
 8001d42:	bf00      	nop
 8001d44:	e002      	b.n	8001d4c <DMA_CheckFifoParam+0xe8>
      break;   
 8001d46:	bf00      	nop
 8001d48:	e000      	b.n	8001d4c <DMA_CheckFifoParam+0xe8>
      break;
 8001d4a:	bf00      	nop
    }
  } 
  
  return status; 
 8001d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3714      	adds	r7, #20
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop

08001d5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b089      	sub	sp, #36	; 0x24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d66:	2300      	movs	r3, #0
 8001d68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d72:	2300      	movs	r3, #0
 8001d74:	61fb      	str	r3, [r7, #28]
 8001d76:	e16b      	b.n	8002050 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d78:	2201      	movs	r2, #1
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	f040 815a 	bne.w	800204a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d00b      	beq.n	8001db6 <HAL_GPIO_Init+0x5a>
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d007      	beq.n	8001db6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001daa:	2b11      	cmp	r3, #17
 8001dac:	d003      	beq.n	8001db6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b12      	cmp	r3, #18
 8001db4:	d130      	bne.n	8001e18 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	2203      	movs	r2, #3
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	68da      	ldr	r2, [r3, #12]
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dec:	2201      	movs	r2, #1
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	43db      	mvns	r3, r3
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	091b      	lsrs	r3, r3, #4
 8001e02:	f003 0201 	and.w	r2, r3, #1
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	2203      	movs	r2, #3
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d003      	beq.n	8001e58 <HAL_GPIO_Init+0xfc>
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2b12      	cmp	r3, #18
 8001e56:	d123      	bne.n	8001ea0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	08da      	lsrs	r2, r3, #3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3208      	adds	r2, #8
 8001e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	f003 0307 	and.w	r3, r3, #7
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	220f      	movs	r2, #15
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	43db      	mvns	r3, r3
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	691a      	ldr	r2, [r3, #16]
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	08da      	lsrs	r2, r3, #3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	3208      	adds	r2, #8
 8001e9a:	69b9      	ldr	r1, [r7, #24]
 8001e9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	2203      	movs	r2, #3
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f003 0203 	and.w	r2, r3, #3
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f000 80b4 	beq.w	800204a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	4b60      	ldr	r3, [pc, #384]	; (8002068 <HAL_GPIO_Init+0x30c>)
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eea:	4a5f      	ldr	r2, [pc, #380]	; (8002068 <HAL_GPIO_Init+0x30c>)
 8001eec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ef2:	4b5d      	ldr	r3, [pc, #372]	; (8002068 <HAL_GPIO_Init+0x30c>)
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001efe:	4a5b      	ldr	r2, [pc, #364]	; (800206c <HAL_GPIO_Init+0x310>)
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	089b      	lsrs	r3, r3, #2
 8001f04:	3302      	adds	r3, #2
 8001f06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	f003 0303 	and.w	r3, r3, #3
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	220f      	movs	r2, #15
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a52      	ldr	r2, [pc, #328]	; (8002070 <HAL_GPIO_Init+0x314>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d02b      	beq.n	8001f82 <HAL_GPIO_Init+0x226>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a51      	ldr	r2, [pc, #324]	; (8002074 <HAL_GPIO_Init+0x318>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d025      	beq.n	8001f7e <HAL_GPIO_Init+0x222>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a50      	ldr	r2, [pc, #320]	; (8002078 <HAL_GPIO_Init+0x31c>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d01f      	beq.n	8001f7a <HAL_GPIO_Init+0x21e>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a4f      	ldr	r2, [pc, #316]	; (800207c <HAL_GPIO_Init+0x320>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d019      	beq.n	8001f76 <HAL_GPIO_Init+0x21a>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a4e      	ldr	r2, [pc, #312]	; (8002080 <HAL_GPIO_Init+0x324>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d013      	beq.n	8001f72 <HAL_GPIO_Init+0x216>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a4d      	ldr	r2, [pc, #308]	; (8002084 <HAL_GPIO_Init+0x328>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d00d      	beq.n	8001f6e <HAL_GPIO_Init+0x212>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a4c      	ldr	r2, [pc, #304]	; (8002088 <HAL_GPIO_Init+0x32c>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d007      	beq.n	8001f6a <HAL_GPIO_Init+0x20e>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a4b      	ldr	r2, [pc, #300]	; (800208c <HAL_GPIO_Init+0x330>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d101      	bne.n	8001f66 <HAL_GPIO_Init+0x20a>
 8001f62:	2307      	movs	r3, #7
 8001f64:	e00e      	b.n	8001f84 <HAL_GPIO_Init+0x228>
 8001f66:	2308      	movs	r3, #8
 8001f68:	e00c      	b.n	8001f84 <HAL_GPIO_Init+0x228>
 8001f6a:	2306      	movs	r3, #6
 8001f6c:	e00a      	b.n	8001f84 <HAL_GPIO_Init+0x228>
 8001f6e:	2305      	movs	r3, #5
 8001f70:	e008      	b.n	8001f84 <HAL_GPIO_Init+0x228>
 8001f72:	2304      	movs	r3, #4
 8001f74:	e006      	b.n	8001f84 <HAL_GPIO_Init+0x228>
 8001f76:	2303      	movs	r3, #3
 8001f78:	e004      	b.n	8001f84 <HAL_GPIO_Init+0x228>
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	e002      	b.n	8001f84 <HAL_GPIO_Init+0x228>
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e000      	b.n	8001f84 <HAL_GPIO_Init+0x228>
 8001f82:	2300      	movs	r3, #0
 8001f84:	69fa      	ldr	r2, [r7, #28]
 8001f86:	f002 0203 	and.w	r2, r2, #3
 8001f8a:	0092      	lsls	r2, r2, #2
 8001f8c:	4093      	lsls	r3, r2
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f94:	4935      	ldr	r1, [pc, #212]	; (800206c <HAL_GPIO_Init+0x310>)
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	089b      	lsrs	r3, r3, #2
 8001f9a:	3302      	adds	r3, #2
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fa2:	4b3b      	ldr	r3, [pc, #236]	; (8002090 <HAL_GPIO_Init+0x334>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	43db      	mvns	r3, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fc6:	4a32      	ldr	r2, [pc, #200]	; (8002090 <HAL_GPIO_Init+0x334>)
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001fcc:	4b30      	ldr	r3, [pc, #192]	; (8002090 <HAL_GPIO_Init+0x334>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d003      	beq.n	8001ff0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ff0:	4a27      	ldr	r2, [pc, #156]	; (8002090 <HAL_GPIO_Init+0x334>)
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ff6:	4b26      	ldr	r3, [pc, #152]	; (8002090 <HAL_GPIO_Init+0x334>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	43db      	mvns	r3, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4013      	ands	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	4313      	orrs	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800201a:	4a1d      	ldr	r2, [pc, #116]	; (8002090 <HAL_GPIO_Init+0x334>)
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002020:	4b1b      	ldr	r3, [pc, #108]	; (8002090 <HAL_GPIO_Init+0x334>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	43db      	mvns	r3, r3
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	4013      	ands	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d003      	beq.n	8002044 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	4313      	orrs	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002044:	4a12      	ldr	r2, [pc, #72]	; (8002090 <HAL_GPIO_Init+0x334>)
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	3301      	adds	r3, #1
 800204e:	61fb      	str	r3, [r7, #28]
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	2b0f      	cmp	r3, #15
 8002054:	f67f ae90 	bls.w	8001d78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002058:	bf00      	nop
 800205a:	bf00      	nop
 800205c:	3724      	adds	r7, #36	; 0x24
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	40023800 	.word	0x40023800
 800206c:	40013800 	.word	0x40013800
 8002070:	40020000 	.word	0x40020000
 8002074:	40020400 	.word	0x40020400
 8002078:	40020800 	.word	0x40020800
 800207c:	40020c00 	.word	0x40020c00
 8002080:	40021000 	.word	0x40021000
 8002084:	40021400 	.word	0x40021400
 8002088:	40021800 	.word	0x40021800
 800208c:	40021c00 	.word	0x40021c00
 8002090:	40013c00 	.word	0x40013c00

08002094 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	460b      	mov	r3, r1
 800209e:	807b      	strh	r3, [r7, #2]
 80020a0:	4613      	mov	r3, r2
 80020a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020a4:	787b      	ldrb	r3, [r7, #1]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020aa:	887a      	ldrh	r2, [r7, #2]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020b0:	e003      	b.n	80020ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020b2:	887b      	ldrh	r3, [r7, #2]
 80020b4:	041a      	lsls	r2, r3, #16
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	619a      	str	r2, [r3, #24]
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
	...

080020c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e25e      	b.n	8002598 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d075      	beq.n	80021d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020e6:	4b88      	ldr	r3, [pc, #544]	; (8002308 <HAL_RCC_OscConfig+0x240>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f003 030c 	and.w	r3, r3, #12
 80020ee:	2b04      	cmp	r3, #4
 80020f0:	d00c      	beq.n	800210c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020f2:	4b85      	ldr	r3, [pc, #532]	; (8002308 <HAL_RCC_OscConfig+0x240>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020fa:	2b08      	cmp	r3, #8
 80020fc:	d112      	bne.n	8002124 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020fe:	4b82      	ldr	r3, [pc, #520]	; (8002308 <HAL_RCC_OscConfig+0x240>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002106:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800210a:	d10b      	bne.n	8002124 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800210c:	4b7e      	ldr	r3, [pc, #504]	; (8002308 <HAL_RCC_OscConfig+0x240>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d05b      	beq.n	80021d0 <HAL_RCC_OscConfig+0x108>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d157      	bne.n	80021d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e239      	b.n	8002598 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800212c:	d106      	bne.n	800213c <HAL_RCC_OscConfig+0x74>
 800212e:	4b76      	ldr	r3, [pc, #472]	; (8002308 <HAL_RCC_OscConfig+0x240>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a75      	ldr	r2, [pc, #468]	; (8002308 <HAL_RCC_OscConfig+0x240>)
 8002134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002138:	6013      	str	r3, [r2, #0]
 800213a:	e01d      	b.n	8002178 <HAL_RCC_OscConfig+0xb0>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002144:	d10c      	bne.n	8002160 <HAL_RCC_OscConfig+0x98>
 8002146:	4b70      	ldr	r3, [pc, #448]	; (8002308 <HAL_RCC_OscConfig+0x240>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a6f      	ldr	r2, [pc, #444]	; (8002308 <HAL_RCC_OscConfig+0x240>)
 800214c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002150:	6013      	str	r3, [r2, #0]
 8002152:	4b6d      	ldr	r3, [pc, #436]	; (8002308 <HAL_RCC_OscConfig+0x240>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a6c      	ldr	r2, [pc, #432]	; (8002308 <HAL_RCC_OscConfig+0x240>)
 8002158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800215c:	6013      	str	r3, [r2, #0]
 800215e:	e00b      	b.n	8002178 <HAL_RCC_OscConfig+0xb0>
 8002160:	4b69      	ldr	r3, [pc, #420]	; (8002308 <HAL_RCC_OscConfig+0x240>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a68      	ldr	r2, [pc, #416]	; (8002308 <HAL_RCC_OscConfig+0x240>)
 8002166:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800216a:	6013      	str	r3, [r2, #0]
 800216c:	4b66      	ldr	r3, [pc, #408]	; (8002308 <HAL_RCC_OscConfig+0x240>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a65      	ldr	r2, [pc, #404]	; (8002308 <HAL_RCC_OscConfig+0x240>)
 8002172:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002176:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d013      	beq.n	80021a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002180:	f7ff f93c 	bl	80013fc <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002188:	f7ff f938 	bl	80013fc <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b64      	cmp	r3, #100	; 0x64
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e1fe      	b.n	8002598 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800219a:	4b5b      	ldr	r3, [pc, #364]	; (8002308 <HAL_RCC_OscConfig+0x240>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d0f0      	beq.n	8002188 <HAL_RCC_OscConfig+0xc0>
 80021a6:	e014      	b.n	80021d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a8:	f7ff f928 	bl	80013fc <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021b0:	f7ff f924 	bl	80013fc <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b64      	cmp	r3, #100	; 0x64
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e1ea      	b.n	8002598 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021c2:	4b51      	ldr	r3, [pc, #324]	; (8002308 <HAL_RCC_OscConfig+0x240>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1f0      	bne.n	80021b0 <HAL_RCC_OscConfig+0xe8>
 80021ce:	e000      	b.n	80021d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d063      	beq.n	80022a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021de:	4b4a      	ldr	r3, [pc, #296]	; (8002308 <HAL_RCC_OscConfig+0x240>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f003 030c 	and.w	r3, r3, #12
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00b      	beq.n	8002202 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021ea:	4b47      	ldr	r3, [pc, #284]	; (8002308 <HAL_RCC_OscConfig+0x240>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021f2:	2b08      	cmp	r3, #8
 80021f4:	d11c      	bne.n	8002230 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021f6:	4b44      	ldr	r3, [pc, #272]	; (8002308 <HAL_RCC_OscConfig+0x240>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d116      	bne.n	8002230 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002202:	4b41      	ldr	r3, [pc, #260]	; (8002308 <HAL_RCC_OscConfig+0x240>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d005      	beq.n	800221a <HAL_RCC_OscConfig+0x152>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d001      	beq.n	800221a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e1be      	b.n	8002598 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800221a:	4b3b      	ldr	r3, [pc, #236]	; (8002308 <HAL_RCC_OscConfig+0x240>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	4937      	ldr	r1, [pc, #220]	; (8002308 <HAL_RCC_OscConfig+0x240>)
 800222a:	4313      	orrs	r3, r2
 800222c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800222e:	e03a      	b.n	80022a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d020      	beq.n	800227a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002238:	4b34      	ldr	r3, [pc, #208]	; (800230c <HAL_RCC_OscConfig+0x244>)
 800223a:	2201      	movs	r2, #1
 800223c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223e:	f7ff f8dd 	bl	80013fc <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002244:	e008      	b.n	8002258 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002246:	f7ff f8d9 	bl	80013fc <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e19f      	b.n	8002598 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002258:	4b2b      	ldr	r3, [pc, #172]	; (8002308 <HAL_RCC_OscConfig+0x240>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0f0      	beq.n	8002246 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002264:	4b28      	ldr	r3, [pc, #160]	; (8002308 <HAL_RCC_OscConfig+0x240>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	00db      	lsls	r3, r3, #3
 8002272:	4925      	ldr	r1, [pc, #148]	; (8002308 <HAL_RCC_OscConfig+0x240>)
 8002274:	4313      	orrs	r3, r2
 8002276:	600b      	str	r3, [r1, #0]
 8002278:	e015      	b.n	80022a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800227a:	4b24      	ldr	r3, [pc, #144]	; (800230c <HAL_RCC_OscConfig+0x244>)
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002280:	f7ff f8bc 	bl	80013fc <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002288:	f7ff f8b8 	bl	80013fc <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e17e      	b.n	8002598 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800229a:	4b1b      	ldr	r3, [pc, #108]	; (8002308 <HAL_RCC_OscConfig+0x240>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1f0      	bne.n	8002288 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0308 	and.w	r3, r3, #8
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d036      	beq.n	8002320 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d016      	beq.n	80022e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022ba:	4b15      	ldr	r3, [pc, #84]	; (8002310 <HAL_RCC_OscConfig+0x248>)
 80022bc:	2201      	movs	r2, #1
 80022be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c0:	f7ff f89c 	bl	80013fc <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022c8:	f7ff f898 	bl	80013fc <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e15e      	b.n	8002598 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022da:	4b0b      	ldr	r3, [pc, #44]	; (8002308 <HAL_RCC_OscConfig+0x240>)
 80022dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d0f0      	beq.n	80022c8 <HAL_RCC_OscConfig+0x200>
 80022e6:	e01b      	b.n	8002320 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022e8:	4b09      	ldr	r3, [pc, #36]	; (8002310 <HAL_RCC_OscConfig+0x248>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ee:	f7ff f885 	bl	80013fc <HAL_GetTick>
 80022f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f4:	e00e      	b.n	8002314 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022f6:	f7ff f881 	bl	80013fc <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d907      	bls.n	8002314 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e147      	b.n	8002598 <HAL_RCC_OscConfig+0x4d0>
 8002308:	40023800 	.word	0x40023800
 800230c:	42470000 	.word	0x42470000
 8002310:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002314:	4b88      	ldr	r3, [pc, #544]	; (8002538 <HAL_RCC_OscConfig+0x470>)
 8002316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1ea      	bne.n	80022f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0304 	and.w	r3, r3, #4
 8002328:	2b00      	cmp	r3, #0
 800232a:	f000 8097 	beq.w	800245c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800232e:	2300      	movs	r3, #0
 8002330:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002332:	4b81      	ldr	r3, [pc, #516]	; (8002538 <HAL_RCC_OscConfig+0x470>)
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d10f      	bne.n	800235e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	60bb      	str	r3, [r7, #8]
 8002342:	4b7d      	ldr	r3, [pc, #500]	; (8002538 <HAL_RCC_OscConfig+0x470>)
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	4a7c      	ldr	r2, [pc, #496]	; (8002538 <HAL_RCC_OscConfig+0x470>)
 8002348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800234c:	6413      	str	r3, [r2, #64]	; 0x40
 800234e:	4b7a      	ldr	r3, [pc, #488]	; (8002538 <HAL_RCC_OscConfig+0x470>)
 8002350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002356:	60bb      	str	r3, [r7, #8]
 8002358:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800235a:	2301      	movs	r3, #1
 800235c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800235e:	4b77      	ldr	r3, [pc, #476]	; (800253c <HAL_RCC_OscConfig+0x474>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002366:	2b00      	cmp	r3, #0
 8002368:	d118      	bne.n	800239c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800236a:	4b74      	ldr	r3, [pc, #464]	; (800253c <HAL_RCC_OscConfig+0x474>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a73      	ldr	r2, [pc, #460]	; (800253c <HAL_RCC_OscConfig+0x474>)
 8002370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002374:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002376:	f7ff f841 	bl	80013fc <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800237c:	e008      	b.n	8002390 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800237e:	f7ff f83d 	bl	80013fc <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e103      	b.n	8002598 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002390:	4b6a      	ldr	r3, [pc, #424]	; (800253c <HAL_RCC_OscConfig+0x474>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002398:	2b00      	cmp	r3, #0
 800239a:	d0f0      	beq.n	800237e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d106      	bne.n	80023b2 <HAL_RCC_OscConfig+0x2ea>
 80023a4:	4b64      	ldr	r3, [pc, #400]	; (8002538 <HAL_RCC_OscConfig+0x470>)
 80023a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a8:	4a63      	ldr	r2, [pc, #396]	; (8002538 <HAL_RCC_OscConfig+0x470>)
 80023aa:	f043 0301 	orr.w	r3, r3, #1
 80023ae:	6713      	str	r3, [r2, #112]	; 0x70
 80023b0:	e01c      	b.n	80023ec <HAL_RCC_OscConfig+0x324>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	2b05      	cmp	r3, #5
 80023b8:	d10c      	bne.n	80023d4 <HAL_RCC_OscConfig+0x30c>
 80023ba:	4b5f      	ldr	r3, [pc, #380]	; (8002538 <HAL_RCC_OscConfig+0x470>)
 80023bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023be:	4a5e      	ldr	r2, [pc, #376]	; (8002538 <HAL_RCC_OscConfig+0x470>)
 80023c0:	f043 0304 	orr.w	r3, r3, #4
 80023c4:	6713      	str	r3, [r2, #112]	; 0x70
 80023c6:	4b5c      	ldr	r3, [pc, #368]	; (8002538 <HAL_RCC_OscConfig+0x470>)
 80023c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ca:	4a5b      	ldr	r2, [pc, #364]	; (8002538 <HAL_RCC_OscConfig+0x470>)
 80023cc:	f043 0301 	orr.w	r3, r3, #1
 80023d0:	6713      	str	r3, [r2, #112]	; 0x70
 80023d2:	e00b      	b.n	80023ec <HAL_RCC_OscConfig+0x324>
 80023d4:	4b58      	ldr	r3, [pc, #352]	; (8002538 <HAL_RCC_OscConfig+0x470>)
 80023d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d8:	4a57      	ldr	r2, [pc, #348]	; (8002538 <HAL_RCC_OscConfig+0x470>)
 80023da:	f023 0301 	bic.w	r3, r3, #1
 80023de:	6713      	str	r3, [r2, #112]	; 0x70
 80023e0:	4b55      	ldr	r3, [pc, #340]	; (8002538 <HAL_RCC_OscConfig+0x470>)
 80023e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e4:	4a54      	ldr	r2, [pc, #336]	; (8002538 <HAL_RCC_OscConfig+0x470>)
 80023e6:	f023 0304 	bic.w	r3, r3, #4
 80023ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d015      	beq.n	8002420 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f4:	f7ff f802 	bl	80013fc <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023fa:	e00a      	b.n	8002412 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023fc:	f7fe fffe 	bl	80013fc <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	f241 3288 	movw	r2, #5000	; 0x1388
 800240a:	4293      	cmp	r3, r2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e0c2      	b.n	8002598 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002412:	4b49      	ldr	r3, [pc, #292]	; (8002538 <HAL_RCC_OscConfig+0x470>)
 8002414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d0ee      	beq.n	80023fc <HAL_RCC_OscConfig+0x334>
 800241e:	e014      	b.n	800244a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002420:	f7fe ffec 	bl	80013fc <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002426:	e00a      	b.n	800243e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002428:	f7fe ffe8 	bl	80013fc <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	f241 3288 	movw	r2, #5000	; 0x1388
 8002436:	4293      	cmp	r3, r2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e0ac      	b.n	8002598 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800243e:	4b3e      	ldr	r3, [pc, #248]	; (8002538 <HAL_RCC_OscConfig+0x470>)
 8002440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1ee      	bne.n	8002428 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800244a:	7dfb      	ldrb	r3, [r7, #23]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d105      	bne.n	800245c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002450:	4b39      	ldr	r3, [pc, #228]	; (8002538 <HAL_RCC_OscConfig+0x470>)
 8002452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002454:	4a38      	ldr	r2, [pc, #224]	; (8002538 <HAL_RCC_OscConfig+0x470>)
 8002456:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800245a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	2b00      	cmp	r3, #0
 8002462:	f000 8098 	beq.w	8002596 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002466:	4b34      	ldr	r3, [pc, #208]	; (8002538 <HAL_RCC_OscConfig+0x470>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 030c 	and.w	r3, r3, #12
 800246e:	2b08      	cmp	r3, #8
 8002470:	d05c      	beq.n	800252c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	2b02      	cmp	r3, #2
 8002478:	d141      	bne.n	80024fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800247a:	4b31      	ldr	r3, [pc, #196]	; (8002540 <HAL_RCC_OscConfig+0x478>)
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002480:	f7fe ffbc 	bl	80013fc <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002488:	f7fe ffb8 	bl	80013fc <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e07e      	b.n	8002598 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800249a:	4b27      	ldr	r3, [pc, #156]	; (8002538 <HAL_RCC_OscConfig+0x470>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1f0      	bne.n	8002488 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	69da      	ldr	r2, [r3, #28]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	431a      	orrs	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b4:	019b      	lsls	r3, r3, #6
 80024b6:	431a      	orrs	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024bc:	085b      	lsrs	r3, r3, #1
 80024be:	3b01      	subs	r3, #1
 80024c0:	041b      	lsls	r3, r3, #16
 80024c2:	431a      	orrs	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c8:	061b      	lsls	r3, r3, #24
 80024ca:	491b      	ldr	r1, [pc, #108]	; (8002538 <HAL_RCC_OscConfig+0x470>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024d0:	4b1b      	ldr	r3, [pc, #108]	; (8002540 <HAL_RCC_OscConfig+0x478>)
 80024d2:	2201      	movs	r2, #1
 80024d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d6:	f7fe ff91 	bl	80013fc <HAL_GetTick>
 80024da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024dc:	e008      	b.n	80024f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024de:	f7fe ff8d 	bl	80013fc <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e053      	b.n	8002598 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024f0:	4b11      	ldr	r3, [pc, #68]	; (8002538 <HAL_RCC_OscConfig+0x470>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0f0      	beq.n	80024de <HAL_RCC_OscConfig+0x416>
 80024fc:	e04b      	b.n	8002596 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024fe:	4b10      	ldr	r3, [pc, #64]	; (8002540 <HAL_RCC_OscConfig+0x478>)
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002504:	f7fe ff7a 	bl	80013fc <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800250c:	f7fe ff76 	bl	80013fc <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e03c      	b.n	8002598 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800251e:	4b06      	ldr	r3, [pc, #24]	; (8002538 <HAL_RCC_OscConfig+0x470>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1f0      	bne.n	800250c <HAL_RCC_OscConfig+0x444>
 800252a:	e034      	b.n	8002596 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d107      	bne.n	8002544 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e02f      	b.n	8002598 <HAL_RCC_OscConfig+0x4d0>
 8002538:	40023800 	.word	0x40023800
 800253c:	40007000 	.word	0x40007000
 8002540:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002544:	4b16      	ldr	r3, [pc, #88]	; (80025a0 <HAL_RCC_OscConfig+0x4d8>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	69db      	ldr	r3, [r3, #28]
 8002554:	429a      	cmp	r2, r3
 8002556:	d11c      	bne.n	8002592 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002562:	429a      	cmp	r2, r3
 8002564:	d115      	bne.n	8002592 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800256c:	4013      	ands	r3, r2
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002572:	4293      	cmp	r3, r2
 8002574:	d10d      	bne.n	8002592 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002580:	429a      	cmp	r2, r3
 8002582:	d106      	bne.n	8002592 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800258e:	429a      	cmp	r2, r3
 8002590:	d001      	beq.n	8002596 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e000      	b.n	8002598 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	3718      	adds	r7, #24
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40023800 	.word	0x40023800

080025a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e0cc      	b.n	8002752 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025b8:	4b68      	ldr	r3, [pc, #416]	; (800275c <HAL_RCC_ClockConfig+0x1b8>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 030f 	and.w	r3, r3, #15
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d90c      	bls.n	80025e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c6:	4b65      	ldr	r3, [pc, #404]	; (800275c <HAL_RCC_ClockConfig+0x1b8>)
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	b2d2      	uxtb	r2, r2
 80025cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ce:	4b63      	ldr	r3, [pc, #396]	; (800275c <HAL_RCC_ClockConfig+0x1b8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	683a      	ldr	r2, [r7, #0]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d001      	beq.n	80025e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e0b8      	b.n	8002752 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d020      	beq.n	800262e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0304 	and.w	r3, r3, #4
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d005      	beq.n	8002604 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025f8:	4b59      	ldr	r3, [pc, #356]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	4a58      	ldr	r2, [pc, #352]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 80025fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002602:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0308 	and.w	r3, r3, #8
 800260c:	2b00      	cmp	r3, #0
 800260e:	d005      	beq.n	800261c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002610:	4b53      	ldr	r3, [pc, #332]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	4a52      	ldr	r2, [pc, #328]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 8002616:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800261a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800261c:	4b50      	ldr	r3, [pc, #320]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	494d      	ldr	r1, [pc, #308]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 800262a:	4313      	orrs	r3, r2
 800262c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	d044      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d107      	bne.n	8002652 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002642:	4b47      	ldr	r3, [pc, #284]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d119      	bne.n	8002682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e07f      	b.n	8002752 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b02      	cmp	r3, #2
 8002658:	d003      	beq.n	8002662 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800265e:	2b03      	cmp	r3, #3
 8002660:	d107      	bne.n	8002672 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002662:	4b3f      	ldr	r3, [pc, #252]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d109      	bne.n	8002682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e06f      	b.n	8002752 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002672:	4b3b      	ldr	r3, [pc, #236]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e067      	b.n	8002752 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002682:	4b37      	ldr	r3, [pc, #220]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f023 0203 	bic.w	r2, r3, #3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	4934      	ldr	r1, [pc, #208]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 8002690:	4313      	orrs	r3, r2
 8002692:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002694:	f7fe feb2 	bl	80013fc <HAL_GetTick>
 8002698:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269a:	e00a      	b.n	80026b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800269c:	f7fe feae 	bl	80013fc <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e04f      	b.n	8002752 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026b2:	4b2b      	ldr	r3, [pc, #172]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f003 020c 	and.w	r2, r3, #12
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d1eb      	bne.n	800269c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026c4:	4b25      	ldr	r3, [pc, #148]	; (800275c <HAL_RCC_ClockConfig+0x1b8>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 030f 	and.w	r3, r3, #15
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d20c      	bcs.n	80026ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d2:	4b22      	ldr	r3, [pc, #136]	; (800275c <HAL_RCC_ClockConfig+0x1b8>)
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	b2d2      	uxtb	r2, r2
 80026d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026da:	4b20      	ldr	r3, [pc, #128]	; (800275c <HAL_RCC_ClockConfig+0x1b8>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 030f 	and.w	r3, r3, #15
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d001      	beq.n	80026ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e032      	b.n	8002752 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0304 	and.w	r3, r3, #4
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d008      	beq.n	800270a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026f8:	4b19      	ldr	r3, [pc, #100]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	4916      	ldr	r1, [pc, #88]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 8002706:	4313      	orrs	r3, r2
 8002708:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0308 	and.w	r3, r3, #8
 8002712:	2b00      	cmp	r3, #0
 8002714:	d009      	beq.n	800272a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002716:	4b12      	ldr	r3, [pc, #72]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	490e      	ldr	r1, [pc, #56]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 8002726:	4313      	orrs	r3, r2
 8002728:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800272a:	f000 f821 	bl	8002770 <HAL_RCC_GetSysClockFreq>
 800272e:	4602      	mov	r2, r0
 8002730:	4b0b      	ldr	r3, [pc, #44]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	091b      	lsrs	r3, r3, #4
 8002736:	f003 030f 	and.w	r3, r3, #15
 800273a:	490a      	ldr	r1, [pc, #40]	; (8002764 <HAL_RCC_ClockConfig+0x1c0>)
 800273c:	5ccb      	ldrb	r3, [r1, r3]
 800273e:	fa22 f303 	lsr.w	r3, r2, r3
 8002742:	4a09      	ldr	r2, [pc, #36]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002744:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002746:	4b09      	ldr	r3, [pc, #36]	; (800276c <HAL_RCC_ClockConfig+0x1c8>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f7fe fe12 	bl	8001374 <HAL_InitTick>

  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	40023c00 	.word	0x40023c00
 8002760:	40023800 	.word	0x40023800
 8002764:	08004a30 	.word	0x08004a30
 8002768:	20000000 	.word	0x20000000
 800276c:	20000004 	.word	0x20000004

08002770 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002770:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002774:	b094      	sub	sp, #80	; 0x50
 8002776:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002778:	2300      	movs	r3, #0
 800277a:	647b      	str	r3, [r7, #68]	; 0x44
 800277c:	2300      	movs	r3, #0
 800277e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002780:	2300      	movs	r3, #0
 8002782:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002784:	2300      	movs	r3, #0
 8002786:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002788:	4b79      	ldr	r3, [pc, #484]	; (8002970 <HAL_RCC_GetSysClockFreq+0x200>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f003 030c 	and.w	r3, r3, #12
 8002790:	2b08      	cmp	r3, #8
 8002792:	d00d      	beq.n	80027b0 <HAL_RCC_GetSysClockFreq+0x40>
 8002794:	2b08      	cmp	r3, #8
 8002796:	f200 80e1 	bhi.w	800295c <HAL_RCC_GetSysClockFreq+0x1ec>
 800279a:	2b00      	cmp	r3, #0
 800279c:	d002      	beq.n	80027a4 <HAL_RCC_GetSysClockFreq+0x34>
 800279e:	2b04      	cmp	r3, #4
 80027a0:	d003      	beq.n	80027aa <HAL_RCC_GetSysClockFreq+0x3a>
 80027a2:	e0db      	b.n	800295c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027a4:	4b73      	ldr	r3, [pc, #460]	; (8002974 <HAL_RCC_GetSysClockFreq+0x204>)
 80027a6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80027a8:	e0db      	b.n	8002962 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027aa:	4b73      	ldr	r3, [pc, #460]	; (8002978 <HAL_RCC_GetSysClockFreq+0x208>)
 80027ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027ae:	e0d8      	b.n	8002962 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027b0:	4b6f      	ldr	r3, [pc, #444]	; (8002970 <HAL_RCC_GetSysClockFreq+0x200>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027b8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027ba:	4b6d      	ldr	r3, [pc, #436]	; (8002970 <HAL_RCC_GetSysClockFreq+0x200>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d063      	beq.n	800288e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027c6:	4b6a      	ldr	r3, [pc, #424]	; (8002970 <HAL_RCC_GetSysClockFreq+0x200>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	099b      	lsrs	r3, r3, #6
 80027cc:	2200      	movs	r2, #0
 80027ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80027d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80027d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027d8:	633b      	str	r3, [r7, #48]	; 0x30
 80027da:	2300      	movs	r3, #0
 80027dc:	637b      	str	r3, [r7, #52]	; 0x34
 80027de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80027e2:	4622      	mov	r2, r4
 80027e4:	462b      	mov	r3, r5
 80027e6:	f04f 0000 	mov.w	r0, #0
 80027ea:	f04f 0100 	mov.w	r1, #0
 80027ee:	0159      	lsls	r1, r3, #5
 80027f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027f4:	0150      	lsls	r0, r2, #5
 80027f6:	4602      	mov	r2, r0
 80027f8:	460b      	mov	r3, r1
 80027fa:	4621      	mov	r1, r4
 80027fc:	1a51      	subs	r1, r2, r1
 80027fe:	6139      	str	r1, [r7, #16]
 8002800:	4629      	mov	r1, r5
 8002802:	eb63 0301 	sbc.w	r3, r3, r1
 8002806:	617b      	str	r3, [r7, #20]
 8002808:	f04f 0200 	mov.w	r2, #0
 800280c:	f04f 0300 	mov.w	r3, #0
 8002810:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002814:	4659      	mov	r1, fp
 8002816:	018b      	lsls	r3, r1, #6
 8002818:	4651      	mov	r1, sl
 800281a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800281e:	4651      	mov	r1, sl
 8002820:	018a      	lsls	r2, r1, #6
 8002822:	4651      	mov	r1, sl
 8002824:	ebb2 0801 	subs.w	r8, r2, r1
 8002828:	4659      	mov	r1, fp
 800282a:	eb63 0901 	sbc.w	r9, r3, r1
 800282e:	f04f 0200 	mov.w	r2, #0
 8002832:	f04f 0300 	mov.w	r3, #0
 8002836:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800283a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800283e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002842:	4690      	mov	r8, r2
 8002844:	4699      	mov	r9, r3
 8002846:	4623      	mov	r3, r4
 8002848:	eb18 0303 	adds.w	r3, r8, r3
 800284c:	60bb      	str	r3, [r7, #8]
 800284e:	462b      	mov	r3, r5
 8002850:	eb49 0303 	adc.w	r3, r9, r3
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	f04f 0200 	mov.w	r2, #0
 800285a:	f04f 0300 	mov.w	r3, #0
 800285e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002862:	4629      	mov	r1, r5
 8002864:	024b      	lsls	r3, r1, #9
 8002866:	4621      	mov	r1, r4
 8002868:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800286c:	4621      	mov	r1, r4
 800286e:	024a      	lsls	r2, r1, #9
 8002870:	4610      	mov	r0, r2
 8002872:	4619      	mov	r1, r3
 8002874:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002876:	2200      	movs	r2, #0
 8002878:	62bb      	str	r3, [r7, #40]	; 0x28
 800287a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800287c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002880:	f7fd fca2 	bl	80001c8 <__aeabi_uldivmod>
 8002884:	4602      	mov	r2, r0
 8002886:	460b      	mov	r3, r1
 8002888:	4613      	mov	r3, r2
 800288a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800288c:	e058      	b.n	8002940 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800288e:	4b38      	ldr	r3, [pc, #224]	; (8002970 <HAL_RCC_GetSysClockFreq+0x200>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	099b      	lsrs	r3, r3, #6
 8002894:	2200      	movs	r2, #0
 8002896:	4618      	mov	r0, r3
 8002898:	4611      	mov	r1, r2
 800289a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800289e:	623b      	str	r3, [r7, #32]
 80028a0:	2300      	movs	r3, #0
 80028a2:	627b      	str	r3, [r7, #36]	; 0x24
 80028a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80028a8:	4642      	mov	r2, r8
 80028aa:	464b      	mov	r3, r9
 80028ac:	f04f 0000 	mov.w	r0, #0
 80028b0:	f04f 0100 	mov.w	r1, #0
 80028b4:	0159      	lsls	r1, r3, #5
 80028b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028ba:	0150      	lsls	r0, r2, #5
 80028bc:	4602      	mov	r2, r0
 80028be:	460b      	mov	r3, r1
 80028c0:	4641      	mov	r1, r8
 80028c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80028c6:	4649      	mov	r1, r9
 80028c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80028cc:	f04f 0200 	mov.w	r2, #0
 80028d0:	f04f 0300 	mov.w	r3, #0
 80028d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80028d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80028dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80028e0:	ebb2 040a 	subs.w	r4, r2, sl
 80028e4:	eb63 050b 	sbc.w	r5, r3, fp
 80028e8:	f04f 0200 	mov.w	r2, #0
 80028ec:	f04f 0300 	mov.w	r3, #0
 80028f0:	00eb      	lsls	r3, r5, #3
 80028f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028f6:	00e2      	lsls	r2, r4, #3
 80028f8:	4614      	mov	r4, r2
 80028fa:	461d      	mov	r5, r3
 80028fc:	4643      	mov	r3, r8
 80028fe:	18e3      	adds	r3, r4, r3
 8002900:	603b      	str	r3, [r7, #0]
 8002902:	464b      	mov	r3, r9
 8002904:	eb45 0303 	adc.w	r3, r5, r3
 8002908:	607b      	str	r3, [r7, #4]
 800290a:	f04f 0200 	mov.w	r2, #0
 800290e:	f04f 0300 	mov.w	r3, #0
 8002912:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002916:	4629      	mov	r1, r5
 8002918:	028b      	lsls	r3, r1, #10
 800291a:	4621      	mov	r1, r4
 800291c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002920:	4621      	mov	r1, r4
 8002922:	028a      	lsls	r2, r1, #10
 8002924:	4610      	mov	r0, r2
 8002926:	4619      	mov	r1, r3
 8002928:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800292a:	2200      	movs	r2, #0
 800292c:	61bb      	str	r3, [r7, #24]
 800292e:	61fa      	str	r2, [r7, #28]
 8002930:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002934:	f7fd fc48 	bl	80001c8 <__aeabi_uldivmod>
 8002938:	4602      	mov	r2, r0
 800293a:	460b      	mov	r3, r1
 800293c:	4613      	mov	r3, r2
 800293e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002940:	4b0b      	ldr	r3, [pc, #44]	; (8002970 <HAL_RCC_GetSysClockFreq+0x200>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	0c1b      	lsrs	r3, r3, #16
 8002946:	f003 0303 	and.w	r3, r3, #3
 800294a:	3301      	adds	r3, #1
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002950:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002952:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002954:	fbb2 f3f3 	udiv	r3, r2, r3
 8002958:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800295a:	e002      	b.n	8002962 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800295c:	4b05      	ldr	r3, [pc, #20]	; (8002974 <HAL_RCC_GetSysClockFreq+0x204>)
 800295e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002960:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002962:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002964:	4618      	mov	r0, r3
 8002966:	3750      	adds	r7, #80	; 0x50
 8002968:	46bd      	mov	sp, r7
 800296a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800296e:	bf00      	nop
 8002970:	40023800 	.word	0x40023800
 8002974:	00f42400 	.word	0x00f42400
 8002978:	007a1200 	.word	0x007a1200

0800297c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002980:	4b03      	ldr	r3, [pc, #12]	; (8002990 <HAL_RCC_GetHCLKFreq+0x14>)
 8002982:	681b      	ldr	r3, [r3, #0]
}
 8002984:	4618      	mov	r0, r3
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	20000000 	.word	0x20000000

08002994 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002998:	f7ff fff0 	bl	800297c <HAL_RCC_GetHCLKFreq>
 800299c:	4602      	mov	r2, r0
 800299e:	4b05      	ldr	r3, [pc, #20]	; (80029b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	0a9b      	lsrs	r3, r3, #10
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	4903      	ldr	r1, [pc, #12]	; (80029b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029aa:	5ccb      	ldrb	r3, [r1, r3]
 80029ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40023800 	.word	0x40023800
 80029b8:	08004a40 	.word	0x08004a40

080029bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80029c0:	f7ff ffdc 	bl	800297c <HAL_RCC_GetHCLKFreq>
 80029c4:	4602      	mov	r2, r0
 80029c6:	4b05      	ldr	r3, [pc, #20]	; (80029dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	0b5b      	lsrs	r3, r3, #13
 80029cc:	f003 0307 	and.w	r3, r3, #7
 80029d0:	4903      	ldr	r1, [pc, #12]	; (80029e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029d2:	5ccb      	ldrb	r3, [r1, r3]
 80029d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029d8:	4618      	mov	r0, r3
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	40023800 	.word	0x40023800
 80029e0:	08004a40 	.word	0x08004a40

080029e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e01d      	b.n	8002a32 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d106      	bne.n	8002a10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7fe fa9e 	bl	8000f4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2202      	movs	r2, #2
 8002a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3304      	adds	r3, #4
 8002a20:	4619      	mov	r1, r3
 8002a22:	4610      	mov	r0, r2
 8002a24:	f000 fbde 	bl	80031e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b085      	sub	sp, #20
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2202      	movs	r2, #2
 8002a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2b06      	cmp	r3, #6
 8002a5a:	d007      	beq.n	8002a6c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f042 0201 	orr.w	r2, r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b082      	sub	sp, #8
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d101      	bne.n	8002a94 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e01d      	b.n	8002ad0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d106      	bne.n	8002aae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f7fe faa1 	bl	8000ff0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	3304      	adds	r3, #4
 8002abe:	4619      	mov	r1, r3
 8002ac0:	4610      	mov	r0, r2
 8002ac2:	f000 fb8f 	bl	80031e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	6839      	ldr	r1, [r7, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f000 fe64 	bl	80037b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a15      	ldr	r2, [pc, #84]	; (8002b4c <HAL_TIM_PWM_Start+0x74>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d004      	beq.n	8002b04 <HAL_TIM_PWM_Start+0x2c>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a14      	ldr	r2, [pc, #80]	; (8002b50 <HAL_TIM_PWM_Start+0x78>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d101      	bne.n	8002b08 <HAL_TIM_PWM_Start+0x30>
 8002b04:	2301      	movs	r3, #1
 8002b06:	e000      	b.n	8002b0a <HAL_TIM_PWM_Start+0x32>
 8002b08:	2300      	movs	r3, #0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d007      	beq.n	8002b1e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b1c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f003 0307 	and.w	r3, r3, #7
 8002b28:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2b06      	cmp	r3, #6
 8002b2e:	d007      	beq.n	8002b40 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f042 0201 	orr.w	r2, r2, #1
 8002b3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40010000 	.word	0x40010000
 8002b50:	40010400 	.word	0x40010400

08002b54 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	2b0c      	cmp	r3, #12
 8002b62:	d841      	bhi.n	8002be8 <HAL_TIM_PWM_Start_IT+0x94>
 8002b64:	a201      	add	r2, pc, #4	; (adr r2, 8002b6c <HAL_TIM_PWM_Start_IT+0x18>)
 8002b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b6a:	bf00      	nop
 8002b6c:	08002ba1 	.word	0x08002ba1
 8002b70:	08002be9 	.word	0x08002be9
 8002b74:	08002be9 	.word	0x08002be9
 8002b78:	08002be9 	.word	0x08002be9
 8002b7c:	08002bb3 	.word	0x08002bb3
 8002b80:	08002be9 	.word	0x08002be9
 8002b84:	08002be9 	.word	0x08002be9
 8002b88:	08002be9 	.word	0x08002be9
 8002b8c:	08002bc5 	.word	0x08002bc5
 8002b90:	08002be9 	.word	0x08002be9
 8002b94:	08002be9 	.word	0x08002be9
 8002b98:	08002be9 	.word	0x08002be9
 8002b9c:	08002bd7 	.word	0x08002bd7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68da      	ldr	r2, [r3, #12]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 0202 	orr.w	r2, r2, #2
 8002bae:	60da      	str	r2, [r3, #12]
      break;
 8002bb0:	e01b      	b.n	8002bea <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68da      	ldr	r2, [r3, #12]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f042 0204 	orr.w	r2, r2, #4
 8002bc0:	60da      	str	r2, [r3, #12]
      break;
 8002bc2:	e012      	b.n	8002bea <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68da      	ldr	r2, [r3, #12]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f042 0208 	orr.w	r2, r2, #8
 8002bd2:	60da      	str	r2, [r3, #12]
      break;
 8002bd4:	e009      	b.n	8002bea <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68da      	ldr	r2, [r3, #12]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f042 0210 	orr.w	r2, r2, #16
 8002be4:	60da      	str	r2, [r3, #12]
      break;
 8002be6:	e000      	b.n	8002bea <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 8002be8:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	6839      	ldr	r1, [r7, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f000 fde0 	bl	80037b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a15      	ldr	r2, [pc, #84]	; (8002c54 <HAL_TIM_PWM_Start_IT+0x100>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d004      	beq.n	8002c0c <HAL_TIM_PWM_Start_IT+0xb8>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a14      	ldr	r2, [pc, #80]	; (8002c58 <HAL_TIM_PWM_Start_IT+0x104>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d101      	bne.n	8002c10 <HAL_TIM_PWM_Start_IT+0xbc>
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e000      	b.n	8002c12 <HAL_TIM_PWM_Start_IT+0xbe>
 8002c10:	2300      	movs	r3, #0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d007      	beq.n	8002c26 <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c24:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 0307 	and.w	r3, r3, #7
 8002c30:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2b06      	cmp	r3, #6
 8002c36:	d007      	beq.n	8002c48 <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 0201 	orr.w	r2, r2, #1
 8002c46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	40010000 	.word	0x40010000
 8002c58:	40010400 	.word	0x40010400

08002c5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d122      	bne.n	8002cb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d11b      	bne.n	8002cb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f06f 0202 	mvn.w	r2, #2
 8002c88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	f003 0303 	and.w	r3, r3, #3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d003      	beq.n	8002ca6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 fa82 	bl	80031a8 <HAL_TIM_IC_CaptureCallback>
 8002ca4:	e005      	b.n	8002cb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 fa74 	bl	8003194 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 fa85 	bl	80031bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	f003 0304 	and.w	r3, r3, #4
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	d122      	bne.n	8002d0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	f003 0304 	and.w	r3, r3, #4
 8002cd0:	2b04      	cmp	r3, #4
 8002cd2:	d11b      	bne.n	8002d0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f06f 0204 	mvn.w	r2, #4
 8002cdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2202      	movs	r2, #2
 8002ce2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d003      	beq.n	8002cfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 fa58 	bl	80031a8 <HAL_TIM_IC_CaptureCallback>
 8002cf8:	e005      	b.n	8002d06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 fa4a 	bl	8003194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 fa5b 	bl	80031bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	f003 0308 	and.w	r3, r3, #8
 8002d16:	2b08      	cmp	r3, #8
 8002d18:	d122      	bne.n	8002d60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	f003 0308 	and.w	r3, r3, #8
 8002d24:	2b08      	cmp	r3, #8
 8002d26:	d11b      	bne.n	8002d60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f06f 0208 	mvn.w	r2, #8
 8002d30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2204      	movs	r2, #4
 8002d36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	f003 0303 	and.w	r3, r3, #3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d003      	beq.n	8002d4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 fa2e 	bl	80031a8 <HAL_TIM_IC_CaptureCallback>
 8002d4c:	e005      	b.n	8002d5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 fa20 	bl	8003194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 fa31 	bl	80031bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	f003 0310 	and.w	r3, r3, #16
 8002d6a:	2b10      	cmp	r3, #16
 8002d6c:	d122      	bne.n	8002db4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	f003 0310 	and.w	r3, r3, #16
 8002d78:	2b10      	cmp	r3, #16
 8002d7a:	d11b      	bne.n	8002db4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f06f 0210 	mvn.w	r2, #16
 8002d84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2208      	movs	r2, #8
 8002d8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	69db      	ldr	r3, [r3, #28]
 8002d92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d003      	beq.n	8002da2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 fa04 	bl	80031a8 <HAL_TIM_IC_CaptureCallback>
 8002da0:	e005      	b.n	8002dae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 f9f6 	bl	8003194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f000 fa07 	bl	80031bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d10e      	bne.n	8002de0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d107      	bne.n	8002de0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f06f 0201 	mvn.w	r2, #1
 8002dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f9d0 	bl	8003180 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dea:	2b80      	cmp	r3, #128	; 0x80
 8002dec:	d10e      	bne.n	8002e0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df8:	2b80      	cmp	r3, #128	; 0x80
 8002dfa:	d107      	bne.n	8002e0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 fd82 	bl	8003910 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e16:	2b40      	cmp	r3, #64	; 0x40
 8002e18:	d10e      	bne.n	8002e38 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e24:	2b40      	cmp	r3, #64	; 0x40
 8002e26:	d107      	bne.n	8002e38 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 f9cc 	bl	80031d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	f003 0320 	and.w	r3, r3, #32
 8002e42:	2b20      	cmp	r3, #32
 8002e44:	d10e      	bne.n	8002e64 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	f003 0320 	and.w	r3, r3, #32
 8002e50:	2b20      	cmp	r3, #32
 8002e52:	d107      	bne.n	8002e64 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f06f 0220 	mvn.w	r2, #32
 8002e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 fd4c 	bl	80038fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e64:	bf00      	nop
 8002e66:	3708      	adds	r7, #8
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d101      	bne.n	8002e86 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002e82:	2302      	movs	r3, #2
 8002e84:	e0b4      	b.n	8002ff0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2202      	movs	r2, #2
 8002e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2b0c      	cmp	r3, #12
 8002e9a:	f200 809f 	bhi.w	8002fdc <HAL_TIM_PWM_ConfigChannel+0x170>
 8002e9e:	a201      	add	r2, pc, #4	; (adr r2, 8002ea4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea4:	08002ed9 	.word	0x08002ed9
 8002ea8:	08002fdd 	.word	0x08002fdd
 8002eac:	08002fdd 	.word	0x08002fdd
 8002eb0:	08002fdd 	.word	0x08002fdd
 8002eb4:	08002f19 	.word	0x08002f19
 8002eb8:	08002fdd 	.word	0x08002fdd
 8002ebc:	08002fdd 	.word	0x08002fdd
 8002ec0:	08002fdd 	.word	0x08002fdd
 8002ec4:	08002f5b 	.word	0x08002f5b
 8002ec8:	08002fdd 	.word	0x08002fdd
 8002ecc:	08002fdd 	.word	0x08002fdd
 8002ed0:	08002fdd 	.word	0x08002fdd
 8002ed4:	08002f9b 	.word	0x08002f9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68b9      	ldr	r1, [r7, #8]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f000 fa20 	bl	8003324 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	699a      	ldr	r2, [r3, #24]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f042 0208 	orr.w	r2, r2, #8
 8002ef2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	699a      	ldr	r2, [r3, #24]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 0204 	bic.w	r2, r2, #4
 8002f02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6999      	ldr	r1, [r3, #24]
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	691a      	ldr	r2, [r3, #16]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	619a      	str	r2, [r3, #24]
      break;
 8002f16:	e062      	b.n	8002fde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68b9      	ldr	r1, [r7, #8]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 fa70 	bl	8003404 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	699a      	ldr	r2, [r3, #24]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	699a      	ldr	r2, [r3, #24]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6999      	ldr	r1, [r3, #24]
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	021a      	lsls	r2, r3, #8
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	430a      	orrs	r2, r1
 8002f56:	619a      	str	r2, [r3, #24]
      break;
 8002f58:	e041      	b.n	8002fde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68b9      	ldr	r1, [r7, #8]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f000 fac5 	bl	80034f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	69da      	ldr	r2, [r3, #28]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f042 0208 	orr.w	r2, r2, #8
 8002f74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	69da      	ldr	r2, [r3, #28]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 0204 	bic.w	r2, r2, #4
 8002f84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	69d9      	ldr	r1, [r3, #28]
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	691a      	ldr	r2, [r3, #16]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	430a      	orrs	r2, r1
 8002f96:	61da      	str	r2, [r3, #28]
      break;
 8002f98:	e021      	b.n	8002fde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68b9      	ldr	r1, [r7, #8]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f000 fb19 	bl	80035d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	69da      	ldr	r2, [r3, #28]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	69da      	ldr	r2, [r3, #28]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	69d9      	ldr	r1, [r3, #28]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	021a      	lsls	r2, r3, #8
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	61da      	str	r2, [r3, #28]
      break;
 8002fda:	e000      	b.n	8002fde <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002fdc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003008:	2b01      	cmp	r3, #1
 800300a:	d101      	bne.n	8003010 <HAL_TIM_ConfigClockSource+0x18>
 800300c:	2302      	movs	r3, #2
 800300e:	e0b3      	b.n	8003178 <HAL_TIM_ConfigClockSource+0x180>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2202      	movs	r2, #2
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800302e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003036:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003048:	d03e      	beq.n	80030c8 <HAL_TIM_ConfigClockSource+0xd0>
 800304a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800304e:	f200 8087 	bhi.w	8003160 <HAL_TIM_ConfigClockSource+0x168>
 8003052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003056:	f000 8085 	beq.w	8003164 <HAL_TIM_ConfigClockSource+0x16c>
 800305a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800305e:	d87f      	bhi.n	8003160 <HAL_TIM_ConfigClockSource+0x168>
 8003060:	2b70      	cmp	r3, #112	; 0x70
 8003062:	d01a      	beq.n	800309a <HAL_TIM_ConfigClockSource+0xa2>
 8003064:	2b70      	cmp	r3, #112	; 0x70
 8003066:	d87b      	bhi.n	8003160 <HAL_TIM_ConfigClockSource+0x168>
 8003068:	2b60      	cmp	r3, #96	; 0x60
 800306a:	d050      	beq.n	800310e <HAL_TIM_ConfigClockSource+0x116>
 800306c:	2b60      	cmp	r3, #96	; 0x60
 800306e:	d877      	bhi.n	8003160 <HAL_TIM_ConfigClockSource+0x168>
 8003070:	2b50      	cmp	r3, #80	; 0x50
 8003072:	d03c      	beq.n	80030ee <HAL_TIM_ConfigClockSource+0xf6>
 8003074:	2b50      	cmp	r3, #80	; 0x50
 8003076:	d873      	bhi.n	8003160 <HAL_TIM_ConfigClockSource+0x168>
 8003078:	2b40      	cmp	r3, #64	; 0x40
 800307a:	d058      	beq.n	800312e <HAL_TIM_ConfigClockSource+0x136>
 800307c:	2b40      	cmp	r3, #64	; 0x40
 800307e:	d86f      	bhi.n	8003160 <HAL_TIM_ConfigClockSource+0x168>
 8003080:	2b30      	cmp	r3, #48	; 0x30
 8003082:	d064      	beq.n	800314e <HAL_TIM_ConfigClockSource+0x156>
 8003084:	2b30      	cmp	r3, #48	; 0x30
 8003086:	d86b      	bhi.n	8003160 <HAL_TIM_ConfigClockSource+0x168>
 8003088:	2b20      	cmp	r3, #32
 800308a:	d060      	beq.n	800314e <HAL_TIM_ConfigClockSource+0x156>
 800308c:	2b20      	cmp	r3, #32
 800308e:	d867      	bhi.n	8003160 <HAL_TIM_ConfigClockSource+0x168>
 8003090:	2b00      	cmp	r3, #0
 8003092:	d05c      	beq.n	800314e <HAL_TIM_ConfigClockSource+0x156>
 8003094:	2b10      	cmp	r3, #16
 8003096:	d05a      	beq.n	800314e <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003098:	e062      	b.n	8003160 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6818      	ldr	r0, [r3, #0]
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	6899      	ldr	r1, [r3, #8]
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	685a      	ldr	r2, [r3, #4]
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	f000 fb65 	bl	8003778 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030bc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	609a      	str	r2, [r3, #8]
      break;
 80030c6:	e04e      	b.n	8003166 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6818      	ldr	r0, [r3, #0]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	6899      	ldr	r1, [r3, #8]
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685a      	ldr	r2, [r3, #4]
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	f000 fb4e 	bl	8003778 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689a      	ldr	r2, [r3, #8]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030ea:	609a      	str	r2, [r3, #8]
      break;
 80030ec:	e03b      	b.n	8003166 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6818      	ldr	r0, [r3, #0]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	6859      	ldr	r1, [r3, #4]
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	461a      	mov	r2, r3
 80030fc:	f000 fac2 	bl	8003684 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2150      	movs	r1, #80	; 0x50
 8003106:	4618      	mov	r0, r3
 8003108:	f000 fb1b 	bl	8003742 <TIM_ITRx_SetConfig>
      break;
 800310c:	e02b      	b.n	8003166 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6818      	ldr	r0, [r3, #0]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	6859      	ldr	r1, [r3, #4]
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	461a      	mov	r2, r3
 800311c:	f000 fae1 	bl	80036e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2160      	movs	r1, #96	; 0x60
 8003126:	4618      	mov	r0, r3
 8003128:	f000 fb0b 	bl	8003742 <TIM_ITRx_SetConfig>
      break;
 800312c:	e01b      	b.n	8003166 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6818      	ldr	r0, [r3, #0]
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	6859      	ldr	r1, [r3, #4]
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	461a      	mov	r2, r3
 800313c:	f000 faa2 	bl	8003684 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2140      	movs	r1, #64	; 0x40
 8003146:	4618      	mov	r0, r3
 8003148:	f000 fafb 	bl	8003742 <TIM_ITRx_SetConfig>
      break;
 800314c:	e00b      	b.n	8003166 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4619      	mov	r1, r3
 8003158:	4610      	mov	r0, r2
 800315a:	f000 faf2 	bl	8003742 <TIM_ITRx_SetConfig>
      break;
 800315e:	e002      	b.n	8003166 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003160:	bf00      	nop
 8003162:	e000      	b.n	8003166 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003164:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2201      	movs	r2, #1
 800316a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a40      	ldr	r2, [pc, #256]	; (80032f8 <TIM_Base_SetConfig+0x114>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d013      	beq.n	8003224 <TIM_Base_SetConfig+0x40>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003202:	d00f      	beq.n	8003224 <TIM_Base_SetConfig+0x40>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a3d      	ldr	r2, [pc, #244]	; (80032fc <TIM_Base_SetConfig+0x118>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d00b      	beq.n	8003224 <TIM_Base_SetConfig+0x40>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a3c      	ldr	r2, [pc, #240]	; (8003300 <TIM_Base_SetConfig+0x11c>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d007      	beq.n	8003224 <TIM_Base_SetConfig+0x40>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a3b      	ldr	r2, [pc, #236]	; (8003304 <TIM_Base_SetConfig+0x120>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d003      	beq.n	8003224 <TIM_Base_SetConfig+0x40>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a3a      	ldr	r2, [pc, #232]	; (8003308 <TIM_Base_SetConfig+0x124>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d108      	bne.n	8003236 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800322a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	4313      	orrs	r3, r2
 8003234:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a2f      	ldr	r2, [pc, #188]	; (80032f8 <TIM_Base_SetConfig+0x114>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d02b      	beq.n	8003296 <TIM_Base_SetConfig+0xb2>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003244:	d027      	beq.n	8003296 <TIM_Base_SetConfig+0xb2>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a2c      	ldr	r2, [pc, #176]	; (80032fc <TIM_Base_SetConfig+0x118>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d023      	beq.n	8003296 <TIM_Base_SetConfig+0xb2>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a2b      	ldr	r2, [pc, #172]	; (8003300 <TIM_Base_SetConfig+0x11c>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d01f      	beq.n	8003296 <TIM_Base_SetConfig+0xb2>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a2a      	ldr	r2, [pc, #168]	; (8003304 <TIM_Base_SetConfig+0x120>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d01b      	beq.n	8003296 <TIM_Base_SetConfig+0xb2>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a29      	ldr	r2, [pc, #164]	; (8003308 <TIM_Base_SetConfig+0x124>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d017      	beq.n	8003296 <TIM_Base_SetConfig+0xb2>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a28      	ldr	r2, [pc, #160]	; (800330c <TIM_Base_SetConfig+0x128>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d013      	beq.n	8003296 <TIM_Base_SetConfig+0xb2>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a27      	ldr	r2, [pc, #156]	; (8003310 <TIM_Base_SetConfig+0x12c>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d00f      	beq.n	8003296 <TIM_Base_SetConfig+0xb2>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a26      	ldr	r2, [pc, #152]	; (8003314 <TIM_Base_SetConfig+0x130>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d00b      	beq.n	8003296 <TIM_Base_SetConfig+0xb2>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a25      	ldr	r2, [pc, #148]	; (8003318 <TIM_Base_SetConfig+0x134>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d007      	beq.n	8003296 <TIM_Base_SetConfig+0xb2>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a24      	ldr	r2, [pc, #144]	; (800331c <TIM_Base_SetConfig+0x138>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d003      	beq.n	8003296 <TIM_Base_SetConfig+0xb2>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a23      	ldr	r2, [pc, #140]	; (8003320 <TIM_Base_SetConfig+0x13c>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d108      	bne.n	80032a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800329c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a0a      	ldr	r2, [pc, #40]	; (80032f8 <TIM_Base_SetConfig+0x114>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d003      	beq.n	80032dc <TIM_Base_SetConfig+0xf8>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a0c      	ldr	r2, [pc, #48]	; (8003308 <TIM_Base_SetConfig+0x124>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d103      	bne.n	80032e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	691a      	ldr	r2, [r3, #16]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	615a      	str	r2, [r3, #20]
}
 80032ea:	bf00      	nop
 80032ec:	3714      	adds	r7, #20
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	40010000 	.word	0x40010000
 80032fc:	40000400 	.word	0x40000400
 8003300:	40000800 	.word	0x40000800
 8003304:	40000c00 	.word	0x40000c00
 8003308:	40010400 	.word	0x40010400
 800330c:	40014000 	.word	0x40014000
 8003310:	40014400 	.word	0x40014400
 8003314:	40014800 	.word	0x40014800
 8003318:	40001800 	.word	0x40001800
 800331c:	40001c00 	.word	0x40001c00
 8003320:	40002000 	.word	0x40002000

08003324 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003324:	b480      	push	{r7}
 8003326:	b087      	sub	sp, #28
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	f023 0201 	bic.w	r2, r3, #1
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f023 0303 	bic.w	r3, r3, #3
 800335a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	4313      	orrs	r3, r2
 8003364:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	f023 0302 	bic.w	r3, r3, #2
 800336c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	4313      	orrs	r3, r2
 8003376:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a20      	ldr	r2, [pc, #128]	; (80033fc <TIM_OC1_SetConfig+0xd8>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d003      	beq.n	8003388 <TIM_OC1_SetConfig+0x64>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a1f      	ldr	r2, [pc, #124]	; (8003400 <TIM_OC1_SetConfig+0xdc>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d10c      	bne.n	80033a2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	f023 0308 	bic.w	r3, r3, #8
 800338e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	697a      	ldr	r2, [r7, #20]
 8003396:	4313      	orrs	r3, r2
 8003398:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	f023 0304 	bic.w	r3, r3, #4
 80033a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a15      	ldr	r2, [pc, #84]	; (80033fc <TIM_OC1_SetConfig+0xd8>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d003      	beq.n	80033b2 <TIM_OC1_SetConfig+0x8e>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a14      	ldr	r2, [pc, #80]	; (8003400 <TIM_OC1_SetConfig+0xdc>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d111      	bne.n	80033d6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	697a      	ldr	r2, [r7, #20]
 80033ee:	621a      	str	r2, [r3, #32]
}
 80033f0:	bf00      	nop
 80033f2:	371c      	adds	r7, #28
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr
 80033fc:	40010000 	.word	0x40010000
 8003400:	40010400 	.word	0x40010400

08003404 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003404:	b480      	push	{r7}
 8003406:	b087      	sub	sp, #28
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	f023 0210 	bic.w	r2, r3, #16
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800343a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	021b      	lsls	r3, r3, #8
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	4313      	orrs	r3, r2
 8003446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	f023 0320 	bic.w	r3, r3, #32
 800344e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	011b      	lsls	r3, r3, #4
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	4313      	orrs	r3, r2
 800345a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a22      	ldr	r2, [pc, #136]	; (80034e8 <TIM_OC2_SetConfig+0xe4>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d003      	beq.n	800346c <TIM_OC2_SetConfig+0x68>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a21      	ldr	r2, [pc, #132]	; (80034ec <TIM_OC2_SetConfig+0xe8>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d10d      	bne.n	8003488 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003472:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	011b      	lsls	r3, r3, #4
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	4313      	orrs	r3, r2
 800347e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003486:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a17      	ldr	r2, [pc, #92]	; (80034e8 <TIM_OC2_SetConfig+0xe4>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d003      	beq.n	8003498 <TIM_OC2_SetConfig+0x94>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a16      	ldr	r2, [pc, #88]	; (80034ec <TIM_OC2_SetConfig+0xe8>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d113      	bne.n	80034c0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800349e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	4313      	orrs	r3, r2
 80034be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	621a      	str	r2, [r3, #32]
}
 80034da:	bf00      	nop
 80034dc:	371c      	adds	r7, #28
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	40010000 	.word	0x40010000
 80034ec:	40010400 	.word	0x40010400

080034f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b087      	sub	sp, #28
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a1b      	ldr	r3, [r3, #32]
 800350a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800351e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f023 0303 	bic.w	r3, r3, #3
 8003526:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	4313      	orrs	r3, r2
 8003530:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003538:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	021b      	lsls	r3, r3, #8
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	4313      	orrs	r3, r2
 8003544:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a21      	ldr	r2, [pc, #132]	; (80035d0 <TIM_OC3_SetConfig+0xe0>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d003      	beq.n	8003556 <TIM_OC3_SetConfig+0x66>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a20      	ldr	r2, [pc, #128]	; (80035d4 <TIM_OC3_SetConfig+0xe4>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d10d      	bne.n	8003572 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800355c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	021b      	lsls	r3, r3, #8
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	4313      	orrs	r3, r2
 8003568:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003570:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a16      	ldr	r2, [pc, #88]	; (80035d0 <TIM_OC3_SetConfig+0xe0>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d003      	beq.n	8003582 <TIM_OC3_SetConfig+0x92>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a15      	ldr	r2, [pc, #84]	; (80035d4 <TIM_OC3_SetConfig+0xe4>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d113      	bne.n	80035aa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003588:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003590:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	011b      	lsls	r3, r3, #4
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	4313      	orrs	r3, r2
 800359c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	011b      	lsls	r3, r3, #4
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685a      	ldr	r2, [r3, #4]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	621a      	str	r2, [r3, #32]
}
 80035c4:	bf00      	nop
 80035c6:	371c      	adds	r7, #28
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr
 80035d0:	40010000 	.word	0x40010000
 80035d4:	40010400 	.word	0x40010400

080035d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035d8:	b480      	push	{r7}
 80035da:	b087      	sub	sp, #28
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	69db      	ldr	r3, [r3, #28]
 80035fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003606:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800360e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	021b      	lsls	r3, r3, #8
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	4313      	orrs	r3, r2
 800361a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003622:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	031b      	lsls	r3, r3, #12
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	4313      	orrs	r3, r2
 800362e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4a12      	ldr	r2, [pc, #72]	; (800367c <TIM_OC4_SetConfig+0xa4>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d003      	beq.n	8003640 <TIM_OC4_SetConfig+0x68>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a11      	ldr	r2, [pc, #68]	; (8003680 <TIM_OC4_SetConfig+0xa8>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d109      	bne.n	8003654 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003646:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	695b      	ldr	r3, [r3, #20]
 800364c:	019b      	lsls	r3, r3, #6
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	4313      	orrs	r3, r2
 8003652:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	621a      	str	r2, [r3, #32]
}
 800366e:	bf00      	nop
 8003670:	371c      	adds	r7, #28
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	40010000 	.word	0x40010000
 8003680:	40010400 	.word	0x40010400

08003684 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003684:	b480      	push	{r7}
 8003686:	b087      	sub	sp, #28
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	f023 0201 	bic.w	r2, r3, #1
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	011b      	lsls	r3, r3, #4
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	f023 030a 	bic.w	r3, r3, #10
 80036c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	621a      	str	r2, [r3, #32]
}
 80036d6:	bf00      	nop
 80036d8:	371c      	adds	r7, #28
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr

080036e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036e2:	b480      	push	{r7}
 80036e4:	b087      	sub	sp, #28
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	60f8      	str	r0, [r7, #12]
 80036ea:	60b9      	str	r1, [r7, #8]
 80036ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	f023 0210 	bic.w	r2, r3, #16
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800370c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	031b      	lsls	r3, r3, #12
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	4313      	orrs	r3, r2
 8003716:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800371e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	011b      	lsls	r3, r3, #4
 8003724:	693a      	ldr	r2, [r7, #16]
 8003726:	4313      	orrs	r3, r2
 8003728:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	697a      	ldr	r2, [r7, #20]
 800372e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	693a      	ldr	r2, [r7, #16]
 8003734:	621a      	str	r2, [r3, #32]
}
 8003736:	bf00      	nop
 8003738:	371c      	adds	r7, #28
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr

08003742 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003742:	b480      	push	{r7}
 8003744:	b085      	sub	sp, #20
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
 800374a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003758:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800375a:	683a      	ldr	r2, [r7, #0]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	4313      	orrs	r3, r2
 8003760:	f043 0307 	orr.w	r3, r3, #7
 8003764:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	609a      	str	r2, [r3, #8]
}
 800376c:	bf00      	nop
 800376e:	3714      	adds	r7, #20
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003778:	b480      	push	{r7}
 800377a:	b087      	sub	sp, #28
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
 8003784:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003792:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	021a      	lsls	r2, r3, #8
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	431a      	orrs	r2, r3
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	4313      	orrs	r3, r2
 80037a0:	697a      	ldr	r2, [r7, #20]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	609a      	str	r2, [r3, #8]
}
 80037ac:	bf00      	nop
 80037ae:	371c      	adds	r7, #28
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b087      	sub	sp, #28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	f003 031f 	and.w	r3, r3, #31
 80037ca:	2201      	movs	r2, #1
 80037cc:	fa02 f303 	lsl.w	r3, r2, r3
 80037d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6a1a      	ldr	r2, [r3, #32]
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	43db      	mvns	r3, r3
 80037da:	401a      	ands	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6a1a      	ldr	r2, [r3, #32]
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	f003 031f 	and.w	r3, r3, #31
 80037ea:	6879      	ldr	r1, [r7, #4]
 80037ec:	fa01 f303 	lsl.w	r3, r1, r3
 80037f0:	431a      	orrs	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	621a      	str	r2, [r3, #32]
}
 80037f6:	bf00      	nop
 80037f8:	371c      	adds	r7, #28
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
	...

08003804 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003814:	2b01      	cmp	r3, #1
 8003816:	d101      	bne.n	800381c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003818:	2302      	movs	r3, #2
 800381a:	e05a      	b.n	80038d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2202      	movs	r2, #2
 8003828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003842:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	4313      	orrs	r3, r2
 800384c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a21      	ldr	r2, [pc, #132]	; (80038e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d022      	beq.n	80038a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003868:	d01d      	beq.n	80038a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a1d      	ldr	r2, [pc, #116]	; (80038e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d018      	beq.n	80038a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a1b      	ldr	r2, [pc, #108]	; (80038e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d013      	beq.n	80038a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a1a      	ldr	r2, [pc, #104]	; (80038ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d00e      	beq.n	80038a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a18      	ldr	r2, [pc, #96]	; (80038f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d009      	beq.n	80038a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a17      	ldr	r2, [pc, #92]	; (80038f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d004      	beq.n	80038a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a15      	ldr	r2, [pc, #84]	; (80038f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d10c      	bne.n	80038c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	68ba      	ldr	r2, [r7, #8]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68ba      	ldr	r2, [r7, #8]
 80038be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3714      	adds	r7, #20
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	40010000 	.word	0x40010000
 80038e4:	40000400 	.word	0x40000400
 80038e8:	40000800 	.word	0x40000800
 80038ec:	40000c00 	.word	0x40000c00
 80038f0:	40010400 	.word	0x40010400
 80038f4:	40014000 	.word	0x40014000
 80038f8:	40001800 	.word	0x40001800

080038fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e03f      	b.n	80039b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d106      	bne.n	8003950 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7fd fbd8 	bl	8001100 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2224      	movs	r2, #36	; 0x24
 8003954:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68da      	ldr	r2, [r3, #12]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003966:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 fabd 	bl	8003ee8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	691a      	ldr	r2, [r3, #16]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800397c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	695a      	ldr	r2, [r3, #20]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800398c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68da      	ldr	r2, [r3, #12]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800399c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2220      	movs	r2, #32
 80039a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2220      	movs	r2, #32
 80039b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039be:	b480      	push	{r7}
 80039c0:	b085      	sub	sp, #20
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	60f8      	str	r0, [r7, #12]
 80039c6:	60b9      	str	r1, [r7, #8]
 80039c8:	4613      	mov	r3, r2
 80039ca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	2b20      	cmp	r3, #32
 80039d6:	d140      	bne.n	8003a5a <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d002      	beq.n	80039e4 <HAL_UART_Receive_IT+0x26>
 80039de:	88fb      	ldrh	r3, [r7, #6]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d101      	bne.n	80039e8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e039      	b.n	8003a5c <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d101      	bne.n	80039f6 <HAL_UART_Receive_IT+0x38>
 80039f2:	2302      	movs	r3, #2
 80039f4:	e032      	b.n	8003a5c <HAL_UART_Receive_IT+0x9e>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	68ba      	ldr	r2, [r7, #8]
 8003a02:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	88fa      	ldrh	r2, [r7, #6]
 8003a08:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	88fa      	ldrh	r2, [r7, #6]
 8003a0e:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2222      	movs	r2, #34	; 0x22
 8003a1a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68da      	ldr	r2, [r3, #12]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a34:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	695a      	ldr	r2, [r3, #20]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f042 0201 	orr.w	r2, r2, #1
 8003a44:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68da      	ldr	r2, [r3, #12]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f042 0220 	orr.w	r2, r2, #32
 8003a54:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003a56:	2300      	movs	r3, #0
 8003a58:	e000      	b.n	8003a5c <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003a5a:	2302      	movs	r3, #2
  }
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3714      	adds	r7, #20
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b088      	sub	sp, #32
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	f003 030f 	and.w	r3, r3, #15
 8003a96:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10d      	bne.n	8003aba <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	f003 0320 	and.w	r3, r3, #32
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d008      	beq.n	8003aba <HAL_UART_IRQHandler+0x52>
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	f003 0320 	and.w	r3, r3, #32
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f996 	bl	8003de4 <UART_Receive_IT>
      return;
 8003ab8:	e0d0      	b.n	8003c5c <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f000 80b0 	beq.w	8003c22 <HAL_UART_IRQHandler+0x1ba>
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d105      	bne.n	8003ad8 <HAL_UART_IRQHandler+0x70>
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f000 80a5 	beq.w	8003c22 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00a      	beq.n	8003af8 <HAL_UART_IRQHandler+0x90>
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d005      	beq.n	8003af8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af0:	f043 0201 	orr.w	r2, r3, #1
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	f003 0304 	and.w	r3, r3, #4
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00a      	beq.n	8003b18 <HAL_UART_IRQHandler+0xb0>
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d005      	beq.n	8003b18 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b10:	f043 0202 	orr.w	r2, r3, #2
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00a      	beq.n	8003b38 <HAL_UART_IRQHandler+0xd0>
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d005      	beq.n	8003b38 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b30:	f043 0204 	orr.w	r2, r3, #4
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	f003 0308 	and.w	r3, r3, #8
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00f      	beq.n	8003b62 <HAL_UART_IRQHandler+0xfa>
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	f003 0320 	and.w	r3, r3, #32
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d104      	bne.n	8003b56 <HAL_UART_IRQHandler+0xee>
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d005      	beq.n	8003b62 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b5a:	f043 0208 	orr.w	r2, r3, #8
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d077      	beq.n	8003c5a <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	f003 0320 	and.w	r3, r3, #32
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d007      	beq.n	8003b84 <HAL_UART_IRQHandler+0x11c>
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	f003 0320 	and.w	r3, r3, #32
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d002      	beq.n	8003b84 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 f930 	bl	8003de4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b8e:	2b40      	cmp	r3, #64	; 0x40
 8003b90:	bf0c      	ite	eq
 8003b92:	2301      	moveq	r3, #1
 8003b94:	2300      	movne	r3, #0
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9e:	f003 0308 	and.w	r3, r3, #8
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d102      	bne.n	8003bac <HAL_UART_IRQHandler+0x144>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d031      	beq.n	8003c10 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 f879 	bl	8003ca4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bbc:	2b40      	cmp	r3, #64	; 0x40
 8003bbe:	d123      	bne.n	8003c08 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	695a      	ldr	r2, [r3, #20]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bce:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d013      	beq.n	8003c00 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bdc:	4a21      	ldr	r2, [pc, #132]	; (8003c64 <HAL_UART_IRQHandler+0x1fc>)
 8003bde:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7fd fe2d 	bl	8001844 <HAL_DMA_Abort_IT>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d016      	beq.n	8003c1e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003bfa:	4610      	mov	r0, r2
 8003bfc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bfe:	e00e      	b.n	8003c1e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 f845 	bl	8003c90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c06:	e00a      	b.n	8003c1e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 f841 	bl	8003c90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c0e:	e006      	b.n	8003c1e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 f83d 	bl	8003c90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003c1c:	e01d      	b.n	8003c5a <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c1e:	bf00      	nop
    return;
 8003c20:	e01b      	b.n	8003c5a <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d008      	beq.n	8003c3e <HAL_UART_IRQHandler+0x1d6>
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f866 	bl	8003d08 <UART_Transmit_IT>
    return;
 8003c3c:	e00e      	b.n	8003c5c <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d009      	beq.n	8003c5c <HAL_UART_IRQHandler+0x1f4>
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d004      	beq.n	8003c5c <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f8ae 	bl	8003db4 <UART_EndTransmit_IT>
    return;
 8003c58:	e000      	b.n	8003c5c <HAL_UART_IRQHandler+0x1f4>
    return;
 8003c5a:	bf00      	nop
  }
}
 8003c5c:	3720      	adds	r7, #32
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	08003ce1 	.word	0x08003ce1

08003c68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68da      	ldr	r2, [r3, #12]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003cba:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	695a      	ldr	r2, [r3, #20]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 0201 	bic.w	r2, r2, #1
 8003cca:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2220      	movs	r2, #32
 8003cd0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f7ff ffc8 	bl	8003c90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d00:	bf00      	nop
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b085      	sub	sp, #20
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2b21      	cmp	r3, #33	; 0x21
 8003d1a:	d144      	bne.n	8003da6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d24:	d11a      	bne.n	8003d5c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	881b      	ldrh	r3, [r3, #0]
 8003d30:	461a      	mov	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d3a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d105      	bne.n	8003d50 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a1b      	ldr	r3, [r3, #32]
 8003d48:	1c9a      	adds	r2, r3, #2
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	621a      	str	r2, [r3, #32]
 8003d4e:	e00e      	b.n	8003d6e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a1b      	ldr	r3, [r3, #32]
 8003d54:	1c5a      	adds	r2, r3, #1
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	621a      	str	r2, [r3, #32]
 8003d5a:	e008      	b.n	8003d6e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	1c59      	adds	r1, r3, #1
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	6211      	str	r1, [r2, #32]
 8003d66:	781a      	ldrb	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	3b01      	subs	r3, #1
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10f      	bne.n	8003da2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68da      	ldr	r2, [r3, #12]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d90:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68da      	ldr	r2, [r3, #12]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003da0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003da2:	2300      	movs	r3, #0
 8003da4:	e000      	b.n	8003da8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003da6:	2302      	movs	r3, #2
  }
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3714      	adds	r7, #20
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68da      	ldr	r2, [r3, #12]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f7ff ff47 	bl	8003c68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3708      	adds	r7, #8
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b22      	cmp	r3, #34	; 0x22
 8003df6:	d171      	bne.n	8003edc <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e00:	d123      	bne.n	8003e4a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e06:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d10e      	bne.n	8003e2e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e26:	1c9a      	adds	r2, r3, #2
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	629a      	str	r2, [r3, #40]	; 0x28
 8003e2c:	e029      	b.n	8003e82 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e42:	1c5a      	adds	r2, r3, #1
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	629a      	str	r2, [r3, #40]	; 0x28
 8003e48:	e01b      	b.n	8003e82 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10a      	bne.n	8003e68 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	6858      	ldr	r0, [r3, #4]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5c:	1c59      	adds	r1, r3, #1
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	6291      	str	r1, [r2, #40]	; 0x28
 8003e62:	b2c2      	uxtb	r2, r0
 8003e64:	701a      	strb	r2, [r3, #0]
 8003e66:	e00c      	b.n	8003e82 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	b2da      	uxtb	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e74:	1c58      	adds	r0, r3, #1
 8003e76:	6879      	ldr	r1, [r7, #4]
 8003e78:	6288      	str	r0, [r1, #40]	; 0x28
 8003e7a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e7e:	b2d2      	uxtb	r2, r2
 8003e80:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	4619      	mov	r1, r3
 8003e90:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d120      	bne.n	8003ed8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68da      	ldr	r2, [r3, #12]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f022 0220 	bic.w	r2, r2, #32
 8003ea4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68da      	ldr	r2, [r3, #12]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003eb4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	695a      	ldr	r2, [r3, #20]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 0201 	bic.w	r2, r2, #1
 8003ec4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2220      	movs	r2, #32
 8003eca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7ff fed4 	bl	8003c7c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	e002      	b.n	8003ede <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	e000      	b.n	8003ede <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003edc:	2302      	movs	r3, #2
  }
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
	...

08003ee8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ee8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003eec:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ef6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003f02:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f06:	68d9      	ldr	r1, [r3, #12]
 8003f08:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	ea40 0301 	orr.w	r3, r0, r1
 8003f12:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f14:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f18:	689a      	ldr	r2, [r3, #8]
 8003f1a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	431a      	orrs	r2, r3
 8003f22:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f2e:	69db      	ldr	r3, [r3, #28]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 8003f36:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003f42:	f021 010c 	bic.w	r1, r1, #12
 8003f46:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8003f50:	430b      	orrs	r3, r1
 8003f52:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f54:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	695b      	ldr	r3, [r3, #20]
 8003f5c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f60:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f64:	6999      	ldr	r1, [r3, #24]
 8003f66:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	ea40 0301 	orr.w	r3, r0, r1
 8003f70:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f72:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f76:	69db      	ldr	r3, [r3, #28]
 8003f78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f7c:	f040 824a 	bne.w	8004414 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f80:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	4b96      	ldr	r3, [pc, #600]	; (80041e0 <UART_SetConfig+0x2f8>)
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d006      	beq.n	8003f9a <UART_SetConfig+0xb2>
 8003f8c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	4b94      	ldr	r3, [pc, #592]	; (80041e4 <UART_SetConfig+0x2fc>)
 8003f94:	429a      	cmp	r2, r3
 8003f96:	f040 8129 	bne.w	80041ec <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f9a:	f7fe fd0f 	bl	80029bc <HAL_RCC_GetPCLK2Freq>
 8003f9e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003fa2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8003fac:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8003fb0:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8003fb4:	4622      	mov	r2, r4
 8003fb6:	462b      	mov	r3, r5
 8003fb8:	1891      	adds	r1, r2, r2
 8003fba:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8003fbe:	415b      	adcs	r3, r3
 8003fc0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003fc4:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8003fc8:	4621      	mov	r1, r4
 8003fca:	1851      	adds	r1, r2, r1
 8003fcc:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8003fd0:	4629      	mov	r1, r5
 8003fd2:	414b      	adcs	r3, r1
 8003fd4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003fd8:	f04f 0200 	mov.w	r2, #0
 8003fdc:	f04f 0300 	mov.w	r3, #0
 8003fe0:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8003fe4:	4649      	mov	r1, r9
 8003fe6:	00cb      	lsls	r3, r1, #3
 8003fe8:	4641      	mov	r1, r8
 8003fea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fee:	4641      	mov	r1, r8
 8003ff0:	00ca      	lsls	r2, r1, #3
 8003ff2:	4610      	mov	r0, r2
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	4622      	mov	r2, r4
 8003ffa:	189b      	adds	r3, r3, r2
 8003ffc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8004000:	462b      	mov	r3, r5
 8004002:	460a      	mov	r2, r1
 8004004:	eb42 0303 	adc.w	r3, r2, r3
 8004008:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800400c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004018:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 800401c:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 8004020:	460b      	mov	r3, r1
 8004022:	18db      	adds	r3, r3, r3
 8004024:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004028:	4613      	mov	r3, r2
 800402a:	eb42 0303 	adc.w	r3, r2, r3
 800402e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004032:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8004036:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 800403a:	f7fc f8c5 	bl	80001c8 <__aeabi_uldivmod>
 800403e:	4602      	mov	r2, r0
 8004040:	460b      	mov	r3, r1
 8004042:	4b69      	ldr	r3, [pc, #420]	; (80041e8 <UART_SetConfig+0x300>)
 8004044:	fba3 2302 	umull	r2, r3, r3, r2
 8004048:	095b      	lsrs	r3, r3, #5
 800404a:	011c      	lsls	r4, r3, #4
 800404c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004050:	2200      	movs	r2, #0
 8004052:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8004056:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800405a:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 800405e:	4642      	mov	r2, r8
 8004060:	464b      	mov	r3, r9
 8004062:	1891      	adds	r1, r2, r2
 8004064:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8004068:	415b      	adcs	r3, r3
 800406a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800406e:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8004072:	4641      	mov	r1, r8
 8004074:	1851      	adds	r1, r2, r1
 8004076:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 800407a:	4649      	mov	r1, r9
 800407c:	414b      	adcs	r3, r1
 800407e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004082:	f04f 0200 	mov.w	r2, #0
 8004086:	f04f 0300 	mov.w	r3, #0
 800408a:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 800408e:	4659      	mov	r1, fp
 8004090:	00cb      	lsls	r3, r1, #3
 8004092:	4651      	mov	r1, sl
 8004094:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004098:	4651      	mov	r1, sl
 800409a:	00ca      	lsls	r2, r1, #3
 800409c:	4610      	mov	r0, r2
 800409e:	4619      	mov	r1, r3
 80040a0:	4603      	mov	r3, r0
 80040a2:	4642      	mov	r2, r8
 80040a4:	189b      	adds	r3, r3, r2
 80040a6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80040aa:	464b      	mov	r3, r9
 80040ac:	460a      	mov	r2, r1
 80040ae:	eb42 0303 	adc.w	r3, r2, r3
 80040b2:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 80040b6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80040c2:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 80040c6:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 80040ca:	460b      	mov	r3, r1
 80040cc:	18db      	adds	r3, r3, r3
 80040ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80040d2:	4613      	mov	r3, r2
 80040d4:	eb42 0303 	adc.w	r3, r2, r3
 80040d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80040dc:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80040e0:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 80040e4:	f7fc f870 	bl	80001c8 <__aeabi_uldivmod>
 80040e8:	4602      	mov	r2, r0
 80040ea:	460b      	mov	r3, r1
 80040ec:	4611      	mov	r1, r2
 80040ee:	4b3e      	ldr	r3, [pc, #248]	; (80041e8 <UART_SetConfig+0x300>)
 80040f0:	fba3 2301 	umull	r2, r3, r3, r1
 80040f4:	095b      	lsrs	r3, r3, #5
 80040f6:	2264      	movs	r2, #100	; 0x64
 80040f8:	fb02 f303 	mul.w	r3, r2, r3
 80040fc:	1acb      	subs	r3, r1, r3
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004104:	4b38      	ldr	r3, [pc, #224]	; (80041e8 <UART_SetConfig+0x300>)
 8004106:	fba3 2302 	umull	r2, r3, r3, r2
 800410a:	095b      	lsrs	r3, r3, #5
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004112:	441c      	add	r4, r3
 8004114:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004118:	2200      	movs	r2, #0
 800411a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800411e:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8004122:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 8004126:	4642      	mov	r2, r8
 8004128:	464b      	mov	r3, r9
 800412a:	1891      	adds	r1, r2, r2
 800412c:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8004130:	415b      	adcs	r3, r3
 8004132:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004136:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800413a:	4641      	mov	r1, r8
 800413c:	1851      	adds	r1, r2, r1
 800413e:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8004142:	4649      	mov	r1, r9
 8004144:	414b      	adcs	r3, r1
 8004146:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800414a:	f04f 0200 	mov.w	r2, #0
 800414e:	f04f 0300 	mov.w	r3, #0
 8004152:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 8004156:	4659      	mov	r1, fp
 8004158:	00cb      	lsls	r3, r1, #3
 800415a:	4651      	mov	r1, sl
 800415c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004160:	4651      	mov	r1, sl
 8004162:	00ca      	lsls	r2, r1, #3
 8004164:	4610      	mov	r0, r2
 8004166:	4619      	mov	r1, r3
 8004168:	4603      	mov	r3, r0
 800416a:	4642      	mov	r2, r8
 800416c:	189b      	adds	r3, r3, r2
 800416e:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8004172:	464b      	mov	r3, r9
 8004174:	460a      	mov	r2, r1
 8004176:	eb42 0303 	adc.w	r3, r2, r3
 800417a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800417e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 800418a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 800418e:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 8004192:	460b      	mov	r3, r1
 8004194:	18db      	adds	r3, r3, r3
 8004196:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800419a:	4613      	mov	r3, r2
 800419c:	eb42 0303 	adc.w	r3, r2, r3
 80041a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80041a4:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80041a8:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 80041ac:	f7fc f80c 	bl	80001c8 <__aeabi_uldivmod>
 80041b0:	4602      	mov	r2, r0
 80041b2:	460b      	mov	r3, r1
 80041b4:	4b0c      	ldr	r3, [pc, #48]	; (80041e8 <UART_SetConfig+0x300>)
 80041b6:	fba3 1302 	umull	r1, r3, r3, r2
 80041ba:	095b      	lsrs	r3, r3, #5
 80041bc:	2164      	movs	r1, #100	; 0x64
 80041be:	fb01 f303 	mul.w	r3, r1, r3
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	00db      	lsls	r3, r3, #3
 80041c6:	3332      	adds	r3, #50	; 0x32
 80041c8:	4a07      	ldr	r2, [pc, #28]	; (80041e8 <UART_SetConfig+0x300>)
 80041ca:	fba2 2303 	umull	r2, r3, r2, r3
 80041ce:	095b      	lsrs	r3, r3, #5
 80041d0:	f003 0207 	and.w	r2, r3, #7
 80041d4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4422      	add	r2, r4
 80041dc:	609a      	str	r2, [r3, #8]
 80041de:	e349      	b.n	8004874 <UART_SetConfig+0x98c>
 80041e0:	40011000 	.word	0x40011000
 80041e4:	40011400 	.word	0x40011400
 80041e8:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041ec:	f7fe fbd2 	bl	8002994 <HAL_RCC_GetPCLK1Freq>
 80041f0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80041f8:	2200      	movs	r2, #0
 80041fa:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80041fe:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8004202:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8004206:	4622      	mov	r2, r4
 8004208:	462b      	mov	r3, r5
 800420a:	1891      	adds	r1, r2, r2
 800420c:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8004210:	415b      	adcs	r3, r3
 8004212:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004216:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800421a:	4621      	mov	r1, r4
 800421c:	eb12 0a01 	adds.w	sl, r2, r1
 8004220:	4629      	mov	r1, r5
 8004222:	eb43 0b01 	adc.w	fp, r3, r1
 8004226:	f04f 0200 	mov.w	r2, #0
 800422a:	f04f 0300 	mov.w	r3, #0
 800422e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004232:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004236:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800423a:	4692      	mov	sl, r2
 800423c:	469b      	mov	fp, r3
 800423e:	4623      	mov	r3, r4
 8004240:	eb1a 0303 	adds.w	r3, sl, r3
 8004244:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004248:	462b      	mov	r3, r5
 800424a:	eb4b 0303 	adc.w	r3, fp, r3
 800424e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004252:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 800425e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8004262:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8004266:	460b      	mov	r3, r1
 8004268:	18db      	adds	r3, r3, r3
 800426a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800426e:	4613      	mov	r3, r2
 8004270:	eb42 0303 	adc.w	r3, r2, r3
 8004274:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004278:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800427c:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8004280:	f7fb ffa2 	bl	80001c8 <__aeabi_uldivmod>
 8004284:	4602      	mov	r2, r0
 8004286:	460b      	mov	r3, r1
 8004288:	4b61      	ldr	r3, [pc, #388]	; (8004410 <UART_SetConfig+0x528>)
 800428a:	fba3 2302 	umull	r2, r3, r3, r2
 800428e:	095b      	lsrs	r3, r3, #5
 8004290:	011c      	lsls	r4, r3, #4
 8004292:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004296:	2200      	movs	r2, #0
 8004298:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 800429c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 80042a0:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 80042a4:	4642      	mov	r2, r8
 80042a6:	464b      	mov	r3, r9
 80042a8:	1891      	adds	r1, r2, r2
 80042aa:	67b9      	str	r1, [r7, #120]	; 0x78
 80042ac:	415b      	adcs	r3, r3
 80042ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 80042b0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80042b4:	4641      	mov	r1, r8
 80042b6:	1851      	adds	r1, r2, r1
 80042b8:	6739      	str	r1, [r7, #112]	; 0x70
 80042ba:	4649      	mov	r1, r9
 80042bc:	414b      	adcs	r3, r1
 80042be:	677b      	str	r3, [r7, #116]	; 0x74
 80042c0:	f04f 0200 	mov.w	r2, #0
 80042c4:	f04f 0300 	mov.w	r3, #0
 80042c8:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 80042cc:	4659      	mov	r1, fp
 80042ce:	00cb      	lsls	r3, r1, #3
 80042d0:	4651      	mov	r1, sl
 80042d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042d6:	4651      	mov	r1, sl
 80042d8:	00ca      	lsls	r2, r1, #3
 80042da:	4610      	mov	r0, r2
 80042dc:	4619      	mov	r1, r3
 80042de:	4603      	mov	r3, r0
 80042e0:	4642      	mov	r2, r8
 80042e2:	189b      	adds	r3, r3, r2
 80042e4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80042e8:	464b      	mov	r3, r9
 80042ea:	460a      	mov	r2, r1
 80042ec:	eb42 0303 	adc.w	r3, r2, r3
 80042f0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 80042f4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004300:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8004304:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8004308:	460b      	mov	r3, r1
 800430a:	18db      	adds	r3, r3, r3
 800430c:	66bb      	str	r3, [r7, #104]	; 0x68
 800430e:	4613      	mov	r3, r2
 8004310:	eb42 0303 	adc.w	r3, r2, r3
 8004314:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004316:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800431a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800431e:	f7fb ff53 	bl	80001c8 <__aeabi_uldivmod>
 8004322:	4602      	mov	r2, r0
 8004324:	460b      	mov	r3, r1
 8004326:	4611      	mov	r1, r2
 8004328:	4b39      	ldr	r3, [pc, #228]	; (8004410 <UART_SetConfig+0x528>)
 800432a:	fba3 2301 	umull	r2, r3, r3, r1
 800432e:	095b      	lsrs	r3, r3, #5
 8004330:	2264      	movs	r2, #100	; 0x64
 8004332:	fb02 f303 	mul.w	r3, r2, r3
 8004336:	1acb      	subs	r3, r1, r3
 8004338:	00db      	lsls	r3, r3, #3
 800433a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800433e:	4b34      	ldr	r3, [pc, #208]	; (8004410 <UART_SetConfig+0x528>)
 8004340:	fba3 2302 	umull	r2, r3, r3, r2
 8004344:	095b      	lsrs	r3, r3, #5
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800434c:	441c      	add	r4, r3
 800434e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004352:	2200      	movs	r2, #0
 8004354:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8004358:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800435c:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8004360:	4642      	mov	r2, r8
 8004362:	464b      	mov	r3, r9
 8004364:	1891      	adds	r1, r2, r2
 8004366:	6639      	str	r1, [r7, #96]	; 0x60
 8004368:	415b      	adcs	r3, r3
 800436a:	667b      	str	r3, [r7, #100]	; 0x64
 800436c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004370:	4641      	mov	r1, r8
 8004372:	1851      	adds	r1, r2, r1
 8004374:	65b9      	str	r1, [r7, #88]	; 0x58
 8004376:	4649      	mov	r1, r9
 8004378:	414b      	adcs	r3, r1
 800437a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800437c:	f04f 0200 	mov.w	r2, #0
 8004380:	f04f 0300 	mov.w	r3, #0
 8004384:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8004388:	4659      	mov	r1, fp
 800438a:	00cb      	lsls	r3, r1, #3
 800438c:	4651      	mov	r1, sl
 800438e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004392:	4651      	mov	r1, sl
 8004394:	00ca      	lsls	r2, r1, #3
 8004396:	4610      	mov	r0, r2
 8004398:	4619      	mov	r1, r3
 800439a:	4603      	mov	r3, r0
 800439c:	4642      	mov	r2, r8
 800439e:	189b      	adds	r3, r3, r2
 80043a0:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80043a4:	464b      	mov	r3, r9
 80043a6:	460a      	mov	r2, r1
 80043a8:	eb42 0303 	adc.w	r3, r2, r3
 80043ac:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80043b0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 80043bc:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 80043c0:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 80043c4:	460b      	mov	r3, r1
 80043c6:	18db      	adds	r3, r3, r3
 80043c8:	653b      	str	r3, [r7, #80]	; 0x50
 80043ca:	4613      	mov	r3, r2
 80043cc:	eb42 0303 	adc.w	r3, r2, r3
 80043d0:	657b      	str	r3, [r7, #84]	; 0x54
 80043d2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80043d6:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 80043da:	f7fb fef5 	bl	80001c8 <__aeabi_uldivmod>
 80043de:	4602      	mov	r2, r0
 80043e0:	460b      	mov	r3, r1
 80043e2:	4b0b      	ldr	r3, [pc, #44]	; (8004410 <UART_SetConfig+0x528>)
 80043e4:	fba3 1302 	umull	r1, r3, r3, r2
 80043e8:	095b      	lsrs	r3, r3, #5
 80043ea:	2164      	movs	r1, #100	; 0x64
 80043ec:	fb01 f303 	mul.w	r3, r1, r3
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	00db      	lsls	r3, r3, #3
 80043f4:	3332      	adds	r3, #50	; 0x32
 80043f6:	4a06      	ldr	r2, [pc, #24]	; (8004410 <UART_SetConfig+0x528>)
 80043f8:	fba2 2303 	umull	r2, r3, r2, r3
 80043fc:	095b      	lsrs	r3, r3, #5
 80043fe:	f003 0207 	and.w	r2, r3, #7
 8004402:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4422      	add	r2, r4
 800440a:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800440c:	e232      	b.n	8004874 <UART_SetConfig+0x98c>
 800440e:	bf00      	nop
 8004410:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004414:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	4b8d      	ldr	r3, [pc, #564]	; (8004650 <UART_SetConfig+0x768>)
 800441c:	429a      	cmp	r2, r3
 800441e:	d006      	beq.n	800442e <UART_SetConfig+0x546>
 8004420:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	4b8b      	ldr	r3, [pc, #556]	; (8004654 <UART_SetConfig+0x76c>)
 8004428:	429a      	cmp	r2, r3
 800442a:	f040 8117 	bne.w	800465c <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 800442e:	f7fe fac5 	bl	80029bc <HAL_RCC_GetPCLK2Freq>
 8004432:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004436:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800443a:	2200      	movs	r2, #0
 800443c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8004440:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8004444:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8004448:	4622      	mov	r2, r4
 800444a:	462b      	mov	r3, r5
 800444c:	1891      	adds	r1, r2, r2
 800444e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004450:	415b      	adcs	r3, r3
 8004452:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004454:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004458:	4621      	mov	r1, r4
 800445a:	eb12 0801 	adds.w	r8, r2, r1
 800445e:	4629      	mov	r1, r5
 8004460:	eb43 0901 	adc.w	r9, r3, r1
 8004464:	f04f 0200 	mov.w	r2, #0
 8004468:	f04f 0300 	mov.w	r3, #0
 800446c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004470:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004474:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004478:	4690      	mov	r8, r2
 800447a:	4699      	mov	r9, r3
 800447c:	4623      	mov	r3, r4
 800447e:	eb18 0303 	adds.w	r3, r8, r3
 8004482:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004486:	462b      	mov	r3, r5
 8004488:	eb49 0303 	adc.w	r3, r9, r3
 800448c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8004490:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800449c:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 80044a0:	f04f 0200 	mov.w	r2, #0
 80044a4:	f04f 0300 	mov.w	r3, #0
 80044a8:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 80044ac:	4629      	mov	r1, r5
 80044ae:	008b      	lsls	r3, r1, #2
 80044b0:	4621      	mov	r1, r4
 80044b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044b6:	4621      	mov	r1, r4
 80044b8:	008a      	lsls	r2, r1, #2
 80044ba:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 80044be:	f7fb fe83 	bl	80001c8 <__aeabi_uldivmod>
 80044c2:	4602      	mov	r2, r0
 80044c4:	460b      	mov	r3, r1
 80044c6:	4b64      	ldr	r3, [pc, #400]	; (8004658 <UART_SetConfig+0x770>)
 80044c8:	fba3 2302 	umull	r2, r3, r3, r2
 80044cc:	095b      	lsrs	r3, r3, #5
 80044ce:	011c      	lsls	r4, r3, #4
 80044d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80044d4:	2200      	movs	r2, #0
 80044d6:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80044da:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80044de:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 80044e2:	4642      	mov	r2, r8
 80044e4:	464b      	mov	r3, r9
 80044e6:	1891      	adds	r1, r2, r2
 80044e8:	6439      	str	r1, [r7, #64]	; 0x40
 80044ea:	415b      	adcs	r3, r3
 80044ec:	647b      	str	r3, [r7, #68]	; 0x44
 80044ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80044f2:	4641      	mov	r1, r8
 80044f4:	1851      	adds	r1, r2, r1
 80044f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80044f8:	4649      	mov	r1, r9
 80044fa:	414b      	adcs	r3, r1
 80044fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044fe:	f04f 0200 	mov.w	r2, #0
 8004502:	f04f 0300 	mov.w	r3, #0
 8004506:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 800450a:	4659      	mov	r1, fp
 800450c:	00cb      	lsls	r3, r1, #3
 800450e:	4651      	mov	r1, sl
 8004510:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004514:	4651      	mov	r1, sl
 8004516:	00ca      	lsls	r2, r1, #3
 8004518:	4610      	mov	r0, r2
 800451a:	4619      	mov	r1, r3
 800451c:	4603      	mov	r3, r0
 800451e:	4642      	mov	r2, r8
 8004520:	189b      	adds	r3, r3, r2
 8004522:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8004526:	464b      	mov	r3, r9
 8004528:	460a      	mov	r2, r1
 800452a:	eb42 0303 	adc.w	r3, r2, r3
 800452e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8004532:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800453e:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8004542:	f04f 0200 	mov.w	r2, #0
 8004546:	f04f 0300 	mov.w	r3, #0
 800454a:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 800454e:	4649      	mov	r1, r9
 8004550:	008b      	lsls	r3, r1, #2
 8004552:	4641      	mov	r1, r8
 8004554:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004558:	4641      	mov	r1, r8
 800455a:	008a      	lsls	r2, r1, #2
 800455c:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8004560:	f7fb fe32 	bl	80001c8 <__aeabi_uldivmod>
 8004564:	4602      	mov	r2, r0
 8004566:	460b      	mov	r3, r1
 8004568:	4b3b      	ldr	r3, [pc, #236]	; (8004658 <UART_SetConfig+0x770>)
 800456a:	fba3 1302 	umull	r1, r3, r3, r2
 800456e:	095b      	lsrs	r3, r3, #5
 8004570:	2164      	movs	r1, #100	; 0x64
 8004572:	fb01 f303 	mul.w	r3, r1, r3
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	011b      	lsls	r3, r3, #4
 800457a:	3332      	adds	r3, #50	; 0x32
 800457c:	4a36      	ldr	r2, [pc, #216]	; (8004658 <UART_SetConfig+0x770>)
 800457e:	fba2 2303 	umull	r2, r3, r2, r3
 8004582:	095b      	lsrs	r3, r3, #5
 8004584:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004588:	441c      	add	r4, r3
 800458a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800458e:	2200      	movs	r2, #0
 8004590:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004594:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8004598:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 800459c:	4642      	mov	r2, r8
 800459e:	464b      	mov	r3, r9
 80045a0:	1891      	adds	r1, r2, r2
 80045a2:	6339      	str	r1, [r7, #48]	; 0x30
 80045a4:	415b      	adcs	r3, r3
 80045a6:	637b      	str	r3, [r7, #52]	; 0x34
 80045a8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80045ac:	4641      	mov	r1, r8
 80045ae:	1851      	adds	r1, r2, r1
 80045b0:	62b9      	str	r1, [r7, #40]	; 0x28
 80045b2:	4649      	mov	r1, r9
 80045b4:	414b      	adcs	r3, r1
 80045b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045b8:	f04f 0200 	mov.w	r2, #0
 80045bc:	f04f 0300 	mov.w	r3, #0
 80045c0:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 80045c4:	4659      	mov	r1, fp
 80045c6:	00cb      	lsls	r3, r1, #3
 80045c8:	4651      	mov	r1, sl
 80045ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045ce:	4651      	mov	r1, sl
 80045d0:	00ca      	lsls	r2, r1, #3
 80045d2:	4610      	mov	r0, r2
 80045d4:	4619      	mov	r1, r3
 80045d6:	4603      	mov	r3, r0
 80045d8:	4642      	mov	r2, r8
 80045da:	189b      	adds	r3, r3, r2
 80045dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80045e0:	464b      	mov	r3, r9
 80045e2:	460a      	mov	r2, r1
 80045e4:	eb42 0303 	adc.w	r3, r2, r3
 80045e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80045ec:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80045f8:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 80045fc:	f04f 0200 	mov.w	r2, #0
 8004600:	f04f 0300 	mov.w	r3, #0
 8004604:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 8004608:	4649      	mov	r1, r9
 800460a:	008b      	lsls	r3, r1, #2
 800460c:	4641      	mov	r1, r8
 800460e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004612:	4641      	mov	r1, r8
 8004614:	008a      	lsls	r2, r1, #2
 8004616:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800461a:	f7fb fdd5 	bl	80001c8 <__aeabi_uldivmod>
 800461e:	4602      	mov	r2, r0
 8004620:	460b      	mov	r3, r1
 8004622:	4b0d      	ldr	r3, [pc, #52]	; (8004658 <UART_SetConfig+0x770>)
 8004624:	fba3 1302 	umull	r1, r3, r3, r2
 8004628:	095b      	lsrs	r3, r3, #5
 800462a:	2164      	movs	r1, #100	; 0x64
 800462c:	fb01 f303 	mul.w	r3, r1, r3
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	011b      	lsls	r3, r3, #4
 8004634:	3332      	adds	r3, #50	; 0x32
 8004636:	4a08      	ldr	r2, [pc, #32]	; (8004658 <UART_SetConfig+0x770>)
 8004638:	fba2 2303 	umull	r2, r3, r2, r3
 800463c:	095b      	lsrs	r3, r3, #5
 800463e:	f003 020f 	and.w	r2, r3, #15
 8004642:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4422      	add	r2, r4
 800464a:	609a      	str	r2, [r3, #8]
 800464c:	e112      	b.n	8004874 <UART_SetConfig+0x98c>
 800464e:	bf00      	nop
 8004650:	40011000 	.word	0x40011000
 8004654:	40011400 	.word	0x40011400
 8004658:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 800465c:	f7fe f99a 	bl	8002994 <HAL_RCC_GetPCLK1Freq>
 8004660:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004664:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004668:	2200      	movs	r2, #0
 800466a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800466e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004672:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8004676:	4642      	mov	r2, r8
 8004678:	464b      	mov	r3, r9
 800467a:	1891      	adds	r1, r2, r2
 800467c:	6239      	str	r1, [r7, #32]
 800467e:	415b      	adcs	r3, r3
 8004680:	627b      	str	r3, [r7, #36]	; 0x24
 8004682:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004686:	4641      	mov	r1, r8
 8004688:	1854      	adds	r4, r2, r1
 800468a:	4649      	mov	r1, r9
 800468c:	eb43 0501 	adc.w	r5, r3, r1
 8004690:	f04f 0200 	mov.w	r2, #0
 8004694:	f04f 0300 	mov.w	r3, #0
 8004698:	00eb      	lsls	r3, r5, #3
 800469a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800469e:	00e2      	lsls	r2, r4, #3
 80046a0:	4614      	mov	r4, r2
 80046a2:	461d      	mov	r5, r3
 80046a4:	4643      	mov	r3, r8
 80046a6:	18e3      	adds	r3, r4, r3
 80046a8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80046ac:	464b      	mov	r3, r9
 80046ae:	eb45 0303 	adc.w	r3, r5, r3
 80046b2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80046b6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80046c2:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80046c6:	f04f 0200 	mov.w	r2, #0
 80046ca:	f04f 0300 	mov.w	r3, #0
 80046ce:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 80046d2:	4629      	mov	r1, r5
 80046d4:	008b      	lsls	r3, r1, #2
 80046d6:	4621      	mov	r1, r4
 80046d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046dc:	4621      	mov	r1, r4
 80046de:	008a      	lsls	r2, r1, #2
 80046e0:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 80046e4:	f7fb fd70 	bl	80001c8 <__aeabi_uldivmod>
 80046e8:	4602      	mov	r2, r0
 80046ea:	460b      	mov	r3, r1
 80046ec:	4b64      	ldr	r3, [pc, #400]	; (8004880 <UART_SetConfig+0x998>)
 80046ee:	fba3 2302 	umull	r2, r3, r3, r2
 80046f2:	095b      	lsrs	r3, r3, #5
 80046f4:	011c      	lsls	r4, r3, #4
 80046f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80046fa:	2200      	movs	r2, #0
 80046fc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004700:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8004704:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8004708:	4642      	mov	r2, r8
 800470a:	464b      	mov	r3, r9
 800470c:	1891      	adds	r1, r2, r2
 800470e:	61b9      	str	r1, [r7, #24]
 8004710:	415b      	adcs	r3, r3
 8004712:	61fb      	str	r3, [r7, #28]
 8004714:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004718:	4641      	mov	r1, r8
 800471a:	1851      	adds	r1, r2, r1
 800471c:	6139      	str	r1, [r7, #16]
 800471e:	4649      	mov	r1, r9
 8004720:	414b      	adcs	r3, r1
 8004722:	617b      	str	r3, [r7, #20]
 8004724:	f04f 0200 	mov.w	r2, #0
 8004728:	f04f 0300 	mov.w	r3, #0
 800472c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004730:	4659      	mov	r1, fp
 8004732:	00cb      	lsls	r3, r1, #3
 8004734:	4651      	mov	r1, sl
 8004736:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800473a:	4651      	mov	r1, sl
 800473c:	00ca      	lsls	r2, r1, #3
 800473e:	4610      	mov	r0, r2
 8004740:	4619      	mov	r1, r3
 8004742:	4603      	mov	r3, r0
 8004744:	4642      	mov	r2, r8
 8004746:	189b      	adds	r3, r3, r2
 8004748:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800474c:	464b      	mov	r3, r9
 800474e:	460a      	mov	r2, r1
 8004750:	eb42 0303 	adc.w	r3, r2, r3
 8004754:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004758:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004764:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004768:	f04f 0200 	mov.w	r2, #0
 800476c:	f04f 0300 	mov.w	r3, #0
 8004770:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8004774:	4649      	mov	r1, r9
 8004776:	008b      	lsls	r3, r1, #2
 8004778:	4641      	mov	r1, r8
 800477a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800477e:	4641      	mov	r1, r8
 8004780:	008a      	lsls	r2, r1, #2
 8004782:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8004786:	f7fb fd1f 	bl	80001c8 <__aeabi_uldivmod>
 800478a:	4602      	mov	r2, r0
 800478c:	460b      	mov	r3, r1
 800478e:	4b3c      	ldr	r3, [pc, #240]	; (8004880 <UART_SetConfig+0x998>)
 8004790:	fba3 1302 	umull	r1, r3, r3, r2
 8004794:	095b      	lsrs	r3, r3, #5
 8004796:	2164      	movs	r1, #100	; 0x64
 8004798:	fb01 f303 	mul.w	r3, r1, r3
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	011b      	lsls	r3, r3, #4
 80047a0:	3332      	adds	r3, #50	; 0x32
 80047a2:	4a37      	ldr	r2, [pc, #220]	; (8004880 <UART_SetConfig+0x998>)
 80047a4:	fba2 2303 	umull	r2, r3, r2, r3
 80047a8:	095b      	lsrs	r3, r3, #5
 80047aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047ae:	441c      	add	r4, r3
 80047b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80047b4:	2200      	movs	r2, #0
 80047b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80047ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80047be:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80047c2:	4642      	mov	r2, r8
 80047c4:	464b      	mov	r3, r9
 80047c6:	1891      	adds	r1, r2, r2
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	415b      	adcs	r3, r3
 80047cc:	60fb      	str	r3, [r7, #12]
 80047ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047d2:	4641      	mov	r1, r8
 80047d4:	1851      	adds	r1, r2, r1
 80047d6:	6039      	str	r1, [r7, #0]
 80047d8:	4649      	mov	r1, r9
 80047da:	414b      	adcs	r3, r1
 80047dc:	607b      	str	r3, [r7, #4]
 80047de:	f04f 0200 	mov.w	r2, #0
 80047e2:	f04f 0300 	mov.w	r3, #0
 80047e6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80047ea:	4659      	mov	r1, fp
 80047ec:	00cb      	lsls	r3, r1, #3
 80047ee:	4651      	mov	r1, sl
 80047f0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047f4:	4651      	mov	r1, sl
 80047f6:	00ca      	lsls	r2, r1, #3
 80047f8:	4610      	mov	r0, r2
 80047fa:	4619      	mov	r1, r3
 80047fc:	4603      	mov	r3, r0
 80047fe:	4642      	mov	r2, r8
 8004800:	189b      	adds	r3, r3, r2
 8004802:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004806:	464b      	mov	r3, r9
 8004808:	460a      	mov	r2, r1
 800480a:	eb42 0303 	adc.w	r3, r2, r3
 800480e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004812:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800481e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004822:	f04f 0200 	mov.w	r2, #0
 8004826:	f04f 0300 	mov.w	r3, #0
 800482a:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 800482e:	4649      	mov	r1, r9
 8004830:	008b      	lsls	r3, r1, #2
 8004832:	4641      	mov	r1, r8
 8004834:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004838:	4641      	mov	r1, r8
 800483a:	008a      	lsls	r2, r1, #2
 800483c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004840:	f7fb fcc2 	bl	80001c8 <__aeabi_uldivmod>
 8004844:	4602      	mov	r2, r0
 8004846:	460b      	mov	r3, r1
 8004848:	4b0d      	ldr	r3, [pc, #52]	; (8004880 <UART_SetConfig+0x998>)
 800484a:	fba3 1302 	umull	r1, r3, r3, r2
 800484e:	095b      	lsrs	r3, r3, #5
 8004850:	2164      	movs	r1, #100	; 0x64
 8004852:	fb01 f303 	mul.w	r3, r1, r3
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	011b      	lsls	r3, r3, #4
 800485a:	3332      	adds	r3, #50	; 0x32
 800485c:	4a08      	ldr	r2, [pc, #32]	; (8004880 <UART_SetConfig+0x998>)
 800485e:	fba2 2303 	umull	r2, r3, r2, r3
 8004862:	095b      	lsrs	r3, r3, #5
 8004864:	f003 020f 	and.w	r2, r3, #15
 8004868:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4422      	add	r2, r4
 8004870:	609a      	str	r2, [r3, #8]
}
 8004872:	e7ff      	b.n	8004874 <UART_SetConfig+0x98c>
 8004874:	bf00      	nop
 8004876:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800487a:	46bd      	mov	sp, r7
 800487c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004880:	51eb851f 	.word	0x51eb851f

08004884 <atoi>:
 8004884:	220a      	movs	r2, #10
 8004886:	2100      	movs	r1, #0
 8004888:	f000 b8bc 	b.w	8004a04 <strtol>

0800488c <__errno>:
 800488c:	4b01      	ldr	r3, [pc, #4]	; (8004894 <__errno+0x8>)
 800488e:	6818      	ldr	r0, [r3, #0]
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	2000000c 	.word	0x2000000c

08004898 <__libc_init_array>:
 8004898:	b570      	push	{r4, r5, r6, lr}
 800489a:	4d0d      	ldr	r5, [pc, #52]	; (80048d0 <__libc_init_array+0x38>)
 800489c:	4c0d      	ldr	r4, [pc, #52]	; (80048d4 <__libc_init_array+0x3c>)
 800489e:	1b64      	subs	r4, r4, r5
 80048a0:	10a4      	asrs	r4, r4, #2
 80048a2:	2600      	movs	r6, #0
 80048a4:	42a6      	cmp	r6, r4
 80048a6:	d109      	bne.n	80048bc <__libc_init_array+0x24>
 80048a8:	4d0b      	ldr	r5, [pc, #44]	; (80048d8 <__libc_init_array+0x40>)
 80048aa:	4c0c      	ldr	r4, [pc, #48]	; (80048dc <__libc_init_array+0x44>)
 80048ac:	f000 f8b4 	bl	8004a18 <_init>
 80048b0:	1b64      	subs	r4, r4, r5
 80048b2:	10a4      	asrs	r4, r4, #2
 80048b4:	2600      	movs	r6, #0
 80048b6:	42a6      	cmp	r6, r4
 80048b8:	d105      	bne.n	80048c6 <__libc_init_array+0x2e>
 80048ba:	bd70      	pop	{r4, r5, r6, pc}
 80048bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80048c0:	4798      	blx	r3
 80048c2:	3601      	adds	r6, #1
 80048c4:	e7ee      	b.n	80048a4 <__libc_init_array+0xc>
 80048c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80048ca:	4798      	blx	r3
 80048cc:	3601      	adds	r6, #1
 80048ce:	e7f2      	b.n	80048b6 <__libc_init_array+0x1e>
 80048d0:	08004b5c 	.word	0x08004b5c
 80048d4:	08004b5c 	.word	0x08004b5c
 80048d8:	08004b5c 	.word	0x08004b5c
 80048dc:	08004b60 	.word	0x08004b60

080048e0 <memset>:
 80048e0:	4402      	add	r2, r0
 80048e2:	4603      	mov	r3, r0
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d100      	bne.n	80048ea <memset+0xa>
 80048e8:	4770      	bx	lr
 80048ea:	f803 1b01 	strb.w	r1, [r3], #1
 80048ee:	e7f9      	b.n	80048e4 <memset+0x4>

080048f0 <strcpy>:
 80048f0:	4603      	mov	r3, r0
 80048f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80048f6:	f803 2b01 	strb.w	r2, [r3], #1
 80048fa:	2a00      	cmp	r2, #0
 80048fc:	d1f9      	bne.n	80048f2 <strcpy+0x2>
 80048fe:	4770      	bx	lr

08004900 <_strtol_l.constprop.0>:
 8004900:	2b01      	cmp	r3, #1
 8004902:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004906:	d001      	beq.n	800490c <_strtol_l.constprop.0+0xc>
 8004908:	2b24      	cmp	r3, #36	; 0x24
 800490a:	d906      	bls.n	800491a <_strtol_l.constprop.0+0x1a>
 800490c:	f7ff ffbe 	bl	800488c <__errno>
 8004910:	2316      	movs	r3, #22
 8004912:	6003      	str	r3, [r0, #0]
 8004914:	2000      	movs	r0, #0
 8004916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800491a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004a00 <_strtol_l.constprop.0+0x100>
 800491e:	460d      	mov	r5, r1
 8004920:	462e      	mov	r6, r5
 8004922:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004926:	f814 700c 	ldrb.w	r7, [r4, ip]
 800492a:	f017 0708 	ands.w	r7, r7, #8
 800492e:	d1f7      	bne.n	8004920 <_strtol_l.constprop.0+0x20>
 8004930:	2c2d      	cmp	r4, #45	; 0x2d
 8004932:	d132      	bne.n	800499a <_strtol_l.constprop.0+0x9a>
 8004934:	782c      	ldrb	r4, [r5, #0]
 8004936:	2701      	movs	r7, #1
 8004938:	1cb5      	adds	r5, r6, #2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d05b      	beq.n	80049f6 <_strtol_l.constprop.0+0xf6>
 800493e:	2b10      	cmp	r3, #16
 8004940:	d109      	bne.n	8004956 <_strtol_l.constprop.0+0x56>
 8004942:	2c30      	cmp	r4, #48	; 0x30
 8004944:	d107      	bne.n	8004956 <_strtol_l.constprop.0+0x56>
 8004946:	782c      	ldrb	r4, [r5, #0]
 8004948:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800494c:	2c58      	cmp	r4, #88	; 0x58
 800494e:	d14d      	bne.n	80049ec <_strtol_l.constprop.0+0xec>
 8004950:	786c      	ldrb	r4, [r5, #1]
 8004952:	2310      	movs	r3, #16
 8004954:	3502      	adds	r5, #2
 8004956:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800495a:	f108 38ff 	add.w	r8, r8, #4294967295
 800495e:	f04f 0c00 	mov.w	ip, #0
 8004962:	fbb8 f9f3 	udiv	r9, r8, r3
 8004966:	4666      	mov	r6, ip
 8004968:	fb03 8a19 	mls	sl, r3, r9, r8
 800496c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8004970:	f1be 0f09 	cmp.w	lr, #9
 8004974:	d816      	bhi.n	80049a4 <_strtol_l.constprop.0+0xa4>
 8004976:	4674      	mov	r4, lr
 8004978:	42a3      	cmp	r3, r4
 800497a:	dd24      	ble.n	80049c6 <_strtol_l.constprop.0+0xc6>
 800497c:	f1bc 0f00 	cmp.w	ip, #0
 8004980:	db1e      	blt.n	80049c0 <_strtol_l.constprop.0+0xc0>
 8004982:	45b1      	cmp	r9, r6
 8004984:	d31c      	bcc.n	80049c0 <_strtol_l.constprop.0+0xc0>
 8004986:	d101      	bne.n	800498c <_strtol_l.constprop.0+0x8c>
 8004988:	45a2      	cmp	sl, r4
 800498a:	db19      	blt.n	80049c0 <_strtol_l.constprop.0+0xc0>
 800498c:	fb06 4603 	mla	r6, r6, r3, r4
 8004990:	f04f 0c01 	mov.w	ip, #1
 8004994:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004998:	e7e8      	b.n	800496c <_strtol_l.constprop.0+0x6c>
 800499a:	2c2b      	cmp	r4, #43	; 0x2b
 800499c:	bf04      	itt	eq
 800499e:	782c      	ldrbeq	r4, [r5, #0]
 80049a0:	1cb5      	addeq	r5, r6, #2
 80049a2:	e7ca      	b.n	800493a <_strtol_l.constprop.0+0x3a>
 80049a4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80049a8:	f1be 0f19 	cmp.w	lr, #25
 80049ac:	d801      	bhi.n	80049b2 <_strtol_l.constprop.0+0xb2>
 80049ae:	3c37      	subs	r4, #55	; 0x37
 80049b0:	e7e2      	b.n	8004978 <_strtol_l.constprop.0+0x78>
 80049b2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80049b6:	f1be 0f19 	cmp.w	lr, #25
 80049ba:	d804      	bhi.n	80049c6 <_strtol_l.constprop.0+0xc6>
 80049bc:	3c57      	subs	r4, #87	; 0x57
 80049be:	e7db      	b.n	8004978 <_strtol_l.constprop.0+0x78>
 80049c0:	f04f 3cff 	mov.w	ip, #4294967295
 80049c4:	e7e6      	b.n	8004994 <_strtol_l.constprop.0+0x94>
 80049c6:	f1bc 0f00 	cmp.w	ip, #0
 80049ca:	da05      	bge.n	80049d8 <_strtol_l.constprop.0+0xd8>
 80049cc:	2322      	movs	r3, #34	; 0x22
 80049ce:	6003      	str	r3, [r0, #0]
 80049d0:	4646      	mov	r6, r8
 80049d2:	b942      	cbnz	r2, 80049e6 <_strtol_l.constprop.0+0xe6>
 80049d4:	4630      	mov	r0, r6
 80049d6:	e79e      	b.n	8004916 <_strtol_l.constprop.0+0x16>
 80049d8:	b107      	cbz	r7, 80049dc <_strtol_l.constprop.0+0xdc>
 80049da:	4276      	negs	r6, r6
 80049dc:	2a00      	cmp	r2, #0
 80049de:	d0f9      	beq.n	80049d4 <_strtol_l.constprop.0+0xd4>
 80049e0:	f1bc 0f00 	cmp.w	ip, #0
 80049e4:	d000      	beq.n	80049e8 <_strtol_l.constprop.0+0xe8>
 80049e6:	1e69      	subs	r1, r5, #1
 80049e8:	6011      	str	r1, [r2, #0]
 80049ea:	e7f3      	b.n	80049d4 <_strtol_l.constprop.0+0xd4>
 80049ec:	2430      	movs	r4, #48	; 0x30
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1b1      	bne.n	8004956 <_strtol_l.constprop.0+0x56>
 80049f2:	2308      	movs	r3, #8
 80049f4:	e7af      	b.n	8004956 <_strtol_l.constprop.0+0x56>
 80049f6:	2c30      	cmp	r4, #48	; 0x30
 80049f8:	d0a5      	beq.n	8004946 <_strtol_l.constprop.0+0x46>
 80049fa:	230a      	movs	r3, #10
 80049fc:	e7ab      	b.n	8004956 <_strtol_l.constprop.0+0x56>
 80049fe:	bf00      	nop
 8004a00:	08004a51 	.word	0x08004a51

08004a04 <strtol>:
 8004a04:	4613      	mov	r3, r2
 8004a06:	460a      	mov	r2, r1
 8004a08:	4601      	mov	r1, r0
 8004a0a:	4802      	ldr	r0, [pc, #8]	; (8004a14 <strtol+0x10>)
 8004a0c:	6800      	ldr	r0, [r0, #0]
 8004a0e:	f7ff bf77 	b.w	8004900 <_strtol_l.constprop.0>
 8004a12:	bf00      	nop
 8004a14:	2000000c 	.word	0x2000000c

08004a18 <_init>:
 8004a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a1a:	bf00      	nop
 8004a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a1e:	bc08      	pop	{r3}
 8004a20:	469e      	mov	lr, r3
 8004a22:	4770      	bx	lr

08004a24 <_fini>:
 8004a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a26:	bf00      	nop
 8004a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a2a:	bc08      	pop	{r3}
 8004a2c:	469e      	mov	lr, r3
 8004a2e:	4770      	bx	lr
