
swont_ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f64  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005094  080080f4  080080f4  000180f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d188  0800d188  00020118  2**0
                  CONTENTS
  4 .ARM          00000008  0800d188  0800d188  0001d188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d190  0800d190  00020118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d190  0800d190  0001d190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d194  0800d194  0001d194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000118  20000000  0800d198  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013a28  20000118  0800d2b0  00020118  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20013b40  0800d2b0  00023b40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ecb8  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a9d  00000000  00000000  0002ee00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc8  00000000  00000000  000318a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c60  00000000  00000000  00032668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024042  00000000  00000000  000332c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001221c  00000000  00000000  0005730a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cba7d  00000000  00000000  00069526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00134fa3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fe0  00000000  00000000  00134ff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000118 	.word	0x20000118
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080080dc 	.word	0x080080dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000011c 	.word	0x2000011c
 80001cc:	080080dc 	.word	0x080080dc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <FL_Input>:
//--------------------------------------------------------------
// @brief Function load input into structs
// @details This function loads the different arguments into the assigned structs
//--------------------------------------------------------------
void FL_Input()
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	switch(input.line_rx_buffer[firstCharacter])
 8000598:	4bbe      	ldr	r3, [pc, #760]	; (8000894 <FL_Input+0x300>)
 800059a:	785b      	ldrb	r3, [r3, #1]
 800059c:	3b62      	subs	r3, #98	; 0x62
 800059e:	2b12      	cmp	r3, #18
 80005a0:	f200 8174 	bhi.w	800088c <FL_Input+0x2f8>
 80005a4:	a201      	add	r2, pc, #4	; (adr r2, 80005ac <FL_Input+0x18>)
 80005a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005aa:	bf00      	nop
 80005ac:	0800080b 	.word	0x0800080b
 80005b0:	08000867 	.word	0x08000867
 80005b4:	0800088d 	.word	0x0800088d
 80005b8:	0800088d 	.word	0x0800088d
 80005bc:	0800088d 	.word	0x0800088d
 80005c0:	0800088d 	.word	0x0800088d
 80005c4:	0800088d 	.word	0x0800088d
 80005c8:	0800088d 	.word	0x0800088d
 80005cc:	0800088d 	.word	0x0800088d
 80005d0:	0800088d 	.word	0x0800088d
 80005d4:	080005f9 	.word	0x080005f9
 80005d8:	0800088d 	.word	0x0800088d
 80005dc:	0800088d 	.word	0x0800088d
 80005e0:	0800088d 	.word	0x0800088d
 80005e4:	0800088d 	.word	0x0800088d
 80005e8:	0800088d 	.word	0x0800088d
 80005ec:	08000741 	.word	0x08000741
 80005f0:	0800088d 	.word	0x0800088d
 80005f4:	08000699 	.word	0x08000699
	{
		case line:	//if the function line is called
			if(checkFunctionLen(lineLen) == false)
 80005f8:	2006      	movs	r0, #6
 80005fa:	f000 f9f5 	bl	80009e8 <checkFunctionLen>
 80005fe:	4603      	mov	r3, r0
 8000600:	f083 0301 	eor.w	r3, r3, #1
 8000604:	b2db      	uxtb	r3, r3
 8000606:	2b00      	cmp	r3, #0
 8000608:	f000 8162 	beq.w	80008d0 <FL_Input+0x33c>
			{
				arg(argumentONE, string_container, NOTEXT);	//collects the information from argument 1
 800060c:	2200      	movs	r2, #0
 800060e:	49a2      	ldr	r1, [pc, #648]	; (8000898 <FL_Input+0x304>)
 8000610:	2001      	movs	r0, #1
 8000612:	f000 f969 	bl	80008e8 <arg>
				line_s.x1 = atoi(string_container);	//stores the information from argument 1 into line struct
 8000616:	48a0      	ldr	r0, [pc, #640]	; (8000898 <FL_Input+0x304>)
 8000618:	f006 fd08 	bl	800702c <atoi>
 800061c:	4603      	mov	r3, r0
 800061e:	b29a      	uxth	r2, r3
 8000620:	4b9e      	ldr	r3, [pc, #632]	; (800089c <FL_Input+0x308>)
 8000622:	801a      	strh	r2, [r3, #0]
				arg(argumentTWO, string_container, NOTEXT);	//etc
 8000624:	2200      	movs	r2, #0
 8000626:	499c      	ldr	r1, [pc, #624]	; (8000898 <FL_Input+0x304>)
 8000628:	2002      	movs	r0, #2
 800062a:	f000 f95d 	bl	80008e8 <arg>
				line_s.y1 = atoi(string_container);
 800062e:	489a      	ldr	r0, [pc, #616]	; (8000898 <FL_Input+0x304>)
 8000630:	f006 fcfc 	bl	800702c <atoi>
 8000634:	4603      	mov	r3, r0
 8000636:	b29a      	uxth	r2, r3
 8000638:	4b98      	ldr	r3, [pc, #608]	; (800089c <FL_Input+0x308>)
 800063a:	805a      	strh	r2, [r3, #2]
				arg(argumentTHREE, string_container, NOTEXT);
 800063c:	2200      	movs	r2, #0
 800063e:	4996      	ldr	r1, [pc, #600]	; (8000898 <FL_Input+0x304>)
 8000640:	2003      	movs	r0, #3
 8000642:	f000 f951 	bl	80008e8 <arg>
				line_s.x2 = atoi(string_container);
 8000646:	4894      	ldr	r0, [pc, #592]	; (8000898 <FL_Input+0x304>)
 8000648:	f006 fcf0 	bl	800702c <atoi>
 800064c:	4603      	mov	r3, r0
 800064e:	b29a      	uxth	r2, r3
 8000650:	4b92      	ldr	r3, [pc, #584]	; (800089c <FL_Input+0x308>)
 8000652:	809a      	strh	r2, [r3, #4]
				arg(argumentFOUR, string_container, NOTEXT);
 8000654:	2200      	movs	r2, #0
 8000656:	4990      	ldr	r1, [pc, #576]	; (8000898 <FL_Input+0x304>)
 8000658:	2004      	movs	r0, #4
 800065a:	f000 f945 	bl	80008e8 <arg>
				line_s.y2 = atoi(string_container);
 800065e:	488e      	ldr	r0, [pc, #568]	; (8000898 <FL_Input+0x304>)
 8000660:	f006 fce4 	bl	800702c <atoi>
 8000664:	4603      	mov	r3, r0
 8000666:	b29a      	uxth	r2, r3
 8000668:	4b8c      	ldr	r3, [pc, #560]	; (800089c <FL_Input+0x308>)
 800066a:	80da      	strh	r2, [r3, #6]
				arg(argumentFIVE, string_container, NOTEXT);
 800066c:	2200      	movs	r2, #0
 800066e:	498a      	ldr	r1, [pc, #552]	; (8000898 <FL_Input+0x304>)
 8000670:	2005      	movs	r0, #5
 8000672:	f000 f939 	bl	80008e8 <arg>
				strcpy(line_s.color, string_container);
 8000676:	4988      	ldr	r1, [pc, #544]	; (8000898 <FL_Input+0x304>)
 8000678:	4889      	ldr	r0, [pc, #548]	; (80008a0 <FL_Input+0x30c>)
 800067a:	f006 fd25 	bl	80070c8 <strcpy>
				arg(argumentSIX, string_container, NOTEXT);
 800067e:	2200      	movs	r2, #0
 8000680:	4985      	ldr	r1, [pc, #532]	; (8000898 <FL_Input+0x304>)
 8000682:	2006      	movs	r0, #6
 8000684:	f000 f930 	bl	80008e8 <arg>
				line_s.weight = atoi(string_container);
 8000688:	4883      	ldr	r0, [pc, #524]	; (8000898 <FL_Input+0x304>)
 800068a:	f006 fccf 	bl	800702c <atoi>
 800068e:	4603      	mov	r3, r0
 8000690:	b2da      	uxtb	r2, r3
 8000692:	4b82      	ldr	r3, [pc, #520]	; (800089c <FL_Input+0x308>)
 8000694:	751a      	strb	r2, [r3, #20]
				break;
 8000696:	e124      	b.n	80008e2 <FL_Input+0x34e>
			}
			else break;
		case text:	//if the function text is called
			if(checkFunctionLen(textLen) == false)
 8000698:	2007      	movs	r0, #7
 800069a:	f000 f9a5 	bl	80009e8 <checkFunctionLen>
 800069e:	4603      	mov	r3, r0
 80006a0:	f083 0301 	eor.w	r3, r3, #1
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	f000 8114 	beq.w	80008d4 <FL_Input+0x340>
			{
				arg(argumentONE, string_container, NOTEXT);	//collects the information from argument 1
 80006ac:	2200      	movs	r2, #0
 80006ae:	497a      	ldr	r1, [pc, #488]	; (8000898 <FL_Input+0x304>)
 80006b0:	2001      	movs	r0, #1
 80006b2:	f000 f919 	bl	80008e8 <arg>
				text_s.xlup = atoi(string_container);	//stores the information from argument 1 into text struct
 80006b6:	4878      	ldr	r0, [pc, #480]	; (8000898 <FL_Input+0x304>)
 80006b8:	f006 fcb8 	bl	800702c <atoi>
 80006bc:	4603      	mov	r3, r0
 80006be:	b29a      	uxth	r2, r3
 80006c0:	4b78      	ldr	r3, [pc, #480]	; (80008a4 <FL_Input+0x310>)
 80006c2:	801a      	strh	r2, [r3, #0]
				arg(argumentTWO, string_container, NOTEXT);	//etc
 80006c4:	2200      	movs	r2, #0
 80006c6:	4974      	ldr	r1, [pc, #464]	; (8000898 <FL_Input+0x304>)
 80006c8:	2002      	movs	r0, #2
 80006ca:	f000 f90d 	bl	80008e8 <arg>
				text_s.ylup = atoi(string_container);
 80006ce:	4872      	ldr	r0, [pc, #456]	; (8000898 <FL_Input+0x304>)
 80006d0:	f006 fcac 	bl	800702c <atoi>
 80006d4:	4603      	mov	r3, r0
 80006d6:	b29a      	uxth	r2, r3
 80006d8:	4b72      	ldr	r3, [pc, #456]	; (80008a4 <FL_Input+0x310>)
 80006da:	805a      	strh	r2, [r3, #2]
				arg(argumentTHREE, string_container, NOTEXT);
 80006dc:	2200      	movs	r2, #0
 80006de:	496e      	ldr	r1, [pc, #440]	; (8000898 <FL_Input+0x304>)
 80006e0:	2003      	movs	r0, #3
 80006e2:	f000 f901 	bl	80008e8 <arg>
				strcpy(text_s.color, string_container);
 80006e6:	496c      	ldr	r1, [pc, #432]	; (8000898 <FL_Input+0x304>)
 80006e8:	486f      	ldr	r0, [pc, #444]	; (80008a8 <FL_Input+0x314>)
 80006ea:	f006 fced 	bl	80070c8 <strcpy>
				arg(argumentFOUR, string_container, YESTEXT);
 80006ee:	2201      	movs	r2, #1
 80006f0:	4969      	ldr	r1, [pc, #420]	; (8000898 <FL_Input+0x304>)
 80006f2:	2004      	movs	r0, #4
 80006f4:	f000 f8f8 	bl	80008e8 <arg>
				strcpy(text_s.textin, string_container);
 80006f8:	4967      	ldr	r1, [pc, #412]	; (8000898 <FL_Input+0x304>)
 80006fa:	486c      	ldr	r0, [pc, #432]	; (80008ac <FL_Input+0x318>)
 80006fc:	f006 fce4 	bl	80070c8 <strcpy>
				arg(argumentFIVE, string_container, YESTEXT);
 8000700:	2201      	movs	r2, #1
 8000702:	4965      	ldr	r1, [pc, #404]	; (8000898 <FL_Input+0x304>)
 8000704:	2005      	movs	r0, #5
 8000706:	f000 f8ef 	bl	80008e8 <arg>
				strcpy(text_s.fontname, string_container);
 800070a:	4963      	ldr	r1, [pc, #396]	; (8000898 <FL_Input+0x304>)
 800070c:	4868      	ldr	r0, [pc, #416]	; (80008b0 <FL_Input+0x31c>)
 800070e:	f006 fcdb 	bl	80070c8 <strcpy>
				arg(argumentSIX, string_container, NOTEXT);
 8000712:	2200      	movs	r2, #0
 8000714:	4960      	ldr	r1, [pc, #384]	; (8000898 <FL_Input+0x304>)
 8000716:	2006      	movs	r0, #6
 8000718:	f000 f8e6 	bl	80008e8 <arg>
				text_s.fontsize = atoi(string_container);
 800071c:	485e      	ldr	r0, [pc, #376]	; (8000898 <FL_Input+0x304>)
 800071e:	f006 fc85 	bl	800702c <atoi>
 8000722:	4603      	mov	r3, r0
 8000724:	b2da      	uxtb	r2, r3
 8000726:	4b5f      	ldr	r3, [pc, #380]	; (80008a4 <FL_Input+0x310>)
 8000728:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
				arg(argumentSEVEN, string_container, NOTEXT);
 800072c:	2200      	movs	r2, #0
 800072e:	495a      	ldr	r1, [pc, #360]	; (8000898 <FL_Input+0x304>)
 8000730:	2007      	movs	r0, #7
 8000732:	f000 f8d9 	bl	80008e8 <arg>
				strcpy(text_s.fontstyle, string_container);
 8000736:	4958      	ldr	r1, [pc, #352]	; (8000898 <FL_Input+0x304>)
 8000738:	485e      	ldr	r0, [pc, #376]	; (80008b4 <FL_Input+0x320>)
 800073a:	f006 fcc5 	bl	80070c8 <strcpy>
				break;
 800073e:	e0d0      	b.n	80008e2 <FL_Input+0x34e>
			}
			else break;
		case rectangle:	//if the function rectangle is called
			if(checkFunctionLen(rectangleLen) == false)
 8000740:	2008      	movs	r0, #8
 8000742:	f000 f951 	bl	80009e8 <checkFunctionLen>
 8000746:	4603      	mov	r3, r0
 8000748:	f083 0301 	eor.w	r3, r3, #1
 800074c:	b2db      	uxtb	r3, r3
 800074e:	2b00      	cmp	r3, #0
 8000750:	f000 80c2 	beq.w	80008d8 <FL_Input+0x344>
			{
				arg(argumentONE, string_container, NOTEXT);	//collects the information from argument 1
 8000754:	2200      	movs	r2, #0
 8000756:	4950      	ldr	r1, [pc, #320]	; (8000898 <FL_Input+0x304>)
 8000758:	2001      	movs	r0, #1
 800075a:	f000 f8c5 	bl	80008e8 <arg>
				rectangle_s.xlup = atoi(string_container);	//stores the information from argument 1 into rectangle struct
 800075e:	484e      	ldr	r0, [pc, #312]	; (8000898 <FL_Input+0x304>)
 8000760:	f006 fc64 	bl	800702c <atoi>
 8000764:	4603      	mov	r3, r0
 8000766:	b29a      	uxth	r2, r3
 8000768:	4b53      	ldr	r3, [pc, #332]	; (80008b8 <FL_Input+0x324>)
 800076a:	801a      	strh	r2, [r3, #0]
				arg(argumentTWO, string_container, NOTEXT);
 800076c:	2200      	movs	r2, #0
 800076e:	494a      	ldr	r1, [pc, #296]	; (8000898 <FL_Input+0x304>)
 8000770:	2002      	movs	r0, #2
 8000772:	f000 f8b9 	bl	80008e8 <arg>
				rectangle_s.ylup = atoi(string_container);
 8000776:	4848      	ldr	r0, [pc, #288]	; (8000898 <FL_Input+0x304>)
 8000778:	f006 fc58 	bl	800702c <atoi>
 800077c:	4603      	mov	r3, r0
 800077e:	b29a      	uxth	r2, r3
 8000780:	4b4d      	ldr	r3, [pc, #308]	; (80008b8 <FL_Input+0x324>)
 8000782:	805a      	strh	r2, [r3, #2]
				arg(argumentTHREE, string_container, NOTEXT);
 8000784:	2200      	movs	r2, #0
 8000786:	4944      	ldr	r1, [pc, #272]	; (8000898 <FL_Input+0x304>)
 8000788:	2003      	movs	r0, #3
 800078a:	f000 f8ad 	bl	80008e8 <arg>
				rectangle_s.width = atoi(string_container);
 800078e:	4842      	ldr	r0, [pc, #264]	; (8000898 <FL_Input+0x304>)
 8000790:	f006 fc4c 	bl	800702c <atoi>
 8000794:	4603      	mov	r3, r0
 8000796:	b2da      	uxtb	r2, r3
 8000798:	4b47      	ldr	r3, [pc, #284]	; (80008b8 <FL_Input+0x324>)
 800079a:	711a      	strb	r2, [r3, #4]
				arg(argumentFOUR, string_container, NOTEXT);
 800079c:	2200      	movs	r2, #0
 800079e:	493e      	ldr	r1, [pc, #248]	; (8000898 <FL_Input+0x304>)
 80007a0:	2004      	movs	r0, #4
 80007a2:	f000 f8a1 	bl	80008e8 <arg>
				rectangle_s.height = atoi(string_container);
 80007a6:	483c      	ldr	r0, [pc, #240]	; (8000898 <FL_Input+0x304>)
 80007a8:	f006 fc40 	bl	800702c <atoi>
 80007ac:	4603      	mov	r3, r0
 80007ae:	b2da      	uxtb	r2, r3
 80007b0:	4b41      	ldr	r3, [pc, #260]	; (80008b8 <FL_Input+0x324>)
 80007b2:	715a      	strb	r2, [r3, #5]
				arg(argumentFIVE, string_container, NOTEXT);
 80007b4:	2200      	movs	r2, #0
 80007b6:	4938      	ldr	r1, [pc, #224]	; (8000898 <FL_Input+0x304>)
 80007b8:	2005      	movs	r0, #5
 80007ba:	f000 f895 	bl	80008e8 <arg>
				strcpy(rectangle_s.color, string_container);
 80007be:	4936      	ldr	r1, [pc, #216]	; (8000898 <FL_Input+0x304>)
 80007c0:	483e      	ldr	r0, [pc, #248]	; (80008bc <FL_Input+0x328>)
 80007c2:	f006 fc81 	bl	80070c8 <strcpy>
				arg(argumentSIX, string_container, NOTEXT);
 80007c6:	2200      	movs	r2, #0
 80007c8:	4933      	ldr	r1, [pc, #204]	; (8000898 <FL_Input+0x304>)
 80007ca:	2006      	movs	r0, #6
 80007cc:	f000 f88c 	bl	80008e8 <arg>
				rectangle_s.filled = atoi(string_container);
 80007d0:	4831      	ldr	r0, [pc, #196]	; (8000898 <FL_Input+0x304>)
 80007d2:	f006 fc2b 	bl	800702c <atoi>
 80007d6:	4603      	mov	r3, r0
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	4b37      	ldr	r3, [pc, #220]	; (80008b8 <FL_Input+0x324>)
 80007dc:	749a      	strb	r2, [r3, #18]
				arg(argumentSEVEN, string_container, NOTEXT);
 80007de:	2200      	movs	r2, #0
 80007e0:	492d      	ldr	r1, [pc, #180]	; (8000898 <FL_Input+0x304>)
 80007e2:	2007      	movs	r0, #7
 80007e4:	f000 f880 	bl	80008e8 <arg>
				strcpy(rectangle_s.bordercolor, string_container);
 80007e8:	492b      	ldr	r1, [pc, #172]	; (8000898 <FL_Input+0x304>)
 80007ea:	4835      	ldr	r0, [pc, #212]	; (80008c0 <FL_Input+0x32c>)
 80007ec:	f006 fc6c 	bl	80070c8 <strcpy>
				arg(argumentEIGHT, string_container, NOTEXT);
 80007f0:	2200      	movs	r2, #0
 80007f2:	4929      	ldr	r1, [pc, #164]	; (8000898 <FL_Input+0x304>)
 80007f4:	2008      	movs	r0, #8
 80007f6:	f000 f877 	bl	80008e8 <arg>
				rectangle_s.linewidth = atoi(string_container);
 80007fa:	4827      	ldr	r0, [pc, #156]	; (8000898 <FL_Input+0x304>)
 80007fc:	f006 fc16 	bl	800702c <atoi>
 8000800:	4603      	mov	r3, r0
 8000802:	b2da      	uxtb	r2, r3
 8000804:	4b2c      	ldr	r3, [pc, #176]	; (80008b8 <FL_Input+0x324>)
 8000806:	77da      	strb	r2, [r3, #31]
				break;
 8000808:	e06b      	b.n	80008e2 <FL_Input+0x34e>
			}
			else break;
		case bitmap:	//if the function bitmap is called
			if(checkFunctionLen(bitmapLen) == false)
 800080a:	2003      	movs	r0, #3
 800080c:	f000 f8ec 	bl	80009e8 <checkFunctionLen>
 8000810:	4603      	mov	r3, r0
 8000812:	f083 0301 	eor.w	r3, r3, #1
 8000816:	b2db      	uxtb	r3, r3
 8000818:	2b00      	cmp	r3, #0
 800081a:	d05f      	beq.n	80008dc <FL_Input+0x348>
			{
				arg(argumentONE, string_container, NOTEXT);	//collects the information from argument 1
 800081c:	2200      	movs	r2, #0
 800081e:	491e      	ldr	r1, [pc, #120]	; (8000898 <FL_Input+0x304>)
 8000820:	2001      	movs	r0, #1
 8000822:	f000 f861 	bl	80008e8 <arg>
				bitmap_s.nr = atoi(string_container);	//stores the information from argument 1 into bitmap struct
 8000826:	481c      	ldr	r0, [pc, #112]	; (8000898 <FL_Input+0x304>)
 8000828:	f006 fc00 	bl	800702c <atoi>
 800082c:	4603      	mov	r3, r0
 800082e:	b2da      	uxtb	r2, r3
 8000830:	4b24      	ldr	r3, [pc, #144]	; (80008c4 <FL_Input+0x330>)
 8000832:	701a      	strb	r2, [r3, #0]
				arg(argumentTWO, string_container, NOTEXT);
 8000834:	2200      	movs	r2, #0
 8000836:	4918      	ldr	r1, [pc, #96]	; (8000898 <FL_Input+0x304>)
 8000838:	2002      	movs	r0, #2
 800083a:	f000 f855 	bl	80008e8 <arg>
				bitmap_s.xlup = atoi(string_container);
 800083e:	4816      	ldr	r0, [pc, #88]	; (8000898 <FL_Input+0x304>)
 8000840:	f006 fbf4 	bl	800702c <atoi>
 8000844:	4603      	mov	r3, r0
 8000846:	b29a      	uxth	r2, r3
 8000848:	4b1e      	ldr	r3, [pc, #120]	; (80008c4 <FL_Input+0x330>)
 800084a:	805a      	strh	r2, [r3, #2]
				arg(argumentTHREE, string_container, NOTEXT);
 800084c:	2200      	movs	r2, #0
 800084e:	4912      	ldr	r1, [pc, #72]	; (8000898 <FL_Input+0x304>)
 8000850:	2003      	movs	r0, #3
 8000852:	f000 f849 	bl	80008e8 <arg>
				bitmap_s.ylup = atoi(string_container);
 8000856:	4810      	ldr	r0, [pc, #64]	; (8000898 <FL_Input+0x304>)
 8000858:	f006 fbe8 	bl	800702c <atoi>
 800085c:	4603      	mov	r3, r0
 800085e:	b29a      	uxth	r2, r3
 8000860:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <FL_Input+0x330>)
 8000862:	809a      	strh	r2, [r3, #4]
				break;
 8000864:	e03d      	b.n	80008e2 <FL_Input+0x34e>
			}
			else break;
		case clearscreen:	//if the function clearscreen is called
			if(checkFunctionLen(clearscreenLen) == false)
 8000866:	2001      	movs	r0, #1
 8000868:	f000 f8be 	bl	80009e8 <checkFunctionLen>
 800086c:	4603      	mov	r3, r0
 800086e:	f083 0301 	eor.w	r3, r3, #1
 8000872:	b2db      	uxtb	r3, r3
 8000874:	2b00      	cmp	r3, #0
 8000876:	d033      	beq.n	80008e0 <FL_Input+0x34c>
			{
				arg(argumentONE, string_container, NOTEXT);	//collects the information from argument 1
 8000878:	2200      	movs	r2, #0
 800087a:	4907      	ldr	r1, [pc, #28]	; (8000898 <FL_Input+0x304>)
 800087c:	2001      	movs	r0, #1
 800087e:	f000 f833 	bl	80008e8 <arg>
				strcpy(clearscreen_s.color, string_container);	//stores the information from argument 1 into line struct
 8000882:	4905      	ldr	r1, [pc, #20]	; (8000898 <FL_Input+0x304>)
 8000884:	4810      	ldr	r0, [pc, #64]	; (80008c8 <FL_Input+0x334>)
 8000886:	f006 fc1f 	bl	80070c8 <strcpy>
				break;
 800088a:	e02a      	b.n	80008e2 <FL_Input+0x34e>
			}
			else break;
		default:
			printf("The function name is not correct");
 800088c:	480f      	ldr	r0, [pc, #60]	; (80008cc <FL_Input+0x338>)
 800088e:	f006 fc03 	bl	8007098 <iprintf>
			break;
 8000892:	e026      	b.n	80008e2 <FL_Input+0x34e>
 8000894:	200008fc 	.word	0x200008fc
 8000898:	20000134 	.word	0x20000134
 800089c:	200001b4 	.word	0x200001b4
 80008a0:	200001bc 	.word	0x200001bc
 80008a4:	20000200 	.word	0x20000200
 80008a8:	20000204 	.word	0x20000204
 80008ac:	20000210 	.word	0x20000210
 80008b0:	20000290 	.word	0x20000290
 80008b4:	200002af 	.word	0x200002af
 80008b8:	200001e0 	.word	0x200001e0
 80008bc:	200001e6 	.word	0x200001e6
 80008c0:	200001f3 	.word	0x200001f3
 80008c4:	200001cc 	.word	0x200001cc
 80008c8:	200001d4 	.word	0x200001d4
 80008cc:	080080f4 	.word	0x080080f4
			else break;
 80008d0:	bf00      	nop
 80008d2:	e006      	b.n	80008e2 <FL_Input+0x34e>
			else break;
 80008d4:	bf00      	nop
 80008d6:	e004      	b.n	80008e2 <FL_Input+0x34e>
			else break;
 80008d8:	bf00      	nop
 80008da:	e002      	b.n	80008e2 <FL_Input+0x34e>
			else break;
 80008dc:	bf00      	nop
 80008de:	e000      	b.n	80008e2 <FL_Input+0x34e>
			else break;
 80008e0:	bf00      	nop
	}

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop

080008e8 <arg>:
// @param[in] a: The variable that determines which argument has to be read
// @param[in] *string_container: A pointer where the string will be put into
// @param[in] text_trigger: A boolean that determines if the argument is a text or not
//--------------------------------------------------------------
void arg(uint8_t a,char *string_container ,bool text_trigger)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	6039      	str	r1, [r7, #0]
 80008f2:	71fb      	strb	r3, [r7, #7]
 80008f4:	4613      	mov	r3, r2
 80008f6:	71bb      	strb	r3, [r7, #6]
	uint8_t i = 0;	//counter
 80008f8:	2300      	movs	r3, #0
 80008fa:	73fb      	strb	r3, [r7, #15]
	uint8_t j = 0;	//counter
 80008fc:	2300      	movs	r3, #0
 80008fe:	73bb      	strb	r3, [r7, #14]
	uint8_t arg_counter = 0;	//is needed to check what argument is currently beeing read
 8000900:	2300      	movs	r3, #0
 8000902:	737b      	strb	r3, [r7, #13]
	uint8_t arg_character_counter = 0;	//checks what the current character from the argument is
 8000904:	2300      	movs	r3, #0
 8000906:	733b      	strb	r3, [r7, #12]
	for (j=0; j<input.msglen; j++)	//cleans string container
 8000908:	2300      	movs	r3, #0
 800090a:	73bb      	strb	r3, [r7, #14]
 800090c:	e007      	b.n	800091e <arg+0x36>
	string_container[j] = 0;
 800090e:	7bbb      	ldrb	r3, [r7, #14]
 8000910:	683a      	ldr	r2, [r7, #0]
 8000912:	4413      	add	r3, r2
 8000914:	2200      	movs	r2, #0
 8000916:	701a      	strb	r2, [r3, #0]
	for (j=0; j<input.msglen; j++)	//cleans string container
 8000918:	7bbb      	ldrb	r3, [r7, #14]
 800091a:	3301      	adds	r3, #1
 800091c:	73bb      	strb	r3, [r7, #14]
 800091e:	7bba      	ldrb	r2, [r7, #14]
 8000920:	4b30      	ldr	r3, [pc, #192]	; (80009e4 <arg+0xfc>)
 8000922:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8000926:	429a      	cmp	r2, r3
 8000928:	dbf1      	blt.n	800090e <arg+0x26>
	while(i <= input.msglen)
 800092a:	e04e      	b.n	80009ca <arg+0xe2>
			{
				if(input.line_rx_buffer[i] == ',')	//if current character is a ',' the argument counter goes up
 800092c:	7bfb      	ldrb	r3, [r7, #15]
 800092e:	4a2d      	ldr	r2, [pc, #180]	; (80009e4 <arg+0xfc>)
 8000930:	4413      	add	r3, r2
 8000932:	785b      	ldrb	r3, [r3, #1]
 8000934:	2b2c      	cmp	r3, #44	; 0x2c
 8000936:	d106      	bne.n	8000946 <arg+0x5e>
				{
					arg_counter++;
 8000938:	7b7b      	ldrb	r3, [r7, #13]
 800093a:	3301      	adds	r3, #1
 800093c:	737b      	strb	r3, [r7, #13]
					i++;
 800093e:	7bfb      	ldrb	r3, [r7, #15]
 8000940:	3301      	adds	r3, #1
 8000942:	73fb      	strb	r3, [r7, #15]
 8000944:	e041      	b.n	80009ca <arg+0xe2>
				}
				else if(input.line_rx_buffer[i] == ' ' && text_trigger == false)	//if its a space it doesnt get read
 8000946:	7bfb      	ldrb	r3, [r7, #15]
 8000948:	4a26      	ldr	r2, [pc, #152]	; (80009e4 <arg+0xfc>)
 800094a:	4413      	add	r3, r2
 800094c:	785b      	ldrb	r3, [r3, #1]
 800094e:	2b20      	cmp	r3, #32
 8000950:	d109      	bne.n	8000966 <arg+0x7e>
 8000952:	79bb      	ldrb	r3, [r7, #6]
 8000954:	f083 0301 	eor.w	r3, r3, #1
 8000958:	b2db      	uxtb	r3, r3
 800095a:	2b00      	cmp	r3, #0
 800095c:	d003      	beq.n	8000966 <arg+0x7e>
				i++;
 800095e:	7bfb      	ldrb	r3, [r7, #15]
 8000960:	3301      	adds	r3, #1
 8000962:	73fb      	strb	r3, [r7, #15]
 8000964:	e031      	b.n	80009ca <arg+0xe2>
				else if(input.line_rx_buffer[i] == ' ' && text_trigger == true && arg_counter == a)	//if its a space but its in a text argument, it gets read
 8000966:	7bfb      	ldrb	r3, [r7, #15]
 8000968:	4a1e      	ldr	r2, [pc, #120]	; (80009e4 <arg+0xfc>)
 800096a:	4413      	add	r3, r2
 800096c:	785b      	ldrb	r3, [r3, #1]
 800096e:	2b20      	cmp	r3, #32
 8000970:	d115      	bne.n	800099e <arg+0xb6>
 8000972:	79bb      	ldrb	r3, [r7, #6]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d012      	beq.n	800099e <arg+0xb6>
 8000978:	7b7a      	ldrb	r2, [r7, #13]
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	429a      	cmp	r2, r3
 800097e:	d10e      	bne.n	800099e <arg+0xb6>
				{
					string_container[arg_character_counter++] = input.line_rx_buffer[i++];
 8000980:	7bfb      	ldrb	r3, [r7, #15]
 8000982:	1c5a      	adds	r2, r3, #1
 8000984:	73fa      	strb	r2, [r7, #15]
 8000986:	4619      	mov	r1, r3
 8000988:	7b3b      	ldrb	r3, [r7, #12]
 800098a:	1c5a      	adds	r2, r3, #1
 800098c:	733a      	strb	r2, [r7, #12]
 800098e:	461a      	mov	r2, r3
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	4413      	add	r3, r2
 8000994:	4a13      	ldr	r2, [pc, #76]	; (80009e4 <arg+0xfc>)
 8000996:	440a      	add	r2, r1
 8000998:	7852      	ldrb	r2, [r2, #1]
 800099a:	701a      	strb	r2, [r3, #0]
 800099c:	e015      	b.n	80009ca <arg+0xe2>
				}
				else if(arg_counter == a)	//if its a character in the correct argument it gets read
 800099e:	7b7a      	ldrb	r2, [r7, #13]
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	429a      	cmp	r2, r3
 80009a4:	d10e      	bne.n	80009c4 <arg+0xdc>
				string_container[arg_character_counter++] = input.line_rx_buffer[i++];
 80009a6:	7bfb      	ldrb	r3, [r7, #15]
 80009a8:	1c5a      	adds	r2, r3, #1
 80009aa:	73fa      	strb	r2, [r7, #15]
 80009ac:	4619      	mov	r1, r3
 80009ae:	7b3b      	ldrb	r3, [r7, #12]
 80009b0:	1c5a      	adds	r2, r3, #1
 80009b2:	733a      	strb	r2, [r7, #12]
 80009b4:	461a      	mov	r2, r3
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	4413      	add	r3, r2
 80009ba:	4a0a      	ldr	r2, [pc, #40]	; (80009e4 <arg+0xfc>)
 80009bc:	440a      	add	r2, r1
 80009be:	7852      	ldrb	r2, [r2, #1]
 80009c0:	701a      	strb	r2, [r3, #0]
 80009c2:	e002      	b.n	80009ca <arg+0xe2>
				else i++;	//else skips
 80009c4:	7bfb      	ldrb	r3, [r7, #15]
 80009c6:	3301      	adds	r3, #1
 80009c8:	73fb      	strb	r3, [r7, #15]
	while(i <= input.msglen)
 80009ca:	7bfa      	ldrb	r2, [r7, #15]
 80009cc:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <arg+0xfc>)
 80009ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80009d2:	429a      	cmp	r2, r3
 80009d4:	ddaa      	ble.n	800092c <arg+0x44>
			}
}
 80009d6:	bf00      	nop
 80009d8:	bf00      	nop
 80009da:	3714      	adds	r7, #20
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	200008fc 	.word	0x200008fc

080009e8 <checkFunctionLen>:

bool checkFunctionLen(uint8_t functionLen)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	73fb      	strb	r3, [r7, #15]
	uint8_t arg_counter = 0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	73bb      	strb	r3, [r7, #14]
	bool error = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	737b      	strb	r3, [r7, #13]
	while(i <= input.msglen)
 80009fe:	e00f      	b.n	8000a20 <checkFunctionLen+0x38>
	{
		if(input.line_rx_buffer[i] == ',')	//if current character is a ',' the argument counter goes up
 8000a00:	7bfb      	ldrb	r3, [r7, #15]
 8000a02:	4a19      	ldr	r2, [pc, #100]	; (8000a68 <checkFunctionLen+0x80>)
 8000a04:	4413      	add	r3, r2
 8000a06:	785b      	ldrb	r3, [r3, #1]
 8000a08:	2b2c      	cmp	r3, #44	; 0x2c
 8000a0a:	d106      	bne.n	8000a1a <checkFunctionLen+0x32>
			{
				arg_counter++;
 8000a0c:	7bbb      	ldrb	r3, [r7, #14]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	73bb      	strb	r3, [r7, #14]
				i++;
 8000a12:	7bfb      	ldrb	r3, [r7, #15]
 8000a14:	3301      	adds	r3, #1
 8000a16:	73fb      	strb	r3, [r7, #15]
 8000a18:	e002      	b.n	8000a20 <checkFunctionLen+0x38>
			}
		else i++;
 8000a1a:	7bfb      	ldrb	r3, [r7, #15]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	73fb      	strb	r3, [r7, #15]
	while(i <= input.msglen)
 8000a20:	7bfa      	ldrb	r2, [r7, #15]
 8000a22:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <checkFunctionLen+0x80>)
 8000a24:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	dde9      	ble.n	8000a00 <checkFunctionLen+0x18>
	}
	if(arg_counter > functionLen)
 8000a2c:	7bba      	ldrb	r2, [r7, #14]
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	d908      	bls.n	8000a46 <checkFunctionLen+0x5e>
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)"Warning: the input exceeds the maximum length of this function\n\r", sizeof("Warning: the input exceeds the maximum length of this function"),100);
 8000a34:	2364      	movs	r3, #100	; 0x64
 8000a36:	223f      	movs	r2, #63	; 0x3f
 8000a38:	490c      	ldr	r1, [pc, #48]	; (8000a6c <checkFunctionLen+0x84>)
 8000a3a:	480d      	ldr	r0, [pc, #52]	; (8000a70 <checkFunctionLen+0x88>)
 8000a3c:	f005 faaf 	bl	8005f9e <HAL_UART_Transmit>
		error = false;
 8000a40:	2300      	movs	r3, #0
 8000a42:	737b      	strb	r3, [r7, #13]
 8000a44:	e00b      	b.n	8000a5e <checkFunctionLen+0x76>
	}
	else if(arg_counter < functionLen)
 8000a46:	7bba      	ldrb	r2, [r7, #14]
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	429a      	cmp	r2, r3
 8000a4c:	d207      	bcs.n	8000a5e <checkFunctionLen+0x76>
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)"Error: not enough arguments for this function\n\r", sizeof("Error: not enough arguments for this function"),100);
 8000a4e:	2364      	movs	r3, #100	; 0x64
 8000a50:	222e      	movs	r2, #46	; 0x2e
 8000a52:	4908      	ldr	r1, [pc, #32]	; (8000a74 <checkFunctionLen+0x8c>)
 8000a54:	4806      	ldr	r0, [pc, #24]	; (8000a70 <checkFunctionLen+0x88>)
 8000a56:	f005 faa2 	bl	8005f9e <HAL_UART_Transmit>
		error = true;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	737b      	strb	r3, [r7, #13]
	}
	return error;
 8000a5e:	7b7b      	ldrb	r3, [r7, #13]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3710      	adds	r7, #16
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	200008fc 	.word	0x200008fc
 8000a6c:	08008118 	.word	0x08008118
 8000a70:	20000df0 	.word	0x20000df0
 8000a74:	0800815c 	.word	0x0800815c

08000a78 <Bitmap_init>:
//--------------------------------------------------------------
// @brief Initializes bitmap
// @details This function generates and initializes all the necessary memory and registers for the bitmaps to function
//--------------------------------------------------------------
void Bitmap_init()
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
	//----------------------------------------------------------
	// Generate lookup table
	//----------------------------------------------------------
	uint16_t i;

	for(i = 0; i < BM_AMOUNT; i++)
 8000a7e:	2300      	movs	r3, #0
 8000a80:	80fb      	strh	r3, [r7, #6]
 8000a82:	e08b      	b.n	8000b9c <Bitmap_init+0x124>
	{	if(i < ALPHABET_SIZE)
 8000a84:	88fb      	ldrh	r3, [r7, #6]
 8000a86:	2b19      	cmp	r3, #25
 8000a88:	d81c      	bhi.n	8000ac4 <Bitmap_init+0x4c>
		{
			bmLookup[i][ID] = ('a' + i);
 8000a8a:	88fb      	ldrh	r3, [r7, #6]
 8000a8c:	88fa      	ldrh	r2, [r7, #6]
 8000a8e:	3261      	adds	r2, #97	; 0x61
 8000a90:	b291      	uxth	r1, r2
 8000a92:	4a48      	ldr	r2, [pc, #288]	; (8000bb4 <Bitmap_init+0x13c>)
 8000a94:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
			bmLookup[i][X_LEN] = 8;
 8000a98:	88fb      	ldrh	r3, [r7, #6]
 8000a9a:	4a46      	ldr	r2, [pc, #280]	; (8000bb4 <Bitmap_init+0x13c>)
 8000a9c:	00db      	lsls	r3, r3, #3
 8000a9e:	4413      	add	r3, r2
 8000aa0:	2208      	movs	r2, #8
 8000aa2:	805a      	strh	r2, [r3, #2]
			bmLookup[i][Y_LEN] = 8;
 8000aa4:	88fb      	ldrh	r3, [r7, #6]
 8000aa6:	4a43      	ldr	r2, [pc, #268]	; (8000bb4 <Bitmap_init+0x13c>)
 8000aa8:	00db      	lsls	r3, r3, #3
 8000aaa:	4413      	add	r3, r2
 8000aac:	2208      	movs	r2, #8
 8000aae:	809a      	strh	r2, [r3, #4]
			bmLookup[i][OFFSET] = (TEXT_SIZE * TEXT_SIZE * i);
 8000ab0:	88fb      	ldrh	r3, [r7, #6]
 8000ab2:	88fa      	ldrh	r2, [r7, #6]
 8000ab4:	0192      	lsls	r2, r2, #6
 8000ab6:	b291      	uxth	r1, r2
 8000ab8:	4a3e      	ldr	r2, [pc, #248]	; (8000bb4 <Bitmap_init+0x13c>)
 8000aba:	00db      	lsls	r3, r3, #3
 8000abc:	4413      	add	r3, r2
 8000abe:	460a      	mov	r2, r1
 8000ac0:	80da      	strh	r2, [r3, #6]
 8000ac2:	e068      	b.n	8000b96 <Bitmap_init+0x11e>
		}
		else if((i >= ALPHABET_SIZE) && (i < (ALPHABET_SIZE*2)))
 8000ac4:	88fb      	ldrh	r3, [r7, #6]
 8000ac6:	2b19      	cmp	r3, #25
 8000ac8:	d91f      	bls.n	8000b0a <Bitmap_init+0x92>
 8000aca:	88fb      	ldrh	r3, [r7, #6]
 8000acc:	2b33      	cmp	r3, #51	; 0x33
 8000ace:	d81c      	bhi.n	8000b0a <Bitmap_init+0x92>
		{
			bmLookup[i][ID] = ('A' + (i - 26));
 8000ad0:	88fb      	ldrh	r3, [r7, #6]
 8000ad2:	88fa      	ldrh	r2, [r7, #6]
 8000ad4:	3227      	adds	r2, #39	; 0x27
 8000ad6:	b291      	uxth	r1, r2
 8000ad8:	4a36      	ldr	r2, [pc, #216]	; (8000bb4 <Bitmap_init+0x13c>)
 8000ada:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
			bmLookup[i][X_LEN] = 8;
 8000ade:	88fb      	ldrh	r3, [r7, #6]
 8000ae0:	4a34      	ldr	r2, [pc, #208]	; (8000bb4 <Bitmap_init+0x13c>)
 8000ae2:	00db      	lsls	r3, r3, #3
 8000ae4:	4413      	add	r3, r2
 8000ae6:	2208      	movs	r2, #8
 8000ae8:	805a      	strh	r2, [r3, #2]
			bmLookup[i][Y_LEN] = 8;
 8000aea:	88fb      	ldrh	r3, [r7, #6]
 8000aec:	4a31      	ldr	r2, [pc, #196]	; (8000bb4 <Bitmap_init+0x13c>)
 8000aee:	00db      	lsls	r3, r3, #3
 8000af0:	4413      	add	r3, r2
 8000af2:	2208      	movs	r2, #8
 8000af4:	809a      	strh	r2, [r3, #4]
			bmLookup[i][OFFSET] = (TEXT_SIZE * TEXT_SIZE * i);
 8000af6:	88fb      	ldrh	r3, [r7, #6]
 8000af8:	88fa      	ldrh	r2, [r7, #6]
 8000afa:	0192      	lsls	r2, r2, #6
 8000afc:	b291      	uxth	r1, r2
 8000afe:	4a2d      	ldr	r2, [pc, #180]	; (8000bb4 <Bitmap_init+0x13c>)
 8000b00:	00db      	lsls	r3, r3, #3
 8000b02:	4413      	add	r3, r2
 8000b04:	460a      	mov	r2, r1
 8000b06:	80da      	strh	r2, [r3, #6]
 8000b08:	e045      	b.n	8000b96 <Bitmap_init+0x11e>
		}
		else if((i >= (ALPHABET_SIZE*2)) && (i < (ALPHABET_SIZE*4)))
 8000b0a:	88fb      	ldrh	r3, [r7, #6]
 8000b0c:	2b33      	cmp	r3, #51	; 0x33
 8000b0e:	d91f      	bls.n	8000b50 <Bitmap_init+0xd8>
 8000b10:	88fb      	ldrh	r3, [r7, #6]
 8000b12:	2b67      	cmp	r3, #103	; 0x67
 8000b14:	d81c      	bhi.n	8000b50 <Bitmap_init+0xd8>
		{
			bmLookup[i][ID] = (i-(ALPHABET_SIZE*2));
 8000b16:	88fb      	ldrh	r3, [r7, #6]
 8000b18:	88fa      	ldrh	r2, [r7, #6]
 8000b1a:	3a34      	subs	r2, #52	; 0x34
 8000b1c:	b291      	uxth	r1, r2
 8000b1e:	4a25      	ldr	r2, [pc, #148]	; (8000bb4 <Bitmap_init+0x13c>)
 8000b20:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
			bmLookup[i][X_LEN] = 8;
 8000b24:	88fb      	ldrh	r3, [r7, #6]
 8000b26:	4a23      	ldr	r2, [pc, #140]	; (8000bb4 <Bitmap_init+0x13c>)
 8000b28:	00db      	lsls	r3, r3, #3
 8000b2a:	4413      	add	r3, r2
 8000b2c:	2208      	movs	r2, #8
 8000b2e:	805a      	strh	r2, [r3, #2]
			bmLookup[i][Y_LEN] = 8;
 8000b30:	88fb      	ldrh	r3, [r7, #6]
 8000b32:	4a20      	ldr	r2, [pc, #128]	; (8000bb4 <Bitmap_init+0x13c>)
 8000b34:	00db      	lsls	r3, r3, #3
 8000b36:	4413      	add	r3, r2
 8000b38:	2208      	movs	r2, #8
 8000b3a:	809a      	strh	r2, [r3, #4]
			bmLookup[i][OFFSET] = (TEXT_SIZE * TEXT_SIZE * i);
 8000b3c:	88fb      	ldrh	r3, [r7, #6]
 8000b3e:	88fa      	ldrh	r2, [r7, #6]
 8000b40:	0192      	lsls	r2, r2, #6
 8000b42:	b291      	uxth	r1, r2
 8000b44:	4a1b      	ldr	r2, [pc, #108]	; (8000bb4 <Bitmap_init+0x13c>)
 8000b46:	00db      	lsls	r3, r3, #3
 8000b48:	4413      	add	r3, r2
 8000b4a:	460a      	mov	r2, r1
 8000b4c:	80da      	strh	r2, [r3, #6]
 8000b4e:	e022      	b.n	8000b96 <Bitmap_init+0x11e>
		}
		else if((i >= (ALPHABET_SIZE*4)) && (i < (ALPHABET_SIZE*6)))
 8000b50:	88fb      	ldrh	r3, [r7, #6]
 8000b52:	2b67      	cmp	r3, #103	; 0x67
 8000b54:	d91f      	bls.n	8000b96 <Bitmap_init+0x11e>
 8000b56:	88fb      	ldrh	r3, [r7, #6]
 8000b58:	2b9b      	cmp	r3, #155	; 0x9b
 8000b5a:	d81c      	bhi.n	8000b96 <Bitmap_init+0x11e>
		{
			bmLookup[i][ID] = ((i-(ALPHABET_SIZE*4))+500);
 8000b5c:	88fb      	ldrh	r3, [r7, #6]
 8000b5e:	88fa      	ldrh	r2, [r7, #6]
 8000b60:	f502 72c6 	add.w	r2, r2, #396	; 0x18c
 8000b64:	b291      	uxth	r1, r2
 8000b66:	4a13      	ldr	r2, [pc, #76]	; (8000bb4 <Bitmap_init+0x13c>)
 8000b68:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
			bmLookup[i][X_LEN] = 8;
 8000b6c:	88fb      	ldrh	r3, [r7, #6]
 8000b6e:	4a11      	ldr	r2, [pc, #68]	; (8000bb4 <Bitmap_init+0x13c>)
 8000b70:	00db      	lsls	r3, r3, #3
 8000b72:	4413      	add	r3, r2
 8000b74:	2208      	movs	r2, #8
 8000b76:	805a      	strh	r2, [r3, #2]
			bmLookup[i][Y_LEN] = 8;
 8000b78:	88fb      	ldrh	r3, [r7, #6]
 8000b7a:	4a0e      	ldr	r2, [pc, #56]	; (8000bb4 <Bitmap_init+0x13c>)
 8000b7c:	00db      	lsls	r3, r3, #3
 8000b7e:	4413      	add	r3, r2
 8000b80:	2208      	movs	r2, #8
 8000b82:	809a      	strh	r2, [r3, #4]
			bmLookup[i][OFFSET] = (TEXT_SIZE * TEXT_SIZE * i);
 8000b84:	88fb      	ldrh	r3, [r7, #6]
 8000b86:	88fa      	ldrh	r2, [r7, #6]
 8000b88:	0192      	lsls	r2, r2, #6
 8000b8a:	b291      	uxth	r1, r2
 8000b8c:	4a09      	ldr	r2, [pc, #36]	; (8000bb4 <Bitmap_init+0x13c>)
 8000b8e:	00db      	lsls	r3, r3, #3
 8000b90:	4413      	add	r3, r2
 8000b92:	460a      	mov	r2, r1
 8000b94:	80da      	strh	r2, [r3, #6]
	for(i = 0; i < BM_AMOUNT; i++)
 8000b96:	88fb      	ldrh	r3, [r7, #6]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	80fb      	strh	r3, [r7, #6]
 8000b9c:	88fb      	ldrh	r3, [r7, #6]
 8000b9e:	2bc7      	cmp	r3, #199	; 0xc7
 8000ba0:	f67f af70 	bls.w	8000a84 <Bitmap_init+0xc>
		}
	}
}
 8000ba4:	bf00      	nop
 8000ba6:	bf00      	nop
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	200002bc 	.word	0x200002bc

08000bb8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <MX_DMA_Init+0x3c>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a0b      	ldr	r2, [pc, #44]	; (8000bf4 <MX_DMA_Init+0x3c>)
 8000bc8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <MX_DMA_Init+0x3c>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2100      	movs	r1, #0
 8000bde:	2044      	movs	r0, #68	; 0x44
 8000be0:	f002 ffe3 	bl	8003baa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000be4:	2044      	movs	r0, #68	; 0x44
 8000be6:	f002 fffc 	bl	8003be2 <HAL_NVIC_EnableIRQ>

}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40023800 	.word	0x40023800

08000bf8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08a      	sub	sp, #40	; 0x28
 8000bfc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
 8000c0a:	60da      	str	r2, [r3, #12]
 8000c0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	613b      	str	r3, [r7, #16]
 8000c12:	4b32      	ldr	r3, [pc, #200]	; (8000cdc <MX_GPIO_Init+0xe4>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a31      	ldr	r2, [pc, #196]	; (8000cdc <MX_GPIO_Init+0xe4>)
 8000c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b2f      	ldr	r3, [pc, #188]	; (8000cdc <MX_GPIO_Init+0xe4>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c26:	613b      	str	r3, [r7, #16]
 8000c28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	4b2b      	ldr	r3, [pc, #172]	; (8000cdc <MX_GPIO_Init+0xe4>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a2a      	ldr	r2, [pc, #168]	; (8000cdc <MX_GPIO_Init+0xe4>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b28      	ldr	r3, [pc, #160]	; (8000cdc <MX_GPIO_Init+0xe4>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	4b24      	ldr	r3, [pc, #144]	; (8000cdc <MX_GPIO_Init+0xe4>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a23      	ldr	r2, [pc, #140]	; (8000cdc <MX_GPIO_Init+0xe4>)
 8000c50:	f043 0310 	orr.w	r3, r3, #16
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b21      	ldr	r3, [pc, #132]	; (8000cdc <MX_GPIO_Init+0xe4>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f003 0310 	and.w	r3, r3, #16
 8000c5e:	60bb      	str	r3, [r7, #8]
 8000c60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	607b      	str	r3, [r7, #4]
 8000c66:	4b1d      	ldr	r3, [pc, #116]	; (8000cdc <MX_GPIO_Init+0xe4>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a1c      	ldr	r2, [pc, #112]	; (8000cdc <MX_GPIO_Init+0xe4>)
 8000c6c:	f043 0302 	orr.w	r3, r3, #2
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b1a      	ldr	r3, [pc, #104]	; (8000cdc <MX_GPIO_Init+0xe4>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0302 	and.w	r3, r3, #2
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000c84:	4816      	ldr	r0, [pc, #88]	; (8000ce0 <MX_GPIO_Init+0xe8>)
 8000c86:	f003 fcf5 	bl	8004674 <HAL_GPIO_WritePin>
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VGA_VSYNC_GPIO_Port, VGA_VSYNC_Pin, GPIO_PIN_RESET);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c90:	4814      	ldr	r0, [pc, #80]	; (8000ce4 <MX_GPIO_Init+0xec>)
 8000c92:	f003 fcef 	bl	8004674 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 8000c96:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000c9a:	617b      	str	r3, [r7, #20]
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	4619      	mov	r1, r3
 8000cae:	480c      	ldr	r0, [pc, #48]	; (8000ce0 <MX_GPIO_Init+0xe8>)
 8000cb0:	f003 fb44 	bl	800433c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VGA_VSYNC_Pin;
 8000cb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VGA_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <MX_GPIO_Init+0xec>)
 8000cce:	f003 fb35 	bl	800433c <HAL_GPIO_Init>

}
 8000cd2:	bf00      	nop
 8000cd4:	3728      	adds	r7, #40	; 0x28
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	40020400 	.word	0x40020400

08000ce8 <logic>:
// @param[in] x: The X-coordinate of the top left corner of the bitmap
// @param[in] y: The Y-coordinate of the top left corner of the bitmap
// @param[in] bmNr: The number ID of the bitmap to be loaded in
//--------------------------------------------------------------
void logic()
{
 8000ce8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000cec:	b085      	sub	sp, #20
 8000cee:	af04      	add	r7, sp, #16

	switch(input.line_rx_buffer[firstCharacter])
 8000cf0:	4b54      	ldr	r3, [pc, #336]	; (8000e44 <logic+0x15c>)
 8000cf2:	785b      	ldrb	r3, [r3, #1]
 8000cf4:	3b62      	subs	r3, #98	; 0x62
 8000cf6:	2b12      	cmp	r3, #18
 8000cf8:	f200 8098 	bhi.w	8000e2c <logic+0x144>
 8000cfc:	a201      	add	r2, pc, #4	; (adr r2, 8000d04 <logic+0x1c>)
 8000cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d02:	bf00      	nop
 8000d04:	08000e03 	.word	0x08000e03
 8000d08:	08000e1d 	.word	0x08000e1d
 8000d0c:	08000e2d 	.word	0x08000e2d
 8000d10:	08000e2d 	.word	0x08000e2d
 8000d14:	08000e2d 	.word	0x08000e2d
 8000d18:	08000e2d 	.word	0x08000e2d
 8000d1c:	08000e2d 	.word	0x08000e2d
 8000d20:	08000e2d 	.word	0x08000e2d
 8000d24:	08000e2d 	.word	0x08000e2d
 8000d28:	08000e2d 	.word	0x08000e2d
 8000d2c:	08000d51 	.word	0x08000d51
 8000d30:	08000e2d 	.word	0x08000e2d
 8000d34:	08000e2d 	.word	0x08000e2d
 8000d38:	08000e2d 	.word	0x08000e2d
 8000d3c:	08000e2d 	.word	0x08000e2d
 8000d40:	08000e2d 	.word	0x08000e2d
 8000d44:	08000d85 	.word	0x08000d85
 8000d48:	08000e2d 	.word	0x08000e2d
 8000d4c:	08000dc3 	.word	0x08000dc3
	{
		case line:
			 UB_VGA_SetLine(line_s.x1,
 8000d50:	4b3d      	ldr	r3, [pc, #244]	; (8000e48 <logic+0x160>)
 8000d52:	881c      	ldrh	r4, [r3, #0]
 8000d54:	4b3c      	ldr	r3, [pc, #240]	; (8000e48 <logic+0x160>)
 8000d56:	885d      	ldrh	r5, [r3, #2]
 8000d58:	4b3b      	ldr	r3, [pc, #236]	; (8000e48 <logic+0x160>)
 8000d5a:	889e      	ldrh	r6, [r3, #4]
 8000d5c:	4b3a      	ldr	r3, [pc, #232]	; (8000e48 <logic+0x160>)
 8000d5e:	f8b3 8006 	ldrh.w	r8, [r3, #6]
							 line_s.y1,
							 line_s.x2,
							 line_s.y2,
							 color_check(line_s.color),
 8000d62:	483a      	ldr	r0, [pc, #232]	; (8000e4c <logic+0x164>)
 8000d64:	f000 f8f6 	bl	8000f54 <color_check>
 8000d68:	4603      	mov	r3, r0
			 UB_VGA_SetLine(line_s.x1,
 8000d6a:	b2db      	uxtb	r3, r3
							 line_s.weight);
 8000d6c:	4a36      	ldr	r2, [pc, #216]	; (8000e48 <logic+0x160>)
 8000d6e:	7d12      	ldrb	r2, [r2, #20]
			 UB_VGA_SetLine(line_s.x1,
 8000d70:	b292      	uxth	r2, r2
 8000d72:	9201      	str	r2, [sp, #4]
 8000d74:	9300      	str	r3, [sp, #0]
 8000d76:	4643      	mov	r3, r8
 8000d78:	4632      	mov	r2, r6
 8000d7a:	4629      	mov	r1, r5
 8000d7c:	4620      	mov	r0, r4
 8000d7e:	f000 ffdd 	bl	8001d3c <UB_VGA_SetLine>
			 break;
 8000d82:	e05a      	b.n	8000e3a <logic+0x152>
		case rectangle:
			UB_VGA_DrawRectangle(rectangle_s.xlup,
 8000d84:	4b32      	ldr	r3, [pc, #200]	; (8000e50 <logic+0x168>)
 8000d86:	881c      	ldrh	r4, [r3, #0]
 8000d88:	4b31      	ldr	r3, [pc, #196]	; (8000e50 <logic+0x168>)
 8000d8a:	885d      	ldrh	r5, [r3, #2]
 8000d8c:	4b30      	ldr	r3, [pc, #192]	; (8000e50 <logic+0x168>)
 8000d8e:	791e      	ldrb	r6, [r3, #4]
 8000d90:	4b2f      	ldr	r3, [pc, #188]	; (8000e50 <logic+0x168>)
 8000d92:	f893 8005 	ldrb.w	r8, [r3, #5]
					rectangle_s.ylup,
					rectangle_s.width,
					rectangle_s.height,
					color_check(rectangle_s.color),
 8000d96:	482f      	ldr	r0, [pc, #188]	; (8000e54 <logic+0x16c>)
 8000d98:	f000 f8dc 	bl	8000f54 <color_check>
 8000d9c:	4603      	mov	r3, r0
			UB_VGA_DrawRectangle(rectangle_s.xlup,
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	4a2b      	ldr	r2, [pc, #172]	; (8000e50 <logic+0x168>)
 8000da2:	7c92      	ldrb	r2, [r2, #18]
 8000da4:	492c      	ldr	r1, [pc, #176]	; (8000e58 <logic+0x170>)
 8000da6:	b2c9      	uxtb	r1, r1
 8000da8:	4829      	ldr	r0, [pc, #164]	; (8000e50 <logic+0x168>)
 8000daa:	7fc0      	ldrb	r0, [r0, #31]
 8000dac:	9003      	str	r0, [sp, #12]
 8000dae:	9102      	str	r1, [sp, #8]
 8000db0:	9201      	str	r2, [sp, #4]
 8000db2:	9300      	str	r3, [sp, #0]
 8000db4:	4643      	mov	r3, r8
 8000db6:	4632      	mov	r2, r6
 8000db8:	4629      	mov	r1, r5
 8000dba:	4620      	mov	r0, r4
 8000dbc:	f001 f91f 	bl	8001ffe <UB_VGA_DrawRectangle>
					rectangle_s.filled,
					rectangle_s.bordercolor,
					rectangle_s.linewidth);
			break;
 8000dc0:	e03b      	b.n	8000e3a <logic+0x152>
		case text:
			UB_VGA_writeText(text_s.xlup,
 8000dc2:	4b26      	ldr	r3, [pc, #152]	; (8000e5c <logic+0x174>)
 8000dc4:	881b      	ldrh	r3, [r3, #0]
 8000dc6:	4698      	mov	r8, r3
					text_s.ylup,
 8000dc8:	4b24      	ldr	r3, [pc, #144]	; (8000e5c <logic+0x174>)
 8000dca:	885b      	ldrh	r3, [r3, #2]
			UB_VGA_writeText(text_s.xlup,
 8000dcc:	4699      	mov	r9, r3
 8000dce:	4824      	ldr	r0, [pc, #144]	; (8000e60 <logic+0x178>)
 8000dd0:	f000 f8c0 	bl	8000f54 <color_check>
 8000dd4:	4605      	mov	r5, r0
 8000dd6:	4823      	ldr	r0, [pc, #140]	; (8000e64 <logic+0x17c>)
 8000dd8:	f000 f852 	bl	8000e80 <font_check>
 8000ddc:	4604      	mov	r4, r0
					color_check(text_s.color),
					text_s.textin,
					font_check(text_s.fontname),
					text_s.fontsize,
 8000dde:	4b1f      	ldr	r3, [pc, #124]	; (8000e5c <logic+0x174>)
 8000de0:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
			UB_VGA_writeText(text_s.xlup,
 8000de4:	461e      	mov	r6, r3
 8000de6:	4820      	ldr	r0, [pc, #128]	; (8000e68 <logic+0x180>)
 8000de8:	f000 f878 	bl	8000edc <style_check>
 8000dec:	4603      	mov	r3, r0
 8000dee:	9302      	str	r3, [sp, #8]
 8000df0:	9601      	str	r6, [sp, #4]
 8000df2:	9400      	str	r4, [sp, #0]
 8000df4:	4b1d      	ldr	r3, [pc, #116]	; (8000e6c <logic+0x184>)
 8000df6:	462a      	mov	r2, r5
 8000df8:	4649      	mov	r1, r9
 8000dfa:	4640      	mov	r0, r8
 8000dfc:	f001 faca 	bl	8002394 <UB_VGA_writeText>
					style_check(text_s.fontstyle));
			break;
 8000e00:	e01b      	b.n	8000e3a <logic+0x152>
		case bitmap:
			UB_VGA_DrawBitmap(bitmap_s.nr,
 8000e02:	4b1b      	ldr	r3, [pc, #108]	; (8000e70 <logic+0x188>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	b298      	uxth	r0, r3
 8000e08:	4b19      	ldr	r3, [pc, #100]	; (8000e70 <logic+0x188>)
 8000e0a:	8859      	ldrh	r1, [r3, #2]
 8000e0c:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <logic+0x188>)
 8000e0e:	889a      	ldrh	r2, [r3, #4]
 8000e10:	2300      	movs	r3, #0
 8000e12:	9300      	str	r3, [sp, #0]
 8000e14:	2300      	movs	r3, #0
 8000e16:	f001 fa01 	bl	800221c <UB_VGA_DrawBitmap>
					bitmap_s.xlup,
					bitmap_s.ylup, 0, 0);
			break;
 8000e1a:	e00e      	b.n	8000e3a <logic+0x152>
		case clearscreen:
			UB_VGA_clearScreen(color_check(clearscreen_s.color));
 8000e1c:	4815      	ldr	r0, [pc, #84]	; (8000e74 <logic+0x18c>)
 8000e1e:	f000 f899 	bl	8000f54 <color_check>
 8000e22:	4603      	mov	r3, r0
 8000e24:	4618      	mov	r0, r3
 8000e26:	f001 f9d7 	bl	80021d8 <UB_VGA_clearScreen>
			break;
 8000e2a:	e006      	b.n	8000e3a <logic+0x152>
		default:
			HAL_UART_Transmit(&huart2, (uint8_t *)"no comando\n\r", sizeof("no comando"),100);
 8000e2c:	2364      	movs	r3, #100	; 0x64
 8000e2e:	220b      	movs	r2, #11
 8000e30:	4911      	ldr	r1, [pc, #68]	; (8000e78 <logic+0x190>)
 8000e32:	4812      	ldr	r0, [pc, #72]	; (8000e7c <logic+0x194>)
 8000e34:	f005 f8b3 	bl	8005f9e <HAL_UART_Transmit>
			break;
 8000e38:	bf00      	nop
	}
}
 8000e3a:	bf00      	nop
 8000e3c:	3704      	adds	r7, #4
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e44:	200008fc 	.word	0x200008fc
 8000e48:	200001b4 	.word	0x200001b4
 8000e4c:	200001bc 	.word	0x200001bc
 8000e50:	200001e0 	.word	0x200001e0
 8000e54:	200001e6 	.word	0x200001e6
 8000e58:	200001f3 	.word	0x200001f3
 8000e5c:	20000200 	.word	0x20000200
 8000e60:	20000204 	.word	0x20000204
 8000e64:	20000290 	.word	0x20000290
 8000e68:	200002af 	.word	0x200002af
 8000e6c:	20000210 	.word	0x20000210
 8000e70:	200001cc 	.word	0x200001cc
 8000e74:	200001d4 	.word	0x200001d4
 8000e78:	0800818c 	.word	0x0800818c
 8000e7c:	20000df0 	.word	0x20000df0

08000e80 <font_check>:
// @param[in] fnt: char whit font type
//
// @return return font type as 1 or 2
//--------------------------------------------------------------
int font_check(char fnt[8])
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
	int font;
	uint8_t result;

	result = strcmp(fnt, ariel);
 8000e88:	4910      	ldr	r1, [pc, #64]	; (8000ecc <font_check+0x4c>)
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f7ff f9a0 	bl	80001d0 <strcmp>
 8000e90:	4603      	mov	r3, r0
 8000e92:	72fb      	strb	r3, [r7, #11]
	if (result == 0)
 8000e94:	7afb      	ldrb	r3, [r7, #11]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d101      	bne.n	8000e9e <font_check+0x1e>
	{
		font = 1;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	60fb      	str	r3, [r7, #12]
	}
	result = strcmp(fnt, consolas);
 8000e9e:	490c      	ldr	r1, [pc, #48]	; (8000ed0 <font_check+0x50>)
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f7ff f995 	bl	80001d0 <strcmp>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	72fb      	strb	r3, [r7, #11]
	if (result == 0)
 8000eaa:	7afb      	ldrb	r3, [r7, #11]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d102      	bne.n	8000eb6 <font_check+0x36>
	{
		font = 2;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	e005      	b.n	8000ec2 <font_check+0x42>
	}
	else
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)"wrong font\n\r", sizeof("wrong font"),100);
 8000eb6:	2364      	movs	r3, #100	; 0x64
 8000eb8:	220b      	movs	r2, #11
 8000eba:	4906      	ldr	r1, [pc, #24]	; (8000ed4 <font_check+0x54>)
 8000ebc:	4806      	ldr	r0, [pc, #24]	; (8000ed8 <font_check+0x58>)
 8000ebe:	f005 f86e 	bl	8005f9e <HAL_UART_Transmit>
	}



	return font;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3710      	adds	r7, #16
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	2000008c 	.word	0x2000008c
 8000ed0:	20000080 	.word	0x20000080
 8000ed4:	0800819c 	.word	0x0800819c
 8000ed8:	20000df0 	.word	0x20000df0

08000edc <style_check>:
// @param[in] the char withe the fond style in it
//
// @return return the style code (1,2,3) 1 = normaal, 2 = vet, 3 = cursief
//--------------------------------------------------------------
int style_check(char stl[7])
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
	int style;
	uint8_t result;

	result = strcmp(stl, normaal);
 8000ee4:	4916      	ldr	r1, [pc, #88]	; (8000f40 <style_check+0x64>)
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f7ff f972 	bl	80001d0 <strcmp>
 8000eec:	4603      	mov	r3, r0
 8000eee:	72fb      	strb	r3, [r7, #11]
	if (result == 0)
 8000ef0:	7afb      	ldrb	r3, [r7, #11]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d101      	bne.n	8000efa <style_check+0x1e>
	{
		style = 1;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	60fb      	str	r3, [r7, #12]
	}
	result = strcmp(stl, vet);
 8000efa:	4912      	ldr	r1, [pc, #72]	; (8000f44 <style_check+0x68>)
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f7ff f967 	bl	80001d0 <strcmp>
 8000f02:	4603      	mov	r3, r0
 8000f04:	72fb      	strb	r3, [r7, #11]
	if (result == 0)
 8000f06:	7afb      	ldrb	r3, [r7, #11]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d101      	bne.n	8000f10 <style_check+0x34>
	{
		style = 2;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	60fb      	str	r3, [r7, #12]
	}
	result = strcmp(stl, cursief);
 8000f10:	490d      	ldr	r1, [pc, #52]	; (8000f48 <style_check+0x6c>)
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f7ff f95c 	bl	80001d0 <strcmp>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	72fb      	strb	r3, [r7, #11]
	if (result == 0)
 8000f1c:	7afb      	ldrb	r3, [r7, #11]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d102      	bne.n	8000f28 <style_check+0x4c>
	{
		style = 3;
 8000f22:	2303      	movs	r3, #3
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	e005      	b.n	8000f34 <style_check+0x58>
	}
	else
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)"wrong style\n\r", sizeof("wrong style"),100);
 8000f28:	2364      	movs	r3, #100	; 0x64
 8000f2a:	220c      	movs	r2, #12
 8000f2c:	4907      	ldr	r1, [pc, #28]	; (8000f4c <style_check+0x70>)
 8000f2e:	4808      	ldr	r0, [pc, #32]	; (8000f50 <style_check+0x74>)
 8000f30:	f005 f835 	bl	8005f9e <HAL_UART_Transmit>
	}

	return style;
 8000f34:	68fb      	ldr	r3, [r7, #12]
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000094 	.word	0x20000094
 8000f44:	2000009c 	.word	0x2000009c
 8000f48:	200000a0 	.word	0x200000a0
 8000f4c:	080081ac 	.word	0x080081ac
 8000f50:	20000df0 	.word	0x20000df0

08000f54 <color_check>:
// @param[in] color: char with the color
//
// @return return the color code
//--------------------------------------------------------------
int color_check(char color[12])
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
		int ret_val;
		uint8_t result;
		result = 1;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	72fb      	strb	r3, [r7, #11]
		switch(color[0])
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	3b62      	subs	r3, #98	; 0x62
 8000f66:	2b18      	cmp	r3, #24
 8000f68:	f200 8179 	bhi.w	800125e <color_check+0x30a>
 8000f6c:	a201      	add	r2, pc, #4	; (adr r2, 8000f74 <color_check+0x20>)
 8000f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f72:	bf00      	nop
 8000f74:	0800121d 	.word	0x0800121d
 8000f78:	080011cd 	.word	0x080011cd
 8000f7c:	0800125f 	.word	0x0800125f
 8000f80:	0800125f 	.word	0x0800125f
 8000f84:	0800125f 	.word	0x0800125f
 8000f88:	08001171 	.word	0x08001171
 8000f8c:	0800125f 	.word	0x0800125f
 8000f90:	0800125f 	.word	0x0800125f
 8000f94:	0800125f 	.word	0x0800125f
 8000f98:	0800125f 	.word	0x0800125f
 8000f9c:	08001001 	.word	0x08001001
 8000fa0:	080011f5 	.word	0x080011f5
 8000fa4:	0800125f 	.word	0x0800125f
 8000fa8:	0800125f 	.word	0x0800125f
 8000fac:	0800125f 	.word	0x0800125f
 8000fb0:	0800125f 	.word	0x0800125f
 8000fb4:	08001121 	.word	0x08001121
 8000fb8:	0800125f 	.word	0x0800125f
 8000fbc:	0800125f 	.word	0x0800125f
 8000fc0:	0800125f 	.word	0x0800125f
 8000fc4:	0800125f 	.word	0x0800125f
 8000fc8:	08001149 	.word	0x08001149
 8000fcc:	0800125f 	.word	0x0800125f
 8000fd0:	0800125f 	.word	0x0800125f
 8000fd4:	08000fd9 	.word	0x08000fd9
		{
		case 'z':
			result = strcmp(color, zwart);
 8000fd8:	49a3      	ldr	r1, [pc, #652]	; (8001268 <color_check+0x314>)
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f7ff f8f8 	bl	80001d0 <strcmp>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	72fb      	strb	r3, [r7, #11]
			if (result == 0)
 8000fe4:	7afb      	ldrb	r3, [r7, #11]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d104      	bne.n	8000ff4 <color_check+0xa0>
			{
			ret_val = VGA_COL_BLACK;
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
			result = 1;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	72fb      	strb	r3, [r7, #11]
 8000ff2:	e005      	b.n	8001000 <color_check+0xac>
			}
			else
			{
				HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
 8000ff4:	2364      	movs	r3, #100	; 0x64
 8000ff6:	220c      	movs	r2, #12
 8000ff8:	499c      	ldr	r1, [pc, #624]	; (800126c <color_check+0x318>)
 8000ffa:	489d      	ldr	r0, [pc, #628]	; (8001270 <color_check+0x31c>)
 8000ffc:	f004 ffcf 	bl	8005f9e <HAL_UART_Transmit>
			}
		case 'l':
			switch(color[5])
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3305      	adds	r3, #5
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	3b62      	subs	r3, #98	; 0x62
 8001008:	2b10      	cmp	r3, #16
 800100a:	f200 8089 	bhi.w	8001120 <color_check+0x1cc>
 800100e:	a201      	add	r2, pc, #4	; (adr r2, 8001014 <color_check+0xc0>)
 8001010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001014:	08001059 	.word	0x08001059
 8001018:	080010d1 	.word	0x080010d1
 800101c:	08001121 	.word	0x08001121
 8001020:	08001121 	.word	0x08001121
 8001024:	08001121 	.word	0x08001121
 8001028:	08001081 	.word	0x08001081
 800102c:	08001121 	.word	0x08001121
 8001030:	08001121 	.word	0x08001121
 8001034:	08001121 	.word	0x08001121
 8001038:	08001121 	.word	0x08001121
 800103c:	08001121 	.word	0x08001121
 8001040:	080010f9 	.word	0x080010f9
 8001044:	08001121 	.word	0x08001121
 8001048:	08001121 	.word	0x08001121
 800104c:	08001121 	.word	0x08001121
 8001050:	08001121 	.word	0x08001121
 8001054:	080010a9 	.word	0x080010a9
			{
			case 'b':
				result = strcmp(color, lblauw);
 8001058:	4986      	ldr	r1, [pc, #536]	; (8001274 <color_check+0x320>)
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff f8b8 	bl	80001d0 <strcmp>
 8001060:	4603      	mov	r3, r0
 8001062:	72fb      	strb	r3, [r7, #11]
				if (result == 0)
 8001064:	7afb      	ldrb	r3, [r7, #11]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d104      	bne.n	8001074 <color_check+0x120>
				{
				ret_val = VGA_COL_LIGHTBLUE;
 800106a:	232d      	movs	r3, #45	; 0x2d
 800106c:	60fb      	str	r3, [r7, #12]
				result = 1;
 800106e:	2301      	movs	r3, #1
 8001070:	72fb      	strb	r3, [r7, #11]
 8001072:	e005      	b.n	8001080 <color_check+0x12c>
				}
				else
				{
					HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
 8001074:	2364      	movs	r3, #100	; 0x64
 8001076:	220c      	movs	r2, #12
 8001078:	497c      	ldr	r1, [pc, #496]	; (800126c <color_check+0x318>)
 800107a:	487d      	ldr	r0, [pc, #500]	; (8001270 <color_check+0x31c>)
 800107c:	f004 ff8f 	bl	8005f9e <HAL_UART_Transmit>
				}
			case 'g':
				result = strcmp(color, lgroen);
 8001080:	497d      	ldr	r1, [pc, #500]	; (8001278 <color_check+0x324>)
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff f8a4 	bl	80001d0 <strcmp>
 8001088:	4603      	mov	r3, r0
 800108a:	72fb      	strb	r3, [r7, #11]
				if (result == 0)
 800108c:	7afb      	ldrb	r3, [r7, #11]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d104      	bne.n	800109c <color_check+0x148>
				{
				ret_val = VGA_COL_LIGHTGREEN;
 8001092:	232e      	movs	r3, #46	; 0x2e
 8001094:	60fb      	str	r3, [r7, #12]
				result = 1;
 8001096:	2301      	movs	r3, #1
 8001098:	72fb      	strb	r3, [r7, #11]
 800109a:	e005      	b.n	80010a8 <color_check+0x154>
				}
				else
				{
					HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
 800109c:	2364      	movs	r3, #100	; 0x64
 800109e:	220c      	movs	r2, #12
 80010a0:	4972      	ldr	r1, [pc, #456]	; (800126c <color_check+0x318>)
 80010a2:	4873      	ldr	r0, [pc, #460]	; (8001270 <color_check+0x31c>)
 80010a4:	f004 ff7b 	bl	8005f9e <HAL_UART_Transmit>
				}
			case 'r':
				result = strcmp(color, lrood);
 80010a8:	4974      	ldr	r1, [pc, #464]	; (800127c <color_check+0x328>)
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff f890 	bl	80001d0 <strcmp>
 80010b0:	4603      	mov	r3, r0
 80010b2:	72fb      	strb	r3, [r7, #11]
				if (result == 0)
 80010b4:	7afb      	ldrb	r3, [r7, #11]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d104      	bne.n	80010c4 <color_check+0x170>
				{
				ret_val = VGA_COL_LIGHTRED;
 80010ba:	23c4      	movs	r3, #196	; 0xc4
 80010bc:	60fb      	str	r3, [r7, #12]
				result = 1;
 80010be:	2301      	movs	r3, #1
 80010c0:	72fb      	strb	r3, [r7, #11]
 80010c2:	e005      	b.n	80010d0 <color_check+0x17c>
				}
				else
				{
					HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
 80010c4:	2364      	movs	r3, #100	; 0x64
 80010c6:	220c      	movs	r2, #12
 80010c8:	4968      	ldr	r1, [pc, #416]	; (800126c <color_check+0x318>)
 80010ca:	4869      	ldr	r0, [pc, #420]	; (8001270 <color_check+0x31c>)
 80010cc:	f004 ff67 	bl	8005f9e <HAL_UART_Transmit>
				}
			case 'c':
				result = strcmp(color, lcyaan);
 80010d0:	496b      	ldr	r1, [pc, #428]	; (8001280 <color_check+0x32c>)
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff f87c 	bl	80001d0 <strcmp>
 80010d8:	4603      	mov	r3, r0
 80010da:	72fb      	strb	r3, [r7, #11]
				if (result == 0)
 80010dc:	7afb      	ldrb	r3, [r7, #11]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d104      	bne.n	80010ec <color_check+0x198>
				{
				ret_val = VGA_COL_LIGHTCYAN;
 80010e2:	2375      	movs	r3, #117	; 0x75
 80010e4:	60fb      	str	r3, [r7, #12]
				result = 1;
 80010e6:	2301      	movs	r3, #1
 80010e8:	72fb      	strb	r3, [r7, #11]
 80010ea:	e005      	b.n	80010f8 <color_check+0x1a4>
				}
				else
				{
					HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
 80010ec:	2364      	movs	r3, #100	; 0x64
 80010ee:	220c      	movs	r2, #12
 80010f0:	495e      	ldr	r1, [pc, #376]	; (800126c <color_check+0x318>)
 80010f2:	485f      	ldr	r0, [pc, #380]	; (8001270 <color_check+0x31c>)
 80010f4:	f004 ff53 	bl	8005f9e <HAL_UART_Transmit>
				}
			case 'm':
				result = strcmp(color, lmagenta);
 80010f8:	4962      	ldr	r1, [pc, #392]	; (8001284 <color_check+0x330>)
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff f868 	bl	80001d0 <strcmp>
 8001100:	4603      	mov	r3, r0
 8001102:	72fb      	strb	r3, [r7, #11]
				if (result == 0)
 8001104:	7afb      	ldrb	r3, [r7, #11]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d104      	bne.n	8001114 <color_check+0x1c0>
				{
				ret_val = VGA_COL_LIGHTMAGENTA;
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
				result = 1;
 800110e:	2301      	movs	r3, #1
 8001110:	72fb      	strb	r3, [r7, #11]
 8001112:	e005      	b.n	8001120 <color_check+0x1cc>
				}
				else
				{
					HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
 8001114:	2364      	movs	r3, #100	; 0x64
 8001116:	220c      	movs	r2, #12
 8001118:	4954      	ldr	r1, [pc, #336]	; (800126c <color_check+0x318>)
 800111a:	4855      	ldr	r0, [pc, #340]	; (8001270 <color_check+0x31c>)
 800111c:	f004 ff3f 	bl	8005f9e <HAL_UART_Transmit>
				}
			}
		case 'r':
			result = strcmp(color, rood);
 8001120:	4959      	ldr	r1, [pc, #356]	; (8001288 <color_check+0x334>)
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f7ff f854 	bl	80001d0 <strcmp>
 8001128:	4603      	mov	r3, r0
 800112a:	72fb      	strb	r3, [r7, #11]
			if (result == 0)
 800112c:	7afb      	ldrb	r3, [r7, #11]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d104      	bne.n	800113c <color_check+0x1e8>
			{
			ret_val = VGA_COL_RED;
 8001132:	23e0      	movs	r3, #224	; 0xe0
 8001134:	60fb      	str	r3, [r7, #12]
			result = 1;
 8001136:	2301      	movs	r3, #1
 8001138:	72fb      	strb	r3, [r7, #11]
 800113a:	e005      	b.n	8001148 <color_check+0x1f4>
			}
			else
			{
				HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
 800113c:	2364      	movs	r3, #100	; 0x64
 800113e:	220c      	movs	r2, #12
 8001140:	494a      	ldr	r1, [pc, #296]	; (800126c <color_check+0x318>)
 8001142:	484b      	ldr	r0, [pc, #300]	; (8001270 <color_check+0x31c>)
 8001144:	f004 ff2b 	bl	8005f9e <HAL_UART_Transmit>
			}
		case 'w':
			result = strcmp(color, wit);
 8001148:	4950      	ldr	r1, [pc, #320]	; (800128c <color_check+0x338>)
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f7ff f840 	bl	80001d0 <strcmp>
 8001150:	4603      	mov	r3, r0
 8001152:	72fb      	strb	r3, [r7, #11]
			if (result == 0)
 8001154:	7afb      	ldrb	r3, [r7, #11]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d104      	bne.n	8001164 <color_check+0x210>
			{
			ret_val = VGA_COL_WHITE;
 800115a:	23ff      	movs	r3, #255	; 0xff
 800115c:	60fb      	str	r3, [r7, #12]
			result = 1;
 800115e:	2301      	movs	r3, #1
 8001160:	72fb      	strb	r3, [r7, #11]
 8001162:	e005      	b.n	8001170 <color_check+0x21c>
			}
			else
			{
				HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
 8001164:	2364      	movs	r3, #100	; 0x64
 8001166:	220c      	movs	r2, #12
 8001168:	4940      	ldr	r1, [pc, #256]	; (800126c <color_check+0x318>)
 800116a:	4841      	ldr	r0, [pc, #260]	; (8001270 <color_check+0x31c>)
 800116c:	f004 ff17 	bl	8005f9e <HAL_UART_Transmit>
			}
		case 'g':
			result = strcmp(color, geel);
 8001170:	4947      	ldr	r1, [pc, #284]	; (8001290 <color_check+0x33c>)
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff f82c 	bl	80001d0 <strcmp>
 8001178:	4603      	mov	r3, r0
 800117a:	72fb      	strb	r3, [r7, #11]
			if (result == 0)
 800117c:	7afb      	ldrb	r3, [r7, #11]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d103      	bne.n	800118a <color_check+0x236>
			{
			ret_val = VGA_COL_YELLOW;
 8001182:	23fc      	movs	r3, #252	; 0xfc
 8001184:	60fb      	str	r3, [r7, #12]
			result = 1;
 8001186:	2301      	movs	r3, #1
 8001188:	72fb      	strb	r3, [r7, #11]
			}
			result = strcmp(color, grijs);
 800118a:	4942      	ldr	r1, [pc, #264]	; (8001294 <color_check+0x340>)
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f7ff f81f 	bl	80001d0 <strcmp>
 8001192:	4603      	mov	r3, r0
 8001194:	72fb      	strb	r3, [r7, #11]
			if (result == 0)
 8001196:	7afb      	ldrb	r3, [r7, #11]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d103      	bne.n	80011a4 <color_check+0x250>
			{
			ret_val = VGA_COL_GRAY;
 800119c:	2300      	movs	r3, #0
 800119e:	60fb      	str	r3, [r7, #12]
			result = 1;
 80011a0:	2301      	movs	r3, #1
 80011a2:	72fb      	strb	r3, [r7, #11]
			}
			result = strcmp(color, groen);
 80011a4:	493c      	ldr	r1, [pc, #240]	; (8001298 <color_check+0x344>)
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f7ff f812 	bl	80001d0 <strcmp>
 80011ac:	4603      	mov	r3, r0
 80011ae:	72fb      	strb	r3, [r7, #11]

			if (result == 0)
 80011b0:	7afb      	ldrb	r3, [r7, #11]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d104      	bne.n	80011c0 <color_check+0x26c>
			{
			ret_val = VGA_COL_GREEN;
 80011b6:	231c      	movs	r3, #28
 80011b8:	60fb      	str	r3, [r7, #12]
			result = 1;
 80011ba:	2301      	movs	r3, #1
 80011bc:	72fb      	strb	r3, [r7, #11]
 80011be:	e005      	b.n	80011cc <color_check+0x278>
			}
			else
			{
				HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
 80011c0:	2364      	movs	r3, #100	; 0x64
 80011c2:	220c      	movs	r2, #12
 80011c4:	4929      	ldr	r1, [pc, #164]	; (800126c <color_check+0x318>)
 80011c6:	482a      	ldr	r0, [pc, #168]	; (8001270 <color_check+0x31c>)
 80011c8:	f004 fee9 	bl	8005f9e <HAL_UART_Transmit>
			}
		case 'c':
			result = strcmp(color, cyaan);
 80011cc:	4933      	ldr	r1, [pc, #204]	; (800129c <color_check+0x348>)
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f7fe fffe 	bl	80001d0 <strcmp>
 80011d4:	4603      	mov	r3, r0
 80011d6:	72fb      	strb	r3, [r7, #11]
			if (result == 0)
 80011d8:	7afb      	ldrb	r3, [r7, #11]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d104      	bne.n	80011e8 <color_check+0x294>
			{
			ret_val = VGA_COL_CYAN;
 80011de:	231f      	movs	r3, #31
 80011e0:	60fb      	str	r3, [r7, #12]
			result = 1;
 80011e2:	2301      	movs	r3, #1
 80011e4:	72fb      	strb	r3, [r7, #11]
 80011e6:	e005      	b.n	80011f4 <color_check+0x2a0>
			}
			else
			{
				HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
 80011e8:	2364      	movs	r3, #100	; 0x64
 80011ea:	220c      	movs	r2, #12
 80011ec:	491f      	ldr	r1, [pc, #124]	; (800126c <color_check+0x318>)
 80011ee:	4820      	ldr	r0, [pc, #128]	; (8001270 <color_check+0x31c>)
 80011f0:	f004 fed5 	bl	8005f9e <HAL_UART_Transmit>
			}
		case 'm':
			result = strcmp(color, magenta);
 80011f4:	492a      	ldr	r1, [pc, #168]	; (80012a0 <color_check+0x34c>)
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7fe ffea 	bl	80001d0 <strcmp>
 80011fc:	4603      	mov	r3, r0
 80011fe:	72fb      	strb	r3, [r7, #11]
			if (result == 0)
 8001200:	7afb      	ldrb	r3, [r7, #11]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d104      	bne.n	8001210 <color_check+0x2bc>
			{
			ret_val = VGA_COL_MAGENTA;
 8001206:	23e3      	movs	r3, #227	; 0xe3
 8001208:	60fb      	str	r3, [r7, #12]
			result = 1;
 800120a:	2301      	movs	r3, #1
 800120c:	72fb      	strb	r3, [r7, #11]
 800120e:	e005      	b.n	800121c <color_check+0x2c8>
			}
			else
			{
				HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
 8001210:	2364      	movs	r3, #100	; 0x64
 8001212:	220c      	movs	r2, #12
 8001214:	4915      	ldr	r1, [pc, #84]	; (800126c <color_check+0x318>)
 8001216:	4816      	ldr	r0, [pc, #88]	; (8001270 <color_check+0x31c>)
 8001218:	f004 fec1 	bl	8005f9e <HAL_UART_Transmit>
			}
		case 'b':
			result = strcmp(color, blauw);
 800121c:	4921      	ldr	r1, [pc, #132]	; (80012a4 <color_check+0x350>)
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7fe ffd6 	bl	80001d0 <strcmp>
 8001224:	4603      	mov	r3, r0
 8001226:	72fb      	strb	r3, [r7, #11]
			if (result == 0)
 8001228:	7afb      	ldrb	r3, [r7, #11]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d103      	bne.n	8001236 <color_check+0x2e2>
			{
			ret_val = VGA_COL_BLUE;
 800122e:	2303      	movs	r3, #3
 8001230:	60fb      	str	r3, [r7, #12]
			result = 1;
 8001232:	2301      	movs	r3, #1
 8001234:	72fb      	strb	r3, [r7, #11]
			}
			result = strcmp(color, bruin);
 8001236:	491c      	ldr	r1, [pc, #112]	; (80012a8 <color_check+0x354>)
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7fe ffc9 	bl	80001d0 <strcmp>
 800123e:	4603      	mov	r3, r0
 8001240:	72fb      	strb	r3, [r7, #11]
			if (result == 0)
 8001242:	7afb      	ldrb	r3, [r7, #11]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d104      	bne.n	8001252 <color_check+0x2fe>
			{
			ret_val = VGA_COL_BROWN;
 8001248:	2300      	movs	r3, #0
 800124a:	60fb      	str	r3, [r7, #12]
			result = 1;
 800124c:	2301      	movs	r3, #1
 800124e:	72fb      	strb	r3, [r7, #11]
 8001250:	e005      	b.n	800125e <color_check+0x30a>
			}
			else
			{
				HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
 8001252:	2364      	movs	r3, #100	; 0x64
 8001254:	220c      	movs	r2, #12
 8001256:	4905      	ldr	r1, [pc, #20]	; (800126c <color_check+0x318>)
 8001258:	4805      	ldr	r0, [pc, #20]	; (8001270 <color_check+0x31c>)
 800125a:	f004 fea0 	bl	8005f9e <HAL_UART_Transmit>
			}
		}

	return ret_val;
 800125e:	68fb      	ldr	r3, [r7, #12]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	2000000c 	.word	0x2000000c
 800126c:	080081bc 	.word	0x080081bc
 8001270:	20000df0 	.word	0x20000df0
 8001274:	20000014 	.word	0x20000014
 8001278:	20000028 	.word	0x20000028
 800127c:	20000048 	.word	0x20000048
 8001280:	2000003c 	.word	0x2000003c
 8001284:	2000005c 	.word	0x2000005c
 8001288:	20000000 	.word	0x20000000
 800128c:	2000007c 	.word	0x2000007c
 8001290:	20000070 	.word	0x20000070
 8001294:	20000074 	.word	0x20000074
 8001298:	20000020 	.word	0x20000020
 800129c:	20000034 	.word	0x20000034
 80012a0:	20000054 	.word	0x20000054
 80012a4:	20000004 	.word	0x20000004
 80012a8:	20000068 	.word	0x20000068

080012ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012b2:	f002 fb2d 	bl	8003910 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b6:	f000 f843 	bl	8001340 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ba:	f7ff fc9d 	bl	8000bf8 <MX_GPIO_Init>
  MX_DMA_Init();
 80012be:	f7ff fc7b 	bl	8000bb8 <MX_DMA_Init>
  MX_TIM1_Init();
 80012c2:	f000 fa91 	bl	80017e8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80012c6:	f000 fadf 	bl	8001888 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80012ca:	f000 fbf5 	bl	8001ab8 <MX_USART2_UART_Init>
  Bitmap_init();
 80012ce:	f7ff fbd3 	bl	8000a78 <Bitmap_init>
  /* USER CODE BEGIN 2 */

  UB_VGA_Screen_Init(); // Init VGA-Screen
 80012d2:	f000 fc95 	bl	8001c00 <UB_VGA_Screen_Init>

  UB_VGA_FillScreen(VGA_COL_WHITE);
 80012d6:	20ff      	movs	r0, #255	; 0xff
 80012d8:	f000 fce4 	bl	8001ca4 <UB_VGA_FillScreen>
//	  UB_VGA_DrawBitmap(0 + (i*9), 145, (i+526), VGA_COL_GREEN, 0);
//  }

//  	  UB_VGA_DrawBitmap(100, 100, 'a', 1, 1);

  for(i = 0; i < LINE_BUFLEN; i++)
 80012dc:	2300      	movs	r3, #0
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	e008      	b.n	80012f4 <main+0x48>
	  input.line_rx_buffer[i] = 0;
 80012e2:	4a15      	ldr	r2, [pc, #84]	; (8001338 <main+0x8c>)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4413      	add	r3, r2
 80012e8:	3301      	adds	r3, #1
 80012ea:	2200      	movs	r2, #0
 80012ec:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < LINE_BUFLEN; i++)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	3301      	adds	r3, #1
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012fa:	dbf2      	blt.n	80012e2 <main+0x36>

  // Reset some stuff
  input.byte_buffer_rx[0] = 0;
 80012fc:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <main+0x8c>)
 80012fe:	2200      	movs	r2, #0
 8001300:	701a      	strb	r2, [r3, #0]
  input.char_counter = 0;
 8001302:	4b0d      	ldr	r3, [pc, #52]	; (8001338 <main+0x8c>)
 8001304:	2200      	movs	r2, #0
 8001306:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  input.command_execute_flag = FALSE;
 800130a:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <main+0x8c>)
 800130c:	2200      	movs	r2, #0
 800130e:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c

  // HAl wants a memory location to store the charachter it receives from the UART
  // We will pass it an array, but we will not use it. We declare our own variable in the interupt handler
  // See stm32f4xx_it.c
  HAL_UART_Receive_IT(&huart2, input.byte_buffer_rx, BYTE_BUFLEN);
 8001312:	2201      	movs	r2, #1
 8001314:	4908      	ldr	r1, [pc, #32]	; (8001338 <main+0x8c>)
 8001316:	4809      	ldr	r0, [pc, #36]	; (800133c <main+0x90>)
 8001318:	f004 feda 	bl	80060d0 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  UB_VGA_SetPixel(160,120,VGA_COL_RED);
	  if(input.command_execute_flag == TRUE)
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <main+0x8c>)
 800131e:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 8001322:	2bff      	cmp	r3, #255	; 0xff
 8001324:	d1fa      	bne.n	800131c <main+0x70>
	  {
		  // jump to parser
		  FL_Input();
 8001326:	f7ff f935 	bl	8000594 <FL_Input>
		  logic();
 800132a:	f7ff fcdd 	bl	8000ce8 <logic>
		  // When finished reset the flag
		  input.command_execute_flag = FALSE;
 800132e:	4b02      	ldr	r3, [pc, #8]	; (8001338 <main+0x8c>)
 8001330:	2200      	movs	r2, #0
 8001332:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
	  if(input.command_execute_flag == TRUE)
 8001336:	e7f1      	b.n	800131c <main+0x70>
 8001338:	200008fc 	.word	0x200008fc
 800133c:	20000df0 	.word	0x20000df0

08001340 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b094      	sub	sp, #80	; 0x50
 8001344:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001346:	f107 0320 	add.w	r3, r7, #32
 800134a:	2230      	movs	r2, #48	; 0x30
 800134c:	2100      	movs	r1, #0
 800134e:	4618      	mov	r0, r3
 8001350:	f005 fe9a 	bl	8007088 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001354:	f107 030c 	add.w	r3, r7, #12
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001364:	2300      	movs	r3, #0
 8001366:	60bb      	str	r3, [r7, #8]
 8001368:	4b28      	ldr	r3, [pc, #160]	; (800140c <SystemClock_Config+0xcc>)
 800136a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136c:	4a27      	ldr	r2, [pc, #156]	; (800140c <SystemClock_Config+0xcc>)
 800136e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001372:	6413      	str	r3, [r2, #64]	; 0x40
 8001374:	4b25      	ldr	r3, [pc, #148]	; (800140c <SystemClock_Config+0xcc>)
 8001376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137c:	60bb      	str	r3, [r7, #8]
 800137e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001380:	2300      	movs	r3, #0
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	4b22      	ldr	r3, [pc, #136]	; (8001410 <SystemClock_Config+0xd0>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a21      	ldr	r2, [pc, #132]	; (8001410 <SystemClock_Config+0xd0>)
 800138a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800138e:	6013      	str	r3, [r2, #0]
 8001390:	4b1f      	ldr	r3, [pc, #124]	; (8001410 <SystemClock_Config+0xd0>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001398:	607b      	str	r3, [r7, #4]
 800139a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800139c:	2301      	movs	r3, #1
 800139e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013a6:	2302      	movs	r3, #2
 80013a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013b0:	2304      	movs	r3, #4
 80013b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80013b4:	23a8      	movs	r3, #168	; 0xa8
 80013b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013b8:	2302      	movs	r3, #2
 80013ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013bc:	2304      	movs	r3, #4
 80013be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013c0:	f107 0320 	add.w	r3, r7, #32
 80013c4:	4618      	mov	r0, r3
 80013c6:	f003 f96f 	bl	80046a8 <HAL_RCC_OscConfig>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013d0:	f000 f832 	bl	8001438 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013d4:	230f      	movs	r3, #15
 80013d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013d8:	2302      	movs	r3, #2
 80013da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013ec:	f107 030c 	add.w	r3, r7, #12
 80013f0:	2105      	movs	r1, #5
 80013f2:	4618      	mov	r0, r3
 80013f4:	f003 fbc6 	bl	8004b84 <HAL_RCC_ClockConfig>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80013fe:	f000 f81b 	bl	8001438 <Error_Handler>
  }
}
 8001402:	bf00      	nop
 8001404:	3750      	adds	r7, #80	; 0x50
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40023800 	.word	0x40023800
 8001410:	40007000 	.word	0x40007000

08001414 <__io_putchar>:
	#define USART_PRINTF int fputc(int ch, FILE *f)		//With other compiler printf calls fputc()
#endif /* __GNUC__ */

//Retargets the C library printf function to the USART
USART_PRINTF
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);	//Write character to UART2
 800141c:	1d39      	adds	r1, r7, #4
 800141e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001422:	2201      	movs	r2, #1
 8001424:	4803      	ldr	r0, [pc, #12]	; (8001434 <__io_putchar+0x20>)
 8001426:	f004 fdba 	bl	8005f9e <HAL_UART_Transmit>
	return ch;												//Return the character
 800142a:	687b      	ldr	r3, [r7, #4]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20000df0 	.word	0x20000df0

08001438 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
	...

08001448 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	4b10      	ldr	r3, [pc, #64]	; (8001494 <HAL_MspInit+0x4c>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001456:	4a0f      	ldr	r2, [pc, #60]	; (8001494 <HAL_MspInit+0x4c>)
 8001458:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800145c:	6453      	str	r3, [r2, #68]	; 0x44
 800145e:	4b0d      	ldr	r3, [pc, #52]	; (8001494 <HAL_MspInit+0x4c>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001462:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001466:	607b      	str	r3, [r7, #4]
 8001468:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	603b      	str	r3, [r7, #0]
 800146e:	4b09      	ldr	r3, [pc, #36]	; (8001494 <HAL_MspInit+0x4c>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	4a08      	ldr	r2, [pc, #32]	; (8001494 <HAL_MspInit+0x4c>)
 8001474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001478:	6413      	str	r3, [r2, #64]	; 0x40
 800147a:	4b06      	ldr	r3, [pc, #24]	; (8001494 <HAL_MspInit+0x4c>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001482:	603b      	str	r3, [r7, #0]
 8001484:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	40023800 	.word	0x40023800

08001498 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014aa:	e7fe      	b.n	80014aa <HardFault_Handler+0x4>

080014ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b0:	e7fe      	b.n	80014b0 <MemManage_Handler+0x4>

080014b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014b6:	e7fe      	b.n	80014b6 <BusFault_Handler+0x4>

080014b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014bc:	e7fe      	b.n	80014bc <UsageFault_Handler+0x4>

080014be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014ec:	f002 fa62 	bl	80039b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014f0:	bf00      	nop
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014f8:	4828      	ldr	r0, [pc, #160]	; (800159c <TIM2_IRQHandler+0xa8>)
 80014fa:	f003 fe9f 	bl	800523c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC3); // uncomment HAL_TIM_IRQHandler(&htim2); ^^
 80014fe:	4b27      	ldr	r3, [pc, #156]	; (800159c <TIM2_IRQHandler+0xa8>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f06f 0208 	mvn.w	r2, #8
 8001506:	611a      	str	r2, [r3, #16]

  VGA.hsync_cnt++;
 8001508:	4b25      	ldr	r3, [pc, #148]	; (80015a0 <TIM2_IRQHandler+0xac>)
 800150a:	881b      	ldrh	r3, [r3, #0]
 800150c:	3301      	adds	r3, #1
 800150e:	b29a      	uxth	r2, r3
 8001510:	4b23      	ldr	r3, [pc, #140]	; (80015a0 <TIM2_IRQHandler+0xac>)
 8001512:	801a      	strh	r2, [r3, #0]
  if (VGA.hsync_cnt >= VGA_VSYNC_PERIODE)
 8001514:	4b22      	ldr	r3, [pc, #136]	; (80015a0 <TIM2_IRQHandler+0xac>)
 8001516:	881b      	ldrh	r3, [r3, #0]
 8001518:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 800151c:	d905      	bls.n	800152a <TIM2_IRQHandler+0x36>
  {
    // -----------
    VGA.hsync_cnt = 0;
 800151e:	4b20      	ldr	r3, [pc, #128]	; (80015a0 <TIM2_IRQHandler+0xac>)
 8001520:	2200      	movs	r2, #0
 8001522:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr = (uint32_t)(&VGA_RAM1[0]);
 8001524:	4a1f      	ldr	r2, [pc, #124]	; (80015a4 <TIM2_IRQHandler+0xb0>)
 8001526:	4b1e      	ldr	r3, [pc, #120]	; (80015a0 <TIM2_IRQHandler+0xac>)
 8001528:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  GPIOB->BSRR = (VGA.hsync_cnt < VGA_VSYNC_IMP) ? VGA_VSYNC_Pin << 16u: VGA_VSYNC_Pin;
 800152a:	4b1d      	ldr	r3, [pc, #116]	; (80015a0 <TIM2_IRQHandler+0xac>)
 800152c:	881b      	ldrh	r3, [r3, #0]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d802      	bhi.n	8001538 <TIM2_IRQHandler+0x44>
 8001532:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001536:	e001      	b.n	800153c <TIM2_IRQHandler+0x48>
 8001538:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800153c:	4a1a      	ldr	r2, [pc, #104]	; (80015a8 <TIM2_IRQHandler+0xb4>)
 800153e:	6193      	str	r3, [r2, #24]

  // Test for DMA start
  if((VGA.hsync_cnt >= VGA_VSYNC_BILD_START) && (VGA.hsync_cnt <= VGA_VSYNC_BILD_STOP))
 8001540:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <TIM2_IRQHandler+0xac>)
 8001542:	881b      	ldrh	r3, [r3, #0]
 8001544:	2b23      	cmp	r3, #35	; 0x23
 8001546:	d927      	bls.n	8001598 <TIM2_IRQHandler+0xa4>
 8001548:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <TIM2_IRQHandler+0xac>)
 800154a:	881b      	ldrh	r3, [r3, #0]
 800154c:	f240 2202 	movw	r2, #514	; 0x202
 8001550:	4293      	cmp	r3, r2
 8001552:	d821      	bhi.n	8001598 <TIM2_IRQHandler+0xa4>
  {
    // after FP start => DMA Transfer

    // DMA2 init
	  DMA2_Stream5->CR = VGA.dma2_cr_reg;
 8001554:	4a15      	ldr	r2, [pc, #84]	; (80015ac <TIM2_IRQHandler+0xb8>)
 8001556:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <TIM2_IRQHandler+0xac>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR = VGA.start_adr;
 800155c:	4a13      	ldr	r2, [pc, #76]	; (80015ac <TIM2_IRQHandler+0xb8>)
 800155e:	4b10      	ldr	r3, [pc, #64]	; (80015a0 <TIM2_IRQHandler+0xac>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1 |= TIM_CR1_CEN; // __HAL_TIM_ENABLE(&htim1); // too slow?
 8001564:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <TIM2_IRQHandler+0xbc>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a11      	ldr	r2, [pc, #68]	; (80015b0 <TIM2_IRQHandler+0xbc>)
 800156a:	f043 0301 	orr.w	r3, r3, #1
 800156e:	6013      	str	r3, [r2, #0]
    // DMA2 enable
    __HAL_DMA_ENABLE(&hdma_tim1_up);
 8001570:	4b10      	ldr	r3, [pc, #64]	; (80015b4 <TIM2_IRQHandler+0xc0>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <TIM2_IRQHandler+0xc0>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f042 0201 	orr.w	r2, r2, #1
 800157e:	601a      	str	r2, [r3, #0]
    // Test Adrespointer for high
    if(VGA.hsync_cnt & 0x01)
 8001580:	4b07      	ldr	r3, [pc, #28]	; (80015a0 <TIM2_IRQHandler+0xac>)
 8001582:	881b      	ldrh	r3, [r3, #0]
 8001584:	f003 0301 	and.w	r3, r3, #1
 8001588:	2b00      	cmp	r3, #0
 800158a:	d005      	beq.n	8001598 <TIM2_IRQHandler+0xa4>
      VGA.start_adr += (VGA_DISPLAY_X + 1); // inc after Hsync
 800158c:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <TIM2_IRQHandler+0xac>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f203 1341 	addw	r3, r3, #321	; 0x141
 8001594:	4a02      	ldr	r2, [pc, #8]	; (80015a0 <TIM2_IRQHandler+0xac>)
 8001596:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000d50 	.word	0x20000d50
 80015a0:	20013b20 	.word	0x20013b20
 80015a4:	20000e30 	.word	0x20000e30
 80015a8:	40020400 	.word	0x40020400
 80015ac:	40026488 	.word	0x40026488
 80015b0:	40010000 	.word	0x40010000
 80015b4:	20000d90 	.word	0x20000d90

080015b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	// Store the byte we received on the UART
	char uart_char = USART2->DR;
 80015be:	4b1a      	ldr	r3, [pc, #104]	; (8001628 <USART2_IRQHandler+0x70>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	71fb      	strb	r3, [r7, #7]

	//Ignore the '\n' character
	if(uart_char != LINE_FEED)
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	2b0a      	cmp	r3, #10
 80015c8:	d026      	beq.n	8001618 <USART2_IRQHandler+0x60>
	{
		// Check for CR or a dot
		// There was a small bug in the terminal program.
		// By terminating your message with a dot you can ignore the CR (Enter) character
		if((uart_char == CARRIAGE_RETURN) || (uart_char == '.'))
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	2b0d      	cmp	r3, #13
 80015ce:	d002      	beq.n	80015d6 <USART2_IRQHandler+0x1e>
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	2b2e      	cmp	r3, #46	; 0x2e
 80015d4:	d10e      	bne.n	80015f4 <USART2_IRQHandler+0x3c>
		{
			input.command_execute_flag = TRUE;
 80015d6:	4b15      	ldr	r3, [pc, #84]	; (800162c <USART2_IRQHandler+0x74>)
 80015d8:	22ff      	movs	r2, #255	; 0xff
 80015da:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			// Store the message length for processing
			input.msglen = input.char_counter;
 80015de:	4b13      	ldr	r3, [pc, #76]	; (800162c <USART2_IRQHandler+0x74>)
 80015e0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80015e4:	4a11      	ldr	r2, [pc, #68]	; (800162c <USART2_IRQHandler+0x74>)
 80015e6:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			// Reset the counter for the next line
			input.char_counter = 0;
 80015ea:	4b10      	ldr	r3, [pc, #64]	; (800162c <USART2_IRQHandler+0x74>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80015f2:	e011      	b.n	8001618 <USART2_IRQHandler+0x60>
			//Gently exit interrupt
		}
		else
		{
			input.command_execute_flag = FALSE;
 80015f4:	4b0d      	ldr	r3, [pc, #52]	; (800162c <USART2_IRQHandler+0x74>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			input.line_rx_buffer[input.char_counter] = uart_char;
 80015fc:	4b0b      	ldr	r3, [pc, #44]	; (800162c <USART2_IRQHandler+0x74>)
 80015fe:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001602:	4a0a      	ldr	r2, [pc, #40]	; (800162c <USART2_IRQHandler+0x74>)
 8001604:	4413      	add	r3, r2
 8001606:	79fa      	ldrb	r2, [r7, #7]
 8001608:	705a      	strb	r2, [r3, #1]
			input.char_counter++;
 800160a:	4b08      	ldr	r3, [pc, #32]	; (800162c <USART2_IRQHandler+0x74>)
 800160c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001610:	3301      	adds	r3, #1
 8001612:	4a06      	ldr	r2, [pc, #24]	; (800162c <USART2_IRQHandler+0x74>)
 8001614:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
		}
	}

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001618:	4805      	ldr	r0, [pc, #20]	; (8001630 <USART2_IRQHandler+0x78>)
 800161a:	f004 fdaf 	bl	800617c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40004400 	.word	0x40004400
 800162c:	200008fc 	.word	0x200008fc
 8001630:	20000df0 	.word	0x20000df0

08001634 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

    // Timer1 stop
    __HAL_TIM_DISABLE(&htim1);
 8001638:	4b10      	ldr	r3, [pc, #64]	; (800167c <DMA2_Stream5_IRQHandler+0x48>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	6a1a      	ldr	r2, [r3, #32]
 800163e:	f241 1311 	movw	r3, #4369	; 0x1111
 8001642:	4013      	ands	r3, r2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d10f      	bne.n	8001668 <DMA2_Stream5_IRQHandler+0x34>
 8001648:	4b0c      	ldr	r3, [pc, #48]	; (800167c <DMA2_Stream5_IRQHandler+0x48>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6a1a      	ldr	r2, [r3, #32]
 800164e:	f240 4344 	movw	r3, #1092	; 0x444
 8001652:	4013      	ands	r3, r2
 8001654:	2b00      	cmp	r3, #0
 8001656:	d107      	bne.n	8001668 <DMA2_Stream5_IRQHandler+0x34>
 8001658:	4b08      	ldr	r3, [pc, #32]	; (800167c <DMA2_Stream5_IRQHandler+0x48>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	4b07      	ldr	r3, [pc, #28]	; (800167c <DMA2_Stream5_IRQHandler+0x48>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f022 0201 	bic.w	r2, r2, #1
 8001666:	601a      	str	r2, [r3, #0]
    // DMA2 disable
    // __HAL_DMA_DISABLE(&hdma_tim1_up); // not needed?
    // switch on black
    GPIOE->BSRR = VGA_GPIO_HINIBBLE << 16u;
 8001668:	4b05      	ldr	r3, [pc, #20]	; (8001680 <DMA2_Stream5_IRQHandler+0x4c>)
 800166a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800166e:	619a      	str	r2, [r3, #24]

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8001670:	4804      	ldr	r0, [pc, #16]	; (8001684 <DMA2_Stream5_IRQHandler+0x50>)
 8001672:	f002 fbf9 	bl	8003e68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000d10 	.word	0x20000d10
 8001680:	40021000 	.word	0x40021000
 8001684:	20000d90 	.word	0x20000d90

08001688 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]
 8001698:	e00a      	b.n	80016b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800169a:	f3af 8000 	nop.w
 800169e:	4601      	mov	r1, r0
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	1c5a      	adds	r2, r3, #1
 80016a4:	60ba      	str	r2, [r7, #8]
 80016a6:	b2ca      	uxtb	r2, r1
 80016a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	3301      	adds	r3, #1
 80016ae:	617b      	str	r3, [r7, #20]
 80016b0:	697a      	ldr	r2, [r7, #20]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	dbf0      	blt.n	800169a <_read+0x12>
	}

return len;
 80016b8:	687b      	ldr	r3, [r7, #4]
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3718      	adds	r7, #24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b086      	sub	sp, #24
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	60f8      	str	r0, [r7, #12]
 80016ca:	60b9      	str	r1, [r7, #8]
 80016cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ce:	2300      	movs	r3, #0
 80016d0:	617b      	str	r3, [r7, #20]
 80016d2:	e009      	b.n	80016e8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	1c5a      	adds	r2, r3, #1
 80016d8:	60ba      	str	r2, [r7, #8]
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff fe99 	bl	8001414 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	3301      	adds	r3, #1
 80016e6:	617b      	str	r3, [r7, #20]
 80016e8:	697a      	ldr	r2, [r7, #20]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	dbf1      	blt.n	80016d4 <_write+0x12>
	}
	return len;
 80016f0:	687b      	ldr	r3, [r7, #4]
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3718      	adds	r7, #24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <_close>:

int _close(int file)
{
 80016fa:	b480      	push	{r7}
 80016fc:	b083      	sub	sp, #12
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
	return -1;
 8001702:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001706:	4618      	mov	r0, r3
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001712:	b480      	push	{r7}
 8001714:	b083      	sub	sp, #12
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
 800171a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001722:	605a      	str	r2, [r3, #4]
	return 0;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <_isatty>:

int _isatty(int file)
{
 8001732:	b480      	push	{r7}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
	return 1;
 800173a:	2301      	movs	r3, #1
}
 800173c:	4618      	mov	r0, r3
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
	return 0;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3714      	adds	r7, #20
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
	...

08001764 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800176c:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <_sbrk+0x50>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d102      	bne.n	800177a <_sbrk+0x16>
		heap_end = &end;
 8001774:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <_sbrk+0x50>)
 8001776:	4a10      	ldr	r2, [pc, #64]	; (80017b8 <_sbrk+0x54>)
 8001778:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800177a:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <_sbrk+0x50>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <_sbrk+0x50>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4413      	add	r3, r2
 8001788:	466a      	mov	r2, sp
 800178a:	4293      	cmp	r3, r2
 800178c:	d907      	bls.n	800179e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800178e:	f005 fc51 	bl	8007034 <__errno>
 8001792:	4603      	mov	r3, r0
 8001794:	220c      	movs	r2, #12
 8001796:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001798:	f04f 33ff 	mov.w	r3, #4294967295
 800179c:	e006      	b.n	80017ac <_sbrk+0x48>
	}

	heap_end += incr;
 800179e:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <_sbrk+0x50>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4413      	add	r3, r2
 80017a6:	4a03      	ldr	r2, [pc, #12]	; (80017b4 <_sbrk+0x50>)
 80017a8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80017aa:	68fb      	ldr	r3, [r7, #12]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20000d0c 	.word	0x20000d0c
 80017b8:	20013b40 	.word	0x20013b40

080017bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017c0:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <SystemInit+0x28>)
 80017c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017c6:	4a07      	ldr	r2, [pc, #28]	; (80017e4 <SystemInit+0x28>)
 80017c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017d0:	4b04      	ldr	r3, [pc, #16]	; (80017e4 <SystemInit+0x28>)
 80017d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017d6:	609a      	str	r2, [r3, #8]
#endif
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim1_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ee:	f107 0308 	add.w	r3, r7, #8
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	609a      	str	r2, [r3, #8]
 80017fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017fc:	463b      	mov	r3, r7
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8001804:	4b1e      	ldr	r3, [pc, #120]	; (8001880 <MX_TIM1_Init+0x98>)
 8001806:	4a1f      	ldr	r2, [pc, #124]	; (8001884 <MX_TIM1_Init+0x9c>)
 8001808:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = VGA_TIM1_PRESCALE;
 800180a:	4b1d      	ldr	r3, [pc, #116]	; (8001880 <MX_TIM1_Init+0x98>)
 800180c:	2200      	movs	r2, #0
 800180e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001810:	4b1b      	ldr	r3, [pc, #108]	; (8001880 <MX_TIM1_Init+0x98>)
 8001812:	2200      	movs	r2, #0
 8001814:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = VGA_TIM1_PERIODE;
 8001816:	4b1a      	ldr	r3, [pc, #104]	; (8001880 <MX_TIM1_Init+0x98>)
 8001818:	220b      	movs	r2, #11
 800181a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800181c:	4b18      	ldr	r3, [pc, #96]	; (8001880 <MX_TIM1_Init+0x98>)
 800181e:	2200      	movs	r2, #0
 8001820:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001822:	4b17      	ldr	r3, [pc, #92]	; (8001880 <MX_TIM1_Init+0x98>)
 8001824:	2200      	movs	r2, #0
 8001826:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001828:	4b15      	ldr	r3, [pc, #84]	; (8001880 <MX_TIM1_Init+0x98>)
 800182a:	2200      	movs	r2, #0
 800182c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800182e:	4814      	ldr	r0, [pc, #80]	; (8001880 <MX_TIM1_Init+0x98>)
 8001830:	f003 fbc8 	bl	8004fc4 <HAL_TIM_Base_Init>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 800183a:	f7ff fdfd 	bl	8001438 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800183e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001842:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001844:	f107 0308 	add.w	r3, r7, #8
 8001848:	4619      	mov	r1, r3
 800184a:	480d      	ldr	r0, [pc, #52]	; (8001880 <MX_TIM1_Init+0x98>)
 800184c:	f003 fec4 	bl	80055d8 <HAL_TIM_ConfigClockSource>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8001856:	f7ff fdef 	bl	8001438 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800185a:	2300      	movs	r3, #0
 800185c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800185e:	2300      	movs	r3, #0
 8001860:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001862:	463b      	mov	r3, r7
 8001864:	4619      	mov	r1, r3
 8001866:	4806      	ldr	r0, [pc, #24]	; (8001880 <MX_TIM1_Init+0x98>)
 8001868:	f004 fabc 	bl	8005de4 <HAL_TIMEx_MasterConfigSynchronization>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8001872:	f7ff fde1 	bl	8001438 <Error_Handler>
  }

}
 8001876:	bf00      	nop
 8001878:	3718      	adds	r7, #24
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20000d10 	.word	0x20000d10
 8001884:	40010000 	.word	0x40010000

08001888 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08a      	sub	sp, #40	; 0x28
 800188c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800188e:	f107 0320 	add.w	r3, r7, #32
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001898:	1d3b      	adds	r3, r7, #4
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	605a      	str	r2, [r3, #4]
 80018a0:	609a      	str	r2, [r3, #8]
 80018a2:	60da      	str	r2, [r3, #12]
 80018a4:	611a      	str	r2, [r3, #16]
 80018a6:	615a      	str	r2, [r3, #20]
 80018a8:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 80018aa:	4b2a      	ldr	r3, [pc, #168]	; (8001954 <MX_TIM2_Init+0xcc>)
 80018ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 80018b2:	4b28      	ldr	r3, [pc, #160]	; (8001954 <MX_TIM2_Init+0xcc>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018b8:	4b26      	ldr	r3, [pc, #152]	; (8001954 <MX_TIM2_Init+0xcc>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = VGA_TIM2_HSYNC_PERIODE;
 80018be:	4b25      	ldr	r3, [pc, #148]	; (8001954 <MX_TIM2_Init+0xcc>)
 80018c0:	f640 226b 	movw	r2, #2667	; 0xa6b
 80018c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018c6:	4b23      	ldr	r3, [pc, #140]	; (8001954 <MX_TIM2_Init+0xcc>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018cc:	4b21      	ldr	r3, [pc, #132]	; (8001954 <MX_TIM2_Init+0xcc>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80018d2:	4820      	ldr	r0, [pc, #128]	; (8001954 <MX_TIM2_Init+0xcc>)
 80018d4:	f003 fbc5 	bl	8005062 <HAL_TIM_PWM_Init>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80018de:	f7ff fdab 	bl	8001438 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018e2:	2300      	movs	r3, #0
 80018e4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018e6:	2300      	movs	r3, #0
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018ea:	f107 0320 	add.w	r3, r7, #32
 80018ee:	4619      	mov	r1, r3
 80018f0:	4818      	ldr	r0, [pc, #96]	; (8001954 <MX_TIM2_Init+0xcc>)
 80018f2:	f004 fa77 	bl	8005de4 <HAL_TIMEx_MasterConfigSynchronization>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80018fc:	f7ff fd9c 	bl	8001438 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001900:	2360      	movs	r3, #96	; 0x60
 8001902:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = VGA_TIM2_HTRIGGER_START - VGA_TIM2_DMA_DELAY;
 8001904:	f240 13bb 	movw	r3, #443	; 0x1bb
 8001908:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800190a:	2302      	movs	r3, #2
 800190c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800190e:	2300      	movs	r3, #0
 8001910:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001912:	1d3b      	adds	r3, r7, #4
 8001914:	2208      	movs	r2, #8
 8001916:	4619      	mov	r1, r3
 8001918:	480e      	ldr	r0, [pc, #56]	; (8001954 <MX_TIM2_Init+0xcc>)
 800191a:	f003 fd97 	bl	800544c <HAL_TIM_PWM_ConfigChannel>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001924:	f7ff fd88 	bl	8001438 <Error_Handler>
  }
  sConfigOC.Pulse = VGA_TIM2_HSYNC_IMP;
 8001928:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800192c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800192e:	1d3b      	adds	r3, r7, #4
 8001930:	220c      	movs	r2, #12
 8001932:	4619      	mov	r1, r3
 8001934:	4807      	ldr	r0, [pc, #28]	; (8001954 <MX_TIM2_Init+0xcc>)
 8001936:	f003 fd89 	bl	800544c <HAL_TIM_PWM_ConfigChannel>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8001940:	f7ff fd7a 	bl	8001438 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8001944:	4803      	ldr	r0, [pc, #12]	; (8001954 <MX_TIM2_Init+0xcc>)
 8001946:	f000 f87f 	bl	8001a48 <HAL_TIM_MspPostInit>

}
 800194a:	bf00      	nop
 800194c:	3728      	adds	r7, #40	; 0x28
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000d50 	.word	0x20000d50

08001958 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a21      	ldr	r2, [pc, #132]	; (80019ec <HAL_TIM_Base_MspInit+0x94>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d13c      	bne.n	80019e4 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	4b20      	ldr	r3, [pc, #128]	; (80019f0 <HAL_TIM_Base_MspInit+0x98>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001972:	4a1f      	ldr	r2, [pc, #124]	; (80019f0 <HAL_TIM_Base_MspInit+0x98>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	6453      	str	r3, [r2, #68]	; 0x44
 800197a:	4b1d      	ldr	r3, [pc, #116]	; (80019f0 <HAL_TIM_Base_MspInit+0x98>)
 800197c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 8001986:	4b1b      	ldr	r3, [pc, #108]	; (80019f4 <HAL_TIM_Base_MspInit+0x9c>)
 8001988:	4a1b      	ldr	r2, [pc, #108]	; (80019f8 <HAL_TIM_Base_MspInit+0xa0>)
 800198a:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 800198c:	4b19      	ldr	r3, [pc, #100]	; (80019f4 <HAL_TIM_Base_MspInit+0x9c>)
 800198e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001992:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001994:	4b17      	ldr	r3, [pc, #92]	; (80019f4 <HAL_TIM_Base_MspInit+0x9c>)
 8001996:	2240      	movs	r2, #64	; 0x40
 8001998:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800199a:	4b16      	ldr	r3, [pc, #88]	; (80019f4 <HAL_TIM_Base_MspInit+0x9c>)
 800199c:	2200      	movs	r2, #0
 800199e:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 80019a0:	4b14      	ldr	r3, [pc, #80]	; (80019f4 <HAL_TIM_Base_MspInit+0x9c>)
 80019a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019a6:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019a8:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <HAL_TIM_Base_MspInit+0x9c>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019ae:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <HAL_TIM_Base_MspInit+0x9c>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 80019b4:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <HAL_TIM_Base_MspInit+0x9c>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80019ba:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <HAL_TIM_Base_MspInit+0x9c>)
 80019bc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80019c0:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019c2:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <HAL_TIM_Base_MspInit+0x9c>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 80019c8:	480a      	ldr	r0, [pc, #40]	; (80019f4 <HAL_TIM_Base_MspInit+0x9c>)
 80019ca:	f002 f925 	bl	8003c18 <HAL_DMA_Init>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <HAL_TIM_Base_MspInit+0x80>
    {
      Error_Handler();
 80019d4:	f7ff fd30 	bl	8001438 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4a06      	ldr	r2, [pc, #24]	; (80019f4 <HAL_TIM_Base_MspInit+0x9c>)
 80019dc:	621a      	str	r2, [r3, #32]
 80019de:	4a05      	ldr	r2, [pc, #20]	; (80019f4 <HAL_TIM_Base_MspInit+0x9c>)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80019e4:	bf00      	nop
 80019e6:	3710      	adds	r7, #16
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40010000 	.word	0x40010000
 80019f0:	40023800 	.word	0x40023800
 80019f4:	20000d90 	.word	0x20000d90
 80019f8:	40026488 	.word	0x40026488

080019fc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a0c:	d115      	bne.n	8001a3a <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <HAL_TIM_PWM_MspInit+0x48>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	4a0b      	ldr	r2, [pc, #44]	; (8001a44 <HAL_TIM_PWM_MspInit+0x48>)
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a1e:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <HAL_TIM_PWM_MspInit+0x48>)
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	201c      	movs	r0, #28
 8001a30:	f002 f8bb 	bl	8003baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a34:	201c      	movs	r0, #28
 8001a36:	f002 f8d4 	bl	8003be2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001a3a:	bf00      	nop
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40023800 	.word	0x40023800

08001a48 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b088      	sub	sp, #32
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a50:	f107 030c 	add.w	r3, r7, #12
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a68:	d11e      	bne.n	8001aa8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60bb      	str	r3, [r7, #8]
 8001a6e:	4b10      	ldr	r3, [pc, #64]	; (8001ab0 <HAL_TIM_MspPostInit+0x68>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	4a0f      	ldr	r2, [pc, #60]	; (8001ab0 <HAL_TIM_MspPostInit+0x68>)
 8001a74:	f043 0302 	orr.w	r3, r3, #2
 8001a78:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7a:	4b0d      	ldr	r3, [pc, #52]	; (8001ab0 <HAL_TIM_MspPostInit+0x68>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	60bb      	str	r3, [r7, #8]
 8001a84:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = VGA_HSYNC_Pin;
 8001a86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a8a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a94:	2303      	movs	r3, #3
 8001a96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VGA_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8001a9c:	f107 030c 	add.w	r3, r7, #12
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4804      	ldr	r0, [pc, #16]	; (8001ab4 <HAL_TIM_MspPostInit+0x6c>)
 8001aa4:	f002 fc4a 	bl	800433c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001aa8:	bf00      	nop
 8001aaa:	3720      	adds	r7, #32
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40020400 	.word	0x40020400

08001ab8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001abc:	4b11      	ldr	r3, [pc, #68]	; (8001b04 <MX_USART2_UART_Init+0x4c>)
 8001abe:	4a12      	ldr	r2, [pc, #72]	; (8001b08 <MX_USART2_UART_Init+0x50>)
 8001ac0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ac2:	4b10      	ldr	r3, [pc, #64]	; (8001b04 <MX_USART2_UART_Init+0x4c>)
 8001ac4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ac8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001aca:	4b0e      	ldr	r3, [pc, #56]	; (8001b04 <MX_USART2_UART_Init+0x4c>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ad0:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <MX_USART2_UART_Init+0x4c>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ad6:	4b0b      	ldr	r3, [pc, #44]	; (8001b04 <MX_USART2_UART_Init+0x4c>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001adc:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <MX_USART2_UART_Init+0x4c>)
 8001ade:	220c      	movs	r2, #12
 8001ae0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ae2:	4b08      	ldr	r3, [pc, #32]	; (8001b04 <MX_USART2_UART_Init+0x4c>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ae8:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <MX_USART2_UART_Init+0x4c>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001aee:	4805      	ldr	r0, [pc, #20]	; (8001b04 <MX_USART2_UART_Init+0x4c>)
 8001af0:	f004 fa08 	bl	8005f04 <HAL_UART_Init>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001afa:	f7ff fc9d 	bl	8001438 <Error_Handler>
  }

}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	20000df0 	.word	0x20000df0
 8001b08:	40004400 	.word	0x40004400

08001b0c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08a      	sub	sp, #40	; 0x28
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b14:	f107 0314 	add.w	r3, r7, #20
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	60da      	str	r2, [r3, #12]
 8001b22:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a1d      	ldr	r2, [pc, #116]	; (8001ba0 <HAL_UART_MspInit+0x94>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d133      	bne.n	8001b96 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	613b      	str	r3, [r7, #16]
 8001b32:	4b1c      	ldr	r3, [pc, #112]	; (8001ba4 <HAL_UART_MspInit+0x98>)
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	4a1b      	ldr	r2, [pc, #108]	; (8001ba4 <HAL_UART_MspInit+0x98>)
 8001b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b3e:	4b19      	ldr	r3, [pc, #100]	; (8001ba4 <HAL_UART_MspInit+0x98>)
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b46:	613b      	str	r3, [r7, #16]
 8001b48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	4b15      	ldr	r3, [pc, #84]	; (8001ba4 <HAL_UART_MspInit+0x98>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	4a14      	ldr	r2, [pc, #80]	; (8001ba4 <HAL_UART_MspInit+0x98>)
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5a:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <HAL_UART_MspInit+0x98>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b66:	230c      	movs	r3, #12
 8001b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b72:	2303      	movs	r3, #3
 8001b74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b76:	2307      	movs	r3, #7
 8001b78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b7a:	f107 0314 	add.w	r3, r7, #20
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4809      	ldr	r0, [pc, #36]	; (8001ba8 <HAL_UART_MspInit+0x9c>)
 8001b82:	f002 fbdb 	bl	800433c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b86:	2200      	movs	r2, #0
 8001b88:	2100      	movs	r1, #0
 8001b8a:	2026      	movs	r0, #38	; 0x26
 8001b8c:	f002 f80d 	bl	8003baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b90:	2026      	movs	r0, #38	; 0x26
 8001b92:	f002 f826 	bl	8003be2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001b96:	bf00      	nop
 8001b98:	3728      	adds	r7, #40	; 0x28
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40004400 	.word	0x40004400
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	40020000 	.word	0x40020000

08001bac <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack     /* set stack pointer */
 8001bac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001be4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001bb0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001bb2:	e003      	b.n	8001bbc <LoopCopyDataInit>

08001bb4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001bb4:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001bb6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001bb8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001bba:	3104      	adds	r1, #4

08001bbc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001bbc:	480b      	ldr	r0, [pc, #44]	; (8001bec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001bbe:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001bc0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001bc2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001bc4:	d3f6      	bcc.n	8001bb4 <CopyDataInit>
  ldr  r2, =_sbss
 8001bc6:	4a0b      	ldr	r2, [pc, #44]	; (8001bf4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001bc8:	e002      	b.n	8001bd0 <LoopFillZerobss>

08001bca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001bca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001bcc:	f842 3b04 	str.w	r3, [r2], #4

08001bd0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001bd0:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001bd2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001bd4:	d3f9      	bcc.n	8001bca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bd6:	f7ff fdf1 	bl	80017bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bda:	f005 fa31 	bl	8007040 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bde:	f7ff fb65 	bl	80012ac <main>
  bx  lr    
 8001be2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001be4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001be8:	0800d198 	.word	0x0800d198
  ldr  r0, =_sdata
 8001bec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001bf0:	20000118 	.word	0x20000118
  ldr  r2, =_sbss
 8001bf4:	20000118 	.word	0x20000118
  ldr  r3, = _ebss
 8001bf8:	20013b40 	.word	0x20013b40

08001bfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bfc:	e7fe      	b.n	8001bfc <ADC_IRQHandler>
	...

08001c00 <UB_VGA_Screen_Init>:
// @brief The initialisation of the VGA driver
// @details The function initialises the timer registers of timer 1 & 2.
//			It also initialises the DMA register.
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  VGA.hsync_cnt = 0;
 8001c04:	4b1f      	ldr	r3, [pc, #124]	; (8001c84 <UB_VGA_Screen_Init+0x84>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	801a      	strh	r2, [r3, #0]
  VGA.start_adr = 0;
 8001c0a:	4b1e      	ldr	r3, [pc, #120]	; (8001c84 <UB_VGA_Screen_Init+0x84>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg = 0;
 8001c10:	4b1c      	ldr	r3, [pc, #112]	; (8001c84 <UB_VGA_Screen_Init+0x84>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	609a      	str	r2, [r3, #8]

  GPIOB->BSRR = VGA_VSYNC_Pin;
 8001c16:	4b1c      	ldr	r3, [pc, #112]	; (8001c88 <UB_VGA_Screen_Init+0x88>)
 8001c18:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c1c:	619a      	str	r2, [r3, #24]

  // TIM2
  HAL_TIM_Base_Start(&htim2);
 8001c1e:	481b      	ldr	r0, [pc, #108]	; (8001c8c <UB_VGA_Screen_Init+0x8c>)
 8001c20:	f003 f9fb 	bl	800501a <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001c24:	210c      	movs	r1, #12
 8001c26:	4819      	ldr	r0, [pc, #100]	; (8001c8c <UB_VGA_Screen_Init+0x8c>)
 8001c28:	f003 fa46 	bl	80050b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 8001c2c:	2108      	movs	r1, #8
 8001c2e:	4817      	ldr	r0, [pc, #92]	; (8001c8c <UB_VGA_Screen_Init+0x8c>)
 8001c30:	f003 fa80 	bl	8005134 <HAL_TIM_PWM_Start_IT>

  // TIM1
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8001c34:	4b16      	ldr	r3, [pc, #88]	; (8001c90 <UB_VGA_Screen_Init+0x90>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	68da      	ldr	r2, [r3, #12]
 8001c3a:	4b15      	ldr	r3, [pc, #84]	; (8001c90 <UB_VGA_Screen_Init+0x90>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c42:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 8001c44:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <UB_VGA_Screen_Init+0x90>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <UB_VGA_Screen_Init+0x90>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f042 0201 	orr.w	r2, r2, #1
 8001c52:	601a      	str	r2, [r3, #0]
  HAL_DMA_Start_IT(&hdma_tim1_up, (uint32_t)&VGA_RAM1[0], VGA_GPIOE_ODR_ADDRESS, VGA_DISPLAY_X + 1);
 8001c54:	490f      	ldr	r1, [pc, #60]	; (8001c94 <UB_VGA_Screen_Init+0x94>)
 8001c56:	f240 1341 	movw	r3, #321	; 0x141
 8001c5a:	4a0f      	ldr	r2, [pc, #60]	; (8001c98 <UB_VGA_Screen_Init+0x98>)
 8001c5c:	480f      	ldr	r0, [pc, #60]	; (8001c9c <UB_VGA_Screen_Init+0x9c>)
 8001c5e:	f002 f889 	bl	8003d74 <HAL_DMA_Start_IT>

  HAL_DMA_Init(&hdma_tim1_up);
 8001c62:	480e      	ldr	r0, [pc, #56]	; (8001c9c <UB_VGA_Screen_Init+0x9c>)
 8001c64:	f001 ffd8 	bl	8003c18 <HAL_DMA_Init>
  __HAL_DMA_ENABLE_IT(&hdma_tim1_up, DMA_IT_TC);
 8001c68:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <UB_VGA_Screen_Init+0x9c>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <UB_VGA_Screen_Init+0x9c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f042 0210 	orr.w	r2, r2, #16
 8001c76:	601a      	str	r2, [r3, #0]

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg = DMA2_Stream5->CR;
 8001c78:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <UB_VGA_Screen_Init+0xa0>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a01      	ldr	r2, [pc, #4]	; (8001c84 <UB_VGA_Screen_Init+0x84>)
 8001c7e:	6093      	str	r3, [r2, #8]
}
 8001c80:	bf00      	nop
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20013b20 	.word	0x20013b20
 8001c88:	40020400 	.word	0x40020400
 8001c8c:	20000d50 	.word	0x20000d50
 8001c90:	20000d10 	.word	0x20000d10
 8001c94:	20000e30 	.word	0x20000e30
 8001c98:	40021015 	.word	0x40021015
 8001c9c:	20000d90 	.word	0x20000d90
 8001ca0:	40026488 	.word	0x40026488

08001ca4 <UB_VGA_FillScreen>:
// @details This function writes for all pixels a single color to the ram.
//
// @param[in] color The 8-bit color-code to display
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 8001cae:	2300      	movs	r3, #0
 8001cb0:	81bb      	strh	r3, [r7, #12]
 8001cb2:	e012      	b.n	8001cda <UB_VGA_FillScreen+0x36>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	81fb      	strh	r3, [r7, #14]
 8001cb8:	e008      	b.n	8001ccc <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp, yp, color);
 8001cba:	79fa      	ldrb	r2, [r7, #7]
 8001cbc:	89b9      	ldrh	r1, [r7, #12]
 8001cbe:	89fb      	ldrh	r3, [r7, #14]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f000 f813 	bl	8001cec <UB_VGA_SetPixel>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 8001cc6:	89fb      	ldrh	r3, [r7, #14]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	81fb      	strh	r3, [r7, #14]
 8001ccc:	89fb      	ldrh	r3, [r7, #14]
 8001cce:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001cd2:	d3f2      	bcc.n	8001cba <UB_VGA_FillScreen+0x16>
  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 8001cd4:	89bb      	ldrh	r3, [r7, #12]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	81bb      	strh	r3, [r7, #12]
 8001cda:	89bb      	ldrh	r3, [r7, #12]
 8001cdc:	2bef      	cmp	r3, #239	; 0xef
 8001cde:	d9e9      	bls.n	8001cb4 <UB_VGA_FillScreen+0x10>
    }
  }
}
 8001ce0:	bf00      	nop
 8001ce2:	bf00      	nop
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
	...

08001cec <UB_VGA_SetPixel>:
// @param[in] xp The X-coordinate of the pixel
// @param[in] yp The Y-coordinate of the pixel
// @param[in] color The 8-bit color-code to display
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	80fb      	strh	r3, [r7, #6]
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	80bb      	strh	r3, [r7, #4]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	70fb      	strb	r3, [r7, #3]
  if(xp >= VGA_DISPLAY_X)
 8001cfe:	88fb      	ldrh	r3, [r7, #6]
 8001d00:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001d04:	d301      	bcc.n	8001d0a <UB_VGA_SetPixel+0x1e>
    xp = 0;
 8001d06:	2300      	movs	r3, #0
 8001d08:	80fb      	strh	r3, [r7, #6]
  if(yp >= VGA_DISPLAY_Y)
 8001d0a:	88bb      	ldrh	r3, [r7, #4]
 8001d0c:	2bef      	cmp	r3, #239	; 0xef
 8001d0e:	d901      	bls.n	8001d14 <UB_VGA_SetPixel+0x28>
    yp = 0;
 8001d10:	2300      	movs	r3, #0
 8001d12:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp * (VGA_DISPLAY_X + 1)) + xp] = color;
 8001d14:	88ba      	ldrh	r2, [r7, #4]
 8001d16:	4613      	mov	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	4413      	add	r3, r2
 8001d1c:	019b      	lsls	r3, r3, #6
 8001d1e:	441a      	add	r2, r3
 8001d20:	88fb      	ldrh	r3, [r7, #6]
 8001d22:	4413      	add	r3, r2
 8001d24:	4904      	ldr	r1, [pc, #16]	; (8001d38 <UB_VGA_SetPixel+0x4c>)
 8001d26:	78fa      	ldrb	r2, [r7, #3]
 8001d28:	54ca      	strb	r2, [r1, r3]
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	20000e30 	.word	0x20000e30

08001d3c <UB_VGA_SetLine>:
// @param[in] y2 The Y-coordinate of point 2 of the line
// @param[in] color The 8-bit color-code to display
// @param[in] width The width of the line in pixels
//--------------------------------------------------------------
void UB_VGA_SetLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t color, uint16_t width)
{
 8001d3c:	b590      	push	{r4, r7, lr}
 8001d3e:	b089      	sub	sp, #36	; 0x24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4604      	mov	r4, r0
 8001d44:	4608      	mov	r0, r1
 8001d46:	4611      	mov	r1, r2
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4623      	mov	r3, r4
 8001d4c:	80fb      	strh	r3, [r7, #6]
 8001d4e:	4603      	mov	r3, r0
 8001d50:	80bb      	strh	r3, [r7, #4]
 8001d52:	460b      	mov	r3, r1
 8001d54:	807b      	strh	r3, [r7, #2]
 8001d56:	4613      	mov	r3, r2
 8001d58:	803b      	strh	r3, [r7, #0]
  uint16_t j; 								//Count amount of width pixels
  uint8_t neg;
  uint16_t amPerSide;
  float slope;

  dx=x2-x1;      							//the horizontal distance of the line
 8001d5a:	887a      	ldrh	r2, [r7, #2]
 8001d5c:	88fb      	ldrh	r3, [r7, #6]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	837b      	strh	r3, [r7, #26]
  dy=y2-y1;      							//the vertical distance of the line
 8001d64:	883a      	ldrh	r2, [r7, #0]
 8001d66:	88bb      	ldrh	r3, [r7, #4]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	833b      	strh	r3, [r7, #24]
  dxabs=abs(dx);
 8001d6e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	bfb8      	it	lt
 8001d76:	425b      	neglt	r3, r3
 8001d78:	82fb      	strh	r3, [r7, #22]
  dyabs=abs(dy);
 8001d7a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	bfb8      	it	lt
 8001d82:	425b      	neglt	r3, r3
 8001d84:	82bb      	strh	r3, [r7, #20]
  amPerSide = width / 2;
 8001d86:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001d88:	085b      	lsrs	r3, r3, #1
 8001d8a:	827b      	strh	r3, [r7, #18]
  neg = width % 2;
 8001d8c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	747b      	strb	r3, [r7, #17]

  if (dxabs>=dyabs) 						//the line is more horizontal than vertical
 8001d96:	8afa      	ldrh	r2, [r7, #22]
 8001d98:	8abb      	ldrh	r3, [r7, #20]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	f0c0 8096 	bcc.w	8001ecc <UB_VGA_SetLine+0x190>
  {
    slope=(float)dy / (float)dx;
 8001da0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001da4:	ee07 3a90 	vmov	s15, r3
 8001da8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001dac:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001db0:	ee07 3a90 	vmov	s15, r3
 8001db4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001db8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dbc:	edc7 7a03 	vstr	s15, [r7, #12]
    for(i=0;i!=dx;i++)
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	83fb      	strh	r3, [r7, #30]
 8001dc4:	e07b      	b.n	8001ebe <UB_VGA_SetLine+0x182>
    {
      px=i+x1;
 8001dc6:	8bfa      	ldrh	r2, [r7, #30]
 8001dc8:	88fb      	ldrh	r3, [r7, #6]
 8001dca:	4413      	add	r3, r2
 8001dcc:	817b      	strh	r3, [r7, #10]
      py=slope*i+y1;						//Calculate Y-value for the current Y-value
 8001dce:	8bfb      	ldrh	r3, [r7, #30]
 8001dd0:	ee07 3a90 	vmov	s15, r3
 8001dd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dd8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ddc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001de0:	88bb      	ldrh	r3, [r7, #4]
 8001de2:	ee07 3a90 	vmov	s15, r3
 8001de6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001df2:	ee17 3a90 	vmov	r3, s15
 8001df6:	813b      	strh	r3, [r7, #8]
      UB_VGA_SetPixel(px,py,color);
 8001df8:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001dfc:	8939      	ldrh	r1, [r7, #8]
 8001dfe:	897b      	ldrh	r3, [r7, #10]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff ff73 	bl	8001cec <UB_VGA_SetPixel>

      for(j = 0; j <= amPerSide; j++)
 8001e06:	2300      	movs	r3, #0
 8001e08:	83bb      	strh	r3, [r7, #28]
 8001e0a:	e04f      	b.n	8001eac <UB_VGA_SetLine+0x170>
      {
          py = slope * i + y1 + j;			//Calculate extra width-pixels on the positive side
 8001e0c:	8bfb      	ldrh	r3, [r7, #30]
 8001e0e:	ee07 3a90 	vmov	s15, r3
 8001e12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e16:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e1e:	88bb      	ldrh	r3, [r7, #4]
 8001e20:	ee07 3a90 	vmov	s15, r3
 8001e24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e2c:	8bbb      	ldrh	r3, [r7, #28]
 8001e2e:	ee07 3a90 	vmov	s15, r3
 8001e32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e3e:	ee17 3a90 	vmov	r3, s15
 8001e42:	813b      	strh	r3, [r7, #8]
          UB_VGA_SetPixel(px,py,color);
 8001e44:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001e48:	8939      	ldrh	r1, [r7, #8]
 8001e4a:	897b      	ldrh	r3, [r7, #10]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff ff4d 	bl	8001cec <UB_VGA_SetPixel>

          if(!(neg) && (j == amPerSide))
 8001e52:	7c7b      	ldrb	r3, [r7, #17]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d103      	bne.n	8001e60 <UB_VGA_SetLine+0x124>
 8001e58:	8bba      	ldrh	r2, [r7, #28]
 8001e5a:	8a7b      	ldrh	r3, [r7, #18]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d02a      	beq.n	8001eb6 <UB_VGA_SetLine+0x17a>
        	  break;						//Break when positive and last width pixel

          py = slope * i + y1 - j;			//Calculate extra width-pixels on the negative side
 8001e60:	8bfb      	ldrh	r3, [r7, #30]
 8001e62:	ee07 3a90 	vmov	s15, r3
 8001e66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e6a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e72:	88bb      	ldrh	r3, [r7, #4]
 8001e74:	ee07 3a90 	vmov	s15, r3
 8001e78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e80:	8bbb      	ldrh	r3, [r7, #28]
 8001e82:	ee07 3a90 	vmov	s15, r3
 8001e86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e92:	ee17 3a90 	vmov	r3, s15
 8001e96:	813b      	strh	r3, [r7, #8]
          UB_VGA_SetPixel(px,py,color);
 8001e98:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001e9c:	8939      	ldrh	r1, [r7, #8]
 8001e9e:	897b      	ldrh	r3, [r7, #10]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff ff23 	bl	8001cec <UB_VGA_SetPixel>
      for(j = 0; j <= amPerSide; j++)
 8001ea6:	8bbb      	ldrh	r3, [r7, #28]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	83bb      	strh	r3, [r7, #28]
 8001eac:	8bba      	ldrh	r2, [r7, #28]
 8001eae:	8a7b      	ldrh	r3, [r7, #18]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d9ab      	bls.n	8001e0c <UB_VGA_SetLine+0xd0>
 8001eb4:	e000      	b.n	8001eb8 <UB_VGA_SetLine+0x17c>
        	  break;						//Break when positive and last width pixel
 8001eb6:	bf00      	nop
    for(i=0;i!=dx;i++)
 8001eb8:	8bfb      	ldrh	r3, [r7, #30]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	83fb      	strh	r3, [r7, #30]
 8001ebe:	8bfa      	ldrh	r2, [r7, #30]
 8001ec0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	f47f af7e 	bne.w	8001dc6 <UB_VGA_SetLine+0x8a>
          px = slope * i + x1 - j;			//Calculate extra width-pixels on the negative side
    	  UB_VGA_SetPixel(px,py,color);
      }
    }
  }
}
 8001eca:	e094      	b.n	8001ff6 <UB_VGA_SetLine+0x2ba>
    slope=(float)dx / (float)dy;
 8001ecc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001ed0:	ee07 3a90 	vmov	s15, r3
 8001ed4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ed8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001edc:	ee07 3a90 	vmov	s15, r3
 8001ee0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ee4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ee8:	edc7 7a03 	vstr	s15, [r7, #12]
    for(i=0;i!=dy;i++)
 8001eec:	2300      	movs	r3, #0
 8001eee:	83fb      	strh	r3, [r7, #30]
 8001ef0:	e07b      	b.n	8001fea <UB_VGA_SetLine+0x2ae>
      px=slope*i+x1; 						//Calculate X-value for the current Y-value
 8001ef2:	8bfb      	ldrh	r3, [r7, #30]
 8001ef4:	ee07 3a90 	vmov	s15, r3
 8001ef8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001efc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f04:	88fb      	ldrh	r3, [r7, #6]
 8001f06:	ee07 3a90 	vmov	s15, r3
 8001f0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f16:	ee17 3a90 	vmov	r3, s15
 8001f1a:	817b      	strh	r3, [r7, #10]
      py=i+y1;
 8001f1c:	8bfa      	ldrh	r2, [r7, #30]
 8001f1e:	88bb      	ldrh	r3, [r7, #4]
 8001f20:	4413      	add	r3, r2
 8001f22:	813b      	strh	r3, [r7, #8]
      UB_VGA_SetPixel(px,py,color);
 8001f24:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001f28:	8939      	ldrh	r1, [r7, #8]
 8001f2a:	897b      	ldrh	r3, [r7, #10]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff fedd 	bl	8001cec <UB_VGA_SetPixel>
      for(j = 0; j <= amPerSide; j++)
 8001f32:	2300      	movs	r3, #0
 8001f34:	83bb      	strh	r3, [r7, #28]
 8001f36:	e04f      	b.n	8001fd8 <UB_VGA_SetLine+0x29c>
          px = slope * i + x1 + j;			//Calculate extra width-pixels on the positive side
 8001f38:	8bfb      	ldrh	r3, [r7, #30]
 8001f3a:	ee07 3a90 	vmov	s15, r3
 8001f3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f42:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f4a:	88fb      	ldrh	r3, [r7, #6]
 8001f4c:	ee07 3a90 	vmov	s15, r3
 8001f50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f58:	8bbb      	ldrh	r3, [r7, #28]
 8001f5a:	ee07 3a90 	vmov	s15, r3
 8001f5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f6a:	ee17 3a90 	vmov	r3, s15
 8001f6e:	817b      	strh	r3, [r7, #10]
    	  UB_VGA_SetPixel(px,py,color);
 8001f70:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001f74:	8939      	ldrh	r1, [r7, #8]
 8001f76:	897b      	ldrh	r3, [r7, #10]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff feb7 	bl	8001cec <UB_VGA_SetPixel>
    	  if(!(neg) && (j == amPerSide))
 8001f7e:	7c7b      	ldrb	r3, [r7, #17]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d103      	bne.n	8001f8c <UB_VGA_SetLine+0x250>
 8001f84:	8bba      	ldrh	r2, [r7, #28]
 8001f86:	8a7b      	ldrh	r3, [r7, #18]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d02a      	beq.n	8001fe2 <UB_VGA_SetLine+0x2a6>
          px = slope * i + x1 - j;			//Calculate extra width-pixels on the negative side
 8001f8c:	8bfb      	ldrh	r3, [r7, #30]
 8001f8e:	ee07 3a90 	vmov	s15, r3
 8001f92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f96:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f9e:	88fb      	ldrh	r3, [r7, #6]
 8001fa0:	ee07 3a90 	vmov	s15, r3
 8001fa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fa8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fac:	8bbb      	ldrh	r3, [r7, #28]
 8001fae:	ee07 3a90 	vmov	s15, r3
 8001fb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fbe:	ee17 3a90 	vmov	r3, s15
 8001fc2:	817b      	strh	r3, [r7, #10]
    	  UB_VGA_SetPixel(px,py,color);
 8001fc4:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001fc8:	8939      	ldrh	r1, [r7, #8]
 8001fca:	897b      	ldrh	r3, [r7, #10]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff fe8d 	bl	8001cec <UB_VGA_SetPixel>
      for(j = 0; j <= amPerSide; j++)
 8001fd2:	8bbb      	ldrh	r3, [r7, #28]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	83bb      	strh	r3, [r7, #28]
 8001fd8:	8bba      	ldrh	r2, [r7, #28]
 8001fda:	8a7b      	ldrh	r3, [r7, #18]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d9ab      	bls.n	8001f38 <UB_VGA_SetLine+0x1fc>
 8001fe0:	e000      	b.n	8001fe4 <UB_VGA_SetLine+0x2a8>
    		  break;						//Break when positive and last width pixel
 8001fe2:	bf00      	nop
    for(i=0;i!=dy;i++)
 8001fe4:	8bfb      	ldrh	r3, [r7, #30]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	83fb      	strh	r3, [r7, #30]
 8001fea:	8bfa      	ldrh	r2, [r7, #30]
 8001fec:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	f47f af7e 	bne.w	8001ef2 <UB_VGA_SetLine+0x1b6>
}
 8001ff6:	bf00      	nop
 8001ff8:	3724      	adds	r7, #36	; 0x24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd90      	pop	{r4, r7, pc}

08001ffe <UB_VGA_DrawRectangle>:
// @param[in] lineWidth: The width of the line that determines the border of the rectangle
//--------------------------------------------------------------

void UB_VGA_DrawRectangle(uint16_t xp, uint16_t yp, uint8_t width, uint8_t height, uint8_t color, uint8_t filled,
		uint8_t bordercolor, uint8_t lineWidth)
{
 8001ffe:	b590      	push	{r4, r7, lr}
 8002000:	b085      	sub	sp, #20
 8002002:	af00      	add	r7, sp, #0
 8002004:	4604      	mov	r4, r0
 8002006:	4608      	mov	r0, r1
 8002008:	4611      	mov	r1, r2
 800200a:	461a      	mov	r2, r3
 800200c:	4623      	mov	r3, r4
 800200e:	80fb      	strh	r3, [r7, #6]
 8002010:	4603      	mov	r3, r0
 8002012:	80bb      	strh	r3, [r7, #4]
 8002014:	460b      	mov	r3, r1
 8002016:	70fb      	strb	r3, [r7, #3]
 8002018:	4613      	mov	r3, r2
 800201a:	70bb      	strb	r3, [r7, #2]
	uint16_t px;
	uint16_t py;
	uint16_t i;
	uint16_t j;

	if(xp >= VGA_DISPLAY_X)
 800201c:	88fb      	ldrh	r3, [r7, #6]
 800201e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002022:	d301      	bcc.n	8002028 <UB_VGA_DrawRectangle+0x2a>
	  xp = 0;
 8002024:	2300      	movs	r3, #0
 8002026:	80fb      	strh	r3, [r7, #6]
	if(yp >= VGA_DISPLAY_Y)
 8002028:	88bb      	ldrh	r3, [r7, #4]
 800202a:	2bef      	cmp	r3, #239	; 0xef
 800202c:	d901      	bls.n	8002032 <UB_VGA_DrawRectangle+0x34>
	  yp = 0;
 800202e:	2300      	movs	r3, #0
 8002030:	80bb      	strh	r3, [r7, #4]

	/* the vertical part of the rectangle */
	for(j=0; j < lineWidth; j++)
 8002032:	2300      	movs	r3, #0
 8002034:	81bb      	strh	r3, [r7, #12]
 8002036:	e03a      	b.n	80020ae <UB_VGA_DrawRectangle+0xb0>
	{
		for(i=0; i <= height; i++)
 8002038:	2300      	movs	r3, #0
 800203a:	81fb      	strh	r3, [r7, #14]
 800203c:	e011      	b.n	8002062 <UB_VGA_DrawRectangle+0x64>
		{
			py = yp + i;
 800203e:	88ba      	ldrh	r2, [r7, #4]
 8002040:	89fb      	ldrh	r3, [r7, #14]
 8002042:	4413      	add	r3, r2
 8002044:	813b      	strh	r3, [r7, #8]
			px = xp + j;
 8002046:	88fa      	ldrh	r2, [r7, #6]
 8002048:	89bb      	ldrh	r3, [r7, #12]
 800204a:	4413      	add	r3, r2
 800204c:	817b      	strh	r3, [r7, #10]
			UB_VGA_SetPixel(px,py,bordercolor);
 800204e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002052:	8939      	ldrh	r1, [r7, #8]
 8002054:	897b      	ldrh	r3, [r7, #10]
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff fe48 	bl	8001cec <UB_VGA_SetPixel>
		for(i=0; i <= height; i++)
 800205c:	89fb      	ldrh	r3, [r7, #14]
 800205e:	3301      	adds	r3, #1
 8002060:	81fb      	strh	r3, [r7, #14]
 8002062:	78bb      	ldrb	r3, [r7, #2]
 8002064:	b29b      	uxth	r3, r3
 8002066:	89fa      	ldrh	r2, [r7, #14]
 8002068:	429a      	cmp	r2, r3
 800206a:	d9e8      	bls.n	800203e <UB_VGA_DrawRectangle+0x40>
		}
		for(i=0; i <= height; i++)
 800206c:	2300      	movs	r3, #0
 800206e:	81fb      	strh	r3, [r7, #14]
 8002070:	e015      	b.n	800209e <UB_VGA_DrawRectangle+0xa0>
		{
			py = yp + i;
 8002072:	88ba      	ldrh	r2, [r7, #4]
 8002074:	89fb      	ldrh	r3, [r7, #14]
 8002076:	4413      	add	r3, r2
 8002078:	813b      	strh	r3, [r7, #8]
			px = xp + width - j;
 800207a:	78fb      	ldrb	r3, [r7, #3]
 800207c:	b29a      	uxth	r2, r3
 800207e:	88fb      	ldrh	r3, [r7, #6]
 8002080:	4413      	add	r3, r2
 8002082:	b29a      	uxth	r2, r3
 8002084:	89bb      	ldrh	r3, [r7, #12]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	817b      	strh	r3, [r7, #10]
			UB_VGA_SetPixel(px,py,bordercolor);
 800208a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800208e:	8939      	ldrh	r1, [r7, #8]
 8002090:	897b      	ldrh	r3, [r7, #10]
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff fe2a 	bl	8001cec <UB_VGA_SetPixel>
		for(i=0; i <= height; i++)
 8002098:	89fb      	ldrh	r3, [r7, #14]
 800209a:	3301      	adds	r3, #1
 800209c:	81fb      	strh	r3, [r7, #14]
 800209e:	78bb      	ldrb	r3, [r7, #2]
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	89fa      	ldrh	r2, [r7, #14]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d9e4      	bls.n	8002072 <UB_VGA_DrawRectangle+0x74>
	for(j=0; j < lineWidth; j++)
 80020a8:	89bb      	ldrh	r3, [r7, #12]
 80020aa:	3301      	adds	r3, #1
 80020ac:	81bb      	strh	r3, [r7, #12]
 80020ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	89ba      	ldrh	r2, [r7, #12]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d3be      	bcc.n	8002038 <UB_VGA_DrawRectangle+0x3a>
		}
	}

    /* the horizontal part of the rectangle */
	for(j=0; j < lineWidth; j++)
 80020ba:	2300      	movs	r3, #0
 80020bc:	81bb      	strh	r3, [r7, #12]
 80020be:	e048      	b.n	8002152 <UB_VGA_DrawRectangle+0x154>
	{
		for(i=0; i <= width-lineWidth; i++)
 80020c0:	2300      	movs	r3, #0
 80020c2:	81fb      	strh	r3, [r7, #14]
 80020c4:	e016      	b.n	80020f4 <UB_VGA_DrawRectangle+0xf6>
		{
			py = yp + j;
 80020c6:	88ba      	ldrh	r2, [r7, #4]
 80020c8:	89bb      	ldrh	r3, [r7, #12]
 80020ca:	4413      	add	r3, r2
 80020cc:	813b      	strh	r3, [r7, #8]
			px = xp + i + lineWidth;
 80020ce:	88fa      	ldrh	r2, [r7, #6]
 80020d0:	89fb      	ldrh	r3, [r7, #14]
 80020d2:	4413      	add	r3, r2
 80020d4:	b29a      	uxth	r2, r3
 80020d6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80020da:	b29b      	uxth	r3, r3
 80020dc:	4413      	add	r3, r2
 80020de:	817b      	strh	r3, [r7, #10]
			UB_VGA_SetPixel(px,py,bordercolor);
 80020e0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80020e4:	8939      	ldrh	r1, [r7, #8]
 80020e6:	897b      	ldrh	r3, [r7, #10]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff fdff 	bl	8001cec <UB_VGA_SetPixel>
		for(i=0; i <= width-lineWidth; i++)
 80020ee:	89fb      	ldrh	r3, [r7, #14]
 80020f0:	3301      	adds	r3, #1
 80020f2:	81fb      	strh	r3, [r7, #14]
 80020f4:	89fa      	ldrh	r2, [r7, #14]
 80020f6:	78f9      	ldrb	r1, [r7, #3]
 80020f8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80020fc:	1acb      	subs	r3, r1, r3
 80020fe:	429a      	cmp	r2, r3
 8002100:	dde1      	ble.n	80020c6 <UB_VGA_DrawRectangle+0xc8>
		}
		for(i=0; i <= width-lineWidth; i++)
 8002102:	2300      	movs	r3, #0
 8002104:	81fb      	strh	r3, [r7, #14]
 8002106:	e01a      	b.n	800213e <UB_VGA_DrawRectangle+0x140>
		{
			py = yp + height - j;
 8002108:	78bb      	ldrb	r3, [r7, #2]
 800210a:	b29a      	uxth	r2, r3
 800210c:	88bb      	ldrh	r3, [r7, #4]
 800210e:	4413      	add	r3, r2
 8002110:	b29a      	uxth	r2, r3
 8002112:	89bb      	ldrh	r3, [r7, #12]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	813b      	strh	r3, [r7, #8]
			px = xp + i + lineWidth;
 8002118:	88fa      	ldrh	r2, [r7, #6]
 800211a:	89fb      	ldrh	r3, [r7, #14]
 800211c:	4413      	add	r3, r2
 800211e:	b29a      	uxth	r2, r3
 8002120:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002124:	b29b      	uxth	r3, r3
 8002126:	4413      	add	r3, r2
 8002128:	817b      	strh	r3, [r7, #10]
			UB_VGA_SetPixel(px,py,bordercolor);
 800212a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800212e:	8939      	ldrh	r1, [r7, #8]
 8002130:	897b      	ldrh	r3, [r7, #10]
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff fdda 	bl	8001cec <UB_VGA_SetPixel>
		for(i=0; i <= width-lineWidth; i++)
 8002138:	89fb      	ldrh	r3, [r7, #14]
 800213a:	3301      	adds	r3, #1
 800213c:	81fb      	strh	r3, [r7, #14]
 800213e:	89fa      	ldrh	r2, [r7, #14]
 8002140:	78f9      	ldrb	r1, [r7, #3]
 8002142:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002146:	1acb      	subs	r3, r1, r3
 8002148:	429a      	cmp	r2, r3
 800214a:	dddd      	ble.n	8002108 <UB_VGA_DrawRectangle+0x10a>
	for(j=0; j < lineWidth; j++)
 800214c:	89bb      	ldrh	r3, [r7, #12]
 800214e:	3301      	adds	r3, #1
 8002150:	81bb      	strh	r3, [r7, #12]
 8002152:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002156:	b29b      	uxth	r3, r3
 8002158:	89ba      	ldrh	r2, [r7, #12]
 800215a:	429a      	cmp	r2, r3
 800215c:	d3b0      	bcc.n	80020c0 <UB_VGA_DrawRectangle+0xc2>
		}
	}

    /* filling in the rectangle */
    if(filled == 1)
 800215e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002162:	2b01      	cmp	r3, #1
 8002164:	d134      	bne.n	80021d0 <UB_VGA_DrawRectangle+0x1d2>
    {
    	for(i=0; i <= width-lineWidth*2; i++)
 8002166:	2300      	movs	r3, #0
 8002168:	81fb      	strh	r3, [r7, #14]
 800216a:	e029      	b.n	80021c0 <UB_VGA_DrawRectangle+0x1c2>
    	{
    		px = xp + i + lineWidth;
 800216c:	88fa      	ldrh	r2, [r7, #6]
 800216e:	89fb      	ldrh	r3, [r7, #14]
 8002170:	4413      	add	r3, r2
 8002172:	b29a      	uxth	r2, r3
 8002174:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002178:	b29b      	uxth	r3, r3
 800217a:	4413      	add	r3, r2
 800217c:	817b      	strh	r3, [r7, #10]

        	for(j=0; j <= height-(lineWidth*2); j++)
 800217e:	2300      	movs	r3, #0
 8002180:	81bb      	strh	r3, [r7, #12]
 8002182:	e012      	b.n	80021aa <UB_VGA_DrawRectangle+0x1ac>
        	{
        		py = yp + j + lineWidth;
 8002184:	88ba      	ldrh	r2, [r7, #4]
 8002186:	89bb      	ldrh	r3, [r7, #12]
 8002188:	4413      	add	r3, r2
 800218a:	b29a      	uxth	r2, r3
 800218c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002190:	b29b      	uxth	r3, r3
 8002192:	4413      	add	r3, r2
 8002194:	813b      	strh	r3, [r7, #8]
        		UB_VGA_SetPixel(px,py,color);
 8002196:	f897 2020 	ldrb.w	r2, [r7, #32]
 800219a:	8939      	ldrh	r1, [r7, #8]
 800219c:	897b      	ldrh	r3, [r7, #10]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff fda4 	bl	8001cec <UB_VGA_SetPixel>
        	for(j=0; j <= height-(lineWidth*2); j++)
 80021a4:	89bb      	ldrh	r3, [r7, #12]
 80021a6:	3301      	adds	r3, #1
 80021a8:	81bb      	strh	r3, [r7, #12]
 80021aa:	89ba      	ldrh	r2, [r7, #12]
 80021ac:	78b9      	ldrb	r1, [r7, #2]
 80021ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	1acb      	subs	r3, r1, r3
 80021b6:	429a      	cmp	r2, r3
 80021b8:	dde4      	ble.n	8002184 <UB_VGA_DrawRectangle+0x186>
    	for(i=0; i <= width-lineWidth*2; i++)
 80021ba:	89fb      	ldrh	r3, [r7, #14]
 80021bc:	3301      	adds	r3, #1
 80021be:	81fb      	strh	r3, [r7, #14]
 80021c0:	89fa      	ldrh	r2, [r7, #14]
 80021c2:	78f9      	ldrb	r1, [r7, #3]
 80021c4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	1acb      	subs	r3, r1, r3
 80021cc:	429a      	cmp	r2, r3
 80021ce:	ddcd      	ble.n	800216c <UB_VGA_DrawRectangle+0x16e>
        	}
    	}
    }

}
 80021d0:	bf00      	nop
 80021d2:	3714      	adds	r7, #20
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd90      	pop	{r4, r7, pc}

080021d8 <UB_VGA_clearScreen>:
//--------------------------------------------------------------
// @brief Function to clear the whole screen.
// @details This function writes for all pixels the color white to the ram.
//--------------------------------------------------------------
void UB_VGA_clearScreen()
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
  uint16_t xp,yp;

  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 80021de:	2300      	movs	r3, #0
 80021e0:	80bb      	strh	r3, [r7, #4]
 80021e2:	e012      	b.n	800220a <UB_VGA_clearScreen+0x32>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 80021e4:	2300      	movs	r3, #0
 80021e6:	80fb      	strh	r3, [r7, #6]
 80021e8:	e008      	b.n	80021fc <UB_VGA_clearScreen+0x24>
      UB_VGA_SetPixel(xp, yp, VGA_COL_WHITE);
 80021ea:	88b9      	ldrh	r1, [r7, #4]
 80021ec:	88fb      	ldrh	r3, [r7, #6]
 80021ee:	22ff      	movs	r2, #255	; 0xff
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff fd7b 	bl	8001cec <UB_VGA_SetPixel>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 80021f6:	88fb      	ldrh	r3, [r7, #6]
 80021f8:	3301      	adds	r3, #1
 80021fa:	80fb      	strh	r3, [r7, #6]
 80021fc:	88fb      	ldrh	r3, [r7, #6]
 80021fe:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002202:	d3f2      	bcc.n	80021ea <UB_VGA_clearScreen+0x12>
  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 8002204:	88bb      	ldrh	r3, [r7, #4]
 8002206:	3301      	adds	r3, #1
 8002208:	80bb      	strh	r3, [r7, #4]
 800220a:	88bb      	ldrh	r3, [r7, #4]
 800220c:	2bef      	cmp	r3, #239	; 0xef
 800220e:	d9e9      	bls.n	80021e4 <UB_VGA_clearScreen+0xc>
    }
  }
}
 8002210:	bf00      	nop
 8002212:	bf00      	nop
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
	...

0800221c <UB_VGA_DrawBitmap>:
// @param[in] x: The X-coordinate of the top left corner of the bitmap
// @param[in] y: The Y-coordinate of the top left corner of the bitmap
// @param[in] bmNr: The number ID of the bitmap to be loaded in
//--------------------------------------------------------------
void UB_VGA_DrawBitmap(uint16_t x, uint16_t y, uint16_t bmNr, uint8_t color, uint8_t double_size)
{
 800221c:	b590      	push	{r4, r7, lr}
 800221e:	b087      	sub	sp, #28
 8002220:	af00      	add	r7, sp, #0
 8002222:	4604      	mov	r4, r0
 8002224:	4608      	mov	r0, r1
 8002226:	4611      	mov	r1, r2
 8002228:	461a      	mov	r2, r3
 800222a:	4623      	mov	r3, r4
 800222c:	80fb      	strh	r3, [r7, #6]
 800222e:	4603      	mov	r3, r0
 8002230:	80bb      	strh	r3, [r7, #4]
 8002232:	460b      	mov	r3, r1
 8002234:	807b      	strh	r3, [r7, #2]
 8002236:	4613      	mov	r3, r2
 8002238:	707b      	strb	r3, [r7, #1]
  	uint8_t yBm; //Counts y of the bitmap
  	uint16_t bmCoord;
  	uint8_t doubleXFlag;
  	uint8_t doubleYFlag;

  	doubleXFlag = 0;
 800223a:	2300      	movs	r3, #0
 800223c:	73fb      	strb	r3, [r7, #15]
  	doubleYFlag = 0;
 800223e:	2300      	movs	r3, #0
 8002240:	73bb      	strb	r3, [r7, #14]
  	bmCoord = 0;
 8002242:	2300      	movs	r3, #0
 8002244:	823b      	strh	r3, [r7, #16]
  	yBm = 0;
 8002246:	2300      	movs	r3, #0
 8002248:	74bb      	strb	r3, [r7, #18]
  	xBm = 0;
 800224a:	2300      	movs	r3, #0
 800224c:	74fb      	strb	r3, [r7, #19]

  	for(i = 0; i < BM_AMOUNT; i++) //Look for bm ID
 800224e:	2300      	movs	r3, #0
 8002250:	82fb      	strh	r3, [r7, #22]
 8002252:	e00c      	b.n	800226e <UB_VGA_DrawBitmap+0x52>
  	{
  		if(bmNr == bmLookup[i][ID])
 8002254:	8afb      	ldrh	r3, [r7, #22]
 8002256:	4a4d      	ldr	r2, [pc, #308]	; (800238c <UB_VGA_DrawBitmap+0x170>)
 8002258:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 800225c:	887a      	ldrh	r2, [r7, #2]
 800225e:	429a      	cmp	r2, r3
 8002260:	d102      	bne.n	8002268 <UB_VGA_DrawBitmap+0x4c>
  		{
  			bmNr = i;
 8002262:	8afb      	ldrh	r3, [r7, #22]
 8002264:	807b      	strh	r3, [r7, #2]
  			break;
 8002266:	e005      	b.n	8002274 <UB_VGA_DrawBitmap+0x58>
  	for(i = 0; i < BM_AMOUNT; i++) //Look for bm ID
 8002268:	8afb      	ldrh	r3, [r7, #22]
 800226a:	3301      	adds	r3, #1
 800226c:	82fb      	strh	r3, [r7, #22]
 800226e:	8afb      	ldrh	r3, [r7, #22]
 8002270:	2bc7      	cmp	r3, #199	; 0xc7
 8002272:	d9ef      	bls.n	8002254 <UB_VGA_DrawBitmap+0x38>
  		}
  	}

  	bmCoord = bmLookup[bmNr][OFFSET];
 8002274:	887b      	ldrh	r3, [r7, #2]
 8002276:	4a45      	ldr	r2, [pc, #276]	; (800238c <UB_VGA_DrawBitmap+0x170>)
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	4413      	add	r3, r2
 800227c:	88db      	ldrh	r3, [r3, #6]
 800227e:	823b      	strh	r3, [r7, #16]

  	for(i = 0; i < VGA_DISPLAY_Y; i++)
 8002280:	2300      	movs	r3, #0
 8002282:	82fb      	strh	r3, [r7, #22]
 8002284:	e078      	b.n	8002378 <UB_VGA_DrawBitmap+0x15c>
    {
  		if(i >= y)
 8002286:	8afa      	ldrh	r2, [r7, #22]
 8002288:	88bb      	ldrh	r3, [r7, #4]
 800228a:	429a      	cmp	r2, r3
 800228c:	d371      	bcc.n	8002372 <UB_VGA_DrawBitmap+0x156>
  		{
  			if(yBm == bmLookup[bmNr][Y_LEN]) //Check for Y length of bm
 800228e:	7cbb      	ldrb	r3, [r7, #18]
 8002290:	b29a      	uxth	r2, r3
 8002292:	887b      	ldrh	r3, [r7, #2]
 8002294:	493d      	ldr	r1, [pc, #244]	; (800238c <UB_VGA_DrawBitmap+0x170>)
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	440b      	add	r3, r1
 800229a:	889b      	ldrh	r3, [r3, #4]
 800229c:	429a      	cmp	r2, r3
 800229e:	d06f      	beq.n	8002380 <UB_VGA_DrawBitmap+0x164>
  				break;
  			for(j = 0; j < VGA_DISPLAY_X; j++)
 80022a0:	2300      	movs	r3, #0
 80022a2:	82bb      	strh	r3, [r7, #20]
 80022a4:	e044      	b.n	8002330 <UB_VGA_DrawBitmap+0x114>
  			{
  				if(j >= x)
 80022a6:	8aba      	ldrh	r2, [r7, #20]
 80022a8:	88fb      	ldrh	r3, [r7, #6]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d33d      	bcc.n	800232a <UB_VGA_DrawBitmap+0x10e>
  				{
  					if(xBm == bmLookup[bmNr][X_LEN]) //Check for X length of bm
 80022ae:	7cfb      	ldrb	r3, [r7, #19]
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	887b      	ldrh	r3, [r7, #2]
 80022b4:	4935      	ldr	r1, [pc, #212]	; (800238c <UB_VGA_DrawBitmap+0x170>)
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	440b      	add	r3, r1
 80022ba:	885b      	ldrh	r3, [r3, #2]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d03c      	beq.n	800233a <UB_VGA_DrawBitmap+0x11e>
  						break;

  					if (color)
 80022c0:	787b      	ldrb	r3, [r7, #1]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d013      	beq.n	80022ee <UB_VGA_DrawBitmap+0xd2>
  					{
  						if (bitmap_test[bmCoord] == 0XFF)
 80022c6:	8a3b      	ldrh	r3, [r7, #16]
 80022c8:	4a31      	ldr	r2, [pc, #196]	; (8002390 <UB_VGA_DrawBitmap+0x174>)
 80022ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022ce:	2bff      	cmp	r3, #255	; 0xff
 80022d0:	d106      	bne.n	80022e0 <UB_VGA_DrawBitmap+0xc4>
  						{
  							UB_VGA_SetPixel(j, i, color);
 80022d2:	787a      	ldrb	r2, [r7, #1]
 80022d4:	8af9      	ldrh	r1, [r7, #22]
 80022d6:	8abb      	ldrh	r3, [r7, #20]
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff fd07 	bl	8001cec <UB_VGA_SetPixel>
 80022de:	e010      	b.n	8002302 <UB_VGA_DrawBitmap+0xe6>
  						}
  						else
  							UB_VGA_SetPixel(j, i, 0xFF);
 80022e0:	8af9      	ldrh	r1, [r7, #22]
 80022e2:	8abb      	ldrh	r3, [r7, #20]
 80022e4:	22ff      	movs	r2, #255	; 0xff
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff fd00 	bl	8001cec <UB_VGA_SetPixel>
 80022ec:	e009      	b.n	8002302 <UB_VGA_DrawBitmap+0xe6>
  					}
  					else
  						UB_VGA_SetPixel(j, i, bitmap_test[bmCoord]);
 80022ee:	8a3b      	ldrh	r3, [r7, #16]
 80022f0:	4a27      	ldr	r2, [pc, #156]	; (8002390 <UB_VGA_DrawBitmap+0x174>)
 80022f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	8af9      	ldrh	r1, [r7, #22]
 80022fa:	8abb      	ldrh	r3, [r7, #20]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff fcf5 	bl	8001cec <UB_VGA_SetPixel>

  					if(double_size && !doubleXFlag)
 8002302:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002306:	2b00      	cmp	r3, #0
 8002308:	d006      	beq.n	8002318 <UB_VGA_DrawBitmap+0xfc>
 800230a:	7bfb      	ldrb	r3, [r7, #15]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d103      	bne.n	8002318 <UB_VGA_DrawBitmap+0xfc>
  						doubleXFlag++;
 8002310:	7bfb      	ldrb	r3, [r7, #15]
 8002312:	3301      	adds	r3, #1
 8002314:	73fb      	strb	r3, [r7, #15]
 8002316:	e008      	b.n	800232a <UB_VGA_DrawBitmap+0x10e>
  					else
  					{
  						doubleXFlag--;
 8002318:	7bfb      	ldrb	r3, [r7, #15]
 800231a:	3b01      	subs	r3, #1
 800231c:	73fb      	strb	r3, [r7, #15]
  	  					xBm++;
 800231e:	7cfb      	ldrb	r3, [r7, #19]
 8002320:	3301      	adds	r3, #1
 8002322:	74fb      	strb	r3, [r7, #19]
  	  					bmCoord++;
 8002324:	8a3b      	ldrh	r3, [r7, #16]
 8002326:	3301      	adds	r3, #1
 8002328:	823b      	strh	r3, [r7, #16]
  			for(j = 0; j < VGA_DISPLAY_X; j++)
 800232a:	8abb      	ldrh	r3, [r7, #20]
 800232c:	3301      	adds	r3, #1
 800232e:	82bb      	strh	r3, [r7, #20]
 8002330:	8abb      	ldrh	r3, [r7, #20]
 8002332:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002336:	d3b6      	bcc.n	80022a6 <UB_VGA_DrawBitmap+0x8a>
 8002338:	e000      	b.n	800233c <UB_VGA_DrawBitmap+0x120>
  						break;
 800233a:	bf00      	nop
  					}
  				}
	    	}
  			xBm = 0;
 800233c:	2300      	movs	r3, #0
 800233e:	74fb      	strb	r3, [r7, #19]


			if(double_size && !doubleYFlag)
 8002340:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00e      	beq.n	8002366 <UB_VGA_DrawBitmap+0x14a>
 8002348:	7bbb      	ldrb	r3, [r7, #14]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d10b      	bne.n	8002366 <UB_VGA_DrawBitmap+0x14a>
			{
				doubleYFlag++;
 800234e:	7bbb      	ldrb	r3, [r7, #14]
 8002350:	3301      	adds	r3, #1
 8002352:	73bb      	strb	r3, [r7, #14]
				bmCoord -= bmLookup[bmNr][X_LEN];
 8002354:	887b      	ldrh	r3, [r7, #2]
 8002356:	4a0d      	ldr	r2, [pc, #52]	; (800238c <UB_VGA_DrawBitmap+0x170>)
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	4413      	add	r3, r2
 800235c:	885b      	ldrh	r3, [r3, #2]
 800235e:	8a3a      	ldrh	r2, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	823b      	strh	r3, [r7, #16]
 8002364:	e005      	b.n	8002372 <UB_VGA_DrawBitmap+0x156>
			}
			else
			{
				doubleYFlag--;
 8002366:	7bbb      	ldrb	r3, [r7, #14]
 8002368:	3b01      	subs	r3, #1
 800236a:	73bb      	strb	r3, [r7, #14]
				yBm++;
 800236c:	7cbb      	ldrb	r3, [r7, #18]
 800236e:	3301      	adds	r3, #1
 8002370:	74bb      	strb	r3, [r7, #18]
  	for(i = 0; i < VGA_DISPLAY_Y; i++)
 8002372:	8afb      	ldrh	r3, [r7, #22]
 8002374:	3301      	adds	r3, #1
 8002376:	82fb      	strh	r3, [r7, #22]
 8002378:	8afb      	ldrh	r3, [r7, #22]
 800237a:	2bef      	cmp	r3, #239	; 0xef
 800237c:	d983      	bls.n	8002286 <UB_VGA_DrawBitmap+0x6a>
			}
  		}
    }
}
 800237e:	e000      	b.n	8002382 <UB_VGA_DrawBitmap+0x166>
  				break;
 8002380:	bf00      	nop
}
 8002382:	bf00      	nop
 8002384:	371c      	adds	r7, #28
 8002386:	46bd      	mov	sp, r7
 8002388:	bd90      	pop	{r4, r7, pc}
 800238a:	bf00      	nop
 800238c:	200002bc 	.word	0x200002bc
 8002390:	080081cc 	.word	0x080081cc

08002394 <UB_VGA_writeText>:
// @param[in] fontname: The fontname that the text is printed in
// @param[in] fontsize: The fontsize that the text is printed in
// @param[in] fontstyle: The fontstyle that the text is printed in
//--------------------------------------------------------------
void UB_VGA_writeText(uint16_t x_lup, uint16_t y_lup, uint8_t color, char text[20], char fontname, uint8_t fontsize, uint8_t fontstyle)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b088      	sub	sp, #32
 8002398:	af02      	add	r7, sp, #8
 800239a:	607b      	str	r3, [r7, #4]
 800239c:	4603      	mov	r3, r0
 800239e:	81fb      	strh	r3, [r7, #14]
 80023a0:	460b      	mov	r3, r1
 80023a2:	81bb      	strh	r3, [r7, #12]
 80023a4:	4613      	mov	r3, r2
 80023a6:	72fb      	strb	r3, [r7, #11]
    uint16_t px = 0;
 80023a8:	2300      	movs	r3, #0
 80023aa:	82bb      	strh	r3, [r7, #20]
    uint8_t i = 0;
 80023ac:	2300      	movs	r3, #0
 80023ae:	75fb      	strb	r3, [r7, #23]
    uint8_t letterWidth = 0;
 80023b0:	2300      	movs	r3, #0
 80023b2:	75bb      	strb	r3, [r7, #22]
    if(fontsize == 1)	//normal fontsize is selected
 80023b4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d102      	bne.n	80023c2 <UB_VGA_writeText+0x2e>
    {
        letterWidth = 8;
 80023bc:	2308      	movs	r3, #8
 80023be:	75bb      	strb	r3, [r7, #22]
 80023c0:	e005      	b.n	80023ce <UB_VGA_writeText+0x3a>
    }
    else if(fontsize == 2)	//large fontsize is selected
 80023c2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d101      	bne.n	80023ce <UB_VGA_writeText+0x3a>
    {
        letterWidth = 16;
 80023ca:	2310      	movs	r3, #16
 80023cc:	75bb      	strb	r3, [r7, #22]
    }


    for(i=0; i < 20; i++)	//maximum text size of 20 letters
 80023ce:	2300      	movs	r3, #0
 80023d0:	75fb      	strb	r3, [r7, #23]
 80023d2:	f001 ba94 	b.w	80038fe <UB_VGA_writeText+0x156a>
    {
        px = x_lup + (i * letterWidth);	//changes the position of x
 80023d6:	7dfb      	ldrb	r3, [r7, #23]
 80023d8:	b29a      	uxth	r2, r3
 80023da:	7dbb      	ldrb	r3, [r7, #22]
 80023dc:	b29b      	uxth	r3, r3
 80023de:	fb12 f303 	smulbb	r3, r2, r3
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	89fb      	ldrh	r3, [r7, #14]
 80023e6:	4413      	add	r3, r2
 80023e8:	82bb      	strh	r3, [r7, #20]
        switch(text[i])
 80023ea:	7dfb      	ldrb	r3, [r7, #23]
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	4413      	add	r3, r2
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	3b61      	subs	r3, #97	; 0x61
 80023f4:	2b19      	cmp	r3, #25
 80023f6:	f201 827e 	bhi.w	80038f6 <UB_VGA_writeText+0x1562>
 80023fa:	a201      	add	r2, pc, #4	; (adr r2, 8002400 <UB_VGA_writeText+0x6c>)
 80023fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002400:	08002469 	.word	0x08002469
 8002404:	08002535 	.word	0x08002535
 8002408:	08002601 	.word	0x08002601
 800240c:	080026cd 	.word	0x080026cd
 8002410:	08002799 	.word	0x08002799
 8002414:	08002865 	.word	0x08002865
 8002418:	08002931 	.word	0x08002931
 800241c:	080029fd 	.word	0x080029fd
 8002420:	08002ac9 	.word	0x08002ac9
 8002424:	08002b95 	.word	0x08002b95
 8002428:	08002c61 	.word	0x08002c61
 800242c:	08002d2d 	.word	0x08002d2d
 8002430:	08002df9 	.word	0x08002df9
 8002434:	08002ec5 	.word	0x08002ec5
 8002438:	08002f91 	.word	0x08002f91
 800243c:	0800305d 	.word	0x0800305d
 8002440:	08003127 	.word	0x08003127
 8002444:	080031ef 	.word	0x080031ef
 8002448:	080032b7 	.word	0x080032b7
 800244c:	0800337f 	.word	0x0800337f
 8002450:	08003447 	.word	0x08003447
 8002454:	0800350f 	.word	0x0800350f
 8002458:	080035d7 	.word	0x080035d7
 800245c:	0800369f 	.word	0x0800369f
 8002460:	08003767 	.word	0x08003767
 8002464:	0800382f 	.word	0x0800382f
        {
            case 'a':	//if the letter is 'a'
            	switch(fontname)	//checks what the fontname is
 8002468:	f897 3020 	ldrb.w	r3, [r7, #32]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d003      	beq.n	8002478 <UB_VGA_writeText+0xe4>
 8002470:	2b02      	cmp	r3, #2
 8002472:	d02e      	beq.n	80024d2 <UB_VGA_writeText+0x13e>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 527, color, fontsize); break;	//cursive fontstyle
                			default: break;
                		}
                	default: break;
            	}
                break;
 8002474:	f001 ba40 	b.w	80038f8 <UB_VGA_writeText+0x1564>
            			switch(fontstyle)	//checks what fontname is
 8002478:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800247c:	2b03      	cmp	r3, #3
 800247e:	d01c      	beq.n	80024ba <UB_VGA_writeText+0x126>
 8002480:	2b03      	cmp	r3, #3
 8002482:	dc25      	bgt.n	80024d0 <UB_VGA_writeText+0x13c>
 8002484:	2b01      	cmp	r3, #1
 8002486:	d002      	beq.n	800248e <UB_VGA_writeText+0xfa>
 8002488:	2b02      	cmp	r3, #2
 800248a:	d00b      	beq.n	80024a4 <UB_VGA_writeText+0x110>
            				default: break;
 800248c:	e020      	b.n	80024d0 <UB_VGA_writeText+0x13c>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'a', color, fontsize); break;	//normal fontstyle
 800248e:	7afa      	ldrb	r2, [r7, #11]
 8002490:	89b9      	ldrh	r1, [r7, #12]
 8002492:	8ab8      	ldrh	r0, [r7, #20]
 8002494:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	4613      	mov	r3, r2
 800249c:	2261      	movs	r2, #97	; 0x61
 800249e:	f7ff febd 	bl	800221c <UB_VGA_DrawBitmap>
 80024a2:	e016      	b.n	80024d2 <UB_VGA_writeText+0x13e>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'A', color, fontsize); break;	//bold fontstyle
 80024a4:	7afa      	ldrb	r2, [r7, #11]
 80024a6:	89b9      	ldrh	r1, [r7, #12]
 80024a8:	8ab8      	ldrh	r0, [r7, #20]
 80024aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	4613      	mov	r3, r2
 80024b2:	2241      	movs	r2, #65	; 0x41
 80024b4:	f7ff feb2 	bl	800221c <UB_VGA_DrawBitmap>
 80024b8:	e00b      	b.n	80024d2 <UB_VGA_writeText+0x13e>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 0, color, fontsize); break;	//cursive fontstyle
 80024ba:	7afa      	ldrb	r2, [r7, #11]
 80024bc:	89b9      	ldrh	r1, [r7, #12]
 80024be:	8ab8      	ldrh	r0, [r7, #20]
 80024c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80024c4:	9300      	str	r3, [sp, #0]
 80024c6:	4613      	mov	r3, r2
 80024c8:	2200      	movs	r2, #0
 80024ca:	f7ff fea7 	bl	800221c <UB_VGA_DrawBitmap>
 80024ce:	e000      	b.n	80024d2 <UB_VGA_writeText+0x13e>
            				default: break;
 80024d0:	bf00      	nop
                		switch(fontstyle)
 80024d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80024d6:	2b03      	cmp	r3, #3
 80024d8:	d01d      	beq.n	8002516 <UB_VGA_writeText+0x182>
 80024da:	2b03      	cmp	r3, #3
 80024dc:	dc27      	bgt.n	800252e <UB_VGA_writeText+0x19a>
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d002      	beq.n	80024e8 <UB_VGA_writeText+0x154>
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d00b      	beq.n	80024fe <UB_VGA_writeText+0x16a>
                			default: break;
 80024e6:	e022      	b.n	800252e <UB_VGA_writeText+0x19a>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 27, color, fontsize); break;	//normal fontstyle
 80024e8:	7afa      	ldrb	r2, [r7, #11]
 80024ea:	89b9      	ldrh	r1, [r7, #12]
 80024ec:	8ab8      	ldrh	r0, [r7, #20]
 80024ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80024f2:	9300      	str	r3, [sp, #0]
 80024f4:	4613      	mov	r3, r2
 80024f6:	221b      	movs	r2, #27
 80024f8:	f7ff fe90 	bl	800221c <UB_VGA_DrawBitmap>
 80024fc:	e018      	b.n	8002530 <UB_VGA_writeText+0x19c>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 500, color, fontsize); break;	//bold fontstyle
 80024fe:	7afa      	ldrb	r2, [r7, #11]
 8002500:	89b9      	ldrh	r1, [r7, #12]
 8002502:	8ab8      	ldrh	r0, [r7, #20]
 8002504:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	4613      	mov	r3, r2
 800250c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002510:	f7ff fe84 	bl	800221c <UB_VGA_DrawBitmap>
 8002514:	e00c      	b.n	8002530 <UB_VGA_writeText+0x19c>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 527, color, fontsize); break;	//cursive fontstyle
 8002516:	7afa      	ldrb	r2, [r7, #11]
 8002518:	89b9      	ldrh	r1, [r7, #12]
 800251a:	8ab8      	ldrh	r0, [r7, #20]
 800251c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002520:	9300      	str	r3, [sp, #0]
 8002522:	4613      	mov	r3, r2
 8002524:	f240 220f 	movw	r2, #527	; 0x20f
 8002528:	f7ff fe78 	bl	800221c <UB_VGA_DrawBitmap>
 800252c:	e000      	b.n	8002530 <UB_VGA_writeText+0x19c>
                			default: break;
 800252e:	bf00      	nop
                break;
 8002530:	f001 b9e2 	b.w	80038f8 <UB_VGA_writeText+0x1564>
            case 'b':
            	switch(fontname)
 8002534:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d003      	beq.n	8002544 <UB_VGA_writeText+0x1b0>
 800253c:	2b02      	cmp	r3, #2
 800253e:	d02e      	beq.n	800259e <UB_VGA_writeText+0x20a>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 528, color, fontsize); break;
                			default: break;
                		}
                	default: break;
            	}
                break;
 8002540:	f001 b9da 	b.w	80038f8 <UB_VGA_writeText+0x1564>
            			switch(fontstyle)
 8002544:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002548:	2b03      	cmp	r3, #3
 800254a:	d01c      	beq.n	8002586 <UB_VGA_writeText+0x1f2>
 800254c:	2b03      	cmp	r3, #3
 800254e:	dc25      	bgt.n	800259c <UB_VGA_writeText+0x208>
 8002550:	2b01      	cmp	r3, #1
 8002552:	d002      	beq.n	800255a <UB_VGA_writeText+0x1c6>
 8002554:	2b02      	cmp	r3, #2
 8002556:	d00b      	beq.n	8002570 <UB_VGA_writeText+0x1dc>
            				default: break;
 8002558:	e020      	b.n	800259c <UB_VGA_writeText+0x208>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'b', color, fontsize); break;
 800255a:	7afa      	ldrb	r2, [r7, #11]
 800255c:	89b9      	ldrh	r1, [r7, #12]
 800255e:	8ab8      	ldrh	r0, [r7, #20]
 8002560:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	4613      	mov	r3, r2
 8002568:	2262      	movs	r2, #98	; 0x62
 800256a:	f7ff fe57 	bl	800221c <UB_VGA_DrawBitmap>
 800256e:	e016      	b.n	800259e <UB_VGA_writeText+0x20a>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'B', color, fontsize); break;
 8002570:	7afa      	ldrb	r2, [r7, #11]
 8002572:	89b9      	ldrh	r1, [r7, #12]
 8002574:	8ab8      	ldrh	r0, [r7, #20]
 8002576:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800257a:	9300      	str	r3, [sp, #0]
 800257c:	4613      	mov	r3, r2
 800257e:	2242      	movs	r2, #66	; 0x42
 8002580:	f7ff fe4c 	bl	800221c <UB_VGA_DrawBitmap>
 8002584:	e00b      	b.n	800259e <UB_VGA_writeText+0x20a>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 1, color, fontsize); break;
 8002586:	7afa      	ldrb	r2, [r7, #11]
 8002588:	89b9      	ldrh	r1, [r7, #12]
 800258a:	8ab8      	ldrh	r0, [r7, #20]
 800258c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	4613      	mov	r3, r2
 8002594:	2201      	movs	r2, #1
 8002596:	f7ff fe41 	bl	800221c <UB_VGA_DrawBitmap>
 800259a:	e000      	b.n	800259e <UB_VGA_writeText+0x20a>
            				default: break;
 800259c:	bf00      	nop
                		switch(fontstyle)
 800259e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80025a2:	2b03      	cmp	r3, #3
 80025a4:	d01d      	beq.n	80025e2 <UB_VGA_writeText+0x24e>
 80025a6:	2b03      	cmp	r3, #3
 80025a8:	dc27      	bgt.n	80025fa <UB_VGA_writeText+0x266>
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d002      	beq.n	80025b4 <UB_VGA_writeText+0x220>
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d00b      	beq.n	80025ca <UB_VGA_writeText+0x236>
                			default: break;
 80025b2:	e022      	b.n	80025fa <UB_VGA_writeText+0x266>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 28, color, fontsize); break;
 80025b4:	7afa      	ldrb	r2, [r7, #11]
 80025b6:	89b9      	ldrh	r1, [r7, #12]
 80025b8:	8ab8      	ldrh	r0, [r7, #20]
 80025ba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	4613      	mov	r3, r2
 80025c2:	221c      	movs	r2, #28
 80025c4:	f7ff fe2a 	bl	800221c <UB_VGA_DrawBitmap>
 80025c8:	e018      	b.n	80025fc <UB_VGA_writeText+0x268>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 501, color, fontsize); break;
 80025ca:	7afa      	ldrb	r2, [r7, #11]
 80025cc:	89b9      	ldrh	r1, [r7, #12]
 80025ce:	8ab8      	ldrh	r0, [r7, #20]
 80025d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80025d4:	9300      	str	r3, [sp, #0]
 80025d6:	4613      	mov	r3, r2
 80025d8:	f240 12f5 	movw	r2, #501	; 0x1f5
 80025dc:	f7ff fe1e 	bl	800221c <UB_VGA_DrawBitmap>
 80025e0:	e00c      	b.n	80025fc <UB_VGA_writeText+0x268>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 528, color, fontsize); break;
 80025e2:	7afa      	ldrb	r2, [r7, #11]
 80025e4:	89b9      	ldrh	r1, [r7, #12]
 80025e6:	8ab8      	ldrh	r0, [r7, #20]
 80025e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80025ec:	9300      	str	r3, [sp, #0]
 80025ee:	4613      	mov	r3, r2
 80025f0:	f44f 7204 	mov.w	r2, #528	; 0x210
 80025f4:	f7ff fe12 	bl	800221c <UB_VGA_DrawBitmap>
 80025f8:	e000      	b.n	80025fc <UB_VGA_writeText+0x268>
                			default: break;
 80025fa:	bf00      	nop
                break;
 80025fc:	f001 b97c 	b.w	80038f8 <UB_VGA_writeText+0x1564>
            case 'c':
            	switch(fontname)
 8002600:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d003      	beq.n	8002610 <UB_VGA_writeText+0x27c>
 8002608:	2b02      	cmp	r3, #2
 800260a:	d02e      	beq.n	800266a <UB_VGA_writeText+0x2d6>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 529, color, fontsize); break;
                			default: break;
                		}
                	default: break;
            	}
                break;
 800260c:	f001 b974 	b.w	80038f8 <UB_VGA_writeText+0x1564>
            			switch(fontstyle)
 8002610:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002614:	2b03      	cmp	r3, #3
 8002616:	d01c      	beq.n	8002652 <UB_VGA_writeText+0x2be>
 8002618:	2b03      	cmp	r3, #3
 800261a:	dc25      	bgt.n	8002668 <UB_VGA_writeText+0x2d4>
 800261c:	2b01      	cmp	r3, #1
 800261e:	d002      	beq.n	8002626 <UB_VGA_writeText+0x292>
 8002620:	2b02      	cmp	r3, #2
 8002622:	d00b      	beq.n	800263c <UB_VGA_writeText+0x2a8>
            				default: break;
 8002624:	e020      	b.n	8002668 <UB_VGA_writeText+0x2d4>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'c', color, fontsize); break;
 8002626:	7afa      	ldrb	r2, [r7, #11]
 8002628:	89b9      	ldrh	r1, [r7, #12]
 800262a:	8ab8      	ldrh	r0, [r7, #20]
 800262c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	4613      	mov	r3, r2
 8002634:	2263      	movs	r2, #99	; 0x63
 8002636:	f7ff fdf1 	bl	800221c <UB_VGA_DrawBitmap>
 800263a:	e016      	b.n	800266a <UB_VGA_writeText+0x2d6>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'C', color, fontsize); break;
 800263c:	7afa      	ldrb	r2, [r7, #11]
 800263e:	89b9      	ldrh	r1, [r7, #12]
 8002640:	8ab8      	ldrh	r0, [r7, #20]
 8002642:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002646:	9300      	str	r3, [sp, #0]
 8002648:	4613      	mov	r3, r2
 800264a:	2243      	movs	r2, #67	; 0x43
 800264c:	f7ff fde6 	bl	800221c <UB_VGA_DrawBitmap>
 8002650:	e00b      	b.n	800266a <UB_VGA_writeText+0x2d6>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 2, color, fontsize); break;
 8002652:	7afa      	ldrb	r2, [r7, #11]
 8002654:	89b9      	ldrh	r1, [r7, #12]
 8002656:	8ab8      	ldrh	r0, [r7, #20]
 8002658:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	4613      	mov	r3, r2
 8002660:	2202      	movs	r2, #2
 8002662:	f7ff fddb 	bl	800221c <UB_VGA_DrawBitmap>
 8002666:	e000      	b.n	800266a <UB_VGA_writeText+0x2d6>
            				default: break;
 8002668:	bf00      	nop
                		switch(fontstyle)
 800266a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800266e:	2b03      	cmp	r3, #3
 8002670:	d01d      	beq.n	80026ae <UB_VGA_writeText+0x31a>
 8002672:	2b03      	cmp	r3, #3
 8002674:	dc27      	bgt.n	80026c6 <UB_VGA_writeText+0x332>
 8002676:	2b01      	cmp	r3, #1
 8002678:	d002      	beq.n	8002680 <UB_VGA_writeText+0x2ec>
 800267a:	2b02      	cmp	r3, #2
 800267c:	d00b      	beq.n	8002696 <UB_VGA_writeText+0x302>
                			default: break;
 800267e:	e022      	b.n	80026c6 <UB_VGA_writeText+0x332>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 29, color, fontsize); break;
 8002680:	7afa      	ldrb	r2, [r7, #11]
 8002682:	89b9      	ldrh	r1, [r7, #12]
 8002684:	8ab8      	ldrh	r0, [r7, #20]
 8002686:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800268a:	9300      	str	r3, [sp, #0]
 800268c:	4613      	mov	r3, r2
 800268e:	221d      	movs	r2, #29
 8002690:	f7ff fdc4 	bl	800221c <UB_VGA_DrawBitmap>
 8002694:	e018      	b.n	80026c8 <UB_VGA_writeText+0x334>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 502, color, fontsize); break;
 8002696:	7afa      	ldrb	r2, [r7, #11]
 8002698:	89b9      	ldrh	r1, [r7, #12]
 800269a:	8ab8      	ldrh	r0, [r7, #20]
 800269c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80026a0:	9300      	str	r3, [sp, #0]
 80026a2:	4613      	mov	r3, r2
 80026a4:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 80026a8:	f7ff fdb8 	bl	800221c <UB_VGA_DrawBitmap>
 80026ac:	e00c      	b.n	80026c8 <UB_VGA_writeText+0x334>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 529, color, fontsize); break;
 80026ae:	7afa      	ldrb	r2, [r7, #11]
 80026b0:	89b9      	ldrh	r1, [r7, #12]
 80026b2:	8ab8      	ldrh	r0, [r7, #20]
 80026b4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80026b8:	9300      	str	r3, [sp, #0]
 80026ba:	4613      	mov	r3, r2
 80026bc:	f240 2211 	movw	r2, #529	; 0x211
 80026c0:	f7ff fdac 	bl	800221c <UB_VGA_DrawBitmap>
 80026c4:	e000      	b.n	80026c8 <UB_VGA_writeText+0x334>
                			default: break;
 80026c6:	bf00      	nop
                break;
 80026c8:	f001 b916 	b.w	80038f8 <UB_VGA_writeText+0x1564>
            case 'd':
            	switch(fontname)
 80026cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d003      	beq.n	80026dc <UB_VGA_writeText+0x348>
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d02e      	beq.n	8002736 <UB_VGA_writeText+0x3a2>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 530, color, fontsize); break;
                			default: break;
                		}
                	default: break;
            	}
                break;
 80026d8:	f001 b90e 	b.w	80038f8 <UB_VGA_writeText+0x1564>
            			switch(fontstyle)
 80026dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80026e0:	2b03      	cmp	r3, #3
 80026e2:	d01c      	beq.n	800271e <UB_VGA_writeText+0x38a>
 80026e4:	2b03      	cmp	r3, #3
 80026e6:	dc25      	bgt.n	8002734 <UB_VGA_writeText+0x3a0>
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d002      	beq.n	80026f2 <UB_VGA_writeText+0x35e>
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d00b      	beq.n	8002708 <UB_VGA_writeText+0x374>
            				default: break;
 80026f0:	e020      	b.n	8002734 <UB_VGA_writeText+0x3a0>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'd', color, fontsize); break;
 80026f2:	7afa      	ldrb	r2, [r7, #11]
 80026f4:	89b9      	ldrh	r1, [r7, #12]
 80026f6:	8ab8      	ldrh	r0, [r7, #20]
 80026f8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	4613      	mov	r3, r2
 8002700:	2264      	movs	r2, #100	; 0x64
 8002702:	f7ff fd8b 	bl	800221c <UB_VGA_DrawBitmap>
 8002706:	e016      	b.n	8002736 <UB_VGA_writeText+0x3a2>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'D', color, fontsize); break;
 8002708:	7afa      	ldrb	r2, [r7, #11]
 800270a:	89b9      	ldrh	r1, [r7, #12]
 800270c:	8ab8      	ldrh	r0, [r7, #20]
 800270e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002712:	9300      	str	r3, [sp, #0]
 8002714:	4613      	mov	r3, r2
 8002716:	2244      	movs	r2, #68	; 0x44
 8002718:	f7ff fd80 	bl	800221c <UB_VGA_DrawBitmap>
 800271c:	e00b      	b.n	8002736 <UB_VGA_writeText+0x3a2>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 3, color, fontsize); break;
 800271e:	7afa      	ldrb	r2, [r7, #11]
 8002720:	89b9      	ldrh	r1, [r7, #12]
 8002722:	8ab8      	ldrh	r0, [r7, #20]
 8002724:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002728:	9300      	str	r3, [sp, #0]
 800272a:	4613      	mov	r3, r2
 800272c:	2203      	movs	r2, #3
 800272e:	f7ff fd75 	bl	800221c <UB_VGA_DrawBitmap>
 8002732:	e000      	b.n	8002736 <UB_VGA_writeText+0x3a2>
            				default: break;
 8002734:	bf00      	nop
                		switch(fontstyle)
 8002736:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800273a:	2b03      	cmp	r3, #3
 800273c:	d01d      	beq.n	800277a <UB_VGA_writeText+0x3e6>
 800273e:	2b03      	cmp	r3, #3
 8002740:	dc27      	bgt.n	8002792 <UB_VGA_writeText+0x3fe>
 8002742:	2b01      	cmp	r3, #1
 8002744:	d002      	beq.n	800274c <UB_VGA_writeText+0x3b8>
 8002746:	2b02      	cmp	r3, #2
 8002748:	d00b      	beq.n	8002762 <UB_VGA_writeText+0x3ce>
                			default: break;
 800274a:	e022      	b.n	8002792 <UB_VGA_writeText+0x3fe>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 30, color, fontsize); break;
 800274c:	7afa      	ldrb	r2, [r7, #11]
 800274e:	89b9      	ldrh	r1, [r7, #12]
 8002750:	8ab8      	ldrh	r0, [r7, #20]
 8002752:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002756:	9300      	str	r3, [sp, #0]
 8002758:	4613      	mov	r3, r2
 800275a:	221e      	movs	r2, #30
 800275c:	f7ff fd5e 	bl	800221c <UB_VGA_DrawBitmap>
 8002760:	e018      	b.n	8002794 <UB_VGA_writeText+0x400>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 503, color, fontsize); break;
 8002762:	7afa      	ldrb	r2, [r7, #11]
 8002764:	89b9      	ldrh	r1, [r7, #12]
 8002766:	8ab8      	ldrh	r0, [r7, #20]
 8002768:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800276c:	9300      	str	r3, [sp, #0]
 800276e:	4613      	mov	r3, r2
 8002770:	f240 12f7 	movw	r2, #503	; 0x1f7
 8002774:	f7ff fd52 	bl	800221c <UB_VGA_DrawBitmap>
 8002778:	e00c      	b.n	8002794 <UB_VGA_writeText+0x400>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 530, color, fontsize); break;
 800277a:	7afa      	ldrb	r2, [r7, #11]
 800277c:	89b9      	ldrh	r1, [r7, #12]
 800277e:	8ab8      	ldrh	r0, [r7, #20]
 8002780:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	4613      	mov	r3, r2
 8002788:	f240 2212 	movw	r2, #530	; 0x212
 800278c:	f7ff fd46 	bl	800221c <UB_VGA_DrawBitmap>
 8002790:	e000      	b.n	8002794 <UB_VGA_writeText+0x400>
                			default: break;
 8002792:	bf00      	nop
                break;
 8002794:	f001 b8b0 	b.w	80038f8 <UB_VGA_writeText+0x1564>
            case 'e':
            	switch(fontname)
 8002798:	f897 3020 	ldrb.w	r3, [r7, #32]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d003      	beq.n	80027a8 <UB_VGA_writeText+0x414>
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d02e      	beq.n	8002802 <UB_VGA_writeText+0x46e>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 531, color, fontsize); break;
                			default: break;
                		}
                	default: break;
            	}
                break;
 80027a4:	f001 b8a8 	b.w	80038f8 <UB_VGA_writeText+0x1564>
            			switch(fontstyle)
 80027a8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80027ac:	2b03      	cmp	r3, #3
 80027ae:	d01c      	beq.n	80027ea <UB_VGA_writeText+0x456>
 80027b0:	2b03      	cmp	r3, #3
 80027b2:	dc25      	bgt.n	8002800 <UB_VGA_writeText+0x46c>
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d002      	beq.n	80027be <UB_VGA_writeText+0x42a>
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d00b      	beq.n	80027d4 <UB_VGA_writeText+0x440>
            				default: break;
 80027bc:	e020      	b.n	8002800 <UB_VGA_writeText+0x46c>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'e', color, fontsize); break;
 80027be:	7afa      	ldrb	r2, [r7, #11]
 80027c0:	89b9      	ldrh	r1, [r7, #12]
 80027c2:	8ab8      	ldrh	r0, [r7, #20]
 80027c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80027c8:	9300      	str	r3, [sp, #0]
 80027ca:	4613      	mov	r3, r2
 80027cc:	2265      	movs	r2, #101	; 0x65
 80027ce:	f7ff fd25 	bl	800221c <UB_VGA_DrawBitmap>
 80027d2:	e016      	b.n	8002802 <UB_VGA_writeText+0x46e>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'E', color, fontsize); break;
 80027d4:	7afa      	ldrb	r2, [r7, #11]
 80027d6:	89b9      	ldrh	r1, [r7, #12]
 80027d8:	8ab8      	ldrh	r0, [r7, #20]
 80027da:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	4613      	mov	r3, r2
 80027e2:	2245      	movs	r2, #69	; 0x45
 80027e4:	f7ff fd1a 	bl	800221c <UB_VGA_DrawBitmap>
 80027e8:	e00b      	b.n	8002802 <UB_VGA_writeText+0x46e>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 4, color, fontsize); break;
 80027ea:	7afa      	ldrb	r2, [r7, #11]
 80027ec:	89b9      	ldrh	r1, [r7, #12]
 80027ee:	8ab8      	ldrh	r0, [r7, #20]
 80027f0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	4613      	mov	r3, r2
 80027f8:	2204      	movs	r2, #4
 80027fa:	f7ff fd0f 	bl	800221c <UB_VGA_DrawBitmap>
 80027fe:	e000      	b.n	8002802 <UB_VGA_writeText+0x46e>
            				default: break;
 8002800:	bf00      	nop
                		switch(fontstyle)
 8002802:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002806:	2b03      	cmp	r3, #3
 8002808:	d01d      	beq.n	8002846 <UB_VGA_writeText+0x4b2>
 800280a:	2b03      	cmp	r3, #3
 800280c:	dc27      	bgt.n	800285e <UB_VGA_writeText+0x4ca>
 800280e:	2b01      	cmp	r3, #1
 8002810:	d002      	beq.n	8002818 <UB_VGA_writeText+0x484>
 8002812:	2b02      	cmp	r3, #2
 8002814:	d00b      	beq.n	800282e <UB_VGA_writeText+0x49a>
                			default: break;
 8002816:	e022      	b.n	800285e <UB_VGA_writeText+0x4ca>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 31, color, fontsize); break;
 8002818:	7afa      	ldrb	r2, [r7, #11]
 800281a:	89b9      	ldrh	r1, [r7, #12]
 800281c:	8ab8      	ldrh	r0, [r7, #20]
 800281e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002822:	9300      	str	r3, [sp, #0]
 8002824:	4613      	mov	r3, r2
 8002826:	221f      	movs	r2, #31
 8002828:	f7ff fcf8 	bl	800221c <UB_VGA_DrawBitmap>
 800282c:	e018      	b.n	8002860 <UB_VGA_writeText+0x4cc>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 504, color, fontsize); break;
 800282e:	7afa      	ldrb	r2, [r7, #11]
 8002830:	89b9      	ldrh	r1, [r7, #12]
 8002832:	8ab8      	ldrh	r0, [r7, #20]
 8002834:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	4613      	mov	r3, r2
 800283c:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8002840:	f7ff fcec 	bl	800221c <UB_VGA_DrawBitmap>
 8002844:	e00c      	b.n	8002860 <UB_VGA_writeText+0x4cc>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 531, color, fontsize); break;
 8002846:	7afa      	ldrb	r2, [r7, #11]
 8002848:	89b9      	ldrh	r1, [r7, #12]
 800284a:	8ab8      	ldrh	r0, [r7, #20]
 800284c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002850:	9300      	str	r3, [sp, #0]
 8002852:	4613      	mov	r3, r2
 8002854:	f240 2213 	movw	r2, #531	; 0x213
 8002858:	f7ff fce0 	bl	800221c <UB_VGA_DrawBitmap>
 800285c:	e000      	b.n	8002860 <UB_VGA_writeText+0x4cc>
                			default: break;
 800285e:	bf00      	nop
                break;
 8002860:	f001 b84a 	b.w	80038f8 <UB_VGA_writeText+0x1564>
            case 'f':
            	switch(fontname)
 8002864:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d003      	beq.n	8002874 <UB_VGA_writeText+0x4e0>
 800286c:	2b02      	cmp	r3, #2
 800286e:	d02e      	beq.n	80028ce <UB_VGA_writeText+0x53a>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 532, color, fontsize); break;
                			default: break;
                		}
                	default: break;
            	}
                break;
 8002870:	f001 b842 	b.w	80038f8 <UB_VGA_writeText+0x1564>
            			switch(fontstyle)
 8002874:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002878:	2b03      	cmp	r3, #3
 800287a:	d01c      	beq.n	80028b6 <UB_VGA_writeText+0x522>
 800287c:	2b03      	cmp	r3, #3
 800287e:	dc25      	bgt.n	80028cc <UB_VGA_writeText+0x538>
 8002880:	2b01      	cmp	r3, #1
 8002882:	d002      	beq.n	800288a <UB_VGA_writeText+0x4f6>
 8002884:	2b02      	cmp	r3, #2
 8002886:	d00b      	beq.n	80028a0 <UB_VGA_writeText+0x50c>
            				default: break;
 8002888:	e020      	b.n	80028cc <UB_VGA_writeText+0x538>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'f', color, fontsize); break;
 800288a:	7afa      	ldrb	r2, [r7, #11]
 800288c:	89b9      	ldrh	r1, [r7, #12]
 800288e:	8ab8      	ldrh	r0, [r7, #20]
 8002890:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002894:	9300      	str	r3, [sp, #0]
 8002896:	4613      	mov	r3, r2
 8002898:	2266      	movs	r2, #102	; 0x66
 800289a:	f7ff fcbf 	bl	800221c <UB_VGA_DrawBitmap>
 800289e:	e016      	b.n	80028ce <UB_VGA_writeText+0x53a>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'F', color, fontsize); break;
 80028a0:	7afa      	ldrb	r2, [r7, #11]
 80028a2:	89b9      	ldrh	r1, [r7, #12]
 80028a4:	8ab8      	ldrh	r0, [r7, #20]
 80028a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	4613      	mov	r3, r2
 80028ae:	2246      	movs	r2, #70	; 0x46
 80028b0:	f7ff fcb4 	bl	800221c <UB_VGA_DrawBitmap>
 80028b4:	e00b      	b.n	80028ce <UB_VGA_writeText+0x53a>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 5, color, fontsize); break;
 80028b6:	7afa      	ldrb	r2, [r7, #11]
 80028b8:	89b9      	ldrh	r1, [r7, #12]
 80028ba:	8ab8      	ldrh	r0, [r7, #20]
 80028bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80028c0:	9300      	str	r3, [sp, #0]
 80028c2:	4613      	mov	r3, r2
 80028c4:	2205      	movs	r2, #5
 80028c6:	f7ff fca9 	bl	800221c <UB_VGA_DrawBitmap>
 80028ca:	e000      	b.n	80028ce <UB_VGA_writeText+0x53a>
            				default: break;
 80028cc:	bf00      	nop
                		switch(fontstyle)
 80028ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80028d2:	2b03      	cmp	r3, #3
 80028d4:	d01d      	beq.n	8002912 <UB_VGA_writeText+0x57e>
 80028d6:	2b03      	cmp	r3, #3
 80028d8:	dc27      	bgt.n	800292a <UB_VGA_writeText+0x596>
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d002      	beq.n	80028e4 <UB_VGA_writeText+0x550>
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d00b      	beq.n	80028fa <UB_VGA_writeText+0x566>
                			default: break;
 80028e2:	e022      	b.n	800292a <UB_VGA_writeText+0x596>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 32, color, fontsize); break;
 80028e4:	7afa      	ldrb	r2, [r7, #11]
 80028e6:	89b9      	ldrh	r1, [r7, #12]
 80028e8:	8ab8      	ldrh	r0, [r7, #20]
 80028ea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80028ee:	9300      	str	r3, [sp, #0]
 80028f0:	4613      	mov	r3, r2
 80028f2:	2220      	movs	r2, #32
 80028f4:	f7ff fc92 	bl	800221c <UB_VGA_DrawBitmap>
 80028f8:	e018      	b.n	800292c <UB_VGA_writeText+0x598>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 505, color, fontsize); break;
 80028fa:	7afa      	ldrb	r2, [r7, #11]
 80028fc:	89b9      	ldrh	r1, [r7, #12]
 80028fe:	8ab8      	ldrh	r0, [r7, #20]
 8002900:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	4613      	mov	r3, r2
 8002908:	f240 12f9 	movw	r2, #505	; 0x1f9
 800290c:	f7ff fc86 	bl	800221c <UB_VGA_DrawBitmap>
 8002910:	e00c      	b.n	800292c <UB_VGA_writeText+0x598>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 532, color, fontsize); break;
 8002912:	7afa      	ldrb	r2, [r7, #11]
 8002914:	89b9      	ldrh	r1, [r7, #12]
 8002916:	8ab8      	ldrh	r0, [r7, #20]
 8002918:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	4613      	mov	r3, r2
 8002920:	f44f 7205 	mov.w	r2, #532	; 0x214
 8002924:	f7ff fc7a 	bl	800221c <UB_VGA_DrawBitmap>
 8002928:	e000      	b.n	800292c <UB_VGA_writeText+0x598>
                			default: break;
 800292a:	bf00      	nop
                break;
 800292c:	f000 bfe4 	b.w	80038f8 <UB_VGA_writeText+0x1564>
            case 'g':
            	switch(fontname)
 8002930:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d003      	beq.n	8002940 <UB_VGA_writeText+0x5ac>
 8002938:	2b02      	cmp	r3, #2
 800293a:	d02e      	beq.n	800299a <UB_VGA_writeText+0x606>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 533, color, fontsize); break;
                			default: break;
                		}
                	default: break;
            	}
                break;
 800293c:	f000 bfdc 	b.w	80038f8 <UB_VGA_writeText+0x1564>
            			switch(fontstyle)
 8002940:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002944:	2b03      	cmp	r3, #3
 8002946:	d01c      	beq.n	8002982 <UB_VGA_writeText+0x5ee>
 8002948:	2b03      	cmp	r3, #3
 800294a:	dc25      	bgt.n	8002998 <UB_VGA_writeText+0x604>
 800294c:	2b01      	cmp	r3, #1
 800294e:	d002      	beq.n	8002956 <UB_VGA_writeText+0x5c2>
 8002950:	2b02      	cmp	r3, #2
 8002952:	d00b      	beq.n	800296c <UB_VGA_writeText+0x5d8>
            				default: break;
 8002954:	e020      	b.n	8002998 <UB_VGA_writeText+0x604>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'g', color, fontsize); break;
 8002956:	7afa      	ldrb	r2, [r7, #11]
 8002958:	89b9      	ldrh	r1, [r7, #12]
 800295a:	8ab8      	ldrh	r0, [r7, #20]
 800295c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002960:	9300      	str	r3, [sp, #0]
 8002962:	4613      	mov	r3, r2
 8002964:	2267      	movs	r2, #103	; 0x67
 8002966:	f7ff fc59 	bl	800221c <UB_VGA_DrawBitmap>
 800296a:	e016      	b.n	800299a <UB_VGA_writeText+0x606>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'G', color, fontsize); break;
 800296c:	7afa      	ldrb	r2, [r7, #11]
 800296e:	89b9      	ldrh	r1, [r7, #12]
 8002970:	8ab8      	ldrh	r0, [r7, #20]
 8002972:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	4613      	mov	r3, r2
 800297a:	2247      	movs	r2, #71	; 0x47
 800297c:	f7ff fc4e 	bl	800221c <UB_VGA_DrawBitmap>
 8002980:	e00b      	b.n	800299a <UB_VGA_writeText+0x606>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 6, color, fontsize); break;
 8002982:	7afa      	ldrb	r2, [r7, #11]
 8002984:	89b9      	ldrh	r1, [r7, #12]
 8002986:	8ab8      	ldrh	r0, [r7, #20]
 8002988:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	4613      	mov	r3, r2
 8002990:	2206      	movs	r2, #6
 8002992:	f7ff fc43 	bl	800221c <UB_VGA_DrawBitmap>
 8002996:	e000      	b.n	800299a <UB_VGA_writeText+0x606>
            				default: break;
 8002998:	bf00      	nop
                		switch(fontstyle)
 800299a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800299e:	2b03      	cmp	r3, #3
 80029a0:	d01d      	beq.n	80029de <UB_VGA_writeText+0x64a>
 80029a2:	2b03      	cmp	r3, #3
 80029a4:	dc27      	bgt.n	80029f6 <UB_VGA_writeText+0x662>
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d002      	beq.n	80029b0 <UB_VGA_writeText+0x61c>
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d00b      	beq.n	80029c6 <UB_VGA_writeText+0x632>
                			default: break;
 80029ae:	e022      	b.n	80029f6 <UB_VGA_writeText+0x662>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 33, color, fontsize); break;
 80029b0:	7afa      	ldrb	r2, [r7, #11]
 80029b2:	89b9      	ldrh	r1, [r7, #12]
 80029b4:	8ab8      	ldrh	r0, [r7, #20]
 80029b6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	4613      	mov	r3, r2
 80029be:	2221      	movs	r2, #33	; 0x21
 80029c0:	f7ff fc2c 	bl	800221c <UB_VGA_DrawBitmap>
 80029c4:	e018      	b.n	80029f8 <UB_VGA_writeText+0x664>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 506, color, fontsize); break;
 80029c6:	7afa      	ldrb	r2, [r7, #11]
 80029c8:	89b9      	ldrh	r1, [r7, #12]
 80029ca:	8ab8      	ldrh	r0, [r7, #20]
 80029cc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80029d0:	9300      	str	r3, [sp, #0]
 80029d2:	4613      	mov	r3, r2
 80029d4:	f44f 72fd 	mov.w	r2, #506	; 0x1fa
 80029d8:	f7ff fc20 	bl	800221c <UB_VGA_DrawBitmap>
 80029dc:	e00c      	b.n	80029f8 <UB_VGA_writeText+0x664>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 533, color, fontsize); break;
 80029de:	7afa      	ldrb	r2, [r7, #11]
 80029e0:	89b9      	ldrh	r1, [r7, #12]
 80029e2:	8ab8      	ldrh	r0, [r7, #20]
 80029e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	4613      	mov	r3, r2
 80029ec:	f240 2215 	movw	r2, #533	; 0x215
 80029f0:	f7ff fc14 	bl	800221c <UB_VGA_DrawBitmap>
 80029f4:	e000      	b.n	80029f8 <UB_VGA_writeText+0x664>
                			default: break;
 80029f6:	bf00      	nop
                break;
 80029f8:	f000 bf7e 	b.w	80038f8 <UB_VGA_writeText+0x1564>
            case 'h':
            	switch(fontname)
 80029fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d003      	beq.n	8002a0c <UB_VGA_writeText+0x678>
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d02e      	beq.n	8002a66 <UB_VGA_writeText+0x6d2>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 534, color, fontsize); break;
                			default: break;
                		}
                	default: break;
            	}
                break;
 8002a08:	f000 bf76 	b.w	80038f8 <UB_VGA_writeText+0x1564>
            			switch(fontstyle)
 8002a0c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002a10:	2b03      	cmp	r3, #3
 8002a12:	d01c      	beq.n	8002a4e <UB_VGA_writeText+0x6ba>
 8002a14:	2b03      	cmp	r3, #3
 8002a16:	dc25      	bgt.n	8002a64 <UB_VGA_writeText+0x6d0>
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d002      	beq.n	8002a22 <UB_VGA_writeText+0x68e>
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d00b      	beq.n	8002a38 <UB_VGA_writeText+0x6a4>
            				default: break;
 8002a20:	e020      	b.n	8002a64 <UB_VGA_writeText+0x6d0>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'h', color, fontsize); break;
 8002a22:	7afa      	ldrb	r2, [r7, #11]
 8002a24:	89b9      	ldrh	r1, [r7, #12]
 8002a26:	8ab8      	ldrh	r0, [r7, #20]
 8002a28:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	2268      	movs	r2, #104	; 0x68
 8002a32:	f7ff fbf3 	bl	800221c <UB_VGA_DrawBitmap>
 8002a36:	e016      	b.n	8002a66 <UB_VGA_writeText+0x6d2>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'H', color, fontsize); break;
 8002a38:	7afa      	ldrb	r2, [r7, #11]
 8002a3a:	89b9      	ldrh	r1, [r7, #12]
 8002a3c:	8ab8      	ldrh	r0, [r7, #20]
 8002a3e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002a42:	9300      	str	r3, [sp, #0]
 8002a44:	4613      	mov	r3, r2
 8002a46:	2248      	movs	r2, #72	; 0x48
 8002a48:	f7ff fbe8 	bl	800221c <UB_VGA_DrawBitmap>
 8002a4c:	e00b      	b.n	8002a66 <UB_VGA_writeText+0x6d2>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 7, color, fontsize); break;
 8002a4e:	7afa      	ldrb	r2, [r7, #11]
 8002a50:	89b9      	ldrh	r1, [r7, #12]
 8002a52:	8ab8      	ldrh	r0, [r7, #20]
 8002a54:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002a58:	9300      	str	r3, [sp, #0]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	2207      	movs	r2, #7
 8002a5e:	f7ff fbdd 	bl	800221c <UB_VGA_DrawBitmap>
 8002a62:	e000      	b.n	8002a66 <UB_VGA_writeText+0x6d2>
            				default: break;
 8002a64:	bf00      	nop
                		switch(fontstyle)
 8002a66:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002a6a:	2b03      	cmp	r3, #3
 8002a6c:	d01d      	beq.n	8002aaa <UB_VGA_writeText+0x716>
 8002a6e:	2b03      	cmp	r3, #3
 8002a70:	dc27      	bgt.n	8002ac2 <UB_VGA_writeText+0x72e>
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d002      	beq.n	8002a7c <UB_VGA_writeText+0x6e8>
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d00b      	beq.n	8002a92 <UB_VGA_writeText+0x6fe>
                			default: break;
 8002a7a:	e022      	b.n	8002ac2 <UB_VGA_writeText+0x72e>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 34, color, fontsize); break;
 8002a7c:	7afa      	ldrb	r2, [r7, #11]
 8002a7e:	89b9      	ldrh	r1, [r7, #12]
 8002a80:	8ab8      	ldrh	r0, [r7, #20]
 8002a82:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	2222      	movs	r2, #34	; 0x22
 8002a8c:	f7ff fbc6 	bl	800221c <UB_VGA_DrawBitmap>
 8002a90:	e018      	b.n	8002ac4 <UB_VGA_writeText+0x730>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 507, color, fontsize); break;
 8002a92:	7afa      	ldrb	r2, [r7, #11]
 8002a94:	89b9      	ldrh	r1, [r7, #12]
 8002a96:	8ab8      	ldrh	r0, [r7, #20]
 8002a98:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	f240 12fb 	movw	r2, #507	; 0x1fb
 8002aa4:	f7ff fbba 	bl	800221c <UB_VGA_DrawBitmap>
 8002aa8:	e00c      	b.n	8002ac4 <UB_VGA_writeText+0x730>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 534, color, fontsize); break;
 8002aaa:	7afa      	ldrb	r2, [r7, #11]
 8002aac:	89b9      	ldrh	r1, [r7, #12]
 8002aae:	8ab8      	ldrh	r0, [r7, #20]
 8002ab0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002ab4:	9300      	str	r3, [sp, #0]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	f240 2216 	movw	r2, #534	; 0x216
 8002abc:	f7ff fbae 	bl	800221c <UB_VGA_DrawBitmap>
 8002ac0:	e000      	b.n	8002ac4 <UB_VGA_writeText+0x730>
                			default: break;
 8002ac2:	bf00      	nop
                break;
 8002ac4:	f000 bf18 	b.w	80038f8 <UB_VGA_writeText+0x1564>
            case 'i':
            	switch(fontname)
 8002ac8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d003      	beq.n	8002ad8 <UB_VGA_writeText+0x744>
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d02e      	beq.n	8002b32 <UB_VGA_writeText+0x79e>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 535, color, fontsize); break;
                			default: break;
                		}
                	default: break;
            	}
                break;
 8002ad4:	f000 bf10 	b.w	80038f8 <UB_VGA_writeText+0x1564>
            			switch(fontstyle)
 8002ad8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002adc:	2b03      	cmp	r3, #3
 8002ade:	d01c      	beq.n	8002b1a <UB_VGA_writeText+0x786>
 8002ae0:	2b03      	cmp	r3, #3
 8002ae2:	dc25      	bgt.n	8002b30 <UB_VGA_writeText+0x79c>
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d002      	beq.n	8002aee <UB_VGA_writeText+0x75a>
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d00b      	beq.n	8002b04 <UB_VGA_writeText+0x770>
            				default: break;
 8002aec:	e020      	b.n	8002b30 <UB_VGA_writeText+0x79c>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'i', color, fontsize); break;
 8002aee:	7afa      	ldrb	r2, [r7, #11]
 8002af0:	89b9      	ldrh	r1, [r7, #12]
 8002af2:	8ab8      	ldrh	r0, [r7, #20]
 8002af4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	4613      	mov	r3, r2
 8002afc:	2269      	movs	r2, #105	; 0x69
 8002afe:	f7ff fb8d 	bl	800221c <UB_VGA_DrawBitmap>
 8002b02:	e016      	b.n	8002b32 <UB_VGA_writeText+0x79e>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'I', color, fontsize); break;
 8002b04:	7afa      	ldrb	r2, [r7, #11]
 8002b06:	89b9      	ldrh	r1, [r7, #12]
 8002b08:	8ab8      	ldrh	r0, [r7, #20]
 8002b0a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002b0e:	9300      	str	r3, [sp, #0]
 8002b10:	4613      	mov	r3, r2
 8002b12:	2249      	movs	r2, #73	; 0x49
 8002b14:	f7ff fb82 	bl	800221c <UB_VGA_DrawBitmap>
 8002b18:	e00b      	b.n	8002b32 <UB_VGA_writeText+0x79e>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 8, color, fontsize); break;
 8002b1a:	7afa      	ldrb	r2, [r7, #11]
 8002b1c:	89b9      	ldrh	r1, [r7, #12]
 8002b1e:	8ab8      	ldrh	r0, [r7, #20]
 8002b20:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002b24:	9300      	str	r3, [sp, #0]
 8002b26:	4613      	mov	r3, r2
 8002b28:	2208      	movs	r2, #8
 8002b2a:	f7ff fb77 	bl	800221c <UB_VGA_DrawBitmap>
 8002b2e:	e000      	b.n	8002b32 <UB_VGA_writeText+0x79e>
            				default: break;
 8002b30:	bf00      	nop
                		switch(fontstyle)
 8002b32:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002b36:	2b03      	cmp	r3, #3
 8002b38:	d01d      	beq.n	8002b76 <UB_VGA_writeText+0x7e2>
 8002b3a:	2b03      	cmp	r3, #3
 8002b3c:	dc27      	bgt.n	8002b8e <UB_VGA_writeText+0x7fa>
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d002      	beq.n	8002b48 <UB_VGA_writeText+0x7b4>
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d00b      	beq.n	8002b5e <UB_VGA_writeText+0x7ca>
                			default: break;
 8002b46:	e022      	b.n	8002b8e <UB_VGA_writeText+0x7fa>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 35, color, fontsize); break;
 8002b48:	7afa      	ldrb	r2, [r7, #11]
 8002b4a:	89b9      	ldrh	r1, [r7, #12]
 8002b4c:	8ab8      	ldrh	r0, [r7, #20]
 8002b4e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	4613      	mov	r3, r2
 8002b56:	2223      	movs	r2, #35	; 0x23
 8002b58:	f7ff fb60 	bl	800221c <UB_VGA_DrawBitmap>
 8002b5c:	e018      	b.n	8002b90 <UB_VGA_writeText+0x7fc>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 508, color, fontsize); break;
 8002b5e:	7afa      	ldrb	r2, [r7, #11]
 8002b60:	89b9      	ldrh	r1, [r7, #12]
 8002b62:	8ab8      	ldrh	r0, [r7, #20]
 8002b64:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002b68:	9300      	str	r3, [sp, #0]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 8002b70:	f7ff fb54 	bl	800221c <UB_VGA_DrawBitmap>
 8002b74:	e00c      	b.n	8002b90 <UB_VGA_writeText+0x7fc>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 535, color, fontsize); break;
 8002b76:	7afa      	ldrb	r2, [r7, #11]
 8002b78:	89b9      	ldrh	r1, [r7, #12]
 8002b7a:	8ab8      	ldrh	r0, [r7, #20]
 8002b7c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002b80:	9300      	str	r3, [sp, #0]
 8002b82:	4613      	mov	r3, r2
 8002b84:	f240 2217 	movw	r2, #535	; 0x217
 8002b88:	f7ff fb48 	bl	800221c <UB_VGA_DrawBitmap>
 8002b8c:	e000      	b.n	8002b90 <UB_VGA_writeText+0x7fc>
                			default: break;
 8002b8e:	bf00      	nop
                break;
 8002b90:	f000 beb2 	b.w	80038f8 <UB_VGA_writeText+0x1564>
            case 'j':
            	switch(fontname)
 8002b94:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d003      	beq.n	8002ba4 <UB_VGA_writeText+0x810>
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d02e      	beq.n	8002bfe <UB_VGA_writeText+0x86a>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 536, color, fontsize); break;
                			default: break;
                		}
                	default: break;
            	}
                break;
 8002ba0:	f000 beaa 	b.w	80038f8 <UB_VGA_writeText+0x1564>
            			switch(fontstyle)
 8002ba4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002ba8:	2b03      	cmp	r3, #3
 8002baa:	d01c      	beq.n	8002be6 <UB_VGA_writeText+0x852>
 8002bac:	2b03      	cmp	r3, #3
 8002bae:	dc25      	bgt.n	8002bfc <UB_VGA_writeText+0x868>
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d002      	beq.n	8002bba <UB_VGA_writeText+0x826>
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d00b      	beq.n	8002bd0 <UB_VGA_writeText+0x83c>
            				default: break;
 8002bb8:	e020      	b.n	8002bfc <UB_VGA_writeText+0x868>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'j', color, fontsize); break;
 8002bba:	7afa      	ldrb	r2, [r7, #11]
 8002bbc:	89b9      	ldrh	r1, [r7, #12]
 8002bbe:	8ab8      	ldrh	r0, [r7, #20]
 8002bc0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002bc4:	9300      	str	r3, [sp, #0]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	226a      	movs	r2, #106	; 0x6a
 8002bca:	f7ff fb27 	bl	800221c <UB_VGA_DrawBitmap>
 8002bce:	e016      	b.n	8002bfe <UB_VGA_writeText+0x86a>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'J', color, fontsize); break;
 8002bd0:	7afa      	ldrb	r2, [r7, #11]
 8002bd2:	89b9      	ldrh	r1, [r7, #12]
 8002bd4:	8ab8      	ldrh	r0, [r7, #20]
 8002bd6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002bda:	9300      	str	r3, [sp, #0]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	224a      	movs	r2, #74	; 0x4a
 8002be0:	f7ff fb1c 	bl	800221c <UB_VGA_DrawBitmap>
 8002be4:	e00b      	b.n	8002bfe <UB_VGA_writeText+0x86a>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 9, color, fontsize); break;
 8002be6:	7afa      	ldrb	r2, [r7, #11]
 8002be8:	89b9      	ldrh	r1, [r7, #12]
 8002bea:	8ab8      	ldrh	r0, [r7, #20]
 8002bec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	2209      	movs	r2, #9
 8002bf6:	f7ff fb11 	bl	800221c <UB_VGA_DrawBitmap>
 8002bfa:	e000      	b.n	8002bfe <UB_VGA_writeText+0x86a>
            				default: break;
 8002bfc:	bf00      	nop
                		switch(fontstyle)
 8002bfe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002c02:	2b03      	cmp	r3, #3
 8002c04:	d01d      	beq.n	8002c42 <UB_VGA_writeText+0x8ae>
 8002c06:	2b03      	cmp	r3, #3
 8002c08:	dc27      	bgt.n	8002c5a <UB_VGA_writeText+0x8c6>
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d002      	beq.n	8002c14 <UB_VGA_writeText+0x880>
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d00b      	beq.n	8002c2a <UB_VGA_writeText+0x896>
                			default: break;
 8002c12:	e022      	b.n	8002c5a <UB_VGA_writeText+0x8c6>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 36, color, fontsize); break;
 8002c14:	7afa      	ldrb	r2, [r7, #11]
 8002c16:	89b9      	ldrh	r1, [r7, #12]
 8002c18:	8ab8      	ldrh	r0, [r7, #20]
 8002c1a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002c1e:	9300      	str	r3, [sp, #0]
 8002c20:	4613      	mov	r3, r2
 8002c22:	2224      	movs	r2, #36	; 0x24
 8002c24:	f7ff fafa 	bl	800221c <UB_VGA_DrawBitmap>
 8002c28:	e018      	b.n	8002c5c <UB_VGA_writeText+0x8c8>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 509, color, fontsize); break;
 8002c2a:	7afa      	ldrb	r2, [r7, #11]
 8002c2c:	89b9      	ldrh	r1, [r7, #12]
 8002c2e:	8ab8      	ldrh	r0, [r7, #20]
 8002c30:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002c34:	9300      	str	r3, [sp, #0]
 8002c36:	4613      	mov	r3, r2
 8002c38:	f240 12fd 	movw	r2, #509	; 0x1fd
 8002c3c:	f7ff faee 	bl	800221c <UB_VGA_DrawBitmap>
 8002c40:	e00c      	b.n	8002c5c <UB_VGA_writeText+0x8c8>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 536, color, fontsize); break;
 8002c42:	7afa      	ldrb	r2, [r7, #11]
 8002c44:	89b9      	ldrh	r1, [r7, #12]
 8002c46:	8ab8      	ldrh	r0, [r7, #20]
 8002c48:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002c4c:	9300      	str	r3, [sp, #0]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	f44f 7206 	mov.w	r2, #536	; 0x218
 8002c54:	f7ff fae2 	bl	800221c <UB_VGA_DrawBitmap>
 8002c58:	e000      	b.n	8002c5c <UB_VGA_writeText+0x8c8>
                			default: break;
 8002c5a:	bf00      	nop
                break;
 8002c5c:	f000 be4c 	b.w	80038f8 <UB_VGA_writeText+0x1564>
            case 'k':
            	switch(fontname)
 8002c60:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d003      	beq.n	8002c70 <UB_VGA_writeText+0x8dc>
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d02e      	beq.n	8002cca <UB_VGA_writeText+0x936>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 537, color, fontsize); break;
                			default: break;
                		}
                	default: break;
            	}
                break;
 8002c6c:	f000 be44 	b.w	80038f8 <UB_VGA_writeText+0x1564>
            			switch(fontstyle)
 8002c70:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002c74:	2b03      	cmp	r3, #3
 8002c76:	d01c      	beq.n	8002cb2 <UB_VGA_writeText+0x91e>
 8002c78:	2b03      	cmp	r3, #3
 8002c7a:	dc25      	bgt.n	8002cc8 <UB_VGA_writeText+0x934>
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d002      	beq.n	8002c86 <UB_VGA_writeText+0x8f2>
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d00b      	beq.n	8002c9c <UB_VGA_writeText+0x908>
            				default: break;
 8002c84:	e020      	b.n	8002cc8 <UB_VGA_writeText+0x934>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'k', color, fontsize); break;
 8002c86:	7afa      	ldrb	r2, [r7, #11]
 8002c88:	89b9      	ldrh	r1, [r7, #12]
 8002c8a:	8ab8      	ldrh	r0, [r7, #20]
 8002c8c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002c90:	9300      	str	r3, [sp, #0]
 8002c92:	4613      	mov	r3, r2
 8002c94:	226b      	movs	r2, #107	; 0x6b
 8002c96:	f7ff fac1 	bl	800221c <UB_VGA_DrawBitmap>
 8002c9a:	e016      	b.n	8002cca <UB_VGA_writeText+0x936>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'K', color, fontsize); break;
 8002c9c:	7afa      	ldrb	r2, [r7, #11]
 8002c9e:	89b9      	ldrh	r1, [r7, #12]
 8002ca0:	8ab8      	ldrh	r0, [r7, #20]
 8002ca2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	224b      	movs	r2, #75	; 0x4b
 8002cac:	f7ff fab6 	bl	800221c <UB_VGA_DrawBitmap>
 8002cb0:	e00b      	b.n	8002cca <UB_VGA_writeText+0x936>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 10, color, fontsize); break;
 8002cb2:	7afa      	ldrb	r2, [r7, #11]
 8002cb4:	89b9      	ldrh	r1, [r7, #12]
 8002cb6:	8ab8      	ldrh	r0, [r7, #20]
 8002cb8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	220a      	movs	r2, #10
 8002cc2:	f7ff faab 	bl	800221c <UB_VGA_DrawBitmap>
 8002cc6:	e000      	b.n	8002cca <UB_VGA_writeText+0x936>
            				default: break;
 8002cc8:	bf00      	nop
                		switch(fontstyle)
 8002cca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002cce:	2b03      	cmp	r3, #3
 8002cd0:	d01d      	beq.n	8002d0e <UB_VGA_writeText+0x97a>
 8002cd2:	2b03      	cmp	r3, #3
 8002cd4:	dc27      	bgt.n	8002d26 <UB_VGA_writeText+0x992>
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d002      	beq.n	8002ce0 <UB_VGA_writeText+0x94c>
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d00b      	beq.n	8002cf6 <UB_VGA_writeText+0x962>
                			default: break;
 8002cde:	e022      	b.n	8002d26 <UB_VGA_writeText+0x992>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 37, color, fontsize); break;
 8002ce0:	7afa      	ldrb	r2, [r7, #11]
 8002ce2:	89b9      	ldrh	r1, [r7, #12]
 8002ce4:	8ab8      	ldrh	r0, [r7, #20]
 8002ce6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002cea:	9300      	str	r3, [sp, #0]
 8002cec:	4613      	mov	r3, r2
 8002cee:	2225      	movs	r2, #37	; 0x25
 8002cf0:	f7ff fa94 	bl	800221c <UB_VGA_DrawBitmap>
 8002cf4:	e018      	b.n	8002d28 <UB_VGA_writeText+0x994>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 510, color, fontsize); break;
 8002cf6:	7afa      	ldrb	r2, [r7, #11]
 8002cf8:	89b9      	ldrh	r1, [r7, #12]
 8002cfa:	8ab8      	ldrh	r0, [r7, #20]
 8002cfc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002d00:	9300      	str	r3, [sp, #0]
 8002d02:	4613      	mov	r3, r2
 8002d04:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 8002d08:	f7ff fa88 	bl	800221c <UB_VGA_DrawBitmap>
 8002d0c:	e00c      	b.n	8002d28 <UB_VGA_writeText+0x994>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 537, color, fontsize); break;
 8002d0e:	7afa      	ldrb	r2, [r7, #11]
 8002d10:	89b9      	ldrh	r1, [r7, #12]
 8002d12:	8ab8      	ldrh	r0, [r7, #20]
 8002d14:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002d18:	9300      	str	r3, [sp, #0]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	f240 2219 	movw	r2, #537	; 0x219
 8002d20:	f7ff fa7c 	bl	800221c <UB_VGA_DrawBitmap>
 8002d24:	e000      	b.n	8002d28 <UB_VGA_writeText+0x994>
                			default: break;
 8002d26:	bf00      	nop
                break;
 8002d28:	f000 bde6 	b.w	80038f8 <UB_VGA_writeText+0x1564>
            case 'l':
            	switch(fontname)
 8002d2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d003      	beq.n	8002d3c <UB_VGA_writeText+0x9a8>
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d02e      	beq.n	8002d96 <UB_VGA_writeText+0xa02>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 538, color, fontsize); break;
                			default: break;
                		}
                	default: break;
            	}
                break;
 8002d38:	f000 bdde 	b.w	80038f8 <UB_VGA_writeText+0x1564>
            			switch(fontstyle)
 8002d3c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002d40:	2b03      	cmp	r3, #3
 8002d42:	d01c      	beq.n	8002d7e <UB_VGA_writeText+0x9ea>
 8002d44:	2b03      	cmp	r3, #3
 8002d46:	dc25      	bgt.n	8002d94 <UB_VGA_writeText+0xa00>
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d002      	beq.n	8002d52 <UB_VGA_writeText+0x9be>
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d00b      	beq.n	8002d68 <UB_VGA_writeText+0x9d4>
            				default: break;
 8002d50:	e020      	b.n	8002d94 <UB_VGA_writeText+0xa00>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'l', color, fontsize); break;
 8002d52:	7afa      	ldrb	r2, [r7, #11]
 8002d54:	89b9      	ldrh	r1, [r7, #12]
 8002d56:	8ab8      	ldrh	r0, [r7, #20]
 8002d58:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	226c      	movs	r2, #108	; 0x6c
 8002d62:	f7ff fa5b 	bl	800221c <UB_VGA_DrawBitmap>
 8002d66:	e016      	b.n	8002d96 <UB_VGA_writeText+0xa02>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'L', color, fontsize); break;
 8002d68:	7afa      	ldrb	r2, [r7, #11]
 8002d6a:	89b9      	ldrh	r1, [r7, #12]
 8002d6c:	8ab8      	ldrh	r0, [r7, #20]
 8002d6e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	4613      	mov	r3, r2
 8002d76:	224c      	movs	r2, #76	; 0x4c
 8002d78:	f7ff fa50 	bl	800221c <UB_VGA_DrawBitmap>
 8002d7c:	e00b      	b.n	8002d96 <UB_VGA_writeText+0xa02>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 11, color, fontsize); break;
 8002d7e:	7afa      	ldrb	r2, [r7, #11]
 8002d80:	89b9      	ldrh	r1, [r7, #12]
 8002d82:	8ab8      	ldrh	r0, [r7, #20]
 8002d84:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	220b      	movs	r2, #11
 8002d8e:	f7ff fa45 	bl	800221c <UB_VGA_DrawBitmap>
 8002d92:	e000      	b.n	8002d96 <UB_VGA_writeText+0xa02>
            				default: break;
 8002d94:	bf00      	nop
                		switch(fontstyle)
 8002d96:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002d9a:	2b03      	cmp	r3, #3
 8002d9c:	d01d      	beq.n	8002dda <UB_VGA_writeText+0xa46>
 8002d9e:	2b03      	cmp	r3, #3
 8002da0:	dc27      	bgt.n	8002df2 <UB_VGA_writeText+0xa5e>
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d002      	beq.n	8002dac <UB_VGA_writeText+0xa18>
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d00b      	beq.n	8002dc2 <UB_VGA_writeText+0xa2e>
                			default: break;
 8002daa:	e022      	b.n	8002df2 <UB_VGA_writeText+0xa5e>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 38, color, fontsize); break;
 8002dac:	7afa      	ldrb	r2, [r7, #11]
 8002dae:	89b9      	ldrh	r1, [r7, #12]
 8002db0:	8ab8      	ldrh	r0, [r7, #20]
 8002db2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	4613      	mov	r3, r2
 8002dba:	2226      	movs	r2, #38	; 0x26
 8002dbc:	f7ff fa2e 	bl	800221c <UB_VGA_DrawBitmap>
 8002dc0:	e018      	b.n	8002df4 <UB_VGA_writeText+0xa60>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 511, color, fontsize); break;
 8002dc2:	7afa      	ldrb	r2, [r7, #11]
 8002dc4:	89b9      	ldrh	r1, [r7, #12]
 8002dc6:	8ab8      	ldrh	r0, [r7, #20]
 8002dc8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002dd4:	f7ff fa22 	bl	800221c <UB_VGA_DrawBitmap>
 8002dd8:	e00c      	b.n	8002df4 <UB_VGA_writeText+0xa60>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 538, color, fontsize); break;
 8002dda:	7afa      	ldrb	r2, [r7, #11]
 8002ddc:	89b9      	ldrh	r1, [r7, #12]
 8002dde:	8ab8      	ldrh	r0, [r7, #20]
 8002de0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	4613      	mov	r3, r2
 8002de8:	f240 221a 	movw	r2, #538	; 0x21a
 8002dec:	f7ff fa16 	bl	800221c <UB_VGA_DrawBitmap>
 8002df0:	e000      	b.n	8002df4 <UB_VGA_writeText+0xa60>
                			default: break;
 8002df2:	bf00      	nop
                break;
 8002df4:	f000 bd80 	b.w	80038f8 <UB_VGA_writeText+0x1564>
            case 'm':
            	switch(fontname)
 8002df8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d003      	beq.n	8002e08 <UB_VGA_writeText+0xa74>
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d02e      	beq.n	8002e62 <UB_VGA_writeText+0xace>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 539, color, fontsize); break;
                			default: break;
                		}
                	default: break;
            	}
                break;
 8002e04:	f000 bd78 	b.w	80038f8 <UB_VGA_writeText+0x1564>
            			switch(fontstyle)
 8002e08:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002e0c:	2b03      	cmp	r3, #3
 8002e0e:	d01c      	beq.n	8002e4a <UB_VGA_writeText+0xab6>
 8002e10:	2b03      	cmp	r3, #3
 8002e12:	dc25      	bgt.n	8002e60 <UB_VGA_writeText+0xacc>
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d002      	beq.n	8002e1e <UB_VGA_writeText+0xa8a>
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d00b      	beq.n	8002e34 <UB_VGA_writeText+0xaa0>
            				default: break;
 8002e1c:	e020      	b.n	8002e60 <UB_VGA_writeText+0xacc>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'm', color, fontsize); break;
 8002e1e:	7afa      	ldrb	r2, [r7, #11]
 8002e20:	89b9      	ldrh	r1, [r7, #12]
 8002e22:	8ab8      	ldrh	r0, [r7, #20]
 8002e24:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002e28:	9300      	str	r3, [sp, #0]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	226d      	movs	r2, #109	; 0x6d
 8002e2e:	f7ff f9f5 	bl	800221c <UB_VGA_DrawBitmap>
 8002e32:	e016      	b.n	8002e62 <UB_VGA_writeText+0xace>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'M', color, fontsize); break;
 8002e34:	7afa      	ldrb	r2, [r7, #11]
 8002e36:	89b9      	ldrh	r1, [r7, #12]
 8002e38:	8ab8      	ldrh	r0, [r7, #20]
 8002e3a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	4613      	mov	r3, r2
 8002e42:	224d      	movs	r2, #77	; 0x4d
 8002e44:	f7ff f9ea 	bl	800221c <UB_VGA_DrawBitmap>
 8002e48:	e00b      	b.n	8002e62 <UB_VGA_writeText+0xace>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 12, color, fontsize); break;
 8002e4a:	7afa      	ldrb	r2, [r7, #11]
 8002e4c:	89b9      	ldrh	r1, [r7, #12]
 8002e4e:	8ab8      	ldrh	r0, [r7, #20]
 8002e50:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	4613      	mov	r3, r2
 8002e58:	220c      	movs	r2, #12
 8002e5a:	f7ff f9df 	bl	800221c <UB_VGA_DrawBitmap>
 8002e5e:	e000      	b.n	8002e62 <UB_VGA_writeText+0xace>
            				default: break;
 8002e60:	bf00      	nop
                		switch(fontstyle)
 8002e62:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002e66:	2b03      	cmp	r3, #3
 8002e68:	d01d      	beq.n	8002ea6 <UB_VGA_writeText+0xb12>
 8002e6a:	2b03      	cmp	r3, #3
 8002e6c:	dc27      	bgt.n	8002ebe <UB_VGA_writeText+0xb2a>
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d002      	beq.n	8002e78 <UB_VGA_writeText+0xae4>
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d00b      	beq.n	8002e8e <UB_VGA_writeText+0xafa>
                			default: break;
 8002e76:	e022      	b.n	8002ebe <UB_VGA_writeText+0xb2a>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 39, color, fontsize); break;
 8002e78:	7afa      	ldrb	r2, [r7, #11]
 8002e7a:	89b9      	ldrh	r1, [r7, #12]
 8002e7c:	8ab8      	ldrh	r0, [r7, #20]
 8002e7e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002e82:	9300      	str	r3, [sp, #0]
 8002e84:	4613      	mov	r3, r2
 8002e86:	2227      	movs	r2, #39	; 0x27
 8002e88:	f7ff f9c8 	bl	800221c <UB_VGA_DrawBitmap>
 8002e8c:	e018      	b.n	8002ec0 <UB_VGA_writeText+0xb2c>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 512, color, fontsize); break;
 8002e8e:	7afa      	ldrb	r2, [r7, #11]
 8002e90:	89b9      	ldrh	r1, [r7, #12]
 8002e92:	8ab8      	ldrh	r0, [r7, #20]
 8002e94:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002e98:	9300      	str	r3, [sp, #0]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ea0:	f7ff f9bc 	bl	800221c <UB_VGA_DrawBitmap>
 8002ea4:	e00c      	b.n	8002ec0 <UB_VGA_writeText+0xb2c>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 539, color, fontsize); break;
 8002ea6:	7afa      	ldrb	r2, [r7, #11]
 8002ea8:	89b9      	ldrh	r1, [r7, #12]
 8002eaa:	8ab8      	ldrh	r0, [r7, #20]
 8002eac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002eb0:	9300      	str	r3, [sp, #0]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	f240 221b 	movw	r2, #539	; 0x21b
 8002eb8:	f7ff f9b0 	bl	800221c <UB_VGA_DrawBitmap>
 8002ebc:	e000      	b.n	8002ec0 <UB_VGA_writeText+0xb2c>
                			default: break;
 8002ebe:	bf00      	nop
                break;
 8002ec0:	f000 bd1a 	b.w	80038f8 <UB_VGA_writeText+0x1564>
            case 'n':
            	switch(fontname)
 8002ec4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d003      	beq.n	8002ed4 <UB_VGA_writeText+0xb40>
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d02e      	beq.n	8002f2e <UB_VGA_writeText+0xb9a>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 540, color, fontsize); break;
                			default: break;
                		}
                	default: break;
            	}
                break;
 8002ed0:	f000 bd12 	b.w	80038f8 <UB_VGA_writeText+0x1564>
            			switch(fontstyle)
 8002ed4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002ed8:	2b03      	cmp	r3, #3
 8002eda:	d01c      	beq.n	8002f16 <UB_VGA_writeText+0xb82>
 8002edc:	2b03      	cmp	r3, #3
 8002ede:	dc25      	bgt.n	8002f2c <UB_VGA_writeText+0xb98>
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d002      	beq.n	8002eea <UB_VGA_writeText+0xb56>
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d00b      	beq.n	8002f00 <UB_VGA_writeText+0xb6c>
            				default: break;
 8002ee8:	e020      	b.n	8002f2c <UB_VGA_writeText+0xb98>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'n', color, fontsize); break;
 8002eea:	7afa      	ldrb	r2, [r7, #11]
 8002eec:	89b9      	ldrh	r1, [r7, #12]
 8002eee:	8ab8      	ldrh	r0, [r7, #20]
 8002ef0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002ef4:	9300      	str	r3, [sp, #0]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	226e      	movs	r2, #110	; 0x6e
 8002efa:	f7ff f98f 	bl	800221c <UB_VGA_DrawBitmap>
 8002efe:	e016      	b.n	8002f2e <UB_VGA_writeText+0xb9a>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'N', color, fontsize); break;
 8002f00:	7afa      	ldrb	r2, [r7, #11]
 8002f02:	89b9      	ldrh	r1, [r7, #12]
 8002f04:	8ab8      	ldrh	r0, [r7, #20]
 8002f06:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	224e      	movs	r2, #78	; 0x4e
 8002f10:	f7ff f984 	bl	800221c <UB_VGA_DrawBitmap>
 8002f14:	e00b      	b.n	8002f2e <UB_VGA_writeText+0xb9a>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 13, color, fontsize); break;
 8002f16:	7afa      	ldrb	r2, [r7, #11]
 8002f18:	89b9      	ldrh	r1, [r7, #12]
 8002f1a:	8ab8      	ldrh	r0, [r7, #20]
 8002f1c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002f20:	9300      	str	r3, [sp, #0]
 8002f22:	4613      	mov	r3, r2
 8002f24:	220d      	movs	r2, #13
 8002f26:	f7ff f979 	bl	800221c <UB_VGA_DrawBitmap>
 8002f2a:	e000      	b.n	8002f2e <UB_VGA_writeText+0xb9a>
            				default: break;
 8002f2c:	bf00      	nop
                		switch(fontstyle)
 8002f2e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002f32:	2b03      	cmp	r3, #3
 8002f34:	d01d      	beq.n	8002f72 <UB_VGA_writeText+0xbde>
 8002f36:	2b03      	cmp	r3, #3
 8002f38:	dc27      	bgt.n	8002f8a <UB_VGA_writeText+0xbf6>
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d002      	beq.n	8002f44 <UB_VGA_writeText+0xbb0>
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d00b      	beq.n	8002f5a <UB_VGA_writeText+0xbc6>
                			default: break;
 8002f42:	e022      	b.n	8002f8a <UB_VGA_writeText+0xbf6>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 40, color, fontsize); break;
 8002f44:	7afa      	ldrb	r2, [r7, #11]
 8002f46:	89b9      	ldrh	r1, [r7, #12]
 8002f48:	8ab8      	ldrh	r0, [r7, #20]
 8002f4a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002f4e:	9300      	str	r3, [sp, #0]
 8002f50:	4613      	mov	r3, r2
 8002f52:	2228      	movs	r2, #40	; 0x28
 8002f54:	f7ff f962 	bl	800221c <UB_VGA_DrawBitmap>
 8002f58:	e018      	b.n	8002f8c <UB_VGA_writeText+0xbf8>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 513, color, fontsize); break;
 8002f5a:	7afa      	ldrb	r2, [r7, #11]
 8002f5c:	89b9      	ldrh	r1, [r7, #12]
 8002f5e:	8ab8      	ldrh	r0, [r7, #20]
 8002f60:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002f64:	9300      	str	r3, [sp, #0]
 8002f66:	4613      	mov	r3, r2
 8002f68:	f240 2201 	movw	r2, #513	; 0x201
 8002f6c:	f7ff f956 	bl	800221c <UB_VGA_DrawBitmap>
 8002f70:	e00c      	b.n	8002f8c <UB_VGA_writeText+0xbf8>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 540, color, fontsize); break;
 8002f72:	7afa      	ldrb	r2, [r7, #11]
 8002f74:	89b9      	ldrh	r1, [r7, #12]
 8002f76:	8ab8      	ldrh	r0, [r7, #20]
 8002f78:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002f7c:	9300      	str	r3, [sp, #0]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8002f84:	f7ff f94a 	bl	800221c <UB_VGA_DrawBitmap>
 8002f88:	e000      	b.n	8002f8c <UB_VGA_writeText+0xbf8>
                			default: break;
 8002f8a:	bf00      	nop
                break;
 8002f8c:	f000 bcb4 	b.w	80038f8 <UB_VGA_writeText+0x1564>
            case 'o':
            	switch(fontname)
 8002f90:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d003      	beq.n	8002fa0 <UB_VGA_writeText+0xc0c>
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d02e      	beq.n	8002ffa <UB_VGA_writeText+0xc66>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 541, color, fontsize); break;
                			default: break;
                		}
                	default: break;
            	}
                break;
 8002f9c:	f000 bcac 	b.w	80038f8 <UB_VGA_writeText+0x1564>
            			switch(fontstyle)
 8002fa0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002fa4:	2b03      	cmp	r3, #3
 8002fa6:	d01c      	beq.n	8002fe2 <UB_VGA_writeText+0xc4e>
 8002fa8:	2b03      	cmp	r3, #3
 8002faa:	dc25      	bgt.n	8002ff8 <UB_VGA_writeText+0xc64>
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d002      	beq.n	8002fb6 <UB_VGA_writeText+0xc22>
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d00b      	beq.n	8002fcc <UB_VGA_writeText+0xc38>
            				default: break;
 8002fb4:	e020      	b.n	8002ff8 <UB_VGA_writeText+0xc64>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'o', color, fontsize); break;
 8002fb6:	7afa      	ldrb	r2, [r7, #11]
 8002fb8:	89b9      	ldrh	r1, [r7, #12]
 8002fba:	8ab8      	ldrh	r0, [r7, #20]
 8002fbc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	226f      	movs	r2, #111	; 0x6f
 8002fc6:	f7ff f929 	bl	800221c <UB_VGA_DrawBitmap>
 8002fca:	e016      	b.n	8002ffa <UB_VGA_writeText+0xc66>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'O', color, fontsize); break;
 8002fcc:	7afa      	ldrb	r2, [r7, #11]
 8002fce:	89b9      	ldrh	r1, [r7, #12]
 8002fd0:	8ab8      	ldrh	r0, [r7, #20]
 8002fd2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002fd6:	9300      	str	r3, [sp, #0]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	224f      	movs	r2, #79	; 0x4f
 8002fdc:	f7ff f91e 	bl	800221c <UB_VGA_DrawBitmap>
 8002fe0:	e00b      	b.n	8002ffa <UB_VGA_writeText+0xc66>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 14, color, fontsize); break;
 8002fe2:	7afa      	ldrb	r2, [r7, #11]
 8002fe4:	89b9      	ldrh	r1, [r7, #12]
 8002fe6:	8ab8      	ldrh	r0, [r7, #20]
 8002fe8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	220e      	movs	r2, #14
 8002ff2:	f7ff f913 	bl	800221c <UB_VGA_DrawBitmap>
 8002ff6:	e000      	b.n	8002ffa <UB_VGA_writeText+0xc66>
            				default: break;
 8002ff8:	bf00      	nop
                		switch(fontstyle)
 8002ffa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002ffe:	2b03      	cmp	r3, #3
 8003000:	d01d      	beq.n	800303e <UB_VGA_writeText+0xcaa>
 8003002:	2b03      	cmp	r3, #3
 8003004:	dc27      	bgt.n	8003056 <UB_VGA_writeText+0xcc2>
 8003006:	2b01      	cmp	r3, #1
 8003008:	d002      	beq.n	8003010 <UB_VGA_writeText+0xc7c>
 800300a:	2b02      	cmp	r3, #2
 800300c:	d00b      	beq.n	8003026 <UB_VGA_writeText+0xc92>
                			default: break;
 800300e:	e022      	b.n	8003056 <UB_VGA_writeText+0xcc2>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 41, color, fontsize); break;
 8003010:	7afa      	ldrb	r2, [r7, #11]
 8003012:	89b9      	ldrh	r1, [r7, #12]
 8003014:	8ab8      	ldrh	r0, [r7, #20]
 8003016:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800301a:	9300      	str	r3, [sp, #0]
 800301c:	4613      	mov	r3, r2
 800301e:	2229      	movs	r2, #41	; 0x29
 8003020:	f7ff f8fc 	bl	800221c <UB_VGA_DrawBitmap>
 8003024:	e018      	b.n	8003058 <UB_VGA_writeText+0xcc4>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 514, color, fontsize); break;
 8003026:	7afa      	ldrb	r2, [r7, #11]
 8003028:	89b9      	ldrh	r1, [r7, #12]
 800302a:	8ab8      	ldrh	r0, [r7, #20]
 800302c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	4613      	mov	r3, r2
 8003034:	f240 2202 	movw	r2, #514	; 0x202
 8003038:	f7ff f8f0 	bl	800221c <UB_VGA_DrawBitmap>
 800303c:	e00c      	b.n	8003058 <UB_VGA_writeText+0xcc4>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 541, color, fontsize); break;
 800303e:	7afa      	ldrb	r2, [r7, #11]
 8003040:	89b9      	ldrh	r1, [r7, #12]
 8003042:	8ab8      	ldrh	r0, [r7, #20]
 8003044:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	4613      	mov	r3, r2
 800304c:	f240 221d 	movw	r2, #541	; 0x21d
 8003050:	f7ff f8e4 	bl	800221c <UB_VGA_DrawBitmap>
 8003054:	e000      	b.n	8003058 <UB_VGA_writeText+0xcc4>
                			default: break;
 8003056:	bf00      	nop
                break;
 8003058:	f000 bc4e 	b.w	80038f8 <UB_VGA_writeText+0x1564>
            case 'p':
            	switch(fontname)
 800305c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d003      	beq.n	800306c <UB_VGA_writeText+0xcd8>
 8003064:	2b02      	cmp	r3, #2
 8003066:	d02e      	beq.n	80030c6 <UB_VGA_writeText+0xd32>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 542, color, fontsize); break;
                			default: break;
                		}
                	default: break;
            	}
                break;
 8003068:	f000 bc46 	b.w	80038f8 <UB_VGA_writeText+0x1564>
            			switch(fontstyle)
 800306c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003070:	2b03      	cmp	r3, #3
 8003072:	d01c      	beq.n	80030ae <UB_VGA_writeText+0xd1a>
 8003074:	2b03      	cmp	r3, #3
 8003076:	dc25      	bgt.n	80030c4 <UB_VGA_writeText+0xd30>
 8003078:	2b01      	cmp	r3, #1
 800307a:	d002      	beq.n	8003082 <UB_VGA_writeText+0xcee>
 800307c:	2b02      	cmp	r3, #2
 800307e:	d00b      	beq.n	8003098 <UB_VGA_writeText+0xd04>
            				default: break;
 8003080:	e020      	b.n	80030c4 <UB_VGA_writeText+0xd30>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'p', color, fontsize); break;
 8003082:	7afa      	ldrb	r2, [r7, #11]
 8003084:	89b9      	ldrh	r1, [r7, #12]
 8003086:	8ab8      	ldrh	r0, [r7, #20]
 8003088:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800308c:	9300      	str	r3, [sp, #0]
 800308e:	4613      	mov	r3, r2
 8003090:	2270      	movs	r2, #112	; 0x70
 8003092:	f7ff f8c3 	bl	800221c <UB_VGA_DrawBitmap>
 8003096:	e016      	b.n	80030c6 <UB_VGA_writeText+0xd32>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'P', color, fontsize); break;
 8003098:	7afa      	ldrb	r2, [r7, #11]
 800309a:	89b9      	ldrh	r1, [r7, #12]
 800309c:	8ab8      	ldrh	r0, [r7, #20]
 800309e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80030a2:	9300      	str	r3, [sp, #0]
 80030a4:	4613      	mov	r3, r2
 80030a6:	2250      	movs	r2, #80	; 0x50
 80030a8:	f7ff f8b8 	bl	800221c <UB_VGA_DrawBitmap>
 80030ac:	e00b      	b.n	80030c6 <UB_VGA_writeText+0xd32>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 15, color, fontsize); break;
 80030ae:	7afa      	ldrb	r2, [r7, #11]
 80030b0:	89b9      	ldrh	r1, [r7, #12]
 80030b2:	8ab8      	ldrh	r0, [r7, #20]
 80030b4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80030b8:	9300      	str	r3, [sp, #0]
 80030ba:	4613      	mov	r3, r2
 80030bc:	220f      	movs	r2, #15
 80030be:	f7ff f8ad 	bl	800221c <UB_VGA_DrawBitmap>
 80030c2:	e000      	b.n	80030c6 <UB_VGA_writeText+0xd32>
            				default: break;
 80030c4:	bf00      	nop
                		switch(fontstyle)
 80030c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80030ca:	2b03      	cmp	r3, #3
 80030cc:	d01d      	beq.n	800310a <UB_VGA_writeText+0xd76>
 80030ce:	2b03      	cmp	r3, #3
 80030d0:	dc27      	bgt.n	8003122 <UB_VGA_writeText+0xd8e>
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d002      	beq.n	80030dc <UB_VGA_writeText+0xd48>
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d00b      	beq.n	80030f2 <UB_VGA_writeText+0xd5e>
                			default: break;
 80030da:	e022      	b.n	8003122 <UB_VGA_writeText+0xd8e>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 42, color, fontsize); break;
 80030dc:	7afa      	ldrb	r2, [r7, #11]
 80030de:	89b9      	ldrh	r1, [r7, #12]
 80030e0:	8ab8      	ldrh	r0, [r7, #20]
 80030e2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80030e6:	9300      	str	r3, [sp, #0]
 80030e8:	4613      	mov	r3, r2
 80030ea:	222a      	movs	r2, #42	; 0x2a
 80030ec:	f7ff f896 	bl	800221c <UB_VGA_DrawBitmap>
 80030f0:	e018      	b.n	8003124 <UB_VGA_writeText+0xd90>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 515, color, fontsize); break;
 80030f2:	7afa      	ldrb	r2, [r7, #11]
 80030f4:	89b9      	ldrh	r1, [r7, #12]
 80030f6:	8ab8      	ldrh	r0, [r7, #20]
 80030f8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	4613      	mov	r3, r2
 8003100:	f240 2203 	movw	r2, #515	; 0x203
 8003104:	f7ff f88a 	bl	800221c <UB_VGA_DrawBitmap>
 8003108:	e00c      	b.n	8003124 <UB_VGA_writeText+0xd90>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 542, color, fontsize); break;
 800310a:	7afa      	ldrb	r2, [r7, #11]
 800310c:	89b9      	ldrh	r1, [r7, #12]
 800310e:	8ab8      	ldrh	r0, [r7, #20]
 8003110:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	4613      	mov	r3, r2
 8003118:	f240 221e 	movw	r2, #542	; 0x21e
 800311c:	f7ff f87e 	bl	800221c <UB_VGA_DrawBitmap>
 8003120:	e000      	b.n	8003124 <UB_VGA_writeText+0xd90>
                			default: break;
 8003122:	bf00      	nop
                break;
 8003124:	e3e8      	b.n	80038f8 <UB_VGA_writeText+0x1564>
            case 'q':
            	switch(fontname)
 8003126:	f897 3020 	ldrb.w	r3, [r7, #32]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d002      	beq.n	8003134 <UB_VGA_writeText+0xda0>
 800312e:	2b02      	cmp	r3, #2
 8003130:	d02d      	beq.n	800318e <UB_VGA_writeText+0xdfa>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 543, color, fontsize); break;
                			default: break;
                		}
                	default: break;
            	}
                break;
 8003132:	e3e1      	b.n	80038f8 <UB_VGA_writeText+0x1564>
            			switch(fontstyle)
 8003134:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003138:	2b03      	cmp	r3, #3
 800313a:	d01c      	beq.n	8003176 <UB_VGA_writeText+0xde2>
 800313c:	2b03      	cmp	r3, #3
 800313e:	dc25      	bgt.n	800318c <UB_VGA_writeText+0xdf8>
 8003140:	2b01      	cmp	r3, #1
 8003142:	d002      	beq.n	800314a <UB_VGA_writeText+0xdb6>
 8003144:	2b02      	cmp	r3, #2
 8003146:	d00b      	beq.n	8003160 <UB_VGA_writeText+0xdcc>
            				default: break;
 8003148:	e020      	b.n	800318c <UB_VGA_writeText+0xdf8>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'q', color, fontsize); break;
 800314a:	7afa      	ldrb	r2, [r7, #11]
 800314c:	89b9      	ldrh	r1, [r7, #12]
 800314e:	8ab8      	ldrh	r0, [r7, #20]
 8003150:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003154:	9300      	str	r3, [sp, #0]
 8003156:	4613      	mov	r3, r2
 8003158:	2271      	movs	r2, #113	; 0x71
 800315a:	f7ff f85f 	bl	800221c <UB_VGA_DrawBitmap>
 800315e:	e016      	b.n	800318e <UB_VGA_writeText+0xdfa>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'Q', color, fontsize); break;
 8003160:	7afa      	ldrb	r2, [r7, #11]
 8003162:	89b9      	ldrh	r1, [r7, #12]
 8003164:	8ab8      	ldrh	r0, [r7, #20]
 8003166:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800316a:	9300      	str	r3, [sp, #0]
 800316c:	4613      	mov	r3, r2
 800316e:	2251      	movs	r2, #81	; 0x51
 8003170:	f7ff f854 	bl	800221c <UB_VGA_DrawBitmap>
 8003174:	e00b      	b.n	800318e <UB_VGA_writeText+0xdfa>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 16, color, fontsize); break;
 8003176:	7afa      	ldrb	r2, [r7, #11]
 8003178:	89b9      	ldrh	r1, [r7, #12]
 800317a:	8ab8      	ldrh	r0, [r7, #20]
 800317c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003180:	9300      	str	r3, [sp, #0]
 8003182:	4613      	mov	r3, r2
 8003184:	2210      	movs	r2, #16
 8003186:	f7ff f849 	bl	800221c <UB_VGA_DrawBitmap>
 800318a:	e000      	b.n	800318e <UB_VGA_writeText+0xdfa>
            				default: break;
 800318c:	bf00      	nop
                		switch(fontstyle)
 800318e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003192:	2b03      	cmp	r3, #3
 8003194:	d01d      	beq.n	80031d2 <UB_VGA_writeText+0xe3e>
 8003196:	2b03      	cmp	r3, #3
 8003198:	dc27      	bgt.n	80031ea <UB_VGA_writeText+0xe56>
 800319a:	2b01      	cmp	r3, #1
 800319c:	d002      	beq.n	80031a4 <UB_VGA_writeText+0xe10>
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d00b      	beq.n	80031ba <UB_VGA_writeText+0xe26>
                			default: break;
 80031a2:	e022      	b.n	80031ea <UB_VGA_writeText+0xe56>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 43, color, fontsize); break;
 80031a4:	7afa      	ldrb	r2, [r7, #11]
 80031a6:	89b9      	ldrh	r1, [r7, #12]
 80031a8:	8ab8      	ldrh	r0, [r7, #20]
 80031aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	4613      	mov	r3, r2
 80031b2:	222b      	movs	r2, #43	; 0x2b
 80031b4:	f7ff f832 	bl	800221c <UB_VGA_DrawBitmap>
 80031b8:	e018      	b.n	80031ec <UB_VGA_writeText+0xe58>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 516, color, fontsize); break;
 80031ba:	7afa      	ldrb	r2, [r7, #11]
 80031bc:	89b9      	ldrh	r1, [r7, #12]
 80031be:	8ab8      	ldrh	r0, [r7, #20]
 80031c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80031c4:	9300      	str	r3, [sp, #0]
 80031c6:	4613      	mov	r3, r2
 80031c8:	f44f 7201 	mov.w	r2, #516	; 0x204
 80031cc:	f7ff f826 	bl	800221c <UB_VGA_DrawBitmap>
 80031d0:	e00c      	b.n	80031ec <UB_VGA_writeText+0xe58>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 543, color, fontsize); break;
 80031d2:	7afa      	ldrb	r2, [r7, #11]
 80031d4:	89b9      	ldrh	r1, [r7, #12]
 80031d6:	8ab8      	ldrh	r0, [r7, #20]
 80031d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80031dc:	9300      	str	r3, [sp, #0]
 80031de:	4613      	mov	r3, r2
 80031e0:	f240 221f 	movw	r2, #543	; 0x21f
 80031e4:	f7ff f81a 	bl	800221c <UB_VGA_DrawBitmap>
 80031e8:	e000      	b.n	80031ec <UB_VGA_writeText+0xe58>
                			default: break;
 80031ea:	bf00      	nop
                break;
 80031ec:	e384      	b.n	80038f8 <UB_VGA_writeText+0x1564>
            case 'r':
            	switch(fontname)
 80031ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d002      	beq.n	80031fc <UB_VGA_writeText+0xe68>
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d02d      	beq.n	8003256 <UB_VGA_writeText+0xec2>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 544, color, fontsize); break;
                			default: break;
                		}
                	default: break;
            	}
                break;
 80031fa:	e37d      	b.n	80038f8 <UB_VGA_writeText+0x1564>
            			switch(fontstyle)
 80031fc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003200:	2b03      	cmp	r3, #3
 8003202:	d01c      	beq.n	800323e <UB_VGA_writeText+0xeaa>
 8003204:	2b03      	cmp	r3, #3
 8003206:	dc25      	bgt.n	8003254 <UB_VGA_writeText+0xec0>
 8003208:	2b01      	cmp	r3, #1
 800320a:	d002      	beq.n	8003212 <UB_VGA_writeText+0xe7e>
 800320c:	2b02      	cmp	r3, #2
 800320e:	d00b      	beq.n	8003228 <UB_VGA_writeText+0xe94>
            				default: break;
 8003210:	e020      	b.n	8003254 <UB_VGA_writeText+0xec0>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'r', color, fontsize); break;
 8003212:	7afa      	ldrb	r2, [r7, #11]
 8003214:	89b9      	ldrh	r1, [r7, #12]
 8003216:	8ab8      	ldrh	r0, [r7, #20]
 8003218:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800321c:	9300      	str	r3, [sp, #0]
 800321e:	4613      	mov	r3, r2
 8003220:	2272      	movs	r2, #114	; 0x72
 8003222:	f7fe fffb 	bl	800221c <UB_VGA_DrawBitmap>
 8003226:	e016      	b.n	8003256 <UB_VGA_writeText+0xec2>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'R', color, fontsize); break;
 8003228:	7afa      	ldrb	r2, [r7, #11]
 800322a:	89b9      	ldrh	r1, [r7, #12]
 800322c:	8ab8      	ldrh	r0, [r7, #20]
 800322e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	4613      	mov	r3, r2
 8003236:	2252      	movs	r2, #82	; 0x52
 8003238:	f7fe fff0 	bl	800221c <UB_VGA_DrawBitmap>
 800323c:	e00b      	b.n	8003256 <UB_VGA_writeText+0xec2>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 17, color, fontsize); break;
 800323e:	7afa      	ldrb	r2, [r7, #11]
 8003240:	89b9      	ldrh	r1, [r7, #12]
 8003242:	8ab8      	ldrh	r0, [r7, #20]
 8003244:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003248:	9300      	str	r3, [sp, #0]
 800324a:	4613      	mov	r3, r2
 800324c:	2211      	movs	r2, #17
 800324e:	f7fe ffe5 	bl	800221c <UB_VGA_DrawBitmap>
 8003252:	e000      	b.n	8003256 <UB_VGA_writeText+0xec2>
            				default: break;
 8003254:	bf00      	nop
                		switch(fontstyle)
 8003256:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800325a:	2b03      	cmp	r3, #3
 800325c:	d01d      	beq.n	800329a <UB_VGA_writeText+0xf06>
 800325e:	2b03      	cmp	r3, #3
 8003260:	dc27      	bgt.n	80032b2 <UB_VGA_writeText+0xf1e>
 8003262:	2b01      	cmp	r3, #1
 8003264:	d002      	beq.n	800326c <UB_VGA_writeText+0xed8>
 8003266:	2b02      	cmp	r3, #2
 8003268:	d00b      	beq.n	8003282 <UB_VGA_writeText+0xeee>
                			default: break;
 800326a:	e022      	b.n	80032b2 <UB_VGA_writeText+0xf1e>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 44, color, fontsize); break;
 800326c:	7afa      	ldrb	r2, [r7, #11]
 800326e:	89b9      	ldrh	r1, [r7, #12]
 8003270:	8ab8      	ldrh	r0, [r7, #20]
 8003272:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003276:	9300      	str	r3, [sp, #0]
 8003278:	4613      	mov	r3, r2
 800327a:	222c      	movs	r2, #44	; 0x2c
 800327c:	f7fe ffce 	bl	800221c <UB_VGA_DrawBitmap>
 8003280:	e018      	b.n	80032b4 <UB_VGA_writeText+0xf20>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 517, color, fontsize); break;
 8003282:	7afa      	ldrb	r2, [r7, #11]
 8003284:	89b9      	ldrh	r1, [r7, #12]
 8003286:	8ab8      	ldrh	r0, [r7, #20]
 8003288:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	4613      	mov	r3, r2
 8003290:	f240 2205 	movw	r2, #517	; 0x205
 8003294:	f7fe ffc2 	bl	800221c <UB_VGA_DrawBitmap>
 8003298:	e00c      	b.n	80032b4 <UB_VGA_writeText+0xf20>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 544, color, fontsize); break;
 800329a:	7afa      	ldrb	r2, [r7, #11]
 800329c:	89b9      	ldrh	r1, [r7, #12]
 800329e:	8ab8      	ldrh	r0, [r7, #20]
 80032a0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80032a4:	9300      	str	r3, [sp, #0]
 80032a6:	4613      	mov	r3, r2
 80032a8:	f44f 7208 	mov.w	r2, #544	; 0x220
 80032ac:	f7fe ffb6 	bl	800221c <UB_VGA_DrawBitmap>
 80032b0:	e000      	b.n	80032b4 <UB_VGA_writeText+0xf20>
                			default: break;
 80032b2:	bf00      	nop
                break;
 80032b4:	e320      	b.n	80038f8 <UB_VGA_writeText+0x1564>
            case 's':
            	switch(fontname)
 80032b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d002      	beq.n	80032c4 <UB_VGA_writeText+0xf30>
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d02d      	beq.n	800331e <UB_VGA_writeText+0xf8a>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 545, color, fontsize); break;
                			default: break;
                		}
                	default: break;
            	}
            	break;
 80032c2:	e319      	b.n	80038f8 <UB_VGA_writeText+0x1564>
            			switch(fontstyle)
 80032c4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80032c8:	2b03      	cmp	r3, #3
 80032ca:	d01c      	beq.n	8003306 <UB_VGA_writeText+0xf72>
 80032cc:	2b03      	cmp	r3, #3
 80032ce:	dc25      	bgt.n	800331c <UB_VGA_writeText+0xf88>
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d002      	beq.n	80032da <UB_VGA_writeText+0xf46>
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d00b      	beq.n	80032f0 <UB_VGA_writeText+0xf5c>
            				default: break;
 80032d8:	e020      	b.n	800331c <UB_VGA_writeText+0xf88>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 's', color, fontsize); break;
 80032da:	7afa      	ldrb	r2, [r7, #11]
 80032dc:	89b9      	ldrh	r1, [r7, #12]
 80032de:	8ab8      	ldrh	r0, [r7, #20]
 80032e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	4613      	mov	r3, r2
 80032e8:	2273      	movs	r2, #115	; 0x73
 80032ea:	f7fe ff97 	bl	800221c <UB_VGA_DrawBitmap>
 80032ee:	e016      	b.n	800331e <UB_VGA_writeText+0xf8a>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'S', color, fontsize); break;
 80032f0:	7afa      	ldrb	r2, [r7, #11]
 80032f2:	89b9      	ldrh	r1, [r7, #12]
 80032f4:	8ab8      	ldrh	r0, [r7, #20]
 80032f6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80032fa:	9300      	str	r3, [sp, #0]
 80032fc:	4613      	mov	r3, r2
 80032fe:	2253      	movs	r2, #83	; 0x53
 8003300:	f7fe ff8c 	bl	800221c <UB_VGA_DrawBitmap>
 8003304:	e00b      	b.n	800331e <UB_VGA_writeText+0xf8a>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 18, color, fontsize); break;
 8003306:	7afa      	ldrb	r2, [r7, #11]
 8003308:	89b9      	ldrh	r1, [r7, #12]
 800330a:	8ab8      	ldrh	r0, [r7, #20]
 800330c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003310:	9300      	str	r3, [sp, #0]
 8003312:	4613      	mov	r3, r2
 8003314:	2212      	movs	r2, #18
 8003316:	f7fe ff81 	bl	800221c <UB_VGA_DrawBitmap>
 800331a:	e000      	b.n	800331e <UB_VGA_writeText+0xf8a>
            				default: break;
 800331c:	bf00      	nop
                		switch(fontstyle)
 800331e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003322:	2b03      	cmp	r3, #3
 8003324:	d01d      	beq.n	8003362 <UB_VGA_writeText+0xfce>
 8003326:	2b03      	cmp	r3, #3
 8003328:	dc27      	bgt.n	800337a <UB_VGA_writeText+0xfe6>
 800332a:	2b01      	cmp	r3, #1
 800332c:	d002      	beq.n	8003334 <UB_VGA_writeText+0xfa0>
 800332e:	2b02      	cmp	r3, #2
 8003330:	d00b      	beq.n	800334a <UB_VGA_writeText+0xfb6>
                			default: break;
 8003332:	e022      	b.n	800337a <UB_VGA_writeText+0xfe6>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 45, color, fontsize); break;
 8003334:	7afa      	ldrb	r2, [r7, #11]
 8003336:	89b9      	ldrh	r1, [r7, #12]
 8003338:	8ab8      	ldrh	r0, [r7, #20]
 800333a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	4613      	mov	r3, r2
 8003342:	222d      	movs	r2, #45	; 0x2d
 8003344:	f7fe ff6a 	bl	800221c <UB_VGA_DrawBitmap>
 8003348:	e018      	b.n	800337c <UB_VGA_writeText+0xfe8>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 518, color, fontsize); break;
 800334a:	7afa      	ldrb	r2, [r7, #11]
 800334c:	89b9      	ldrh	r1, [r7, #12]
 800334e:	8ab8      	ldrh	r0, [r7, #20]
 8003350:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	4613      	mov	r3, r2
 8003358:	f240 2206 	movw	r2, #518	; 0x206
 800335c:	f7fe ff5e 	bl	800221c <UB_VGA_DrawBitmap>
 8003360:	e00c      	b.n	800337c <UB_VGA_writeText+0xfe8>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 545, color, fontsize); break;
 8003362:	7afa      	ldrb	r2, [r7, #11]
 8003364:	89b9      	ldrh	r1, [r7, #12]
 8003366:	8ab8      	ldrh	r0, [r7, #20]
 8003368:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800336c:	9300      	str	r3, [sp, #0]
 800336e:	4613      	mov	r3, r2
 8003370:	f240 2221 	movw	r2, #545	; 0x221
 8003374:	f7fe ff52 	bl	800221c <UB_VGA_DrawBitmap>
 8003378:	e000      	b.n	800337c <UB_VGA_writeText+0xfe8>
                			default: break;
 800337a:	bf00      	nop
            	break;
 800337c:	e2bc      	b.n	80038f8 <UB_VGA_writeText+0x1564>
            case 't':
            	switch(fontname)
 800337e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d002      	beq.n	800338c <UB_VGA_writeText+0xff8>
 8003386:	2b02      	cmp	r3, #2
 8003388:	d02d      	beq.n	80033e6 <UB_VGA_writeText+0x1052>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 546, color, fontsize); break;
                			default: break;
                		}
                	default: break;
            	}
                break;
 800338a:	e2b5      	b.n	80038f8 <UB_VGA_writeText+0x1564>
            			switch(fontstyle)
 800338c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003390:	2b03      	cmp	r3, #3
 8003392:	d01c      	beq.n	80033ce <UB_VGA_writeText+0x103a>
 8003394:	2b03      	cmp	r3, #3
 8003396:	dc25      	bgt.n	80033e4 <UB_VGA_writeText+0x1050>
 8003398:	2b01      	cmp	r3, #1
 800339a:	d002      	beq.n	80033a2 <UB_VGA_writeText+0x100e>
 800339c:	2b02      	cmp	r3, #2
 800339e:	d00b      	beq.n	80033b8 <UB_VGA_writeText+0x1024>
            				default: break;
 80033a0:	e020      	b.n	80033e4 <UB_VGA_writeText+0x1050>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 't', color, fontsize); break;
 80033a2:	7afa      	ldrb	r2, [r7, #11]
 80033a4:	89b9      	ldrh	r1, [r7, #12]
 80033a6:	8ab8      	ldrh	r0, [r7, #20]
 80033a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	4613      	mov	r3, r2
 80033b0:	2274      	movs	r2, #116	; 0x74
 80033b2:	f7fe ff33 	bl	800221c <UB_VGA_DrawBitmap>
 80033b6:	e016      	b.n	80033e6 <UB_VGA_writeText+0x1052>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'T', color, fontsize); break;
 80033b8:	7afa      	ldrb	r2, [r7, #11]
 80033ba:	89b9      	ldrh	r1, [r7, #12]
 80033bc:	8ab8      	ldrh	r0, [r7, #20]
 80033be:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80033c2:	9300      	str	r3, [sp, #0]
 80033c4:	4613      	mov	r3, r2
 80033c6:	2254      	movs	r2, #84	; 0x54
 80033c8:	f7fe ff28 	bl	800221c <UB_VGA_DrawBitmap>
 80033cc:	e00b      	b.n	80033e6 <UB_VGA_writeText+0x1052>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 19, color, fontsize); break;
 80033ce:	7afa      	ldrb	r2, [r7, #11]
 80033d0:	89b9      	ldrh	r1, [r7, #12]
 80033d2:	8ab8      	ldrh	r0, [r7, #20]
 80033d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80033d8:	9300      	str	r3, [sp, #0]
 80033da:	4613      	mov	r3, r2
 80033dc:	2213      	movs	r2, #19
 80033de:	f7fe ff1d 	bl	800221c <UB_VGA_DrawBitmap>
 80033e2:	e000      	b.n	80033e6 <UB_VGA_writeText+0x1052>
            				default: break;
 80033e4:	bf00      	nop
                		switch(fontstyle)
 80033e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80033ea:	2b03      	cmp	r3, #3
 80033ec:	d01d      	beq.n	800342a <UB_VGA_writeText+0x1096>
 80033ee:	2b03      	cmp	r3, #3
 80033f0:	dc27      	bgt.n	8003442 <UB_VGA_writeText+0x10ae>
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d002      	beq.n	80033fc <UB_VGA_writeText+0x1068>
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d00b      	beq.n	8003412 <UB_VGA_writeText+0x107e>
                			default: break;
 80033fa:	e022      	b.n	8003442 <UB_VGA_writeText+0x10ae>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 46, color, fontsize); break;
 80033fc:	7afa      	ldrb	r2, [r7, #11]
 80033fe:	89b9      	ldrh	r1, [r7, #12]
 8003400:	8ab8      	ldrh	r0, [r7, #20]
 8003402:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003406:	9300      	str	r3, [sp, #0]
 8003408:	4613      	mov	r3, r2
 800340a:	222e      	movs	r2, #46	; 0x2e
 800340c:	f7fe ff06 	bl	800221c <UB_VGA_DrawBitmap>
 8003410:	e018      	b.n	8003444 <UB_VGA_writeText+0x10b0>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 519, color, fontsize); break;
 8003412:	7afa      	ldrb	r2, [r7, #11]
 8003414:	89b9      	ldrh	r1, [r7, #12]
 8003416:	8ab8      	ldrh	r0, [r7, #20]
 8003418:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800341c:	9300      	str	r3, [sp, #0]
 800341e:	4613      	mov	r3, r2
 8003420:	f240 2207 	movw	r2, #519	; 0x207
 8003424:	f7fe fefa 	bl	800221c <UB_VGA_DrawBitmap>
 8003428:	e00c      	b.n	8003444 <UB_VGA_writeText+0x10b0>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 546, color, fontsize); break;
 800342a:	7afa      	ldrb	r2, [r7, #11]
 800342c:	89b9      	ldrh	r1, [r7, #12]
 800342e:	8ab8      	ldrh	r0, [r7, #20]
 8003430:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003434:	9300      	str	r3, [sp, #0]
 8003436:	4613      	mov	r3, r2
 8003438:	f240 2222 	movw	r2, #546	; 0x222
 800343c:	f7fe feee 	bl	800221c <UB_VGA_DrawBitmap>
 8003440:	e000      	b.n	8003444 <UB_VGA_writeText+0x10b0>
                			default: break;
 8003442:	bf00      	nop
                break;
 8003444:	e258      	b.n	80038f8 <UB_VGA_writeText+0x1564>
            case 'u':
            	switch(fontname)
 8003446:	f897 3020 	ldrb.w	r3, [r7, #32]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d002      	beq.n	8003454 <UB_VGA_writeText+0x10c0>
 800344e:	2b02      	cmp	r3, #2
 8003450:	d02d      	beq.n	80034ae <UB_VGA_writeText+0x111a>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 547, color, fontsize); break;
                			default: break;
                		}
                	default: break;
            	}
                break;
 8003452:	e251      	b.n	80038f8 <UB_VGA_writeText+0x1564>
            			switch(fontstyle)
 8003454:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003458:	2b03      	cmp	r3, #3
 800345a:	d01c      	beq.n	8003496 <UB_VGA_writeText+0x1102>
 800345c:	2b03      	cmp	r3, #3
 800345e:	dc25      	bgt.n	80034ac <UB_VGA_writeText+0x1118>
 8003460:	2b01      	cmp	r3, #1
 8003462:	d002      	beq.n	800346a <UB_VGA_writeText+0x10d6>
 8003464:	2b02      	cmp	r3, #2
 8003466:	d00b      	beq.n	8003480 <UB_VGA_writeText+0x10ec>
            				default: break;
 8003468:	e020      	b.n	80034ac <UB_VGA_writeText+0x1118>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'u', color, fontsize); break;
 800346a:	7afa      	ldrb	r2, [r7, #11]
 800346c:	89b9      	ldrh	r1, [r7, #12]
 800346e:	8ab8      	ldrh	r0, [r7, #20]
 8003470:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003474:	9300      	str	r3, [sp, #0]
 8003476:	4613      	mov	r3, r2
 8003478:	2275      	movs	r2, #117	; 0x75
 800347a:	f7fe fecf 	bl	800221c <UB_VGA_DrawBitmap>
 800347e:	e016      	b.n	80034ae <UB_VGA_writeText+0x111a>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'U', color, fontsize); break;
 8003480:	7afa      	ldrb	r2, [r7, #11]
 8003482:	89b9      	ldrh	r1, [r7, #12]
 8003484:	8ab8      	ldrh	r0, [r7, #20]
 8003486:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800348a:	9300      	str	r3, [sp, #0]
 800348c:	4613      	mov	r3, r2
 800348e:	2255      	movs	r2, #85	; 0x55
 8003490:	f7fe fec4 	bl	800221c <UB_VGA_DrawBitmap>
 8003494:	e00b      	b.n	80034ae <UB_VGA_writeText+0x111a>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 20, color, fontsize); break;
 8003496:	7afa      	ldrb	r2, [r7, #11]
 8003498:	89b9      	ldrh	r1, [r7, #12]
 800349a:	8ab8      	ldrh	r0, [r7, #20]
 800349c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	4613      	mov	r3, r2
 80034a4:	2214      	movs	r2, #20
 80034a6:	f7fe feb9 	bl	800221c <UB_VGA_DrawBitmap>
 80034aa:	e000      	b.n	80034ae <UB_VGA_writeText+0x111a>
            				default: break;
 80034ac:	bf00      	nop
                		switch(fontstyle)
 80034ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80034b2:	2b03      	cmp	r3, #3
 80034b4:	d01d      	beq.n	80034f2 <UB_VGA_writeText+0x115e>
 80034b6:	2b03      	cmp	r3, #3
 80034b8:	dc27      	bgt.n	800350a <UB_VGA_writeText+0x1176>
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d002      	beq.n	80034c4 <UB_VGA_writeText+0x1130>
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d00b      	beq.n	80034da <UB_VGA_writeText+0x1146>
                			default: break;
 80034c2:	e022      	b.n	800350a <UB_VGA_writeText+0x1176>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 47, color, fontsize); break;
 80034c4:	7afa      	ldrb	r2, [r7, #11]
 80034c6:	89b9      	ldrh	r1, [r7, #12]
 80034c8:	8ab8      	ldrh	r0, [r7, #20]
 80034ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80034ce:	9300      	str	r3, [sp, #0]
 80034d0:	4613      	mov	r3, r2
 80034d2:	222f      	movs	r2, #47	; 0x2f
 80034d4:	f7fe fea2 	bl	800221c <UB_VGA_DrawBitmap>
 80034d8:	e018      	b.n	800350c <UB_VGA_writeText+0x1178>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 520, color, fontsize); break;
 80034da:	7afa      	ldrb	r2, [r7, #11]
 80034dc:	89b9      	ldrh	r1, [r7, #12]
 80034de:	8ab8      	ldrh	r0, [r7, #20]
 80034e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80034e4:	9300      	str	r3, [sp, #0]
 80034e6:	4613      	mov	r3, r2
 80034e8:	f44f 7202 	mov.w	r2, #520	; 0x208
 80034ec:	f7fe fe96 	bl	800221c <UB_VGA_DrawBitmap>
 80034f0:	e00c      	b.n	800350c <UB_VGA_writeText+0x1178>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 547, color, fontsize); break;
 80034f2:	7afa      	ldrb	r2, [r7, #11]
 80034f4:	89b9      	ldrh	r1, [r7, #12]
 80034f6:	8ab8      	ldrh	r0, [r7, #20]
 80034f8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80034fc:	9300      	str	r3, [sp, #0]
 80034fe:	4613      	mov	r3, r2
 8003500:	f240 2223 	movw	r2, #547	; 0x223
 8003504:	f7fe fe8a 	bl	800221c <UB_VGA_DrawBitmap>
 8003508:	e000      	b.n	800350c <UB_VGA_writeText+0x1178>
                			default: break;
 800350a:	bf00      	nop
                break;
 800350c:	e1f4      	b.n	80038f8 <UB_VGA_writeText+0x1564>
            case 'v':
            	switch(fontname)
 800350e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d002      	beq.n	800351c <UB_VGA_writeText+0x1188>
 8003516:	2b02      	cmp	r3, #2
 8003518:	d02d      	beq.n	8003576 <UB_VGA_writeText+0x11e2>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 548, color, fontsize); break;
                			default: break;
                		}
                	default: break;
            	}
                break;
 800351a:	e1ed      	b.n	80038f8 <UB_VGA_writeText+0x1564>
            			switch(fontstyle)
 800351c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003520:	2b03      	cmp	r3, #3
 8003522:	d01c      	beq.n	800355e <UB_VGA_writeText+0x11ca>
 8003524:	2b03      	cmp	r3, #3
 8003526:	dc25      	bgt.n	8003574 <UB_VGA_writeText+0x11e0>
 8003528:	2b01      	cmp	r3, #1
 800352a:	d002      	beq.n	8003532 <UB_VGA_writeText+0x119e>
 800352c:	2b02      	cmp	r3, #2
 800352e:	d00b      	beq.n	8003548 <UB_VGA_writeText+0x11b4>
            				default: break;
 8003530:	e020      	b.n	8003574 <UB_VGA_writeText+0x11e0>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'v', color, fontsize); break;
 8003532:	7afa      	ldrb	r2, [r7, #11]
 8003534:	89b9      	ldrh	r1, [r7, #12]
 8003536:	8ab8      	ldrh	r0, [r7, #20]
 8003538:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800353c:	9300      	str	r3, [sp, #0]
 800353e:	4613      	mov	r3, r2
 8003540:	2276      	movs	r2, #118	; 0x76
 8003542:	f7fe fe6b 	bl	800221c <UB_VGA_DrawBitmap>
 8003546:	e016      	b.n	8003576 <UB_VGA_writeText+0x11e2>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'V', color, fontsize); break;
 8003548:	7afa      	ldrb	r2, [r7, #11]
 800354a:	89b9      	ldrh	r1, [r7, #12]
 800354c:	8ab8      	ldrh	r0, [r7, #20]
 800354e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003552:	9300      	str	r3, [sp, #0]
 8003554:	4613      	mov	r3, r2
 8003556:	2256      	movs	r2, #86	; 0x56
 8003558:	f7fe fe60 	bl	800221c <UB_VGA_DrawBitmap>
 800355c:	e00b      	b.n	8003576 <UB_VGA_writeText+0x11e2>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 21, color, fontsize); break;
 800355e:	7afa      	ldrb	r2, [r7, #11]
 8003560:	89b9      	ldrh	r1, [r7, #12]
 8003562:	8ab8      	ldrh	r0, [r7, #20]
 8003564:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	4613      	mov	r3, r2
 800356c:	2215      	movs	r2, #21
 800356e:	f7fe fe55 	bl	800221c <UB_VGA_DrawBitmap>
 8003572:	e000      	b.n	8003576 <UB_VGA_writeText+0x11e2>
            				default: break;
 8003574:	bf00      	nop
                		switch(fontstyle)
 8003576:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800357a:	2b03      	cmp	r3, #3
 800357c:	d01d      	beq.n	80035ba <UB_VGA_writeText+0x1226>
 800357e:	2b03      	cmp	r3, #3
 8003580:	dc27      	bgt.n	80035d2 <UB_VGA_writeText+0x123e>
 8003582:	2b01      	cmp	r3, #1
 8003584:	d002      	beq.n	800358c <UB_VGA_writeText+0x11f8>
 8003586:	2b02      	cmp	r3, #2
 8003588:	d00b      	beq.n	80035a2 <UB_VGA_writeText+0x120e>
                			default: break;
 800358a:	e022      	b.n	80035d2 <UB_VGA_writeText+0x123e>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 48, color, fontsize); break;
 800358c:	7afa      	ldrb	r2, [r7, #11]
 800358e:	89b9      	ldrh	r1, [r7, #12]
 8003590:	8ab8      	ldrh	r0, [r7, #20]
 8003592:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003596:	9300      	str	r3, [sp, #0]
 8003598:	4613      	mov	r3, r2
 800359a:	2230      	movs	r2, #48	; 0x30
 800359c:	f7fe fe3e 	bl	800221c <UB_VGA_DrawBitmap>
 80035a0:	e018      	b.n	80035d4 <UB_VGA_writeText+0x1240>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 521, color, fontsize); break;
 80035a2:	7afa      	ldrb	r2, [r7, #11]
 80035a4:	89b9      	ldrh	r1, [r7, #12]
 80035a6:	8ab8      	ldrh	r0, [r7, #20]
 80035a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80035ac:	9300      	str	r3, [sp, #0]
 80035ae:	4613      	mov	r3, r2
 80035b0:	f240 2209 	movw	r2, #521	; 0x209
 80035b4:	f7fe fe32 	bl	800221c <UB_VGA_DrawBitmap>
 80035b8:	e00c      	b.n	80035d4 <UB_VGA_writeText+0x1240>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 548, color, fontsize); break;
 80035ba:	7afa      	ldrb	r2, [r7, #11]
 80035bc:	89b9      	ldrh	r1, [r7, #12]
 80035be:	8ab8      	ldrh	r0, [r7, #20]
 80035c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80035c4:	9300      	str	r3, [sp, #0]
 80035c6:	4613      	mov	r3, r2
 80035c8:	f44f 7209 	mov.w	r2, #548	; 0x224
 80035cc:	f7fe fe26 	bl	800221c <UB_VGA_DrawBitmap>
 80035d0:	e000      	b.n	80035d4 <UB_VGA_writeText+0x1240>
                			default: break;
 80035d2:	bf00      	nop
                break;
 80035d4:	e190      	b.n	80038f8 <UB_VGA_writeText+0x1564>
            case 'w':
            	switch(fontname)
 80035d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d002      	beq.n	80035e4 <UB_VGA_writeText+0x1250>
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d02d      	beq.n	800363e <UB_VGA_writeText+0x12aa>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 549, color, fontsize); break;
                			default: break;
                		}
                	default: break;
            	}
                break;
 80035e2:	e189      	b.n	80038f8 <UB_VGA_writeText+0x1564>
            			switch(fontstyle)
 80035e4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80035e8:	2b03      	cmp	r3, #3
 80035ea:	d01c      	beq.n	8003626 <UB_VGA_writeText+0x1292>
 80035ec:	2b03      	cmp	r3, #3
 80035ee:	dc25      	bgt.n	800363c <UB_VGA_writeText+0x12a8>
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d002      	beq.n	80035fa <UB_VGA_writeText+0x1266>
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d00b      	beq.n	8003610 <UB_VGA_writeText+0x127c>
            				default: break;
 80035f8:	e020      	b.n	800363c <UB_VGA_writeText+0x12a8>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'w', color, fontsize); break;
 80035fa:	7afa      	ldrb	r2, [r7, #11]
 80035fc:	89b9      	ldrh	r1, [r7, #12]
 80035fe:	8ab8      	ldrh	r0, [r7, #20]
 8003600:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003604:	9300      	str	r3, [sp, #0]
 8003606:	4613      	mov	r3, r2
 8003608:	2277      	movs	r2, #119	; 0x77
 800360a:	f7fe fe07 	bl	800221c <UB_VGA_DrawBitmap>
 800360e:	e016      	b.n	800363e <UB_VGA_writeText+0x12aa>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'W', color, fontsize); break;
 8003610:	7afa      	ldrb	r2, [r7, #11]
 8003612:	89b9      	ldrh	r1, [r7, #12]
 8003614:	8ab8      	ldrh	r0, [r7, #20]
 8003616:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800361a:	9300      	str	r3, [sp, #0]
 800361c:	4613      	mov	r3, r2
 800361e:	2257      	movs	r2, #87	; 0x57
 8003620:	f7fe fdfc 	bl	800221c <UB_VGA_DrawBitmap>
 8003624:	e00b      	b.n	800363e <UB_VGA_writeText+0x12aa>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 22, color, fontsize); break;
 8003626:	7afa      	ldrb	r2, [r7, #11]
 8003628:	89b9      	ldrh	r1, [r7, #12]
 800362a:	8ab8      	ldrh	r0, [r7, #20]
 800362c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	4613      	mov	r3, r2
 8003634:	2216      	movs	r2, #22
 8003636:	f7fe fdf1 	bl	800221c <UB_VGA_DrawBitmap>
 800363a:	e000      	b.n	800363e <UB_VGA_writeText+0x12aa>
            				default: break;
 800363c:	bf00      	nop
                		switch(fontstyle)
 800363e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003642:	2b03      	cmp	r3, #3
 8003644:	d01d      	beq.n	8003682 <UB_VGA_writeText+0x12ee>
 8003646:	2b03      	cmp	r3, #3
 8003648:	dc27      	bgt.n	800369a <UB_VGA_writeText+0x1306>
 800364a:	2b01      	cmp	r3, #1
 800364c:	d002      	beq.n	8003654 <UB_VGA_writeText+0x12c0>
 800364e:	2b02      	cmp	r3, #2
 8003650:	d00b      	beq.n	800366a <UB_VGA_writeText+0x12d6>
                			default: break;
 8003652:	e022      	b.n	800369a <UB_VGA_writeText+0x1306>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 49, color, fontsize); break;
 8003654:	7afa      	ldrb	r2, [r7, #11]
 8003656:	89b9      	ldrh	r1, [r7, #12]
 8003658:	8ab8      	ldrh	r0, [r7, #20]
 800365a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	4613      	mov	r3, r2
 8003662:	2231      	movs	r2, #49	; 0x31
 8003664:	f7fe fdda 	bl	800221c <UB_VGA_DrawBitmap>
 8003668:	e018      	b.n	800369c <UB_VGA_writeText+0x1308>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 522, color, fontsize); break;
 800366a:	7afa      	ldrb	r2, [r7, #11]
 800366c:	89b9      	ldrh	r1, [r7, #12]
 800366e:	8ab8      	ldrh	r0, [r7, #20]
 8003670:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	4613      	mov	r3, r2
 8003678:	f240 220a 	movw	r2, #522	; 0x20a
 800367c:	f7fe fdce 	bl	800221c <UB_VGA_DrawBitmap>
 8003680:	e00c      	b.n	800369c <UB_VGA_writeText+0x1308>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 549, color, fontsize); break;
 8003682:	7afa      	ldrb	r2, [r7, #11]
 8003684:	89b9      	ldrh	r1, [r7, #12]
 8003686:	8ab8      	ldrh	r0, [r7, #20]
 8003688:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	4613      	mov	r3, r2
 8003690:	f240 2225 	movw	r2, #549	; 0x225
 8003694:	f7fe fdc2 	bl	800221c <UB_VGA_DrawBitmap>
 8003698:	e000      	b.n	800369c <UB_VGA_writeText+0x1308>
                			default: break;
 800369a:	bf00      	nop
                break;
 800369c:	e12c      	b.n	80038f8 <UB_VGA_writeText+0x1564>
            case 'x':
            	switch(fontname)
 800369e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d002      	beq.n	80036ac <UB_VGA_writeText+0x1318>
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d02d      	beq.n	8003706 <UB_VGA_writeText+0x1372>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 550, color, fontsize); break;
                			default: break;
                		}
                	default: break;
            	}
                break;
 80036aa:	e125      	b.n	80038f8 <UB_VGA_writeText+0x1564>
            			switch(fontstyle)
 80036ac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80036b0:	2b03      	cmp	r3, #3
 80036b2:	d01c      	beq.n	80036ee <UB_VGA_writeText+0x135a>
 80036b4:	2b03      	cmp	r3, #3
 80036b6:	dc25      	bgt.n	8003704 <UB_VGA_writeText+0x1370>
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d002      	beq.n	80036c2 <UB_VGA_writeText+0x132e>
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d00b      	beq.n	80036d8 <UB_VGA_writeText+0x1344>
            				default: break;
 80036c0:	e020      	b.n	8003704 <UB_VGA_writeText+0x1370>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'x', color, fontsize); break;
 80036c2:	7afa      	ldrb	r2, [r7, #11]
 80036c4:	89b9      	ldrh	r1, [r7, #12]
 80036c6:	8ab8      	ldrh	r0, [r7, #20]
 80036c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	4613      	mov	r3, r2
 80036d0:	2278      	movs	r2, #120	; 0x78
 80036d2:	f7fe fda3 	bl	800221c <UB_VGA_DrawBitmap>
 80036d6:	e016      	b.n	8003706 <UB_VGA_writeText+0x1372>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'X', color, fontsize); break;
 80036d8:	7afa      	ldrb	r2, [r7, #11]
 80036da:	89b9      	ldrh	r1, [r7, #12]
 80036dc:	8ab8      	ldrh	r0, [r7, #20]
 80036de:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80036e2:	9300      	str	r3, [sp, #0]
 80036e4:	4613      	mov	r3, r2
 80036e6:	2258      	movs	r2, #88	; 0x58
 80036e8:	f7fe fd98 	bl	800221c <UB_VGA_DrawBitmap>
 80036ec:	e00b      	b.n	8003706 <UB_VGA_writeText+0x1372>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 23, color, fontsize); break;
 80036ee:	7afa      	ldrb	r2, [r7, #11]
 80036f0:	89b9      	ldrh	r1, [r7, #12]
 80036f2:	8ab8      	ldrh	r0, [r7, #20]
 80036f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80036f8:	9300      	str	r3, [sp, #0]
 80036fa:	4613      	mov	r3, r2
 80036fc:	2217      	movs	r2, #23
 80036fe:	f7fe fd8d 	bl	800221c <UB_VGA_DrawBitmap>
 8003702:	e000      	b.n	8003706 <UB_VGA_writeText+0x1372>
            				default: break;
 8003704:	bf00      	nop
                		switch(fontstyle)
 8003706:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800370a:	2b03      	cmp	r3, #3
 800370c:	d01d      	beq.n	800374a <UB_VGA_writeText+0x13b6>
 800370e:	2b03      	cmp	r3, #3
 8003710:	dc27      	bgt.n	8003762 <UB_VGA_writeText+0x13ce>
 8003712:	2b01      	cmp	r3, #1
 8003714:	d002      	beq.n	800371c <UB_VGA_writeText+0x1388>
 8003716:	2b02      	cmp	r3, #2
 8003718:	d00b      	beq.n	8003732 <UB_VGA_writeText+0x139e>
                			default: break;
 800371a:	e022      	b.n	8003762 <UB_VGA_writeText+0x13ce>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 50, color, fontsize); break;
 800371c:	7afa      	ldrb	r2, [r7, #11]
 800371e:	89b9      	ldrh	r1, [r7, #12]
 8003720:	8ab8      	ldrh	r0, [r7, #20]
 8003722:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003726:	9300      	str	r3, [sp, #0]
 8003728:	4613      	mov	r3, r2
 800372a:	2232      	movs	r2, #50	; 0x32
 800372c:	f7fe fd76 	bl	800221c <UB_VGA_DrawBitmap>
 8003730:	e018      	b.n	8003764 <UB_VGA_writeText+0x13d0>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 523, color, fontsize); break;
 8003732:	7afa      	ldrb	r2, [r7, #11]
 8003734:	89b9      	ldrh	r1, [r7, #12]
 8003736:	8ab8      	ldrh	r0, [r7, #20]
 8003738:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800373c:	9300      	str	r3, [sp, #0]
 800373e:	4613      	mov	r3, r2
 8003740:	f240 220b 	movw	r2, #523	; 0x20b
 8003744:	f7fe fd6a 	bl	800221c <UB_VGA_DrawBitmap>
 8003748:	e00c      	b.n	8003764 <UB_VGA_writeText+0x13d0>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 550, color, fontsize); break;
 800374a:	7afa      	ldrb	r2, [r7, #11]
 800374c:	89b9      	ldrh	r1, [r7, #12]
 800374e:	8ab8      	ldrh	r0, [r7, #20]
 8003750:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003754:	9300      	str	r3, [sp, #0]
 8003756:	4613      	mov	r3, r2
 8003758:	f240 2226 	movw	r2, #550	; 0x226
 800375c:	f7fe fd5e 	bl	800221c <UB_VGA_DrawBitmap>
 8003760:	e000      	b.n	8003764 <UB_VGA_writeText+0x13d0>
                			default: break;
 8003762:	bf00      	nop
                break;
 8003764:	e0c8      	b.n	80038f8 <UB_VGA_writeText+0x1564>
            case 'y':
            	switch(fontname)
 8003766:	f897 3020 	ldrb.w	r3, [r7, #32]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d002      	beq.n	8003774 <UB_VGA_writeText+0x13e0>
 800376e:	2b02      	cmp	r3, #2
 8003770:	d02d      	beq.n	80037ce <UB_VGA_writeText+0x143a>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 551, color, fontsize); break;
                			default: break;
                		}
                	default: break;
            	}
                break;
 8003772:	e0c1      	b.n	80038f8 <UB_VGA_writeText+0x1564>
            			switch(fontstyle)
 8003774:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003778:	2b03      	cmp	r3, #3
 800377a:	d01c      	beq.n	80037b6 <UB_VGA_writeText+0x1422>
 800377c:	2b03      	cmp	r3, #3
 800377e:	dc25      	bgt.n	80037cc <UB_VGA_writeText+0x1438>
 8003780:	2b01      	cmp	r3, #1
 8003782:	d002      	beq.n	800378a <UB_VGA_writeText+0x13f6>
 8003784:	2b02      	cmp	r3, #2
 8003786:	d00b      	beq.n	80037a0 <UB_VGA_writeText+0x140c>
            				default: break;
 8003788:	e020      	b.n	80037cc <UB_VGA_writeText+0x1438>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'y', color, fontsize); break;
 800378a:	7afa      	ldrb	r2, [r7, #11]
 800378c:	89b9      	ldrh	r1, [r7, #12]
 800378e:	8ab8      	ldrh	r0, [r7, #20]
 8003790:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	4613      	mov	r3, r2
 8003798:	2279      	movs	r2, #121	; 0x79
 800379a:	f7fe fd3f 	bl	800221c <UB_VGA_DrawBitmap>
 800379e:	e016      	b.n	80037ce <UB_VGA_writeText+0x143a>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'Y', color, fontsize); break;
 80037a0:	7afa      	ldrb	r2, [r7, #11]
 80037a2:	89b9      	ldrh	r1, [r7, #12]
 80037a4:	8ab8      	ldrh	r0, [r7, #20]
 80037a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80037aa:	9300      	str	r3, [sp, #0]
 80037ac:	4613      	mov	r3, r2
 80037ae:	2259      	movs	r2, #89	; 0x59
 80037b0:	f7fe fd34 	bl	800221c <UB_VGA_DrawBitmap>
 80037b4:	e00b      	b.n	80037ce <UB_VGA_writeText+0x143a>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 24, color, fontsize); break;
 80037b6:	7afa      	ldrb	r2, [r7, #11]
 80037b8:	89b9      	ldrh	r1, [r7, #12]
 80037ba:	8ab8      	ldrh	r0, [r7, #20]
 80037bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	4613      	mov	r3, r2
 80037c4:	2218      	movs	r2, #24
 80037c6:	f7fe fd29 	bl	800221c <UB_VGA_DrawBitmap>
 80037ca:	e000      	b.n	80037ce <UB_VGA_writeText+0x143a>
            				default: break;
 80037cc:	bf00      	nop
                		switch(fontstyle)
 80037ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80037d2:	2b03      	cmp	r3, #3
 80037d4:	d01d      	beq.n	8003812 <UB_VGA_writeText+0x147e>
 80037d6:	2b03      	cmp	r3, #3
 80037d8:	dc27      	bgt.n	800382a <UB_VGA_writeText+0x1496>
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d002      	beq.n	80037e4 <UB_VGA_writeText+0x1450>
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d00b      	beq.n	80037fa <UB_VGA_writeText+0x1466>
                			default: break;
 80037e2:	e022      	b.n	800382a <UB_VGA_writeText+0x1496>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 51, color, fontsize); break;
 80037e4:	7afa      	ldrb	r2, [r7, #11]
 80037e6:	89b9      	ldrh	r1, [r7, #12]
 80037e8:	8ab8      	ldrh	r0, [r7, #20]
 80037ea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80037ee:	9300      	str	r3, [sp, #0]
 80037f0:	4613      	mov	r3, r2
 80037f2:	2233      	movs	r2, #51	; 0x33
 80037f4:	f7fe fd12 	bl	800221c <UB_VGA_DrawBitmap>
 80037f8:	e018      	b.n	800382c <UB_VGA_writeText+0x1498>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 524, color, fontsize); break;
 80037fa:	7afa      	ldrb	r2, [r7, #11]
 80037fc:	89b9      	ldrh	r1, [r7, #12]
 80037fe:	8ab8      	ldrh	r0, [r7, #20]
 8003800:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	4613      	mov	r3, r2
 8003808:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800380c:	f7fe fd06 	bl	800221c <UB_VGA_DrawBitmap>
 8003810:	e00c      	b.n	800382c <UB_VGA_writeText+0x1498>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 551, color, fontsize); break;
 8003812:	7afa      	ldrb	r2, [r7, #11]
 8003814:	89b9      	ldrh	r1, [r7, #12]
 8003816:	8ab8      	ldrh	r0, [r7, #20]
 8003818:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	4613      	mov	r3, r2
 8003820:	f240 2227 	movw	r2, #551	; 0x227
 8003824:	f7fe fcfa 	bl	800221c <UB_VGA_DrawBitmap>
 8003828:	e000      	b.n	800382c <UB_VGA_writeText+0x1498>
                			default: break;
 800382a:	bf00      	nop
                break;
 800382c:	e064      	b.n	80038f8 <UB_VGA_writeText+0x1564>
            case 'z':
            	switch(fontname)
 800382e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d002      	beq.n	800383c <UB_VGA_writeText+0x14a8>
 8003836:	2b02      	cmp	r3, #2
 8003838:	d02d      	beq.n	8003896 <UB_VGA_writeText+0x1502>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 552, color, fontsize); break;
                			default: break;
                		}
                	default: break;
            	}
                break;
 800383a:	e05d      	b.n	80038f8 <UB_VGA_writeText+0x1564>
            			switch(fontstyle)
 800383c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003840:	2b03      	cmp	r3, #3
 8003842:	d01c      	beq.n	800387e <UB_VGA_writeText+0x14ea>
 8003844:	2b03      	cmp	r3, #3
 8003846:	dc25      	bgt.n	8003894 <UB_VGA_writeText+0x1500>
 8003848:	2b01      	cmp	r3, #1
 800384a:	d002      	beq.n	8003852 <UB_VGA_writeText+0x14be>
 800384c:	2b02      	cmp	r3, #2
 800384e:	d00b      	beq.n	8003868 <UB_VGA_writeText+0x14d4>
            				default: break;
 8003850:	e020      	b.n	8003894 <UB_VGA_writeText+0x1500>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'z', color, fontsize); break;
 8003852:	7afa      	ldrb	r2, [r7, #11]
 8003854:	89b9      	ldrh	r1, [r7, #12]
 8003856:	8ab8      	ldrh	r0, [r7, #20]
 8003858:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800385c:	9300      	str	r3, [sp, #0]
 800385e:	4613      	mov	r3, r2
 8003860:	227a      	movs	r2, #122	; 0x7a
 8003862:	f7fe fcdb 	bl	800221c <UB_VGA_DrawBitmap>
 8003866:	e016      	b.n	8003896 <UB_VGA_writeText+0x1502>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'Z', color, fontsize); break;
 8003868:	7afa      	ldrb	r2, [r7, #11]
 800386a:	89b9      	ldrh	r1, [r7, #12]
 800386c:	8ab8      	ldrh	r0, [r7, #20]
 800386e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	4613      	mov	r3, r2
 8003876:	225a      	movs	r2, #90	; 0x5a
 8003878:	f7fe fcd0 	bl	800221c <UB_VGA_DrawBitmap>
 800387c:	e00b      	b.n	8003896 <UB_VGA_writeText+0x1502>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 25, color, fontsize); break;
 800387e:	7afa      	ldrb	r2, [r7, #11]
 8003880:	89b9      	ldrh	r1, [r7, #12]
 8003882:	8ab8      	ldrh	r0, [r7, #20]
 8003884:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	4613      	mov	r3, r2
 800388c:	2219      	movs	r2, #25
 800388e:	f7fe fcc5 	bl	800221c <UB_VGA_DrawBitmap>
 8003892:	e000      	b.n	8003896 <UB_VGA_writeText+0x1502>
            				default: break;
 8003894:	bf00      	nop
                		switch(fontstyle)
 8003896:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800389a:	2b03      	cmp	r3, #3
 800389c:	d01d      	beq.n	80038da <UB_VGA_writeText+0x1546>
 800389e:	2b03      	cmp	r3, #3
 80038a0:	dc27      	bgt.n	80038f2 <UB_VGA_writeText+0x155e>
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d002      	beq.n	80038ac <UB_VGA_writeText+0x1518>
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d00b      	beq.n	80038c2 <UB_VGA_writeText+0x152e>
                			default: break;
 80038aa:	e022      	b.n	80038f2 <UB_VGA_writeText+0x155e>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 52, color, fontsize); break;
 80038ac:	7afa      	ldrb	r2, [r7, #11]
 80038ae:	89b9      	ldrh	r1, [r7, #12]
 80038b0:	8ab8      	ldrh	r0, [r7, #20]
 80038b2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	4613      	mov	r3, r2
 80038ba:	2234      	movs	r2, #52	; 0x34
 80038bc:	f7fe fcae 	bl	800221c <UB_VGA_DrawBitmap>
 80038c0:	e018      	b.n	80038f4 <UB_VGA_writeText+0x1560>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 525, color, fontsize); break;
 80038c2:	7afa      	ldrb	r2, [r7, #11]
 80038c4:	89b9      	ldrh	r1, [r7, #12]
 80038c6:	8ab8      	ldrh	r0, [r7, #20]
 80038c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80038cc:	9300      	str	r3, [sp, #0]
 80038ce:	4613      	mov	r3, r2
 80038d0:	f240 220d 	movw	r2, #525	; 0x20d
 80038d4:	f7fe fca2 	bl	800221c <UB_VGA_DrawBitmap>
 80038d8:	e00c      	b.n	80038f4 <UB_VGA_writeText+0x1560>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 552, color, fontsize); break;
 80038da:	7afa      	ldrb	r2, [r7, #11]
 80038dc:	89b9      	ldrh	r1, [r7, #12]
 80038de:	8ab8      	ldrh	r0, [r7, #20]
 80038e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80038e4:	9300      	str	r3, [sp, #0]
 80038e6:	4613      	mov	r3, r2
 80038e8:	f44f 720a 	mov.w	r2, #552	; 0x228
 80038ec:	f7fe fc96 	bl	800221c <UB_VGA_DrawBitmap>
 80038f0:	e000      	b.n	80038f4 <UB_VGA_writeText+0x1560>
                			default: break;
 80038f2:	bf00      	nop
                break;
 80038f4:	e000      	b.n	80038f8 <UB_VGA_writeText+0x1564>
            default:
                break;
 80038f6:	bf00      	nop
    for(i=0; i < 20; i++)	//maximum text size of 20 letters
 80038f8:	7dfb      	ldrb	r3, [r7, #23]
 80038fa:	3301      	adds	r3, #1
 80038fc:	75fb      	strb	r3, [r7, #23]
 80038fe:	7dfb      	ldrb	r3, [r7, #23]
 8003900:	2b13      	cmp	r3, #19
 8003902:	f67e ad68 	bls.w	80023d6 <UB_VGA_writeText+0x42>


        }
    }
}
 8003906:	bf00      	nop
 8003908:	bf00      	nop
 800390a:	3718      	adds	r7, #24
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003914:	4b0e      	ldr	r3, [pc, #56]	; (8003950 <HAL_Init+0x40>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a0d      	ldr	r2, [pc, #52]	; (8003950 <HAL_Init+0x40>)
 800391a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800391e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003920:	4b0b      	ldr	r3, [pc, #44]	; (8003950 <HAL_Init+0x40>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a0a      	ldr	r2, [pc, #40]	; (8003950 <HAL_Init+0x40>)
 8003926:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800392a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800392c:	4b08      	ldr	r3, [pc, #32]	; (8003950 <HAL_Init+0x40>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a07      	ldr	r2, [pc, #28]	; (8003950 <HAL_Init+0x40>)
 8003932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003936:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003938:	2003      	movs	r0, #3
 800393a:	f000 f92b 	bl	8003b94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800393e:	2000      	movs	r0, #0
 8003940:	f000 f808 	bl	8003954 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003944:	f7fd fd80 	bl	8001448 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	40023c00 	.word	0x40023c00

08003954 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800395c:	4b12      	ldr	r3, [pc, #72]	; (80039a8 <HAL_InitTick+0x54>)
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	4b12      	ldr	r3, [pc, #72]	; (80039ac <HAL_InitTick+0x58>)
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	4619      	mov	r1, r3
 8003966:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800396a:	fbb3 f3f1 	udiv	r3, r3, r1
 800396e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003972:	4618      	mov	r0, r3
 8003974:	f000 f943 	bl	8003bfe <HAL_SYSTICK_Config>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e00e      	b.n	80039a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b0f      	cmp	r3, #15
 8003986:	d80a      	bhi.n	800399e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003988:	2200      	movs	r2, #0
 800398a:	6879      	ldr	r1, [r7, #4]
 800398c:	f04f 30ff 	mov.w	r0, #4294967295
 8003990:	f000 f90b 	bl	8003baa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003994:	4a06      	ldr	r2, [pc, #24]	; (80039b0 <HAL_InitTick+0x5c>)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800399a:	2300      	movs	r3, #0
 800399c:	e000      	b.n	80039a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3708      	adds	r7, #8
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	200000a8 	.word	0x200000a8
 80039ac:	200000b0 	.word	0x200000b0
 80039b0:	200000ac 	.word	0x200000ac

080039b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039b4:	b480      	push	{r7}
 80039b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039b8:	4b06      	ldr	r3, [pc, #24]	; (80039d4 <HAL_IncTick+0x20>)
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	461a      	mov	r2, r3
 80039be:	4b06      	ldr	r3, [pc, #24]	; (80039d8 <HAL_IncTick+0x24>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4413      	add	r3, r2
 80039c4:	4a04      	ldr	r2, [pc, #16]	; (80039d8 <HAL_IncTick+0x24>)
 80039c6:	6013      	str	r3, [r2, #0]
}
 80039c8:	bf00      	nop
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	200000b0 	.word	0x200000b0
 80039d8:	20013b2c 	.word	0x20013b2c

080039dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0
  return uwTick;
 80039e0:	4b03      	ldr	r3, [pc, #12]	; (80039f0 <HAL_GetTick+0x14>)
 80039e2:	681b      	ldr	r3, [r3, #0]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	20013b2c 	.word	0x20013b2c

080039f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f003 0307 	and.w	r3, r3, #7
 8003a02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a04:	4b0c      	ldr	r3, [pc, #48]	; (8003a38 <__NVIC_SetPriorityGrouping+0x44>)
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a0a:	68ba      	ldr	r2, [r7, #8]
 8003a0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a10:	4013      	ands	r3, r2
 8003a12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a26:	4a04      	ldr	r2, [pc, #16]	; (8003a38 <__NVIC_SetPriorityGrouping+0x44>)
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	60d3      	str	r3, [r2, #12]
}
 8003a2c:	bf00      	nop
 8003a2e:	3714      	adds	r7, #20
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr
 8003a38:	e000ed00 	.word	0xe000ed00

08003a3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a40:	4b04      	ldr	r3, [pc, #16]	; (8003a54 <__NVIC_GetPriorityGrouping+0x18>)
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	0a1b      	lsrs	r3, r3, #8
 8003a46:	f003 0307 	and.w	r3, r3, #7
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr
 8003a54:	e000ed00 	.word	0xe000ed00

08003a58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	4603      	mov	r3, r0
 8003a60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	db0b      	blt.n	8003a82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a6a:	79fb      	ldrb	r3, [r7, #7]
 8003a6c:	f003 021f 	and.w	r2, r3, #31
 8003a70:	4907      	ldr	r1, [pc, #28]	; (8003a90 <__NVIC_EnableIRQ+0x38>)
 8003a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a76:	095b      	lsrs	r3, r3, #5
 8003a78:	2001      	movs	r0, #1
 8003a7a:	fa00 f202 	lsl.w	r2, r0, r2
 8003a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a82:	bf00      	nop
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	e000e100 	.word	0xe000e100

08003a94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	6039      	str	r1, [r7, #0]
 8003a9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	db0a      	blt.n	8003abe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	b2da      	uxtb	r2, r3
 8003aac:	490c      	ldr	r1, [pc, #48]	; (8003ae0 <__NVIC_SetPriority+0x4c>)
 8003aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab2:	0112      	lsls	r2, r2, #4
 8003ab4:	b2d2      	uxtb	r2, r2
 8003ab6:	440b      	add	r3, r1
 8003ab8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003abc:	e00a      	b.n	8003ad4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	b2da      	uxtb	r2, r3
 8003ac2:	4908      	ldr	r1, [pc, #32]	; (8003ae4 <__NVIC_SetPriority+0x50>)
 8003ac4:	79fb      	ldrb	r3, [r7, #7]
 8003ac6:	f003 030f 	and.w	r3, r3, #15
 8003aca:	3b04      	subs	r3, #4
 8003acc:	0112      	lsls	r2, r2, #4
 8003ace:	b2d2      	uxtb	r2, r2
 8003ad0:	440b      	add	r3, r1
 8003ad2:	761a      	strb	r2, [r3, #24]
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr
 8003ae0:	e000e100 	.word	0xe000e100
 8003ae4:	e000ed00 	.word	0xe000ed00

08003ae8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b089      	sub	sp, #36	; 0x24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f003 0307 	and.w	r3, r3, #7
 8003afa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	f1c3 0307 	rsb	r3, r3, #7
 8003b02:	2b04      	cmp	r3, #4
 8003b04:	bf28      	it	cs
 8003b06:	2304      	movcs	r3, #4
 8003b08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	3304      	adds	r3, #4
 8003b0e:	2b06      	cmp	r3, #6
 8003b10:	d902      	bls.n	8003b18 <NVIC_EncodePriority+0x30>
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	3b03      	subs	r3, #3
 8003b16:	e000      	b.n	8003b1a <NVIC_EncodePriority+0x32>
 8003b18:	2300      	movs	r3, #0
 8003b1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	fa02 f303 	lsl.w	r3, r2, r3
 8003b26:	43da      	mvns	r2, r3
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	401a      	ands	r2, r3
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b30:	f04f 31ff 	mov.w	r1, #4294967295
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	fa01 f303 	lsl.w	r3, r1, r3
 8003b3a:	43d9      	mvns	r1, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b40:	4313      	orrs	r3, r2
         );
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3724      	adds	r7, #36	; 0x24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
	...

08003b50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b60:	d301      	bcc.n	8003b66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b62:	2301      	movs	r3, #1
 8003b64:	e00f      	b.n	8003b86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b66:	4a0a      	ldr	r2, [pc, #40]	; (8003b90 <SysTick_Config+0x40>)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b6e:	210f      	movs	r1, #15
 8003b70:	f04f 30ff 	mov.w	r0, #4294967295
 8003b74:	f7ff ff8e 	bl	8003a94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b78:	4b05      	ldr	r3, [pc, #20]	; (8003b90 <SysTick_Config+0x40>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b7e:	4b04      	ldr	r3, [pc, #16]	; (8003b90 <SysTick_Config+0x40>)
 8003b80:	2207      	movs	r2, #7
 8003b82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3708      	adds	r7, #8
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	e000e010 	.word	0xe000e010

08003b94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f7ff ff29 	bl	80039f4 <__NVIC_SetPriorityGrouping>
}
 8003ba2:	bf00      	nop
 8003ba4:	3708      	adds	r7, #8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b086      	sub	sp, #24
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	60b9      	str	r1, [r7, #8]
 8003bb4:	607a      	str	r2, [r7, #4]
 8003bb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003bbc:	f7ff ff3e 	bl	8003a3c <__NVIC_GetPriorityGrouping>
 8003bc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	68b9      	ldr	r1, [r7, #8]
 8003bc6:	6978      	ldr	r0, [r7, #20]
 8003bc8:	f7ff ff8e 	bl	8003ae8 <NVIC_EncodePriority>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bd2:	4611      	mov	r1, r2
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7ff ff5d 	bl	8003a94 <__NVIC_SetPriority>
}
 8003bda:	bf00      	nop
 8003bdc:	3718      	adds	r7, #24
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b082      	sub	sp, #8
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	4603      	mov	r3, r0
 8003bea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7ff ff31 	bl	8003a58 <__NVIC_EnableIRQ>
}
 8003bf6:	bf00      	nop
 8003bf8:	3708      	adds	r7, #8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b082      	sub	sp, #8
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f7ff ffa2 	bl	8003b50 <SysTick_Config>
 8003c0c:	4603      	mov	r3, r0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3708      	adds	r7, #8
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
	...

08003c18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c20:	2300      	movs	r3, #0
 8003c22:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003c24:	f7ff feda 	bl	80039dc <HAL_GetTick>
 8003c28:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d101      	bne.n	8003c34 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e099      	b.n	8003d68 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2202      	movs	r2, #2
 8003c40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 0201 	bic.w	r2, r2, #1
 8003c52:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c54:	e00f      	b.n	8003c76 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c56:	f7ff fec1 	bl	80039dc <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b05      	cmp	r3, #5
 8003c62:	d908      	bls.n	8003c76 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2220      	movs	r2, #32
 8003c68:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2203      	movs	r2, #3
 8003c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e078      	b.n	8003d68 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1e8      	bne.n	8003c56 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	4b38      	ldr	r3, [pc, #224]	; (8003d70 <HAL_DMA_Init+0x158>)
 8003c90:	4013      	ands	r3, r2
 8003c92:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685a      	ldr	r2, [r3, #4]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ca2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a1b      	ldr	r3, [r3, #32]
 8003cc0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ccc:	2b04      	cmp	r3, #4
 8003cce:	d107      	bne.n	8003ce0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	f023 0307 	bic.w	r3, r3, #7
 8003cf6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	2b04      	cmp	r3, #4
 8003d08:	d117      	bne.n	8003d3a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00e      	beq.n	8003d3a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 fa91 	bl	8004244 <DMA_CheckFifoParam>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d008      	beq.n	8003d3a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2240      	movs	r2, #64	; 0x40
 8003d2c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003d36:	2301      	movs	r3, #1
 8003d38:	e016      	b.n	8003d68 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 fa48 	bl	80041d8 <DMA_CalcBaseAndBitshift>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d50:	223f      	movs	r2, #63	; 0x3f
 8003d52:	409a      	lsls	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3718      	adds	r7, #24
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	f010803f 	.word	0xf010803f

08003d74 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
 8003d80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d82:	2300      	movs	r3, #0
 8003d84:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d8a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d101      	bne.n	8003d9a <HAL_DMA_Start_IT+0x26>
 8003d96:	2302      	movs	r3, #2
 8003d98:	e040      	b.n	8003e1c <HAL_DMA_Start_IT+0xa8>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d12f      	bne.n	8003e0e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2202      	movs	r2, #2
 8003db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	68b9      	ldr	r1, [r7, #8]
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f000 f9da 	bl	800417c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dcc:	223f      	movs	r2, #63	; 0x3f
 8003dce:	409a      	lsls	r2, r3
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f042 0216 	orr.w	r2, r2, #22
 8003de2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d007      	beq.n	8003dfc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f042 0208 	orr.w	r2, r2, #8
 8003dfa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f042 0201 	orr.w	r2, r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]
 8003e0c:	e005      	b.n	8003e1a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003e16:	2302      	movs	r3, #2
 8003e18:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003e1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3718      	adds	r7, #24
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d004      	beq.n	8003e42 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2280      	movs	r2, #128	; 0x80
 8003e3c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e00c      	b.n	8003e5c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2205      	movs	r2, #5
 8003e46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 0201 	bic.w	r2, r2, #1
 8003e58:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b086      	sub	sp, #24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003e70:	2300      	movs	r3, #0
 8003e72:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e74:	4b8e      	ldr	r3, [pc, #568]	; (80040b0 <HAL_DMA_IRQHandler+0x248>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a8e      	ldr	r2, [pc, #568]	; (80040b4 <HAL_DMA_IRQHandler+0x24c>)
 8003e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7e:	0a9b      	lsrs	r3, r3, #10
 8003e80:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e86:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e92:	2208      	movs	r2, #8
 8003e94:	409a      	lsls	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d01a      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0304 	and.w	r3, r3, #4
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d013      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 0204 	bic.w	r2, r2, #4
 8003eba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec0:	2208      	movs	r2, #8
 8003ec2:	409a      	lsls	r2, r3
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ecc:	f043 0201 	orr.w	r2, r3, #1
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed8:	2201      	movs	r2, #1
 8003eda:	409a      	lsls	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d012      	beq.n	8003f0a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00b      	beq.n	8003f0a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	409a      	lsls	r2, r3
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f02:	f043 0202 	orr.w	r2, r3, #2
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f0e:	2204      	movs	r2, #4
 8003f10:	409a      	lsls	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	4013      	ands	r3, r2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d012      	beq.n	8003f40 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00b      	beq.n	8003f40 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f2c:	2204      	movs	r2, #4
 8003f2e:	409a      	lsls	r2, r3
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f38:	f043 0204 	orr.w	r2, r3, #4
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f44:	2210      	movs	r2, #16
 8003f46:	409a      	lsls	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d043      	beq.n	8003fd8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0308 	and.w	r3, r3, #8
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d03c      	beq.n	8003fd8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f62:	2210      	movs	r2, #16
 8003f64:	409a      	lsls	r2, r3
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d018      	beq.n	8003faa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d108      	bne.n	8003f98 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d024      	beq.n	8003fd8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	4798      	blx	r3
 8003f96:	e01f      	b.n	8003fd8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d01b      	beq.n	8003fd8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	4798      	blx	r3
 8003fa8:	e016      	b.n	8003fd8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d107      	bne.n	8003fc8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f022 0208 	bic.w	r2, r2, #8
 8003fc6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d003      	beq.n	8003fd8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fdc:	2220      	movs	r2, #32
 8003fde:	409a      	lsls	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f000 808f 	beq.w	8004108 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0310 	and.w	r3, r3, #16
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 8087 	beq.w	8004108 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ffe:	2220      	movs	r2, #32
 8004000:	409a      	lsls	r2, r3
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800400c:	b2db      	uxtb	r3, r3
 800400e:	2b05      	cmp	r3, #5
 8004010:	d136      	bne.n	8004080 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 0216 	bic.w	r2, r2, #22
 8004020:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	695a      	ldr	r2, [r3, #20]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004030:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	2b00      	cmp	r3, #0
 8004038:	d103      	bne.n	8004042 <HAL_DMA_IRQHandler+0x1da>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800403e:	2b00      	cmp	r3, #0
 8004040:	d007      	beq.n	8004052 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f022 0208 	bic.w	r2, r2, #8
 8004050:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004056:	223f      	movs	r2, #63	; 0x3f
 8004058:	409a      	lsls	r2, r3
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2201      	movs	r2, #1
 800406a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004072:	2b00      	cmp	r3, #0
 8004074:	d07e      	beq.n	8004174 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	4798      	blx	r3
        }
        return;
 800407e:	e079      	b.n	8004174 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d01d      	beq.n	80040ca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d10d      	bne.n	80040b8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d031      	beq.n	8004108 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	4798      	blx	r3
 80040ac:	e02c      	b.n	8004108 <HAL_DMA_IRQHandler+0x2a0>
 80040ae:	bf00      	nop
 80040b0:	200000a8 	.word	0x200000a8
 80040b4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d023      	beq.n	8004108 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	4798      	blx	r3
 80040c8:	e01e      	b.n	8004108 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d10f      	bne.n	80040f8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 0210 	bic.w	r2, r2, #16
 80040e6:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d003      	beq.n	8004108 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800410c:	2b00      	cmp	r3, #0
 800410e:	d032      	beq.n	8004176 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	2b00      	cmp	r3, #0
 800411a:	d022      	beq.n	8004162 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2205      	movs	r2, #5
 8004120:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f022 0201 	bic.w	r2, r2, #1
 8004132:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	3301      	adds	r3, #1
 8004138:	60bb      	str	r3, [r7, #8]
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	429a      	cmp	r2, r3
 800413e:	d307      	bcc.n	8004150 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1f2      	bne.n	8004134 <HAL_DMA_IRQHandler+0x2cc>
 800414e:	e000      	b.n	8004152 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004150:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004166:	2b00      	cmp	r3, #0
 8004168:	d005      	beq.n	8004176 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	4798      	blx	r3
 8004172:	e000      	b.n	8004176 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004174:	bf00      	nop
    }
  }
}
 8004176:	3718      	adds	r7, #24
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
 8004188:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004198:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	683a      	ldr	r2, [r7, #0]
 80041a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	2b40      	cmp	r3, #64	; 0x40
 80041a8:	d108      	bne.n	80041bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68ba      	ldr	r2, [r7, #8]
 80041b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80041ba:	e007      	b.n	80041cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68ba      	ldr	r2, [r7, #8]
 80041c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	60da      	str	r2, [r3, #12]
}
 80041cc:	bf00      	nop
 80041ce:	3714      	adds	r7, #20
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	3b10      	subs	r3, #16
 80041e8:	4a14      	ldr	r2, [pc, #80]	; (800423c <DMA_CalcBaseAndBitshift+0x64>)
 80041ea:	fba2 2303 	umull	r2, r3, r2, r3
 80041ee:	091b      	lsrs	r3, r3, #4
 80041f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80041f2:	4a13      	ldr	r2, [pc, #76]	; (8004240 <DMA_CalcBaseAndBitshift+0x68>)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	4413      	add	r3, r2
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	461a      	mov	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2b03      	cmp	r3, #3
 8004204:	d909      	bls.n	800421a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800420e:	f023 0303 	bic.w	r3, r3, #3
 8004212:	1d1a      	adds	r2, r3, #4
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	659a      	str	r2, [r3, #88]	; 0x58
 8004218:	e007      	b.n	800422a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004222:	f023 0303 	bic.w	r3, r3, #3
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800422e:	4618      	mov	r0, r3
 8004230:	3714      	adds	r7, #20
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	aaaaaaab 	.word	0xaaaaaaab
 8004240:	0800cfe4 	.word	0x0800cfe4

08004244 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800424c:	2300      	movs	r3, #0
 800424e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004254:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d11f      	bne.n	800429e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	2b03      	cmp	r3, #3
 8004262:	d856      	bhi.n	8004312 <DMA_CheckFifoParam+0xce>
 8004264:	a201      	add	r2, pc, #4	; (adr r2, 800426c <DMA_CheckFifoParam+0x28>)
 8004266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426a:	bf00      	nop
 800426c:	0800427d 	.word	0x0800427d
 8004270:	0800428f 	.word	0x0800428f
 8004274:	0800427d 	.word	0x0800427d
 8004278:	08004313 	.word	0x08004313
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004280:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d046      	beq.n	8004316 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800428c:	e043      	b.n	8004316 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004292:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004296:	d140      	bne.n	800431a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800429c:	e03d      	b.n	800431a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042a6:	d121      	bne.n	80042ec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	2b03      	cmp	r3, #3
 80042ac:	d837      	bhi.n	800431e <DMA_CheckFifoParam+0xda>
 80042ae:	a201      	add	r2, pc, #4	; (adr r2, 80042b4 <DMA_CheckFifoParam+0x70>)
 80042b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b4:	080042c5 	.word	0x080042c5
 80042b8:	080042cb 	.word	0x080042cb
 80042bc:	080042c5 	.word	0x080042c5
 80042c0:	080042dd 	.word	0x080042dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	73fb      	strb	r3, [r7, #15]
      break;
 80042c8:	e030      	b.n	800432c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d025      	beq.n	8004322 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042da:	e022      	b.n	8004322 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042e4:	d11f      	bne.n	8004326 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80042ea:	e01c      	b.n	8004326 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d903      	bls.n	80042fa <DMA_CheckFifoParam+0xb6>
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	2b03      	cmp	r3, #3
 80042f6:	d003      	beq.n	8004300 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80042f8:	e018      	b.n	800432c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	73fb      	strb	r3, [r7, #15]
      break;
 80042fe:	e015      	b.n	800432c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004304:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00e      	beq.n	800432a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	73fb      	strb	r3, [r7, #15]
      break;
 8004310:	e00b      	b.n	800432a <DMA_CheckFifoParam+0xe6>
      break;
 8004312:	bf00      	nop
 8004314:	e00a      	b.n	800432c <DMA_CheckFifoParam+0xe8>
      break;
 8004316:	bf00      	nop
 8004318:	e008      	b.n	800432c <DMA_CheckFifoParam+0xe8>
      break;
 800431a:	bf00      	nop
 800431c:	e006      	b.n	800432c <DMA_CheckFifoParam+0xe8>
      break;
 800431e:	bf00      	nop
 8004320:	e004      	b.n	800432c <DMA_CheckFifoParam+0xe8>
      break;
 8004322:	bf00      	nop
 8004324:	e002      	b.n	800432c <DMA_CheckFifoParam+0xe8>
      break;   
 8004326:	bf00      	nop
 8004328:	e000      	b.n	800432c <DMA_CheckFifoParam+0xe8>
      break;
 800432a:	bf00      	nop
    }
  } 
  
  return status; 
 800432c:	7bfb      	ldrb	r3, [r7, #15]
}
 800432e:	4618      	mov	r0, r3
 8004330:	3714      	adds	r7, #20
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop

0800433c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800433c:	b480      	push	{r7}
 800433e:	b089      	sub	sp, #36	; 0x24
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004346:	2300      	movs	r3, #0
 8004348:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800434a:	2300      	movs	r3, #0
 800434c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800434e:	2300      	movs	r3, #0
 8004350:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004352:	2300      	movs	r3, #0
 8004354:	61fb      	str	r3, [r7, #28]
 8004356:	e16b      	b.n	8004630 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004358:	2201      	movs	r2, #1
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	fa02 f303 	lsl.w	r3, r2, r3
 8004360:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	4013      	ands	r3, r2
 800436a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	429a      	cmp	r2, r3
 8004372:	f040 815a 	bne.w	800462a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d00b      	beq.n	8004396 <HAL_GPIO_Init+0x5a>
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	2b02      	cmp	r3, #2
 8004384:	d007      	beq.n	8004396 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800438a:	2b11      	cmp	r3, #17
 800438c:	d003      	beq.n	8004396 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	2b12      	cmp	r3, #18
 8004394:	d130      	bne.n	80043f8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	2203      	movs	r2, #3
 80043a2:	fa02 f303 	lsl.w	r3, r2, r3
 80043a6:	43db      	mvns	r3, r3
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	4013      	ands	r3, r2
 80043ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	68da      	ldr	r2, [r3, #12]
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ba:	69ba      	ldr	r2, [r7, #24]
 80043bc:	4313      	orrs	r3, r2
 80043be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	69ba      	ldr	r2, [r7, #24]
 80043c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043cc:	2201      	movs	r2, #1
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	fa02 f303 	lsl.w	r3, r2, r3
 80043d4:	43db      	mvns	r3, r3
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	4013      	ands	r3, r2
 80043da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	091b      	lsrs	r3, r3, #4
 80043e2:	f003 0201 	and.w	r2, r3, #1
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ec:	69ba      	ldr	r2, [r7, #24]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	69ba      	ldr	r2, [r7, #24]
 80043f6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	005b      	lsls	r3, r3, #1
 8004402:	2203      	movs	r2, #3
 8004404:	fa02 f303 	lsl.w	r3, r2, r3
 8004408:	43db      	mvns	r3, r3
 800440a:	69ba      	ldr	r2, [r7, #24]
 800440c:	4013      	ands	r3, r2
 800440e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	689a      	ldr	r2, [r3, #8]
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	005b      	lsls	r3, r3, #1
 8004418:	fa02 f303 	lsl.w	r3, r2, r3
 800441c:	69ba      	ldr	r2, [r7, #24]
 800441e:	4313      	orrs	r3, r2
 8004420:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	2b02      	cmp	r3, #2
 800442e:	d003      	beq.n	8004438 <HAL_GPIO_Init+0xfc>
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	2b12      	cmp	r3, #18
 8004436:	d123      	bne.n	8004480 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	08da      	lsrs	r2, r3, #3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	3208      	adds	r2, #8
 8004440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004444:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	f003 0307 	and.w	r3, r3, #7
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	220f      	movs	r2, #15
 8004450:	fa02 f303 	lsl.w	r3, r2, r3
 8004454:	43db      	mvns	r3, r3
 8004456:	69ba      	ldr	r2, [r7, #24]
 8004458:	4013      	ands	r3, r2
 800445a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	691a      	ldr	r2, [r3, #16]
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	f003 0307 	and.w	r3, r3, #7
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	fa02 f303 	lsl.w	r3, r2, r3
 800446c:	69ba      	ldr	r2, [r7, #24]
 800446e:	4313      	orrs	r3, r2
 8004470:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	08da      	lsrs	r2, r3, #3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	3208      	adds	r2, #8
 800447a:	69b9      	ldr	r1, [r7, #24]
 800447c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	2203      	movs	r2, #3
 800448c:	fa02 f303 	lsl.w	r3, r2, r3
 8004490:	43db      	mvns	r3, r3
 8004492:	69ba      	ldr	r2, [r7, #24]
 8004494:	4013      	ands	r3, r2
 8004496:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f003 0203 	and.w	r2, r3, #3
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	005b      	lsls	r3, r3, #1
 80044a4:	fa02 f303 	lsl.w	r3, r2, r3
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f000 80b4 	beq.w	800462a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044c2:	2300      	movs	r3, #0
 80044c4:	60fb      	str	r3, [r7, #12]
 80044c6:	4b60      	ldr	r3, [pc, #384]	; (8004648 <HAL_GPIO_Init+0x30c>)
 80044c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ca:	4a5f      	ldr	r2, [pc, #380]	; (8004648 <HAL_GPIO_Init+0x30c>)
 80044cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044d0:	6453      	str	r3, [r2, #68]	; 0x44
 80044d2:	4b5d      	ldr	r3, [pc, #372]	; (8004648 <HAL_GPIO_Init+0x30c>)
 80044d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044da:	60fb      	str	r3, [r7, #12]
 80044dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044de:	4a5b      	ldr	r2, [pc, #364]	; (800464c <HAL_GPIO_Init+0x310>)
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	089b      	lsrs	r3, r3, #2
 80044e4:	3302      	adds	r3, #2
 80044e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	f003 0303 	and.w	r3, r3, #3
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	220f      	movs	r2, #15
 80044f6:	fa02 f303 	lsl.w	r3, r2, r3
 80044fa:	43db      	mvns	r3, r3
 80044fc:	69ba      	ldr	r2, [r7, #24]
 80044fe:	4013      	ands	r3, r2
 8004500:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a52      	ldr	r2, [pc, #328]	; (8004650 <HAL_GPIO_Init+0x314>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d02b      	beq.n	8004562 <HAL_GPIO_Init+0x226>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a51      	ldr	r2, [pc, #324]	; (8004654 <HAL_GPIO_Init+0x318>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d025      	beq.n	800455e <HAL_GPIO_Init+0x222>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a50      	ldr	r2, [pc, #320]	; (8004658 <HAL_GPIO_Init+0x31c>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d01f      	beq.n	800455a <HAL_GPIO_Init+0x21e>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a4f      	ldr	r2, [pc, #316]	; (800465c <HAL_GPIO_Init+0x320>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d019      	beq.n	8004556 <HAL_GPIO_Init+0x21a>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a4e      	ldr	r2, [pc, #312]	; (8004660 <HAL_GPIO_Init+0x324>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d013      	beq.n	8004552 <HAL_GPIO_Init+0x216>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a4d      	ldr	r2, [pc, #308]	; (8004664 <HAL_GPIO_Init+0x328>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d00d      	beq.n	800454e <HAL_GPIO_Init+0x212>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a4c      	ldr	r2, [pc, #304]	; (8004668 <HAL_GPIO_Init+0x32c>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d007      	beq.n	800454a <HAL_GPIO_Init+0x20e>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a4b      	ldr	r2, [pc, #300]	; (800466c <HAL_GPIO_Init+0x330>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d101      	bne.n	8004546 <HAL_GPIO_Init+0x20a>
 8004542:	2307      	movs	r3, #7
 8004544:	e00e      	b.n	8004564 <HAL_GPIO_Init+0x228>
 8004546:	2308      	movs	r3, #8
 8004548:	e00c      	b.n	8004564 <HAL_GPIO_Init+0x228>
 800454a:	2306      	movs	r3, #6
 800454c:	e00a      	b.n	8004564 <HAL_GPIO_Init+0x228>
 800454e:	2305      	movs	r3, #5
 8004550:	e008      	b.n	8004564 <HAL_GPIO_Init+0x228>
 8004552:	2304      	movs	r3, #4
 8004554:	e006      	b.n	8004564 <HAL_GPIO_Init+0x228>
 8004556:	2303      	movs	r3, #3
 8004558:	e004      	b.n	8004564 <HAL_GPIO_Init+0x228>
 800455a:	2302      	movs	r3, #2
 800455c:	e002      	b.n	8004564 <HAL_GPIO_Init+0x228>
 800455e:	2301      	movs	r3, #1
 8004560:	e000      	b.n	8004564 <HAL_GPIO_Init+0x228>
 8004562:	2300      	movs	r3, #0
 8004564:	69fa      	ldr	r2, [r7, #28]
 8004566:	f002 0203 	and.w	r2, r2, #3
 800456a:	0092      	lsls	r2, r2, #2
 800456c:	4093      	lsls	r3, r2
 800456e:	69ba      	ldr	r2, [r7, #24]
 8004570:	4313      	orrs	r3, r2
 8004572:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004574:	4935      	ldr	r1, [pc, #212]	; (800464c <HAL_GPIO_Init+0x310>)
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	089b      	lsrs	r3, r3, #2
 800457a:	3302      	adds	r3, #2
 800457c:	69ba      	ldr	r2, [r7, #24]
 800457e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004582:	4b3b      	ldr	r3, [pc, #236]	; (8004670 <HAL_GPIO_Init+0x334>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	43db      	mvns	r3, r3
 800458c:	69ba      	ldr	r2, [r7, #24]
 800458e:	4013      	ands	r3, r2
 8004590:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d003      	beq.n	80045a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800459e:	69ba      	ldr	r2, [r7, #24]
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045a6:	4a32      	ldr	r2, [pc, #200]	; (8004670 <HAL_GPIO_Init+0x334>)
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80045ac:	4b30      	ldr	r3, [pc, #192]	; (8004670 <HAL_GPIO_Init+0x334>)
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	43db      	mvns	r3, r3
 80045b6:	69ba      	ldr	r2, [r7, #24]
 80045b8:	4013      	ands	r3, r2
 80045ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d003      	beq.n	80045d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80045c8:	69ba      	ldr	r2, [r7, #24]
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80045d0:	4a27      	ldr	r2, [pc, #156]	; (8004670 <HAL_GPIO_Init+0x334>)
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045d6:	4b26      	ldr	r3, [pc, #152]	; (8004670 <HAL_GPIO_Init+0x334>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	43db      	mvns	r3, r3
 80045e0:	69ba      	ldr	r2, [r7, #24]
 80045e2:	4013      	ands	r3, r2
 80045e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d003      	beq.n	80045fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80045f2:	69ba      	ldr	r2, [r7, #24]
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80045fa:	4a1d      	ldr	r2, [pc, #116]	; (8004670 <HAL_GPIO_Init+0x334>)
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004600:	4b1b      	ldr	r3, [pc, #108]	; (8004670 <HAL_GPIO_Init+0x334>)
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	43db      	mvns	r3, r3
 800460a:	69ba      	ldr	r2, [r7, #24]
 800460c:	4013      	ands	r3, r2
 800460e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d003      	beq.n	8004624 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800461c:	69ba      	ldr	r2, [r7, #24]
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	4313      	orrs	r3, r2
 8004622:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004624:	4a12      	ldr	r2, [pc, #72]	; (8004670 <HAL_GPIO_Init+0x334>)
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	3301      	adds	r3, #1
 800462e:	61fb      	str	r3, [r7, #28]
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	2b0f      	cmp	r3, #15
 8004634:	f67f ae90 	bls.w	8004358 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004638:	bf00      	nop
 800463a:	bf00      	nop
 800463c:	3724      	adds	r7, #36	; 0x24
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	40023800 	.word	0x40023800
 800464c:	40013800 	.word	0x40013800
 8004650:	40020000 	.word	0x40020000
 8004654:	40020400 	.word	0x40020400
 8004658:	40020800 	.word	0x40020800
 800465c:	40020c00 	.word	0x40020c00
 8004660:	40021000 	.word	0x40021000
 8004664:	40021400 	.word	0x40021400
 8004668:	40021800 	.word	0x40021800
 800466c:	40021c00 	.word	0x40021c00
 8004670:	40013c00 	.word	0x40013c00

08004674 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	460b      	mov	r3, r1
 800467e:	807b      	strh	r3, [r7, #2]
 8004680:	4613      	mov	r3, r2
 8004682:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004684:	787b      	ldrb	r3, [r7, #1]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d003      	beq.n	8004692 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800468a:	887a      	ldrh	r2, [r7, #2]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004690:	e003      	b.n	800469a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004692:	887b      	ldrh	r3, [r7, #2]
 8004694:	041a      	lsls	r2, r3, #16
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	619a      	str	r2, [r3, #24]
}
 800469a:	bf00      	nop
 800469c:	370c      	adds	r7, #12
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
	...

080046a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b086      	sub	sp, #24
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e25e      	b.n	8004b78 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d075      	beq.n	80047b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046c6:	4b88      	ldr	r3, [pc, #544]	; (80048e8 <HAL_RCC_OscConfig+0x240>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f003 030c 	and.w	r3, r3, #12
 80046ce:	2b04      	cmp	r3, #4
 80046d0:	d00c      	beq.n	80046ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046d2:	4b85      	ldr	r3, [pc, #532]	; (80048e8 <HAL_RCC_OscConfig+0x240>)
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046da:	2b08      	cmp	r3, #8
 80046dc:	d112      	bne.n	8004704 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046de:	4b82      	ldr	r3, [pc, #520]	; (80048e8 <HAL_RCC_OscConfig+0x240>)
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046ea:	d10b      	bne.n	8004704 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046ec:	4b7e      	ldr	r3, [pc, #504]	; (80048e8 <HAL_RCC_OscConfig+0x240>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d05b      	beq.n	80047b0 <HAL_RCC_OscConfig+0x108>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d157      	bne.n	80047b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e239      	b.n	8004b78 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800470c:	d106      	bne.n	800471c <HAL_RCC_OscConfig+0x74>
 800470e:	4b76      	ldr	r3, [pc, #472]	; (80048e8 <HAL_RCC_OscConfig+0x240>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a75      	ldr	r2, [pc, #468]	; (80048e8 <HAL_RCC_OscConfig+0x240>)
 8004714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004718:	6013      	str	r3, [r2, #0]
 800471a:	e01d      	b.n	8004758 <HAL_RCC_OscConfig+0xb0>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004724:	d10c      	bne.n	8004740 <HAL_RCC_OscConfig+0x98>
 8004726:	4b70      	ldr	r3, [pc, #448]	; (80048e8 <HAL_RCC_OscConfig+0x240>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a6f      	ldr	r2, [pc, #444]	; (80048e8 <HAL_RCC_OscConfig+0x240>)
 800472c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004730:	6013      	str	r3, [r2, #0]
 8004732:	4b6d      	ldr	r3, [pc, #436]	; (80048e8 <HAL_RCC_OscConfig+0x240>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a6c      	ldr	r2, [pc, #432]	; (80048e8 <HAL_RCC_OscConfig+0x240>)
 8004738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800473c:	6013      	str	r3, [r2, #0]
 800473e:	e00b      	b.n	8004758 <HAL_RCC_OscConfig+0xb0>
 8004740:	4b69      	ldr	r3, [pc, #420]	; (80048e8 <HAL_RCC_OscConfig+0x240>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a68      	ldr	r2, [pc, #416]	; (80048e8 <HAL_RCC_OscConfig+0x240>)
 8004746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800474a:	6013      	str	r3, [r2, #0]
 800474c:	4b66      	ldr	r3, [pc, #408]	; (80048e8 <HAL_RCC_OscConfig+0x240>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a65      	ldr	r2, [pc, #404]	; (80048e8 <HAL_RCC_OscConfig+0x240>)
 8004752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004756:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d013      	beq.n	8004788 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004760:	f7ff f93c 	bl	80039dc <HAL_GetTick>
 8004764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004766:	e008      	b.n	800477a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004768:	f7ff f938 	bl	80039dc <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	2b64      	cmp	r3, #100	; 0x64
 8004774:	d901      	bls.n	800477a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e1fe      	b.n	8004b78 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800477a:	4b5b      	ldr	r3, [pc, #364]	; (80048e8 <HAL_RCC_OscConfig+0x240>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d0f0      	beq.n	8004768 <HAL_RCC_OscConfig+0xc0>
 8004786:	e014      	b.n	80047b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004788:	f7ff f928 	bl	80039dc <HAL_GetTick>
 800478c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800478e:	e008      	b.n	80047a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004790:	f7ff f924 	bl	80039dc <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b64      	cmp	r3, #100	; 0x64
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e1ea      	b.n	8004b78 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047a2:	4b51      	ldr	r3, [pc, #324]	; (80048e8 <HAL_RCC_OscConfig+0x240>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1f0      	bne.n	8004790 <HAL_RCC_OscConfig+0xe8>
 80047ae:	e000      	b.n	80047b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d063      	beq.n	8004886 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047be:	4b4a      	ldr	r3, [pc, #296]	; (80048e8 <HAL_RCC_OscConfig+0x240>)
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f003 030c 	and.w	r3, r3, #12
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00b      	beq.n	80047e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047ca:	4b47      	ldr	r3, [pc, #284]	; (80048e8 <HAL_RCC_OscConfig+0x240>)
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047d2:	2b08      	cmp	r3, #8
 80047d4:	d11c      	bne.n	8004810 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047d6:	4b44      	ldr	r3, [pc, #272]	; (80048e8 <HAL_RCC_OscConfig+0x240>)
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d116      	bne.n	8004810 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047e2:	4b41      	ldr	r3, [pc, #260]	; (80048e8 <HAL_RCC_OscConfig+0x240>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d005      	beq.n	80047fa <HAL_RCC_OscConfig+0x152>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d001      	beq.n	80047fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e1be      	b.n	8004b78 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047fa:	4b3b      	ldr	r3, [pc, #236]	; (80048e8 <HAL_RCC_OscConfig+0x240>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	00db      	lsls	r3, r3, #3
 8004808:	4937      	ldr	r1, [pc, #220]	; (80048e8 <HAL_RCC_OscConfig+0x240>)
 800480a:	4313      	orrs	r3, r2
 800480c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800480e:	e03a      	b.n	8004886 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d020      	beq.n	800485a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004818:	4b34      	ldr	r3, [pc, #208]	; (80048ec <HAL_RCC_OscConfig+0x244>)
 800481a:	2201      	movs	r2, #1
 800481c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800481e:	f7ff f8dd 	bl	80039dc <HAL_GetTick>
 8004822:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004824:	e008      	b.n	8004838 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004826:	f7ff f8d9 	bl	80039dc <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	2b02      	cmp	r3, #2
 8004832:	d901      	bls.n	8004838 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e19f      	b.n	8004b78 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004838:	4b2b      	ldr	r3, [pc, #172]	; (80048e8 <HAL_RCC_OscConfig+0x240>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0302 	and.w	r3, r3, #2
 8004840:	2b00      	cmp	r3, #0
 8004842:	d0f0      	beq.n	8004826 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004844:	4b28      	ldr	r3, [pc, #160]	; (80048e8 <HAL_RCC_OscConfig+0x240>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	00db      	lsls	r3, r3, #3
 8004852:	4925      	ldr	r1, [pc, #148]	; (80048e8 <HAL_RCC_OscConfig+0x240>)
 8004854:	4313      	orrs	r3, r2
 8004856:	600b      	str	r3, [r1, #0]
 8004858:	e015      	b.n	8004886 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800485a:	4b24      	ldr	r3, [pc, #144]	; (80048ec <HAL_RCC_OscConfig+0x244>)
 800485c:	2200      	movs	r2, #0
 800485e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004860:	f7ff f8bc 	bl	80039dc <HAL_GetTick>
 8004864:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004866:	e008      	b.n	800487a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004868:	f7ff f8b8 	bl	80039dc <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b02      	cmp	r3, #2
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e17e      	b.n	8004b78 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800487a:	4b1b      	ldr	r3, [pc, #108]	; (80048e8 <HAL_RCC_OscConfig+0x240>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1f0      	bne.n	8004868 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0308 	and.w	r3, r3, #8
 800488e:	2b00      	cmp	r3, #0
 8004890:	d036      	beq.n	8004900 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d016      	beq.n	80048c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800489a:	4b15      	ldr	r3, [pc, #84]	; (80048f0 <HAL_RCC_OscConfig+0x248>)
 800489c:	2201      	movs	r2, #1
 800489e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048a0:	f7ff f89c 	bl	80039dc <HAL_GetTick>
 80048a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048a6:	e008      	b.n	80048ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048a8:	f7ff f898 	bl	80039dc <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e15e      	b.n	8004b78 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048ba:	4b0b      	ldr	r3, [pc, #44]	; (80048e8 <HAL_RCC_OscConfig+0x240>)
 80048bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d0f0      	beq.n	80048a8 <HAL_RCC_OscConfig+0x200>
 80048c6:	e01b      	b.n	8004900 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048c8:	4b09      	ldr	r3, [pc, #36]	; (80048f0 <HAL_RCC_OscConfig+0x248>)
 80048ca:	2200      	movs	r2, #0
 80048cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048ce:	f7ff f885 	bl	80039dc <HAL_GetTick>
 80048d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048d4:	e00e      	b.n	80048f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048d6:	f7ff f881 	bl	80039dc <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d907      	bls.n	80048f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e147      	b.n	8004b78 <HAL_RCC_OscConfig+0x4d0>
 80048e8:	40023800 	.word	0x40023800
 80048ec:	42470000 	.word	0x42470000
 80048f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048f4:	4b88      	ldr	r3, [pc, #544]	; (8004b18 <HAL_RCC_OscConfig+0x470>)
 80048f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048f8:	f003 0302 	and.w	r3, r3, #2
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1ea      	bne.n	80048d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0304 	and.w	r3, r3, #4
 8004908:	2b00      	cmp	r3, #0
 800490a:	f000 8097 	beq.w	8004a3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800490e:	2300      	movs	r3, #0
 8004910:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004912:	4b81      	ldr	r3, [pc, #516]	; (8004b18 <HAL_RCC_OscConfig+0x470>)
 8004914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d10f      	bne.n	800493e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800491e:	2300      	movs	r3, #0
 8004920:	60bb      	str	r3, [r7, #8]
 8004922:	4b7d      	ldr	r3, [pc, #500]	; (8004b18 <HAL_RCC_OscConfig+0x470>)
 8004924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004926:	4a7c      	ldr	r2, [pc, #496]	; (8004b18 <HAL_RCC_OscConfig+0x470>)
 8004928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800492c:	6413      	str	r3, [r2, #64]	; 0x40
 800492e:	4b7a      	ldr	r3, [pc, #488]	; (8004b18 <HAL_RCC_OscConfig+0x470>)
 8004930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004936:	60bb      	str	r3, [r7, #8]
 8004938:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800493a:	2301      	movs	r3, #1
 800493c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800493e:	4b77      	ldr	r3, [pc, #476]	; (8004b1c <HAL_RCC_OscConfig+0x474>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004946:	2b00      	cmp	r3, #0
 8004948:	d118      	bne.n	800497c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800494a:	4b74      	ldr	r3, [pc, #464]	; (8004b1c <HAL_RCC_OscConfig+0x474>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a73      	ldr	r2, [pc, #460]	; (8004b1c <HAL_RCC_OscConfig+0x474>)
 8004950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004954:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004956:	f7ff f841 	bl	80039dc <HAL_GetTick>
 800495a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800495c:	e008      	b.n	8004970 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800495e:	f7ff f83d 	bl	80039dc <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	2b02      	cmp	r3, #2
 800496a:	d901      	bls.n	8004970 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	e103      	b.n	8004b78 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004970:	4b6a      	ldr	r3, [pc, #424]	; (8004b1c <HAL_RCC_OscConfig+0x474>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004978:	2b00      	cmp	r3, #0
 800497a:	d0f0      	beq.n	800495e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d106      	bne.n	8004992 <HAL_RCC_OscConfig+0x2ea>
 8004984:	4b64      	ldr	r3, [pc, #400]	; (8004b18 <HAL_RCC_OscConfig+0x470>)
 8004986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004988:	4a63      	ldr	r2, [pc, #396]	; (8004b18 <HAL_RCC_OscConfig+0x470>)
 800498a:	f043 0301 	orr.w	r3, r3, #1
 800498e:	6713      	str	r3, [r2, #112]	; 0x70
 8004990:	e01c      	b.n	80049cc <HAL_RCC_OscConfig+0x324>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	2b05      	cmp	r3, #5
 8004998:	d10c      	bne.n	80049b4 <HAL_RCC_OscConfig+0x30c>
 800499a:	4b5f      	ldr	r3, [pc, #380]	; (8004b18 <HAL_RCC_OscConfig+0x470>)
 800499c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800499e:	4a5e      	ldr	r2, [pc, #376]	; (8004b18 <HAL_RCC_OscConfig+0x470>)
 80049a0:	f043 0304 	orr.w	r3, r3, #4
 80049a4:	6713      	str	r3, [r2, #112]	; 0x70
 80049a6:	4b5c      	ldr	r3, [pc, #368]	; (8004b18 <HAL_RCC_OscConfig+0x470>)
 80049a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049aa:	4a5b      	ldr	r2, [pc, #364]	; (8004b18 <HAL_RCC_OscConfig+0x470>)
 80049ac:	f043 0301 	orr.w	r3, r3, #1
 80049b0:	6713      	str	r3, [r2, #112]	; 0x70
 80049b2:	e00b      	b.n	80049cc <HAL_RCC_OscConfig+0x324>
 80049b4:	4b58      	ldr	r3, [pc, #352]	; (8004b18 <HAL_RCC_OscConfig+0x470>)
 80049b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b8:	4a57      	ldr	r2, [pc, #348]	; (8004b18 <HAL_RCC_OscConfig+0x470>)
 80049ba:	f023 0301 	bic.w	r3, r3, #1
 80049be:	6713      	str	r3, [r2, #112]	; 0x70
 80049c0:	4b55      	ldr	r3, [pc, #340]	; (8004b18 <HAL_RCC_OscConfig+0x470>)
 80049c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c4:	4a54      	ldr	r2, [pc, #336]	; (8004b18 <HAL_RCC_OscConfig+0x470>)
 80049c6:	f023 0304 	bic.w	r3, r3, #4
 80049ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d015      	beq.n	8004a00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d4:	f7ff f802 	bl	80039dc <HAL_GetTick>
 80049d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049da:	e00a      	b.n	80049f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049dc:	f7fe fffe 	bl	80039dc <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d901      	bls.n	80049f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e0c2      	b.n	8004b78 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049f2:	4b49      	ldr	r3, [pc, #292]	; (8004b18 <HAL_RCC_OscConfig+0x470>)
 80049f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f6:	f003 0302 	and.w	r3, r3, #2
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d0ee      	beq.n	80049dc <HAL_RCC_OscConfig+0x334>
 80049fe:	e014      	b.n	8004a2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a00:	f7fe ffec 	bl	80039dc <HAL_GetTick>
 8004a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a06:	e00a      	b.n	8004a1e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a08:	f7fe ffe8 	bl	80039dc <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e0ac      	b.n	8004b78 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a1e:	4b3e      	ldr	r3, [pc, #248]	; (8004b18 <HAL_RCC_OscConfig+0x470>)
 8004a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a22:	f003 0302 	and.w	r3, r3, #2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1ee      	bne.n	8004a08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a2a:	7dfb      	ldrb	r3, [r7, #23]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d105      	bne.n	8004a3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a30:	4b39      	ldr	r3, [pc, #228]	; (8004b18 <HAL_RCC_OscConfig+0x470>)
 8004a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a34:	4a38      	ldr	r2, [pc, #224]	; (8004b18 <HAL_RCC_OscConfig+0x470>)
 8004a36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a3a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	699b      	ldr	r3, [r3, #24]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f000 8098 	beq.w	8004b76 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a46:	4b34      	ldr	r3, [pc, #208]	; (8004b18 <HAL_RCC_OscConfig+0x470>)
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f003 030c 	and.w	r3, r3, #12
 8004a4e:	2b08      	cmp	r3, #8
 8004a50:	d05c      	beq.n	8004b0c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d141      	bne.n	8004ade <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a5a:	4b31      	ldr	r3, [pc, #196]	; (8004b20 <HAL_RCC_OscConfig+0x478>)
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a60:	f7fe ffbc 	bl	80039dc <HAL_GetTick>
 8004a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a66:	e008      	b.n	8004a7a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a68:	f7fe ffb8 	bl	80039dc <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e07e      	b.n	8004b78 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a7a:	4b27      	ldr	r3, [pc, #156]	; (8004b18 <HAL_RCC_OscConfig+0x470>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1f0      	bne.n	8004a68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	69da      	ldr	r2, [r3, #28]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a1b      	ldr	r3, [r3, #32]
 8004a8e:	431a      	orrs	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a94:	019b      	lsls	r3, r3, #6
 8004a96:	431a      	orrs	r2, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9c:	085b      	lsrs	r3, r3, #1
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	041b      	lsls	r3, r3, #16
 8004aa2:	431a      	orrs	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa8:	061b      	lsls	r3, r3, #24
 8004aaa:	491b      	ldr	r1, [pc, #108]	; (8004b18 <HAL_RCC_OscConfig+0x470>)
 8004aac:	4313      	orrs	r3, r2
 8004aae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ab0:	4b1b      	ldr	r3, [pc, #108]	; (8004b20 <HAL_RCC_OscConfig+0x478>)
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ab6:	f7fe ff91 	bl	80039dc <HAL_GetTick>
 8004aba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004abc:	e008      	b.n	8004ad0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004abe:	f7fe ff8d 	bl	80039dc <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d901      	bls.n	8004ad0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e053      	b.n	8004b78 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ad0:	4b11      	ldr	r3, [pc, #68]	; (8004b18 <HAL_RCC_OscConfig+0x470>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d0f0      	beq.n	8004abe <HAL_RCC_OscConfig+0x416>
 8004adc:	e04b      	b.n	8004b76 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ade:	4b10      	ldr	r3, [pc, #64]	; (8004b20 <HAL_RCC_OscConfig+0x478>)
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae4:	f7fe ff7a 	bl	80039dc <HAL_GetTick>
 8004ae8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aea:	e008      	b.n	8004afe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aec:	f7fe ff76 	bl	80039dc <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e03c      	b.n	8004b78 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004afe:	4b06      	ldr	r3, [pc, #24]	; (8004b18 <HAL_RCC_OscConfig+0x470>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1f0      	bne.n	8004aec <HAL_RCC_OscConfig+0x444>
 8004b0a:	e034      	b.n	8004b76 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d107      	bne.n	8004b24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e02f      	b.n	8004b78 <HAL_RCC_OscConfig+0x4d0>
 8004b18:	40023800 	.word	0x40023800
 8004b1c:	40007000 	.word	0x40007000
 8004b20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b24:	4b16      	ldr	r3, [pc, #88]	; (8004b80 <HAL_RCC_OscConfig+0x4d8>)
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	69db      	ldr	r3, [r3, #28]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d11c      	bne.n	8004b72 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d115      	bne.n	8004b72 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d10d      	bne.n	8004b72 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d106      	bne.n	8004b72 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d001      	beq.n	8004b76 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e000      	b.n	8004b78 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3718      	adds	r7, #24
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	40023800 	.word	0x40023800

08004b84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d101      	bne.n	8004b98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e0cc      	b.n	8004d32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b98:	4b68      	ldr	r3, [pc, #416]	; (8004d3c <HAL_RCC_ClockConfig+0x1b8>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 030f 	and.w	r3, r3, #15
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d90c      	bls.n	8004bc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ba6:	4b65      	ldr	r3, [pc, #404]	; (8004d3c <HAL_RCC_ClockConfig+0x1b8>)
 8004ba8:	683a      	ldr	r2, [r7, #0]
 8004baa:	b2d2      	uxtb	r2, r2
 8004bac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bae:	4b63      	ldr	r3, [pc, #396]	; (8004d3c <HAL_RCC_ClockConfig+0x1b8>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 030f 	and.w	r3, r3, #15
 8004bb6:	683a      	ldr	r2, [r7, #0]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d001      	beq.n	8004bc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e0b8      	b.n	8004d32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0302 	and.w	r3, r3, #2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d020      	beq.n	8004c0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0304 	and.w	r3, r3, #4
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d005      	beq.n	8004be4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bd8:	4b59      	ldr	r3, [pc, #356]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	4a58      	ldr	r2, [pc, #352]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004bde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004be2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0308 	and.w	r3, r3, #8
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d005      	beq.n	8004bfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bf0:	4b53      	ldr	r3, [pc, #332]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	4a52      	ldr	r2, [pc, #328]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004bfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bfc:	4b50      	ldr	r3, [pc, #320]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	494d      	ldr	r1, [pc, #308]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d044      	beq.n	8004ca4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d107      	bne.n	8004c32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c22:	4b47      	ldr	r3, [pc, #284]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d119      	bne.n	8004c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e07f      	b.n	8004d32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d003      	beq.n	8004c42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c3e:	2b03      	cmp	r3, #3
 8004c40:	d107      	bne.n	8004c52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c42:	4b3f      	ldr	r3, [pc, #252]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d109      	bne.n	8004c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e06f      	b.n	8004d32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c52:	4b3b      	ldr	r3, [pc, #236]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0302 	and.w	r3, r3, #2
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d101      	bne.n	8004c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e067      	b.n	8004d32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c62:	4b37      	ldr	r3, [pc, #220]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f023 0203 	bic.w	r2, r3, #3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	4934      	ldr	r1, [pc, #208]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c74:	f7fe feb2 	bl	80039dc <HAL_GetTick>
 8004c78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c7a:	e00a      	b.n	8004c92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c7c:	f7fe feae 	bl	80039dc <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e04f      	b.n	8004d32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c92:	4b2b      	ldr	r3, [pc, #172]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f003 020c 	and.w	r2, r3, #12
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d1eb      	bne.n	8004c7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ca4:	4b25      	ldr	r3, [pc, #148]	; (8004d3c <HAL_RCC_ClockConfig+0x1b8>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 030f 	and.w	r3, r3, #15
 8004cac:	683a      	ldr	r2, [r7, #0]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d20c      	bcs.n	8004ccc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cb2:	4b22      	ldr	r3, [pc, #136]	; (8004d3c <HAL_RCC_ClockConfig+0x1b8>)
 8004cb4:	683a      	ldr	r2, [r7, #0]
 8004cb6:	b2d2      	uxtb	r2, r2
 8004cb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cba:	4b20      	ldr	r3, [pc, #128]	; (8004d3c <HAL_RCC_ClockConfig+0x1b8>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 030f 	and.w	r3, r3, #15
 8004cc2:	683a      	ldr	r2, [r7, #0]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d001      	beq.n	8004ccc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e032      	b.n	8004d32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0304 	and.w	r3, r3, #4
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d008      	beq.n	8004cea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cd8:	4b19      	ldr	r3, [pc, #100]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	4916      	ldr	r1, [pc, #88]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0308 	and.w	r3, r3, #8
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d009      	beq.n	8004d0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cf6:	4b12      	ldr	r3, [pc, #72]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	00db      	lsls	r3, r3, #3
 8004d04:	490e      	ldr	r1, [pc, #56]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d0a:	f000 f821 	bl	8004d50 <HAL_RCC_GetSysClockFreq>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	4b0b      	ldr	r3, [pc, #44]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	091b      	lsrs	r3, r3, #4
 8004d16:	f003 030f 	and.w	r3, r3, #15
 8004d1a:	490a      	ldr	r1, [pc, #40]	; (8004d44 <HAL_RCC_ClockConfig+0x1c0>)
 8004d1c:	5ccb      	ldrb	r3, [r1, r3]
 8004d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d22:	4a09      	ldr	r2, [pc, #36]	; (8004d48 <HAL_RCC_ClockConfig+0x1c4>)
 8004d24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d26:	4b09      	ldr	r3, [pc, #36]	; (8004d4c <HAL_RCC_ClockConfig+0x1c8>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7fe fe12 	bl	8003954 <HAL_InitTick>

  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	40023c00 	.word	0x40023c00
 8004d40:	40023800 	.word	0x40023800
 8004d44:	0800cfcc 	.word	0x0800cfcc
 8004d48:	200000a8 	.word	0x200000a8
 8004d4c:	200000ac 	.word	0x200000ac

08004d50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d54:	b094      	sub	sp, #80	; 0x50
 8004d56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	647b      	str	r3, [r7, #68]	; 0x44
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d60:	2300      	movs	r3, #0
 8004d62:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004d64:	2300      	movs	r3, #0
 8004d66:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d68:	4b79      	ldr	r3, [pc, #484]	; (8004f50 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f003 030c 	and.w	r3, r3, #12
 8004d70:	2b08      	cmp	r3, #8
 8004d72:	d00d      	beq.n	8004d90 <HAL_RCC_GetSysClockFreq+0x40>
 8004d74:	2b08      	cmp	r3, #8
 8004d76:	f200 80e1 	bhi.w	8004f3c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d002      	beq.n	8004d84 <HAL_RCC_GetSysClockFreq+0x34>
 8004d7e:	2b04      	cmp	r3, #4
 8004d80:	d003      	beq.n	8004d8a <HAL_RCC_GetSysClockFreq+0x3a>
 8004d82:	e0db      	b.n	8004f3c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d84:	4b73      	ldr	r3, [pc, #460]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d86:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004d88:	e0db      	b.n	8004f42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d8a:	4b73      	ldr	r3, [pc, #460]	; (8004f58 <HAL_RCC_GetSysClockFreq+0x208>)
 8004d8c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d8e:	e0d8      	b.n	8004f42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d90:	4b6f      	ldr	r3, [pc, #444]	; (8004f50 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d98:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d9a:	4b6d      	ldr	r3, [pc, #436]	; (8004f50 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d063      	beq.n	8004e6e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004da6:	4b6a      	ldr	r3, [pc, #424]	; (8004f50 <HAL_RCC_GetSysClockFreq+0x200>)
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	099b      	lsrs	r3, r3, #6
 8004dac:	2200      	movs	r2, #0
 8004dae:	63bb      	str	r3, [r7, #56]	; 0x38
 8004db0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004db8:	633b      	str	r3, [r7, #48]	; 0x30
 8004dba:	2300      	movs	r3, #0
 8004dbc:	637b      	str	r3, [r7, #52]	; 0x34
 8004dbe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004dc2:	4622      	mov	r2, r4
 8004dc4:	462b      	mov	r3, r5
 8004dc6:	f04f 0000 	mov.w	r0, #0
 8004dca:	f04f 0100 	mov.w	r1, #0
 8004dce:	0159      	lsls	r1, r3, #5
 8004dd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004dd4:	0150      	lsls	r0, r2, #5
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	460b      	mov	r3, r1
 8004dda:	4621      	mov	r1, r4
 8004ddc:	1a51      	subs	r1, r2, r1
 8004dde:	6139      	str	r1, [r7, #16]
 8004de0:	4629      	mov	r1, r5
 8004de2:	eb63 0301 	sbc.w	r3, r3, r1
 8004de6:	617b      	str	r3, [r7, #20]
 8004de8:	f04f 0200 	mov.w	r2, #0
 8004dec:	f04f 0300 	mov.w	r3, #0
 8004df0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004df4:	4659      	mov	r1, fp
 8004df6:	018b      	lsls	r3, r1, #6
 8004df8:	4651      	mov	r1, sl
 8004dfa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004dfe:	4651      	mov	r1, sl
 8004e00:	018a      	lsls	r2, r1, #6
 8004e02:	4651      	mov	r1, sl
 8004e04:	ebb2 0801 	subs.w	r8, r2, r1
 8004e08:	4659      	mov	r1, fp
 8004e0a:	eb63 0901 	sbc.w	r9, r3, r1
 8004e0e:	f04f 0200 	mov.w	r2, #0
 8004e12:	f04f 0300 	mov.w	r3, #0
 8004e16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e22:	4690      	mov	r8, r2
 8004e24:	4699      	mov	r9, r3
 8004e26:	4623      	mov	r3, r4
 8004e28:	eb18 0303 	adds.w	r3, r8, r3
 8004e2c:	60bb      	str	r3, [r7, #8]
 8004e2e:	462b      	mov	r3, r5
 8004e30:	eb49 0303 	adc.w	r3, r9, r3
 8004e34:	60fb      	str	r3, [r7, #12]
 8004e36:	f04f 0200 	mov.w	r2, #0
 8004e3a:	f04f 0300 	mov.w	r3, #0
 8004e3e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e42:	4629      	mov	r1, r5
 8004e44:	024b      	lsls	r3, r1, #9
 8004e46:	4621      	mov	r1, r4
 8004e48:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e4c:	4621      	mov	r1, r4
 8004e4e:	024a      	lsls	r2, r1, #9
 8004e50:	4610      	mov	r0, r2
 8004e52:	4619      	mov	r1, r3
 8004e54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e56:	2200      	movs	r2, #0
 8004e58:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e5c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e60:	f7fb fa16 	bl	8000290 <__aeabi_uldivmod>
 8004e64:	4602      	mov	r2, r0
 8004e66:	460b      	mov	r3, r1
 8004e68:	4613      	mov	r3, r2
 8004e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e6c:	e058      	b.n	8004f20 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e6e:	4b38      	ldr	r3, [pc, #224]	; (8004f50 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	099b      	lsrs	r3, r3, #6
 8004e74:	2200      	movs	r2, #0
 8004e76:	4618      	mov	r0, r3
 8004e78:	4611      	mov	r1, r2
 8004e7a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e7e:	623b      	str	r3, [r7, #32]
 8004e80:	2300      	movs	r3, #0
 8004e82:	627b      	str	r3, [r7, #36]	; 0x24
 8004e84:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e88:	4642      	mov	r2, r8
 8004e8a:	464b      	mov	r3, r9
 8004e8c:	f04f 0000 	mov.w	r0, #0
 8004e90:	f04f 0100 	mov.w	r1, #0
 8004e94:	0159      	lsls	r1, r3, #5
 8004e96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e9a:	0150      	lsls	r0, r2, #5
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	4641      	mov	r1, r8
 8004ea2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ea6:	4649      	mov	r1, r9
 8004ea8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004eac:	f04f 0200 	mov.w	r2, #0
 8004eb0:	f04f 0300 	mov.w	r3, #0
 8004eb4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004eb8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ebc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ec0:	ebb2 040a 	subs.w	r4, r2, sl
 8004ec4:	eb63 050b 	sbc.w	r5, r3, fp
 8004ec8:	f04f 0200 	mov.w	r2, #0
 8004ecc:	f04f 0300 	mov.w	r3, #0
 8004ed0:	00eb      	lsls	r3, r5, #3
 8004ed2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ed6:	00e2      	lsls	r2, r4, #3
 8004ed8:	4614      	mov	r4, r2
 8004eda:	461d      	mov	r5, r3
 8004edc:	4643      	mov	r3, r8
 8004ede:	18e3      	adds	r3, r4, r3
 8004ee0:	603b      	str	r3, [r7, #0]
 8004ee2:	464b      	mov	r3, r9
 8004ee4:	eb45 0303 	adc.w	r3, r5, r3
 8004ee8:	607b      	str	r3, [r7, #4]
 8004eea:	f04f 0200 	mov.w	r2, #0
 8004eee:	f04f 0300 	mov.w	r3, #0
 8004ef2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ef6:	4629      	mov	r1, r5
 8004ef8:	028b      	lsls	r3, r1, #10
 8004efa:	4621      	mov	r1, r4
 8004efc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f00:	4621      	mov	r1, r4
 8004f02:	028a      	lsls	r2, r1, #10
 8004f04:	4610      	mov	r0, r2
 8004f06:	4619      	mov	r1, r3
 8004f08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	61bb      	str	r3, [r7, #24]
 8004f0e:	61fa      	str	r2, [r7, #28]
 8004f10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f14:	f7fb f9bc 	bl	8000290 <__aeabi_uldivmod>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f20:	4b0b      	ldr	r3, [pc, #44]	; (8004f50 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	0c1b      	lsrs	r3, r3, #16
 8004f26:	f003 0303 	and.w	r3, r3, #3
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	005b      	lsls	r3, r3, #1
 8004f2e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004f30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f38:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f3a:	e002      	b.n	8004f42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f3c:	4b05      	ldr	r3, [pc, #20]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f3e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3750      	adds	r7, #80	; 0x50
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f4e:	bf00      	nop
 8004f50:	40023800 	.word	0x40023800
 8004f54:	00f42400 	.word	0x00f42400
 8004f58:	007a1200 	.word	0x007a1200

08004f5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f60:	4b03      	ldr	r3, [pc, #12]	; (8004f70 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f62:	681b      	ldr	r3, [r3, #0]
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	200000a8 	.word	0x200000a8

08004f74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f78:	f7ff fff0 	bl	8004f5c <HAL_RCC_GetHCLKFreq>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	4b05      	ldr	r3, [pc, #20]	; (8004f94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	0a9b      	lsrs	r3, r3, #10
 8004f84:	f003 0307 	and.w	r3, r3, #7
 8004f88:	4903      	ldr	r1, [pc, #12]	; (8004f98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f8a:	5ccb      	ldrb	r3, [r1, r3]
 8004f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	40023800 	.word	0x40023800
 8004f98:	0800cfdc 	.word	0x0800cfdc

08004f9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004fa0:	f7ff ffdc 	bl	8004f5c <HAL_RCC_GetHCLKFreq>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	4b05      	ldr	r3, [pc, #20]	; (8004fbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	0b5b      	lsrs	r3, r3, #13
 8004fac:	f003 0307 	and.w	r3, r3, #7
 8004fb0:	4903      	ldr	r1, [pc, #12]	; (8004fc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fb2:	5ccb      	ldrb	r3, [r1, r3]
 8004fb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	40023800 	.word	0x40023800
 8004fc0:	0800cfdc 	.word	0x0800cfdc

08004fc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d101      	bne.n	8004fd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e01d      	b.n	8005012 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d106      	bne.n	8004ff0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f7fc fcb4 	bl	8001958 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	3304      	adds	r3, #4
 8005000:	4619      	mov	r1, r3
 8005002:	4610      	mov	r0, r2
 8005004:	f000 fbde 	bl	80057c4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3708      	adds	r7, #8
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800501a:	b480      	push	{r7}
 800501c:	b085      	sub	sp, #20
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2202      	movs	r2, #2
 8005026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f003 0307 	and.w	r3, r3, #7
 8005034:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2b06      	cmp	r3, #6
 800503a:	d007      	beq.n	800504c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f042 0201 	orr.w	r2, r2, #1
 800504a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3714      	adds	r7, #20
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr

08005062 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005062:	b580      	push	{r7, lr}
 8005064:	b082      	sub	sp, #8
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d101      	bne.n	8005074 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e01d      	b.n	80050b0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800507a:	b2db      	uxtb	r3, r3
 800507c:	2b00      	cmp	r3, #0
 800507e:	d106      	bne.n	800508e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f7fc fcb7 	bl	80019fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2202      	movs	r2, #2
 8005092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	3304      	adds	r3, #4
 800509e:	4619      	mov	r1, r3
 80050a0:	4610      	mov	r0, r2
 80050a2:	f000 fb8f 	bl	80057c4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3708      	adds	r7, #8
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2201      	movs	r2, #1
 80050c8:	6839      	ldr	r1, [r7, #0]
 80050ca:	4618      	mov	r0, r3
 80050cc:	f000 fe64 	bl	8005d98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a15      	ldr	r2, [pc, #84]	; (800512c <HAL_TIM_PWM_Start+0x74>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d004      	beq.n	80050e4 <HAL_TIM_PWM_Start+0x2c>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a14      	ldr	r2, [pc, #80]	; (8005130 <HAL_TIM_PWM_Start+0x78>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d101      	bne.n	80050e8 <HAL_TIM_PWM_Start+0x30>
 80050e4:	2301      	movs	r3, #1
 80050e6:	e000      	b.n	80050ea <HAL_TIM_PWM_Start+0x32>
 80050e8:	2300      	movs	r3, #0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d007      	beq.n	80050fe <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	f003 0307 	and.w	r3, r3, #7
 8005108:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2b06      	cmp	r3, #6
 800510e:	d007      	beq.n	8005120 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f042 0201 	orr.w	r2, r2, #1
 800511e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3710      	adds	r7, #16
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	40010000 	.word	0x40010000
 8005130:	40010400 	.word	0x40010400

08005134 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	2b0c      	cmp	r3, #12
 8005142:	d841      	bhi.n	80051c8 <HAL_TIM_PWM_Start_IT+0x94>
 8005144:	a201      	add	r2, pc, #4	; (adr r2, 800514c <HAL_TIM_PWM_Start_IT+0x18>)
 8005146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800514a:	bf00      	nop
 800514c:	08005181 	.word	0x08005181
 8005150:	080051c9 	.word	0x080051c9
 8005154:	080051c9 	.word	0x080051c9
 8005158:	080051c9 	.word	0x080051c9
 800515c:	08005193 	.word	0x08005193
 8005160:	080051c9 	.word	0x080051c9
 8005164:	080051c9 	.word	0x080051c9
 8005168:	080051c9 	.word	0x080051c9
 800516c:	080051a5 	.word	0x080051a5
 8005170:	080051c9 	.word	0x080051c9
 8005174:	080051c9 	.word	0x080051c9
 8005178:	080051c9 	.word	0x080051c9
 800517c:	080051b7 	.word	0x080051b7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68da      	ldr	r2, [r3, #12]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f042 0202 	orr.w	r2, r2, #2
 800518e:	60da      	str	r2, [r3, #12]
      break;
 8005190:	e01b      	b.n	80051ca <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68da      	ldr	r2, [r3, #12]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f042 0204 	orr.w	r2, r2, #4
 80051a0:	60da      	str	r2, [r3, #12]
      break;
 80051a2:	e012      	b.n	80051ca <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68da      	ldr	r2, [r3, #12]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f042 0208 	orr.w	r2, r2, #8
 80051b2:	60da      	str	r2, [r3, #12]
      break;
 80051b4:	e009      	b.n	80051ca <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68da      	ldr	r2, [r3, #12]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f042 0210 	orr.w	r2, r2, #16
 80051c4:	60da      	str	r2, [r3, #12]
      break;
 80051c6:	e000      	b.n	80051ca <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 80051c8:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2201      	movs	r2, #1
 80051d0:	6839      	ldr	r1, [r7, #0]
 80051d2:	4618      	mov	r0, r3
 80051d4:	f000 fde0 	bl	8005d98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a15      	ldr	r2, [pc, #84]	; (8005234 <HAL_TIM_PWM_Start_IT+0x100>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d004      	beq.n	80051ec <HAL_TIM_PWM_Start_IT+0xb8>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a14      	ldr	r2, [pc, #80]	; (8005238 <HAL_TIM_PWM_Start_IT+0x104>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d101      	bne.n	80051f0 <HAL_TIM_PWM_Start_IT+0xbc>
 80051ec:	2301      	movs	r3, #1
 80051ee:	e000      	b.n	80051f2 <HAL_TIM_PWM_Start_IT+0xbe>
 80051f0:	2300      	movs	r3, #0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d007      	beq.n	8005206 <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005204:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	f003 0307 	and.w	r3, r3, #7
 8005210:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2b06      	cmp	r3, #6
 8005216:	d007      	beq.n	8005228 <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f042 0201 	orr.w	r2, r2, #1
 8005226:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	40010000 	.word	0x40010000
 8005238:	40010400 	.word	0x40010400

0800523c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b082      	sub	sp, #8
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	f003 0302 	and.w	r3, r3, #2
 800524e:	2b02      	cmp	r3, #2
 8005250:	d122      	bne.n	8005298 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	f003 0302 	and.w	r3, r3, #2
 800525c:	2b02      	cmp	r3, #2
 800525e:	d11b      	bne.n	8005298 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f06f 0202 	mvn.w	r2, #2
 8005268:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	f003 0303 	and.w	r3, r3, #3
 800527a:	2b00      	cmp	r3, #0
 800527c:	d003      	beq.n	8005286 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 fa82 	bl	8005788 <HAL_TIM_IC_CaptureCallback>
 8005284:	e005      	b.n	8005292 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 fa74 	bl	8005774 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 fa85 	bl	800579c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	f003 0304 	and.w	r3, r3, #4
 80052a2:	2b04      	cmp	r3, #4
 80052a4:	d122      	bne.n	80052ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	f003 0304 	and.w	r3, r3, #4
 80052b0:	2b04      	cmp	r3, #4
 80052b2:	d11b      	bne.n	80052ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f06f 0204 	mvn.w	r2, #4
 80052bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2202      	movs	r2, #2
 80052c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d003      	beq.n	80052da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 fa58 	bl	8005788 <HAL_TIM_IC_CaptureCallback>
 80052d8:	e005      	b.n	80052e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 fa4a 	bl	8005774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 fa5b 	bl	800579c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	f003 0308 	and.w	r3, r3, #8
 80052f6:	2b08      	cmp	r3, #8
 80052f8:	d122      	bne.n	8005340 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	f003 0308 	and.w	r3, r3, #8
 8005304:	2b08      	cmp	r3, #8
 8005306:	d11b      	bne.n	8005340 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f06f 0208 	mvn.w	r2, #8
 8005310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2204      	movs	r2, #4
 8005316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	f003 0303 	and.w	r3, r3, #3
 8005322:	2b00      	cmp	r3, #0
 8005324:	d003      	beq.n	800532e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 fa2e 	bl	8005788 <HAL_TIM_IC_CaptureCallback>
 800532c:	e005      	b.n	800533a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 fa20 	bl	8005774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 fa31 	bl	800579c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	f003 0310 	and.w	r3, r3, #16
 800534a:	2b10      	cmp	r3, #16
 800534c:	d122      	bne.n	8005394 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	f003 0310 	and.w	r3, r3, #16
 8005358:	2b10      	cmp	r3, #16
 800535a:	d11b      	bne.n	8005394 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f06f 0210 	mvn.w	r2, #16
 8005364:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2208      	movs	r2, #8
 800536a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	69db      	ldr	r3, [r3, #28]
 8005372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005376:	2b00      	cmp	r3, #0
 8005378:	d003      	beq.n	8005382 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 fa04 	bl	8005788 <HAL_TIM_IC_CaptureCallback>
 8005380:	e005      	b.n	800538e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f9f6 	bl	8005774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 fa07 	bl	800579c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	f003 0301 	and.w	r3, r3, #1
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d10e      	bne.n	80053c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	f003 0301 	and.w	r3, r3, #1
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d107      	bne.n	80053c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f06f 0201 	mvn.w	r2, #1
 80053b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 f9d0 	bl	8005760 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ca:	2b80      	cmp	r3, #128	; 0x80
 80053cc:	d10e      	bne.n	80053ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053d8:	2b80      	cmp	r3, #128	; 0x80
 80053da:	d107      	bne.n	80053ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80053e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 fd82 	bl	8005ef0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f6:	2b40      	cmp	r3, #64	; 0x40
 80053f8:	d10e      	bne.n	8005418 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005404:	2b40      	cmp	r3, #64	; 0x40
 8005406:	d107      	bne.n	8005418 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 f9cc 	bl	80057b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	f003 0320 	and.w	r3, r3, #32
 8005422:	2b20      	cmp	r3, #32
 8005424:	d10e      	bne.n	8005444 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	f003 0320 	and.w	r3, r3, #32
 8005430:	2b20      	cmp	r3, #32
 8005432:	d107      	bne.n	8005444 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f06f 0220 	mvn.w	r2, #32
 800543c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 fd4c 	bl	8005edc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005444:	bf00      	nop
 8005446:	3708      	adds	r7, #8
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800545e:	2b01      	cmp	r3, #1
 8005460:	d101      	bne.n	8005466 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005462:	2302      	movs	r3, #2
 8005464:	e0b4      	b.n	80055d0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2201      	movs	r2, #1
 800546a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2202      	movs	r2, #2
 8005472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2b0c      	cmp	r3, #12
 800547a:	f200 809f 	bhi.w	80055bc <HAL_TIM_PWM_ConfigChannel+0x170>
 800547e:	a201      	add	r2, pc, #4	; (adr r2, 8005484 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005484:	080054b9 	.word	0x080054b9
 8005488:	080055bd 	.word	0x080055bd
 800548c:	080055bd 	.word	0x080055bd
 8005490:	080055bd 	.word	0x080055bd
 8005494:	080054f9 	.word	0x080054f9
 8005498:	080055bd 	.word	0x080055bd
 800549c:	080055bd 	.word	0x080055bd
 80054a0:	080055bd 	.word	0x080055bd
 80054a4:	0800553b 	.word	0x0800553b
 80054a8:	080055bd 	.word	0x080055bd
 80054ac:	080055bd 	.word	0x080055bd
 80054b0:	080055bd 	.word	0x080055bd
 80054b4:	0800557b 	.word	0x0800557b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68b9      	ldr	r1, [r7, #8]
 80054be:	4618      	mov	r0, r3
 80054c0:	f000 fa20 	bl	8005904 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	699a      	ldr	r2, [r3, #24]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f042 0208 	orr.w	r2, r2, #8
 80054d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	699a      	ldr	r2, [r3, #24]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f022 0204 	bic.w	r2, r2, #4
 80054e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	6999      	ldr	r1, [r3, #24]
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	691a      	ldr	r2, [r3, #16]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	430a      	orrs	r2, r1
 80054f4:	619a      	str	r2, [r3, #24]
      break;
 80054f6:	e062      	b.n	80055be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68b9      	ldr	r1, [r7, #8]
 80054fe:	4618      	mov	r0, r3
 8005500:	f000 fa70 	bl	80059e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	699a      	ldr	r2, [r3, #24]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005512:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	699a      	ldr	r2, [r3, #24]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005522:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6999      	ldr	r1, [r3, #24]
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	021a      	lsls	r2, r3, #8
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	430a      	orrs	r2, r1
 8005536:	619a      	str	r2, [r3, #24]
      break;
 8005538:	e041      	b.n	80055be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68b9      	ldr	r1, [r7, #8]
 8005540:	4618      	mov	r0, r3
 8005542:	f000 fac5 	bl	8005ad0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	69da      	ldr	r2, [r3, #28]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f042 0208 	orr.w	r2, r2, #8
 8005554:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	69da      	ldr	r2, [r3, #28]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f022 0204 	bic.w	r2, r2, #4
 8005564:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	69d9      	ldr	r1, [r3, #28]
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	691a      	ldr	r2, [r3, #16]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	430a      	orrs	r2, r1
 8005576:	61da      	str	r2, [r3, #28]
      break;
 8005578:	e021      	b.n	80055be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68b9      	ldr	r1, [r7, #8]
 8005580:	4618      	mov	r0, r3
 8005582:	f000 fb19 	bl	8005bb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	69da      	ldr	r2, [r3, #28]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005594:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	69da      	ldr	r2, [r3, #28]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	69d9      	ldr	r1, [r3, #28]
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	021a      	lsls	r2, r3, #8
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	430a      	orrs	r2, r1
 80055b8:	61da      	str	r2, [r3, #28]
      break;
 80055ba:	e000      	b.n	80055be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80055bc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2201      	movs	r2, #1
 80055c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3710      	adds	r7, #16
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d101      	bne.n	80055f0 <HAL_TIM_ConfigClockSource+0x18>
 80055ec:	2302      	movs	r3, #2
 80055ee:	e0b3      	b.n	8005758 <HAL_TIM_ConfigClockSource+0x180>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2202      	movs	r2, #2
 80055fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800560e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005616:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005628:	d03e      	beq.n	80056a8 <HAL_TIM_ConfigClockSource+0xd0>
 800562a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800562e:	f200 8087 	bhi.w	8005740 <HAL_TIM_ConfigClockSource+0x168>
 8005632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005636:	f000 8085 	beq.w	8005744 <HAL_TIM_ConfigClockSource+0x16c>
 800563a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800563e:	d87f      	bhi.n	8005740 <HAL_TIM_ConfigClockSource+0x168>
 8005640:	2b70      	cmp	r3, #112	; 0x70
 8005642:	d01a      	beq.n	800567a <HAL_TIM_ConfigClockSource+0xa2>
 8005644:	2b70      	cmp	r3, #112	; 0x70
 8005646:	d87b      	bhi.n	8005740 <HAL_TIM_ConfigClockSource+0x168>
 8005648:	2b60      	cmp	r3, #96	; 0x60
 800564a:	d050      	beq.n	80056ee <HAL_TIM_ConfigClockSource+0x116>
 800564c:	2b60      	cmp	r3, #96	; 0x60
 800564e:	d877      	bhi.n	8005740 <HAL_TIM_ConfigClockSource+0x168>
 8005650:	2b50      	cmp	r3, #80	; 0x50
 8005652:	d03c      	beq.n	80056ce <HAL_TIM_ConfigClockSource+0xf6>
 8005654:	2b50      	cmp	r3, #80	; 0x50
 8005656:	d873      	bhi.n	8005740 <HAL_TIM_ConfigClockSource+0x168>
 8005658:	2b40      	cmp	r3, #64	; 0x40
 800565a:	d058      	beq.n	800570e <HAL_TIM_ConfigClockSource+0x136>
 800565c:	2b40      	cmp	r3, #64	; 0x40
 800565e:	d86f      	bhi.n	8005740 <HAL_TIM_ConfigClockSource+0x168>
 8005660:	2b30      	cmp	r3, #48	; 0x30
 8005662:	d064      	beq.n	800572e <HAL_TIM_ConfigClockSource+0x156>
 8005664:	2b30      	cmp	r3, #48	; 0x30
 8005666:	d86b      	bhi.n	8005740 <HAL_TIM_ConfigClockSource+0x168>
 8005668:	2b20      	cmp	r3, #32
 800566a:	d060      	beq.n	800572e <HAL_TIM_ConfigClockSource+0x156>
 800566c:	2b20      	cmp	r3, #32
 800566e:	d867      	bhi.n	8005740 <HAL_TIM_ConfigClockSource+0x168>
 8005670:	2b00      	cmp	r3, #0
 8005672:	d05c      	beq.n	800572e <HAL_TIM_ConfigClockSource+0x156>
 8005674:	2b10      	cmp	r3, #16
 8005676:	d05a      	beq.n	800572e <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005678:	e062      	b.n	8005740 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6818      	ldr	r0, [r3, #0]
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	6899      	ldr	r1, [r3, #8]
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	685a      	ldr	r2, [r3, #4]
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	f000 fb65 	bl	8005d58 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800569c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	609a      	str	r2, [r3, #8]
      break;
 80056a6:	e04e      	b.n	8005746 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6818      	ldr	r0, [r3, #0]
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	6899      	ldr	r1, [r3, #8]
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	685a      	ldr	r2, [r3, #4]
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	f000 fb4e 	bl	8005d58 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	689a      	ldr	r2, [r3, #8]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056ca:	609a      	str	r2, [r3, #8]
      break;
 80056cc:	e03b      	b.n	8005746 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6818      	ldr	r0, [r3, #0]
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	6859      	ldr	r1, [r3, #4]
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	461a      	mov	r2, r3
 80056dc:	f000 fac2 	bl	8005c64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2150      	movs	r1, #80	; 0x50
 80056e6:	4618      	mov	r0, r3
 80056e8:	f000 fb1b 	bl	8005d22 <TIM_ITRx_SetConfig>
      break;
 80056ec:	e02b      	b.n	8005746 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6818      	ldr	r0, [r3, #0]
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	6859      	ldr	r1, [r3, #4]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	461a      	mov	r2, r3
 80056fc:	f000 fae1 	bl	8005cc2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2160      	movs	r1, #96	; 0x60
 8005706:	4618      	mov	r0, r3
 8005708:	f000 fb0b 	bl	8005d22 <TIM_ITRx_SetConfig>
      break;
 800570c:	e01b      	b.n	8005746 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6818      	ldr	r0, [r3, #0]
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	6859      	ldr	r1, [r3, #4]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	461a      	mov	r2, r3
 800571c:	f000 faa2 	bl	8005c64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2140      	movs	r1, #64	; 0x40
 8005726:	4618      	mov	r0, r3
 8005728:	f000 fafb 	bl	8005d22 <TIM_ITRx_SetConfig>
      break;
 800572c:	e00b      	b.n	8005746 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4619      	mov	r1, r3
 8005738:	4610      	mov	r0, r2
 800573a:	f000 faf2 	bl	8005d22 <TIM_ITRx_SetConfig>
      break;
 800573e:	e002      	b.n	8005746 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005740:	bf00      	nop
 8005742:	e000      	b.n	8005746 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005744:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005756:	2300      	movs	r3, #0
}
 8005758:	4618      	mov	r0, r3
 800575a:	3710      	adds	r7, #16
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005768:	bf00      	nop
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800577c:	bf00      	nop
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005790:	bf00      	nop
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057b8:	bf00      	nop
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b085      	sub	sp, #20
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a40      	ldr	r2, [pc, #256]	; (80058d8 <TIM_Base_SetConfig+0x114>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d013      	beq.n	8005804 <TIM_Base_SetConfig+0x40>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057e2:	d00f      	beq.n	8005804 <TIM_Base_SetConfig+0x40>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a3d      	ldr	r2, [pc, #244]	; (80058dc <TIM_Base_SetConfig+0x118>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d00b      	beq.n	8005804 <TIM_Base_SetConfig+0x40>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a3c      	ldr	r2, [pc, #240]	; (80058e0 <TIM_Base_SetConfig+0x11c>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d007      	beq.n	8005804 <TIM_Base_SetConfig+0x40>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a3b      	ldr	r2, [pc, #236]	; (80058e4 <TIM_Base_SetConfig+0x120>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d003      	beq.n	8005804 <TIM_Base_SetConfig+0x40>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a3a      	ldr	r2, [pc, #232]	; (80058e8 <TIM_Base_SetConfig+0x124>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d108      	bne.n	8005816 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800580a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	4313      	orrs	r3, r2
 8005814:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a2f      	ldr	r2, [pc, #188]	; (80058d8 <TIM_Base_SetConfig+0x114>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d02b      	beq.n	8005876 <TIM_Base_SetConfig+0xb2>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005824:	d027      	beq.n	8005876 <TIM_Base_SetConfig+0xb2>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a2c      	ldr	r2, [pc, #176]	; (80058dc <TIM_Base_SetConfig+0x118>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d023      	beq.n	8005876 <TIM_Base_SetConfig+0xb2>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a2b      	ldr	r2, [pc, #172]	; (80058e0 <TIM_Base_SetConfig+0x11c>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d01f      	beq.n	8005876 <TIM_Base_SetConfig+0xb2>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a2a      	ldr	r2, [pc, #168]	; (80058e4 <TIM_Base_SetConfig+0x120>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d01b      	beq.n	8005876 <TIM_Base_SetConfig+0xb2>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a29      	ldr	r2, [pc, #164]	; (80058e8 <TIM_Base_SetConfig+0x124>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d017      	beq.n	8005876 <TIM_Base_SetConfig+0xb2>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a28      	ldr	r2, [pc, #160]	; (80058ec <TIM_Base_SetConfig+0x128>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d013      	beq.n	8005876 <TIM_Base_SetConfig+0xb2>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a27      	ldr	r2, [pc, #156]	; (80058f0 <TIM_Base_SetConfig+0x12c>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d00f      	beq.n	8005876 <TIM_Base_SetConfig+0xb2>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a26      	ldr	r2, [pc, #152]	; (80058f4 <TIM_Base_SetConfig+0x130>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d00b      	beq.n	8005876 <TIM_Base_SetConfig+0xb2>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a25      	ldr	r2, [pc, #148]	; (80058f8 <TIM_Base_SetConfig+0x134>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d007      	beq.n	8005876 <TIM_Base_SetConfig+0xb2>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a24      	ldr	r2, [pc, #144]	; (80058fc <TIM_Base_SetConfig+0x138>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d003      	beq.n	8005876 <TIM_Base_SetConfig+0xb2>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a23      	ldr	r2, [pc, #140]	; (8005900 <TIM_Base_SetConfig+0x13c>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d108      	bne.n	8005888 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800587c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	4313      	orrs	r3, r2
 8005886:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	4313      	orrs	r3, r2
 8005894:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	689a      	ldr	r2, [r3, #8]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a0a      	ldr	r2, [pc, #40]	; (80058d8 <TIM_Base_SetConfig+0x114>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d003      	beq.n	80058bc <TIM_Base_SetConfig+0xf8>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a0c      	ldr	r2, [pc, #48]	; (80058e8 <TIM_Base_SetConfig+0x124>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d103      	bne.n	80058c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	691a      	ldr	r2, [r3, #16]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	615a      	str	r2, [r3, #20]
}
 80058ca:	bf00      	nop
 80058cc:	3714      	adds	r7, #20
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop
 80058d8:	40010000 	.word	0x40010000
 80058dc:	40000400 	.word	0x40000400
 80058e0:	40000800 	.word	0x40000800
 80058e4:	40000c00 	.word	0x40000c00
 80058e8:	40010400 	.word	0x40010400
 80058ec:	40014000 	.word	0x40014000
 80058f0:	40014400 	.word	0x40014400
 80058f4:	40014800 	.word	0x40014800
 80058f8:	40001800 	.word	0x40001800
 80058fc:	40001c00 	.word	0x40001c00
 8005900:	40002000 	.word	0x40002000

08005904 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005904:	b480      	push	{r7}
 8005906:	b087      	sub	sp, #28
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a1b      	ldr	r3, [r3, #32]
 8005912:	f023 0201 	bic.w	r2, r3, #1
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a1b      	ldr	r3, [r3, #32]
 800591e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	699b      	ldr	r3, [r3, #24]
 800592a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f023 0303 	bic.w	r3, r3, #3
 800593a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	4313      	orrs	r3, r2
 8005944:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	f023 0302 	bic.w	r3, r3, #2
 800594c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	4313      	orrs	r3, r2
 8005956:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a20      	ldr	r2, [pc, #128]	; (80059dc <TIM_OC1_SetConfig+0xd8>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d003      	beq.n	8005968 <TIM_OC1_SetConfig+0x64>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a1f      	ldr	r2, [pc, #124]	; (80059e0 <TIM_OC1_SetConfig+0xdc>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d10c      	bne.n	8005982 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	f023 0308 	bic.w	r3, r3, #8
 800596e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	697a      	ldr	r2, [r7, #20]
 8005976:	4313      	orrs	r3, r2
 8005978:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	f023 0304 	bic.w	r3, r3, #4
 8005980:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a15      	ldr	r2, [pc, #84]	; (80059dc <TIM_OC1_SetConfig+0xd8>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d003      	beq.n	8005992 <TIM_OC1_SetConfig+0x8e>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a14      	ldr	r2, [pc, #80]	; (80059e0 <TIM_OC1_SetConfig+0xdc>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d111      	bne.n	80059b6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005998:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	693a      	ldr	r2, [r7, #16]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	693a      	ldr	r2, [r7, #16]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	693a      	ldr	r2, [r7, #16]
 80059ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	685a      	ldr	r2, [r3, #4]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	697a      	ldr	r2, [r7, #20]
 80059ce:	621a      	str	r2, [r3, #32]
}
 80059d0:	bf00      	nop
 80059d2:	371c      	adds	r7, #28
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr
 80059dc:	40010000 	.word	0x40010000
 80059e0:	40010400 	.word	0x40010400

080059e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b087      	sub	sp, #28
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a1b      	ldr	r3, [r3, #32]
 80059f2:	f023 0210 	bic.w	r2, r3, #16
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a1b      	ldr	r3, [r3, #32]
 80059fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	021b      	lsls	r3, r3, #8
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	f023 0320 	bic.w	r3, r3, #32
 8005a2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	011b      	lsls	r3, r3, #4
 8005a36:	697a      	ldr	r2, [r7, #20]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a22      	ldr	r2, [pc, #136]	; (8005ac8 <TIM_OC2_SetConfig+0xe4>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d003      	beq.n	8005a4c <TIM_OC2_SetConfig+0x68>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4a21      	ldr	r2, [pc, #132]	; (8005acc <TIM_OC2_SetConfig+0xe8>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d10d      	bne.n	8005a68 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	011b      	lsls	r3, r3, #4
 8005a5a:	697a      	ldr	r2, [r7, #20]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a17      	ldr	r2, [pc, #92]	; (8005ac8 <TIM_OC2_SetConfig+0xe4>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d003      	beq.n	8005a78 <TIM_OC2_SetConfig+0x94>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a16      	ldr	r2, [pc, #88]	; (8005acc <TIM_OC2_SetConfig+0xe8>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d113      	bne.n	8005aa0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	695b      	ldr	r3, [r3, #20]
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	693a      	ldr	r2, [r7, #16]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	693a      	ldr	r2, [r7, #16]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	693a      	ldr	r2, [r7, #16]
 8005aa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	685a      	ldr	r2, [r3, #4]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	621a      	str	r2, [r3, #32]
}
 8005aba:	bf00      	nop
 8005abc:	371c      	adds	r7, #28
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	40010000 	.word	0x40010000
 8005acc:	40010400 	.word	0x40010400

08005ad0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b087      	sub	sp, #28
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a1b      	ldr	r3, [r3, #32]
 8005ade:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a1b      	ldr	r3, [r3, #32]
 8005aea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	69db      	ldr	r3, [r3, #28]
 8005af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005afe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f023 0303 	bic.w	r3, r3, #3
 8005b06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	021b      	lsls	r3, r3, #8
 8005b20:	697a      	ldr	r2, [r7, #20]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a21      	ldr	r2, [pc, #132]	; (8005bb0 <TIM_OC3_SetConfig+0xe0>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d003      	beq.n	8005b36 <TIM_OC3_SetConfig+0x66>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a20      	ldr	r2, [pc, #128]	; (8005bb4 <TIM_OC3_SetConfig+0xe4>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d10d      	bne.n	8005b52 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	021b      	lsls	r3, r3, #8
 8005b44:	697a      	ldr	r2, [r7, #20]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a16      	ldr	r2, [pc, #88]	; (8005bb0 <TIM_OC3_SetConfig+0xe0>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d003      	beq.n	8005b62 <TIM_OC3_SetConfig+0x92>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a15      	ldr	r2, [pc, #84]	; (8005bb4 <TIM_OC3_SetConfig+0xe4>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d113      	bne.n	8005b8a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	695b      	ldr	r3, [r3, #20]
 8005b76:	011b      	lsls	r3, r3, #4
 8005b78:	693a      	ldr	r2, [r7, #16]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	699b      	ldr	r3, [r3, #24]
 8005b82:	011b      	lsls	r3, r3, #4
 8005b84:	693a      	ldr	r2, [r7, #16]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	693a      	ldr	r2, [r7, #16]
 8005b8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	685a      	ldr	r2, [r3, #4]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	697a      	ldr	r2, [r7, #20]
 8005ba2:	621a      	str	r2, [r3, #32]
}
 8005ba4:	bf00      	nop
 8005ba6:	371c      	adds	r7, #28
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr
 8005bb0:	40010000 	.word	0x40010000
 8005bb4:	40010400 	.word	0x40010400

08005bb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b087      	sub	sp, #28
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	69db      	ldr	r3, [r3, #28]
 8005bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	021b      	lsls	r3, r3, #8
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	031b      	lsls	r3, r3, #12
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a12      	ldr	r2, [pc, #72]	; (8005c5c <TIM_OC4_SetConfig+0xa4>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d003      	beq.n	8005c20 <TIM_OC4_SetConfig+0x68>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a11      	ldr	r2, [pc, #68]	; (8005c60 <TIM_OC4_SetConfig+0xa8>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d109      	bne.n	8005c34 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	695b      	ldr	r3, [r3, #20]
 8005c2c:	019b      	lsls	r3, r3, #6
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	685a      	ldr	r2, [r3, #4]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	693a      	ldr	r2, [r7, #16]
 8005c4c:	621a      	str	r2, [r3, #32]
}
 8005c4e:	bf00      	nop
 8005c50:	371c      	adds	r7, #28
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	40010000 	.word	0x40010000
 8005c60:	40010400 	.word	0x40010400

08005c64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b087      	sub	sp, #28
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6a1b      	ldr	r3, [r3, #32]
 8005c74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6a1b      	ldr	r3, [r3, #32]
 8005c7a:	f023 0201 	bic.w	r2, r3, #1
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	699b      	ldr	r3, [r3, #24]
 8005c86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	011b      	lsls	r3, r3, #4
 8005c94:	693a      	ldr	r2, [r7, #16]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	f023 030a 	bic.w	r3, r3, #10
 8005ca0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ca2:	697a      	ldr	r2, [r7, #20]
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	693a      	ldr	r2, [r7, #16]
 8005cae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	697a      	ldr	r2, [r7, #20]
 8005cb4:	621a      	str	r2, [r3, #32]
}
 8005cb6:	bf00      	nop
 8005cb8:	371c      	adds	r7, #28
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr

08005cc2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cc2:	b480      	push	{r7}
 8005cc4:	b087      	sub	sp, #28
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	60f8      	str	r0, [r7, #12]
 8005cca:	60b9      	str	r1, [r7, #8]
 8005ccc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6a1b      	ldr	r3, [r3, #32]
 8005cd2:	f023 0210 	bic.w	r2, r3, #16
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	699b      	ldr	r3, [r3, #24]
 8005cde:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6a1b      	ldr	r3, [r3, #32]
 8005ce4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005cec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	031b      	lsls	r3, r3, #12
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005cfe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	011b      	lsls	r3, r3, #4
 8005d04:	693a      	ldr	r2, [r7, #16]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	697a      	ldr	r2, [r7, #20]
 8005d0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	693a      	ldr	r2, [r7, #16]
 8005d14:	621a      	str	r2, [r3, #32]
}
 8005d16:	bf00      	nop
 8005d18:	371c      	adds	r7, #28
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr

08005d22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d22:	b480      	push	{r7}
 8005d24:	b085      	sub	sp, #20
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
 8005d2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d3a:	683a      	ldr	r2, [r7, #0]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	f043 0307 	orr.w	r3, r3, #7
 8005d44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	609a      	str	r2, [r3, #8]
}
 8005d4c:	bf00      	nop
 8005d4e:	3714      	adds	r7, #20
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b087      	sub	sp, #28
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	60b9      	str	r1, [r7, #8]
 8005d62:	607a      	str	r2, [r7, #4]
 8005d64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	021a      	lsls	r2, r3, #8
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	431a      	orrs	r2, r3
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	697a      	ldr	r2, [r7, #20]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	697a      	ldr	r2, [r7, #20]
 8005d8a:	609a      	str	r2, [r3, #8]
}
 8005d8c:	bf00      	nop
 8005d8e:	371c      	adds	r7, #28
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b087      	sub	sp, #28
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	f003 031f 	and.w	r3, r3, #31
 8005daa:	2201      	movs	r2, #1
 8005dac:	fa02 f303 	lsl.w	r3, r2, r3
 8005db0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6a1a      	ldr	r2, [r3, #32]
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	43db      	mvns	r3, r3
 8005dba:	401a      	ands	r2, r3
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6a1a      	ldr	r2, [r3, #32]
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	f003 031f 	and.w	r3, r3, #31
 8005dca:	6879      	ldr	r1, [r7, #4]
 8005dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8005dd0:	431a      	orrs	r2, r3
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	621a      	str	r2, [r3, #32]
}
 8005dd6:	bf00      	nop
 8005dd8:	371c      	adds	r7, #28
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
	...

08005de4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d101      	bne.n	8005dfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005df8:	2302      	movs	r3, #2
 8005dfa:	e05a      	b.n	8005eb2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2202      	movs	r2, #2
 8005e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a21      	ldr	r2, [pc, #132]	; (8005ec0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d022      	beq.n	8005e86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e48:	d01d      	beq.n	8005e86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a1d      	ldr	r2, [pc, #116]	; (8005ec4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d018      	beq.n	8005e86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a1b      	ldr	r2, [pc, #108]	; (8005ec8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d013      	beq.n	8005e86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a1a      	ldr	r2, [pc, #104]	; (8005ecc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d00e      	beq.n	8005e86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a18      	ldr	r2, [pc, #96]	; (8005ed0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d009      	beq.n	8005e86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a17      	ldr	r2, [pc, #92]	; (8005ed4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d004      	beq.n	8005e86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a15      	ldr	r2, [pc, #84]	; (8005ed8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d10c      	bne.n	8005ea0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	68ba      	ldr	r2, [r7, #8]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68ba      	ldr	r2, [r7, #8]
 8005e9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3714      	adds	r7, #20
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr
 8005ebe:	bf00      	nop
 8005ec0:	40010000 	.word	0x40010000
 8005ec4:	40000400 	.word	0x40000400
 8005ec8:	40000800 	.word	0x40000800
 8005ecc:	40000c00 	.word	0x40000c00
 8005ed0:	40010400 	.word	0x40010400
 8005ed4:	40014000 	.word	0x40014000
 8005ed8:	40001800 	.word	0x40001800

08005edc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ee4:	bf00      	nop
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ef8:	bf00      	nop
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d101      	bne.n	8005f16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e03f      	b.n	8005f96 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d106      	bne.n	8005f30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f7fb fdee 	bl	8001b0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2224      	movs	r2, #36	; 0x24
 8005f34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68da      	ldr	r2, [r3, #12]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 fba1 	bl	8006690 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	691a      	ldr	r2, [r3, #16]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	695a      	ldr	r2, [r3, #20]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68da      	ldr	r2, [r3, #12]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2220      	movs	r2, #32
 8005f88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2220      	movs	r2, #32
 8005f90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3708      	adds	r7, #8
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b088      	sub	sp, #32
 8005fa2:	af02      	add	r7, sp, #8
 8005fa4:	60f8      	str	r0, [r7, #12]
 8005fa6:	60b9      	str	r1, [r7, #8]
 8005fa8:	603b      	str	r3, [r7, #0]
 8005faa:	4613      	mov	r3, r2
 8005fac:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	2b20      	cmp	r3, #32
 8005fbc:	f040 8083 	bne.w	80060c6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d002      	beq.n	8005fcc <HAL_UART_Transmit+0x2e>
 8005fc6:	88fb      	ldrh	r3, [r7, #6]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d101      	bne.n	8005fd0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e07b      	b.n	80060c8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d101      	bne.n	8005fde <HAL_UART_Transmit+0x40>
 8005fda:	2302      	movs	r3, #2
 8005fdc:	e074      	b.n	80060c8 <HAL_UART_Transmit+0x12a>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2221      	movs	r2, #33	; 0x21
 8005ff0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005ff4:	f7fd fcf2 	bl	80039dc <HAL_GetTick>
 8005ff8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	88fa      	ldrh	r2, [r7, #6]
 8005ffe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	88fa      	ldrh	r2, [r7, #6]
 8006004:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800600e:	e042      	b.n	8006096 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006014:	b29b      	uxth	r3, r3
 8006016:	3b01      	subs	r3, #1
 8006018:	b29a      	uxth	r2, r3
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006026:	d122      	bne.n	800606e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	9300      	str	r3, [sp, #0]
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	2200      	movs	r2, #0
 8006030:	2180      	movs	r1, #128	; 0x80
 8006032:	68f8      	ldr	r0, [r7, #12]
 8006034:	f000 f9c0 	bl	80063b8 <UART_WaitOnFlagUntilTimeout>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d001      	beq.n	8006042 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	e042      	b.n	80060c8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	881b      	ldrh	r3, [r3, #0]
 800604a:	461a      	mov	r2, r3
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006054:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d103      	bne.n	8006066 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	3302      	adds	r3, #2
 8006062:	60bb      	str	r3, [r7, #8]
 8006064:	e017      	b.n	8006096 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	3301      	adds	r3, #1
 800606a:	60bb      	str	r3, [r7, #8]
 800606c:	e013      	b.n	8006096 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	9300      	str	r3, [sp, #0]
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	2200      	movs	r2, #0
 8006076:	2180      	movs	r1, #128	; 0x80
 8006078:	68f8      	ldr	r0, [r7, #12]
 800607a:	f000 f99d 	bl	80063b8 <UART_WaitOnFlagUntilTimeout>
 800607e:	4603      	mov	r3, r0
 8006080:	2b00      	cmp	r3, #0
 8006082:	d001      	beq.n	8006088 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8006084:	2303      	movs	r3, #3
 8006086:	e01f      	b.n	80060c8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	1c5a      	adds	r2, r3, #1
 800608c:	60ba      	str	r2, [r7, #8]
 800608e:	781a      	ldrb	r2, [r3, #0]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800609a:	b29b      	uxth	r3, r3
 800609c:	2b00      	cmp	r3, #0
 800609e:	d1b7      	bne.n	8006010 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	9300      	str	r3, [sp, #0]
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	2200      	movs	r2, #0
 80060a8:	2140      	movs	r1, #64	; 0x40
 80060aa:	68f8      	ldr	r0, [r7, #12]
 80060ac:	f000 f984 	bl	80063b8 <UART_WaitOnFlagUntilTimeout>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d001      	beq.n	80060ba <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80060b6:	2303      	movs	r3, #3
 80060b8:	e006      	b.n	80060c8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2220      	movs	r2, #32
 80060be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80060c2:	2300      	movs	r3, #0
 80060c4:	e000      	b.n	80060c8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80060c6:	2302      	movs	r3, #2
  }
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3718      	adds	r7, #24
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
 80060da:	4613      	mov	r3, r2
 80060dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	2b20      	cmp	r3, #32
 80060e8:	d140      	bne.n	800616c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d002      	beq.n	80060f6 <HAL_UART_Receive_IT+0x26>
 80060f0:	88fb      	ldrh	r3, [r7, #6]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d101      	bne.n	80060fa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e039      	b.n	800616e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006100:	2b01      	cmp	r3, #1
 8006102:	d101      	bne.n	8006108 <HAL_UART_Receive_IT+0x38>
 8006104:	2302      	movs	r3, #2
 8006106:	e032      	b.n	800616e <HAL_UART_Receive_IT+0x9e>
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	68ba      	ldr	r2, [r7, #8]
 8006114:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	88fa      	ldrh	r2, [r7, #6]
 800611a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	88fa      	ldrh	r2, [r7, #6]
 8006120:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2200      	movs	r2, #0
 8006126:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2222      	movs	r2, #34	; 0x22
 800612c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2200      	movs	r2, #0
 8006134:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	68da      	ldr	r2, [r3, #12]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006146:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	695a      	ldr	r2, [r3, #20]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f042 0201 	orr.w	r2, r2, #1
 8006156:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68da      	ldr	r2, [r3, #12]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f042 0220 	orr.w	r2, r2, #32
 8006166:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006168:	2300      	movs	r3, #0
 800616a:	e000      	b.n	800616e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800616c:	2302      	movs	r3, #2
  }
}
 800616e:	4618      	mov	r0, r3
 8006170:	3714      	adds	r7, #20
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
	...

0800617c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b088      	sub	sp, #32
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	695b      	ldr	r3, [r3, #20]
 800619a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800619c:	2300      	movs	r3, #0
 800619e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80061a0:	2300      	movs	r3, #0
 80061a2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	f003 030f 	and.w	r3, r3, #15
 80061aa:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d10d      	bne.n	80061ce <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	f003 0320 	and.w	r3, r3, #32
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d008      	beq.n	80061ce <HAL_UART_IRQHandler+0x52>
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	f003 0320 	and.w	r3, r3, #32
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d003      	beq.n	80061ce <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f9e0 	bl	800658c <UART_Receive_IT>
      return;
 80061cc:	e0d0      	b.n	8006370 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	f000 80b0 	beq.w	8006336 <HAL_UART_IRQHandler+0x1ba>
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	f003 0301 	and.w	r3, r3, #1
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d105      	bne.n	80061ec <HAL_UART_IRQHandler+0x70>
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	f000 80a5 	beq.w	8006336 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	f003 0301 	and.w	r3, r3, #1
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00a      	beq.n	800620c <HAL_UART_IRQHandler+0x90>
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d005      	beq.n	800620c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006204:	f043 0201 	orr.w	r2, r3, #1
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	f003 0304 	and.w	r3, r3, #4
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00a      	beq.n	800622c <HAL_UART_IRQHandler+0xb0>
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	f003 0301 	and.w	r3, r3, #1
 800621c:	2b00      	cmp	r3, #0
 800621e:	d005      	beq.n	800622c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006224:	f043 0202 	orr.w	r2, r3, #2
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	f003 0302 	and.w	r3, r3, #2
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00a      	beq.n	800624c <HAL_UART_IRQHandler+0xd0>
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	f003 0301 	and.w	r3, r3, #1
 800623c:	2b00      	cmp	r3, #0
 800623e:	d005      	beq.n	800624c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006244:	f043 0204 	orr.w	r2, r3, #4
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	f003 0308 	and.w	r3, r3, #8
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00f      	beq.n	8006276 <HAL_UART_IRQHandler+0xfa>
 8006256:	69bb      	ldr	r3, [r7, #24]
 8006258:	f003 0320 	and.w	r3, r3, #32
 800625c:	2b00      	cmp	r3, #0
 800625e:	d104      	bne.n	800626a <HAL_UART_IRQHandler+0xee>
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	f003 0301 	and.w	r3, r3, #1
 8006266:	2b00      	cmp	r3, #0
 8006268:	d005      	beq.n	8006276 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800626e:	f043 0208 	orr.w	r2, r3, #8
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800627a:	2b00      	cmp	r3, #0
 800627c:	d077      	beq.n	800636e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	f003 0320 	and.w	r3, r3, #32
 8006284:	2b00      	cmp	r3, #0
 8006286:	d007      	beq.n	8006298 <HAL_UART_IRQHandler+0x11c>
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	f003 0320 	and.w	r3, r3, #32
 800628e:	2b00      	cmp	r3, #0
 8006290:	d002      	beq.n	8006298 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 f97a 	bl	800658c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	695b      	ldr	r3, [r3, #20]
 800629e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062a2:	2b40      	cmp	r3, #64	; 0x40
 80062a4:	bf0c      	ite	eq
 80062a6:	2301      	moveq	r3, #1
 80062a8:	2300      	movne	r3, #0
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062b2:	f003 0308 	and.w	r3, r3, #8
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d102      	bne.n	80062c0 <HAL_UART_IRQHandler+0x144>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d031      	beq.n	8006324 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 f8c3 	bl	800644c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	695b      	ldr	r3, [r3, #20]
 80062cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062d0:	2b40      	cmp	r3, #64	; 0x40
 80062d2:	d123      	bne.n	800631c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	695a      	ldr	r2, [r3, #20]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062e2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d013      	beq.n	8006314 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062f0:	4a21      	ldr	r2, [pc, #132]	; (8006378 <HAL_UART_IRQHandler+0x1fc>)
 80062f2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062f8:	4618      	mov	r0, r3
 80062fa:	f7fd fd93 	bl	8003e24 <HAL_DMA_Abort_IT>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d016      	beq.n	8006332 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006308:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800630e:	4610      	mov	r0, r2
 8006310:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006312:	e00e      	b.n	8006332 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 f845 	bl	80063a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800631a:	e00a      	b.n	8006332 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 f841 	bl	80063a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006322:	e006      	b.n	8006332 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 f83d 	bl	80063a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006330:	e01d      	b.n	800636e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006332:	bf00      	nop
    return;
 8006334:	e01b      	b.n	800636e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800633c:	2b00      	cmp	r3, #0
 800633e:	d008      	beq.n	8006352 <HAL_UART_IRQHandler+0x1d6>
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006346:	2b00      	cmp	r3, #0
 8006348:	d003      	beq.n	8006352 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 f8b0 	bl	80064b0 <UART_Transmit_IT>
    return;
 8006350:	e00e      	b.n	8006370 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006358:	2b00      	cmp	r3, #0
 800635a:	d009      	beq.n	8006370 <HAL_UART_IRQHandler+0x1f4>
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006362:	2b00      	cmp	r3, #0
 8006364:	d004      	beq.n	8006370 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 f8f8 	bl	800655c <UART_EndTransmit_IT>
    return;
 800636c:	e000      	b.n	8006370 <HAL_UART_IRQHandler+0x1f4>
    return;
 800636e:	bf00      	nop
  }
}
 8006370:	3720      	adds	r7, #32
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	08006489 	.word	0x08006489

0800637c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006384:	bf00      	nop
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006398:	bf00      	nop
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80063ac:	bf00      	nop
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	603b      	str	r3, [r7, #0]
 80063c4:	4613      	mov	r3, r2
 80063c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063c8:	e02c      	b.n	8006424 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d0:	d028      	beq.n	8006424 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d007      	beq.n	80063e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80063d8:	f7fd fb00 	bl	80039dc <HAL_GetTick>
 80063dc:	4602      	mov	r2, r0
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	1ad3      	subs	r3, r2, r3
 80063e2:	69ba      	ldr	r2, [r7, #24]
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d21d      	bcs.n	8006424 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68da      	ldr	r2, [r3, #12]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80063f6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	695a      	ldr	r2, [r3, #20]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f022 0201 	bic.w	r2, r2, #1
 8006406:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2220      	movs	r2, #32
 800640c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2220      	movs	r2, #32
 8006414:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006420:	2303      	movs	r3, #3
 8006422:	e00f      	b.n	8006444 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	4013      	ands	r3, r2
 800642e:	68ba      	ldr	r2, [r7, #8]
 8006430:	429a      	cmp	r2, r3
 8006432:	bf0c      	ite	eq
 8006434:	2301      	moveq	r3, #1
 8006436:	2300      	movne	r3, #0
 8006438:	b2db      	uxtb	r3, r3
 800643a:	461a      	mov	r2, r3
 800643c:	79fb      	ldrb	r3, [r7, #7]
 800643e:	429a      	cmp	r2, r3
 8006440:	d0c3      	beq.n	80063ca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006442:	2300      	movs	r3, #0
}
 8006444:	4618      	mov	r0, r3
 8006446:	3710      	adds	r7, #16
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68da      	ldr	r2, [r3, #12]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006462:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	695a      	ldr	r2, [r3, #20]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f022 0201 	bic.w	r2, r2, #1
 8006472:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2220      	movs	r2, #32
 8006478:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800647c:	bf00      	nop
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006494:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2200      	movs	r2, #0
 800649a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2200      	movs	r2, #0
 80064a0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f7ff ff7e 	bl	80063a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064a8:	bf00      	nop
 80064aa:	3710      	adds	r7, #16
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b085      	sub	sp, #20
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	2b21      	cmp	r3, #33	; 0x21
 80064c2:	d144      	bne.n	800654e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064cc:	d11a      	bne.n	8006504 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a1b      	ldr	r3, [r3, #32]
 80064d2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	881b      	ldrh	r3, [r3, #0]
 80064d8:	461a      	mov	r2, r3
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064e2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	691b      	ldr	r3, [r3, #16]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d105      	bne.n	80064f8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6a1b      	ldr	r3, [r3, #32]
 80064f0:	1c9a      	adds	r2, r3, #2
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	621a      	str	r2, [r3, #32]
 80064f6:	e00e      	b.n	8006516 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6a1b      	ldr	r3, [r3, #32]
 80064fc:	1c5a      	adds	r2, r3, #1
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	621a      	str	r2, [r3, #32]
 8006502:	e008      	b.n	8006516 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a1b      	ldr	r3, [r3, #32]
 8006508:	1c59      	adds	r1, r3, #1
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	6211      	str	r1, [r2, #32]
 800650e:	781a      	ldrb	r2, [r3, #0]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800651a:	b29b      	uxth	r3, r3
 800651c:	3b01      	subs	r3, #1
 800651e:	b29b      	uxth	r3, r3
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	4619      	mov	r1, r3
 8006524:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006526:	2b00      	cmp	r3, #0
 8006528:	d10f      	bne.n	800654a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68da      	ldr	r2, [r3, #12]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006538:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68da      	ldr	r2, [r3, #12]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006548:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800654a:	2300      	movs	r3, #0
 800654c:	e000      	b.n	8006550 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800654e:	2302      	movs	r3, #2
  }
}
 8006550:	4618      	mov	r0, r3
 8006552:	3714      	adds	r7, #20
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68da      	ldr	r2, [r3, #12]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006572:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2220      	movs	r2, #32
 8006578:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f7ff fefd 	bl	800637c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006582:	2300      	movs	r3, #0
}
 8006584:	4618      	mov	r0, r3
 8006586:	3708      	adds	r7, #8
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800659a:	b2db      	uxtb	r3, r3
 800659c:	2b22      	cmp	r3, #34	; 0x22
 800659e:	d171      	bne.n	8006684 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065a8:	d123      	bne.n	80065f2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ae:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d10e      	bne.n	80065d6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	b29b      	uxth	r3, r3
 80065c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ce:	1c9a      	adds	r2, r3, #2
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	629a      	str	r2, [r3, #40]	; 0x28
 80065d4:	e029      	b.n	800662a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	b29b      	uxth	r3, r3
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	b29a      	uxth	r2, r3
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ea:	1c5a      	adds	r2, r3, #1
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	629a      	str	r2, [r3, #40]	; 0x28
 80065f0:	e01b      	b.n	800662a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d10a      	bne.n	8006610 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	6858      	ldr	r0, [r3, #4]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006604:	1c59      	adds	r1, r3, #1
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	6291      	str	r1, [r2, #40]	; 0x28
 800660a:	b2c2      	uxtb	r2, r0
 800660c:	701a      	strb	r2, [r3, #0]
 800660e:	e00c      	b.n	800662a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	b2da      	uxtb	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800661c:	1c58      	adds	r0, r3, #1
 800661e:	6879      	ldr	r1, [r7, #4]
 8006620:	6288      	str	r0, [r1, #40]	; 0x28
 8006622:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006626:	b2d2      	uxtb	r2, r2
 8006628:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800662e:	b29b      	uxth	r3, r3
 8006630:	3b01      	subs	r3, #1
 8006632:	b29b      	uxth	r3, r3
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	4619      	mov	r1, r3
 8006638:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800663a:	2b00      	cmp	r3, #0
 800663c:	d120      	bne.n	8006680 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	68da      	ldr	r2, [r3, #12]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f022 0220 	bic.w	r2, r2, #32
 800664c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68da      	ldr	r2, [r3, #12]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800665c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	695a      	ldr	r2, [r3, #20]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f022 0201 	bic.w	r2, r2, #1
 800666c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2220      	movs	r2, #32
 8006672:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f7ff fe8a 	bl	8006390 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800667c:	2300      	movs	r3, #0
 800667e:	e002      	b.n	8006686 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006680:	2300      	movs	r3, #0
 8006682:	e000      	b.n	8006686 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006684:	2302      	movs	r3, #2
  }
}
 8006686:	4618      	mov	r0, r3
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
	...

08006690 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006690:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006694:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8006698:	af00      	add	r7, sp, #0
 800669a:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800669e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80066aa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80066ae:	68d9      	ldr	r1, [r3, #12]
 80066b0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	ea40 0301 	orr.w	r3, r0, r1
 80066ba:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80066bc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80066c0:	689a      	ldr	r2, [r3, #8]
 80066c2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	431a      	orrs	r2, r3
 80066ca:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80066ce:	695b      	ldr	r3, [r3, #20]
 80066d0:	431a      	orrs	r2, r3
 80066d2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80066d6:	69db      	ldr	r3, [r3, #28]
 80066d8:	4313      	orrs	r3, r2
 80066da:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 80066de:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80066ea:	f021 010c 	bic.w	r1, r1, #12
 80066ee:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80066f8:	430b      	orrs	r3, r1
 80066fa:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80066fc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	695b      	ldr	r3, [r3, #20]
 8006704:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006708:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800670c:	6999      	ldr	r1, [r3, #24]
 800670e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	ea40 0301 	orr.w	r3, r0, r1
 8006718:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800671a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800671e:	69db      	ldr	r3, [r3, #28]
 8006720:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006724:	f040 824a 	bne.w	8006bbc <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006728:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	4b96      	ldr	r3, [pc, #600]	; (8006988 <UART_SetConfig+0x2f8>)
 8006730:	429a      	cmp	r2, r3
 8006732:	d006      	beq.n	8006742 <UART_SetConfig+0xb2>
 8006734:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	4b94      	ldr	r3, [pc, #592]	; (800698c <UART_SetConfig+0x2fc>)
 800673c:	429a      	cmp	r2, r3
 800673e:	f040 8129 	bne.w	8006994 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006742:	f7fe fc2b 	bl	8004f9c <HAL_RCC_GetPCLK2Freq>
 8006746:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800674a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800674e:	2200      	movs	r2, #0
 8006750:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8006754:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8006758:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 800675c:	4622      	mov	r2, r4
 800675e:	462b      	mov	r3, r5
 8006760:	1891      	adds	r1, r2, r2
 8006762:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8006766:	415b      	adcs	r3, r3
 8006768:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800676c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8006770:	4621      	mov	r1, r4
 8006772:	1851      	adds	r1, r2, r1
 8006774:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8006778:	4629      	mov	r1, r5
 800677a:	414b      	adcs	r3, r1
 800677c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006780:	f04f 0200 	mov.w	r2, #0
 8006784:	f04f 0300 	mov.w	r3, #0
 8006788:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 800678c:	4649      	mov	r1, r9
 800678e:	00cb      	lsls	r3, r1, #3
 8006790:	4641      	mov	r1, r8
 8006792:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006796:	4641      	mov	r1, r8
 8006798:	00ca      	lsls	r2, r1, #3
 800679a:	4610      	mov	r0, r2
 800679c:	4619      	mov	r1, r3
 800679e:	4603      	mov	r3, r0
 80067a0:	4622      	mov	r2, r4
 80067a2:	189b      	adds	r3, r3, r2
 80067a4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80067a8:	462b      	mov	r3, r5
 80067aa:	460a      	mov	r2, r1
 80067ac:	eb42 0303 	adc.w	r3, r2, r3
 80067b0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 80067b4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80067c0:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 80067c4:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 80067c8:	460b      	mov	r3, r1
 80067ca:	18db      	adds	r3, r3, r3
 80067cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067d0:	4613      	mov	r3, r2
 80067d2:	eb42 0303 	adc.w	r3, r2, r3
 80067d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80067da:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80067de:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 80067e2:	f7f9 fd55 	bl	8000290 <__aeabi_uldivmod>
 80067e6:	4602      	mov	r2, r0
 80067e8:	460b      	mov	r3, r1
 80067ea:	4b69      	ldr	r3, [pc, #420]	; (8006990 <UART_SetConfig+0x300>)
 80067ec:	fba3 2302 	umull	r2, r3, r3, r2
 80067f0:	095b      	lsrs	r3, r3, #5
 80067f2:	011c      	lsls	r4, r3, #4
 80067f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80067f8:	2200      	movs	r2, #0
 80067fa:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 80067fe:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8006802:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 8006806:	4642      	mov	r2, r8
 8006808:	464b      	mov	r3, r9
 800680a:	1891      	adds	r1, r2, r2
 800680c:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8006810:	415b      	adcs	r3, r3
 8006812:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006816:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800681a:	4641      	mov	r1, r8
 800681c:	1851      	adds	r1, r2, r1
 800681e:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8006822:	4649      	mov	r1, r9
 8006824:	414b      	adcs	r3, r1
 8006826:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800682a:	f04f 0200 	mov.w	r2, #0
 800682e:	f04f 0300 	mov.w	r3, #0
 8006832:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 8006836:	4659      	mov	r1, fp
 8006838:	00cb      	lsls	r3, r1, #3
 800683a:	4651      	mov	r1, sl
 800683c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006840:	4651      	mov	r1, sl
 8006842:	00ca      	lsls	r2, r1, #3
 8006844:	4610      	mov	r0, r2
 8006846:	4619      	mov	r1, r3
 8006848:	4603      	mov	r3, r0
 800684a:	4642      	mov	r2, r8
 800684c:	189b      	adds	r3, r3, r2
 800684e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8006852:	464b      	mov	r3, r9
 8006854:	460a      	mov	r2, r1
 8006856:	eb42 0303 	adc.w	r3, r2, r3
 800685a:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800685e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800686a:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 800686e:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 8006872:	460b      	mov	r3, r1
 8006874:	18db      	adds	r3, r3, r3
 8006876:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800687a:	4613      	mov	r3, r2
 800687c:	eb42 0303 	adc.w	r3, r2, r3
 8006880:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006884:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8006888:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 800688c:	f7f9 fd00 	bl	8000290 <__aeabi_uldivmod>
 8006890:	4602      	mov	r2, r0
 8006892:	460b      	mov	r3, r1
 8006894:	4611      	mov	r1, r2
 8006896:	4b3e      	ldr	r3, [pc, #248]	; (8006990 <UART_SetConfig+0x300>)
 8006898:	fba3 2301 	umull	r2, r3, r3, r1
 800689c:	095b      	lsrs	r3, r3, #5
 800689e:	2264      	movs	r2, #100	; 0x64
 80068a0:	fb02 f303 	mul.w	r3, r2, r3
 80068a4:	1acb      	subs	r3, r1, r3
 80068a6:	00db      	lsls	r3, r3, #3
 80068a8:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80068ac:	4b38      	ldr	r3, [pc, #224]	; (8006990 <UART_SetConfig+0x300>)
 80068ae:	fba3 2302 	umull	r2, r3, r3, r2
 80068b2:	095b      	lsrs	r3, r3, #5
 80068b4:	005b      	lsls	r3, r3, #1
 80068b6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80068ba:	441c      	add	r4, r3
 80068bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80068c0:	2200      	movs	r2, #0
 80068c2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80068c6:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 80068ca:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 80068ce:	4642      	mov	r2, r8
 80068d0:	464b      	mov	r3, r9
 80068d2:	1891      	adds	r1, r2, r2
 80068d4:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 80068d8:	415b      	adcs	r3, r3
 80068da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80068de:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80068e2:	4641      	mov	r1, r8
 80068e4:	1851      	adds	r1, r2, r1
 80068e6:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80068ea:	4649      	mov	r1, r9
 80068ec:	414b      	adcs	r3, r1
 80068ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80068f2:	f04f 0200 	mov.w	r2, #0
 80068f6:	f04f 0300 	mov.w	r3, #0
 80068fa:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 80068fe:	4659      	mov	r1, fp
 8006900:	00cb      	lsls	r3, r1, #3
 8006902:	4651      	mov	r1, sl
 8006904:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006908:	4651      	mov	r1, sl
 800690a:	00ca      	lsls	r2, r1, #3
 800690c:	4610      	mov	r0, r2
 800690e:	4619      	mov	r1, r3
 8006910:	4603      	mov	r3, r0
 8006912:	4642      	mov	r2, r8
 8006914:	189b      	adds	r3, r3, r2
 8006916:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 800691a:	464b      	mov	r3, r9
 800691c:	460a      	mov	r2, r1
 800691e:	eb42 0303 	adc.w	r3, r2, r3
 8006922:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8006926:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8006932:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8006936:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 800693a:	460b      	mov	r3, r1
 800693c:	18db      	adds	r3, r3, r3
 800693e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006942:	4613      	mov	r3, r2
 8006944:	eb42 0303 	adc.w	r3, r2, r3
 8006948:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800694c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8006950:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8006954:	f7f9 fc9c 	bl	8000290 <__aeabi_uldivmod>
 8006958:	4602      	mov	r2, r0
 800695a:	460b      	mov	r3, r1
 800695c:	4b0c      	ldr	r3, [pc, #48]	; (8006990 <UART_SetConfig+0x300>)
 800695e:	fba3 1302 	umull	r1, r3, r3, r2
 8006962:	095b      	lsrs	r3, r3, #5
 8006964:	2164      	movs	r1, #100	; 0x64
 8006966:	fb01 f303 	mul.w	r3, r1, r3
 800696a:	1ad3      	subs	r3, r2, r3
 800696c:	00db      	lsls	r3, r3, #3
 800696e:	3332      	adds	r3, #50	; 0x32
 8006970:	4a07      	ldr	r2, [pc, #28]	; (8006990 <UART_SetConfig+0x300>)
 8006972:	fba2 2303 	umull	r2, r3, r2, r3
 8006976:	095b      	lsrs	r3, r3, #5
 8006978:	f003 0207 	and.w	r2, r3, #7
 800697c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4422      	add	r2, r4
 8006984:	609a      	str	r2, [r3, #8]
 8006986:	e349      	b.n	800701c <UART_SetConfig+0x98c>
 8006988:	40011000 	.word	0x40011000
 800698c:	40011400 	.word	0x40011400
 8006990:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006994:	f7fe faee 	bl	8004f74 <HAL_RCC_GetPCLK1Freq>
 8006998:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800699c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80069a0:	2200      	movs	r2, #0
 80069a2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80069a6:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 80069aa:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 80069ae:	4622      	mov	r2, r4
 80069b0:	462b      	mov	r3, r5
 80069b2:	1891      	adds	r1, r2, r2
 80069b4:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80069b8:	415b      	adcs	r3, r3
 80069ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80069be:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80069c2:	4621      	mov	r1, r4
 80069c4:	eb12 0a01 	adds.w	sl, r2, r1
 80069c8:	4629      	mov	r1, r5
 80069ca:	eb43 0b01 	adc.w	fp, r3, r1
 80069ce:	f04f 0200 	mov.w	r2, #0
 80069d2:	f04f 0300 	mov.w	r3, #0
 80069d6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80069da:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80069de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80069e2:	4692      	mov	sl, r2
 80069e4:	469b      	mov	fp, r3
 80069e6:	4623      	mov	r3, r4
 80069e8:	eb1a 0303 	adds.w	r3, sl, r3
 80069ec:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80069f0:	462b      	mov	r3, r5
 80069f2:	eb4b 0303 	adc.w	r3, fp, r3
 80069f6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80069fa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8006a06:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8006a0a:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8006a0e:	460b      	mov	r3, r1
 8006a10:	18db      	adds	r3, r3, r3
 8006a12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a16:	4613      	mov	r3, r2
 8006a18:	eb42 0303 	adc.w	r3, r2, r3
 8006a1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006a20:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8006a24:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8006a28:	f7f9 fc32 	bl	8000290 <__aeabi_uldivmod>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	460b      	mov	r3, r1
 8006a30:	4b61      	ldr	r3, [pc, #388]	; (8006bb8 <UART_SetConfig+0x528>)
 8006a32:	fba3 2302 	umull	r2, r3, r3, r2
 8006a36:	095b      	lsrs	r3, r3, #5
 8006a38:	011c      	lsls	r4, r3, #4
 8006a3a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8006a44:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8006a48:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8006a4c:	4642      	mov	r2, r8
 8006a4e:	464b      	mov	r3, r9
 8006a50:	1891      	adds	r1, r2, r2
 8006a52:	67b9      	str	r1, [r7, #120]	; 0x78
 8006a54:	415b      	adcs	r3, r3
 8006a56:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006a58:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8006a5c:	4641      	mov	r1, r8
 8006a5e:	1851      	adds	r1, r2, r1
 8006a60:	6739      	str	r1, [r7, #112]	; 0x70
 8006a62:	4649      	mov	r1, r9
 8006a64:	414b      	adcs	r3, r1
 8006a66:	677b      	str	r3, [r7, #116]	; 0x74
 8006a68:	f04f 0200 	mov.w	r2, #0
 8006a6c:	f04f 0300 	mov.w	r3, #0
 8006a70:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8006a74:	4659      	mov	r1, fp
 8006a76:	00cb      	lsls	r3, r1, #3
 8006a78:	4651      	mov	r1, sl
 8006a7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a7e:	4651      	mov	r1, sl
 8006a80:	00ca      	lsls	r2, r1, #3
 8006a82:	4610      	mov	r0, r2
 8006a84:	4619      	mov	r1, r3
 8006a86:	4603      	mov	r3, r0
 8006a88:	4642      	mov	r2, r8
 8006a8a:	189b      	adds	r3, r3, r2
 8006a8c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8006a90:	464b      	mov	r3, r9
 8006a92:	460a      	mov	r2, r1
 8006a94:	eb42 0303 	adc.w	r3, r2, r3
 8006a98:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8006a9c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8006aa8:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8006aac:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	18db      	adds	r3, r3, r3
 8006ab4:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ab6:	4613      	mov	r3, r2
 8006ab8:	eb42 0303 	adc.w	r3, r2, r3
 8006abc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006abe:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8006ac2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8006ac6:	f7f9 fbe3 	bl	8000290 <__aeabi_uldivmod>
 8006aca:	4602      	mov	r2, r0
 8006acc:	460b      	mov	r3, r1
 8006ace:	4611      	mov	r1, r2
 8006ad0:	4b39      	ldr	r3, [pc, #228]	; (8006bb8 <UART_SetConfig+0x528>)
 8006ad2:	fba3 2301 	umull	r2, r3, r3, r1
 8006ad6:	095b      	lsrs	r3, r3, #5
 8006ad8:	2264      	movs	r2, #100	; 0x64
 8006ada:	fb02 f303 	mul.w	r3, r2, r3
 8006ade:	1acb      	subs	r3, r1, r3
 8006ae0:	00db      	lsls	r3, r3, #3
 8006ae2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006ae6:	4b34      	ldr	r3, [pc, #208]	; (8006bb8 <UART_SetConfig+0x528>)
 8006ae8:	fba3 2302 	umull	r2, r3, r3, r2
 8006aec:	095b      	lsrs	r3, r3, #5
 8006aee:	005b      	lsls	r3, r3, #1
 8006af0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006af4:	441c      	add	r4, r3
 8006af6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006afa:	2200      	movs	r2, #0
 8006afc:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8006b00:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8006b04:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8006b08:	4642      	mov	r2, r8
 8006b0a:	464b      	mov	r3, r9
 8006b0c:	1891      	adds	r1, r2, r2
 8006b0e:	6639      	str	r1, [r7, #96]	; 0x60
 8006b10:	415b      	adcs	r3, r3
 8006b12:	667b      	str	r3, [r7, #100]	; 0x64
 8006b14:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8006b18:	4641      	mov	r1, r8
 8006b1a:	1851      	adds	r1, r2, r1
 8006b1c:	65b9      	str	r1, [r7, #88]	; 0x58
 8006b1e:	4649      	mov	r1, r9
 8006b20:	414b      	adcs	r3, r1
 8006b22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b24:	f04f 0200 	mov.w	r2, #0
 8006b28:	f04f 0300 	mov.w	r3, #0
 8006b2c:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8006b30:	4659      	mov	r1, fp
 8006b32:	00cb      	lsls	r3, r1, #3
 8006b34:	4651      	mov	r1, sl
 8006b36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b3a:	4651      	mov	r1, sl
 8006b3c:	00ca      	lsls	r2, r1, #3
 8006b3e:	4610      	mov	r0, r2
 8006b40:	4619      	mov	r1, r3
 8006b42:	4603      	mov	r3, r0
 8006b44:	4642      	mov	r2, r8
 8006b46:	189b      	adds	r3, r3, r2
 8006b48:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8006b4c:	464b      	mov	r3, r9
 8006b4e:	460a      	mov	r2, r1
 8006b50:	eb42 0303 	adc.w	r3, r2, r3
 8006b54:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8006b58:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8006b64:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8006b68:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	18db      	adds	r3, r3, r3
 8006b70:	653b      	str	r3, [r7, #80]	; 0x50
 8006b72:	4613      	mov	r3, r2
 8006b74:	eb42 0303 	adc.w	r3, r2, r3
 8006b78:	657b      	str	r3, [r7, #84]	; 0x54
 8006b7a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006b7e:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8006b82:	f7f9 fb85 	bl	8000290 <__aeabi_uldivmod>
 8006b86:	4602      	mov	r2, r0
 8006b88:	460b      	mov	r3, r1
 8006b8a:	4b0b      	ldr	r3, [pc, #44]	; (8006bb8 <UART_SetConfig+0x528>)
 8006b8c:	fba3 1302 	umull	r1, r3, r3, r2
 8006b90:	095b      	lsrs	r3, r3, #5
 8006b92:	2164      	movs	r1, #100	; 0x64
 8006b94:	fb01 f303 	mul.w	r3, r1, r3
 8006b98:	1ad3      	subs	r3, r2, r3
 8006b9a:	00db      	lsls	r3, r3, #3
 8006b9c:	3332      	adds	r3, #50	; 0x32
 8006b9e:	4a06      	ldr	r2, [pc, #24]	; (8006bb8 <UART_SetConfig+0x528>)
 8006ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ba4:	095b      	lsrs	r3, r3, #5
 8006ba6:	f003 0207 	and.w	r2, r3, #7
 8006baa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4422      	add	r2, r4
 8006bb2:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006bb4:	e232      	b.n	800701c <UART_SetConfig+0x98c>
 8006bb6:	bf00      	nop
 8006bb8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006bbc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	4b8d      	ldr	r3, [pc, #564]	; (8006df8 <UART_SetConfig+0x768>)
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d006      	beq.n	8006bd6 <UART_SetConfig+0x546>
 8006bc8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	4b8b      	ldr	r3, [pc, #556]	; (8006dfc <UART_SetConfig+0x76c>)
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	f040 8117 	bne.w	8006e04 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006bd6:	f7fe f9e1 	bl	8004f9c <HAL_RCC_GetPCLK2Freq>
 8006bda:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006bde:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006be2:	2200      	movs	r2, #0
 8006be4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8006be8:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8006bec:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8006bf0:	4622      	mov	r2, r4
 8006bf2:	462b      	mov	r3, r5
 8006bf4:	1891      	adds	r1, r2, r2
 8006bf6:	64b9      	str	r1, [r7, #72]	; 0x48
 8006bf8:	415b      	adcs	r3, r3
 8006bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bfc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006c00:	4621      	mov	r1, r4
 8006c02:	eb12 0801 	adds.w	r8, r2, r1
 8006c06:	4629      	mov	r1, r5
 8006c08:	eb43 0901 	adc.w	r9, r3, r1
 8006c0c:	f04f 0200 	mov.w	r2, #0
 8006c10:	f04f 0300 	mov.w	r3, #0
 8006c14:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c18:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c1c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c20:	4690      	mov	r8, r2
 8006c22:	4699      	mov	r9, r3
 8006c24:	4623      	mov	r3, r4
 8006c26:	eb18 0303 	adds.w	r3, r8, r3
 8006c2a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8006c2e:	462b      	mov	r3, r5
 8006c30:	eb49 0303 	adc.w	r3, r9, r3
 8006c34:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8006c38:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8006c44:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8006c48:	f04f 0200 	mov.w	r2, #0
 8006c4c:	f04f 0300 	mov.w	r3, #0
 8006c50:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8006c54:	4629      	mov	r1, r5
 8006c56:	008b      	lsls	r3, r1, #2
 8006c58:	4621      	mov	r1, r4
 8006c5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c5e:	4621      	mov	r1, r4
 8006c60:	008a      	lsls	r2, r1, #2
 8006c62:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8006c66:	f7f9 fb13 	bl	8000290 <__aeabi_uldivmod>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	4b64      	ldr	r3, [pc, #400]	; (8006e00 <UART_SetConfig+0x770>)
 8006c70:	fba3 2302 	umull	r2, r3, r3, r2
 8006c74:	095b      	lsrs	r3, r3, #5
 8006c76:	011c      	lsls	r4, r3, #4
 8006c78:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8006c82:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8006c86:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 8006c8a:	4642      	mov	r2, r8
 8006c8c:	464b      	mov	r3, r9
 8006c8e:	1891      	adds	r1, r2, r2
 8006c90:	6439      	str	r1, [r7, #64]	; 0x40
 8006c92:	415b      	adcs	r3, r3
 8006c94:	647b      	str	r3, [r7, #68]	; 0x44
 8006c96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006c9a:	4641      	mov	r1, r8
 8006c9c:	1851      	adds	r1, r2, r1
 8006c9e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006ca0:	4649      	mov	r1, r9
 8006ca2:	414b      	adcs	r3, r1
 8006ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ca6:	f04f 0200 	mov.w	r2, #0
 8006caa:	f04f 0300 	mov.w	r3, #0
 8006cae:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8006cb2:	4659      	mov	r1, fp
 8006cb4:	00cb      	lsls	r3, r1, #3
 8006cb6:	4651      	mov	r1, sl
 8006cb8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006cbc:	4651      	mov	r1, sl
 8006cbe:	00ca      	lsls	r2, r1, #3
 8006cc0:	4610      	mov	r0, r2
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	4642      	mov	r2, r8
 8006cc8:	189b      	adds	r3, r3, r2
 8006cca:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8006cce:	464b      	mov	r3, r9
 8006cd0:	460a      	mov	r2, r1
 8006cd2:	eb42 0303 	adc.w	r3, r2, r3
 8006cd6:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8006cda:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8006ce6:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8006cea:	f04f 0200 	mov.w	r2, #0
 8006cee:	f04f 0300 	mov.w	r3, #0
 8006cf2:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8006cf6:	4649      	mov	r1, r9
 8006cf8:	008b      	lsls	r3, r1, #2
 8006cfa:	4641      	mov	r1, r8
 8006cfc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d00:	4641      	mov	r1, r8
 8006d02:	008a      	lsls	r2, r1, #2
 8006d04:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8006d08:	f7f9 fac2 	bl	8000290 <__aeabi_uldivmod>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	460b      	mov	r3, r1
 8006d10:	4b3b      	ldr	r3, [pc, #236]	; (8006e00 <UART_SetConfig+0x770>)
 8006d12:	fba3 1302 	umull	r1, r3, r3, r2
 8006d16:	095b      	lsrs	r3, r3, #5
 8006d18:	2164      	movs	r1, #100	; 0x64
 8006d1a:	fb01 f303 	mul.w	r3, r1, r3
 8006d1e:	1ad3      	subs	r3, r2, r3
 8006d20:	011b      	lsls	r3, r3, #4
 8006d22:	3332      	adds	r3, #50	; 0x32
 8006d24:	4a36      	ldr	r2, [pc, #216]	; (8006e00 <UART_SetConfig+0x770>)
 8006d26:	fba2 2303 	umull	r2, r3, r2, r3
 8006d2a:	095b      	lsrs	r3, r3, #5
 8006d2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d30:	441c      	add	r4, r3
 8006d32:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006d36:	2200      	movs	r2, #0
 8006d38:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8006d3c:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8006d40:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8006d44:	4642      	mov	r2, r8
 8006d46:	464b      	mov	r3, r9
 8006d48:	1891      	adds	r1, r2, r2
 8006d4a:	6339      	str	r1, [r7, #48]	; 0x30
 8006d4c:	415b      	adcs	r3, r3
 8006d4e:	637b      	str	r3, [r7, #52]	; 0x34
 8006d50:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006d54:	4641      	mov	r1, r8
 8006d56:	1851      	adds	r1, r2, r1
 8006d58:	62b9      	str	r1, [r7, #40]	; 0x28
 8006d5a:	4649      	mov	r1, r9
 8006d5c:	414b      	adcs	r3, r1
 8006d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d60:	f04f 0200 	mov.w	r2, #0
 8006d64:	f04f 0300 	mov.w	r3, #0
 8006d68:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8006d6c:	4659      	mov	r1, fp
 8006d6e:	00cb      	lsls	r3, r1, #3
 8006d70:	4651      	mov	r1, sl
 8006d72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d76:	4651      	mov	r1, sl
 8006d78:	00ca      	lsls	r2, r1, #3
 8006d7a:	4610      	mov	r0, r2
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	4603      	mov	r3, r0
 8006d80:	4642      	mov	r2, r8
 8006d82:	189b      	adds	r3, r3, r2
 8006d84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006d88:	464b      	mov	r3, r9
 8006d8a:	460a      	mov	r2, r1
 8006d8c:	eb42 0303 	adc.w	r3, r2, r3
 8006d90:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006d94:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006da0:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8006da4:	f04f 0200 	mov.w	r2, #0
 8006da8:	f04f 0300 	mov.w	r3, #0
 8006dac:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 8006db0:	4649      	mov	r1, r9
 8006db2:	008b      	lsls	r3, r1, #2
 8006db4:	4641      	mov	r1, r8
 8006db6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006dba:	4641      	mov	r1, r8
 8006dbc:	008a      	lsls	r2, r1, #2
 8006dbe:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8006dc2:	f7f9 fa65 	bl	8000290 <__aeabi_uldivmod>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	460b      	mov	r3, r1
 8006dca:	4b0d      	ldr	r3, [pc, #52]	; (8006e00 <UART_SetConfig+0x770>)
 8006dcc:	fba3 1302 	umull	r1, r3, r3, r2
 8006dd0:	095b      	lsrs	r3, r3, #5
 8006dd2:	2164      	movs	r1, #100	; 0x64
 8006dd4:	fb01 f303 	mul.w	r3, r1, r3
 8006dd8:	1ad3      	subs	r3, r2, r3
 8006dda:	011b      	lsls	r3, r3, #4
 8006ddc:	3332      	adds	r3, #50	; 0x32
 8006dde:	4a08      	ldr	r2, [pc, #32]	; (8006e00 <UART_SetConfig+0x770>)
 8006de0:	fba2 2303 	umull	r2, r3, r2, r3
 8006de4:	095b      	lsrs	r3, r3, #5
 8006de6:	f003 020f 	and.w	r2, r3, #15
 8006dea:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4422      	add	r2, r4
 8006df2:	609a      	str	r2, [r3, #8]
 8006df4:	e112      	b.n	800701c <UART_SetConfig+0x98c>
 8006df6:	bf00      	nop
 8006df8:	40011000 	.word	0x40011000
 8006dfc:	40011400 	.word	0x40011400
 8006e00:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e04:	f7fe f8b6 	bl	8004f74 <HAL_RCC_GetPCLK1Freq>
 8006e08:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e0c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006e10:	2200      	movs	r2, #0
 8006e12:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006e16:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8006e1a:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8006e1e:	4642      	mov	r2, r8
 8006e20:	464b      	mov	r3, r9
 8006e22:	1891      	adds	r1, r2, r2
 8006e24:	6239      	str	r1, [r7, #32]
 8006e26:	415b      	adcs	r3, r3
 8006e28:	627b      	str	r3, [r7, #36]	; 0x24
 8006e2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e2e:	4641      	mov	r1, r8
 8006e30:	1854      	adds	r4, r2, r1
 8006e32:	4649      	mov	r1, r9
 8006e34:	eb43 0501 	adc.w	r5, r3, r1
 8006e38:	f04f 0200 	mov.w	r2, #0
 8006e3c:	f04f 0300 	mov.w	r3, #0
 8006e40:	00eb      	lsls	r3, r5, #3
 8006e42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e46:	00e2      	lsls	r2, r4, #3
 8006e48:	4614      	mov	r4, r2
 8006e4a:	461d      	mov	r5, r3
 8006e4c:	4643      	mov	r3, r8
 8006e4e:	18e3      	adds	r3, r4, r3
 8006e50:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006e54:	464b      	mov	r3, r9
 8006e56:	eb45 0303 	adc.w	r3, r5, r3
 8006e5a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006e5e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006e6a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8006e6e:	f04f 0200 	mov.w	r2, #0
 8006e72:	f04f 0300 	mov.w	r3, #0
 8006e76:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8006e7a:	4629      	mov	r1, r5
 8006e7c:	008b      	lsls	r3, r1, #2
 8006e7e:	4621      	mov	r1, r4
 8006e80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e84:	4621      	mov	r1, r4
 8006e86:	008a      	lsls	r2, r1, #2
 8006e88:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8006e8c:	f7f9 fa00 	bl	8000290 <__aeabi_uldivmod>
 8006e90:	4602      	mov	r2, r0
 8006e92:	460b      	mov	r3, r1
 8006e94:	4b64      	ldr	r3, [pc, #400]	; (8007028 <UART_SetConfig+0x998>)
 8006e96:	fba3 2302 	umull	r2, r3, r3, r2
 8006e9a:	095b      	lsrs	r3, r3, #5
 8006e9c:	011c      	lsls	r4, r3, #4
 8006e9e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006ea8:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8006eac:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8006eb0:	4642      	mov	r2, r8
 8006eb2:	464b      	mov	r3, r9
 8006eb4:	1891      	adds	r1, r2, r2
 8006eb6:	61b9      	str	r1, [r7, #24]
 8006eb8:	415b      	adcs	r3, r3
 8006eba:	61fb      	str	r3, [r7, #28]
 8006ebc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ec0:	4641      	mov	r1, r8
 8006ec2:	1851      	adds	r1, r2, r1
 8006ec4:	6139      	str	r1, [r7, #16]
 8006ec6:	4649      	mov	r1, r9
 8006ec8:	414b      	adcs	r3, r1
 8006eca:	617b      	str	r3, [r7, #20]
 8006ecc:	f04f 0200 	mov.w	r2, #0
 8006ed0:	f04f 0300 	mov.w	r3, #0
 8006ed4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ed8:	4659      	mov	r1, fp
 8006eda:	00cb      	lsls	r3, r1, #3
 8006edc:	4651      	mov	r1, sl
 8006ede:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ee2:	4651      	mov	r1, sl
 8006ee4:	00ca      	lsls	r2, r1, #3
 8006ee6:	4610      	mov	r0, r2
 8006ee8:	4619      	mov	r1, r3
 8006eea:	4603      	mov	r3, r0
 8006eec:	4642      	mov	r2, r8
 8006eee:	189b      	adds	r3, r3, r2
 8006ef0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006ef4:	464b      	mov	r3, r9
 8006ef6:	460a      	mov	r2, r1
 8006ef8:	eb42 0303 	adc.w	r3, r2, r3
 8006efc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006f00:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006f0c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8006f10:	f04f 0200 	mov.w	r2, #0
 8006f14:	f04f 0300 	mov.w	r3, #0
 8006f18:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8006f1c:	4649      	mov	r1, r9
 8006f1e:	008b      	lsls	r3, r1, #2
 8006f20:	4641      	mov	r1, r8
 8006f22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f26:	4641      	mov	r1, r8
 8006f28:	008a      	lsls	r2, r1, #2
 8006f2a:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8006f2e:	f7f9 f9af 	bl	8000290 <__aeabi_uldivmod>
 8006f32:	4602      	mov	r2, r0
 8006f34:	460b      	mov	r3, r1
 8006f36:	4b3c      	ldr	r3, [pc, #240]	; (8007028 <UART_SetConfig+0x998>)
 8006f38:	fba3 1302 	umull	r1, r3, r3, r2
 8006f3c:	095b      	lsrs	r3, r3, #5
 8006f3e:	2164      	movs	r1, #100	; 0x64
 8006f40:	fb01 f303 	mul.w	r3, r1, r3
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	011b      	lsls	r3, r3, #4
 8006f48:	3332      	adds	r3, #50	; 0x32
 8006f4a:	4a37      	ldr	r2, [pc, #220]	; (8007028 <UART_SetConfig+0x998>)
 8006f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f50:	095b      	lsrs	r3, r3, #5
 8006f52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f56:	441c      	add	r4, r3
 8006f58:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f62:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006f66:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8006f6a:	4642      	mov	r2, r8
 8006f6c:	464b      	mov	r3, r9
 8006f6e:	1891      	adds	r1, r2, r2
 8006f70:	60b9      	str	r1, [r7, #8]
 8006f72:	415b      	adcs	r3, r3
 8006f74:	60fb      	str	r3, [r7, #12]
 8006f76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f7a:	4641      	mov	r1, r8
 8006f7c:	1851      	adds	r1, r2, r1
 8006f7e:	6039      	str	r1, [r7, #0]
 8006f80:	4649      	mov	r1, r9
 8006f82:	414b      	adcs	r3, r1
 8006f84:	607b      	str	r3, [r7, #4]
 8006f86:	f04f 0200 	mov.w	r2, #0
 8006f8a:	f04f 0300 	mov.w	r3, #0
 8006f8e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006f92:	4659      	mov	r1, fp
 8006f94:	00cb      	lsls	r3, r1, #3
 8006f96:	4651      	mov	r1, sl
 8006f98:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f9c:	4651      	mov	r1, sl
 8006f9e:	00ca      	lsls	r2, r1, #3
 8006fa0:	4610      	mov	r0, r2
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	4642      	mov	r2, r8
 8006fa8:	189b      	adds	r3, r3, r2
 8006faa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006fae:	464b      	mov	r3, r9
 8006fb0:	460a      	mov	r2, r1
 8006fb2:	eb42 0303 	adc.w	r3, r2, r3
 8006fb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006fba:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006fc6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006fca:	f04f 0200 	mov.w	r2, #0
 8006fce:	f04f 0300 	mov.w	r3, #0
 8006fd2:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8006fd6:	4649      	mov	r1, r9
 8006fd8:	008b      	lsls	r3, r1, #2
 8006fda:	4641      	mov	r1, r8
 8006fdc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fe0:	4641      	mov	r1, r8
 8006fe2:	008a      	lsls	r2, r1, #2
 8006fe4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006fe8:	f7f9 f952 	bl	8000290 <__aeabi_uldivmod>
 8006fec:	4602      	mov	r2, r0
 8006fee:	460b      	mov	r3, r1
 8006ff0:	4b0d      	ldr	r3, [pc, #52]	; (8007028 <UART_SetConfig+0x998>)
 8006ff2:	fba3 1302 	umull	r1, r3, r3, r2
 8006ff6:	095b      	lsrs	r3, r3, #5
 8006ff8:	2164      	movs	r1, #100	; 0x64
 8006ffa:	fb01 f303 	mul.w	r3, r1, r3
 8006ffe:	1ad3      	subs	r3, r2, r3
 8007000:	011b      	lsls	r3, r3, #4
 8007002:	3332      	adds	r3, #50	; 0x32
 8007004:	4a08      	ldr	r2, [pc, #32]	; (8007028 <UART_SetConfig+0x998>)
 8007006:	fba2 2303 	umull	r2, r3, r2, r3
 800700a:	095b      	lsrs	r3, r3, #5
 800700c:	f003 020f 	and.w	r2, r3, #15
 8007010:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4422      	add	r2, r4
 8007018:	609a      	str	r2, [r3, #8]
}
 800701a:	e7ff      	b.n	800701c <UART_SetConfig+0x98c>
 800701c:	bf00      	nop
 800701e:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8007022:	46bd      	mov	sp, r7
 8007024:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007028:	51eb851f 	.word	0x51eb851f

0800702c <atoi>:
 800702c:	220a      	movs	r2, #10
 800702e:	2100      	movs	r1, #0
 8007030:	f000 b8d4 	b.w	80071dc <strtol>

08007034 <__errno>:
 8007034:	4b01      	ldr	r3, [pc, #4]	; (800703c <__errno+0x8>)
 8007036:	6818      	ldr	r0, [r3, #0]
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop
 800703c:	200000b4 	.word	0x200000b4

08007040 <__libc_init_array>:
 8007040:	b570      	push	{r4, r5, r6, lr}
 8007042:	4d0d      	ldr	r5, [pc, #52]	; (8007078 <__libc_init_array+0x38>)
 8007044:	4c0d      	ldr	r4, [pc, #52]	; (800707c <__libc_init_array+0x3c>)
 8007046:	1b64      	subs	r4, r4, r5
 8007048:	10a4      	asrs	r4, r4, #2
 800704a:	2600      	movs	r6, #0
 800704c:	42a6      	cmp	r6, r4
 800704e:	d109      	bne.n	8007064 <__libc_init_array+0x24>
 8007050:	4d0b      	ldr	r5, [pc, #44]	; (8007080 <__libc_init_array+0x40>)
 8007052:	4c0c      	ldr	r4, [pc, #48]	; (8007084 <__libc_init_array+0x44>)
 8007054:	f001 f842 	bl	80080dc <_init>
 8007058:	1b64      	subs	r4, r4, r5
 800705a:	10a4      	asrs	r4, r4, #2
 800705c:	2600      	movs	r6, #0
 800705e:	42a6      	cmp	r6, r4
 8007060:	d105      	bne.n	800706e <__libc_init_array+0x2e>
 8007062:	bd70      	pop	{r4, r5, r6, pc}
 8007064:	f855 3b04 	ldr.w	r3, [r5], #4
 8007068:	4798      	blx	r3
 800706a:	3601      	adds	r6, #1
 800706c:	e7ee      	b.n	800704c <__libc_init_array+0xc>
 800706e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007072:	4798      	blx	r3
 8007074:	3601      	adds	r6, #1
 8007076:	e7f2      	b.n	800705e <__libc_init_array+0x1e>
 8007078:	0800d190 	.word	0x0800d190
 800707c:	0800d190 	.word	0x0800d190
 8007080:	0800d190 	.word	0x0800d190
 8007084:	0800d194 	.word	0x0800d194

08007088 <memset>:
 8007088:	4402      	add	r2, r0
 800708a:	4603      	mov	r3, r0
 800708c:	4293      	cmp	r3, r2
 800708e:	d100      	bne.n	8007092 <memset+0xa>
 8007090:	4770      	bx	lr
 8007092:	f803 1b01 	strb.w	r1, [r3], #1
 8007096:	e7f9      	b.n	800708c <memset+0x4>

08007098 <iprintf>:
 8007098:	b40f      	push	{r0, r1, r2, r3}
 800709a:	4b0a      	ldr	r3, [pc, #40]	; (80070c4 <iprintf+0x2c>)
 800709c:	b513      	push	{r0, r1, r4, lr}
 800709e:	681c      	ldr	r4, [r3, #0]
 80070a0:	b124      	cbz	r4, 80070ac <iprintf+0x14>
 80070a2:	69a3      	ldr	r3, [r4, #24]
 80070a4:	b913      	cbnz	r3, 80070ac <iprintf+0x14>
 80070a6:	4620      	mov	r0, r4
 80070a8:	f000 f8fa 	bl	80072a0 <__sinit>
 80070ac:	ab05      	add	r3, sp, #20
 80070ae:	9a04      	ldr	r2, [sp, #16]
 80070b0:	68a1      	ldr	r1, [r4, #8]
 80070b2:	9301      	str	r3, [sp, #4]
 80070b4:	4620      	mov	r0, r4
 80070b6:	f000 fa51 	bl	800755c <_vfiprintf_r>
 80070ba:	b002      	add	sp, #8
 80070bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070c0:	b004      	add	sp, #16
 80070c2:	4770      	bx	lr
 80070c4:	200000b4 	.word	0x200000b4

080070c8 <strcpy>:
 80070c8:	4603      	mov	r3, r0
 80070ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80070ce:	f803 2b01 	strb.w	r2, [r3], #1
 80070d2:	2a00      	cmp	r2, #0
 80070d4:	d1f9      	bne.n	80070ca <strcpy+0x2>
 80070d6:	4770      	bx	lr

080070d8 <_strtol_l.constprop.0>:
 80070d8:	2b01      	cmp	r3, #1
 80070da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070de:	d001      	beq.n	80070e4 <_strtol_l.constprop.0+0xc>
 80070e0:	2b24      	cmp	r3, #36	; 0x24
 80070e2:	d906      	bls.n	80070f2 <_strtol_l.constprop.0+0x1a>
 80070e4:	f7ff ffa6 	bl	8007034 <__errno>
 80070e8:	2316      	movs	r3, #22
 80070ea:	6003      	str	r3, [r0, #0]
 80070ec:	2000      	movs	r0, #0
 80070ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070f2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80071d8 <_strtol_l.constprop.0+0x100>
 80070f6:	460d      	mov	r5, r1
 80070f8:	462e      	mov	r6, r5
 80070fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80070fe:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007102:	f017 0708 	ands.w	r7, r7, #8
 8007106:	d1f7      	bne.n	80070f8 <_strtol_l.constprop.0+0x20>
 8007108:	2c2d      	cmp	r4, #45	; 0x2d
 800710a:	d132      	bne.n	8007172 <_strtol_l.constprop.0+0x9a>
 800710c:	782c      	ldrb	r4, [r5, #0]
 800710e:	2701      	movs	r7, #1
 8007110:	1cb5      	adds	r5, r6, #2
 8007112:	2b00      	cmp	r3, #0
 8007114:	d05b      	beq.n	80071ce <_strtol_l.constprop.0+0xf6>
 8007116:	2b10      	cmp	r3, #16
 8007118:	d109      	bne.n	800712e <_strtol_l.constprop.0+0x56>
 800711a:	2c30      	cmp	r4, #48	; 0x30
 800711c:	d107      	bne.n	800712e <_strtol_l.constprop.0+0x56>
 800711e:	782c      	ldrb	r4, [r5, #0]
 8007120:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007124:	2c58      	cmp	r4, #88	; 0x58
 8007126:	d14d      	bne.n	80071c4 <_strtol_l.constprop.0+0xec>
 8007128:	786c      	ldrb	r4, [r5, #1]
 800712a:	2310      	movs	r3, #16
 800712c:	3502      	adds	r5, #2
 800712e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007132:	f108 38ff 	add.w	r8, r8, #4294967295
 8007136:	f04f 0c00 	mov.w	ip, #0
 800713a:	fbb8 f9f3 	udiv	r9, r8, r3
 800713e:	4666      	mov	r6, ip
 8007140:	fb03 8a19 	mls	sl, r3, r9, r8
 8007144:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007148:	f1be 0f09 	cmp.w	lr, #9
 800714c:	d816      	bhi.n	800717c <_strtol_l.constprop.0+0xa4>
 800714e:	4674      	mov	r4, lr
 8007150:	42a3      	cmp	r3, r4
 8007152:	dd24      	ble.n	800719e <_strtol_l.constprop.0+0xc6>
 8007154:	f1bc 0f00 	cmp.w	ip, #0
 8007158:	db1e      	blt.n	8007198 <_strtol_l.constprop.0+0xc0>
 800715a:	45b1      	cmp	r9, r6
 800715c:	d31c      	bcc.n	8007198 <_strtol_l.constprop.0+0xc0>
 800715e:	d101      	bne.n	8007164 <_strtol_l.constprop.0+0x8c>
 8007160:	45a2      	cmp	sl, r4
 8007162:	db19      	blt.n	8007198 <_strtol_l.constprop.0+0xc0>
 8007164:	fb06 4603 	mla	r6, r6, r3, r4
 8007168:	f04f 0c01 	mov.w	ip, #1
 800716c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007170:	e7e8      	b.n	8007144 <_strtol_l.constprop.0+0x6c>
 8007172:	2c2b      	cmp	r4, #43	; 0x2b
 8007174:	bf04      	itt	eq
 8007176:	782c      	ldrbeq	r4, [r5, #0]
 8007178:	1cb5      	addeq	r5, r6, #2
 800717a:	e7ca      	b.n	8007112 <_strtol_l.constprop.0+0x3a>
 800717c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007180:	f1be 0f19 	cmp.w	lr, #25
 8007184:	d801      	bhi.n	800718a <_strtol_l.constprop.0+0xb2>
 8007186:	3c37      	subs	r4, #55	; 0x37
 8007188:	e7e2      	b.n	8007150 <_strtol_l.constprop.0+0x78>
 800718a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800718e:	f1be 0f19 	cmp.w	lr, #25
 8007192:	d804      	bhi.n	800719e <_strtol_l.constprop.0+0xc6>
 8007194:	3c57      	subs	r4, #87	; 0x57
 8007196:	e7db      	b.n	8007150 <_strtol_l.constprop.0+0x78>
 8007198:	f04f 3cff 	mov.w	ip, #4294967295
 800719c:	e7e6      	b.n	800716c <_strtol_l.constprop.0+0x94>
 800719e:	f1bc 0f00 	cmp.w	ip, #0
 80071a2:	da05      	bge.n	80071b0 <_strtol_l.constprop.0+0xd8>
 80071a4:	2322      	movs	r3, #34	; 0x22
 80071a6:	6003      	str	r3, [r0, #0]
 80071a8:	4646      	mov	r6, r8
 80071aa:	b942      	cbnz	r2, 80071be <_strtol_l.constprop.0+0xe6>
 80071ac:	4630      	mov	r0, r6
 80071ae:	e79e      	b.n	80070ee <_strtol_l.constprop.0+0x16>
 80071b0:	b107      	cbz	r7, 80071b4 <_strtol_l.constprop.0+0xdc>
 80071b2:	4276      	negs	r6, r6
 80071b4:	2a00      	cmp	r2, #0
 80071b6:	d0f9      	beq.n	80071ac <_strtol_l.constprop.0+0xd4>
 80071b8:	f1bc 0f00 	cmp.w	ip, #0
 80071bc:	d000      	beq.n	80071c0 <_strtol_l.constprop.0+0xe8>
 80071be:	1e69      	subs	r1, r5, #1
 80071c0:	6011      	str	r1, [r2, #0]
 80071c2:	e7f3      	b.n	80071ac <_strtol_l.constprop.0+0xd4>
 80071c4:	2430      	movs	r4, #48	; 0x30
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d1b1      	bne.n	800712e <_strtol_l.constprop.0+0x56>
 80071ca:	2308      	movs	r3, #8
 80071cc:	e7af      	b.n	800712e <_strtol_l.constprop.0+0x56>
 80071ce:	2c30      	cmp	r4, #48	; 0x30
 80071d0:	d0a5      	beq.n	800711e <_strtol_l.constprop.0+0x46>
 80071d2:	230a      	movs	r3, #10
 80071d4:	e7ab      	b.n	800712e <_strtol_l.constprop.0+0x56>
 80071d6:	bf00      	nop
 80071d8:	0800cff1 	.word	0x0800cff1

080071dc <strtol>:
 80071dc:	4613      	mov	r3, r2
 80071de:	460a      	mov	r2, r1
 80071e0:	4601      	mov	r1, r0
 80071e2:	4802      	ldr	r0, [pc, #8]	; (80071ec <strtol+0x10>)
 80071e4:	6800      	ldr	r0, [r0, #0]
 80071e6:	f7ff bf77 	b.w	80070d8 <_strtol_l.constprop.0>
 80071ea:	bf00      	nop
 80071ec:	200000b4 	.word	0x200000b4

080071f0 <std>:
 80071f0:	2300      	movs	r3, #0
 80071f2:	b510      	push	{r4, lr}
 80071f4:	4604      	mov	r4, r0
 80071f6:	e9c0 3300 	strd	r3, r3, [r0]
 80071fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80071fe:	6083      	str	r3, [r0, #8]
 8007200:	8181      	strh	r1, [r0, #12]
 8007202:	6643      	str	r3, [r0, #100]	; 0x64
 8007204:	81c2      	strh	r2, [r0, #14]
 8007206:	6183      	str	r3, [r0, #24]
 8007208:	4619      	mov	r1, r3
 800720a:	2208      	movs	r2, #8
 800720c:	305c      	adds	r0, #92	; 0x5c
 800720e:	f7ff ff3b 	bl	8007088 <memset>
 8007212:	4b05      	ldr	r3, [pc, #20]	; (8007228 <std+0x38>)
 8007214:	6263      	str	r3, [r4, #36]	; 0x24
 8007216:	4b05      	ldr	r3, [pc, #20]	; (800722c <std+0x3c>)
 8007218:	62a3      	str	r3, [r4, #40]	; 0x28
 800721a:	4b05      	ldr	r3, [pc, #20]	; (8007230 <std+0x40>)
 800721c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800721e:	4b05      	ldr	r3, [pc, #20]	; (8007234 <std+0x44>)
 8007220:	6224      	str	r4, [r4, #32]
 8007222:	6323      	str	r3, [r4, #48]	; 0x30
 8007224:	bd10      	pop	{r4, pc}
 8007226:	bf00      	nop
 8007228:	08007b05 	.word	0x08007b05
 800722c:	08007b27 	.word	0x08007b27
 8007230:	08007b5f 	.word	0x08007b5f
 8007234:	08007b83 	.word	0x08007b83

08007238 <_cleanup_r>:
 8007238:	4901      	ldr	r1, [pc, #4]	; (8007240 <_cleanup_r+0x8>)
 800723a:	f000 b8af 	b.w	800739c <_fwalk_reent>
 800723e:	bf00      	nop
 8007240:	08007e5d 	.word	0x08007e5d

08007244 <__sfmoreglue>:
 8007244:	b570      	push	{r4, r5, r6, lr}
 8007246:	2268      	movs	r2, #104	; 0x68
 8007248:	1e4d      	subs	r5, r1, #1
 800724a:	4355      	muls	r5, r2
 800724c:	460e      	mov	r6, r1
 800724e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007252:	f000 f8e5 	bl	8007420 <_malloc_r>
 8007256:	4604      	mov	r4, r0
 8007258:	b140      	cbz	r0, 800726c <__sfmoreglue+0x28>
 800725a:	2100      	movs	r1, #0
 800725c:	e9c0 1600 	strd	r1, r6, [r0]
 8007260:	300c      	adds	r0, #12
 8007262:	60a0      	str	r0, [r4, #8]
 8007264:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007268:	f7ff ff0e 	bl	8007088 <memset>
 800726c:	4620      	mov	r0, r4
 800726e:	bd70      	pop	{r4, r5, r6, pc}

08007270 <__sfp_lock_acquire>:
 8007270:	4801      	ldr	r0, [pc, #4]	; (8007278 <__sfp_lock_acquire+0x8>)
 8007272:	f000 b8b3 	b.w	80073dc <__retarget_lock_acquire_recursive>
 8007276:	bf00      	nop
 8007278:	20013b31 	.word	0x20013b31

0800727c <__sfp_lock_release>:
 800727c:	4801      	ldr	r0, [pc, #4]	; (8007284 <__sfp_lock_release+0x8>)
 800727e:	f000 b8ae 	b.w	80073de <__retarget_lock_release_recursive>
 8007282:	bf00      	nop
 8007284:	20013b31 	.word	0x20013b31

08007288 <__sinit_lock_acquire>:
 8007288:	4801      	ldr	r0, [pc, #4]	; (8007290 <__sinit_lock_acquire+0x8>)
 800728a:	f000 b8a7 	b.w	80073dc <__retarget_lock_acquire_recursive>
 800728e:	bf00      	nop
 8007290:	20013b32 	.word	0x20013b32

08007294 <__sinit_lock_release>:
 8007294:	4801      	ldr	r0, [pc, #4]	; (800729c <__sinit_lock_release+0x8>)
 8007296:	f000 b8a2 	b.w	80073de <__retarget_lock_release_recursive>
 800729a:	bf00      	nop
 800729c:	20013b32 	.word	0x20013b32

080072a0 <__sinit>:
 80072a0:	b510      	push	{r4, lr}
 80072a2:	4604      	mov	r4, r0
 80072a4:	f7ff fff0 	bl	8007288 <__sinit_lock_acquire>
 80072a8:	69a3      	ldr	r3, [r4, #24]
 80072aa:	b11b      	cbz	r3, 80072b4 <__sinit+0x14>
 80072ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072b0:	f7ff bff0 	b.w	8007294 <__sinit_lock_release>
 80072b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80072b8:	6523      	str	r3, [r4, #80]	; 0x50
 80072ba:	4b13      	ldr	r3, [pc, #76]	; (8007308 <__sinit+0x68>)
 80072bc:	4a13      	ldr	r2, [pc, #76]	; (800730c <__sinit+0x6c>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	62a2      	str	r2, [r4, #40]	; 0x28
 80072c2:	42a3      	cmp	r3, r4
 80072c4:	bf04      	itt	eq
 80072c6:	2301      	moveq	r3, #1
 80072c8:	61a3      	streq	r3, [r4, #24]
 80072ca:	4620      	mov	r0, r4
 80072cc:	f000 f820 	bl	8007310 <__sfp>
 80072d0:	6060      	str	r0, [r4, #4]
 80072d2:	4620      	mov	r0, r4
 80072d4:	f000 f81c 	bl	8007310 <__sfp>
 80072d8:	60a0      	str	r0, [r4, #8]
 80072da:	4620      	mov	r0, r4
 80072dc:	f000 f818 	bl	8007310 <__sfp>
 80072e0:	2200      	movs	r2, #0
 80072e2:	60e0      	str	r0, [r4, #12]
 80072e4:	2104      	movs	r1, #4
 80072e6:	6860      	ldr	r0, [r4, #4]
 80072e8:	f7ff ff82 	bl	80071f0 <std>
 80072ec:	68a0      	ldr	r0, [r4, #8]
 80072ee:	2201      	movs	r2, #1
 80072f0:	2109      	movs	r1, #9
 80072f2:	f7ff ff7d 	bl	80071f0 <std>
 80072f6:	68e0      	ldr	r0, [r4, #12]
 80072f8:	2202      	movs	r2, #2
 80072fa:	2112      	movs	r1, #18
 80072fc:	f7ff ff78 	bl	80071f0 <std>
 8007300:	2301      	movs	r3, #1
 8007302:	61a3      	str	r3, [r4, #24]
 8007304:	e7d2      	b.n	80072ac <__sinit+0xc>
 8007306:	bf00      	nop
 8007308:	0800cfec 	.word	0x0800cfec
 800730c:	08007239 	.word	0x08007239

08007310 <__sfp>:
 8007310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007312:	4607      	mov	r7, r0
 8007314:	f7ff ffac 	bl	8007270 <__sfp_lock_acquire>
 8007318:	4b1e      	ldr	r3, [pc, #120]	; (8007394 <__sfp+0x84>)
 800731a:	681e      	ldr	r6, [r3, #0]
 800731c:	69b3      	ldr	r3, [r6, #24]
 800731e:	b913      	cbnz	r3, 8007326 <__sfp+0x16>
 8007320:	4630      	mov	r0, r6
 8007322:	f7ff ffbd 	bl	80072a0 <__sinit>
 8007326:	3648      	adds	r6, #72	; 0x48
 8007328:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800732c:	3b01      	subs	r3, #1
 800732e:	d503      	bpl.n	8007338 <__sfp+0x28>
 8007330:	6833      	ldr	r3, [r6, #0]
 8007332:	b30b      	cbz	r3, 8007378 <__sfp+0x68>
 8007334:	6836      	ldr	r6, [r6, #0]
 8007336:	e7f7      	b.n	8007328 <__sfp+0x18>
 8007338:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800733c:	b9d5      	cbnz	r5, 8007374 <__sfp+0x64>
 800733e:	4b16      	ldr	r3, [pc, #88]	; (8007398 <__sfp+0x88>)
 8007340:	60e3      	str	r3, [r4, #12]
 8007342:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007346:	6665      	str	r5, [r4, #100]	; 0x64
 8007348:	f000 f847 	bl	80073da <__retarget_lock_init_recursive>
 800734c:	f7ff ff96 	bl	800727c <__sfp_lock_release>
 8007350:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007354:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007358:	6025      	str	r5, [r4, #0]
 800735a:	61a5      	str	r5, [r4, #24]
 800735c:	2208      	movs	r2, #8
 800735e:	4629      	mov	r1, r5
 8007360:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007364:	f7ff fe90 	bl	8007088 <memset>
 8007368:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800736c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007370:	4620      	mov	r0, r4
 8007372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007374:	3468      	adds	r4, #104	; 0x68
 8007376:	e7d9      	b.n	800732c <__sfp+0x1c>
 8007378:	2104      	movs	r1, #4
 800737a:	4638      	mov	r0, r7
 800737c:	f7ff ff62 	bl	8007244 <__sfmoreglue>
 8007380:	4604      	mov	r4, r0
 8007382:	6030      	str	r0, [r6, #0]
 8007384:	2800      	cmp	r0, #0
 8007386:	d1d5      	bne.n	8007334 <__sfp+0x24>
 8007388:	f7ff ff78 	bl	800727c <__sfp_lock_release>
 800738c:	230c      	movs	r3, #12
 800738e:	603b      	str	r3, [r7, #0]
 8007390:	e7ee      	b.n	8007370 <__sfp+0x60>
 8007392:	bf00      	nop
 8007394:	0800cfec 	.word	0x0800cfec
 8007398:	ffff0001 	.word	0xffff0001

0800739c <_fwalk_reent>:
 800739c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073a0:	4606      	mov	r6, r0
 80073a2:	4688      	mov	r8, r1
 80073a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80073a8:	2700      	movs	r7, #0
 80073aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80073ae:	f1b9 0901 	subs.w	r9, r9, #1
 80073b2:	d505      	bpl.n	80073c0 <_fwalk_reent+0x24>
 80073b4:	6824      	ldr	r4, [r4, #0]
 80073b6:	2c00      	cmp	r4, #0
 80073b8:	d1f7      	bne.n	80073aa <_fwalk_reent+0xe>
 80073ba:	4638      	mov	r0, r7
 80073bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073c0:	89ab      	ldrh	r3, [r5, #12]
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d907      	bls.n	80073d6 <_fwalk_reent+0x3a>
 80073c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80073ca:	3301      	adds	r3, #1
 80073cc:	d003      	beq.n	80073d6 <_fwalk_reent+0x3a>
 80073ce:	4629      	mov	r1, r5
 80073d0:	4630      	mov	r0, r6
 80073d2:	47c0      	blx	r8
 80073d4:	4307      	orrs	r7, r0
 80073d6:	3568      	adds	r5, #104	; 0x68
 80073d8:	e7e9      	b.n	80073ae <_fwalk_reent+0x12>

080073da <__retarget_lock_init_recursive>:
 80073da:	4770      	bx	lr

080073dc <__retarget_lock_acquire_recursive>:
 80073dc:	4770      	bx	lr

080073de <__retarget_lock_release_recursive>:
 80073de:	4770      	bx	lr

080073e0 <sbrk_aligned>:
 80073e0:	b570      	push	{r4, r5, r6, lr}
 80073e2:	4e0e      	ldr	r6, [pc, #56]	; (800741c <sbrk_aligned+0x3c>)
 80073e4:	460c      	mov	r4, r1
 80073e6:	6831      	ldr	r1, [r6, #0]
 80073e8:	4605      	mov	r5, r0
 80073ea:	b911      	cbnz	r1, 80073f2 <sbrk_aligned+0x12>
 80073ec:	f000 fb7a 	bl	8007ae4 <_sbrk_r>
 80073f0:	6030      	str	r0, [r6, #0]
 80073f2:	4621      	mov	r1, r4
 80073f4:	4628      	mov	r0, r5
 80073f6:	f000 fb75 	bl	8007ae4 <_sbrk_r>
 80073fa:	1c43      	adds	r3, r0, #1
 80073fc:	d00a      	beq.n	8007414 <sbrk_aligned+0x34>
 80073fe:	1cc4      	adds	r4, r0, #3
 8007400:	f024 0403 	bic.w	r4, r4, #3
 8007404:	42a0      	cmp	r0, r4
 8007406:	d007      	beq.n	8007418 <sbrk_aligned+0x38>
 8007408:	1a21      	subs	r1, r4, r0
 800740a:	4628      	mov	r0, r5
 800740c:	f000 fb6a 	bl	8007ae4 <_sbrk_r>
 8007410:	3001      	adds	r0, #1
 8007412:	d101      	bne.n	8007418 <sbrk_aligned+0x38>
 8007414:	f04f 34ff 	mov.w	r4, #4294967295
 8007418:	4620      	mov	r0, r4
 800741a:	bd70      	pop	{r4, r5, r6, pc}
 800741c:	20013b38 	.word	0x20013b38

08007420 <_malloc_r>:
 8007420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007424:	1ccd      	adds	r5, r1, #3
 8007426:	f025 0503 	bic.w	r5, r5, #3
 800742a:	3508      	adds	r5, #8
 800742c:	2d0c      	cmp	r5, #12
 800742e:	bf38      	it	cc
 8007430:	250c      	movcc	r5, #12
 8007432:	2d00      	cmp	r5, #0
 8007434:	4607      	mov	r7, r0
 8007436:	db01      	blt.n	800743c <_malloc_r+0x1c>
 8007438:	42a9      	cmp	r1, r5
 800743a:	d905      	bls.n	8007448 <_malloc_r+0x28>
 800743c:	230c      	movs	r3, #12
 800743e:	603b      	str	r3, [r7, #0]
 8007440:	2600      	movs	r6, #0
 8007442:	4630      	mov	r0, r6
 8007444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007448:	4e2e      	ldr	r6, [pc, #184]	; (8007504 <_malloc_r+0xe4>)
 800744a:	f000 fdbb 	bl	8007fc4 <__malloc_lock>
 800744e:	6833      	ldr	r3, [r6, #0]
 8007450:	461c      	mov	r4, r3
 8007452:	bb34      	cbnz	r4, 80074a2 <_malloc_r+0x82>
 8007454:	4629      	mov	r1, r5
 8007456:	4638      	mov	r0, r7
 8007458:	f7ff ffc2 	bl	80073e0 <sbrk_aligned>
 800745c:	1c43      	adds	r3, r0, #1
 800745e:	4604      	mov	r4, r0
 8007460:	d14d      	bne.n	80074fe <_malloc_r+0xde>
 8007462:	6834      	ldr	r4, [r6, #0]
 8007464:	4626      	mov	r6, r4
 8007466:	2e00      	cmp	r6, #0
 8007468:	d140      	bne.n	80074ec <_malloc_r+0xcc>
 800746a:	6823      	ldr	r3, [r4, #0]
 800746c:	4631      	mov	r1, r6
 800746e:	4638      	mov	r0, r7
 8007470:	eb04 0803 	add.w	r8, r4, r3
 8007474:	f000 fb36 	bl	8007ae4 <_sbrk_r>
 8007478:	4580      	cmp	r8, r0
 800747a:	d13a      	bne.n	80074f2 <_malloc_r+0xd2>
 800747c:	6821      	ldr	r1, [r4, #0]
 800747e:	3503      	adds	r5, #3
 8007480:	1a6d      	subs	r5, r5, r1
 8007482:	f025 0503 	bic.w	r5, r5, #3
 8007486:	3508      	adds	r5, #8
 8007488:	2d0c      	cmp	r5, #12
 800748a:	bf38      	it	cc
 800748c:	250c      	movcc	r5, #12
 800748e:	4629      	mov	r1, r5
 8007490:	4638      	mov	r0, r7
 8007492:	f7ff ffa5 	bl	80073e0 <sbrk_aligned>
 8007496:	3001      	adds	r0, #1
 8007498:	d02b      	beq.n	80074f2 <_malloc_r+0xd2>
 800749a:	6823      	ldr	r3, [r4, #0]
 800749c:	442b      	add	r3, r5
 800749e:	6023      	str	r3, [r4, #0]
 80074a0:	e00e      	b.n	80074c0 <_malloc_r+0xa0>
 80074a2:	6822      	ldr	r2, [r4, #0]
 80074a4:	1b52      	subs	r2, r2, r5
 80074a6:	d41e      	bmi.n	80074e6 <_malloc_r+0xc6>
 80074a8:	2a0b      	cmp	r2, #11
 80074aa:	d916      	bls.n	80074da <_malloc_r+0xba>
 80074ac:	1961      	adds	r1, r4, r5
 80074ae:	42a3      	cmp	r3, r4
 80074b0:	6025      	str	r5, [r4, #0]
 80074b2:	bf18      	it	ne
 80074b4:	6059      	strne	r1, [r3, #4]
 80074b6:	6863      	ldr	r3, [r4, #4]
 80074b8:	bf08      	it	eq
 80074ba:	6031      	streq	r1, [r6, #0]
 80074bc:	5162      	str	r2, [r4, r5]
 80074be:	604b      	str	r3, [r1, #4]
 80074c0:	4638      	mov	r0, r7
 80074c2:	f104 060b 	add.w	r6, r4, #11
 80074c6:	f000 fd83 	bl	8007fd0 <__malloc_unlock>
 80074ca:	f026 0607 	bic.w	r6, r6, #7
 80074ce:	1d23      	adds	r3, r4, #4
 80074d0:	1af2      	subs	r2, r6, r3
 80074d2:	d0b6      	beq.n	8007442 <_malloc_r+0x22>
 80074d4:	1b9b      	subs	r3, r3, r6
 80074d6:	50a3      	str	r3, [r4, r2]
 80074d8:	e7b3      	b.n	8007442 <_malloc_r+0x22>
 80074da:	6862      	ldr	r2, [r4, #4]
 80074dc:	42a3      	cmp	r3, r4
 80074de:	bf0c      	ite	eq
 80074e0:	6032      	streq	r2, [r6, #0]
 80074e2:	605a      	strne	r2, [r3, #4]
 80074e4:	e7ec      	b.n	80074c0 <_malloc_r+0xa0>
 80074e6:	4623      	mov	r3, r4
 80074e8:	6864      	ldr	r4, [r4, #4]
 80074ea:	e7b2      	b.n	8007452 <_malloc_r+0x32>
 80074ec:	4634      	mov	r4, r6
 80074ee:	6876      	ldr	r6, [r6, #4]
 80074f0:	e7b9      	b.n	8007466 <_malloc_r+0x46>
 80074f2:	230c      	movs	r3, #12
 80074f4:	603b      	str	r3, [r7, #0]
 80074f6:	4638      	mov	r0, r7
 80074f8:	f000 fd6a 	bl	8007fd0 <__malloc_unlock>
 80074fc:	e7a1      	b.n	8007442 <_malloc_r+0x22>
 80074fe:	6025      	str	r5, [r4, #0]
 8007500:	e7de      	b.n	80074c0 <_malloc_r+0xa0>
 8007502:	bf00      	nop
 8007504:	20013b34 	.word	0x20013b34

08007508 <__sfputc_r>:
 8007508:	6893      	ldr	r3, [r2, #8]
 800750a:	3b01      	subs	r3, #1
 800750c:	2b00      	cmp	r3, #0
 800750e:	b410      	push	{r4}
 8007510:	6093      	str	r3, [r2, #8]
 8007512:	da08      	bge.n	8007526 <__sfputc_r+0x1e>
 8007514:	6994      	ldr	r4, [r2, #24]
 8007516:	42a3      	cmp	r3, r4
 8007518:	db01      	blt.n	800751e <__sfputc_r+0x16>
 800751a:	290a      	cmp	r1, #10
 800751c:	d103      	bne.n	8007526 <__sfputc_r+0x1e>
 800751e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007522:	f000 bb33 	b.w	8007b8c <__swbuf_r>
 8007526:	6813      	ldr	r3, [r2, #0]
 8007528:	1c58      	adds	r0, r3, #1
 800752a:	6010      	str	r0, [r2, #0]
 800752c:	7019      	strb	r1, [r3, #0]
 800752e:	4608      	mov	r0, r1
 8007530:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007534:	4770      	bx	lr

08007536 <__sfputs_r>:
 8007536:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007538:	4606      	mov	r6, r0
 800753a:	460f      	mov	r7, r1
 800753c:	4614      	mov	r4, r2
 800753e:	18d5      	adds	r5, r2, r3
 8007540:	42ac      	cmp	r4, r5
 8007542:	d101      	bne.n	8007548 <__sfputs_r+0x12>
 8007544:	2000      	movs	r0, #0
 8007546:	e007      	b.n	8007558 <__sfputs_r+0x22>
 8007548:	f814 1b01 	ldrb.w	r1, [r4], #1
 800754c:	463a      	mov	r2, r7
 800754e:	4630      	mov	r0, r6
 8007550:	f7ff ffda 	bl	8007508 <__sfputc_r>
 8007554:	1c43      	adds	r3, r0, #1
 8007556:	d1f3      	bne.n	8007540 <__sfputs_r+0xa>
 8007558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800755c <_vfiprintf_r>:
 800755c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007560:	460d      	mov	r5, r1
 8007562:	b09d      	sub	sp, #116	; 0x74
 8007564:	4614      	mov	r4, r2
 8007566:	4698      	mov	r8, r3
 8007568:	4606      	mov	r6, r0
 800756a:	b118      	cbz	r0, 8007574 <_vfiprintf_r+0x18>
 800756c:	6983      	ldr	r3, [r0, #24]
 800756e:	b90b      	cbnz	r3, 8007574 <_vfiprintf_r+0x18>
 8007570:	f7ff fe96 	bl	80072a0 <__sinit>
 8007574:	4b89      	ldr	r3, [pc, #548]	; (800779c <_vfiprintf_r+0x240>)
 8007576:	429d      	cmp	r5, r3
 8007578:	d11b      	bne.n	80075b2 <_vfiprintf_r+0x56>
 800757a:	6875      	ldr	r5, [r6, #4]
 800757c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800757e:	07d9      	lsls	r1, r3, #31
 8007580:	d405      	bmi.n	800758e <_vfiprintf_r+0x32>
 8007582:	89ab      	ldrh	r3, [r5, #12]
 8007584:	059a      	lsls	r2, r3, #22
 8007586:	d402      	bmi.n	800758e <_vfiprintf_r+0x32>
 8007588:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800758a:	f7ff ff27 	bl	80073dc <__retarget_lock_acquire_recursive>
 800758e:	89ab      	ldrh	r3, [r5, #12]
 8007590:	071b      	lsls	r3, r3, #28
 8007592:	d501      	bpl.n	8007598 <_vfiprintf_r+0x3c>
 8007594:	692b      	ldr	r3, [r5, #16]
 8007596:	b9eb      	cbnz	r3, 80075d4 <_vfiprintf_r+0x78>
 8007598:	4629      	mov	r1, r5
 800759a:	4630      	mov	r0, r6
 800759c:	f000 fb5a 	bl	8007c54 <__swsetup_r>
 80075a0:	b1c0      	cbz	r0, 80075d4 <_vfiprintf_r+0x78>
 80075a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075a4:	07dc      	lsls	r4, r3, #31
 80075a6:	d50e      	bpl.n	80075c6 <_vfiprintf_r+0x6a>
 80075a8:	f04f 30ff 	mov.w	r0, #4294967295
 80075ac:	b01d      	add	sp, #116	; 0x74
 80075ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075b2:	4b7b      	ldr	r3, [pc, #492]	; (80077a0 <_vfiprintf_r+0x244>)
 80075b4:	429d      	cmp	r5, r3
 80075b6:	d101      	bne.n	80075bc <_vfiprintf_r+0x60>
 80075b8:	68b5      	ldr	r5, [r6, #8]
 80075ba:	e7df      	b.n	800757c <_vfiprintf_r+0x20>
 80075bc:	4b79      	ldr	r3, [pc, #484]	; (80077a4 <_vfiprintf_r+0x248>)
 80075be:	429d      	cmp	r5, r3
 80075c0:	bf08      	it	eq
 80075c2:	68f5      	ldreq	r5, [r6, #12]
 80075c4:	e7da      	b.n	800757c <_vfiprintf_r+0x20>
 80075c6:	89ab      	ldrh	r3, [r5, #12]
 80075c8:	0598      	lsls	r0, r3, #22
 80075ca:	d4ed      	bmi.n	80075a8 <_vfiprintf_r+0x4c>
 80075cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075ce:	f7ff ff06 	bl	80073de <__retarget_lock_release_recursive>
 80075d2:	e7e9      	b.n	80075a8 <_vfiprintf_r+0x4c>
 80075d4:	2300      	movs	r3, #0
 80075d6:	9309      	str	r3, [sp, #36]	; 0x24
 80075d8:	2320      	movs	r3, #32
 80075da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80075de:	f8cd 800c 	str.w	r8, [sp, #12]
 80075e2:	2330      	movs	r3, #48	; 0x30
 80075e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80077a8 <_vfiprintf_r+0x24c>
 80075e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80075ec:	f04f 0901 	mov.w	r9, #1
 80075f0:	4623      	mov	r3, r4
 80075f2:	469a      	mov	sl, r3
 80075f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075f8:	b10a      	cbz	r2, 80075fe <_vfiprintf_r+0xa2>
 80075fa:	2a25      	cmp	r2, #37	; 0x25
 80075fc:	d1f9      	bne.n	80075f2 <_vfiprintf_r+0x96>
 80075fe:	ebba 0b04 	subs.w	fp, sl, r4
 8007602:	d00b      	beq.n	800761c <_vfiprintf_r+0xc0>
 8007604:	465b      	mov	r3, fp
 8007606:	4622      	mov	r2, r4
 8007608:	4629      	mov	r1, r5
 800760a:	4630      	mov	r0, r6
 800760c:	f7ff ff93 	bl	8007536 <__sfputs_r>
 8007610:	3001      	adds	r0, #1
 8007612:	f000 80aa 	beq.w	800776a <_vfiprintf_r+0x20e>
 8007616:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007618:	445a      	add	r2, fp
 800761a:	9209      	str	r2, [sp, #36]	; 0x24
 800761c:	f89a 3000 	ldrb.w	r3, [sl]
 8007620:	2b00      	cmp	r3, #0
 8007622:	f000 80a2 	beq.w	800776a <_vfiprintf_r+0x20e>
 8007626:	2300      	movs	r3, #0
 8007628:	f04f 32ff 	mov.w	r2, #4294967295
 800762c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007630:	f10a 0a01 	add.w	sl, sl, #1
 8007634:	9304      	str	r3, [sp, #16]
 8007636:	9307      	str	r3, [sp, #28]
 8007638:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800763c:	931a      	str	r3, [sp, #104]	; 0x68
 800763e:	4654      	mov	r4, sl
 8007640:	2205      	movs	r2, #5
 8007642:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007646:	4858      	ldr	r0, [pc, #352]	; (80077a8 <_vfiprintf_r+0x24c>)
 8007648:	f7f8 fdd2 	bl	80001f0 <memchr>
 800764c:	9a04      	ldr	r2, [sp, #16]
 800764e:	b9d8      	cbnz	r0, 8007688 <_vfiprintf_r+0x12c>
 8007650:	06d1      	lsls	r1, r2, #27
 8007652:	bf44      	itt	mi
 8007654:	2320      	movmi	r3, #32
 8007656:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800765a:	0713      	lsls	r3, r2, #28
 800765c:	bf44      	itt	mi
 800765e:	232b      	movmi	r3, #43	; 0x2b
 8007660:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007664:	f89a 3000 	ldrb.w	r3, [sl]
 8007668:	2b2a      	cmp	r3, #42	; 0x2a
 800766a:	d015      	beq.n	8007698 <_vfiprintf_r+0x13c>
 800766c:	9a07      	ldr	r2, [sp, #28]
 800766e:	4654      	mov	r4, sl
 8007670:	2000      	movs	r0, #0
 8007672:	f04f 0c0a 	mov.w	ip, #10
 8007676:	4621      	mov	r1, r4
 8007678:	f811 3b01 	ldrb.w	r3, [r1], #1
 800767c:	3b30      	subs	r3, #48	; 0x30
 800767e:	2b09      	cmp	r3, #9
 8007680:	d94e      	bls.n	8007720 <_vfiprintf_r+0x1c4>
 8007682:	b1b0      	cbz	r0, 80076b2 <_vfiprintf_r+0x156>
 8007684:	9207      	str	r2, [sp, #28]
 8007686:	e014      	b.n	80076b2 <_vfiprintf_r+0x156>
 8007688:	eba0 0308 	sub.w	r3, r0, r8
 800768c:	fa09 f303 	lsl.w	r3, r9, r3
 8007690:	4313      	orrs	r3, r2
 8007692:	9304      	str	r3, [sp, #16]
 8007694:	46a2      	mov	sl, r4
 8007696:	e7d2      	b.n	800763e <_vfiprintf_r+0xe2>
 8007698:	9b03      	ldr	r3, [sp, #12]
 800769a:	1d19      	adds	r1, r3, #4
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	9103      	str	r1, [sp, #12]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	bfbb      	ittet	lt
 80076a4:	425b      	neglt	r3, r3
 80076a6:	f042 0202 	orrlt.w	r2, r2, #2
 80076aa:	9307      	strge	r3, [sp, #28]
 80076ac:	9307      	strlt	r3, [sp, #28]
 80076ae:	bfb8      	it	lt
 80076b0:	9204      	strlt	r2, [sp, #16]
 80076b2:	7823      	ldrb	r3, [r4, #0]
 80076b4:	2b2e      	cmp	r3, #46	; 0x2e
 80076b6:	d10c      	bne.n	80076d2 <_vfiprintf_r+0x176>
 80076b8:	7863      	ldrb	r3, [r4, #1]
 80076ba:	2b2a      	cmp	r3, #42	; 0x2a
 80076bc:	d135      	bne.n	800772a <_vfiprintf_r+0x1ce>
 80076be:	9b03      	ldr	r3, [sp, #12]
 80076c0:	1d1a      	adds	r2, r3, #4
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	9203      	str	r2, [sp, #12]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	bfb8      	it	lt
 80076ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80076ce:	3402      	adds	r4, #2
 80076d0:	9305      	str	r3, [sp, #20]
 80076d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80077b8 <_vfiprintf_r+0x25c>
 80076d6:	7821      	ldrb	r1, [r4, #0]
 80076d8:	2203      	movs	r2, #3
 80076da:	4650      	mov	r0, sl
 80076dc:	f7f8 fd88 	bl	80001f0 <memchr>
 80076e0:	b140      	cbz	r0, 80076f4 <_vfiprintf_r+0x198>
 80076e2:	2340      	movs	r3, #64	; 0x40
 80076e4:	eba0 000a 	sub.w	r0, r0, sl
 80076e8:	fa03 f000 	lsl.w	r0, r3, r0
 80076ec:	9b04      	ldr	r3, [sp, #16]
 80076ee:	4303      	orrs	r3, r0
 80076f0:	3401      	adds	r4, #1
 80076f2:	9304      	str	r3, [sp, #16]
 80076f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076f8:	482c      	ldr	r0, [pc, #176]	; (80077ac <_vfiprintf_r+0x250>)
 80076fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80076fe:	2206      	movs	r2, #6
 8007700:	f7f8 fd76 	bl	80001f0 <memchr>
 8007704:	2800      	cmp	r0, #0
 8007706:	d03f      	beq.n	8007788 <_vfiprintf_r+0x22c>
 8007708:	4b29      	ldr	r3, [pc, #164]	; (80077b0 <_vfiprintf_r+0x254>)
 800770a:	bb1b      	cbnz	r3, 8007754 <_vfiprintf_r+0x1f8>
 800770c:	9b03      	ldr	r3, [sp, #12]
 800770e:	3307      	adds	r3, #7
 8007710:	f023 0307 	bic.w	r3, r3, #7
 8007714:	3308      	adds	r3, #8
 8007716:	9303      	str	r3, [sp, #12]
 8007718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800771a:	443b      	add	r3, r7
 800771c:	9309      	str	r3, [sp, #36]	; 0x24
 800771e:	e767      	b.n	80075f0 <_vfiprintf_r+0x94>
 8007720:	fb0c 3202 	mla	r2, ip, r2, r3
 8007724:	460c      	mov	r4, r1
 8007726:	2001      	movs	r0, #1
 8007728:	e7a5      	b.n	8007676 <_vfiprintf_r+0x11a>
 800772a:	2300      	movs	r3, #0
 800772c:	3401      	adds	r4, #1
 800772e:	9305      	str	r3, [sp, #20]
 8007730:	4619      	mov	r1, r3
 8007732:	f04f 0c0a 	mov.w	ip, #10
 8007736:	4620      	mov	r0, r4
 8007738:	f810 2b01 	ldrb.w	r2, [r0], #1
 800773c:	3a30      	subs	r2, #48	; 0x30
 800773e:	2a09      	cmp	r2, #9
 8007740:	d903      	bls.n	800774a <_vfiprintf_r+0x1ee>
 8007742:	2b00      	cmp	r3, #0
 8007744:	d0c5      	beq.n	80076d2 <_vfiprintf_r+0x176>
 8007746:	9105      	str	r1, [sp, #20]
 8007748:	e7c3      	b.n	80076d2 <_vfiprintf_r+0x176>
 800774a:	fb0c 2101 	mla	r1, ip, r1, r2
 800774e:	4604      	mov	r4, r0
 8007750:	2301      	movs	r3, #1
 8007752:	e7f0      	b.n	8007736 <_vfiprintf_r+0x1da>
 8007754:	ab03      	add	r3, sp, #12
 8007756:	9300      	str	r3, [sp, #0]
 8007758:	462a      	mov	r2, r5
 800775a:	4b16      	ldr	r3, [pc, #88]	; (80077b4 <_vfiprintf_r+0x258>)
 800775c:	a904      	add	r1, sp, #16
 800775e:	4630      	mov	r0, r6
 8007760:	f3af 8000 	nop.w
 8007764:	4607      	mov	r7, r0
 8007766:	1c78      	adds	r0, r7, #1
 8007768:	d1d6      	bne.n	8007718 <_vfiprintf_r+0x1bc>
 800776a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800776c:	07d9      	lsls	r1, r3, #31
 800776e:	d405      	bmi.n	800777c <_vfiprintf_r+0x220>
 8007770:	89ab      	ldrh	r3, [r5, #12]
 8007772:	059a      	lsls	r2, r3, #22
 8007774:	d402      	bmi.n	800777c <_vfiprintf_r+0x220>
 8007776:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007778:	f7ff fe31 	bl	80073de <__retarget_lock_release_recursive>
 800777c:	89ab      	ldrh	r3, [r5, #12]
 800777e:	065b      	lsls	r3, r3, #25
 8007780:	f53f af12 	bmi.w	80075a8 <_vfiprintf_r+0x4c>
 8007784:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007786:	e711      	b.n	80075ac <_vfiprintf_r+0x50>
 8007788:	ab03      	add	r3, sp, #12
 800778a:	9300      	str	r3, [sp, #0]
 800778c:	462a      	mov	r2, r5
 800778e:	4b09      	ldr	r3, [pc, #36]	; (80077b4 <_vfiprintf_r+0x258>)
 8007790:	a904      	add	r1, sp, #16
 8007792:	4630      	mov	r0, r6
 8007794:	f000 f880 	bl	8007898 <_printf_i>
 8007798:	e7e4      	b.n	8007764 <_vfiprintf_r+0x208>
 800779a:	bf00      	nop
 800779c:	0800d114 	.word	0x0800d114
 80077a0:	0800d134 	.word	0x0800d134
 80077a4:	0800d0f4 	.word	0x0800d0f4
 80077a8:	0800d154 	.word	0x0800d154
 80077ac:	0800d15e 	.word	0x0800d15e
 80077b0:	00000000 	.word	0x00000000
 80077b4:	08007537 	.word	0x08007537
 80077b8:	0800d15a 	.word	0x0800d15a

080077bc <_printf_common>:
 80077bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077c0:	4616      	mov	r6, r2
 80077c2:	4699      	mov	r9, r3
 80077c4:	688a      	ldr	r2, [r1, #8]
 80077c6:	690b      	ldr	r3, [r1, #16]
 80077c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80077cc:	4293      	cmp	r3, r2
 80077ce:	bfb8      	it	lt
 80077d0:	4613      	movlt	r3, r2
 80077d2:	6033      	str	r3, [r6, #0]
 80077d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80077d8:	4607      	mov	r7, r0
 80077da:	460c      	mov	r4, r1
 80077dc:	b10a      	cbz	r2, 80077e2 <_printf_common+0x26>
 80077de:	3301      	adds	r3, #1
 80077e0:	6033      	str	r3, [r6, #0]
 80077e2:	6823      	ldr	r3, [r4, #0]
 80077e4:	0699      	lsls	r1, r3, #26
 80077e6:	bf42      	ittt	mi
 80077e8:	6833      	ldrmi	r3, [r6, #0]
 80077ea:	3302      	addmi	r3, #2
 80077ec:	6033      	strmi	r3, [r6, #0]
 80077ee:	6825      	ldr	r5, [r4, #0]
 80077f0:	f015 0506 	ands.w	r5, r5, #6
 80077f4:	d106      	bne.n	8007804 <_printf_common+0x48>
 80077f6:	f104 0a19 	add.w	sl, r4, #25
 80077fa:	68e3      	ldr	r3, [r4, #12]
 80077fc:	6832      	ldr	r2, [r6, #0]
 80077fe:	1a9b      	subs	r3, r3, r2
 8007800:	42ab      	cmp	r3, r5
 8007802:	dc26      	bgt.n	8007852 <_printf_common+0x96>
 8007804:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007808:	1e13      	subs	r3, r2, #0
 800780a:	6822      	ldr	r2, [r4, #0]
 800780c:	bf18      	it	ne
 800780e:	2301      	movne	r3, #1
 8007810:	0692      	lsls	r2, r2, #26
 8007812:	d42b      	bmi.n	800786c <_printf_common+0xb0>
 8007814:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007818:	4649      	mov	r1, r9
 800781a:	4638      	mov	r0, r7
 800781c:	47c0      	blx	r8
 800781e:	3001      	adds	r0, #1
 8007820:	d01e      	beq.n	8007860 <_printf_common+0xa4>
 8007822:	6823      	ldr	r3, [r4, #0]
 8007824:	68e5      	ldr	r5, [r4, #12]
 8007826:	6832      	ldr	r2, [r6, #0]
 8007828:	f003 0306 	and.w	r3, r3, #6
 800782c:	2b04      	cmp	r3, #4
 800782e:	bf08      	it	eq
 8007830:	1aad      	subeq	r5, r5, r2
 8007832:	68a3      	ldr	r3, [r4, #8]
 8007834:	6922      	ldr	r2, [r4, #16]
 8007836:	bf0c      	ite	eq
 8007838:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800783c:	2500      	movne	r5, #0
 800783e:	4293      	cmp	r3, r2
 8007840:	bfc4      	itt	gt
 8007842:	1a9b      	subgt	r3, r3, r2
 8007844:	18ed      	addgt	r5, r5, r3
 8007846:	2600      	movs	r6, #0
 8007848:	341a      	adds	r4, #26
 800784a:	42b5      	cmp	r5, r6
 800784c:	d11a      	bne.n	8007884 <_printf_common+0xc8>
 800784e:	2000      	movs	r0, #0
 8007850:	e008      	b.n	8007864 <_printf_common+0xa8>
 8007852:	2301      	movs	r3, #1
 8007854:	4652      	mov	r2, sl
 8007856:	4649      	mov	r1, r9
 8007858:	4638      	mov	r0, r7
 800785a:	47c0      	blx	r8
 800785c:	3001      	adds	r0, #1
 800785e:	d103      	bne.n	8007868 <_printf_common+0xac>
 8007860:	f04f 30ff 	mov.w	r0, #4294967295
 8007864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007868:	3501      	adds	r5, #1
 800786a:	e7c6      	b.n	80077fa <_printf_common+0x3e>
 800786c:	18e1      	adds	r1, r4, r3
 800786e:	1c5a      	adds	r2, r3, #1
 8007870:	2030      	movs	r0, #48	; 0x30
 8007872:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007876:	4422      	add	r2, r4
 8007878:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800787c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007880:	3302      	adds	r3, #2
 8007882:	e7c7      	b.n	8007814 <_printf_common+0x58>
 8007884:	2301      	movs	r3, #1
 8007886:	4622      	mov	r2, r4
 8007888:	4649      	mov	r1, r9
 800788a:	4638      	mov	r0, r7
 800788c:	47c0      	blx	r8
 800788e:	3001      	adds	r0, #1
 8007890:	d0e6      	beq.n	8007860 <_printf_common+0xa4>
 8007892:	3601      	adds	r6, #1
 8007894:	e7d9      	b.n	800784a <_printf_common+0x8e>
	...

08007898 <_printf_i>:
 8007898:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800789c:	7e0f      	ldrb	r7, [r1, #24]
 800789e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80078a0:	2f78      	cmp	r7, #120	; 0x78
 80078a2:	4691      	mov	r9, r2
 80078a4:	4680      	mov	r8, r0
 80078a6:	460c      	mov	r4, r1
 80078a8:	469a      	mov	sl, r3
 80078aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80078ae:	d807      	bhi.n	80078c0 <_printf_i+0x28>
 80078b0:	2f62      	cmp	r7, #98	; 0x62
 80078b2:	d80a      	bhi.n	80078ca <_printf_i+0x32>
 80078b4:	2f00      	cmp	r7, #0
 80078b6:	f000 80d8 	beq.w	8007a6a <_printf_i+0x1d2>
 80078ba:	2f58      	cmp	r7, #88	; 0x58
 80078bc:	f000 80a3 	beq.w	8007a06 <_printf_i+0x16e>
 80078c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80078c8:	e03a      	b.n	8007940 <_printf_i+0xa8>
 80078ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80078ce:	2b15      	cmp	r3, #21
 80078d0:	d8f6      	bhi.n	80078c0 <_printf_i+0x28>
 80078d2:	a101      	add	r1, pc, #4	; (adr r1, 80078d8 <_printf_i+0x40>)
 80078d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80078d8:	08007931 	.word	0x08007931
 80078dc:	08007945 	.word	0x08007945
 80078e0:	080078c1 	.word	0x080078c1
 80078e4:	080078c1 	.word	0x080078c1
 80078e8:	080078c1 	.word	0x080078c1
 80078ec:	080078c1 	.word	0x080078c1
 80078f0:	08007945 	.word	0x08007945
 80078f4:	080078c1 	.word	0x080078c1
 80078f8:	080078c1 	.word	0x080078c1
 80078fc:	080078c1 	.word	0x080078c1
 8007900:	080078c1 	.word	0x080078c1
 8007904:	08007a51 	.word	0x08007a51
 8007908:	08007975 	.word	0x08007975
 800790c:	08007a33 	.word	0x08007a33
 8007910:	080078c1 	.word	0x080078c1
 8007914:	080078c1 	.word	0x080078c1
 8007918:	08007a73 	.word	0x08007a73
 800791c:	080078c1 	.word	0x080078c1
 8007920:	08007975 	.word	0x08007975
 8007924:	080078c1 	.word	0x080078c1
 8007928:	080078c1 	.word	0x080078c1
 800792c:	08007a3b 	.word	0x08007a3b
 8007930:	682b      	ldr	r3, [r5, #0]
 8007932:	1d1a      	adds	r2, r3, #4
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	602a      	str	r2, [r5, #0]
 8007938:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800793c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007940:	2301      	movs	r3, #1
 8007942:	e0a3      	b.n	8007a8c <_printf_i+0x1f4>
 8007944:	6820      	ldr	r0, [r4, #0]
 8007946:	6829      	ldr	r1, [r5, #0]
 8007948:	0606      	lsls	r6, r0, #24
 800794a:	f101 0304 	add.w	r3, r1, #4
 800794e:	d50a      	bpl.n	8007966 <_printf_i+0xce>
 8007950:	680e      	ldr	r6, [r1, #0]
 8007952:	602b      	str	r3, [r5, #0]
 8007954:	2e00      	cmp	r6, #0
 8007956:	da03      	bge.n	8007960 <_printf_i+0xc8>
 8007958:	232d      	movs	r3, #45	; 0x2d
 800795a:	4276      	negs	r6, r6
 800795c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007960:	485e      	ldr	r0, [pc, #376]	; (8007adc <_printf_i+0x244>)
 8007962:	230a      	movs	r3, #10
 8007964:	e019      	b.n	800799a <_printf_i+0x102>
 8007966:	680e      	ldr	r6, [r1, #0]
 8007968:	602b      	str	r3, [r5, #0]
 800796a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800796e:	bf18      	it	ne
 8007970:	b236      	sxthne	r6, r6
 8007972:	e7ef      	b.n	8007954 <_printf_i+0xbc>
 8007974:	682b      	ldr	r3, [r5, #0]
 8007976:	6820      	ldr	r0, [r4, #0]
 8007978:	1d19      	adds	r1, r3, #4
 800797a:	6029      	str	r1, [r5, #0]
 800797c:	0601      	lsls	r1, r0, #24
 800797e:	d501      	bpl.n	8007984 <_printf_i+0xec>
 8007980:	681e      	ldr	r6, [r3, #0]
 8007982:	e002      	b.n	800798a <_printf_i+0xf2>
 8007984:	0646      	lsls	r6, r0, #25
 8007986:	d5fb      	bpl.n	8007980 <_printf_i+0xe8>
 8007988:	881e      	ldrh	r6, [r3, #0]
 800798a:	4854      	ldr	r0, [pc, #336]	; (8007adc <_printf_i+0x244>)
 800798c:	2f6f      	cmp	r7, #111	; 0x6f
 800798e:	bf0c      	ite	eq
 8007990:	2308      	moveq	r3, #8
 8007992:	230a      	movne	r3, #10
 8007994:	2100      	movs	r1, #0
 8007996:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800799a:	6865      	ldr	r5, [r4, #4]
 800799c:	60a5      	str	r5, [r4, #8]
 800799e:	2d00      	cmp	r5, #0
 80079a0:	bfa2      	ittt	ge
 80079a2:	6821      	ldrge	r1, [r4, #0]
 80079a4:	f021 0104 	bicge.w	r1, r1, #4
 80079a8:	6021      	strge	r1, [r4, #0]
 80079aa:	b90e      	cbnz	r6, 80079b0 <_printf_i+0x118>
 80079ac:	2d00      	cmp	r5, #0
 80079ae:	d04d      	beq.n	8007a4c <_printf_i+0x1b4>
 80079b0:	4615      	mov	r5, r2
 80079b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80079b6:	fb03 6711 	mls	r7, r3, r1, r6
 80079ba:	5dc7      	ldrb	r7, [r0, r7]
 80079bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80079c0:	4637      	mov	r7, r6
 80079c2:	42bb      	cmp	r3, r7
 80079c4:	460e      	mov	r6, r1
 80079c6:	d9f4      	bls.n	80079b2 <_printf_i+0x11a>
 80079c8:	2b08      	cmp	r3, #8
 80079ca:	d10b      	bne.n	80079e4 <_printf_i+0x14c>
 80079cc:	6823      	ldr	r3, [r4, #0]
 80079ce:	07de      	lsls	r6, r3, #31
 80079d0:	d508      	bpl.n	80079e4 <_printf_i+0x14c>
 80079d2:	6923      	ldr	r3, [r4, #16]
 80079d4:	6861      	ldr	r1, [r4, #4]
 80079d6:	4299      	cmp	r1, r3
 80079d8:	bfde      	ittt	le
 80079da:	2330      	movle	r3, #48	; 0x30
 80079dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80079e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80079e4:	1b52      	subs	r2, r2, r5
 80079e6:	6122      	str	r2, [r4, #16]
 80079e8:	f8cd a000 	str.w	sl, [sp]
 80079ec:	464b      	mov	r3, r9
 80079ee:	aa03      	add	r2, sp, #12
 80079f0:	4621      	mov	r1, r4
 80079f2:	4640      	mov	r0, r8
 80079f4:	f7ff fee2 	bl	80077bc <_printf_common>
 80079f8:	3001      	adds	r0, #1
 80079fa:	d14c      	bne.n	8007a96 <_printf_i+0x1fe>
 80079fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007a00:	b004      	add	sp, #16
 8007a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a06:	4835      	ldr	r0, [pc, #212]	; (8007adc <_printf_i+0x244>)
 8007a08:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007a0c:	6829      	ldr	r1, [r5, #0]
 8007a0e:	6823      	ldr	r3, [r4, #0]
 8007a10:	f851 6b04 	ldr.w	r6, [r1], #4
 8007a14:	6029      	str	r1, [r5, #0]
 8007a16:	061d      	lsls	r5, r3, #24
 8007a18:	d514      	bpl.n	8007a44 <_printf_i+0x1ac>
 8007a1a:	07df      	lsls	r7, r3, #31
 8007a1c:	bf44      	itt	mi
 8007a1e:	f043 0320 	orrmi.w	r3, r3, #32
 8007a22:	6023      	strmi	r3, [r4, #0]
 8007a24:	b91e      	cbnz	r6, 8007a2e <_printf_i+0x196>
 8007a26:	6823      	ldr	r3, [r4, #0]
 8007a28:	f023 0320 	bic.w	r3, r3, #32
 8007a2c:	6023      	str	r3, [r4, #0]
 8007a2e:	2310      	movs	r3, #16
 8007a30:	e7b0      	b.n	8007994 <_printf_i+0xfc>
 8007a32:	6823      	ldr	r3, [r4, #0]
 8007a34:	f043 0320 	orr.w	r3, r3, #32
 8007a38:	6023      	str	r3, [r4, #0]
 8007a3a:	2378      	movs	r3, #120	; 0x78
 8007a3c:	4828      	ldr	r0, [pc, #160]	; (8007ae0 <_printf_i+0x248>)
 8007a3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007a42:	e7e3      	b.n	8007a0c <_printf_i+0x174>
 8007a44:	0659      	lsls	r1, r3, #25
 8007a46:	bf48      	it	mi
 8007a48:	b2b6      	uxthmi	r6, r6
 8007a4a:	e7e6      	b.n	8007a1a <_printf_i+0x182>
 8007a4c:	4615      	mov	r5, r2
 8007a4e:	e7bb      	b.n	80079c8 <_printf_i+0x130>
 8007a50:	682b      	ldr	r3, [r5, #0]
 8007a52:	6826      	ldr	r6, [r4, #0]
 8007a54:	6961      	ldr	r1, [r4, #20]
 8007a56:	1d18      	adds	r0, r3, #4
 8007a58:	6028      	str	r0, [r5, #0]
 8007a5a:	0635      	lsls	r5, r6, #24
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	d501      	bpl.n	8007a64 <_printf_i+0x1cc>
 8007a60:	6019      	str	r1, [r3, #0]
 8007a62:	e002      	b.n	8007a6a <_printf_i+0x1d2>
 8007a64:	0670      	lsls	r0, r6, #25
 8007a66:	d5fb      	bpl.n	8007a60 <_printf_i+0x1c8>
 8007a68:	8019      	strh	r1, [r3, #0]
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	6123      	str	r3, [r4, #16]
 8007a6e:	4615      	mov	r5, r2
 8007a70:	e7ba      	b.n	80079e8 <_printf_i+0x150>
 8007a72:	682b      	ldr	r3, [r5, #0]
 8007a74:	1d1a      	adds	r2, r3, #4
 8007a76:	602a      	str	r2, [r5, #0]
 8007a78:	681d      	ldr	r5, [r3, #0]
 8007a7a:	6862      	ldr	r2, [r4, #4]
 8007a7c:	2100      	movs	r1, #0
 8007a7e:	4628      	mov	r0, r5
 8007a80:	f7f8 fbb6 	bl	80001f0 <memchr>
 8007a84:	b108      	cbz	r0, 8007a8a <_printf_i+0x1f2>
 8007a86:	1b40      	subs	r0, r0, r5
 8007a88:	6060      	str	r0, [r4, #4]
 8007a8a:	6863      	ldr	r3, [r4, #4]
 8007a8c:	6123      	str	r3, [r4, #16]
 8007a8e:	2300      	movs	r3, #0
 8007a90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a94:	e7a8      	b.n	80079e8 <_printf_i+0x150>
 8007a96:	6923      	ldr	r3, [r4, #16]
 8007a98:	462a      	mov	r2, r5
 8007a9a:	4649      	mov	r1, r9
 8007a9c:	4640      	mov	r0, r8
 8007a9e:	47d0      	blx	sl
 8007aa0:	3001      	adds	r0, #1
 8007aa2:	d0ab      	beq.n	80079fc <_printf_i+0x164>
 8007aa4:	6823      	ldr	r3, [r4, #0]
 8007aa6:	079b      	lsls	r3, r3, #30
 8007aa8:	d413      	bmi.n	8007ad2 <_printf_i+0x23a>
 8007aaa:	68e0      	ldr	r0, [r4, #12]
 8007aac:	9b03      	ldr	r3, [sp, #12]
 8007aae:	4298      	cmp	r0, r3
 8007ab0:	bfb8      	it	lt
 8007ab2:	4618      	movlt	r0, r3
 8007ab4:	e7a4      	b.n	8007a00 <_printf_i+0x168>
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	4632      	mov	r2, r6
 8007aba:	4649      	mov	r1, r9
 8007abc:	4640      	mov	r0, r8
 8007abe:	47d0      	blx	sl
 8007ac0:	3001      	adds	r0, #1
 8007ac2:	d09b      	beq.n	80079fc <_printf_i+0x164>
 8007ac4:	3501      	adds	r5, #1
 8007ac6:	68e3      	ldr	r3, [r4, #12]
 8007ac8:	9903      	ldr	r1, [sp, #12]
 8007aca:	1a5b      	subs	r3, r3, r1
 8007acc:	42ab      	cmp	r3, r5
 8007ace:	dcf2      	bgt.n	8007ab6 <_printf_i+0x21e>
 8007ad0:	e7eb      	b.n	8007aaa <_printf_i+0x212>
 8007ad2:	2500      	movs	r5, #0
 8007ad4:	f104 0619 	add.w	r6, r4, #25
 8007ad8:	e7f5      	b.n	8007ac6 <_printf_i+0x22e>
 8007ada:	bf00      	nop
 8007adc:	0800d165 	.word	0x0800d165
 8007ae0:	0800d176 	.word	0x0800d176

08007ae4 <_sbrk_r>:
 8007ae4:	b538      	push	{r3, r4, r5, lr}
 8007ae6:	4d06      	ldr	r5, [pc, #24]	; (8007b00 <_sbrk_r+0x1c>)
 8007ae8:	2300      	movs	r3, #0
 8007aea:	4604      	mov	r4, r0
 8007aec:	4608      	mov	r0, r1
 8007aee:	602b      	str	r3, [r5, #0]
 8007af0:	f7f9 fe38 	bl	8001764 <_sbrk>
 8007af4:	1c43      	adds	r3, r0, #1
 8007af6:	d102      	bne.n	8007afe <_sbrk_r+0x1a>
 8007af8:	682b      	ldr	r3, [r5, #0]
 8007afa:	b103      	cbz	r3, 8007afe <_sbrk_r+0x1a>
 8007afc:	6023      	str	r3, [r4, #0]
 8007afe:	bd38      	pop	{r3, r4, r5, pc}
 8007b00:	20013b3c 	.word	0x20013b3c

08007b04 <__sread>:
 8007b04:	b510      	push	{r4, lr}
 8007b06:	460c      	mov	r4, r1
 8007b08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b0c:	f000 fab2 	bl	8008074 <_read_r>
 8007b10:	2800      	cmp	r0, #0
 8007b12:	bfab      	itete	ge
 8007b14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007b16:	89a3      	ldrhlt	r3, [r4, #12]
 8007b18:	181b      	addge	r3, r3, r0
 8007b1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007b1e:	bfac      	ite	ge
 8007b20:	6563      	strge	r3, [r4, #84]	; 0x54
 8007b22:	81a3      	strhlt	r3, [r4, #12]
 8007b24:	bd10      	pop	{r4, pc}

08007b26 <__swrite>:
 8007b26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b2a:	461f      	mov	r7, r3
 8007b2c:	898b      	ldrh	r3, [r1, #12]
 8007b2e:	05db      	lsls	r3, r3, #23
 8007b30:	4605      	mov	r5, r0
 8007b32:	460c      	mov	r4, r1
 8007b34:	4616      	mov	r6, r2
 8007b36:	d505      	bpl.n	8007b44 <__swrite+0x1e>
 8007b38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b3c:	2302      	movs	r3, #2
 8007b3e:	2200      	movs	r2, #0
 8007b40:	f000 f9c8 	bl	8007ed4 <_lseek_r>
 8007b44:	89a3      	ldrh	r3, [r4, #12]
 8007b46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b4e:	81a3      	strh	r3, [r4, #12]
 8007b50:	4632      	mov	r2, r6
 8007b52:	463b      	mov	r3, r7
 8007b54:	4628      	mov	r0, r5
 8007b56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b5a:	f000 b869 	b.w	8007c30 <_write_r>

08007b5e <__sseek>:
 8007b5e:	b510      	push	{r4, lr}
 8007b60:	460c      	mov	r4, r1
 8007b62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b66:	f000 f9b5 	bl	8007ed4 <_lseek_r>
 8007b6a:	1c43      	adds	r3, r0, #1
 8007b6c:	89a3      	ldrh	r3, [r4, #12]
 8007b6e:	bf15      	itete	ne
 8007b70:	6560      	strne	r0, [r4, #84]	; 0x54
 8007b72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007b76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007b7a:	81a3      	strheq	r3, [r4, #12]
 8007b7c:	bf18      	it	ne
 8007b7e:	81a3      	strhne	r3, [r4, #12]
 8007b80:	bd10      	pop	{r4, pc}

08007b82 <__sclose>:
 8007b82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b86:	f000 b8d3 	b.w	8007d30 <_close_r>
	...

08007b8c <__swbuf_r>:
 8007b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b8e:	460e      	mov	r6, r1
 8007b90:	4614      	mov	r4, r2
 8007b92:	4605      	mov	r5, r0
 8007b94:	b118      	cbz	r0, 8007b9e <__swbuf_r+0x12>
 8007b96:	6983      	ldr	r3, [r0, #24]
 8007b98:	b90b      	cbnz	r3, 8007b9e <__swbuf_r+0x12>
 8007b9a:	f7ff fb81 	bl	80072a0 <__sinit>
 8007b9e:	4b21      	ldr	r3, [pc, #132]	; (8007c24 <__swbuf_r+0x98>)
 8007ba0:	429c      	cmp	r4, r3
 8007ba2:	d12b      	bne.n	8007bfc <__swbuf_r+0x70>
 8007ba4:	686c      	ldr	r4, [r5, #4]
 8007ba6:	69a3      	ldr	r3, [r4, #24]
 8007ba8:	60a3      	str	r3, [r4, #8]
 8007baa:	89a3      	ldrh	r3, [r4, #12]
 8007bac:	071a      	lsls	r2, r3, #28
 8007bae:	d52f      	bpl.n	8007c10 <__swbuf_r+0x84>
 8007bb0:	6923      	ldr	r3, [r4, #16]
 8007bb2:	b36b      	cbz	r3, 8007c10 <__swbuf_r+0x84>
 8007bb4:	6923      	ldr	r3, [r4, #16]
 8007bb6:	6820      	ldr	r0, [r4, #0]
 8007bb8:	1ac0      	subs	r0, r0, r3
 8007bba:	6963      	ldr	r3, [r4, #20]
 8007bbc:	b2f6      	uxtb	r6, r6
 8007bbe:	4283      	cmp	r3, r0
 8007bc0:	4637      	mov	r7, r6
 8007bc2:	dc04      	bgt.n	8007bce <__swbuf_r+0x42>
 8007bc4:	4621      	mov	r1, r4
 8007bc6:	4628      	mov	r0, r5
 8007bc8:	f000 f948 	bl	8007e5c <_fflush_r>
 8007bcc:	bb30      	cbnz	r0, 8007c1c <__swbuf_r+0x90>
 8007bce:	68a3      	ldr	r3, [r4, #8]
 8007bd0:	3b01      	subs	r3, #1
 8007bd2:	60a3      	str	r3, [r4, #8]
 8007bd4:	6823      	ldr	r3, [r4, #0]
 8007bd6:	1c5a      	adds	r2, r3, #1
 8007bd8:	6022      	str	r2, [r4, #0]
 8007bda:	701e      	strb	r6, [r3, #0]
 8007bdc:	6963      	ldr	r3, [r4, #20]
 8007bde:	3001      	adds	r0, #1
 8007be0:	4283      	cmp	r3, r0
 8007be2:	d004      	beq.n	8007bee <__swbuf_r+0x62>
 8007be4:	89a3      	ldrh	r3, [r4, #12]
 8007be6:	07db      	lsls	r3, r3, #31
 8007be8:	d506      	bpl.n	8007bf8 <__swbuf_r+0x6c>
 8007bea:	2e0a      	cmp	r6, #10
 8007bec:	d104      	bne.n	8007bf8 <__swbuf_r+0x6c>
 8007bee:	4621      	mov	r1, r4
 8007bf0:	4628      	mov	r0, r5
 8007bf2:	f000 f933 	bl	8007e5c <_fflush_r>
 8007bf6:	b988      	cbnz	r0, 8007c1c <__swbuf_r+0x90>
 8007bf8:	4638      	mov	r0, r7
 8007bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bfc:	4b0a      	ldr	r3, [pc, #40]	; (8007c28 <__swbuf_r+0x9c>)
 8007bfe:	429c      	cmp	r4, r3
 8007c00:	d101      	bne.n	8007c06 <__swbuf_r+0x7a>
 8007c02:	68ac      	ldr	r4, [r5, #8]
 8007c04:	e7cf      	b.n	8007ba6 <__swbuf_r+0x1a>
 8007c06:	4b09      	ldr	r3, [pc, #36]	; (8007c2c <__swbuf_r+0xa0>)
 8007c08:	429c      	cmp	r4, r3
 8007c0a:	bf08      	it	eq
 8007c0c:	68ec      	ldreq	r4, [r5, #12]
 8007c0e:	e7ca      	b.n	8007ba6 <__swbuf_r+0x1a>
 8007c10:	4621      	mov	r1, r4
 8007c12:	4628      	mov	r0, r5
 8007c14:	f000 f81e 	bl	8007c54 <__swsetup_r>
 8007c18:	2800      	cmp	r0, #0
 8007c1a:	d0cb      	beq.n	8007bb4 <__swbuf_r+0x28>
 8007c1c:	f04f 37ff 	mov.w	r7, #4294967295
 8007c20:	e7ea      	b.n	8007bf8 <__swbuf_r+0x6c>
 8007c22:	bf00      	nop
 8007c24:	0800d114 	.word	0x0800d114
 8007c28:	0800d134 	.word	0x0800d134
 8007c2c:	0800d0f4 	.word	0x0800d0f4

08007c30 <_write_r>:
 8007c30:	b538      	push	{r3, r4, r5, lr}
 8007c32:	4d07      	ldr	r5, [pc, #28]	; (8007c50 <_write_r+0x20>)
 8007c34:	4604      	mov	r4, r0
 8007c36:	4608      	mov	r0, r1
 8007c38:	4611      	mov	r1, r2
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	602a      	str	r2, [r5, #0]
 8007c3e:	461a      	mov	r2, r3
 8007c40:	f7f9 fd3f 	bl	80016c2 <_write>
 8007c44:	1c43      	adds	r3, r0, #1
 8007c46:	d102      	bne.n	8007c4e <_write_r+0x1e>
 8007c48:	682b      	ldr	r3, [r5, #0]
 8007c4a:	b103      	cbz	r3, 8007c4e <_write_r+0x1e>
 8007c4c:	6023      	str	r3, [r4, #0]
 8007c4e:	bd38      	pop	{r3, r4, r5, pc}
 8007c50:	20013b3c 	.word	0x20013b3c

08007c54 <__swsetup_r>:
 8007c54:	4b32      	ldr	r3, [pc, #200]	; (8007d20 <__swsetup_r+0xcc>)
 8007c56:	b570      	push	{r4, r5, r6, lr}
 8007c58:	681d      	ldr	r5, [r3, #0]
 8007c5a:	4606      	mov	r6, r0
 8007c5c:	460c      	mov	r4, r1
 8007c5e:	b125      	cbz	r5, 8007c6a <__swsetup_r+0x16>
 8007c60:	69ab      	ldr	r3, [r5, #24]
 8007c62:	b913      	cbnz	r3, 8007c6a <__swsetup_r+0x16>
 8007c64:	4628      	mov	r0, r5
 8007c66:	f7ff fb1b 	bl	80072a0 <__sinit>
 8007c6a:	4b2e      	ldr	r3, [pc, #184]	; (8007d24 <__swsetup_r+0xd0>)
 8007c6c:	429c      	cmp	r4, r3
 8007c6e:	d10f      	bne.n	8007c90 <__swsetup_r+0x3c>
 8007c70:	686c      	ldr	r4, [r5, #4]
 8007c72:	89a3      	ldrh	r3, [r4, #12]
 8007c74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c78:	0719      	lsls	r1, r3, #28
 8007c7a:	d42c      	bmi.n	8007cd6 <__swsetup_r+0x82>
 8007c7c:	06dd      	lsls	r5, r3, #27
 8007c7e:	d411      	bmi.n	8007ca4 <__swsetup_r+0x50>
 8007c80:	2309      	movs	r3, #9
 8007c82:	6033      	str	r3, [r6, #0]
 8007c84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007c88:	81a3      	strh	r3, [r4, #12]
 8007c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c8e:	e03e      	b.n	8007d0e <__swsetup_r+0xba>
 8007c90:	4b25      	ldr	r3, [pc, #148]	; (8007d28 <__swsetup_r+0xd4>)
 8007c92:	429c      	cmp	r4, r3
 8007c94:	d101      	bne.n	8007c9a <__swsetup_r+0x46>
 8007c96:	68ac      	ldr	r4, [r5, #8]
 8007c98:	e7eb      	b.n	8007c72 <__swsetup_r+0x1e>
 8007c9a:	4b24      	ldr	r3, [pc, #144]	; (8007d2c <__swsetup_r+0xd8>)
 8007c9c:	429c      	cmp	r4, r3
 8007c9e:	bf08      	it	eq
 8007ca0:	68ec      	ldreq	r4, [r5, #12]
 8007ca2:	e7e6      	b.n	8007c72 <__swsetup_r+0x1e>
 8007ca4:	0758      	lsls	r0, r3, #29
 8007ca6:	d512      	bpl.n	8007cce <__swsetup_r+0x7a>
 8007ca8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007caa:	b141      	cbz	r1, 8007cbe <__swsetup_r+0x6a>
 8007cac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007cb0:	4299      	cmp	r1, r3
 8007cb2:	d002      	beq.n	8007cba <__swsetup_r+0x66>
 8007cb4:	4630      	mov	r0, r6
 8007cb6:	f000 f991 	bl	8007fdc <_free_r>
 8007cba:	2300      	movs	r3, #0
 8007cbc:	6363      	str	r3, [r4, #52]	; 0x34
 8007cbe:	89a3      	ldrh	r3, [r4, #12]
 8007cc0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007cc4:	81a3      	strh	r3, [r4, #12]
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	6063      	str	r3, [r4, #4]
 8007cca:	6923      	ldr	r3, [r4, #16]
 8007ccc:	6023      	str	r3, [r4, #0]
 8007cce:	89a3      	ldrh	r3, [r4, #12]
 8007cd0:	f043 0308 	orr.w	r3, r3, #8
 8007cd4:	81a3      	strh	r3, [r4, #12]
 8007cd6:	6923      	ldr	r3, [r4, #16]
 8007cd8:	b94b      	cbnz	r3, 8007cee <__swsetup_r+0x9a>
 8007cda:	89a3      	ldrh	r3, [r4, #12]
 8007cdc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007ce0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ce4:	d003      	beq.n	8007cee <__swsetup_r+0x9a>
 8007ce6:	4621      	mov	r1, r4
 8007ce8:	4630      	mov	r0, r6
 8007cea:	f000 f92b 	bl	8007f44 <__smakebuf_r>
 8007cee:	89a0      	ldrh	r0, [r4, #12]
 8007cf0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007cf4:	f010 0301 	ands.w	r3, r0, #1
 8007cf8:	d00a      	beq.n	8007d10 <__swsetup_r+0xbc>
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	60a3      	str	r3, [r4, #8]
 8007cfe:	6963      	ldr	r3, [r4, #20]
 8007d00:	425b      	negs	r3, r3
 8007d02:	61a3      	str	r3, [r4, #24]
 8007d04:	6923      	ldr	r3, [r4, #16]
 8007d06:	b943      	cbnz	r3, 8007d1a <__swsetup_r+0xc6>
 8007d08:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007d0c:	d1ba      	bne.n	8007c84 <__swsetup_r+0x30>
 8007d0e:	bd70      	pop	{r4, r5, r6, pc}
 8007d10:	0781      	lsls	r1, r0, #30
 8007d12:	bf58      	it	pl
 8007d14:	6963      	ldrpl	r3, [r4, #20]
 8007d16:	60a3      	str	r3, [r4, #8]
 8007d18:	e7f4      	b.n	8007d04 <__swsetup_r+0xb0>
 8007d1a:	2000      	movs	r0, #0
 8007d1c:	e7f7      	b.n	8007d0e <__swsetup_r+0xba>
 8007d1e:	bf00      	nop
 8007d20:	200000b4 	.word	0x200000b4
 8007d24:	0800d114 	.word	0x0800d114
 8007d28:	0800d134 	.word	0x0800d134
 8007d2c:	0800d0f4 	.word	0x0800d0f4

08007d30 <_close_r>:
 8007d30:	b538      	push	{r3, r4, r5, lr}
 8007d32:	4d06      	ldr	r5, [pc, #24]	; (8007d4c <_close_r+0x1c>)
 8007d34:	2300      	movs	r3, #0
 8007d36:	4604      	mov	r4, r0
 8007d38:	4608      	mov	r0, r1
 8007d3a:	602b      	str	r3, [r5, #0]
 8007d3c:	f7f9 fcdd 	bl	80016fa <_close>
 8007d40:	1c43      	adds	r3, r0, #1
 8007d42:	d102      	bne.n	8007d4a <_close_r+0x1a>
 8007d44:	682b      	ldr	r3, [r5, #0]
 8007d46:	b103      	cbz	r3, 8007d4a <_close_r+0x1a>
 8007d48:	6023      	str	r3, [r4, #0]
 8007d4a:	bd38      	pop	{r3, r4, r5, pc}
 8007d4c:	20013b3c 	.word	0x20013b3c

08007d50 <__sflush_r>:
 8007d50:	898a      	ldrh	r2, [r1, #12]
 8007d52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d56:	4605      	mov	r5, r0
 8007d58:	0710      	lsls	r0, r2, #28
 8007d5a:	460c      	mov	r4, r1
 8007d5c:	d458      	bmi.n	8007e10 <__sflush_r+0xc0>
 8007d5e:	684b      	ldr	r3, [r1, #4]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	dc05      	bgt.n	8007d70 <__sflush_r+0x20>
 8007d64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	dc02      	bgt.n	8007d70 <__sflush_r+0x20>
 8007d6a:	2000      	movs	r0, #0
 8007d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d72:	2e00      	cmp	r6, #0
 8007d74:	d0f9      	beq.n	8007d6a <__sflush_r+0x1a>
 8007d76:	2300      	movs	r3, #0
 8007d78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d7c:	682f      	ldr	r7, [r5, #0]
 8007d7e:	602b      	str	r3, [r5, #0]
 8007d80:	d032      	beq.n	8007de8 <__sflush_r+0x98>
 8007d82:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d84:	89a3      	ldrh	r3, [r4, #12]
 8007d86:	075a      	lsls	r2, r3, #29
 8007d88:	d505      	bpl.n	8007d96 <__sflush_r+0x46>
 8007d8a:	6863      	ldr	r3, [r4, #4]
 8007d8c:	1ac0      	subs	r0, r0, r3
 8007d8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d90:	b10b      	cbz	r3, 8007d96 <__sflush_r+0x46>
 8007d92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d94:	1ac0      	subs	r0, r0, r3
 8007d96:	2300      	movs	r3, #0
 8007d98:	4602      	mov	r2, r0
 8007d9a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d9c:	6a21      	ldr	r1, [r4, #32]
 8007d9e:	4628      	mov	r0, r5
 8007da0:	47b0      	blx	r6
 8007da2:	1c43      	adds	r3, r0, #1
 8007da4:	89a3      	ldrh	r3, [r4, #12]
 8007da6:	d106      	bne.n	8007db6 <__sflush_r+0x66>
 8007da8:	6829      	ldr	r1, [r5, #0]
 8007daa:	291d      	cmp	r1, #29
 8007dac:	d82c      	bhi.n	8007e08 <__sflush_r+0xb8>
 8007dae:	4a2a      	ldr	r2, [pc, #168]	; (8007e58 <__sflush_r+0x108>)
 8007db0:	40ca      	lsrs	r2, r1
 8007db2:	07d6      	lsls	r6, r2, #31
 8007db4:	d528      	bpl.n	8007e08 <__sflush_r+0xb8>
 8007db6:	2200      	movs	r2, #0
 8007db8:	6062      	str	r2, [r4, #4]
 8007dba:	04d9      	lsls	r1, r3, #19
 8007dbc:	6922      	ldr	r2, [r4, #16]
 8007dbe:	6022      	str	r2, [r4, #0]
 8007dc0:	d504      	bpl.n	8007dcc <__sflush_r+0x7c>
 8007dc2:	1c42      	adds	r2, r0, #1
 8007dc4:	d101      	bne.n	8007dca <__sflush_r+0x7a>
 8007dc6:	682b      	ldr	r3, [r5, #0]
 8007dc8:	b903      	cbnz	r3, 8007dcc <__sflush_r+0x7c>
 8007dca:	6560      	str	r0, [r4, #84]	; 0x54
 8007dcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dce:	602f      	str	r7, [r5, #0]
 8007dd0:	2900      	cmp	r1, #0
 8007dd2:	d0ca      	beq.n	8007d6a <__sflush_r+0x1a>
 8007dd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007dd8:	4299      	cmp	r1, r3
 8007dda:	d002      	beq.n	8007de2 <__sflush_r+0x92>
 8007ddc:	4628      	mov	r0, r5
 8007dde:	f000 f8fd 	bl	8007fdc <_free_r>
 8007de2:	2000      	movs	r0, #0
 8007de4:	6360      	str	r0, [r4, #52]	; 0x34
 8007de6:	e7c1      	b.n	8007d6c <__sflush_r+0x1c>
 8007de8:	6a21      	ldr	r1, [r4, #32]
 8007dea:	2301      	movs	r3, #1
 8007dec:	4628      	mov	r0, r5
 8007dee:	47b0      	blx	r6
 8007df0:	1c41      	adds	r1, r0, #1
 8007df2:	d1c7      	bne.n	8007d84 <__sflush_r+0x34>
 8007df4:	682b      	ldr	r3, [r5, #0]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d0c4      	beq.n	8007d84 <__sflush_r+0x34>
 8007dfa:	2b1d      	cmp	r3, #29
 8007dfc:	d001      	beq.n	8007e02 <__sflush_r+0xb2>
 8007dfe:	2b16      	cmp	r3, #22
 8007e00:	d101      	bne.n	8007e06 <__sflush_r+0xb6>
 8007e02:	602f      	str	r7, [r5, #0]
 8007e04:	e7b1      	b.n	8007d6a <__sflush_r+0x1a>
 8007e06:	89a3      	ldrh	r3, [r4, #12]
 8007e08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e0c:	81a3      	strh	r3, [r4, #12]
 8007e0e:	e7ad      	b.n	8007d6c <__sflush_r+0x1c>
 8007e10:	690f      	ldr	r7, [r1, #16]
 8007e12:	2f00      	cmp	r7, #0
 8007e14:	d0a9      	beq.n	8007d6a <__sflush_r+0x1a>
 8007e16:	0793      	lsls	r3, r2, #30
 8007e18:	680e      	ldr	r6, [r1, #0]
 8007e1a:	bf08      	it	eq
 8007e1c:	694b      	ldreq	r3, [r1, #20]
 8007e1e:	600f      	str	r7, [r1, #0]
 8007e20:	bf18      	it	ne
 8007e22:	2300      	movne	r3, #0
 8007e24:	eba6 0807 	sub.w	r8, r6, r7
 8007e28:	608b      	str	r3, [r1, #8]
 8007e2a:	f1b8 0f00 	cmp.w	r8, #0
 8007e2e:	dd9c      	ble.n	8007d6a <__sflush_r+0x1a>
 8007e30:	6a21      	ldr	r1, [r4, #32]
 8007e32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007e34:	4643      	mov	r3, r8
 8007e36:	463a      	mov	r2, r7
 8007e38:	4628      	mov	r0, r5
 8007e3a:	47b0      	blx	r6
 8007e3c:	2800      	cmp	r0, #0
 8007e3e:	dc06      	bgt.n	8007e4e <__sflush_r+0xfe>
 8007e40:	89a3      	ldrh	r3, [r4, #12]
 8007e42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e46:	81a3      	strh	r3, [r4, #12]
 8007e48:	f04f 30ff 	mov.w	r0, #4294967295
 8007e4c:	e78e      	b.n	8007d6c <__sflush_r+0x1c>
 8007e4e:	4407      	add	r7, r0
 8007e50:	eba8 0800 	sub.w	r8, r8, r0
 8007e54:	e7e9      	b.n	8007e2a <__sflush_r+0xda>
 8007e56:	bf00      	nop
 8007e58:	20400001 	.word	0x20400001

08007e5c <_fflush_r>:
 8007e5c:	b538      	push	{r3, r4, r5, lr}
 8007e5e:	690b      	ldr	r3, [r1, #16]
 8007e60:	4605      	mov	r5, r0
 8007e62:	460c      	mov	r4, r1
 8007e64:	b913      	cbnz	r3, 8007e6c <_fflush_r+0x10>
 8007e66:	2500      	movs	r5, #0
 8007e68:	4628      	mov	r0, r5
 8007e6a:	bd38      	pop	{r3, r4, r5, pc}
 8007e6c:	b118      	cbz	r0, 8007e76 <_fflush_r+0x1a>
 8007e6e:	6983      	ldr	r3, [r0, #24]
 8007e70:	b90b      	cbnz	r3, 8007e76 <_fflush_r+0x1a>
 8007e72:	f7ff fa15 	bl	80072a0 <__sinit>
 8007e76:	4b14      	ldr	r3, [pc, #80]	; (8007ec8 <_fflush_r+0x6c>)
 8007e78:	429c      	cmp	r4, r3
 8007e7a:	d11b      	bne.n	8007eb4 <_fflush_r+0x58>
 8007e7c:	686c      	ldr	r4, [r5, #4]
 8007e7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d0ef      	beq.n	8007e66 <_fflush_r+0xa>
 8007e86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e88:	07d0      	lsls	r0, r2, #31
 8007e8a:	d404      	bmi.n	8007e96 <_fflush_r+0x3a>
 8007e8c:	0599      	lsls	r1, r3, #22
 8007e8e:	d402      	bmi.n	8007e96 <_fflush_r+0x3a>
 8007e90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e92:	f7ff faa3 	bl	80073dc <__retarget_lock_acquire_recursive>
 8007e96:	4628      	mov	r0, r5
 8007e98:	4621      	mov	r1, r4
 8007e9a:	f7ff ff59 	bl	8007d50 <__sflush_r>
 8007e9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ea0:	07da      	lsls	r2, r3, #31
 8007ea2:	4605      	mov	r5, r0
 8007ea4:	d4e0      	bmi.n	8007e68 <_fflush_r+0xc>
 8007ea6:	89a3      	ldrh	r3, [r4, #12]
 8007ea8:	059b      	lsls	r3, r3, #22
 8007eaa:	d4dd      	bmi.n	8007e68 <_fflush_r+0xc>
 8007eac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007eae:	f7ff fa96 	bl	80073de <__retarget_lock_release_recursive>
 8007eb2:	e7d9      	b.n	8007e68 <_fflush_r+0xc>
 8007eb4:	4b05      	ldr	r3, [pc, #20]	; (8007ecc <_fflush_r+0x70>)
 8007eb6:	429c      	cmp	r4, r3
 8007eb8:	d101      	bne.n	8007ebe <_fflush_r+0x62>
 8007eba:	68ac      	ldr	r4, [r5, #8]
 8007ebc:	e7df      	b.n	8007e7e <_fflush_r+0x22>
 8007ebe:	4b04      	ldr	r3, [pc, #16]	; (8007ed0 <_fflush_r+0x74>)
 8007ec0:	429c      	cmp	r4, r3
 8007ec2:	bf08      	it	eq
 8007ec4:	68ec      	ldreq	r4, [r5, #12]
 8007ec6:	e7da      	b.n	8007e7e <_fflush_r+0x22>
 8007ec8:	0800d114 	.word	0x0800d114
 8007ecc:	0800d134 	.word	0x0800d134
 8007ed0:	0800d0f4 	.word	0x0800d0f4

08007ed4 <_lseek_r>:
 8007ed4:	b538      	push	{r3, r4, r5, lr}
 8007ed6:	4d07      	ldr	r5, [pc, #28]	; (8007ef4 <_lseek_r+0x20>)
 8007ed8:	4604      	mov	r4, r0
 8007eda:	4608      	mov	r0, r1
 8007edc:	4611      	mov	r1, r2
 8007ede:	2200      	movs	r2, #0
 8007ee0:	602a      	str	r2, [r5, #0]
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	f7f9 fc30 	bl	8001748 <_lseek>
 8007ee8:	1c43      	adds	r3, r0, #1
 8007eea:	d102      	bne.n	8007ef2 <_lseek_r+0x1e>
 8007eec:	682b      	ldr	r3, [r5, #0]
 8007eee:	b103      	cbz	r3, 8007ef2 <_lseek_r+0x1e>
 8007ef0:	6023      	str	r3, [r4, #0]
 8007ef2:	bd38      	pop	{r3, r4, r5, pc}
 8007ef4:	20013b3c 	.word	0x20013b3c

08007ef8 <__swhatbuf_r>:
 8007ef8:	b570      	push	{r4, r5, r6, lr}
 8007efa:	460e      	mov	r6, r1
 8007efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f00:	2900      	cmp	r1, #0
 8007f02:	b096      	sub	sp, #88	; 0x58
 8007f04:	4614      	mov	r4, r2
 8007f06:	461d      	mov	r5, r3
 8007f08:	da08      	bge.n	8007f1c <__swhatbuf_r+0x24>
 8007f0a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	602a      	str	r2, [r5, #0]
 8007f12:	061a      	lsls	r2, r3, #24
 8007f14:	d410      	bmi.n	8007f38 <__swhatbuf_r+0x40>
 8007f16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f1a:	e00e      	b.n	8007f3a <__swhatbuf_r+0x42>
 8007f1c:	466a      	mov	r2, sp
 8007f1e:	f000 f8bb 	bl	8008098 <_fstat_r>
 8007f22:	2800      	cmp	r0, #0
 8007f24:	dbf1      	blt.n	8007f0a <__swhatbuf_r+0x12>
 8007f26:	9a01      	ldr	r2, [sp, #4]
 8007f28:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007f2c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007f30:	425a      	negs	r2, r3
 8007f32:	415a      	adcs	r2, r3
 8007f34:	602a      	str	r2, [r5, #0]
 8007f36:	e7ee      	b.n	8007f16 <__swhatbuf_r+0x1e>
 8007f38:	2340      	movs	r3, #64	; 0x40
 8007f3a:	2000      	movs	r0, #0
 8007f3c:	6023      	str	r3, [r4, #0]
 8007f3e:	b016      	add	sp, #88	; 0x58
 8007f40:	bd70      	pop	{r4, r5, r6, pc}
	...

08007f44 <__smakebuf_r>:
 8007f44:	898b      	ldrh	r3, [r1, #12]
 8007f46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007f48:	079d      	lsls	r5, r3, #30
 8007f4a:	4606      	mov	r6, r0
 8007f4c:	460c      	mov	r4, r1
 8007f4e:	d507      	bpl.n	8007f60 <__smakebuf_r+0x1c>
 8007f50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007f54:	6023      	str	r3, [r4, #0]
 8007f56:	6123      	str	r3, [r4, #16]
 8007f58:	2301      	movs	r3, #1
 8007f5a:	6163      	str	r3, [r4, #20]
 8007f5c:	b002      	add	sp, #8
 8007f5e:	bd70      	pop	{r4, r5, r6, pc}
 8007f60:	ab01      	add	r3, sp, #4
 8007f62:	466a      	mov	r2, sp
 8007f64:	f7ff ffc8 	bl	8007ef8 <__swhatbuf_r>
 8007f68:	9900      	ldr	r1, [sp, #0]
 8007f6a:	4605      	mov	r5, r0
 8007f6c:	4630      	mov	r0, r6
 8007f6e:	f7ff fa57 	bl	8007420 <_malloc_r>
 8007f72:	b948      	cbnz	r0, 8007f88 <__smakebuf_r+0x44>
 8007f74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f78:	059a      	lsls	r2, r3, #22
 8007f7a:	d4ef      	bmi.n	8007f5c <__smakebuf_r+0x18>
 8007f7c:	f023 0303 	bic.w	r3, r3, #3
 8007f80:	f043 0302 	orr.w	r3, r3, #2
 8007f84:	81a3      	strh	r3, [r4, #12]
 8007f86:	e7e3      	b.n	8007f50 <__smakebuf_r+0xc>
 8007f88:	4b0d      	ldr	r3, [pc, #52]	; (8007fc0 <__smakebuf_r+0x7c>)
 8007f8a:	62b3      	str	r3, [r6, #40]	; 0x28
 8007f8c:	89a3      	ldrh	r3, [r4, #12]
 8007f8e:	6020      	str	r0, [r4, #0]
 8007f90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f94:	81a3      	strh	r3, [r4, #12]
 8007f96:	9b00      	ldr	r3, [sp, #0]
 8007f98:	6163      	str	r3, [r4, #20]
 8007f9a:	9b01      	ldr	r3, [sp, #4]
 8007f9c:	6120      	str	r0, [r4, #16]
 8007f9e:	b15b      	cbz	r3, 8007fb8 <__smakebuf_r+0x74>
 8007fa0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fa4:	4630      	mov	r0, r6
 8007fa6:	f000 f889 	bl	80080bc <_isatty_r>
 8007faa:	b128      	cbz	r0, 8007fb8 <__smakebuf_r+0x74>
 8007fac:	89a3      	ldrh	r3, [r4, #12]
 8007fae:	f023 0303 	bic.w	r3, r3, #3
 8007fb2:	f043 0301 	orr.w	r3, r3, #1
 8007fb6:	81a3      	strh	r3, [r4, #12]
 8007fb8:	89a0      	ldrh	r0, [r4, #12]
 8007fba:	4305      	orrs	r5, r0
 8007fbc:	81a5      	strh	r5, [r4, #12]
 8007fbe:	e7cd      	b.n	8007f5c <__smakebuf_r+0x18>
 8007fc0:	08007239 	.word	0x08007239

08007fc4 <__malloc_lock>:
 8007fc4:	4801      	ldr	r0, [pc, #4]	; (8007fcc <__malloc_lock+0x8>)
 8007fc6:	f7ff ba09 	b.w	80073dc <__retarget_lock_acquire_recursive>
 8007fca:	bf00      	nop
 8007fcc:	20013b30 	.word	0x20013b30

08007fd0 <__malloc_unlock>:
 8007fd0:	4801      	ldr	r0, [pc, #4]	; (8007fd8 <__malloc_unlock+0x8>)
 8007fd2:	f7ff ba04 	b.w	80073de <__retarget_lock_release_recursive>
 8007fd6:	bf00      	nop
 8007fd8:	20013b30 	.word	0x20013b30

08007fdc <_free_r>:
 8007fdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007fde:	2900      	cmp	r1, #0
 8007fe0:	d044      	beq.n	800806c <_free_r+0x90>
 8007fe2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fe6:	9001      	str	r0, [sp, #4]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	f1a1 0404 	sub.w	r4, r1, #4
 8007fee:	bfb8      	it	lt
 8007ff0:	18e4      	addlt	r4, r4, r3
 8007ff2:	f7ff ffe7 	bl	8007fc4 <__malloc_lock>
 8007ff6:	4a1e      	ldr	r2, [pc, #120]	; (8008070 <_free_r+0x94>)
 8007ff8:	9801      	ldr	r0, [sp, #4]
 8007ffa:	6813      	ldr	r3, [r2, #0]
 8007ffc:	b933      	cbnz	r3, 800800c <_free_r+0x30>
 8007ffe:	6063      	str	r3, [r4, #4]
 8008000:	6014      	str	r4, [r2, #0]
 8008002:	b003      	add	sp, #12
 8008004:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008008:	f7ff bfe2 	b.w	8007fd0 <__malloc_unlock>
 800800c:	42a3      	cmp	r3, r4
 800800e:	d908      	bls.n	8008022 <_free_r+0x46>
 8008010:	6825      	ldr	r5, [r4, #0]
 8008012:	1961      	adds	r1, r4, r5
 8008014:	428b      	cmp	r3, r1
 8008016:	bf01      	itttt	eq
 8008018:	6819      	ldreq	r1, [r3, #0]
 800801a:	685b      	ldreq	r3, [r3, #4]
 800801c:	1949      	addeq	r1, r1, r5
 800801e:	6021      	streq	r1, [r4, #0]
 8008020:	e7ed      	b.n	8007ffe <_free_r+0x22>
 8008022:	461a      	mov	r2, r3
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	b10b      	cbz	r3, 800802c <_free_r+0x50>
 8008028:	42a3      	cmp	r3, r4
 800802a:	d9fa      	bls.n	8008022 <_free_r+0x46>
 800802c:	6811      	ldr	r1, [r2, #0]
 800802e:	1855      	adds	r5, r2, r1
 8008030:	42a5      	cmp	r5, r4
 8008032:	d10b      	bne.n	800804c <_free_r+0x70>
 8008034:	6824      	ldr	r4, [r4, #0]
 8008036:	4421      	add	r1, r4
 8008038:	1854      	adds	r4, r2, r1
 800803a:	42a3      	cmp	r3, r4
 800803c:	6011      	str	r1, [r2, #0]
 800803e:	d1e0      	bne.n	8008002 <_free_r+0x26>
 8008040:	681c      	ldr	r4, [r3, #0]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	6053      	str	r3, [r2, #4]
 8008046:	4421      	add	r1, r4
 8008048:	6011      	str	r1, [r2, #0]
 800804a:	e7da      	b.n	8008002 <_free_r+0x26>
 800804c:	d902      	bls.n	8008054 <_free_r+0x78>
 800804e:	230c      	movs	r3, #12
 8008050:	6003      	str	r3, [r0, #0]
 8008052:	e7d6      	b.n	8008002 <_free_r+0x26>
 8008054:	6825      	ldr	r5, [r4, #0]
 8008056:	1961      	adds	r1, r4, r5
 8008058:	428b      	cmp	r3, r1
 800805a:	bf04      	itt	eq
 800805c:	6819      	ldreq	r1, [r3, #0]
 800805e:	685b      	ldreq	r3, [r3, #4]
 8008060:	6063      	str	r3, [r4, #4]
 8008062:	bf04      	itt	eq
 8008064:	1949      	addeq	r1, r1, r5
 8008066:	6021      	streq	r1, [r4, #0]
 8008068:	6054      	str	r4, [r2, #4]
 800806a:	e7ca      	b.n	8008002 <_free_r+0x26>
 800806c:	b003      	add	sp, #12
 800806e:	bd30      	pop	{r4, r5, pc}
 8008070:	20013b34 	.word	0x20013b34

08008074 <_read_r>:
 8008074:	b538      	push	{r3, r4, r5, lr}
 8008076:	4d07      	ldr	r5, [pc, #28]	; (8008094 <_read_r+0x20>)
 8008078:	4604      	mov	r4, r0
 800807a:	4608      	mov	r0, r1
 800807c:	4611      	mov	r1, r2
 800807e:	2200      	movs	r2, #0
 8008080:	602a      	str	r2, [r5, #0]
 8008082:	461a      	mov	r2, r3
 8008084:	f7f9 fb00 	bl	8001688 <_read>
 8008088:	1c43      	adds	r3, r0, #1
 800808a:	d102      	bne.n	8008092 <_read_r+0x1e>
 800808c:	682b      	ldr	r3, [r5, #0]
 800808e:	b103      	cbz	r3, 8008092 <_read_r+0x1e>
 8008090:	6023      	str	r3, [r4, #0]
 8008092:	bd38      	pop	{r3, r4, r5, pc}
 8008094:	20013b3c 	.word	0x20013b3c

08008098 <_fstat_r>:
 8008098:	b538      	push	{r3, r4, r5, lr}
 800809a:	4d07      	ldr	r5, [pc, #28]	; (80080b8 <_fstat_r+0x20>)
 800809c:	2300      	movs	r3, #0
 800809e:	4604      	mov	r4, r0
 80080a0:	4608      	mov	r0, r1
 80080a2:	4611      	mov	r1, r2
 80080a4:	602b      	str	r3, [r5, #0]
 80080a6:	f7f9 fb34 	bl	8001712 <_fstat>
 80080aa:	1c43      	adds	r3, r0, #1
 80080ac:	d102      	bne.n	80080b4 <_fstat_r+0x1c>
 80080ae:	682b      	ldr	r3, [r5, #0]
 80080b0:	b103      	cbz	r3, 80080b4 <_fstat_r+0x1c>
 80080b2:	6023      	str	r3, [r4, #0]
 80080b4:	bd38      	pop	{r3, r4, r5, pc}
 80080b6:	bf00      	nop
 80080b8:	20013b3c 	.word	0x20013b3c

080080bc <_isatty_r>:
 80080bc:	b538      	push	{r3, r4, r5, lr}
 80080be:	4d06      	ldr	r5, [pc, #24]	; (80080d8 <_isatty_r+0x1c>)
 80080c0:	2300      	movs	r3, #0
 80080c2:	4604      	mov	r4, r0
 80080c4:	4608      	mov	r0, r1
 80080c6:	602b      	str	r3, [r5, #0]
 80080c8:	f7f9 fb33 	bl	8001732 <_isatty>
 80080cc:	1c43      	adds	r3, r0, #1
 80080ce:	d102      	bne.n	80080d6 <_isatty_r+0x1a>
 80080d0:	682b      	ldr	r3, [r5, #0]
 80080d2:	b103      	cbz	r3, 80080d6 <_isatty_r+0x1a>
 80080d4:	6023      	str	r3, [r4, #0]
 80080d6:	bd38      	pop	{r3, r4, r5, pc}
 80080d8:	20013b3c 	.word	0x20013b3c

080080dc <_init>:
 80080dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080de:	bf00      	nop
 80080e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080e2:	bc08      	pop	{r3}
 80080e4:	469e      	mov	lr, r3
 80080e6:	4770      	bx	lr

080080e8 <_fini>:
 80080e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ea:	bf00      	nop
 80080ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080ee:	bc08      	pop	{r3}
 80080f0:	469e      	mov	lr, r3
 80080f2:	4770      	bx	lr
