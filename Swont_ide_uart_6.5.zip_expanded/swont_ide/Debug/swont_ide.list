
swont_ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f50  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080050d8  080050d8  000150d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005160  08005160  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005160  08005160  00015160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005168  08005168  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005168  08005168  00015168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800516c  0800516c  0001516c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005170  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013664  20000070  080051e0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200136d4  080051e0  000236d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012820  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002874  00000000  00000000  000328c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d30  00000000  00000000  00035138  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bf8  00000000  00000000  00035e68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000234d7  00000000  00000000  00036a60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c7e6  00000000  00000000  00059f37  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cb2a5  00000000  00000000  0006671d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001319c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b24  00000000  00000000  00131a40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080050c0 	.word	0x080050c0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	080050c0 	.word	0x080050c0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80004ce:	2300      	movs	r3, #0
 80004d0:	607b      	str	r3, [r7, #4]
 80004d2:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <MX_DMA_Init+0x3c>)
 80004d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d6:	4a0b      	ldr	r2, [pc, #44]	; (8000504 <MX_DMA_Init+0x3c>)
 80004d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004dc:	6313      	str	r3, [r2, #48]	; 0x30
 80004de:	4b09      	ldr	r3, [pc, #36]	; (8000504 <MX_DMA_Init+0x3c>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004e6:	607b      	str	r3, [r7, #4]
 80004e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2100      	movs	r1, #0
 80004ee:	2044      	movs	r0, #68	; 0x44
 80004f0:	f001 f899 	bl	8001626 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80004f4:	2044      	movs	r0, #68	; 0x44
 80004f6:	f001 f8b2 	bl	800165e <HAL_NVIC_EnableIRQ>

}
 80004fa:	bf00      	nop
 80004fc:	3708      	adds	r7, #8
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	40023800 	.word	0x40023800

08000508 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08a      	sub	sp, #40	; 0x28
 800050c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050e:	f107 0314 	add.w	r3, r7, #20
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800051e:	2300      	movs	r3, #0
 8000520:	613b      	str	r3, [r7, #16]
 8000522:	4b32      	ldr	r3, [pc, #200]	; (80005ec <MX_GPIO_Init+0xe4>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	4a31      	ldr	r2, [pc, #196]	; (80005ec <MX_GPIO_Init+0xe4>)
 8000528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800052c:	6313      	str	r3, [r2, #48]	; 0x30
 800052e:	4b2f      	ldr	r3, [pc, #188]	; (80005ec <MX_GPIO_Init+0xe4>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000536:	613b      	str	r3, [r7, #16]
 8000538:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800053a:	2300      	movs	r3, #0
 800053c:	60fb      	str	r3, [r7, #12]
 800053e:	4b2b      	ldr	r3, [pc, #172]	; (80005ec <MX_GPIO_Init+0xe4>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	4a2a      	ldr	r2, [pc, #168]	; (80005ec <MX_GPIO_Init+0xe4>)
 8000544:	f043 0301 	orr.w	r3, r3, #1
 8000548:	6313      	str	r3, [r2, #48]	; 0x30
 800054a:	4b28      	ldr	r3, [pc, #160]	; (80005ec <MX_GPIO_Init+0xe4>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	f003 0301 	and.w	r3, r3, #1
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000556:	2300      	movs	r3, #0
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	4b24      	ldr	r3, [pc, #144]	; (80005ec <MX_GPIO_Init+0xe4>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	4a23      	ldr	r2, [pc, #140]	; (80005ec <MX_GPIO_Init+0xe4>)
 8000560:	f043 0310 	orr.w	r3, r3, #16
 8000564:	6313      	str	r3, [r2, #48]	; 0x30
 8000566:	4b21      	ldr	r3, [pc, #132]	; (80005ec <MX_GPIO_Init+0xe4>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	f003 0310 	and.w	r3, r3, #16
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000572:	2300      	movs	r3, #0
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	4b1d      	ldr	r3, [pc, #116]	; (80005ec <MX_GPIO_Init+0xe4>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	4a1c      	ldr	r2, [pc, #112]	; (80005ec <MX_GPIO_Init+0xe4>)
 800057c:	f043 0302 	orr.w	r3, r3, #2
 8000580:	6313      	str	r3, [r2, #48]	; 0x30
 8000582:	4b1a      	ldr	r3, [pc, #104]	; (80005ec <MX_GPIO_Init+0xe4>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	f003 0302 	and.w	r3, r3, #2
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 800058e:	2200      	movs	r2, #0
 8000590:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000594:	4816      	ldr	r0, [pc, #88]	; (80005f0 <MX_GPIO_Init+0xe8>)
 8000596:	f001 fda7 	bl	80020e8 <HAL_GPIO_WritePin>
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VGA_VSYNC_GPIO_Port, VGA_VSYNC_Pin, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005a0:	4814      	ldr	r0, [pc, #80]	; (80005f4 <MX_GPIO_Init+0xec>)
 80005a2:	f001 fda1 	bl	80020e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 80005a6:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80005aa:	617b      	str	r3, [r7, #20]
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ac:	2301      	movs	r3, #1
 80005ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b0:	2300      	movs	r3, #0
 80005b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005b4:	2303      	movs	r3, #3
 80005b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005b8:	f107 0314 	add.w	r3, r7, #20
 80005bc:	4619      	mov	r1, r3
 80005be:	480c      	ldr	r0, [pc, #48]	; (80005f0 <MX_GPIO_Init+0xe8>)
 80005c0:	f001 fbf8 	bl	8001db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VGA_VSYNC_Pin;
 80005c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ca:	2301      	movs	r3, #1
 80005cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005d2:	2303      	movs	r3, #3
 80005d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VGA_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	4619      	mov	r1, r3
 80005dc:	4805      	ldr	r0, [pc, #20]	; (80005f4 <MX_GPIO_Init+0xec>)
 80005de:	f001 fbe9 	bl	8001db4 <HAL_GPIO_Init>

}
 80005e2:	bf00      	nop
 80005e4:	3728      	adds	r7, #40	; 0x28
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40021000 	.word	0x40021000
 80005f4:	40020400 	.word	0x40020400

080005f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fe:	f000 fec5 	bl	800138c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000602:	f000 f865 	bl	80006d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000606:	f7ff ff7f 	bl	8000508 <MX_GPIO_Init>
  MX_DMA_Init();
 800060a:	f7ff ff5d 	bl	80004c8 <MX_DMA_Init>
  MX_TIM1_Init();
 800060e:	f000 fab3 	bl	8000b78 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000612:	f000 fb01 	bl	8000c18 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000616:	f000 fc17 	bl	8000e48 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  UB_VGA_Screen_Init(); // Init VGA-Screen
 800061a:	f000 fcb9 	bl	8000f90 <UB_VGA_Screen_Init>

  UB_VGA_FillScreen(VGA_COL_WHITE);
 800061e:	20ff      	movs	r0, #255	; 0xff
 8000620:	f000 fd08 	bl	8001034 <UB_VGA_FillScreen>
  UB_VGA_SetPixel(10,10,10);
 8000624:	220a      	movs	r2, #10
 8000626:	210a      	movs	r1, #10
 8000628:	200a      	movs	r0, #10
 800062a:	f000 fd25 	bl	8001078 <UB_VGA_SetPixel>
  UB_VGA_SetPixel(0,0,0x00);
 800062e:	2200      	movs	r2, #0
 8000630:	2100      	movs	r1, #0
 8000632:	2000      	movs	r0, #0
 8000634:	f000 fd20 	bl	8001078 <UB_VGA_SetPixel>
  UB_VGA_SetPixel(319,0,0x00);
 8000638:	2200      	movs	r2, #0
 800063a:	2100      	movs	r1, #0
 800063c:	f240 103f 	movw	r0, #319	; 0x13f
 8000640:	f000 fd1a 	bl	8001078 <UB_VGA_SetPixel>

  UB_VGA_SetLine(0, 0, 200, 10, VGA_COL_GREEN, 5);
 8000644:	2305      	movs	r3, #5
 8000646:	9301      	str	r3, [sp, #4]
 8000648:	231c      	movs	r3, #28
 800064a:	9300      	str	r3, [sp, #0]
 800064c:	230a      	movs	r3, #10
 800064e:	22c8      	movs	r2, #200	; 0xc8
 8000650:	2100      	movs	r1, #0
 8000652:	2000      	movs	r0, #0
 8000654:	f000 fd38 	bl	80010c8 <UB_VGA_SetLine>

  int i;

  for(i = 0; i < LINE_BUFLEN; i++)
 8000658:	2300      	movs	r3, #0
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	e008      	b.n	8000670 <main+0x78>
	  input.line_rx_buffer[i] = 0;
 800065e:	4a19      	ldr	r2, [pc, #100]	; (80006c4 <main+0xcc>)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	4413      	add	r3, r2
 8000664:	3301      	adds	r3, #1
 8000666:	2200      	movs	r2, #0
 8000668:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < LINE_BUFLEN; i++)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	3301      	adds	r3, #1
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000676:	dbf2      	blt.n	800065e <main+0x66>

  // Reset some stuff
  input.byte_buffer_rx[0] = 0;
 8000678:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <main+0xcc>)
 800067a:	2200      	movs	r2, #0
 800067c:	701a      	strb	r2, [r3, #0]
  input.char_counter = 0;
 800067e:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <main+0xcc>)
 8000680:	2200      	movs	r2, #0
 8000682:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  input.command_execute_flag = FALSE;
 8000686:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <main+0xcc>)
 8000688:	2200      	movs	r2, #0
 800068a:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c

  // HAl wants a memory location to store the charachter it receives from the UART
  // We will pass it an array, but we will not use it. We declare our own variable in the interupt handler
  // See stm32f4xx_it.c
  HAL_UART_Receive_IT(&huart2, input.byte_buffer_rx, BYTE_BUFLEN);
 800068e:	2201      	movs	r2, #1
 8000690:	490c      	ldr	r1, [pc, #48]	; (80006c4 <main+0xcc>)
 8000692:	480d      	ldr	r0, [pc, #52]	; (80006c8 <main+0xd0>)
 8000694:	f003 fa1e 	bl	8003ad4 <HAL_UART_Receive_IT>

  // Test to see if the screen reacts to UART
  unsigned char colorTest = TRUE;
 8000698:	23ff      	movs	r3, #255	; 0xff
 800069a:	70fb      	strb	r3, [r7, #3]
  {
//	  UB_VGA_FillScreen(VGA_COL_WHITE);
//	  UB_VGA_SetPixel(100, 100, VGA_COL_RED);
//	  UB_VGA_SetPixel(200, 200, VGA_COL_RED);
//	  UB_VGA_SetLine(200, 200, 100, 100, VGA_COL_GREEN, 0);
	  if(input.command_execute_flag == TRUE)
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <main+0xcc>)
 800069e:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 80006a2:	2bff      	cmp	r3, #255	; 0xff
 80006a4:	d1fa      	bne.n	800069c <main+0xa4>
	  {
		  // Do some stuff
		  printf("yes\n");
 80006a6:	4809      	ldr	r0, [pc, #36]	; (80006cc <main+0xd4>)
 80006a8:	f004 f8fe 	bl	80048a8 <puts>
		  colorTest = ~colorTest; // Toggle screen color
 80006ac:	78fb      	ldrb	r3, [r7, #3]
 80006ae:	43db      	mvns	r3, r3
 80006b0:	70fb      	strb	r3, [r7, #3]
		  UB_VGA_FillScreen(VGA_COL_RED);
 80006b2:	20e0      	movs	r0, #224	; 0xe0
 80006b4:	f000 fcbe 	bl	8001034 <UB_VGA_FillScreen>

		  // When finished reset the flag
		  input.command_execute_flag = FALSE;
 80006b8:	4b02      	ldr	r3, [pc, #8]	; (80006c4 <main+0xcc>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
	  if(input.command_execute_flag == TRUE)
 80006c0:	e7ec      	b.n	800069c <main+0xa4>
 80006c2:	bf00      	nop
 80006c4:	20000098 	.word	0x20000098
 80006c8:	20000990 	.word	0x20000990
 80006cc:	080050d8 	.word	0x080050d8

080006d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b094      	sub	sp, #80	; 0x50
 80006d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d6:	f107 0320 	add.w	r3, r7, #32
 80006da:	2230      	movs	r2, #48	; 0x30
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f004 f87e 	bl	80047e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f4:	2300      	movs	r3, #0
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	4b28      	ldr	r3, [pc, #160]	; (800079c <SystemClock_Config+0xcc>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	4a27      	ldr	r2, [pc, #156]	; (800079c <SystemClock_Config+0xcc>)
 80006fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000702:	6413      	str	r3, [r2, #64]	; 0x40
 8000704:	4b25      	ldr	r3, [pc, #148]	; (800079c <SystemClock_Config+0xcc>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000710:	2300      	movs	r3, #0
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	4b22      	ldr	r3, [pc, #136]	; (80007a0 <SystemClock_Config+0xd0>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a21      	ldr	r2, [pc, #132]	; (80007a0 <SystemClock_Config+0xd0>)
 800071a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800071e:	6013      	str	r3, [r2, #0]
 8000720:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <SystemClock_Config+0xd0>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800072c:	2301      	movs	r3, #1
 800072e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000730:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000734:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000736:	2302      	movs	r3, #2
 8000738:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800073a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800073e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000740:	2304      	movs	r3, #4
 8000742:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000744:	23a8      	movs	r3, #168	; 0xa8
 8000746:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000748:	2302      	movs	r3, #2
 800074a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800074c:	2304      	movs	r3, #4
 800074e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000750:	f107 0320 	add.w	r3, r7, #32
 8000754:	4618      	mov	r0, r3
 8000756:	f001 fce1 	bl	800211c <HAL_RCC_OscConfig>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000760:	f000 f832 	bl	80007c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000764:	230f      	movs	r3, #15
 8000766:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000768:	2302      	movs	r3, #2
 800076a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000770:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000774:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000776:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800077a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800077c:	f107 030c 	add.w	r3, r7, #12
 8000780:	2105      	movs	r1, #5
 8000782:	4618      	mov	r0, r3
 8000784:	f001 ff3a 	bl	80025fc <HAL_RCC_ClockConfig>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800078e:	f000 f81b 	bl	80007c8 <Error_Handler>
  }
}
 8000792:	bf00      	nop
 8000794:	3750      	adds	r7, #80	; 0x50
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800
 80007a0:	40007000 	.word	0x40007000

080007a4 <__io_putchar>:
	#define USART_PRINTF int fputc(int ch, FILE *f)		//With other compiler printf calls fputc()
#endif /* __GNUC__ */

//Retargets the C library printf function to the USART
USART_PRINTF
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);	//Write character to UART2
 80007ac:	1d39      	adds	r1, r7, #4
 80007ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007b2:	2201      	movs	r2, #1
 80007b4:	4803      	ldr	r0, [pc, #12]	; (80007c4 <__io_putchar+0x20>)
 80007b6:	f003 f8f4 	bl	80039a2 <HAL_UART_Transmit>
	return ch;												//Return the character
 80007ba:	687b      	ldr	r3, [r7, #4]
}
 80007bc:	4618      	mov	r0, r3
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000990 	.word	0x20000990

080007c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
	...

080007d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b10      	ldr	r3, [pc, #64]	; (8000824 <HAL_MspInit+0x4c>)
 80007e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e6:	4a0f      	ldr	r2, [pc, #60]	; (8000824 <HAL_MspInit+0x4c>)
 80007e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ec:	6453      	str	r3, [r2, #68]	; 0x44
 80007ee:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <HAL_MspInit+0x4c>)
 80007f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	603b      	str	r3, [r7, #0]
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <HAL_MspInit+0x4c>)
 8000800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000802:	4a08      	ldr	r2, [pc, #32]	; (8000824 <HAL_MspInit+0x4c>)
 8000804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000808:	6413      	str	r3, [r2, #64]	; 0x40
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <HAL_MspInit+0x4c>)
 800080c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000816:	bf00      	nop
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	40023800 	.word	0x40023800

08000828 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr

08000836 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800083a:	e7fe      	b.n	800083a <HardFault_Handler+0x4>

0800083c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000840:	e7fe      	b.n	8000840 <MemManage_Handler+0x4>

08000842 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000846:	e7fe      	b.n	8000846 <BusFault_Handler+0x4>

08000848 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800084c:	e7fe      	b.n	800084c <UsageFault_Handler+0x4>

0800084e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000852:	bf00      	nop
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr

0800085c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr

0800086a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr

08000878 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800087c:	f000 fdd8 	bl	8001430 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}

08000884 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000888:	4828      	ldr	r0, [pc, #160]	; (800092c <TIM2_IRQHandler+0xa8>)
 800088a:	f002 f9e5 	bl	8002c58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC3); // uncomment HAL_TIM_IRQHandler(&htim2); ^^
 800088e:	4b27      	ldr	r3, [pc, #156]	; (800092c <TIM2_IRQHandler+0xa8>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	f06f 0208 	mvn.w	r2, #8
 8000896:	611a      	str	r2, [r3, #16]

  VGA.hsync_cnt++;
 8000898:	4b25      	ldr	r3, [pc, #148]	; (8000930 <TIM2_IRQHandler+0xac>)
 800089a:	881b      	ldrh	r3, [r3, #0]
 800089c:	3301      	adds	r3, #1
 800089e:	b29a      	uxth	r2, r3
 80008a0:	4b23      	ldr	r3, [pc, #140]	; (8000930 <TIM2_IRQHandler+0xac>)
 80008a2:	801a      	strh	r2, [r3, #0]
  if (VGA.hsync_cnt >= VGA_VSYNC_PERIODE)
 80008a4:	4b22      	ldr	r3, [pc, #136]	; (8000930 <TIM2_IRQHandler+0xac>)
 80008a6:	881b      	ldrh	r3, [r3, #0]
 80008a8:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 80008ac:	d905      	bls.n	80008ba <TIM2_IRQHandler+0x36>
  {
    // -----------
    VGA.hsync_cnt = 0;
 80008ae:	4b20      	ldr	r3, [pc, #128]	; (8000930 <TIM2_IRQHandler+0xac>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr = (uint32_t)(&VGA_RAM1[0]);
 80008b4:	4a1f      	ldr	r2, [pc, #124]	; (8000934 <TIM2_IRQHandler+0xb0>)
 80008b6:	4b1e      	ldr	r3, [pc, #120]	; (8000930 <TIM2_IRQHandler+0xac>)
 80008b8:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  GPIOB->BSRR = (VGA.hsync_cnt < VGA_VSYNC_IMP) ? VGA_VSYNC_Pin << 16u: VGA_VSYNC_Pin;
 80008ba:	4b1d      	ldr	r3, [pc, #116]	; (8000930 <TIM2_IRQHandler+0xac>)
 80008bc:	881b      	ldrh	r3, [r3, #0]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d802      	bhi.n	80008c8 <TIM2_IRQHandler+0x44>
 80008c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80008c6:	e001      	b.n	80008cc <TIM2_IRQHandler+0x48>
 80008c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008cc:	4a1a      	ldr	r2, [pc, #104]	; (8000938 <TIM2_IRQHandler+0xb4>)
 80008ce:	6193      	str	r3, [r2, #24]

  // Test for DMA start
  if((VGA.hsync_cnt >= VGA_VSYNC_BILD_START) && (VGA.hsync_cnt <= VGA_VSYNC_BILD_STOP))
 80008d0:	4b17      	ldr	r3, [pc, #92]	; (8000930 <TIM2_IRQHandler+0xac>)
 80008d2:	881b      	ldrh	r3, [r3, #0]
 80008d4:	2b23      	cmp	r3, #35	; 0x23
 80008d6:	d927      	bls.n	8000928 <TIM2_IRQHandler+0xa4>
 80008d8:	4b15      	ldr	r3, [pc, #84]	; (8000930 <TIM2_IRQHandler+0xac>)
 80008da:	881b      	ldrh	r3, [r3, #0]
 80008dc:	f240 2202 	movw	r2, #514	; 0x202
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d821      	bhi.n	8000928 <TIM2_IRQHandler+0xa4>
  {
    // after FP start => DMA Transfer

    // DMA2 init
	  DMA2_Stream5->CR = VGA.dma2_cr_reg;
 80008e4:	4a15      	ldr	r2, [pc, #84]	; (800093c <TIM2_IRQHandler+0xb8>)
 80008e6:	4b12      	ldr	r3, [pc, #72]	; (8000930 <TIM2_IRQHandler+0xac>)
 80008e8:	689b      	ldr	r3, [r3, #8]
 80008ea:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR = VGA.start_adr;
 80008ec:	4a13      	ldr	r2, [pc, #76]	; (800093c <TIM2_IRQHandler+0xb8>)
 80008ee:	4b10      	ldr	r3, [pc, #64]	; (8000930 <TIM2_IRQHandler+0xac>)
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1 |= TIM_CR1_CEN; // __HAL_TIM_ENABLE(&htim1); // too slow?
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <TIM2_IRQHandler+0xbc>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a11      	ldr	r2, [pc, #68]	; (8000940 <TIM2_IRQHandler+0xbc>)
 80008fa:	f043 0301 	orr.w	r3, r3, #1
 80008fe:	6013      	str	r3, [r2, #0]
    // DMA2 enable
    __HAL_DMA_ENABLE(&hdma_tim1_up);
 8000900:	4b10      	ldr	r3, [pc, #64]	; (8000944 <TIM2_IRQHandler+0xc0>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <TIM2_IRQHandler+0xc0>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f042 0201 	orr.w	r2, r2, #1
 800090e:	601a      	str	r2, [r3, #0]
    // Test Adrespointer for high
    if(VGA.hsync_cnt & 0x01)
 8000910:	4b07      	ldr	r3, [pc, #28]	; (8000930 <TIM2_IRQHandler+0xac>)
 8000912:	881b      	ldrh	r3, [r3, #0]
 8000914:	f003 0301 	and.w	r3, r3, #1
 8000918:	2b00      	cmp	r3, #0
 800091a:	d005      	beq.n	8000928 <TIM2_IRQHandler+0xa4>
      VGA.start_adr += (VGA_DISPLAY_X + 1); // inc after Hsync
 800091c:	4b04      	ldr	r3, [pc, #16]	; (8000930 <TIM2_IRQHandler+0xac>)
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	f203 1341 	addw	r3, r3, #321	; 0x141
 8000924:	4a02      	ldr	r2, [pc, #8]	; (8000930 <TIM2_IRQHandler+0xac>)
 8000926:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000950 	.word	0x20000950
 8000930:	200009d0 	.word	0x200009d0
 8000934:	200009dc 	.word	0x200009dc
 8000938:	40020400 	.word	0x40020400
 800093c:	40026488 	.word	0x40026488
 8000940:	40010000 	.word	0x40010000
 8000944:	200008f0 	.word	0x200008f0

08000948 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	// Store the byte we received on the UART
	char uart_char = USART2->DR;
 800094e:	4b1a      	ldr	r3, [pc, #104]	; (80009b8 <USART2_IRQHandler+0x70>)
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	71fb      	strb	r3, [r7, #7]

	//Ignore the '\n' character
	if(uart_char != LINE_FEED)
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	2b0a      	cmp	r3, #10
 8000958:	d026      	beq.n	80009a8 <USART2_IRQHandler+0x60>
	{
		//Check for CR or a dot
		// There was a small bug in the terminal program.
		// By terminating your message with a dot you can ignore the CR (Enter) character
		if((uart_char == CARRIAGE_RETURN) || (uart_char == '.'))
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	2b0d      	cmp	r3, #13
 800095e:	d002      	beq.n	8000966 <USART2_IRQHandler+0x1e>
 8000960:	79fb      	ldrb	r3, [r7, #7]
 8000962:	2b2e      	cmp	r3, #46	; 0x2e
 8000964:	d10e      	bne.n	8000984 <USART2_IRQHandler+0x3c>
		{
			input.command_execute_flag = TRUE;
 8000966:	4b15      	ldr	r3, [pc, #84]	; (80009bc <USART2_IRQHandler+0x74>)
 8000968:	22ff      	movs	r2, #255	; 0xff
 800096a:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			// Store the message length for processing
			input.msglen = input.char_counter;
 800096e:	4b13      	ldr	r3, [pc, #76]	; (80009bc <USART2_IRQHandler+0x74>)
 8000970:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000974:	4a11      	ldr	r2, [pc, #68]	; (80009bc <USART2_IRQHandler+0x74>)
 8000976:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			// Reset the counter for the next line
			input.char_counter = 0;
 800097a:	4b10      	ldr	r3, [pc, #64]	; (80009bc <USART2_IRQHandler+0x74>)
 800097c:	2200      	movs	r2, #0
 800097e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8000982:	e011      	b.n	80009a8 <USART2_IRQHandler+0x60>
			//Gently exit interrupt
		}
		else
		{
			input.command_execute_flag = FALSE;
 8000984:	4b0d      	ldr	r3, [pc, #52]	; (80009bc <USART2_IRQHandler+0x74>)
 8000986:	2200      	movs	r2, #0
 8000988:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			input.line_rx_buffer[input.char_counter] = uart_char;
 800098c:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <USART2_IRQHandler+0x74>)
 800098e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000992:	4a0a      	ldr	r2, [pc, #40]	; (80009bc <USART2_IRQHandler+0x74>)
 8000994:	4413      	add	r3, r2
 8000996:	79fa      	ldrb	r2, [r7, #7]
 8000998:	705a      	strb	r2, [r3, #1]
			input.char_counter++;
 800099a:	4b08      	ldr	r3, [pc, #32]	; (80009bc <USART2_IRQHandler+0x74>)
 800099c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80009a0:	3301      	adds	r3, #1
 80009a2:	4a06      	ldr	r2, [pc, #24]	; (80009bc <USART2_IRQHandler+0x74>)
 80009a4:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
		}
	}

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009a8:	4805      	ldr	r0, [pc, #20]	; (80009c0 <USART2_IRQHandler+0x78>)
 80009aa:	f003 f8e9 	bl	8003b80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40004400 	.word	0x40004400
 80009bc:	20000098 	.word	0x20000098
 80009c0:	20000990 	.word	0x20000990

080009c4 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

    // Timer1 stop
    __HAL_TIM_DISABLE(&htim1);
 80009c8:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <DMA2_Stream5_IRQHandler+0x48>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	6a1a      	ldr	r2, [r3, #32]
 80009ce:	f241 1311 	movw	r3, #4369	; 0x1111
 80009d2:	4013      	ands	r3, r2
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d10f      	bne.n	80009f8 <DMA2_Stream5_IRQHandler+0x34>
 80009d8:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <DMA2_Stream5_IRQHandler+0x48>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	6a1a      	ldr	r2, [r3, #32]
 80009de:	f240 4344 	movw	r3, #1092	; 0x444
 80009e2:	4013      	ands	r3, r2
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d107      	bne.n	80009f8 <DMA2_Stream5_IRQHandler+0x34>
 80009e8:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <DMA2_Stream5_IRQHandler+0x48>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	4b07      	ldr	r3, [pc, #28]	; (8000a0c <DMA2_Stream5_IRQHandler+0x48>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f022 0201 	bic.w	r2, r2, #1
 80009f6:	601a      	str	r2, [r3, #0]
    // DMA2 disable
    // __HAL_DMA_DISABLE(&hdma_tim1_up); // not needed?
    // switch on black
    GPIOE->BSRR = VGA_GPIO_HINIBBLE << 16u;
 80009f8:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <DMA2_Stream5_IRQHandler+0x4c>)
 80009fa:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80009fe:	619a      	str	r2, [r3, #24]

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8000a00:	4804      	ldr	r0, [pc, #16]	; (8000a14 <DMA2_Stream5_IRQHandler+0x50>)
 8000a02:	f000 ff6f 	bl	80018e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	200008b0 	.word	0x200008b0
 8000a10:	40021000 	.word	0x40021000
 8000a14:	200008f0 	.word	0x200008f0

08000a18 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a24:	2300      	movs	r3, #0
 8000a26:	617b      	str	r3, [r7, #20]
 8000a28:	e00a      	b.n	8000a40 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a2a:	f3af 8000 	nop.w
 8000a2e:	4601      	mov	r1, r0
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	1c5a      	adds	r2, r3, #1
 8000a34:	60ba      	str	r2, [r7, #8]
 8000a36:	b2ca      	uxtb	r2, r1
 8000a38:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	617b      	str	r3, [r7, #20]
 8000a40:	697a      	ldr	r2, [r7, #20]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	dbf0      	blt.n	8000a2a <_read+0x12>
	}

return len;
 8000a48:	687b      	ldr	r3, [r7, #4]
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3718      	adds	r7, #24
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b086      	sub	sp, #24
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	60f8      	str	r0, [r7, #12]
 8000a5a:	60b9      	str	r1, [r7, #8]
 8000a5c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a5e:	2300      	movs	r3, #0
 8000a60:	617b      	str	r3, [r7, #20]
 8000a62:	e009      	b.n	8000a78 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	1c5a      	adds	r2, r3, #1
 8000a68:	60ba      	str	r2, [r7, #8]
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff fe99 	bl	80007a4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	3301      	adds	r3, #1
 8000a76:	617b      	str	r3, [r7, #20]
 8000a78:	697a      	ldr	r2, [r7, #20]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	dbf1      	blt.n	8000a64 <_write+0x12>
	}
	return len;
 8000a80:	687b      	ldr	r3, [r7, #4]
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3718      	adds	r7, #24
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <_close>:

int _close(int file)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	b083      	sub	sp, #12
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
	return -1;
 8000a92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr

08000aa2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	b083      	sub	sp, #12
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
 8000aaa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ab2:	605a      	str	r2, [r3, #4]
	return 0;
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr

08000ac2 <_isatty>:

int _isatty(int file)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	b083      	sub	sp, #12
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
	return 1;
 8000aca:	2301      	movs	r3, #1
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	60b9      	str	r1, [r7, #8]
 8000ae2:	607a      	str	r2, [r7, #4]
	return 0;
 8000ae4:	2300      	movs	r3, #0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3714      	adds	r7, #20
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
	...

08000af4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000afc:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <_sbrk+0x50>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d102      	bne.n	8000b0a <_sbrk+0x16>
		heap_end = &end;
 8000b04:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <_sbrk+0x50>)
 8000b06:	4a10      	ldr	r2, [pc, #64]	; (8000b48 <_sbrk+0x54>)
 8000b08:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <_sbrk+0x50>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <_sbrk+0x50>)
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	4413      	add	r3, r2
 8000b18:	466a      	mov	r2, sp
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d907      	bls.n	8000b2e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000b1e:	f003 fe35 	bl	800478c <__errno>
 8000b22:	4602      	mov	r2, r0
 8000b24:	230c      	movs	r3, #12
 8000b26:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000b28:	f04f 33ff 	mov.w	r3, #4294967295
 8000b2c:	e006      	b.n	8000b3c <_sbrk+0x48>
	}

	heap_end += incr;
 8000b2e:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <_sbrk+0x50>)
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4413      	add	r3, r2
 8000b36:	4a03      	ldr	r2, [pc, #12]	; (8000b44 <_sbrk+0x50>)
 8000b38:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3710      	adds	r7, #16
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	2000008c 	.word	0x2000008c
 8000b48:	200136d8 	.word	0x200136d8

08000b4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b50:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <SystemInit+0x28>)
 8000b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b56:	4a07      	ldr	r2, [pc, #28]	; (8000b74 <SystemInit+0x28>)
 8000b58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b60:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <SystemInit+0x28>)
 8000b62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b66:	609a      	str	r2, [r3, #8]
#endif
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim1_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b7e:	f107 0308 	add.w	r3, r7, #8
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b8c:	463b      	mov	r3, r7
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8000b94:	4b1e      	ldr	r3, [pc, #120]	; (8000c10 <MX_TIM1_Init+0x98>)
 8000b96:	4a1f      	ldr	r2, [pc, #124]	; (8000c14 <MX_TIM1_Init+0x9c>)
 8000b98:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = VGA_TIM1_PRESCALE;
 8000b9a:	4b1d      	ldr	r3, [pc, #116]	; (8000c10 <MX_TIM1_Init+0x98>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba0:	4b1b      	ldr	r3, [pc, #108]	; (8000c10 <MX_TIM1_Init+0x98>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = VGA_TIM1_PERIODE;
 8000ba6:	4b1a      	ldr	r3, [pc, #104]	; (8000c10 <MX_TIM1_Init+0x98>)
 8000ba8:	220b      	movs	r2, #11
 8000baa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bac:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <MX_TIM1_Init+0x98>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bb2:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <MX_TIM1_Init+0x98>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb8:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <MX_TIM1_Init+0x98>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bbe:	4814      	ldr	r0, [pc, #80]	; (8000c10 <MX_TIM1_Init+0x98>)
 8000bc0:	f001 ff0e 	bl	80029e0 <HAL_TIM_Base_Init>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8000bca:	f7ff fdfd 	bl	80007c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bd2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000bd4:	f107 0308 	add.w	r3, r7, #8
 8000bd8:	4619      	mov	r1, r3
 8000bda:	480d      	ldr	r0, [pc, #52]	; (8000c10 <MX_TIM1_Init+0x98>)
 8000bdc:	f002 fa0a 	bl	8002ff4 <HAL_TIM_ConfigClockSource>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8000be6:	f7ff fdef 	bl	80007c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bea:	2300      	movs	r3, #0
 8000bec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bf2:	463b      	mov	r3, r7
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4806      	ldr	r0, [pc, #24]	; (8000c10 <MX_TIM1_Init+0x98>)
 8000bf8:	f002 fdf6 	bl	80037e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000c02:	f7ff fde1 	bl	80007c8 <Error_Handler>
  }

}
 8000c06:	bf00      	nop
 8000c08:	3718      	adds	r7, #24
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	200008b0 	.word	0x200008b0
 8000c14:	40010000 	.word	0x40010000

08000c18 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08a      	sub	sp, #40	; 0x28
 8000c1c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c1e:	f107 0320 	add.w	r3, r7, #32
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	60da      	str	r2, [r3, #12]
 8000c34:	611a      	str	r2, [r3, #16]
 8000c36:	615a      	str	r2, [r3, #20]
 8000c38:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000c3a:	4b2a      	ldr	r3, [pc, #168]	; (8000ce4 <MX_TIM2_Init+0xcc>)
 8000c3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c40:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 8000c42:	4b28      	ldr	r3, [pc, #160]	; (8000ce4 <MX_TIM2_Init+0xcc>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c48:	4b26      	ldr	r3, [pc, #152]	; (8000ce4 <MX_TIM2_Init+0xcc>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = VGA_TIM2_HSYNC_PERIODE;
 8000c4e:	4b25      	ldr	r3, [pc, #148]	; (8000ce4 <MX_TIM2_Init+0xcc>)
 8000c50:	f640 226b 	movw	r2, #2667	; 0xa6b
 8000c54:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c56:	4b23      	ldr	r3, [pc, #140]	; (8000ce4 <MX_TIM2_Init+0xcc>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c5c:	4b21      	ldr	r3, [pc, #132]	; (8000ce4 <MX_TIM2_Init+0xcc>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c62:	4820      	ldr	r0, [pc, #128]	; (8000ce4 <MX_TIM2_Init+0xcc>)
 8000c64:	f001 ff0b 	bl	8002a7e <HAL_TIM_PWM_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000c6e:	f7ff fdab 	bl	80007c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c72:	2300      	movs	r3, #0
 8000c74:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c76:	2300      	movs	r3, #0
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c7a:	f107 0320 	add.w	r3, r7, #32
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4818      	ldr	r0, [pc, #96]	; (8000ce4 <MX_TIM2_Init+0xcc>)
 8000c82:	f002 fdb1 	bl	80037e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000c8c:	f7ff fd9c 	bl	80007c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c90:	2360      	movs	r3, #96	; 0x60
 8000c92:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = VGA_TIM2_HTRIGGER_START - VGA_TIM2_DMA_DELAY;
 8000c94:	f240 13bb 	movw	r3, #443	; 0x1bb
 8000c98:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	2208      	movs	r2, #8
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	480e      	ldr	r0, [pc, #56]	; (8000ce4 <MX_TIM2_Init+0xcc>)
 8000caa:	f002 f8dd 	bl	8002e68 <HAL_TIM_PWM_ConfigChannel>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000cb4:	f7ff fd88 	bl	80007c8 <Error_Handler>
  }
  sConfigOC.Pulse = VGA_TIM2_HSYNC_IMP;
 8000cb8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000cbc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000cbe:	1d3b      	adds	r3, r7, #4
 8000cc0:	220c      	movs	r2, #12
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4807      	ldr	r0, [pc, #28]	; (8000ce4 <MX_TIM2_Init+0xcc>)
 8000cc6:	f002 f8cf 	bl	8002e68 <HAL_TIM_PWM_ConfigChannel>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8000cd0:	f7ff fd7a 	bl	80007c8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000cd4:	4803      	ldr	r0, [pc, #12]	; (8000ce4 <MX_TIM2_Init+0xcc>)
 8000cd6:	f000 f87f 	bl	8000dd8 <HAL_TIM_MspPostInit>

}
 8000cda:	bf00      	nop
 8000cdc:	3728      	adds	r7, #40	; 0x28
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000950 	.word	0x20000950

08000ce8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a21      	ldr	r2, [pc, #132]	; (8000d7c <HAL_TIM_Base_MspInit+0x94>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d13c      	bne.n	8000d74 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	4b20      	ldr	r3, [pc, #128]	; (8000d80 <HAL_TIM_Base_MspInit+0x98>)
 8000d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d02:	4a1f      	ldr	r2, [pc, #124]	; (8000d80 <HAL_TIM_Base_MspInit+0x98>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	6453      	str	r3, [r2, #68]	; 0x44
 8000d0a:	4b1d      	ldr	r3, [pc, #116]	; (8000d80 <HAL_TIM_Base_MspInit+0x98>)
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 8000d16:	4b1b      	ldr	r3, [pc, #108]	; (8000d84 <HAL_TIM_Base_MspInit+0x9c>)
 8000d18:	4a1b      	ldr	r2, [pc, #108]	; (8000d88 <HAL_TIM_Base_MspInit+0xa0>)
 8000d1a:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8000d1c:	4b19      	ldr	r3, [pc, #100]	; (8000d84 <HAL_TIM_Base_MspInit+0x9c>)
 8000d1e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000d22:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d24:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <HAL_TIM_Base_MspInit+0x9c>)
 8000d26:	2240      	movs	r2, #64	; 0x40
 8000d28:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d2a:	4b16      	ldr	r3, [pc, #88]	; (8000d84 <HAL_TIM_Base_MspInit+0x9c>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8000d30:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <HAL_TIM_Base_MspInit+0x9c>)
 8000d32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d36:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d38:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <HAL_TIM_Base_MspInit+0x9c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d3e:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <HAL_TIM_Base_MspInit+0x9c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 8000d44:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <HAL_TIM_Base_MspInit+0x9c>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <HAL_TIM_Base_MspInit+0x9c>)
 8000d4c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d50:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d52:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <HAL_TIM_Base_MspInit+0x9c>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8000d58:	480a      	ldr	r0, [pc, #40]	; (8000d84 <HAL_TIM_Base_MspInit+0x9c>)
 8000d5a:	f000 fc9b 	bl	8001694 <HAL_DMA_Init>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <HAL_TIM_Base_MspInit+0x80>
    {
      Error_Handler();
 8000d64:	f7ff fd30 	bl	80007c8 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4a06      	ldr	r2, [pc, #24]	; (8000d84 <HAL_TIM_Base_MspInit+0x9c>)
 8000d6c:	621a      	str	r2, [r3, #32]
 8000d6e:	4a05      	ldr	r2, [pc, #20]	; (8000d84 <HAL_TIM_Base_MspInit+0x9c>)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000d74:	bf00      	nop
 8000d76:	3710      	adds	r7, #16
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40010000 	.word	0x40010000
 8000d80:	40023800 	.word	0x40023800
 8000d84:	200008f0 	.word	0x200008f0
 8000d88:	40026488 	.word	0x40026488

08000d8c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d9c:	d115      	bne.n	8000dca <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <HAL_TIM_PWM_MspInit+0x48>)
 8000da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da6:	4a0b      	ldr	r2, [pc, #44]	; (8000dd4 <HAL_TIM_PWM_MspInit+0x48>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	6413      	str	r3, [r2, #64]	; 0x40
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <HAL_TIM_PWM_MspInit+0x48>)
 8000db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	201c      	movs	r0, #28
 8000dc0:	f000 fc31 	bl	8001626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000dc4:	201c      	movs	r0, #28
 8000dc6:	f000 fc4a 	bl	800165e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000dca:	bf00      	nop
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40023800 	.word	0x40023800

08000dd8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b088      	sub	sp, #32
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 030c 	add.w	r3, r7, #12
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000df8:	d11e      	bne.n	8000e38 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60bb      	str	r3, [r7, #8]
 8000dfe:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <HAL_TIM_MspPostInit+0x68>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	4a0f      	ldr	r2, [pc, #60]	; (8000e40 <HAL_TIM_MspPostInit+0x68>)
 8000e04:	f043 0302 	orr.w	r3, r3, #2
 8000e08:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0a:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <HAL_TIM_MspPostInit+0x68>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	60bb      	str	r3, [r7, #8]
 8000e14:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = VGA_HSYNC_Pin;
 8000e16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e1a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e24:	2303      	movs	r3, #3
 8000e26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VGA_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8000e2c:	f107 030c 	add.w	r3, r7, #12
 8000e30:	4619      	mov	r1, r3
 8000e32:	4804      	ldr	r0, [pc, #16]	; (8000e44 <HAL_TIM_MspPostInit+0x6c>)
 8000e34:	f000 ffbe 	bl	8001db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000e38:	bf00      	nop
 8000e3a:	3720      	adds	r7, #32
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40023800 	.word	0x40023800
 8000e44:	40020400 	.word	0x40020400

08000e48 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000e4c:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e4e:	4a12      	ldr	r2, [pc, #72]	; (8000e98 <MX_USART2_UART_Init+0x50>)
 8000e50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e52:	4b10      	ldr	r3, [pc, #64]	; (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e60:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e66:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e6c:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e6e:	220c      	movs	r2, #12
 8000e70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e72:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e78:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e7e:	4805      	ldr	r0, [pc, #20]	; (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e80:	f002 fd42 	bl	8003908 <HAL_UART_Init>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e8a:	f7ff fc9d 	bl	80007c8 <Error_Handler>
  }

}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000990 	.word	0x20000990
 8000e98:	40004400 	.word	0x40004400

08000e9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08a      	sub	sp, #40	; 0x28
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	f107 0314 	add.w	r3, r7, #20
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a1d      	ldr	r2, [pc, #116]	; (8000f30 <HAL_UART_MspInit+0x94>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d133      	bne.n	8000f26 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	613b      	str	r3, [r7, #16]
 8000ec2:	4b1c      	ldr	r3, [pc, #112]	; (8000f34 <HAL_UART_MspInit+0x98>)
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	4a1b      	ldr	r2, [pc, #108]	; (8000f34 <HAL_UART_MspInit+0x98>)
 8000ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ece:	4b19      	ldr	r3, [pc, #100]	; (8000f34 <HAL_UART_MspInit+0x98>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed6:	613b      	str	r3, [r7, #16]
 8000ed8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <HAL_UART_MspInit+0x98>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	4a14      	ldr	r2, [pc, #80]	; (8000f34 <HAL_UART_MspInit+0x98>)
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eea:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <HAL_UART_MspInit+0x98>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ef6:	230c      	movs	r3, #12
 8000ef8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efa:	2302      	movs	r3, #2
 8000efc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f02:	2303      	movs	r3, #3
 8000f04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f06:	2307      	movs	r3, #7
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0a:	f107 0314 	add.w	r3, r7, #20
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4809      	ldr	r0, [pc, #36]	; (8000f38 <HAL_UART_MspInit+0x9c>)
 8000f12:	f000 ff4f 	bl	8001db4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2100      	movs	r1, #0
 8000f1a:	2026      	movs	r0, #38	; 0x26
 8000f1c:	f000 fb83 	bl	8001626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f20:	2026      	movs	r0, #38	; 0x26
 8000f22:	f000 fb9c 	bl	800165e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f26:	bf00      	nop
 8000f28:	3728      	adds	r7, #40	; 0x28
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40004400 	.word	0x40004400
 8000f34:	40023800 	.word	0x40023800
 8000f38:	40020000 	.word	0x40020000

08000f3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f74 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f40:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f42:	e003      	b.n	8000f4c <LoopCopyDataInit>

08000f44 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f44:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f46:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f48:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f4a:	3104      	adds	r1, #4

08000f4c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f4c:	480b      	ldr	r0, [pc, #44]	; (8000f7c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f4e:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f50:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f52:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f54:	d3f6      	bcc.n	8000f44 <CopyDataInit>
  ldr  r2, =_sbss
 8000f56:	4a0b      	ldr	r2, [pc, #44]	; (8000f84 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f58:	e002      	b.n	8000f60 <LoopFillZerobss>

08000f5a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f5a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f5c:	f842 3b04 	str.w	r3, [r2], #4

08000f60 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f60:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f62:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f64:	d3f9      	bcc.n	8000f5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f66:	f7ff fdf1 	bl	8000b4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f6a:	f003 fc15 	bl	8004798 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f6e:	f7ff fb43 	bl	80005f8 <main>
  bx  lr    
 8000f72:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f74:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000f78:	08005170 	.word	0x08005170
  ldr  r0, =_sdata
 8000f7c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f80:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000f84:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000f88:	200136d4 	.word	0x200136d4

08000f8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f8c:	e7fe      	b.n	8000f8c <ADC_IRQHandler>
	...

08000f90 <UB_VGA_Screen_Init>:
// @brief The initialisation of the VGA driver
// @details The function initialises the timer registers of timer 1 & 2.
//			It also initialises the DMA register.
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  VGA.hsync_cnt = 0;
 8000f94:	4b1f      	ldr	r3, [pc, #124]	; (8001014 <UB_VGA_Screen_Init+0x84>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	801a      	strh	r2, [r3, #0]
  VGA.start_adr = 0;
 8000f9a:	4b1e      	ldr	r3, [pc, #120]	; (8001014 <UB_VGA_Screen_Init+0x84>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg = 0;
 8000fa0:	4b1c      	ldr	r3, [pc, #112]	; (8001014 <UB_VGA_Screen_Init+0x84>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]

  GPIOB->BSRR = VGA_VSYNC_Pin;
 8000fa6:	4b1c      	ldr	r3, [pc, #112]	; (8001018 <UB_VGA_Screen_Init+0x88>)
 8000fa8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fac:	619a      	str	r2, [r3, #24]

  // TIM2
  HAL_TIM_Base_Start(&htim2);
 8000fae:	481b      	ldr	r0, [pc, #108]	; (800101c <UB_VGA_Screen_Init+0x8c>)
 8000fb0:	f001 fd41 	bl	8002a36 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000fb4:	210c      	movs	r1, #12
 8000fb6:	4819      	ldr	r0, [pc, #100]	; (800101c <UB_VGA_Screen_Init+0x8c>)
 8000fb8:	f001 fd8c 	bl	8002ad4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 8000fbc:	2108      	movs	r1, #8
 8000fbe:	4817      	ldr	r0, [pc, #92]	; (800101c <UB_VGA_Screen_Init+0x8c>)
 8000fc0:	f001 fdc6 	bl	8002b50 <HAL_TIM_PWM_Start_IT>

  // TIM1
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8000fc4:	4b16      	ldr	r3, [pc, #88]	; (8001020 <UB_VGA_Screen_Init+0x90>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	68da      	ldr	r2, [r3, #12]
 8000fca:	4b15      	ldr	r3, [pc, #84]	; (8001020 <UB_VGA_Screen_Init+0x90>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000fd2:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 8000fd4:	4b12      	ldr	r3, [pc, #72]	; (8001020 <UB_VGA_Screen_Init+0x90>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	4b11      	ldr	r3, [pc, #68]	; (8001020 <UB_VGA_Screen_Init+0x90>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f042 0201 	orr.w	r2, r2, #1
 8000fe2:	601a      	str	r2, [r3, #0]
  HAL_DMA_Start_IT(&hdma_tim1_up, (uint32_t)&VGA_RAM1[0], VGA_GPIOE_ODR_ADDRESS, VGA_DISPLAY_X + 1);
 8000fe4:	490f      	ldr	r1, [pc, #60]	; (8001024 <UB_VGA_Screen_Init+0x94>)
 8000fe6:	f240 1341 	movw	r3, #321	; 0x141
 8000fea:	4a0f      	ldr	r2, [pc, #60]	; (8001028 <UB_VGA_Screen_Init+0x98>)
 8000fec:	480f      	ldr	r0, [pc, #60]	; (800102c <UB_VGA_Screen_Init+0x9c>)
 8000fee:	f000 fbff 	bl	80017f0 <HAL_DMA_Start_IT>

  HAL_DMA_Init(&hdma_tim1_up);
 8000ff2:	480e      	ldr	r0, [pc, #56]	; (800102c <UB_VGA_Screen_Init+0x9c>)
 8000ff4:	f000 fb4e 	bl	8001694 <HAL_DMA_Init>
  __HAL_DMA_ENABLE_IT(&hdma_tim1_up, DMA_IT_TC);
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	; (800102c <UB_VGA_Screen_Init+0x9c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	4b0b      	ldr	r3, [pc, #44]	; (800102c <UB_VGA_Screen_Init+0x9c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f042 0210 	orr.w	r2, r2, #16
 8001006:	601a      	str	r2, [r3, #0]

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg = DMA2_Stream5->CR;
 8001008:	4b09      	ldr	r3, [pc, #36]	; (8001030 <UB_VGA_Screen_Init+0xa0>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a01      	ldr	r2, [pc, #4]	; (8001014 <UB_VGA_Screen_Init+0x84>)
 800100e:	6093      	str	r3, [r2, #8]
}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}
 8001014:	200009d0 	.word	0x200009d0
 8001018:	40020400 	.word	0x40020400
 800101c:	20000950 	.word	0x20000950
 8001020:	200008b0 	.word	0x200008b0
 8001024:	200009dc 	.word	0x200009dc
 8001028:	40021015 	.word	0x40021015
 800102c:	200008f0 	.word	0x200008f0
 8001030:	40026488 	.word	0x40026488

08001034 <UB_VGA_FillScreen>:
// @details This function writes for all pixels a single color to the ram.
//
// @param[in] color The 8-bit color-code to display
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 800103e:	2300      	movs	r3, #0
 8001040:	81bb      	strh	r3, [r7, #12]
 8001042:	e012      	b.n	800106a <UB_VGA_FillScreen+0x36>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 8001044:	2300      	movs	r3, #0
 8001046:	81fb      	strh	r3, [r7, #14]
 8001048:	e008      	b.n	800105c <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp, yp, color);
 800104a:	79fa      	ldrb	r2, [r7, #7]
 800104c:	89b9      	ldrh	r1, [r7, #12]
 800104e:	89fb      	ldrh	r3, [r7, #14]
 8001050:	4618      	mov	r0, r3
 8001052:	f000 f811 	bl	8001078 <UB_VGA_SetPixel>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 8001056:	89fb      	ldrh	r3, [r7, #14]
 8001058:	3301      	adds	r3, #1
 800105a:	81fb      	strh	r3, [r7, #14]
 800105c:	89fb      	ldrh	r3, [r7, #14]
 800105e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001062:	d3f2      	bcc.n	800104a <UB_VGA_FillScreen+0x16>
  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 8001064:	89bb      	ldrh	r3, [r7, #12]
 8001066:	3301      	adds	r3, #1
 8001068:	81bb      	strh	r3, [r7, #12]
 800106a:	89bb      	ldrh	r3, [r7, #12]
 800106c:	2bef      	cmp	r3, #239	; 0xef
 800106e:	d9e9      	bls.n	8001044 <UB_VGA_FillScreen+0x10>
    }
  }
}
 8001070:	bf00      	nop
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <UB_VGA_SetPixel>:
// @param[in] xp The X-coordinate of the pixel
// @param[in] yp The Y-coordinate of the pixel
// @param[in] color The 8-bit color-code to display
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	80fb      	strh	r3, [r7, #6]
 8001082:	460b      	mov	r3, r1
 8001084:	80bb      	strh	r3, [r7, #4]
 8001086:	4613      	mov	r3, r2
 8001088:	70fb      	strb	r3, [r7, #3]
  if(xp >= VGA_DISPLAY_X)
 800108a:	88fb      	ldrh	r3, [r7, #6]
 800108c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001090:	d301      	bcc.n	8001096 <UB_VGA_SetPixel+0x1e>
    xp = 0;
 8001092:	2300      	movs	r3, #0
 8001094:	80fb      	strh	r3, [r7, #6]
  if(yp >= VGA_DISPLAY_Y)
 8001096:	88bb      	ldrh	r3, [r7, #4]
 8001098:	2bef      	cmp	r3, #239	; 0xef
 800109a:	d901      	bls.n	80010a0 <UB_VGA_SetPixel+0x28>
    yp = 0;
 800109c:	2300      	movs	r3, #0
 800109e:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp * (VGA_DISPLAY_X + 1)) + xp] = color;
 80010a0:	88ba      	ldrh	r2, [r7, #4]
 80010a2:	4613      	mov	r3, r2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	4413      	add	r3, r2
 80010a8:	019b      	lsls	r3, r3, #6
 80010aa:	441a      	add	r2, r3
 80010ac:	88fb      	ldrh	r3, [r7, #6]
 80010ae:	4413      	add	r3, r2
 80010b0:	4904      	ldr	r1, [pc, #16]	; (80010c4 <UB_VGA_SetPixel+0x4c>)
 80010b2:	78fa      	ldrb	r2, [r7, #3]
 80010b4:	54ca      	strb	r2, [r1, r3]
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	200009dc 	.word	0x200009dc

080010c8 <UB_VGA_SetLine>:
// @param[in] y2 The Y-coordinate of point 2 of the line
// @param[in] color The 8-bit color-code to display
// @param[in] width The width of the line in pixels
//--------------------------------------------------------------
void UB_VGA_SetLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t color, uint16_t width)
{
 80010c8:	b590      	push	{r4, r7, lr}
 80010ca:	b089      	sub	sp, #36	; 0x24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4604      	mov	r4, r0
 80010d0:	4608      	mov	r0, r1
 80010d2:	4611      	mov	r1, r2
 80010d4:	461a      	mov	r2, r3
 80010d6:	4623      	mov	r3, r4
 80010d8:	80fb      	strh	r3, [r7, #6]
 80010da:	4603      	mov	r3, r0
 80010dc:	80bb      	strh	r3, [r7, #4]
 80010de:	460b      	mov	r3, r1
 80010e0:	807b      	strh	r3, [r7, #2]
 80010e2:	4613      	mov	r3, r2
 80010e4:	803b      	strh	r3, [r7, #0]
  uint16_t j;
  uint8_t neg;
  uint16_t amPerSide;
  float slope;

  dx=x2-x1;      /* the horizontal distance of the line */
 80010e6:	887a      	ldrh	r2, [r7, #2]
 80010e8:	88fb      	ldrh	r3, [r7, #6]
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	837b      	strh	r3, [r7, #26]
  dy=y2-y1;      /* the vertical distance of the line */
 80010f0:	883a      	ldrh	r2, [r7, #0]
 80010f2:	88bb      	ldrh	r3, [r7, #4]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	833b      	strh	r3, [r7, #24]
  dxabs=abs(dx);
 80010fa:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	bfb8      	it	lt
 8001102:	425b      	neglt	r3, r3
 8001104:	82fb      	strh	r3, [r7, #22]
  dyabs=abs(dy);
 8001106:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800110a:	2b00      	cmp	r3, #0
 800110c:	bfb8      	it	lt
 800110e:	425b      	neglt	r3, r3
 8001110:	82bb      	strh	r3, [r7, #20]
  amPerSide = width / 2;
 8001112:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001114:	085b      	lsrs	r3, r3, #1
 8001116:	827b      	strh	r3, [r7, #18]
  neg = width % 2;
 8001118:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800111a:	b2db      	uxtb	r3, r3
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	747b      	strb	r3, [r7, #17]

  if (dxabs>=dyabs) /* the line is more horizontal than vertical */
 8001122:	8afa      	ldrh	r2, [r7, #22]
 8001124:	8abb      	ldrh	r3, [r7, #20]
 8001126:	429a      	cmp	r2, r3
 8001128:	f0c0 8096 	bcc.w	8001258 <UB_VGA_SetLine+0x190>
  {
    slope=(float)dy / (float)dx;
 800112c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001130:	ee07 3a90 	vmov	s15, r3
 8001134:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001138:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800113c:	ee07 3a90 	vmov	s15, r3
 8001140:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001144:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001148:	edc7 7a03 	vstr	s15, [r7, #12]
    for(i=0;i!=dx;i++)
 800114c:	2300      	movs	r3, #0
 800114e:	83fb      	strh	r3, [r7, #30]
 8001150:	e07b      	b.n	800124a <UB_VGA_SetLine+0x182>
    {
      px=i+x1;
 8001152:	8bfa      	ldrh	r2, [r7, #30]
 8001154:	88fb      	ldrh	r3, [r7, #6]
 8001156:	4413      	add	r3, r2
 8001158:	817b      	strh	r3, [r7, #10]
      py=slope*i+y1;
 800115a:	8bfb      	ldrh	r3, [r7, #30]
 800115c:	ee07 3a90 	vmov	s15, r3
 8001160:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001164:	edd7 7a03 	vldr	s15, [r7, #12]
 8001168:	ee27 7a27 	vmul.f32	s14, s14, s15
 800116c:	88bb      	ldrh	r3, [r7, #4]
 800116e:	ee07 3a90 	vmov	s15, r3
 8001172:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001176:	ee77 7a27 	vadd.f32	s15, s14, s15
 800117a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800117e:	ee17 3a90 	vmov	r3, s15
 8001182:	813b      	strh	r3, [r7, #8]
      UB_VGA_SetPixel(px,py,color);
 8001184:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001188:	8939      	ldrh	r1, [r7, #8]
 800118a:	897b      	ldrh	r3, [r7, #10]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ff73 	bl	8001078 <UB_VGA_SetPixel>

      for(j = 0; j <= amPerSide; j++)
 8001192:	2300      	movs	r3, #0
 8001194:	83bb      	strh	r3, [r7, #28]
 8001196:	e04f      	b.n	8001238 <UB_VGA_SetLine+0x170>
      {
          py = slope * i + y1 + j;
 8001198:	8bfb      	ldrh	r3, [r7, #30]
 800119a:	ee07 3a90 	vmov	s15, r3
 800119e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80011a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011aa:	88bb      	ldrh	r3, [r7, #4]
 80011ac:	ee07 3a90 	vmov	s15, r3
 80011b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011b8:	8bbb      	ldrh	r3, [r7, #28]
 80011ba:	ee07 3a90 	vmov	s15, r3
 80011be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011ca:	ee17 3a90 	vmov	r3, s15
 80011ce:	813b      	strh	r3, [r7, #8]
          UB_VGA_SetPixel(px,py,color);
 80011d0:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80011d4:	8939      	ldrh	r1, [r7, #8]
 80011d6:	897b      	ldrh	r3, [r7, #10]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff ff4d 	bl	8001078 <UB_VGA_SetPixel>

          if(!(neg) && (j == amPerSide))
 80011de:	7c7b      	ldrb	r3, [r7, #17]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d103      	bne.n	80011ec <UB_VGA_SetLine+0x124>
 80011e4:	8bba      	ldrh	r2, [r7, #28]
 80011e6:	8a7b      	ldrh	r3, [r7, #18]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d02a      	beq.n	8001242 <UB_VGA_SetLine+0x17a>
        	  break;

          py = slope * i + y1 - j;
 80011ec:	8bfb      	ldrh	r3, [r7, #30]
 80011ee:	ee07 3a90 	vmov	s15, r3
 80011f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80011fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011fe:	88bb      	ldrh	r3, [r7, #4]
 8001200:	ee07 3a90 	vmov	s15, r3
 8001204:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001208:	ee37 7a27 	vadd.f32	s14, s14, s15
 800120c:	8bbb      	ldrh	r3, [r7, #28]
 800120e:	ee07 3a90 	vmov	s15, r3
 8001212:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001216:	ee77 7a67 	vsub.f32	s15, s14, s15
 800121a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800121e:	ee17 3a90 	vmov	r3, s15
 8001222:	813b      	strh	r3, [r7, #8]
          UB_VGA_SetPixel(px,py,color);
 8001224:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001228:	8939      	ldrh	r1, [r7, #8]
 800122a:	897b      	ldrh	r3, [r7, #10]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff ff23 	bl	8001078 <UB_VGA_SetPixel>
      for(j = 0; j <= amPerSide; j++)
 8001232:	8bbb      	ldrh	r3, [r7, #28]
 8001234:	3301      	adds	r3, #1
 8001236:	83bb      	strh	r3, [r7, #28]
 8001238:	8bba      	ldrh	r2, [r7, #28]
 800123a:	8a7b      	ldrh	r3, [r7, #18]
 800123c:	429a      	cmp	r2, r3
 800123e:	d9ab      	bls.n	8001198 <UB_VGA_SetLine+0xd0>
 8001240:	e000      	b.n	8001244 <UB_VGA_SetLine+0x17c>
        	  break;
 8001242:	bf00      	nop
    for(i=0;i!=dx;i++)
 8001244:	8bfb      	ldrh	r3, [r7, #30]
 8001246:	3301      	adds	r3, #1
 8001248:	83fb      	strh	r3, [r7, #30]
 800124a:	8bfa      	ldrh	r2, [r7, #30]
 800124c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001250:	429a      	cmp	r2, r3
 8001252:	f47f af7e 	bne.w	8001152 <UB_VGA_SetLine+0x8a>
          px = slope * i + x1 - j;
    	  UB_VGA_SetPixel(px,py,color);
      }
    }
  }
}
 8001256:	e094      	b.n	8001382 <UB_VGA_SetLine+0x2ba>
    slope=(float)dx / (float)dy;
 8001258:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800125c:	ee07 3a90 	vmov	s15, r3
 8001260:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001264:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001268:	ee07 3a90 	vmov	s15, r3
 800126c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001270:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001274:	edc7 7a03 	vstr	s15, [r7, #12]
    for(i=0;i!=dy;i++)
 8001278:	2300      	movs	r3, #0
 800127a:	83fb      	strh	r3, [r7, #30]
 800127c:	e07b      	b.n	8001376 <UB_VGA_SetLine+0x2ae>
      px=slope*i+x1;
 800127e:	8bfb      	ldrh	r3, [r7, #30]
 8001280:	ee07 3a90 	vmov	s15, r3
 8001284:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001288:	edd7 7a03 	vldr	s15, [r7, #12]
 800128c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001290:	88fb      	ldrh	r3, [r7, #6]
 8001292:	ee07 3a90 	vmov	s15, r3
 8001296:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800129a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800129e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012a2:	ee17 3a90 	vmov	r3, s15
 80012a6:	817b      	strh	r3, [r7, #10]
      py=i+y1;
 80012a8:	8bfa      	ldrh	r2, [r7, #30]
 80012aa:	88bb      	ldrh	r3, [r7, #4]
 80012ac:	4413      	add	r3, r2
 80012ae:	813b      	strh	r3, [r7, #8]
      UB_VGA_SetPixel(px,py,color);
 80012b0:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80012b4:	8939      	ldrh	r1, [r7, #8]
 80012b6:	897b      	ldrh	r3, [r7, #10]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff fedd 	bl	8001078 <UB_VGA_SetPixel>
      for(j = 0; j <= amPerSide; j++)
 80012be:	2300      	movs	r3, #0
 80012c0:	83bb      	strh	r3, [r7, #28]
 80012c2:	e04f      	b.n	8001364 <UB_VGA_SetLine+0x29c>
          px = slope * i + x1 + j;
 80012c4:	8bfb      	ldrh	r3, [r7, #30]
 80012c6:	ee07 3a90 	vmov	s15, r3
 80012ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80012d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012d6:	88fb      	ldrh	r3, [r7, #6]
 80012d8:	ee07 3a90 	vmov	s15, r3
 80012dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012e4:	8bbb      	ldrh	r3, [r7, #28]
 80012e6:	ee07 3a90 	vmov	s15, r3
 80012ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012f6:	ee17 3a90 	vmov	r3, s15
 80012fa:	817b      	strh	r3, [r7, #10]
    	  UB_VGA_SetPixel(px,py,color);
 80012fc:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001300:	8939      	ldrh	r1, [r7, #8]
 8001302:	897b      	ldrh	r3, [r7, #10]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff feb7 	bl	8001078 <UB_VGA_SetPixel>
    	  if(!(neg) && (j == amPerSide))
 800130a:	7c7b      	ldrb	r3, [r7, #17]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d103      	bne.n	8001318 <UB_VGA_SetLine+0x250>
 8001310:	8bba      	ldrh	r2, [r7, #28]
 8001312:	8a7b      	ldrh	r3, [r7, #18]
 8001314:	429a      	cmp	r2, r3
 8001316:	d02a      	beq.n	800136e <UB_VGA_SetLine+0x2a6>
          px = slope * i + x1 - j;
 8001318:	8bfb      	ldrh	r3, [r7, #30]
 800131a:	ee07 3a90 	vmov	s15, r3
 800131e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001322:	edd7 7a03 	vldr	s15, [r7, #12]
 8001326:	ee27 7a27 	vmul.f32	s14, s14, s15
 800132a:	88fb      	ldrh	r3, [r7, #6]
 800132c:	ee07 3a90 	vmov	s15, r3
 8001330:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001334:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001338:	8bbb      	ldrh	r3, [r7, #28]
 800133a:	ee07 3a90 	vmov	s15, r3
 800133e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001342:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001346:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800134a:	ee17 3a90 	vmov	r3, s15
 800134e:	817b      	strh	r3, [r7, #10]
    	  UB_VGA_SetPixel(px,py,color);
 8001350:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001354:	8939      	ldrh	r1, [r7, #8]
 8001356:	897b      	ldrh	r3, [r7, #10]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fe8d 	bl	8001078 <UB_VGA_SetPixel>
      for(j = 0; j <= amPerSide; j++)
 800135e:	8bbb      	ldrh	r3, [r7, #28]
 8001360:	3301      	adds	r3, #1
 8001362:	83bb      	strh	r3, [r7, #28]
 8001364:	8bba      	ldrh	r2, [r7, #28]
 8001366:	8a7b      	ldrh	r3, [r7, #18]
 8001368:	429a      	cmp	r2, r3
 800136a:	d9ab      	bls.n	80012c4 <UB_VGA_SetLine+0x1fc>
 800136c:	e000      	b.n	8001370 <UB_VGA_SetLine+0x2a8>
    		  break;
 800136e:	bf00      	nop
    for(i=0;i!=dy;i++)
 8001370:	8bfb      	ldrh	r3, [r7, #30]
 8001372:	3301      	adds	r3, #1
 8001374:	83fb      	strh	r3, [r7, #30]
 8001376:	8bfa      	ldrh	r2, [r7, #30]
 8001378:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800137c:	429a      	cmp	r2, r3
 800137e:	f47f af7e 	bne.w	800127e <UB_VGA_SetLine+0x1b6>
}
 8001382:	bf00      	nop
 8001384:	3724      	adds	r7, #36	; 0x24
 8001386:	46bd      	mov	sp, r7
 8001388:	bd90      	pop	{r4, r7, pc}
	...

0800138c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001390:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <HAL_Init+0x40>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a0d      	ldr	r2, [pc, #52]	; (80013cc <HAL_Init+0x40>)
 8001396:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800139a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800139c:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <HAL_Init+0x40>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a0a      	ldr	r2, [pc, #40]	; (80013cc <HAL_Init+0x40>)
 80013a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013a8:	4b08      	ldr	r3, [pc, #32]	; (80013cc <HAL_Init+0x40>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a07      	ldr	r2, [pc, #28]	; (80013cc <HAL_Init+0x40>)
 80013ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013b4:	2003      	movs	r0, #3
 80013b6:	f000 f92b 	bl	8001610 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ba:	2000      	movs	r0, #0
 80013bc:	f000 f808 	bl	80013d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013c0:	f7ff fa0a 	bl	80007d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40023c00 	.word	0x40023c00

080013d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013d8:	4b12      	ldr	r3, [pc, #72]	; (8001424 <HAL_InitTick+0x54>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	4b12      	ldr	r3, [pc, #72]	; (8001428 <HAL_InitTick+0x58>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	4619      	mov	r1, r3
 80013e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 f943 	bl	800167a <HAL_SYSTICK_Config>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e00e      	b.n	800141c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2b0f      	cmp	r3, #15
 8001402:	d80a      	bhi.n	800141a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001404:	2200      	movs	r2, #0
 8001406:	6879      	ldr	r1, [r7, #4]
 8001408:	f04f 30ff 	mov.w	r0, #4294967295
 800140c:	f000 f90b 	bl	8001626 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001410:	4a06      	ldr	r2, [pc, #24]	; (800142c <HAL_InitTick+0x5c>)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001416:	2300      	movs	r3, #0
 8001418:	e000      	b.n	800141c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
}
 800141c:	4618      	mov	r0, r3
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20000000 	.word	0x20000000
 8001428:	20000008 	.word	0x20000008
 800142c:	20000004 	.word	0x20000004

08001430 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <HAL_IncTick+0x20>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	461a      	mov	r2, r3
 800143a:	4b06      	ldr	r3, [pc, #24]	; (8001454 <HAL_IncTick+0x24>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4413      	add	r3, r2
 8001440:	4a04      	ldr	r2, [pc, #16]	; (8001454 <HAL_IncTick+0x24>)
 8001442:	6013      	str	r3, [r2, #0]
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	20000008 	.word	0x20000008
 8001454:	200136cc 	.word	0x200136cc

08001458 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  return uwTick;
 800145c:	4b03      	ldr	r3, [pc, #12]	; (800146c <HAL_GetTick+0x14>)
 800145e:	681b      	ldr	r3, [r3, #0]
}
 8001460:	4618      	mov	r0, r3
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	200136cc 	.word	0x200136cc

08001470 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001480:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001486:	68ba      	ldr	r2, [r7, #8]
 8001488:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800148c:	4013      	ands	r3, r2
 800148e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001498:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800149c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014a2:	4a04      	ldr	r2, [pc, #16]	; (80014b4 <__NVIC_SetPriorityGrouping+0x44>)
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	60d3      	str	r3, [r2, #12]
}
 80014a8:	bf00      	nop
 80014aa:	3714      	adds	r7, #20
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014bc:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <__NVIC_GetPriorityGrouping+0x18>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	0a1b      	lsrs	r3, r3, #8
 80014c2:	f003 0307 	and.w	r3, r3, #7
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	db0b      	blt.n	80014fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	f003 021f 	and.w	r2, r3, #31
 80014ec:	4907      	ldr	r1, [pc, #28]	; (800150c <__NVIC_EnableIRQ+0x38>)
 80014ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f2:	095b      	lsrs	r3, r3, #5
 80014f4:	2001      	movs	r0, #1
 80014f6:	fa00 f202 	lsl.w	r2, r0, r2
 80014fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000e100 	.word	0xe000e100

08001510 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	6039      	str	r1, [r7, #0]
 800151a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800151c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001520:	2b00      	cmp	r3, #0
 8001522:	db0a      	blt.n	800153a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	b2da      	uxtb	r2, r3
 8001528:	490c      	ldr	r1, [pc, #48]	; (800155c <__NVIC_SetPriority+0x4c>)
 800152a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152e:	0112      	lsls	r2, r2, #4
 8001530:	b2d2      	uxtb	r2, r2
 8001532:	440b      	add	r3, r1
 8001534:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001538:	e00a      	b.n	8001550 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	b2da      	uxtb	r2, r3
 800153e:	4908      	ldr	r1, [pc, #32]	; (8001560 <__NVIC_SetPriority+0x50>)
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	f003 030f 	and.w	r3, r3, #15
 8001546:	3b04      	subs	r3, #4
 8001548:	0112      	lsls	r2, r2, #4
 800154a:	b2d2      	uxtb	r2, r2
 800154c:	440b      	add	r3, r1
 800154e:	761a      	strb	r2, [r3, #24]
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	e000e100 	.word	0xe000e100
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001564:	b480      	push	{r7}
 8001566:	b089      	sub	sp, #36	; 0x24
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	f1c3 0307 	rsb	r3, r3, #7
 800157e:	2b04      	cmp	r3, #4
 8001580:	bf28      	it	cs
 8001582:	2304      	movcs	r3, #4
 8001584:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	3304      	adds	r3, #4
 800158a:	2b06      	cmp	r3, #6
 800158c:	d902      	bls.n	8001594 <NVIC_EncodePriority+0x30>
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	3b03      	subs	r3, #3
 8001592:	e000      	b.n	8001596 <NVIC_EncodePriority+0x32>
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001598:	f04f 32ff 	mov.w	r2, #4294967295
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	43da      	mvns	r2, r3
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	401a      	ands	r2, r3
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015ac:	f04f 31ff 	mov.w	r1, #4294967295
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	fa01 f303 	lsl.w	r3, r1, r3
 80015b6:	43d9      	mvns	r1, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015bc:	4313      	orrs	r3, r2
         );
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3724      	adds	r7, #36	; 0x24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
	...

080015cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3b01      	subs	r3, #1
 80015d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015dc:	d301      	bcc.n	80015e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015de:	2301      	movs	r3, #1
 80015e0:	e00f      	b.n	8001602 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015e2:	4a0a      	ldr	r2, [pc, #40]	; (800160c <SysTick_Config+0x40>)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ea:	210f      	movs	r1, #15
 80015ec:	f04f 30ff 	mov.w	r0, #4294967295
 80015f0:	f7ff ff8e 	bl	8001510 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015f4:	4b05      	ldr	r3, [pc, #20]	; (800160c <SysTick_Config+0x40>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015fa:	4b04      	ldr	r3, [pc, #16]	; (800160c <SysTick_Config+0x40>)
 80015fc:	2207      	movs	r2, #7
 80015fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	e000e010 	.word	0xe000e010

08001610 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff ff29 	bl	8001470 <__NVIC_SetPriorityGrouping>
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001626:	b580      	push	{r7, lr}
 8001628:	b086      	sub	sp, #24
 800162a:	af00      	add	r7, sp, #0
 800162c:	4603      	mov	r3, r0
 800162e:	60b9      	str	r1, [r7, #8]
 8001630:	607a      	str	r2, [r7, #4]
 8001632:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001638:	f7ff ff3e 	bl	80014b8 <__NVIC_GetPriorityGrouping>
 800163c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	68b9      	ldr	r1, [r7, #8]
 8001642:	6978      	ldr	r0, [r7, #20]
 8001644:	f7ff ff8e 	bl	8001564 <NVIC_EncodePriority>
 8001648:	4602      	mov	r2, r0
 800164a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800164e:	4611      	mov	r1, r2
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff ff5d 	bl	8001510 <__NVIC_SetPriority>
}
 8001656:	bf00      	nop
 8001658:	3718      	adds	r7, #24
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b082      	sub	sp, #8
 8001662:	af00      	add	r7, sp, #0
 8001664:	4603      	mov	r3, r0
 8001666:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff ff31 	bl	80014d4 <__NVIC_EnableIRQ>
}
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b082      	sub	sp, #8
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff ffa2 	bl	80015cc <SysTick_Config>
 8001688:	4603      	mov	r3, r0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
	...

08001694 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80016a0:	f7ff feda 	bl	8001458 <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d101      	bne.n	80016b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e099      	b.n	80017e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2202      	movs	r2, #2
 80016bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f022 0201 	bic.w	r2, r2, #1
 80016ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016d0:	e00f      	b.n	80016f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016d2:	f7ff fec1 	bl	8001458 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b05      	cmp	r3, #5
 80016de:	d908      	bls.n	80016f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2220      	movs	r2, #32
 80016e4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2203      	movs	r2, #3
 80016ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e078      	b.n	80017e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d1e8      	bne.n	80016d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001708:	697a      	ldr	r2, [r7, #20]
 800170a:	4b38      	ldr	r3, [pc, #224]	; (80017ec <HAL_DMA_Init+0x158>)
 800170c:	4013      	ands	r3, r2
 800170e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685a      	ldr	r2, [r3, #4]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800171e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	691b      	ldr	r3, [r3, #16]
 8001724:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800172a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001736:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800173e:	697a      	ldr	r2, [r7, #20]
 8001740:	4313      	orrs	r3, r2
 8001742:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001748:	2b04      	cmp	r3, #4
 800174a:	d107      	bne.n	800175c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001754:	4313      	orrs	r3, r2
 8001756:	697a      	ldr	r2, [r7, #20]
 8001758:	4313      	orrs	r3, r2
 800175a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	697a      	ldr	r2, [r7, #20]
 8001762:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	695b      	ldr	r3, [r3, #20]
 800176a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	f023 0307 	bic.w	r3, r3, #7
 8001772:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001778:	697a      	ldr	r2, [r7, #20]
 800177a:	4313      	orrs	r3, r2
 800177c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001782:	2b04      	cmp	r3, #4
 8001784:	d117      	bne.n	80017b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178a:	697a      	ldr	r2, [r7, #20]
 800178c:	4313      	orrs	r3, r2
 800178e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001794:	2b00      	cmp	r3, #0
 8001796:	d00e      	beq.n	80017b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f000 fa91 	bl	8001cc0 <DMA_CheckFifoParam>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d008      	beq.n	80017b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2240      	movs	r2, #64	; 0x40
 80017a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2201      	movs	r2, #1
 80017ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80017b2:	2301      	movs	r3, #1
 80017b4:	e016      	b.n	80017e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	697a      	ldr	r2, [r7, #20]
 80017bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f000 fa48 	bl	8001c54 <DMA_CalcBaseAndBitshift>
 80017c4:	4603      	mov	r3, r0
 80017c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017cc:	223f      	movs	r2, #63	; 0x3f
 80017ce:	409a      	lsls	r2, r3
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2201      	movs	r2, #1
 80017de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80017e2:	2300      	movs	r3, #0
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3718      	adds	r7, #24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	f010803f 	.word	0xf010803f

080017f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
 80017fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017fe:	2300      	movs	r3, #0
 8001800:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001806:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800180e:	2b01      	cmp	r3, #1
 8001810:	d101      	bne.n	8001816 <HAL_DMA_Start_IT+0x26>
 8001812:	2302      	movs	r3, #2
 8001814:	e040      	b.n	8001898 <HAL_DMA_Start_IT+0xa8>
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2201      	movs	r2, #1
 800181a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b01      	cmp	r3, #1
 8001828:	d12f      	bne.n	800188a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2202      	movs	r2, #2
 800182e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2200      	movs	r2, #0
 8001836:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	68b9      	ldr	r1, [r7, #8]
 800183e:	68f8      	ldr	r0, [r7, #12]
 8001840:	f000 f9da 	bl	8001bf8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001848:	223f      	movs	r2, #63	; 0x3f
 800184a:	409a      	lsls	r2, r3
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f042 0216 	orr.w	r2, r2, #22
 800185e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001864:	2b00      	cmp	r3, #0
 8001866:	d007      	beq.n	8001878 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f042 0208 	orr.w	r2, r2, #8
 8001876:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f042 0201 	orr.w	r2, r2, #1
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	e005      	b.n	8001896 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2200      	movs	r2, #0
 800188e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001892:	2302      	movs	r3, #2
 8001894:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001896:	7dfb      	ldrb	r3, [r7, #23]
}
 8001898:	4618      	mov	r0, r3
 800189a:	3718      	adds	r7, #24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d004      	beq.n	80018be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2280      	movs	r2, #128	; 0x80
 80018b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e00c      	b.n	80018d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2205      	movs	r2, #5
 80018c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f022 0201 	bic.w	r2, r2, #1
 80018d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80018d6:	2300      	movs	r3, #0
}
 80018d8:	4618      	mov	r0, r3
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80018ec:	2300      	movs	r3, #0
 80018ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80018f0:	4b92      	ldr	r3, [pc, #584]	; (8001b3c <HAL_DMA_IRQHandler+0x258>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a92      	ldr	r2, [pc, #584]	; (8001b40 <HAL_DMA_IRQHandler+0x25c>)
 80018f6:	fba2 2303 	umull	r2, r3, r2, r3
 80018fa:	0a9b      	lsrs	r3, r3, #10
 80018fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001902:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800190e:	2208      	movs	r2, #8
 8001910:	409a      	lsls	r2, r3
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	4013      	ands	r3, r2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d01a      	beq.n	8001950 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	2b00      	cmp	r3, #0
 8001926:	d013      	beq.n	8001950 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f022 0204 	bic.w	r2, r2, #4
 8001936:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800193c:	2208      	movs	r2, #8
 800193e:	409a      	lsls	r2, r3
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001948:	f043 0201 	orr.w	r2, r3, #1
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001954:	2201      	movs	r2, #1
 8001956:	409a      	lsls	r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	4013      	ands	r3, r2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d012      	beq.n	8001986 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	695b      	ldr	r3, [r3, #20]
 8001966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800196a:	2b00      	cmp	r3, #0
 800196c:	d00b      	beq.n	8001986 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001972:	2201      	movs	r2, #1
 8001974:	409a      	lsls	r2, r3
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800197e:	f043 0202 	orr.w	r2, r3, #2
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800198a:	2204      	movs	r2, #4
 800198c:	409a      	lsls	r2, r3
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	4013      	ands	r3, r2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d012      	beq.n	80019bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d00b      	beq.n	80019bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a8:	2204      	movs	r2, #4
 80019aa:	409a      	lsls	r2, r3
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019b4:	f043 0204 	orr.w	r2, r3, #4
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c0:	2210      	movs	r2, #16
 80019c2:	409a      	lsls	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	4013      	ands	r3, r2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d043      	beq.n	8001a54 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0308 	and.w	r3, r3, #8
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d03c      	beq.n	8001a54 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019de:	2210      	movs	r2, #16
 80019e0:	409a      	lsls	r2, r3
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d018      	beq.n	8001a26 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d108      	bne.n	8001a14 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d024      	beq.n	8001a54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	4798      	blx	r3
 8001a12:	e01f      	b.n	8001a54 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d01b      	beq.n	8001a54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	4798      	blx	r3
 8001a24:	e016      	b.n	8001a54 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d107      	bne.n	8001a44 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f022 0208 	bic.w	r2, r2, #8
 8001a42:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d003      	beq.n	8001a54 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a58:	2220      	movs	r2, #32
 8001a5a:	409a      	lsls	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	f000 808e 	beq.w	8001b82 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0310 	and.w	r3, r3, #16
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f000 8086 	beq.w	8001b82 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a7a:	2220      	movs	r2, #32
 8001a7c:	409a      	lsls	r2, r3
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b05      	cmp	r3, #5
 8001a8c:	d136      	bne.n	8001afc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f022 0216 	bic.w	r2, r2, #22
 8001a9c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	695a      	ldr	r2, [r3, #20]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001aac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d103      	bne.n	8001abe <HAL_DMA_IRQHandler+0x1da>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d007      	beq.n	8001ace <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f022 0208 	bic.w	r2, r2, #8
 8001acc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad2:	223f      	movs	r2, #63	; 0x3f
 8001ad4:	409a      	lsls	r2, r3
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d07d      	beq.n	8001bee <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	4798      	blx	r3
        }
        return;
 8001afa:	e078      	b.n	8001bee <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d01c      	beq.n	8001b44 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d108      	bne.n	8001b2a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d030      	beq.n	8001b82 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	4798      	blx	r3
 8001b28:	e02b      	b.n	8001b82 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d027      	beq.n	8001b82 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	4798      	blx	r3
 8001b3a:	e022      	b.n	8001b82 <HAL_DMA_IRQHandler+0x29e>
 8001b3c:	20000000 	.word	0x20000000
 8001b40:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d10f      	bne.n	8001b72 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f022 0210 	bic.w	r2, r2, #16
 8001b60:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d032      	beq.n	8001bf0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d022      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2205      	movs	r2, #5
 8001b9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f022 0201 	bic.w	r2, r2, #1
 8001bac:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	60bb      	str	r3, [r7, #8]
 8001bb4:	697a      	ldr	r2, [r7, #20]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d307      	bcc.n	8001bca <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1f2      	bne.n	8001bae <HAL_DMA_IRQHandler+0x2ca>
 8001bc8:	e000      	b.n	8001bcc <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001bca:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d005      	beq.n	8001bf0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	4798      	blx	r3
 8001bec:	e000      	b.n	8001bf0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001bee:	bf00      	nop
    }
  }
}
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop

08001bf8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
 8001c04:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c14:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	2b40      	cmp	r3, #64	; 0x40
 8001c24:	d108      	bne.n	8001c38 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	68ba      	ldr	r2, [r7, #8]
 8001c34:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001c36:	e007      	b.n	8001c48 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	68ba      	ldr	r2, [r7, #8]
 8001c3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	60da      	str	r2, [r3, #12]
}
 8001c48:	bf00      	nop
 8001c4a:	3714      	adds	r7, #20
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	3b10      	subs	r3, #16
 8001c64:	4a14      	ldr	r2, [pc, #80]	; (8001cb8 <DMA_CalcBaseAndBitshift+0x64>)
 8001c66:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6a:	091b      	lsrs	r3, r3, #4
 8001c6c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c6e:	4a13      	ldr	r2, [pc, #76]	; (8001cbc <DMA_CalcBaseAndBitshift+0x68>)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4413      	add	r3, r2
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	461a      	mov	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2b03      	cmp	r3, #3
 8001c80:	d909      	bls.n	8001c96 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c8a:	f023 0303 	bic.w	r3, r3, #3
 8001c8e:	1d1a      	adds	r2, r3, #4
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	659a      	str	r2, [r3, #88]	; 0x58
 8001c94:	e007      	b.n	8001ca6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c9e:	f023 0303 	bic.w	r3, r3, #3
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3714      	adds	r7, #20
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	aaaaaaab 	.word	0xaaaaaaab
 8001cbc:	080050f4 	.word	0x080050f4

08001cc0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	699b      	ldr	r3, [r3, #24]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d11f      	bne.n	8001d1a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	2b03      	cmp	r3, #3
 8001cde:	d855      	bhi.n	8001d8c <DMA_CheckFifoParam+0xcc>
 8001ce0:	a201      	add	r2, pc, #4	; (adr r2, 8001ce8 <DMA_CheckFifoParam+0x28>)
 8001ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce6:	bf00      	nop
 8001ce8:	08001cf9 	.word	0x08001cf9
 8001cec:	08001d0b 	.word	0x08001d0b
 8001cf0:	08001cf9 	.word	0x08001cf9
 8001cf4:	08001d8d 	.word	0x08001d8d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d045      	beq.n	8001d90 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d08:	e042      	b.n	8001d90 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d12:	d13f      	bne.n	8001d94 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d18:	e03c      	b.n	8001d94 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d22:	d121      	bne.n	8001d68 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	2b03      	cmp	r3, #3
 8001d28:	d836      	bhi.n	8001d98 <DMA_CheckFifoParam+0xd8>
 8001d2a:	a201      	add	r2, pc, #4	; (adr r2, 8001d30 <DMA_CheckFifoParam+0x70>)
 8001d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d30:	08001d41 	.word	0x08001d41
 8001d34:	08001d47 	.word	0x08001d47
 8001d38:	08001d41 	.word	0x08001d41
 8001d3c:	08001d59 	.word	0x08001d59
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	73fb      	strb	r3, [r7, #15]
      break;
 8001d44:	e02f      	b.n	8001da6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d024      	beq.n	8001d9c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d56:	e021      	b.n	8001d9c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d60:	d11e      	bne.n	8001da0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d66:	e01b      	b.n	8001da0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d902      	bls.n	8001d74 <DMA_CheckFifoParam+0xb4>
 8001d6e:	2b03      	cmp	r3, #3
 8001d70:	d003      	beq.n	8001d7a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d72:	e018      	b.n	8001da6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	73fb      	strb	r3, [r7, #15]
      break;
 8001d78:	e015      	b.n	8001da6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00e      	beq.n	8001da4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	73fb      	strb	r3, [r7, #15]
      break;
 8001d8a:	e00b      	b.n	8001da4 <DMA_CheckFifoParam+0xe4>
      break;
 8001d8c:	bf00      	nop
 8001d8e:	e00a      	b.n	8001da6 <DMA_CheckFifoParam+0xe6>
      break;
 8001d90:	bf00      	nop
 8001d92:	e008      	b.n	8001da6 <DMA_CheckFifoParam+0xe6>
      break;
 8001d94:	bf00      	nop
 8001d96:	e006      	b.n	8001da6 <DMA_CheckFifoParam+0xe6>
      break;
 8001d98:	bf00      	nop
 8001d9a:	e004      	b.n	8001da6 <DMA_CheckFifoParam+0xe6>
      break;
 8001d9c:	bf00      	nop
 8001d9e:	e002      	b.n	8001da6 <DMA_CheckFifoParam+0xe6>
      break;   
 8001da0:	bf00      	nop
 8001da2:	e000      	b.n	8001da6 <DMA_CheckFifoParam+0xe6>
      break;
 8001da4:	bf00      	nop
    }
  } 
  
  return status; 
 8001da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3714      	adds	r7, #20
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b089      	sub	sp, #36	; 0x24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61fb      	str	r3, [r7, #28]
 8001dce:	e16b      	b.n	80020a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	4013      	ands	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	f040 815a 	bne.w	80020a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d00b      	beq.n	8001e0e <HAL_GPIO_Init+0x5a>
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d007      	beq.n	8001e0e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e02:	2b11      	cmp	r3, #17
 8001e04:	d003      	beq.n	8001e0e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b12      	cmp	r3, #18
 8001e0c:	d130      	bne.n	8001e70 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	2203      	movs	r2, #3
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4013      	ands	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	68da      	ldr	r2, [r3, #12]
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e44:	2201      	movs	r2, #1
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4013      	ands	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	091b      	lsrs	r3, r3, #4
 8001e5a:	f003 0201 	and.w	r2, r3, #1
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	2203      	movs	r2, #3
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	43db      	mvns	r3, r3
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	4013      	ands	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d003      	beq.n	8001eb0 <HAL_GPIO_Init+0xfc>
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	2b12      	cmp	r3, #18
 8001eae:	d123      	bne.n	8001ef8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	08da      	lsrs	r2, r3, #3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3208      	adds	r2, #8
 8001eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	f003 0307 	and.w	r3, r3, #7
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	220f      	movs	r2, #15
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	691a      	ldr	r2, [r3, #16]
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	08da      	lsrs	r2, r3, #3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	3208      	adds	r2, #8
 8001ef2:	69b9      	ldr	r1, [r7, #24]
 8001ef4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	2203      	movs	r2, #3
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f003 0203 	and.w	r2, r3, #3
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	f000 80b4 	beq.w	80020a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	4b5f      	ldr	r3, [pc, #380]	; (80020bc <HAL_GPIO_Init+0x308>)
 8001f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f42:	4a5e      	ldr	r2, [pc, #376]	; (80020bc <HAL_GPIO_Init+0x308>)
 8001f44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f48:	6453      	str	r3, [r2, #68]	; 0x44
 8001f4a:	4b5c      	ldr	r3, [pc, #368]	; (80020bc <HAL_GPIO_Init+0x308>)
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f56:	4a5a      	ldr	r2, [pc, #360]	; (80020c0 <HAL_GPIO_Init+0x30c>)
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	089b      	lsrs	r3, r3, #2
 8001f5c:	3302      	adds	r3, #2
 8001f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	f003 0303 	and.w	r3, r3, #3
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	220f      	movs	r2, #15
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	43db      	mvns	r3, r3
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4013      	ands	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a51      	ldr	r2, [pc, #324]	; (80020c4 <HAL_GPIO_Init+0x310>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d02b      	beq.n	8001fda <HAL_GPIO_Init+0x226>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a50      	ldr	r2, [pc, #320]	; (80020c8 <HAL_GPIO_Init+0x314>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d025      	beq.n	8001fd6 <HAL_GPIO_Init+0x222>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a4f      	ldr	r2, [pc, #316]	; (80020cc <HAL_GPIO_Init+0x318>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d01f      	beq.n	8001fd2 <HAL_GPIO_Init+0x21e>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a4e      	ldr	r2, [pc, #312]	; (80020d0 <HAL_GPIO_Init+0x31c>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d019      	beq.n	8001fce <HAL_GPIO_Init+0x21a>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a4d      	ldr	r2, [pc, #308]	; (80020d4 <HAL_GPIO_Init+0x320>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d013      	beq.n	8001fca <HAL_GPIO_Init+0x216>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a4c      	ldr	r2, [pc, #304]	; (80020d8 <HAL_GPIO_Init+0x324>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d00d      	beq.n	8001fc6 <HAL_GPIO_Init+0x212>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a4b      	ldr	r2, [pc, #300]	; (80020dc <HAL_GPIO_Init+0x328>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d007      	beq.n	8001fc2 <HAL_GPIO_Init+0x20e>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a4a      	ldr	r2, [pc, #296]	; (80020e0 <HAL_GPIO_Init+0x32c>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d101      	bne.n	8001fbe <HAL_GPIO_Init+0x20a>
 8001fba:	2307      	movs	r3, #7
 8001fbc:	e00e      	b.n	8001fdc <HAL_GPIO_Init+0x228>
 8001fbe:	2308      	movs	r3, #8
 8001fc0:	e00c      	b.n	8001fdc <HAL_GPIO_Init+0x228>
 8001fc2:	2306      	movs	r3, #6
 8001fc4:	e00a      	b.n	8001fdc <HAL_GPIO_Init+0x228>
 8001fc6:	2305      	movs	r3, #5
 8001fc8:	e008      	b.n	8001fdc <HAL_GPIO_Init+0x228>
 8001fca:	2304      	movs	r3, #4
 8001fcc:	e006      	b.n	8001fdc <HAL_GPIO_Init+0x228>
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e004      	b.n	8001fdc <HAL_GPIO_Init+0x228>
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	e002      	b.n	8001fdc <HAL_GPIO_Init+0x228>
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e000      	b.n	8001fdc <HAL_GPIO_Init+0x228>
 8001fda:	2300      	movs	r3, #0
 8001fdc:	69fa      	ldr	r2, [r7, #28]
 8001fde:	f002 0203 	and.w	r2, r2, #3
 8001fe2:	0092      	lsls	r2, r2, #2
 8001fe4:	4093      	lsls	r3, r2
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fec:	4934      	ldr	r1, [pc, #208]	; (80020c0 <HAL_GPIO_Init+0x30c>)
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	089b      	lsrs	r3, r3, #2
 8001ff2:	3302      	adds	r3, #2
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ffa:	4b3a      	ldr	r3, [pc, #232]	; (80020e4 <HAL_GPIO_Init+0x330>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	43db      	mvns	r3, r3
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	4013      	ands	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	4313      	orrs	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800201e:	4a31      	ldr	r2, [pc, #196]	; (80020e4 <HAL_GPIO_Init+0x330>)
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002024:	4b2f      	ldr	r3, [pc, #188]	; (80020e4 <HAL_GPIO_Init+0x330>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	43db      	mvns	r3, r3
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	4013      	ands	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d003      	beq.n	8002048 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	4313      	orrs	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002048:	4a26      	ldr	r2, [pc, #152]	; (80020e4 <HAL_GPIO_Init+0x330>)
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800204e:	4b25      	ldr	r3, [pc, #148]	; (80020e4 <HAL_GPIO_Init+0x330>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	43db      	mvns	r3, r3
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	4013      	ands	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	4313      	orrs	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002072:	4a1c      	ldr	r2, [pc, #112]	; (80020e4 <HAL_GPIO_Init+0x330>)
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002078:	4b1a      	ldr	r3, [pc, #104]	; (80020e4 <HAL_GPIO_Init+0x330>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	43db      	mvns	r3, r3
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4013      	ands	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	4313      	orrs	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800209c:	4a11      	ldr	r2, [pc, #68]	; (80020e4 <HAL_GPIO_Init+0x330>)
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	3301      	adds	r3, #1
 80020a6:	61fb      	str	r3, [r7, #28]
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	2b0f      	cmp	r3, #15
 80020ac:	f67f ae90 	bls.w	8001dd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020b0:	bf00      	nop
 80020b2:	3724      	adds	r7, #36	; 0x24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	40023800 	.word	0x40023800
 80020c0:	40013800 	.word	0x40013800
 80020c4:	40020000 	.word	0x40020000
 80020c8:	40020400 	.word	0x40020400
 80020cc:	40020800 	.word	0x40020800
 80020d0:	40020c00 	.word	0x40020c00
 80020d4:	40021000 	.word	0x40021000
 80020d8:	40021400 	.word	0x40021400
 80020dc:	40021800 	.word	0x40021800
 80020e0:	40021c00 	.word	0x40021c00
 80020e4:	40013c00 	.word	0x40013c00

080020e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	460b      	mov	r3, r1
 80020f2:	807b      	strh	r3, [r7, #2]
 80020f4:	4613      	mov	r3, r2
 80020f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020f8:	787b      	ldrb	r3, [r7, #1]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d003      	beq.n	8002106 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020fe:	887a      	ldrh	r2, [r7, #2]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002104:	e003      	b.n	800210e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002106:	887b      	ldrh	r3, [r7, #2]
 8002108:	041a      	lsls	r2, r3, #16
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	619a      	str	r2, [r3, #24]
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
	...

0800211c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e25b      	b.n	80025e6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b00      	cmp	r3, #0
 8002138:	d075      	beq.n	8002226 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800213a:	4ba3      	ldr	r3, [pc, #652]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f003 030c 	and.w	r3, r3, #12
 8002142:	2b04      	cmp	r3, #4
 8002144:	d00c      	beq.n	8002160 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002146:	4ba0      	ldr	r3, [pc, #640]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800214e:	2b08      	cmp	r3, #8
 8002150:	d112      	bne.n	8002178 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002152:	4b9d      	ldr	r3, [pc, #628]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800215a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800215e:	d10b      	bne.n	8002178 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002160:	4b99      	ldr	r3, [pc, #612]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d05b      	beq.n	8002224 <HAL_RCC_OscConfig+0x108>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d157      	bne.n	8002224 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e236      	b.n	80025e6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002180:	d106      	bne.n	8002190 <HAL_RCC_OscConfig+0x74>
 8002182:	4b91      	ldr	r3, [pc, #580]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a90      	ldr	r2, [pc, #576]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 8002188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800218c:	6013      	str	r3, [r2, #0]
 800218e:	e01d      	b.n	80021cc <HAL_RCC_OscConfig+0xb0>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002198:	d10c      	bne.n	80021b4 <HAL_RCC_OscConfig+0x98>
 800219a:	4b8b      	ldr	r3, [pc, #556]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a8a      	ldr	r2, [pc, #552]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 80021a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021a4:	6013      	str	r3, [r2, #0]
 80021a6:	4b88      	ldr	r3, [pc, #544]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a87      	ldr	r2, [pc, #540]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 80021ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b0:	6013      	str	r3, [r2, #0]
 80021b2:	e00b      	b.n	80021cc <HAL_RCC_OscConfig+0xb0>
 80021b4:	4b84      	ldr	r3, [pc, #528]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a83      	ldr	r2, [pc, #524]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 80021ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021be:	6013      	str	r3, [r2, #0]
 80021c0:	4b81      	ldr	r3, [pc, #516]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a80      	ldr	r2, [pc, #512]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 80021c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d013      	beq.n	80021fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d4:	f7ff f940 	bl	8001458 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021dc:	f7ff f93c 	bl	8001458 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b64      	cmp	r3, #100	; 0x64
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e1fb      	b.n	80025e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ee:	4b76      	ldr	r3, [pc, #472]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d0f0      	beq.n	80021dc <HAL_RCC_OscConfig+0xc0>
 80021fa:	e014      	b.n	8002226 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fc:	f7ff f92c 	bl	8001458 <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002204:	f7ff f928 	bl	8001458 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b64      	cmp	r3, #100	; 0x64
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e1e7      	b.n	80025e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002216:	4b6c      	ldr	r3, [pc, #432]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1f0      	bne.n	8002204 <HAL_RCC_OscConfig+0xe8>
 8002222:	e000      	b.n	8002226 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002224:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d063      	beq.n	80022fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002232:	4b65      	ldr	r3, [pc, #404]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f003 030c 	and.w	r3, r3, #12
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00b      	beq.n	8002256 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800223e:	4b62      	ldr	r3, [pc, #392]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002246:	2b08      	cmp	r3, #8
 8002248:	d11c      	bne.n	8002284 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800224a:	4b5f      	ldr	r3, [pc, #380]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d116      	bne.n	8002284 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002256:	4b5c      	ldr	r3, [pc, #368]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d005      	beq.n	800226e <HAL_RCC_OscConfig+0x152>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d001      	beq.n	800226e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e1bb      	b.n	80025e6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800226e:	4b56      	ldr	r3, [pc, #344]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	4952      	ldr	r1, [pc, #328]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 800227e:	4313      	orrs	r3, r2
 8002280:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002282:	e03a      	b.n	80022fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d020      	beq.n	80022ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800228c:	4b4f      	ldr	r3, [pc, #316]	; (80023cc <HAL_RCC_OscConfig+0x2b0>)
 800228e:	2201      	movs	r2, #1
 8002290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002292:	f7ff f8e1 	bl	8001458 <HAL_GetTick>
 8002296:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002298:	e008      	b.n	80022ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800229a:	f7ff f8dd 	bl	8001458 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e19c      	b.n	80025e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ac:	4b46      	ldr	r3, [pc, #280]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d0f0      	beq.n	800229a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b8:	4b43      	ldr	r3, [pc, #268]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	00db      	lsls	r3, r3, #3
 80022c6:	4940      	ldr	r1, [pc, #256]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	600b      	str	r3, [r1, #0]
 80022cc:	e015      	b.n	80022fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ce:	4b3f      	ldr	r3, [pc, #252]	; (80023cc <HAL_RCC_OscConfig+0x2b0>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d4:	f7ff f8c0 	bl	8001458 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022dc:	f7ff f8bc 	bl	8001458 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e17b      	b.n	80025e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ee:	4b36      	ldr	r3, [pc, #216]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1f0      	bne.n	80022dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0308 	and.w	r3, r3, #8
 8002302:	2b00      	cmp	r3, #0
 8002304:	d030      	beq.n	8002368 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d016      	beq.n	800233c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800230e:	4b30      	ldr	r3, [pc, #192]	; (80023d0 <HAL_RCC_OscConfig+0x2b4>)
 8002310:	2201      	movs	r2, #1
 8002312:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002314:	f7ff f8a0 	bl	8001458 <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800231c:	f7ff f89c 	bl	8001458 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e15b      	b.n	80025e6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800232e:	4b26      	ldr	r3, [pc, #152]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 8002330:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0f0      	beq.n	800231c <HAL_RCC_OscConfig+0x200>
 800233a:	e015      	b.n	8002368 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800233c:	4b24      	ldr	r3, [pc, #144]	; (80023d0 <HAL_RCC_OscConfig+0x2b4>)
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002342:	f7ff f889 	bl	8001458 <HAL_GetTick>
 8002346:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002348:	e008      	b.n	800235c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800234a:	f7ff f885 	bl	8001458 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e144      	b.n	80025e6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800235c:	4b1a      	ldr	r3, [pc, #104]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 800235e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1f0      	bne.n	800234a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0304 	and.w	r3, r3, #4
 8002370:	2b00      	cmp	r3, #0
 8002372:	f000 80a0 	beq.w	80024b6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002376:	2300      	movs	r3, #0
 8002378:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800237a:	4b13      	ldr	r3, [pc, #76]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d10f      	bne.n	80023a6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002386:	2300      	movs	r3, #0
 8002388:	60bb      	str	r3, [r7, #8]
 800238a:	4b0f      	ldr	r3, [pc, #60]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	4a0e      	ldr	r2, [pc, #56]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 8002390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002394:	6413      	str	r3, [r2, #64]	; 0x40
 8002396:	4b0c      	ldr	r3, [pc, #48]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 8002398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800239e:	60bb      	str	r3, [r7, #8]
 80023a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023a2:	2301      	movs	r3, #1
 80023a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a6:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <HAL_RCC_OscConfig+0x2b8>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d121      	bne.n	80023f6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023b2:	4b08      	ldr	r3, [pc, #32]	; (80023d4 <HAL_RCC_OscConfig+0x2b8>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a07      	ldr	r2, [pc, #28]	; (80023d4 <HAL_RCC_OscConfig+0x2b8>)
 80023b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023be:	f7ff f84b 	bl	8001458 <HAL_GetTick>
 80023c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c4:	e011      	b.n	80023ea <HAL_RCC_OscConfig+0x2ce>
 80023c6:	bf00      	nop
 80023c8:	40023800 	.word	0x40023800
 80023cc:	42470000 	.word	0x42470000
 80023d0:	42470e80 	.word	0x42470e80
 80023d4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023d8:	f7ff f83e 	bl	8001458 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e0fd      	b.n	80025e6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ea:	4b81      	ldr	r3, [pc, #516]	; (80025f0 <HAL_RCC_OscConfig+0x4d4>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d0f0      	beq.n	80023d8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d106      	bne.n	800240c <HAL_RCC_OscConfig+0x2f0>
 80023fe:	4b7d      	ldr	r3, [pc, #500]	; (80025f4 <HAL_RCC_OscConfig+0x4d8>)
 8002400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002402:	4a7c      	ldr	r2, [pc, #496]	; (80025f4 <HAL_RCC_OscConfig+0x4d8>)
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	6713      	str	r3, [r2, #112]	; 0x70
 800240a:	e01c      	b.n	8002446 <HAL_RCC_OscConfig+0x32a>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	2b05      	cmp	r3, #5
 8002412:	d10c      	bne.n	800242e <HAL_RCC_OscConfig+0x312>
 8002414:	4b77      	ldr	r3, [pc, #476]	; (80025f4 <HAL_RCC_OscConfig+0x4d8>)
 8002416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002418:	4a76      	ldr	r2, [pc, #472]	; (80025f4 <HAL_RCC_OscConfig+0x4d8>)
 800241a:	f043 0304 	orr.w	r3, r3, #4
 800241e:	6713      	str	r3, [r2, #112]	; 0x70
 8002420:	4b74      	ldr	r3, [pc, #464]	; (80025f4 <HAL_RCC_OscConfig+0x4d8>)
 8002422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002424:	4a73      	ldr	r2, [pc, #460]	; (80025f4 <HAL_RCC_OscConfig+0x4d8>)
 8002426:	f043 0301 	orr.w	r3, r3, #1
 800242a:	6713      	str	r3, [r2, #112]	; 0x70
 800242c:	e00b      	b.n	8002446 <HAL_RCC_OscConfig+0x32a>
 800242e:	4b71      	ldr	r3, [pc, #452]	; (80025f4 <HAL_RCC_OscConfig+0x4d8>)
 8002430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002432:	4a70      	ldr	r2, [pc, #448]	; (80025f4 <HAL_RCC_OscConfig+0x4d8>)
 8002434:	f023 0301 	bic.w	r3, r3, #1
 8002438:	6713      	str	r3, [r2, #112]	; 0x70
 800243a:	4b6e      	ldr	r3, [pc, #440]	; (80025f4 <HAL_RCC_OscConfig+0x4d8>)
 800243c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243e:	4a6d      	ldr	r2, [pc, #436]	; (80025f4 <HAL_RCC_OscConfig+0x4d8>)
 8002440:	f023 0304 	bic.w	r3, r3, #4
 8002444:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d015      	beq.n	800247a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800244e:	f7ff f803 	bl	8001458 <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002454:	e00a      	b.n	800246c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002456:	f7fe ffff 	bl	8001458 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	f241 3288 	movw	r2, #5000	; 0x1388
 8002464:	4293      	cmp	r3, r2
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e0bc      	b.n	80025e6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800246c:	4b61      	ldr	r3, [pc, #388]	; (80025f4 <HAL_RCC_OscConfig+0x4d8>)
 800246e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d0ee      	beq.n	8002456 <HAL_RCC_OscConfig+0x33a>
 8002478:	e014      	b.n	80024a4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800247a:	f7fe ffed 	bl	8001458 <HAL_GetTick>
 800247e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002480:	e00a      	b.n	8002498 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002482:	f7fe ffe9 	bl	8001458 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002490:	4293      	cmp	r3, r2
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e0a6      	b.n	80025e6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002498:	4b56      	ldr	r3, [pc, #344]	; (80025f4 <HAL_RCC_OscConfig+0x4d8>)
 800249a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1ee      	bne.n	8002482 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024a4:	7dfb      	ldrb	r3, [r7, #23]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d105      	bne.n	80024b6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024aa:	4b52      	ldr	r3, [pc, #328]	; (80025f4 <HAL_RCC_OscConfig+0x4d8>)
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	4a51      	ldr	r2, [pc, #324]	; (80025f4 <HAL_RCC_OscConfig+0x4d8>)
 80024b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024b4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f000 8092 	beq.w	80025e4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024c0:	4b4c      	ldr	r3, [pc, #304]	; (80025f4 <HAL_RCC_OscConfig+0x4d8>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f003 030c 	and.w	r3, r3, #12
 80024c8:	2b08      	cmp	r3, #8
 80024ca:	d05c      	beq.n	8002586 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d141      	bne.n	8002558 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024d4:	4b48      	ldr	r3, [pc, #288]	; (80025f8 <HAL_RCC_OscConfig+0x4dc>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024da:	f7fe ffbd 	bl	8001458 <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024e0:	e008      	b.n	80024f4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024e2:	f7fe ffb9 	bl	8001458 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e078      	b.n	80025e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024f4:	4b3f      	ldr	r3, [pc, #252]	; (80025f4 <HAL_RCC_OscConfig+0x4d8>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1f0      	bne.n	80024e2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	69da      	ldr	r2, [r3, #28]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	431a      	orrs	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250e:	019b      	lsls	r3, r3, #6
 8002510:	431a      	orrs	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002516:	085b      	lsrs	r3, r3, #1
 8002518:	3b01      	subs	r3, #1
 800251a:	041b      	lsls	r3, r3, #16
 800251c:	431a      	orrs	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002522:	061b      	lsls	r3, r3, #24
 8002524:	4933      	ldr	r1, [pc, #204]	; (80025f4 <HAL_RCC_OscConfig+0x4d8>)
 8002526:	4313      	orrs	r3, r2
 8002528:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800252a:	4b33      	ldr	r3, [pc, #204]	; (80025f8 <HAL_RCC_OscConfig+0x4dc>)
 800252c:	2201      	movs	r2, #1
 800252e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002530:	f7fe ff92 	bl	8001458 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002538:	f7fe ff8e 	bl	8001458 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e04d      	b.n	80025e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800254a:	4b2a      	ldr	r3, [pc, #168]	; (80025f4 <HAL_RCC_OscConfig+0x4d8>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f0      	beq.n	8002538 <HAL_RCC_OscConfig+0x41c>
 8002556:	e045      	b.n	80025e4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002558:	4b27      	ldr	r3, [pc, #156]	; (80025f8 <HAL_RCC_OscConfig+0x4dc>)
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255e:	f7fe ff7b 	bl	8001458 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002566:	f7fe ff77 	bl	8001458 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e036      	b.n	80025e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002578:	4b1e      	ldr	r3, [pc, #120]	; (80025f4 <HAL_RCC_OscConfig+0x4d8>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1f0      	bne.n	8002566 <HAL_RCC_OscConfig+0x44a>
 8002584:	e02e      	b.n	80025e4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d101      	bne.n	8002592 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e029      	b.n	80025e6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002592:	4b18      	ldr	r3, [pc, #96]	; (80025f4 <HAL_RCC_OscConfig+0x4d8>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d11c      	bne.n	80025e0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d115      	bne.n	80025e0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025ba:	4013      	ands	r3, r2
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d10d      	bne.n	80025e0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d106      	bne.n	80025e0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80025dc:	429a      	cmp	r2, r3
 80025de:	d001      	beq.n	80025e4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e000      	b.n	80025e6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3718      	adds	r7, #24
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	40007000 	.word	0x40007000
 80025f4:	40023800 	.word	0x40023800
 80025f8:	42470060 	.word	0x42470060

080025fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d101      	bne.n	8002610 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e0cc      	b.n	80027aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002610:	4b68      	ldr	r3, [pc, #416]	; (80027b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 030f 	and.w	r3, r3, #15
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	429a      	cmp	r2, r3
 800261c:	d90c      	bls.n	8002638 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261e:	4b65      	ldr	r3, [pc, #404]	; (80027b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002626:	4b63      	ldr	r3, [pc, #396]	; (80027b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 030f 	and.w	r3, r3, #15
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	429a      	cmp	r2, r3
 8002632:	d001      	beq.n	8002638 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e0b8      	b.n	80027aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d020      	beq.n	8002686 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0304 	and.w	r3, r3, #4
 800264c:	2b00      	cmp	r3, #0
 800264e:	d005      	beq.n	800265c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002650:	4b59      	ldr	r3, [pc, #356]	; (80027b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	4a58      	ldr	r2, [pc, #352]	; (80027b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002656:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800265a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0308 	and.w	r3, r3, #8
 8002664:	2b00      	cmp	r3, #0
 8002666:	d005      	beq.n	8002674 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002668:	4b53      	ldr	r3, [pc, #332]	; (80027b8 <HAL_RCC_ClockConfig+0x1bc>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	4a52      	ldr	r2, [pc, #328]	; (80027b8 <HAL_RCC_ClockConfig+0x1bc>)
 800266e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002672:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002674:	4b50      	ldr	r3, [pc, #320]	; (80027b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	494d      	ldr	r1, [pc, #308]	; (80027b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002682:	4313      	orrs	r3, r2
 8002684:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	2b00      	cmp	r3, #0
 8002690:	d044      	beq.n	800271c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d107      	bne.n	80026aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800269a:	4b47      	ldr	r3, [pc, #284]	; (80027b8 <HAL_RCC_ClockConfig+0x1bc>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d119      	bne.n	80026da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e07f      	b.n	80027aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d003      	beq.n	80026ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026b6:	2b03      	cmp	r3, #3
 80026b8:	d107      	bne.n	80026ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ba:	4b3f      	ldr	r3, [pc, #252]	; (80027b8 <HAL_RCC_ClockConfig+0x1bc>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d109      	bne.n	80026da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e06f      	b.n	80027aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ca:	4b3b      	ldr	r3, [pc, #236]	; (80027b8 <HAL_RCC_ClockConfig+0x1bc>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e067      	b.n	80027aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026da:	4b37      	ldr	r3, [pc, #220]	; (80027b8 <HAL_RCC_ClockConfig+0x1bc>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f023 0203 	bic.w	r2, r3, #3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	4934      	ldr	r1, [pc, #208]	; (80027b8 <HAL_RCC_ClockConfig+0x1bc>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026ec:	f7fe feb4 	bl	8001458 <HAL_GetTick>
 80026f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026f2:	e00a      	b.n	800270a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026f4:	f7fe feb0 	bl	8001458 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002702:	4293      	cmp	r3, r2
 8002704:	d901      	bls.n	800270a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e04f      	b.n	80027aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800270a:	4b2b      	ldr	r3, [pc, #172]	; (80027b8 <HAL_RCC_ClockConfig+0x1bc>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 020c 	and.w	r2, r3, #12
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	429a      	cmp	r2, r3
 800271a:	d1eb      	bne.n	80026f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800271c:	4b25      	ldr	r3, [pc, #148]	; (80027b4 <HAL_RCC_ClockConfig+0x1b8>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 030f 	and.w	r3, r3, #15
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	429a      	cmp	r2, r3
 8002728:	d20c      	bcs.n	8002744 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800272a:	4b22      	ldr	r3, [pc, #136]	; (80027b4 <HAL_RCC_ClockConfig+0x1b8>)
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002732:	4b20      	ldr	r3, [pc, #128]	; (80027b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 030f 	and.w	r3, r3, #15
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	429a      	cmp	r2, r3
 800273e:	d001      	beq.n	8002744 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e032      	b.n	80027aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0304 	and.w	r3, r3, #4
 800274c:	2b00      	cmp	r3, #0
 800274e:	d008      	beq.n	8002762 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002750:	4b19      	ldr	r3, [pc, #100]	; (80027b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	4916      	ldr	r1, [pc, #88]	; (80027b8 <HAL_RCC_ClockConfig+0x1bc>)
 800275e:	4313      	orrs	r3, r2
 8002760:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0308 	and.w	r3, r3, #8
 800276a:	2b00      	cmp	r3, #0
 800276c:	d009      	beq.n	8002782 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800276e:	4b12      	ldr	r3, [pc, #72]	; (80027b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	490e      	ldr	r1, [pc, #56]	; (80027b8 <HAL_RCC_ClockConfig+0x1bc>)
 800277e:	4313      	orrs	r3, r2
 8002780:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002782:	f000 f821 	bl	80027c8 <HAL_RCC_GetSysClockFreq>
 8002786:	4601      	mov	r1, r0
 8002788:	4b0b      	ldr	r3, [pc, #44]	; (80027b8 <HAL_RCC_ClockConfig+0x1bc>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	091b      	lsrs	r3, r3, #4
 800278e:	f003 030f 	and.w	r3, r3, #15
 8002792:	4a0a      	ldr	r2, [pc, #40]	; (80027bc <HAL_RCC_ClockConfig+0x1c0>)
 8002794:	5cd3      	ldrb	r3, [r2, r3]
 8002796:	fa21 f303 	lsr.w	r3, r1, r3
 800279a:	4a09      	ldr	r2, [pc, #36]	; (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 800279c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800279e:	4b09      	ldr	r3, [pc, #36]	; (80027c4 <HAL_RCC_ClockConfig+0x1c8>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7fe fe14 	bl	80013d0 <HAL_InitTick>

  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40023c00 	.word	0x40023c00
 80027b8:	40023800 	.word	0x40023800
 80027bc:	080050dc 	.word	0x080050dc
 80027c0:	20000000 	.word	0x20000000
 80027c4:	20000004 	.word	0x20000004

080027c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027ce:	2300      	movs	r3, #0
 80027d0:	607b      	str	r3, [r7, #4]
 80027d2:	2300      	movs	r3, #0
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	2300      	movs	r3, #0
 80027d8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80027da:	2300      	movs	r3, #0
 80027dc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027de:	4b63      	ldr	r3, [pc, #396]	; (800296c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 030c 	and.w	r3, r3, #12
 80027e6:	2b04      	cmp	r3, #4
 80027e8:	d007      	beq.n	80027fa <HAL_RCC_GetSysClockFreq+0x32>
 80027ea:	2b08      	cmp	r3, #8
 80027ec:	d008      	beq.n	8002800 <HAL_RCC_GetSysClockFreq+0x38>
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f040 80b4 	bne.w	800295c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027f4:	4b5e      	ldr	r3, [pc, #376]	; (8002970 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80027f6:	60bb      	str	r3, [r7, #8]
       break;
 80027f8:	e0b3      	b.n	8002962 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027fa:	4b5e      	ldr	r3, [pc, #376]	; (8002974 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80027fc:	60bb      	str	r3, [r7, #8]
      break;
 80027fe:	e0b0      	b.n	8002962 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002800:	4b5a      	ldr	r3, [pc, #360]	; (800296c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002808:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800280a:	4b58      	ldr	r3, [pc, #352]	; (800296c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d04a      	beq.n	80028ac <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002816:	4b55      	ldr	r3, [pc, #340]	; (800296c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	099b      	lsrs	r3, r3, #6
 800281c:	f04f 0400 	mov.w	r4, #0
 8002820:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002824:	f04f 0200 	mov.w	r2, #0
 8002828:	ea03 0501 	and.w	r5, r3, r1
 800282c:	ea04 0602 	and.w	r6, r4, r2
 8002830:	4629      	mov	r1, r5
 8002832:	4632      	mov	r2, r6
 8002834:	f04f 0300 	mov.w	r3, #0
 8002838:	f04f 0400 	mov.w	r4, #0
 800283c:	0154      	lsls	r4, r2, #5
 800283e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002842:	014b      	lsls	r3, r1, #5
 8002844:	4619      	mov	r1, r3
 8002846:	4622      	mov	r2, r4
 8002848:	1b49      	subs	r1, r1, r5
 800284a:	eb62 0206 	sbc.w	r2, r2, r6
 800284e:	f04f 0300 	mov.w	r3, #0
 8002852:	f04f 0400 	mov.w	r4, #0
 8002856:	0194      	lsls	r4, r2, #6
 8002858:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800285c:	018b      	lsls	r3, r1, #6
 800285e:	1a5b      	subs	r3, r3, r1
 8002860:	eb64 0402 	sbc.w	r4, r4, r2
 8002864:	f04f 0100 	mov.w	r1, #0
 8002868:	f04f 0200 	mov.w	r2, #0
 800286c:	00e2      	lsls	r2, r4, #3
 800286e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002872:	00d9      	lsls	r1, r3, #3
 8002874:	460b      	mov	r3, r1
 8002876:	4614      	mov	r4, r2
 8002878:	195b      	adds	r3, r3, r5
 800287a:	eb44 0406 	adc.w	r4, r4, r6
 800287e:	f04f 0100 	mov.w	r1, #0
 8002882:	f04f 0200 	mov.w	r2, #0
 8002886:	0262      	lsls	r2, r4, #9
 8002888:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800288c:	0259      	lsls	r1, r3, #9
 800288e:	460b      	mov	r3, r1
 8002890:	4614      	mov	r4, r2
 8002892:	4618      	mov	r0, r3
 8002894:	4621      	mov	r1, r4
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f04f 0400 	mov.w	r4, #0
 800289c:	461a      	mov	r2, r3
 800289e:	4623      	mov	r3, r4
 80028a0:	f7fd fc92 	bl	80001c8 <__aeabi_uldivmod>
 80028a4:	4603      	mov	r3, r0
 80028a6:	460c      	mov	r4, r1
 80028a8:	60fb      	str	r3, [r7, #12]
 80028aa:	e049      	b.n	8002940 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028ac:	4b2f      	ldr	r3, [pc, #188]	; (800296c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	099b      	lsrs	r3, r3, #6
 80028b2:	f04f 0400 	mov.w	r4, #0
 80028b6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80028ba:	f04f 0200 	mov.w	r2, #0
 80028be:	ea03 0501 	and.w	r5, r3, r1
 80028c2:	ea04 0602 	and.w	r6, r4, r2
 80028c6:	4629      	mov	r1, r5
 80028c8:	4632      	mov	r2, r6
 80028ca:	f04f 0300 	mov.w	r3, #0
 80028ce:	f04f 0400 	mov.w	r4, #0
 80028d2:	0154      	lsls	r4, r2, #5
 80028d4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80028d8:	014b      	lsls	r3, r1, #5
 80028da:	4619      	mov	r1, r3
 80028dc:	4622      	mov	r2, r4
 80028de:	1b49      	subs	r1, r1, r5
 80028e0:	eb62 0206 	sbc.w	r2, r2, r6
 80028e4:	f04f 0300 	mov.w	r3, #0
 80028e8:	f04f 0400 	mov.w	r4, #0
 80028ec:	0194      	lsls	r4, r2, #6
 80028ee:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80028f2:	018b      	lsls	r3, r1, #6
 80028f4:	1a5b      	subs	r3, r3, r1
 80028f6:	eb64 0402 	sbc.w	r4, r4, r2
 80028fa:	f04f 0100 	mov.w	r1, #0
 80028fe:	f04f 0200 	mov.w	r2, #0
 8002902:	00e2      	lsls	r2, r4, #3
 8002904:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002908:	00d9      	lsls	r1, r3, #3
 800290a:	460b      	mov	r3, r1
 800290c:	4614      	mov	r4, r2
 800290e:	195b      	adds	r3, r3, r5
 8002910:	eb44 0406 	adc.w	r4, r4, r6
 8002914:	f04f 0100 	mov.w	r1, #0
 8002918:	f04f 0200 	mov.w	r2, #0
 800291c:	02a2      	lsls	r2, r4, #10
 800291e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002922:	0299      	lsls	r1, r3, #10
 8002924:	460b      	mov	r3, r1
 8002926:	4614      	mov	r4, r2
 8002928:	4618      	mov	r0, r3
 800292a:	4621      	mov	r1, r4
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f04f 0400 	mov.w	r4, #0
 8002932:	461a      	mov	r2, r3
 8002934:	4623      	mov	r3, r4
 8002936:	f7fd fc47 	bl	80001c8 <__aeabi_uldivmod>
 800293a:	4603      	mov	r3, r0
 800293c:	460c      	mov	r4, r1
 800293e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002940:	4b0a      	ldr	r3, [pc, #40]	; (800296c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	0c1b      	lsrs	r3, r3, #16
 8002946:	f003 0303 	and.w	r3, r3, #3
 800294a:	3301      	adds	r3, #1
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	fbb2 f3f3 	udiv	r3, r2, r3
 8002958:	60bb      	str	r3, [r7, #8]
      break;
 800295a:	e002      	b.n	8002962 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800295c:	4b04      	ldr	r3, [pc, #16]	; (8002970 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800295e:	60bb      	str	r3, [r7, #8]
      break;
 8002960:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002962:	68bb      	ldr	r3, [r7, #8]
}
 8002964:	4618      	mov	r0, r3
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800296c:	40023800 	.word	0x40023800
 8002970:	00f42400 	.word	0x00f42400
 8002974:	007a1200 	.word	0x007a1200

08002978 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800297c:	4b03      	ldr	r3, [pc, #12]	; (800298c <HAL_RCC_GetHCLKFreq+0x14>)
 800297e:	681b      	ldr	r3, [r3, #0]
}
 8002980:	4618      	mov	r0, r3
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	20000000 	.word	0x20000000

08002990 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002994:	f7ff fff0 	bl	8002978 <HAL_RCC_GetHCLKFreq>
 8002998:	4601      	mov	r1, r0
 800299a:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	0a9b      	lsrs	r3, r3, #10
 80029a0:	f003 0307 	and.w	r3, r3, #7
 80029a4:	4a03      	ldr	r2, [pc, #12]	; (80029b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029a6:	5cd3      	ldrb	r3, [r2, r3]
 80029a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40023800 	.word	0x40023800
 80029b4:	080050ec 	.word	0x080050ec

080029b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80029bc:	f7ff ffdc 	bl	8002978 <HAL_RCC_GetHCLKFreq>
 80029c0:	4601      	mov	r1, r0
 80029c2:	4b05      	ldr	r3, [pc, #20]	; (80029d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	0b5b      	lsrs	r3, r3, #13
 80029c8:	f003 0307 	and.w	r3, r3, #7
 80029cc:	4a03      	ldr	r2, [pc, #12]	; (80029dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80029ce:	5cd3      	ldrb	r3, [r2, r3]
 80029d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	40023800 	.word	0x40023800
 80029dc:	080050ec 	.word	0x080050ec

080029e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e01d      	b.n	8002a2e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d106      	bne.n	8002a0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7fe f96e 	bl	8000ce8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2202      	movs	r2, #2
 8002a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	3304      	adds	r3, #4
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4610      	mov	r0, r2
 8002a20:	f000 fbd2 	bl	80031c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b085      	sub	sp, #20
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2202      	movs	r2, #2
 8002a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 0307 	and.w	r3, r3, #7
 8002a50:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2b06      	cmp	r3, #6
 8002a56:	d007      	beq.n	8002a68 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f042 0201 	orr.w	r2, r2, #1
 8002a66:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3714      	adds	r7, #20
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b082      	sub	sp, #8
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d101      	bne.n	8002a90 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e01d      	b.n	8002acc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d106      	bne.n	8002aaa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f7fe f971 	bl	8000d8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2202      	movs	r2, #2
 8002aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	3304      	adds	r3, #4
 8002aba:	4619      	mov	r1, r3
 8002abc:	4610      	mov	r0, r2
 8002abe:	f000 fb83 	bl	80031c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3708      	adds	r7, #8
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	6839      	ldr	r1, [r7, #0]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f000 fe58 	bl	800379c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a15      	ldr	r2, [pc, #84]	; (8002b48 <HAL_TIM_PWM_Start+0x74>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d004      	beq.n	8002b00 <HAL_TIM_PWM_Start+0x2c>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a14      	ldr	r2, [pc, #80]	; (8002b4c <HAL_TIM_PWM_Start+0x78>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d101      	bne.n	8002b04 <HAL_TIM_PWM_Start+0x30>
 8002b00:	2301      	movs	r3, #1
 8002b02:	e000      	b.n	8002b06 <HAL_TIM_PWM_Start+0x32>
 8002b04:	2300      	movs	r3, #0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d007      	beq.n	8002b1a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b18:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2b06      	cmp	r3, #6
 8002b2a:	d007      	beq.n	8002b3c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f042 0201 	orr.w	r2, r2, #1
 8002b3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	40010000 	.word	0x40010000
 8002b4c:	40010400 	.word	0x40010400

08002b50 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	2b0c      	cmp	r3, #12
 8002b5e:	d841      	bhi.n	8002be4 <HAL_TIM_PWM_Start_IT+0x94>
 8002b60:	a201      	add	r2, pc, #4	; (adr r2, 8002b68 <HAL_TIM_PWM_Start_IT+0x18>)
 8002b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b66:	bf00      	nop
 8002b68:	08002b9d 	.word	0x08002b9d
 8002b6c:	08002be5 	.word	0x08002be5
 8002b70:	08002be5 	.word	0x08002be5
 8002b74:	08002be5 	.word	0x08002be5
 8002b78:	08002baf 	.word	0x08002baf
 8002b7c:	08002be5 	.word	0x08002be5
 8002b80:	08002be5 	.word	0x08002be5
 8002b84:	08002be5 	.word	0x08002be5
 8002b88:	08002bc1 	.word	0x08002bc1
 8002b8c:	08002be5 	.word	0x08002be5
 8002b90:	08002be5 	.word	0x08002be5
 8002b94:	08002be5 	.word	0x08002be5
 8002b98:	08002bd3 	.word	0x08002bd3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68da      	ldr	r2, [r3, #12]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f042 0202 	orr.w	r2, r2, #2
 8002baa:	60da      	str	r2, [r3, #12]
      break;
 8002bac:	e01b      	b.n	8002be6 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68da      	ldr	r2, [r3, #12]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f042 0204 	orr.w	r2, r2, #4
 8002bbc:	60da      	str	r2, [r3, #12]
      break;
 8002bbe:	e012      	b.n	8002be6 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68da      	ldr	r2, [r3, #12]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f042 0208 	orr.w	r2, r2, #8
 8002bce:	60da      	str	r2, [r3, #12]
      break;
 8002bd0:	e009      	b.n	8002be6 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68da      	ldr	r2, [r3, #12]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f042 0210 	orr.w	r2, r2, #16
 8002be0:	60da      	str	r2, [r3, #12]
      break;
 8002be2:	e000      	b.n	8002be6 <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 8002be4:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2201      	movs	r2, #1
 8002bec:	6839      	ldr	r1, [r7, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f000 fdd4 	bl	800379c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a15      	ldr	r2, [pc, #84]	; (8002c50 <HAL_TIM_PWM_Start_IT+0x100>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d004      	beq.n	8002c08 <HAL_TIM_PWM_Start_IT+0xb8>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a14      	ldr	r2, [pc, #80]	; (8002c54 <HAL_TIM_PWM_Start_IT+0x104>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d101      	bne.n	8002c0c <HAL_TIM_PWM_Start_IT+0xbc>
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e000      	b.n	8002c0e <HAL_TIM_PWM_Start_IT+0xbe>
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d007      	beq.n	8002c22 <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 0307 	and.w	r3, r3, #7
 8002c2c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2b06      	cmp	r3, #6
 8002c32:	d007      	beq.n	8002c44 <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f042 0201 	orr.w	r2, r2, #1
 8002c42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	40010000 	.word	0x40010000
 8002c54:	40010400 	.word	0x40010400

08002c58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d122      	bne.n	8002cb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d11b      	bne.n	8002cb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f06f 0202 	mvn.w	r2, #2
 8002c84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	f003 0303 	and.w	r3, r3, #3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d003      	beq.n	8002ca2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 fa75 	bl	800318a <HAL_TIM_IC_CaptureCallback>
 8002ca0:	e005      	b.n	8002cae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 fa67 	bl	8003176 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 fa78 	bl	800319e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	f003 0304 	and.w	r3, r3, #4
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	d122      	bne.n	8002d08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	2b04      	cmp	r3, #4
 8002cce:	d11b      	bne.n	8002d08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f06f 0204 	mvn.w	r2, #4
 8002cd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2202      	movs	r2, #2
 8002cde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d003      	beq.n	8002cf6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 fa4b 	bl	800318a <HAL_TIM_IC_CaptureCallback>
 8002cf4:	e005      	b.n	8002d02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 fa3d 	bl	8003176 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 fa4e 	bl	800319e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	f003 0308 	and.w	r3, r3, #8
 8002d12:	2b08      	cmp	r3, #8
 8002d14:	d122      	bne.n	8002d5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	f003 0308 	and.w	r3, r3, #8
 8002d20:	2b08      	cmp	r3, #8
 8002d22:	d11b      	bne.n	8002d5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f06f 0208 	mvn.w	r2, #8
 8002d2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2204      	movs	r2, #4
 8002d32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	f003 0303 	and.w	r3, r3, #3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d003      	beq.n	8002d4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 fa21 	bl	800318a <HAL_TIM_IC_CaptureCallback>
 8002d48:	e005      	b.n	8002d56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 fa13 	bl	8003176 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 fa24 	bl	800319e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	f003 0310 	and.w	r3, r3, #16
 8002d66:	2b10      	cmp	r3, #16
 8002d68:	d122      	bne.n	8002db0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	f003 0310 	and.w	r3, r3, #16
 8002d74:	2b10      	cmp	r3, #16
 8002d76:	d11b      	bne.n	8002db0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f06f 0210 	mvn.w	r2, #16
 8002d80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2208      	movs	r2, #8
 8002d86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 f9f7 	bl	800318a <HAL_TIM_IC_CaptureCallback>
 8002d9c:	e005      	b.n	8002daa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 f9e9 	bl	8003176 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 f9fa 	bl	800319e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d10e      	bne.n	8002ddc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d107      	bne.n	8002ddc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f06f 0201 	mvn.w	r2, #1
 8002dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 f9c3 	bl	8003162 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de6:	2b80      	cmp	r3, #128	; 0x80
 8002de8:	d10e      	bne.n	8002e08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df4:	2b80      	cmp	r3, #128	; 0x80
 8002df6:	d107      	bne.n	8002e08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 fd76 	bl	80038f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e12:	2b40      	cmp	r3, #64	; 0x40
 8002e14:	d10e      	bne.n	8002e34 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e20:	2b40      	cmp	r3, #64	; 0x40
 8002e22:	d107      	bne.n	8002e34 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f9bf 	bl	80031b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	f003 0320 	and.w	r3, r3, #32
 8002e3e:	2b20      	cmp	r3, #32
 8002e40:	d10e      	bne.n	8002e60 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	f003 0320 	and.w	r3, r3, #32
 8002e4c:	2b20      	cmp	r3, #32
 8002e4e:	d107      	bne.n	8002e60 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f06f 0220 	mvn.w	r2, #32
 8002e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 fd40 	bl	80038e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e60:	bf00      	nop
 8002e62:	3708      	adds	r7, #8
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d101      	bne.n	8002e82 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002e7e:	2302      	movs	r3, #2
 8002e80:	e0b4      	b.n	8002fec <HAL_TIM_PWM_ConfigChannel+0x184>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2202      	movs	r2, #2
 8002e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2b0c      	cmp	r3, #12
 8002e96:	f200 809f 	bhi.w	8002fd8 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002e9a:	a201      	add	r2, pc, #4	; (adr r2, 8002ea0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea0:	08002ed5 	.word	0x08002ed5
 8002ea4:	08002fd9 	.word	0x08002fd9
 8002ea8:	08002fd9 	.word	0x08002fd9
 8002eac:	08002fd9 	.word	0x08002fd9
 8002eb0:	08002f15 	.word	0x08002f15
 8002eb4:	08002fd9 	.word	0x08002fd9
 8002eb8:	08002fd9 	.word	0x08002fd9
 8002ebc:	08002fd9 	.word	0x08002fd9
 8002ec0:	08002f57 	.word	0x08002f57
 8002ec4:	08002fd9 	.word	0x08002fd9
 8002ec8:	08002fd9 	.word	0x08002fd9
 8002ecc:	08002fd9 	.word	0x08002fd9
 8002ed0:	08002f97 	.word	0x08002f97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68b9      	ldr	r1, [r7, #8]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 fa14 	bl	8003308 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	699a      	ldr	r2, [r3, #24]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f042 0208 	orr.w	r2, r2, #8
 8002eee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	699a      	ldr	r2, [r3, #24]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0204 	bic.w	r2, r2, #4
 8002efe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6999      	ldr	r1, [r3, #24]
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	691a      	ldr	r2, [r3, #16]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	619a      	str	r2, [r3, #24]
      break;
 8002f12:	e062      	b.n	8002fda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68b9      	ldr	r1, [r7, #8]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 fa64 	bl	80033e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	699a      	ldr	r2, [r3, #24]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	699a      	ldr	r2, [r3, #24]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6999      	ldr	r1, [r3, #24]
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	021a      	lsls	r2, r3, #8
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	430a      	orrs	r2, r1
 8002f52:	619a      	str	r2, [r3, #24]
      break;
 8002f54:	e041      	b.n	8002fda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68b9      	ldr	r1, [r7, #8]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f000 fab9 	bl	80034d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	69da      	ldr	r2, [r3, #28]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f042 0208 	orr.w	r2, r2, #8
 8002f70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	69da      	ldr	r2, [r3, #28]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 0204 	bic.w	r2, r2, #4
 8002f80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	69d9      	ldr	r1, [r3, #28]
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	691a      	ldr	r2, [r3, #16]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	61da      	str	r2, [r3, #28]
      break;
 8002f94:	e021      	b.n	8002fda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68b9      	ldr	r1, [r7, #8]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f000 fb0d 	bl	80035bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	69da      	ldr	r2, [r3, #28]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	69da      	ldr	r2, [r3, #28]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	69d9      	ldr	r1, [r3, #28]
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	021a      	lsls	r2, r3, #8
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	61da      	str	r2, [r3, #28]
      break;
 8002fd6:	e000      	b.n	8002fda <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002fd8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003004:	2b01      	cmp	r3, #1
 8003006:	d101      	bne.n	800300c <HAL_TIM_ConfigClockSource+0x18>
 8003008:	2302      	movs	r3, #2
 800300a:	e0a6      	b.n	800315a <HAL_TIM_ConfigClockSource+0x166>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2202      	movs	r2, #2
 8003018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800302a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003032:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2b40      	cmp	r3, #64	; 0x40
 8003042:	d067      	beq.n	8003114 <HAL_TIM_ConfigClockSource+0x120>
 8003044:	2b40      	cmp	r3, #64	; 0x40
 8003046:	d80b      	bhi.n	8003060 <HAL_TIM_ConfigClockSource+0x6c>
 8003048:	2b10      	cmp	r3, #16
 800304a:	d073      	beq.n	8003134 <HAL_TIM_ConfigClockSource+0x140>
 800304c:	2b10      	cmp	r3, #16
 800304e:	d802      	bhi.n	8003056 <HAL_TIM_ConfigClockSource+0x62>
 8003050:	2b00      	cmp	r3, #0
 8003052:	d06f      	beq.n	8003134 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003054:	e078      	b.n	8003148 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003056:	2b20      	cmp	r3, #32
 8003058:	d06c      	beq.n	8003134 <HAL_TIM_ConfigClockSource+0x140>
 800305a:	2b30      	cmp	r3, #48	; 0x30
 800305c:	d06a      	beq.n	8003134 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800305e:	e073      	b.n	8003148 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003060:	2b70      	cmp	r3, #112	; 0x70
 8003062:	d00d      	beq.n	8003080 <HAL_TIM_ConfigClockSource+0x8c>
 8003064:	2b70      	cmp	r3, #112	; 0x70
 8003066:	d804      	bhi.n	8003072 <HAL_TIM_ConfigClockSource+0x7e>
 8003068:	2b50      	cmp	r3, #80	; 0x50
 800306a:	d033      	beq.n	80030d4 <HAL_TIM_ConfigClockSource+0xe0>
 800306c:	2b60      	cmp	r3, #96	; 0x60
 800306e:	d041      	beq.n	80030f4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003070:	e06a      	b.n	8003148 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003076:	d066      	beq.n	8003146 <HAL_TIM_ConfigClockSource+0x152>
 8003078:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800307c:	d017      	beq.n	80030ae <HAL_TIM_ConfigClockSource+0xba>
      break;
 800307e:	e063      	b.n	8003148 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6818      	ldr	r0, [r3, #0]
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	6899      	ldr	r1, [r3, #8]
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	f000 fb64 	bl	800375c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030a2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	609a      	str	r2, [r3, #8]
      break;
 80030ac:	e04c      	b.n	8003148 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6818      	ldr	r0, [r3, #0]
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	6899      	ldr	r1, [r3, #8]
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685a      	ldr	r2, [r3, #4]
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	f000 fb4d 	bl	800375c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030d0:	609a      	str	r2, [r3, #8]
      break;
 80030d2:	e039      	b.n	8003148 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6818      	ldr	r0, [r3, #0]
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	6859      	ldr	r1, [r3, #4]
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	461a      	mov	r2, r3
 80030e2:	f000 fac1 	bl	8003668 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2150      	movs	r1, #80	; 0x50
 80030ec:	4618      	mov	r0, r3
 80030ee:	f000 fb1a 	bl	8003726 <TIM_ITRx_SetConfig>
      break;
 80030f2:	e029      	b.n	8003148 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6818      	ldr	r0, [r3, #0]
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	6859      	ldr	r1, [r3, #4]
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	461a      	mov	r2, r3
 8003102:	f000 fae0 	bl	80036c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2160      	movs	r1, #96	; 0x60
 800310c:	4618      	mov	r0, r3
 800310e:	f000 fb0a 	bl	8003726 <TIM_ITRx_SetConfig>
      break;
 8003112:	e019      	b.n	8003148 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6818      	ldr	r0, [r3, #0]
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	6859      	ldr	r1, [r3, #4]
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	461a      	mov	r2, r3
 8003122:	f000 faa1 	bl	8003668 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2140      	movs	r1, #64	; 0x40
 800312c:	4618      	mov	r0, r3
 800312e:	f000 fafa 	bl	8003726 <TIM_ITRx_SetConfig>
      break;
 8003132:	e009      	b.n	8003148 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4619      	mov	r1, r3
 800313e:	4610      	mov	r0, r2
 8003140:	f000 faf1 	bl	8003726 <TIM_ITRx_SetConfig>
      break;
 8003144:	e000      	b.n	8003148 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003146:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3710      	adds	r7, #16
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003162:	b480      	push	{r7}
 8003164:	b083      	sub	sp, #12
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800316a:	bf00      	nop
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr

08003176 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003176:	b480      	push	{r7}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800317e:	bf00      	nop
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr

0800318a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800318a:	b480      	push	{r7}
 800318c:	b083      	sub	sp, #12
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800319e:	b480      	push	{r7}
 80031a0:	b083      	sub	sp, #12
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031ba:	bf00      	nop
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
	...

080031c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a40      	ldr	r2, [pc, #256]	; (80032dc <TIM_Base_SetConfig+0x114>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d013      	beq.n	8003208 <TIM_Base_SetConfig+0x40>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031e6:	d00f      	beq.n	8003208 <TIM_Base_SetConfig+0x40>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a3d      	ldr	r2, [pc, #244]	; (80032e0 <TIM_Base_SetConfig+0x118>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d00b      	beq.n	8003208 <TIM_Base_SetConfig+0x40>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a3c      	ldr	r2, [pc, #240]	; (80032e4 <TIM_Base_SetConfig+0x11c>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d007      	beq.n	8003208 <TIM_Base_SetConfig+0x40>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a3b      	ldr	r2, [pc, #236]	; (80032e8 <TIM_Base_SetConfig+0x120>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d003      	beq.n	8003208 <TIM_Base_SetConfig+0x40>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a3a      	ldr	r2, [pc, #232]	; (80032ec <TIM_Base_SetConfig+0x124>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d108      	bne.n	800321a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800320e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	4313      	orrs	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a2f      	ldr	r2, [pc, #188]	; (80032dc <TIM_Base_SetConfig+0x114>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d02b      	beq.n	800327a <TIM_Base_SetConfig+0xb2>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003228:	d027      	beq.n	800327a <TIM_Base_SetConfig+0xb2>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a2c      	ldr	r2, [pc, #176]	; (80032e0 <TIM_Base_SetConfig+0x118>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d023      	beq.n	800327a <TIM_Base_SetConfig+0xb2>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a2b      	ldr	r2, [pc, #172]	; (80032e4 <TIM_Base_SetConfig+0x11c>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d01f      	beq.n	800327a <TIM_Base_SetConfig+0xb2>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a2a      	ldr	r2, [pc, #168]	; (80032e8 <TIM_Base_SetConfig+0x120>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d01b      	beq.n	800327a <TIM_Base_SetConfig+0xb2>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a29      	ldr	r2, [pc, #164]	; (80032ec <TIM_Base_SetConfig+0x124>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d017      	beq.n	800327a <TIM_Base_SetConfig+0xb2>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a28      	ldr	r2, [pc, #160]	; (80032f0 <TIM_Base_SetConfig+0x128>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d013      	beq.n	800327a <TIM_Base_SetConfig+0xb2>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a27      	ldr	r2, [pc, #156]	; (80032f4 <TIM_Base_SetConfig+0x12c>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d00f      	beq.n	800327a <TIM_Base_SetConfig+0xb2>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a26      	ldr	r2, [pc, #152]	; (80032f8 <TIM_Base_SetConfig+0x130>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d00b      	beq.n	800327a <TIM_Base_SetConfig+0xb2>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a25      	ldr	r2, [pc, #148]	; (80032fc <TIM_Base_SetConfig+0x134>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d007      	beq.n	800327a <TIM_Base_SetConfig+0xb2>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a24      	ldr	r2, [pc, #144]	; (8003300 <TIM_Base_SetConfig+0x138>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d003      	beq.n	800327a <TIM_Base_SetConfig+0xb2>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a23      	ldr	r2, [pc, #140]	; (8003304 <TIM_Base_SetConfig+0x13c>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d108      	bne.n	800328c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003280:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	4313      	orrs	r3, r2
 800328a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	4313      	orrs	r3, r2
 8003298:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	689a      	ldr	r2, [r3, #8]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a0a      	ldr	r2, [pc, #40]	; (80032dc <TIM_Base_SetConfig+0x114>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d003      	beq.n	80032c0 <TIM_Base_SetConfig+0xf8>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a0c      	ldr	r2, [pc, #48]	; (80032ec <TIM_Base_SetConfig+0x124>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d103      	bne.n	80032c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	691a      	ldr	r2, [r3, #16]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	615a      	str	r2, [r3, #20]
}
 80032ce:	bf00      	nop
 80032d0:	3714      	adds	r7, #20
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	40010000 	.word	0x40010000
 80032e0:	40000400 	.word	0x40000400
 80032e4:	40000800 	.word	0x40000800
 80032e8:	40000c00 	.word	0x40000c00
 80032ec:	40010400 	.word	0x40010400
 80032f0:	40014000 	.word	0x40014000
 80032f4:	40014400 	.word	0x40014400
 80032f8:	40014800 	.word	0x40014800
 80032fc:	40001800 	.word	0x40001800
 8003300:	40001c00 	.word	0x40001c00
 8003304:	40002000 	.word	0x40002000

08003308 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003308:	b480      	push	{r7}
 800330a:	b087      	sub	sp, #28
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a1b      	ldr	r3, [r3, #32]
 8003316:	f023 0201 	bic.w	r2, r3, #1
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f023 0303 	bic.w	r3, r3, #3
 800333e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	4313      	orrs	r3, r2
 8003348:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	f023 0302 	bic.w	r3, r3, #2
 8003350:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	4313      	orrs	r3, r2
 800335a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a20      	ldr	r2, [pc, #128]	; (80033e0 <TIM_OC1_SetConfig+0xd8>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d003      	beq.n	800336c <TIM_OC1_SetConfig+0x64>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a1f      	ldr	r2, [pc, #124]	; (80033e4 <TIM_OC1_SetConfig+0xdc>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d10c      	bne.n	8003386 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	f023 0308 	bic.w	r3, r3, #8
 8003372:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	4313      	orrs	r3, r2
 800337c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	f023 0304 	bic.w	r3, r3, #4
 8003384:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a15      	ldr	r2, [pc, #84]	; (80033e0 <TIM_OC1_SetConfig+0xd8>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d003      	beq.n	8003396 <TIM_OC1_SetConfig+0x8e>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a14      	ldr	r2, [pc, #80]	; (80033e4 <TIM_OC1_SetConfig+0xdc>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d111      	bne.n	80033ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800339c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685a      	ldr	r2, [r3, #4]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	697a      	ldr	r2, [r7, #20]
 80033d2:	621a      	str	r2, [r3, #32]
}
 80033d4:	bf00      	nop
 80033d6:	371c      	adds	r7, #28
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr
 80033e0:	40010000 	.word	0x40010000
 80033e4:	40010400 	.word	0x40010400

080033e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b087      	sub	sp, #28
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	f023 0210 	bic.w	r2, r3, #16
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003416:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800341e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	021b      	lsls	r3, r3, #8
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	4313      	orrs	r3, r2
 800342a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	f023 0320 	bic.w	r3, r3, #32
 8003432:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	011b      	lsls	r3, r3, #4
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	4313      	orrs	r3, r2
 800343e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a22      	ldr	r2, [pc, #136]	; (80034cc <TIM_OC2_SetConfig+0xe4>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d003      	beq.n	8003450 <TIM_OC2_SetConfig+0x68>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a21      	ldr	r2, [pc, #132]	; (80034d0 <TIM_OC2_SetConfig+0xe8>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d10d      	bne.n	800346c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003456:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	011b      	lsls	r3, r3, #4
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	4313      	orrs	r3, r2
 8003462:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800346a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a17      	ldr	r2, [pc, #92]	; (80034cc <TIM_OC2_SetConfig+0xe4>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d003      	beq.n	800347c <TIM_OC2_SetConfig+0x94>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a16      	ldr	r2, [pc, #88]	; (80034d0 <TIM_OC2_SetConfig+0xe8>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d113      	bne.n	80034a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003482:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800348a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	4313      	orrs	r3, r2
 8003496:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	621a      	str	r2, [r3, #32]
}
 80034be:	bf00      	nop
 80034c0:	371c      	adds	r7, #28
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	40010000 	.word	0x40010000
 80034d0:	40010400 	.word	0x40010400

080034d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b087      	sub	sp, #28
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a1b      	ldr	r3, [r3, #32]
 80034ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	69db      	ldr	r3, [r3, #28]
 80034fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003502:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f023 0303 	bic.w	r3, r3, #3
 800350a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	4313      	orrs	r3, r2
 8003514:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800351c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	021b      	lsls	r3, r3, #8
 8003524:	697a      	ldr	r2, [r7, #20]
 8003526:	4313      	orrs	r3, r2
 8003528:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a21      	ldr	r2, [pc, #132]	; (80035b4 <TIM_OC3_SetConfig+0xe0>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d003      	beq.n	800353a <TIM_OC3_SetConfig+0x66>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a20      	ldr	r2, [pc, #128]	; (80035b8 <TIM_OC3_SetConfig+0xe4>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d10d      	bne.n	8003556 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003540:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	021b      	lsls	r3, r3, #8
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	4313      	orrs	r3, r2
 800354c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003554:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a16      	ldr	r2, [pc, #88]	; (80035b4 <TIM_OC3_SetConfig+0xe0>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d003      	beq.n	8003566 <TIM_OC3_SetConfig+0x92>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a15      	ldr	r2, [pc, #84]	; (80035b8 <TIM_OC3_SetConfig+0xe4>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d113      	bne.n	800358e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800356c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003574:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	011b      	lsls	r3, r3, #4
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	4313      	orrs	r3, r2
 8003580:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	011b      	lsls	r3, r3, #4
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	4313      	orrs	r3, r2
 800358c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	621a      	str	r2, [r3, #32]
}
 80035a8:	bf00      	nop
 80035aa:	371c      	adds	r7, #28
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr
 80035b4:	40010000 	.word	0x40010000
 80035b8:	40010400 	.word	0x40010400

080035bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035bc:	b480      	push	{r7}
 80035be:	b087      	sub	sp, #28
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	69db      	ldr	r3, [r3, #28]
 80035e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	021b      	lsls	r3, r3, #8
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003606:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	031b      	lsls	r3, r3, #12
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	4313      	orrs	r3, r2
 8003612:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a12      	ldr	r2, [pc, #72]	; (8003660 <TIM_OC4_SetConfig+0xa4>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d003      	beq.n	8003624 <TIM_OC4_SetConfig+0x68>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a11      	ldr	r2, [pc, #68]	; (8003664 <TIM_OC4_SetConfig+0xa8>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d109      	bne.n	8003638 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800362a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	019b      	lsls	r3, r3, #6
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	4313      	orrs	r3, r2
 8003636:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	621a      	str	r2, [r3, #32]
}
 8003652:	bf00      	nop
 8003654:	371c      	adds	r7, #28
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	40010000 	.word	0x40010000
 8003664:	40010400 	.word	0x40010400

08003668 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003668:	b480      	push	{r7}
 800366a:	b087      	sub	sp, #28
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6a1b      	ldr	r3, [r3, #32]
 8003678:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	f023 0201 	bic.w	r2, r3, #1
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003692:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	011b      	lsls	r3, r3, #4
 8003698:	693a      	ldr	r2, [r7, #16]
 800369a:	4313      	orrs	r3, r2
 800369c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	f023 030a 	bic.w	r3, r3, #10
 80036a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	621a      	str	r2, [r3, #32]
}
 80036ba:	bf00      	nop
 80036bc:	371c      	adds	r7, #28
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr

080036c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b087      	sub	sp, #28
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	60f8      	str	r0, [r7, #12]
 80036ce:	60b9      	str	r1, [r7, #8]
 80036d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	f023 0210 	bic.w	r2, r3, #16
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	031b      	lsls	r3, r3, #12
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003702:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	011b      	lsls	r3, r3, #4
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	4313      	orrs	r3, r2
 800370c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	697a      	ldr	r2, [r7, #20]
 8003712:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	621a      	str	r2, [r3, #32]
}
 800371a:	bf00      	nop
 800371c:	371c      	adds	r7, #28
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003726:	b480      	push	{r7}
 8003728:	b085      	sub	sp, #20
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
 800372e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800373c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800373e:	683a      	ldr	r2, [r7, #0]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	4313      	orrs	r3, r2
 8003744:	f043 0307 	orr.w	r3, r3, #7
 8003748:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	609a      	str	r2, [r3, #8]
}
 8003750:	bf00      	nop
 8003752:	3714      	adds	r7, #20
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800375c:	b480      	push	{r7}
 800375e:	b087      	sub	sp, #28
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
 8003768:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003776:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	021a      	lsls	r2, r3, #8
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	431a      	orrs	r2, r3
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	4313      	orrs	r3, r2
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	4313      	orrs	r3, r2
 8003788:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	609a      	str	r2, [r3, #8]
}
 8003790:	bf00      	nop
 8003792:	371c      	adds	r7, #28
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800379c:	b480      	push	{r7}
 800379e:	b087      	sub	sp, #28
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	f003 031f 	and.w	r3, r3, #31
 80037ae:	2201      	movs	r2, #1
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6a1a      	ldr	r2, [r3, #32]
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	43db      	mvns	r3, r3
 80037be:	401a      	ands	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6a1a      	ldr	r2, [r3, #32]
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	f003 031f 	and.w	r3, r3, #31
 80037ce:	6879      	ldr	r1, [r7, #4]
 80037d0:	fa01 f303 	lsl.w	r3, r1, r3
 80037d4:	431a      	orrs	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	621a      	str	r2, [r3, #32]
}
 80037da:	bf00      	nop
 80037dc:	371c      	adds	r7, #28
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
	...

080037e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d101      	bne.n	8003800 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037fc:	2302      	movs	r3, #2
 80037fe:	e05a      	b.n	80038b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2202      	movs	r2, #2
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003826:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	4313      	orrs	r3, r2
 8003830:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a21      	ldr	r2, [pc, #132]	; (80038c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d022      	beq.n	800388a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800384c:	d01d      	beq.n	800388a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a1d      	ldr	r2, [pc, #116]	; (80038c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d018      	beq.n	800388a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a1b      	ldr	r2, [pc, #108]	; (80038cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d013      	beq.n	800388a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a1a      	ldr	r2, [pc, #104]	; (80038d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d00e      	beq.n	800388a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a18      	ldr	r2, [pc, #96]	; (80038d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d009      	beq.n	800388a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a17      	ldr	r2, [pc, #92]	; (80038d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d004      	beq.n	800388a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a15      	ldr	r2, [pc, #84]	; (80038dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d10c      	bne.n	80038a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003890:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	68ba      	ldr	r2, [r7, #8]
 8003898:	4313      	orrs	r3, r2
 800389a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68ba      	ldr	r2, [r7, #8]
 80038a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3714      	adds	r7, #20
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	40010000 	.word	0x40010000
 80038c8:	40000400 	.word	0x40000400
 80038cc:	40000800 	.word	0x40000800
 80038d0:	40000c00 	.word	0x40000c00
 80038d4:	40010400 	.word	0x40010400
 80038d8:	40014000 	.word	0x40014000
 80038dc:	40001800 	.word	0x40001800

080038e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e03f      	b.n	800399a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d106      	bne.n	8003934 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7fd fab4 	bl	8000e9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2224      	movs	r2, #36	; 0x24
 8003938:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68da      	ldr	r2, [r3, #12]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800394a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 fba1 	bl	8004094 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	691a      	ldr	r2, [r3, #16]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003960:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	695a      	ldr	r2, [r3, #20]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003970:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68da      	ldr	r2, [r3, #12]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003980:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2220      	movs	r2, #32
 800398c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2220      	movs	r2, #32
 8003994:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3708      	adds	r7, #8
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039a2:	b580      	push	{r7, lr}
 80039a4:	b088      	sub	sp, #32
 80039a6:	af02      	add	r7, sp, #8
 80039a8:	60f8      	str	r0, [r7, #12]
 80039aa:	60b9      	str	r1, [r7, #8]
 80039ac:	603b      	str	r3, [r7, #0]
 80039ae:	4613      	mov	r3, r2
 80039b0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80039b2:	2300      	movs	r3, #0
 80039b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b20      	cmp	r3, #32
 80039c0:	f040 8083 	bne.w	8003aca <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d002      	beq.n	80039d0 <HAL_UART_Transmit+0x2e>
 80039ca:	88fb      	ldrh	r3, [r7, #6]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d101      	bne.n	80039d4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e07b      	b.n	8003acc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d101      	bne.n	80039e2 <HAL_UART_Transmit+0x40>
 80039de:	2302      	movs	r3, #2
 80039e0:	e074      	b.n	8003acc <HAL_UART_Transmit+0x12a>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2201      	movs	r2, #1
 80039e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2221      	movs	r2, #33	; 0x21
 80039f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80039f8:	f7fd fd2e 	bl	8001458 <HAL_GetTick>
 80039fc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	88fa      	ldrh	r2, [r7, #6]
 8003a02:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	88fa      	ldrh	r2, [r7, #6]
 8003a08:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003a12:	e042      	b.n	8003a9a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a2a:	d122      	bne.n	8003a72 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	9300      	str	r3, [sp, #0]
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	2200      	movs	r2, #0
 8003a34:	2180      	movs	r1, #128	; 0x80
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	f000 f9c0 	bl	8003dbc <UART_WaitOnFlagUntilTimeout>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e042      	b.n	8003acc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	881b      	ldrh	r3, [r3, #0]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a58:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d103      	bne.n	8003a6a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	3302      	adds	r3, #2
 8003a66:	60bb      	str	r3, [r7, #8]
 8003a68:	e017      	b.n	8003a9a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	60bb      	str	r3, [r7, #8]
 8003a70:	e013      	b.n	8003a9a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	9300      	str	r3, [sp, #0]
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	2180      	movs	r1, #128	; 0x80
 8003a7c:	68f8      	ldr	r0, [r7, #12]
 8003a7e:	f000 f99d 	bl	8003dbc <UART_WaitOnFlagUntilTimeout>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d001      	beq.n	8003a8c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e01f      	b.n	8003acc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	1c5a      	adds	r2, r3, #1
 8003a90:	60ba      	str	r2, [r7, #8]
 8003a92:	781a      	ldrb	r2, [r3, #0]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d1b7      	bne.n	8003a14 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	9300      	str	r3, [sp, #0]
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	2140      	movs	r1, #64	; 0x40
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f000 f984 	bl	8003dbc <UART_WaitOnFlagUntilTimeout>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d001      	beq.n	8003abe <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e006      	b.n	8003acc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	e000      	b.n	8003acc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003aca:	2302      	movs	r3, #2
  }
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3718      	adds	r7, #24
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	4613      	mov	r3, r2
 8003ae0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b20      	cmp	r3, #32
 8003aec:	d140      	bne.n	8003b70 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d002      	beq.n	8003afa <HAL_UART_Receive_IT+0x26>
 8003af4:	88fb      	ldrh	r3, [r7, #6]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e039      	b.n	8003b72 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d101      	bne.n	8003b0c <HAL_UART_Receive_IT+0x38>
 8003b08:	2302      	movs	r3, #2
 8003b0a:	e032      	b.n	8003b72 <HAL_UART_Receive_IT+0x9e>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	68ba      	ldr	r2, [r7, #8]
 8003b18:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	88fa      	ldrh	r2, [r7, #6]
 8003b1e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	88fa      	ldrh	r2, [r7, #6]
 8003b24:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2222      	movs	r2, #34	; 0x22
 8003b30:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68da      	ldr	r2, [r3, #12]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b4a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	695a      	ldr	r2, [r3, #20]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f042 0201 	orr.w	r2, r2, #1
 8003b5a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68da      	ldr	r2, [r3, #12]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f042 0220 	orr.w	r2, r2, #32
 8003b6a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	e000      	b.n	8003b72 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003b70:	2302      	movs	r3, #2
  }
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3714      	adds	r7, #20
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
	...

08003b80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b088      	sub	sp, #32
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	f003 030f 	and.w	r3, r3, #15
 8003bae:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d10d      	bne.n	8003bd2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	f003 0320 	and.w	r3, r3, #32
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d008      	beq.n	8003bd2 <HAL_UART_IRQHandler+0x52>
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	f003 0320 	and.w	r3, r3, #32
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 f9e0 	bl	8003f90 <UART_Receive_IT>
      return;
 8003bd0:	e0d1      	b.n	8003d76 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 80b0 	beq.w	8003d3a <HAL_UART_IRQHandler+0x1ba>
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f003 0301 	and.w	r3, r3, #1
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d105      	bne.n	8003bf0 <HAL_UART_IRQHandler+0x70>
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f000 80a5 	beq.w	8003d3a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00a      	beq.n	8003c10 <HAL_UART_IRQHandler+0x90>
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d005      	beq.n	8003c10 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c08:	f043 0201 	orr.w	r2, r3, #1
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	f003 0304 	and.w	r3, r3, #4
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00a      	beq.n	8003c30 <HAL_UART_IRQHandler+0xb0>
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d005      	beq.n	8003c30 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c28:	f043 0202 	orr.w	r2, r3, #2
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00a      	beq.n	8003c50 <HAL_UART_IRQHandler+0xd0>
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d005      	beq.n	8003c50 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c48:	f043 0204 	orr.w	r2, r3, #4
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	f003 0308 	and.w	r3, r3, #8
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00f      	beq.n	8003c7a <HAL_UART_IRQHandler+0xfa>
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	f003 0320 	and.w	r3, r3, #32
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d104      	bne.n	8003c6e <HAL_UART_IRQHandler+0xee>
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d005      	beq.n	8003c7a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c72:	f043 0208 	orr.w	r2, r3, #8
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d078      	beq.n	8003d74 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	f003 0320 	and.w	r3, r3, #32
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d007      	beq.n	8003c9c <HAL_UART_IRQHandler+0x11c>
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	f003 0320 	and.w	r3, r3, #32
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d002      	beq.n	8003c9c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 f97a 	bl	8003f90 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca6:	2b40      	cmp	r3, #64	; 0x40
 8003ca8:	bf0c      	ite	eq
 8003caa:	2301      	moveq	r3, #1
 8003cac:	2300      	movne	r3, #0
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb6:	f003 0308 	and.w	r3, r3, #8
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d102      	bne.n	8003cc4 <HAL_UART_IRQHandler+0x144>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d031      	beq.n	8003d28 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 f8c3 	bl	8003e50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd4:	2b40      	cmp	r3, #64	; 0x40
 8003cd6:	d123      	bne.n	8003d20 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	695a      	ldr	r2, [r3, #20]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ce6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d013      	beq.n	8003d18 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf4:	4a21      	ldr	r2, [pc, #132]	; (8003d7c <HAL_UART_IRQHandler+0x1fc>)
 8003cf6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7fd fdcf 	bl	80018a0 <HAL_DMA_Abort_IT>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d016      	beq.n	8003d36 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d12:	4610      	mov	r0, r2
 8003d14:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d16:	e00e      	b.n	8003d36 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 f845 	bl	8003da8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d1e:	e00a      	b.n	8003d36 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 f841 	bl	8003da8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d26:	e006      	b.n	8003d36 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 f83d 	bl	8003da8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003d34:	e01e      	b.n	8003d74 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d36:	bf00      	nop
    return;
 8003d38:	e01c      	b.n	8003d74 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d008      	beq.n	8003d56 <HAL_UART_IRQHandler+0x1d6>
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d003      	beq.n	8003d56 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 f8b0 	bl	8003eb4 <UART_Transmit_IT>
    return;
 8003d54:	e00f      	b.n	8003d76 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00a      	beq.n	8003d76 <HAL_UART_IRQHandler+0x1f6>
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d005      	beq.n	8003d76 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 f8f8 	bl	8003f60 <UART_EndTransmit_IT>
    return;
 8003d70:	bf00      	nop
 8003d72:	e000      	b.n	8003d76 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003d74:	bf00      	nop
  }
}
 8003d76:	3720      	adds	r7, #32
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	08003e8d 	.word	0x08003e8d

08003d80 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	603b      	str	r3, [r7, #0]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dcc:	e02c      	b.n	8003e28 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd4:	d028      	beq.n	8003e28 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d007      	beq.n	8003dec <UART_WaitOnFlagUntilTimeout+0x30>
 8003ddc:	f7fd fb3c 	bl	8001458 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	69ba      	ldr	r2, [r7, #24]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d21d      	bcs.n	8003e28 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68da      	ldr	r2, [r3, #12]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003dfa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	695a      	ldr	r2, [r3, #20]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f022 0201 	bic.w	r2, r2, #1
 8003e0a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2220      	movs	r2, #32
 8003e18:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e00f      	b.n	8003e48 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	4013      	ands	r3, r2
 8003e32:	68ba      	ldr	r2, [r7, #8]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	bf0c      	ite	eq
 8003e38:	2301      	moveq	r3, #1
 8003e3a:	2300      	movne	r3, #0
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	461a      	mov	r2, r3
 8003e40:	79fb      	ldrb	r3, [r7, #7]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d0c3      	beq.n	8003dce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68da      	ldr	r2, [r3, #12]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003e66:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	695a      	ldr	r2, [r3, #20]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f022 0201 	bic.w	r2, r2, #1
 8003e76:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e98:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ea6:	68f8      	ldr	r0, [r7, #12]
 8003ea8:	f7ff ff7e 	bl	8003da8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003eac:	bf00      	nop
 8003eae:	3710      	adds	r7, #16
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	2b21      	cmp	r3, #33	; 0x21
 8003ec6:	d144      	bne.n	8003f52 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ed0:	d11a      	bne.n	8003f08 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	881b      	ldrh	r3, [r3, #0]
 8003edc:	461a      	mov	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ee6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d105      	bne.n	8003efc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a1b      	ldr	r3, [r3, #32]
 8003ef4:	1c9a      	adds	r2, r3, #2
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	621a      	str	r2, [r3, #32]
 8003efa:	e00e      	b.n	8003f1a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a1b      	ldr	r3, [r3, #32]
 8003f00:	1c5a      	adds	r2, r3, #1
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	621a      	str	r2, [r3, #32]
 8003f06:	e008      	b.n	8003f1a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a1b      	ldr	r3, [r3, #32]
 8003f0c:	1c59      	adds	r1, r3, #1
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	6211      	str	r1, [r2, #32]
 8003f12:	781a      	ldrb	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	3b01      	subs	r3, #1
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	4619      	mov	r1, r3
 8003f28:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10f      	bne.n	8003f4e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68da      	ldr	r2, [r3, #12]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f3c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68da      	ldr	r2, [r3, #12]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f4c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	e000      	b.n	8003f54 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003f52:	2302      	movs	r3, #2
  }
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3714      	adds	r7, #20
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68da      	ldr	r2, [r3, #12]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f76:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f7ff fefd 	bl	8003d80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3708      	adds	r7, #8
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b22      	cmp	r3, #34	; 0x22
 8003fa2:	d171      	bne.n	8004088 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fac:	d123      	bne.n	8003ff6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d10e      	bne.n	8003fda <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd2:	1c9a      	adds	r2, r3, #2
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	629a      	str	r2, [r3, #40]	; 0x28
 8003fd8:	e029      	b.n	800402e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fee:	1c5a      	adds	r2, r3, #1
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	629a      	str	r2, [r3, #40]	; 0x28
 8003ff4:	e01b      	b.n	800402e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10a      	bne.n	8004014 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	6858      	ldr	r0, [r3, #4]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004008:	1c59      	adds	r1, r3, #1
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	6291      	str	r1, [r2, #40]	; 0x28
 800400e:	b2c2      	uxtb	r2, r0
 8004010:	701a      	strb	r2, [r3, #0]
 8004012:	e00c      	b.n	800402e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	b2da      	uxtb	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004020:	1c58      	adds	r0, r3, #1
 8004022:	6879      	ldr	r1, [r7, #4]
 8004024:	6288      	str	r0, [r1, #40]	; 0x28
 8004026:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800402a:	b2d2      	uxtb	r2, r2
 800402c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004032:	b29b      	uxth	r3, r3
 8004034:	3b01      	subs	r3, #1
 8004036:	b29b      	uxth	r3, r3
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	4619      	mov	r1, r3
 800403c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800403e:	2b00      	cmp	r3, #0
 8004040:	d120      	bne.n	8004084 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68da      	ldr	r2, [r3, #12]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f022 0220 	bic.w	r2, r2, #32
 8004050:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68da      	ldr	r2, [r3, #12]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004060:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	695a      	ldr	r2, [r3, #20]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f022 0201 	bic.w	r2, r2, #1
 8004070:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2220      	movs	r2, #32
 8004076:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7ff fe8a 	bl	8003d94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004080:	2300      	movs	r3, #0
 8004082:	e002      	b.n	800408a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004084:	2300      	movs	r3, #0
 8004086:	e000      	b.n	800408a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004088:	2302      	movs	r3, #2
  }
}
 800408a:	4618      	mov	r0, r3
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
	...

08004094 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004098:	b085      	sub	sp, #20
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	68da      	ldr	r2, [r3, #12]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	431a      	orrs	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	431a      	orrs	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	69db      	ldr	r3, [r3, #28]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80040d6:	f023 030c 	bic.w	r3, r3, #12
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	6812      	ldr	r2, [r2, #0]
 80040de:	68f9      	ldr	r1, [r7, #12]
 80040e0:	430b      	orrs	r3, r1
 80040e2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	699a      	ldr	r2, [r3, #24]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	69db      	ldr	r3, [r3, #28]
 80040fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004102:	f040 818b 	bne.w	800441c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4ac1      	ldr	r2, [pc, #772]	; (8004410 <UART_SetConfig+0x37c>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d005      	beq.n	800411c <UART_SetConfig+0x88>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4abf      	ldr	r2, [pc, #764]	; (8004414 <UART_SetConfig+0x380>)
 8004116:	4293      	cmp	r3, r2
 8004118:	f040 80bd 	bne.w	8004296 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800411c:	f7fe fc4c 	bl	80029b8 <HAL_RCC_GetPCLK2Freq>
 8004120:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	461d      	mov	r5, r3
 8004126:	f04f 0600 	mov.w	r6, #0
 800412a:	46a8      	mov	r8, r5
 800412c:	46b1      	mov	r9, r6
 800412e:	eb18 0308 	adds.w	r3, r8, r8
 8004132:	eb49 0409 	adc.w	r4, r9, r9
 8004136:	4698      	mov	r8, r3
 8004138:	46a1      	mov	r9, r4
 800413a:	eb18 0805 	adds.w	r8, r8, r5
 800413e:	eb49 0906 	adc.w	r9, r9, r6
 8004142:	f04f 0100 	mov.w	r1, #0
 8004146:	f04f 0200 	mov.w	r2, #0
 800414a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800414e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004152:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004156:	4688      	mov	r8, r1
 8004158:	4691      	mov	r9, r2
 800415a:	eb18 0005 	adds.w	r0, r8, r5
 800415e:	eb49 0106 	adc.w	r1, r9, r6
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	461d      	mov	r5, r3
 8004168:	f04f 0600 	mov.w	r6, #0
 800416c:	196b      	adds	r3, r5, r5
 800416e:	eb46 0406 	adc.w	r4, r6, r6
 8004172:	461a      	mov	r2, r3
 8004174:	4623      	mov	r3, r4
 8004176:	f7fc f827 	bl	80001c8 <__aeabi_uldivmod>
 800417a:	4603      	mov	r3, r0
 800417c:	460c      	mov	r4, r1
 800417e:	461a      	mov	r2, r3
 8004180:	4ba5      	ldr	r3, [pc, #660]	; (8004418 <UART_SetConfig+0x384>)
 8004182:	fba3 2302 	umull	r2, r3, r3, r2
 8004186:	095b      	lsrs	r3, r3, #5
 8004188:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	461d      	mov	r5, r3
 8004190:	f04f 0600 	mov.w	r6, #0
 8004194:	46a9      	mov	r9, r5
 8004196:	46b2      	mov	sl, r6
 8004198:	eb19 0309 	adds.w	r3, r9, r9
 800419c:	eb4a 040a 	adc.w	r4, sl, sl
 80041a0:	4699      	mov	r9, r3
 80041a2:	46a2      	mov	sl, r4
 80041a4:	eb19 0905 	adds.w	r9, r9, r5
 80041a8:	eb4a 0a06 	adc.w	sl, sl, r6
 80041ac:	f04f 0100 	mov.w	r1, #0
 80041b0:	f04f 0200 	mov.w	r2, #0
 80041b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041b8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041bc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80041c0:	4689      	mov	r9, r1
 80041c2:	4692      	mov	sl, r2
 80041c4:	eb19 0005 	adds.w	r0, r9, r5
 80041c8:	eb4a 0106 	adc.w	r1, sl, r6
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	461d      	mov	r5, r3
 80041d2:	f04f 0600 	mov.w	r6, #0
 80041d6:	196b      	adds	r3, r5, r5
 80041d8:	eb46 0406 	adc.w	r4, r6, r6
 80041dc:	461a      	mov	r2, r3
 80041de:	4623      	mov	r3, r4
 80041e0:	f7fb fff2 	bl	80001c8 <__aeabi_uldivmod>
 80041e4:	4603      	mov	r3, r0
 80041e6:	460c      	mov	r4, r1
 80041e8:	461a      	mov	r2, r3
 80041ea:	4b8b      	ldr	r3, [pc, #556]	; (8004418 <UART_SetConfig+0x384>)
 80041ec:	fba3 1302 	umull	r1, r3, r3, r2
 80041f0:	095b      	lsrs	r3, r3, #5
 80041f2:	2164      	movs	r1, #100	; 0x64
 80041f4:	fb01 f303 	mul.w	r3, r1, r3
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	00db      	lsls	r3, r3, #3
 80041fc:	3332      	adds	r3, #50	; 0x32
 80041fe:	4a86      	ldr	r2, [pc, #536]	; (8004418 <UART_SetConfig+0x384>)
 8004200:	fba2 2303 	umull	r2, r3, r2, r3
 8004204:	095b      	lsrs	r3, r3, #5
 8004206:	005b      	lsls	r3, r3, #1
 8004208:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800420c:	4498      	add	r8, r3
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	461d      	mov	r5, r3
 8004212:	f04f 0600 	mov.w	r6, #0
 8004216:	46a9      	mov	r9, r5
 8004218:	46b2      	mov	sl, r6
 800421a:	eb19 0309 	adds.w	r3, r9, r9
 800421e:	eb4a 040a 	adc.w	r4, sl, sl
 8004222:	4699      	mov	r9, r3
 8004224:	46a2      	mov	sl, r4
 8004226:	eb19 0905 	adds.w	r9, r9, r5
 800422a:	eb4a 0a06 	adc.w	sl, sl, r6
 800422e:	f04f 0100 	mov.w	r1, #0
 8004232:	f04f 0200 	mov.w	r2, #0
 8004236:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800423a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800423e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004242:	4689      	mov	r9, r1
 8004244:	4692      	mov	sl, r2
 8004246:	eb19 0005 	adds.w	r0, r9, r5
 800424a:	eb4a 0106 	adc.w	r1, sl, r6
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	461d      	mov	r5, r3
 8004254:	f04f 0600 	mov.w	r6, #0
 8004258:	196b      	adds	r3, r5, r5
 800425a:	eb46 0406 	adc.w	r4, r6, r6
 800425e:	461a      	mov	r2, r3
 8004260:	4623      	mov	r3, r4
 8004262:	f7fb ffb1 	bl	80001c8 <__aeabi_uldivmod>
 8004266:	4603      	mov	r3, r0
 8004268:	460c      	mov	r4, r1
 800426a:	461a      	mov	r2, r3
 800426c:	4b6a      	ldr	r3, [pc, #424]	; (8004418 <UART_SetConfig+0x384>)
 800426e:	fba3 1302 	umull	r1, r3, r3, r2
 8004272:	095b      	lsrs	r3, r3, #5
 8004274:	2164      	movs	r1, #100	; 0x64
 8004276:	fb01 f303 	mul.w	r3, r1, r3
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	00db      	lsls	r3, r3, #3
 800427e:	3332      	adds	r3, #50	; 0x32
 8004280:	4a65      	ldr	r2, [pc, #404]	; (8004418 <UART_SetConfig+0x384>)
 8004282:	fba2 2303 	umull	r2, r3, r2, r3
 8004286:	095b      	lsrs	r3, r3, #5
 8004288:	f003 0207 	and.w	r2, r3, #7
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4442      	add	r2, r8
 8004292:	609a      	str	r2, [r3, #8]
 8004294:	e26f      	b.n	8004776 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004296:	f7fe fb7b 	bl	8002990 <HAL_RCC_GetPCLK1Freq>
 800429a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	461d      	mov	r5, r3
 80042a0:	f04f 0600 	mov.w	r6, #0
 80042a4:	46a8      	mov	r8, r5
 80042a6:	46b1      	mov	r9, r6
 80042a8:	eb18 0308 	adds.w	r3, r8, r8
 80042ac:	eb49 0409 	adc.w	r4, r9, r9
 80042b0:	4698      	mov	r8, r3
 80042b2:	46a1      	mov	r9, r4
 80042b4:	eb18 0805 	adds.w	r8, r8, r5
 80042b8:	eb49 0906 	adc.w	r9, r9, r6
 80042bc:	f04f 0100 	mov.w	r1, #0
 80042c0:	f04f 0200 	mov.w	r2, #0
 80042c4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80042c8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80042cc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80042d0:	4688      	mov	r8, r1
 80042d2:	4691      	mov	r9, r2
 80042d4:	eb18 0005 	adds.w	r0, r8, r5
 80042d8:	eb49 0106 	adc.w	r1, r9, r6
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	461d      	mov	r5, r3
 80042e2:	f04f 0600 	mov.w	r6, #0
 80042e6:	196b      	adds	r3, r5, r5
 80042e8:	eb46 0406 	adc.w	r4, r6, r6
 80042ec:	461a      	mov	r2, r3
 80042ee:	4623      	mov	r3, r4
 80042f0:	f7fb ff6a 	bl	80001c8 <__aeabi_uldivmod>
 80042f4:	4603      	mov	r3, r0
 80042f6:	460c      	mov	r4, r1
 80042f8:	461a      	mov	r2, r3
 80042fa:	4b47      	ldr	r3, [pc, #284]	; (8004418 <UART_SetConfig+0x384>)
 80042fc:	fba3 2302 	umull	r2, r3, r3, r2
 8004300:	095b      	lsrs	r3, r3, #5
 8004302:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	461d      	mov	r5, r3
 800430a:	f04f 0600 	mov.w	r6, #0
 800430e:	46a9      	mov	r9, r5
 8004310:	46b2      	mov	sl, r6
 8004312:	eb19 0309 	adds.w	r3, r9, r9
 8004316:	eb4a 040a 	adc.w	r4, sl, sl
 800431a:	4699      	mov	r9, r3
 800431c:	46a2      	mov	sl, r4
 800431e:	eb19 0905 	adds.w	r9, r9, r5
 8004322:	eb4a 0a06 	adc.w	sl, sl, r6
 8004326:	f04f 0100 	mov.w	r1, #0
 800432a:	f04f 0200 	mov.w	r2, #0
 800432e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004332:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004336:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800433a:	4689      	mov	r9, r1
 800433c:	4692      	mov	sl, r2
 800433e:	eb19 0005 	adds.w	r0, r9, r5
 8004342:	eb4a 0106 	adc.w	r1, sl, r6
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	461d      	mov	r5, r3
 800434c:	f04f 0600 	mov.w	r6, #0
 8004350:	196b      	adds	r3, r5, r5
 8004352:	eb46 0406 	adc.w	r4, r6, r6
 8004356:	461a      	mov	r2, r3
 8004358:	4623      	mov	r3, r4
 800435a:	f7fb ff35 	bl	80001c8 <__aeabi_uldivmod>
 800435e:	4603      	mov	r3, r0
 8004360:	460c      	mov	r4, r1
 8004362:	461a      	mov	r2, r3
 8004364:	4b2c      	ldr	r3, [pc, #176]	; (8004418 <UART_SetConfig+0x384>)
 8004366:	fba3 1302 	umull	r1, r3, r3, r2
 800436a:	095b      	lsrs	r3, r3, #5
 800436c:	2164      	movs	r1, #100	; 0x64
 800436e:	fb01 f303 	mul.w	r3, r1, r3
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	00db      	lsls	r3, r3, #3
 8004376:	3332      	adds	r3, #50	; 0x32
 8004378:	4a27      	ldr	r2, [pc, #156]	; (8004418 <UART_SetConfig+0x384>)
 800437a:	fba2 2303 	umull	r2, r3, r2, r3
 800437e:	095b      	lsrs	r3, r3, #5
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004386:	4498      	add	r8, r3
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	461d      	mov	r5, r3
 800438c:	f04f 0600 	mov.w	r6, #0
 8004390:	46a9      	mov	r9, r5
 8004392:	46b2      	mov	sl, r6
 8004394:	eb19 0309 	adds.w	r3, r9, r9
 8004398:	eb4a 040a 	adc.w	r4, sl, sl
 800439c:	4699      	mov	r9, r3
 800439e:	46a2      	mov	sl, r4
 80043a0:	eb19 0905 	adds.w	r9, r9, r5
 80043a4:	eb4a 0a06 	adc.w	sl, sl, r6
 80043a8:	f04f 0100 	mov.w	r1, #0
 80043ac:	f04f 0200 	mov.w	r2, #0
 80043b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043b4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80043b8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80043bc:	4689      	mov	r9, r1
 80043be:	4692      	mov	sl, r2
 80043c0:	eb19 0005 	adds.w	r0, r9, r5
 80043c4:	eb4a 0106 	adc.w	r1, sl, r6
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	461d      	mov	r5, r3
 80043ce:	f04f 0600 	mov.w	r6, #0
 80043d2:	196b      	adds	r3, r5, r5
 80043d4:	eb46 0406 	adc.w	r4, r6, r6
 80043d8:	461a      	mov	r2, r3
 80043da:	4623      	mov	r3, r4
 80043dc:	f7fb fef4 	bl	80001c8 <__aeabi_uldivmod>
 80043e0:	4603      	mov	r3, r0
 80043e2:	460c      	mov	r4, r1
 80043e4:	461a      	mov	r2, r3
 80043e6:	4b0c      	ldr	r3, [pc, #48]	; (8004418 <UART_SetConfig+0x384>)
 80043e8:	fba3 1302 	umull	r1, r3, r3, r2
 80043ec:	095b      	lsrs	r3, r3, #5
 80043ee:	2164      	movs	r1, #100	; 0x64
 80043f0:	fb01 f303 	mul.w	r3, r1, r3
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	3332      	adds	r3, #50	; 0x32
 80043fa:	4a07      	ldr	r2, [pc, #28]	; (8004418 <UART_SetConfig+0x384>)
 80043fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004400:	095b      	lsrs	r3, r3, #5
 8004402:	f003 0207 	and.w	r2, r3, #7
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4442      	add	r2, r8
 800440c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800440e:	e1b2      	b.n	8004776 <UART_SetConfig+0x6e2>
 8004410:	40011000 	.word	0x40011000
 8004414:	40011400 	.word	0x40011400
 8004418:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4ad7      	ldr	r2, [pc, #860]	; (8004780 <UART_SetConfig+0x6ec>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d005      	beq.n	8004432 <UART_SetConfig+0x39e>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4ad6      	ldr	r2, [pc, #856]	; (8004784 <UART_SetConfig+0x6f0>)
 800442c:	4293      	cmp	r3, r2
 800442e:	f040 80d1 	bne.w	80045d4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004432:	f7fe fac1 	bl	80029b8 <HAL_RCC_GetPCLK2Freq>
 8004436:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	469a      	mov	sl, r3
 800443c:	f04f 0b00 	mov.w	fp, #0
 8004440:	46d0      	mov	r8, sl
 8004442:	46d9      	mov	r9, fp
 8004444:	eb18 0308 	adds.w	r3, r8, r8
 8004448:	eb49 0409 	adc.w	r4, r9, r9
 800444c:	4698      	mov	r8, r3
 800444e:	46a1      	mov	r9, r4
 8004450:	eb18 080a 	adds.w	r8, r8, sl
 8004454:	eb49 090b 	adc.w	r9, r9, fp
 8004458:	f04f 0100 	mov.w	r1, #0
 800445c:	f04f 0200 	mov.w	r2, #0
 8004460:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004464:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004468:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800446c:	4688      	mov	r8, r1
 800446e:	4691      	mov	r9, r2
 8004470:	eb1a 0508 	adds.w	r5, sl, r8
 8004474:	eb4b 0609 	adc.w	r6, fp, r9
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	4619      	mov	r1, r3
 800447e:	f04f 0200 	mov.w	r2, #0
 8004482:	f04f 0300 	mov.w	r3, #0
 8004486:	f04f 0400 	mov.w	r4, #0
 800448a:	0094      	lsls	r4, r2, #2
 800448c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004490:	008b      	lsls	r3, r1, #2
 8004492:	461a      	mov	r2, r3
 8004494:	4623      	mov	r3, r4
 8004496:	4628      	mov	r0, r5
 8004498:	4631      	mov	r1, r6
 800449a:	f7fb fe95 	bl	80001c8 <__aeabi_uldivmod>
 800449e:	4603      	mov	r3, r0
 80044a0:	460c      	mov	r4, r1
 80044a2:	461a      	mov	r2, r3
 80044a4:	4bb8      	ldr	r3, [pc, #736]	; (8004788 <UART_SetConfig+0x6f4>)
 80044a6:	fba3 2302 	umull	r2, r3, r3, r2
 80044aa:	095b      	lsrs	r3, r3, #5
 80044ac:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	469b      	mov	fp, r3
 80044b4:	f04f 0c00 	mov.w	ip, #0
 80044b8:	46d9      	mov	r9, fp
 80044ba:	46e2      	mov	sl, ip
 80044bc:	eb19 0309 	adds.w	r3, r9, r9
 80044c0:	eb4a 040a 	adc.w	r4, sl, sl
 80044c4:	4699      	mov	r9, r3
 80044c6:	46a2      	mov	sl, r4
 80044c8:	eb19 090b 	adds.w	r9, r9, fp
 80044cc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80044d0:	f04f 0100 	mov.w	r1, #0
 80044d4:	f04f 0200 	mov.w	r2, #0
 80044d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044dc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044e0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044e4:	4689      	mov	r9, r1
 80044e6:	4692      	mov	sl, r2
 80044e8:	eb1b 0509 	adds.w	r5, fp, r9
 80044ec:	eb4c 060a 	adc.w	r6, ip, sl
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	4619      	mov	r1, r3
 80044f6:	f04f 0200 	mov.w	r2, #0
 80044fa:	f04f 0300 	mov.w	r3, #0
 80044fe:	f04f 0400 	mov.w	r4, #0
 8004502:	0094      	lsls	r4, r2, #2
 8004504:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004508:	008b      	lsls	r3, r1, #2
 800450a:	461a      	mov	r2, r3
 800450c:	4623      	mov	r3, r4
 800450e:	4628      	mov	r0, r5
 8004510:	4631      	mov	r1, r6
 8004512:	f7fb fe59 	bl	80001c8 <__aeabi_uldivmod>
 8004516:	4603      	mov	r3, r0
 8004518:	460c      	mov	r4, r1
 800451a:	461a      	mov	r2, r3
 800451c:	4b9a      	ldr	r3, [pc, #616]	; (8004788 <UART_SetConfig+0x6f4>)
 800451e:	fba3 1302 	umull	r1, r3, r3, r2
 8004522:	095b      	lsrs	r3, r3, #5
 8004524:	2164      	movs	r1, #100	; 0x64
 8004526:	fb01 f303 	mul.w	r3, r1, r3
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	011b      	lsls	r3, r3, #4
 800452e:	3332      	adds	r3, #50	; 0x32
 8004530:	4a95      	ldr	r2, [pc, #596]	; (8004788 <UART_SetConfig+0x6f4>)
 8004532:	fba2 2303 	umull	r2, r3, r2, r3
 8004536:	095b      	lsrs	r3, r3, #5
 8004538:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800453c:	4498      	add	r8, r3
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	469b      	mov	fp, r3
 8004542:	f04f 0c00 	mov.w	ip, #0
 8004546:	46d9      	mov	r9, fp
 8004548:	46e2      	mov	sl, ip
 800454a:	eb19 0309 	adds.w	r3, r9, r9
 800454e:	eb4a 040a 	adc.w	r4, sl, sl
 8004552:	4699      	mov	r9, r3
 8004554:	46a2      	mov	sl, r4
 8004556:	eb19 090b 	adds.w	r9, r9, fp
 800455a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800455e:	f04f 0100 	mov.w	r1, #0
 8004562:	f04f 0200 	mov.w	r2, #0
 8004566:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800456a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800456e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004572:	4689      	mov	r9, r1
 8004574:	4692      	mov	sl, r2
 8004576:	eb1b 0509 	adds.w	r5, fp, r9
 800457a:	eb4c 060a 	adc.w	r6, ip, sl
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	4619      	mov	r1, r3
 8004584:	f04f 0200 	mov.w	r2, #0
 8004588:	f04f 0300 	mov.w	r3, #0
 800458c:	f04f 0400 	mov.w	r4, #0
 8004590:	0094      	lsls	r4, r2, #2
 8004592:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004596:	008b      	lsls	r3, r1, #2
 8004598:	461a      	mov	r2, r3
 800459a:	4623      	mov	r3, r4
 800459c:	4628      	mov	r0, r5
 800459e:	4631      	mov	r1, r6
 80045a0:	f7fb fe12 	bl	80001c8 <__aeabi_uldivmod>
 80045a4:	4603      	mov	r3, r0
 80045a6:	460c      	mov	r4, r1
 80045a8:	461a      	mov	r2, r3
 80045aa:	4b77      	ldr	r3, [pc, #476]	; (8004788 <UART_SetConfig+0x6f4>)
 80045ac:	fba3 1302 	umull	r1, r3, r3, r2
 80045b0:	095b      	lsrs	r3, r3, #5
 80045b2:	2164      	movs	r1, #100	; 0x64
 80045b4:	fb01 f303 	mul.w	r3, r1, r3
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	011b      	lsls	r3, r3, #4
 80045bc:	3332      	adds	r3, #50	; 0x32
 80045be:	4a72      	ldr	r2, [pc, #456]	; (8004788 <UART_SetConfig+0x6f4>)
 80045c0:	fba2 2303 	umull	r2, r3, r2, r3
 80045c4:	095b      	lsrs	r3, r3, #5
 80045c6:	f003 020f 	and.w	r2, r3, #15
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4442      	add	r2, r8
 80045d0:	609a      	str	r2, [r3, #8]
 80045d2:	e0d0      	b.n	8004776 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80045d4:	f7fe f9dc 	bl	8002990 <HAL_RCC_GetPCLK1Freq>
 80045d8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	469a      	mov	sl, r3
 80045de:	f04f 0b00 	mov.w	fp, #0
 80045e2:	46d0      	mov	r8, sl
 80045e4:	46d9      	mov	r9, fp
 80045e6:	eb18 0308 	adds.w	r3, r8, r8
 80045ea:	eb49 0409 	adc.w	r4, r9, r9
 80045ee:	4698      	mov	r8, r3
 80045f0:	46a1      	mov	r9, r4
 80045f2:	eb18 080a 	adds.w	r8, r8, sl
 80045f6:	eb49 090b 	adc.w	r9, r9, fp
 80045fa:	f04f 0100 	mov.w	r1, #0
 80045fe:	f04f 0200 	mov.w	r2, #0
 8004602:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004606:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800460a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800460e:	4688      	mov	r8, r1
 8004610:	4691      	mov	r9, r2
 8004612:	eb1a 0508 	adds.w	r5, sl, r8
 8004616:	eb4b 0609 	adc.w	r6, fp, r9
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	4619      	mov	r1, r3
 8004620:	f04f 0200 	mov.w	r2, #0
 8004624:	f04f 0300 	mov.w	r3, #0
 8004628:	f04f 0400 	mov.w	r4, #0
 800462c:	0094      	lsls	r4, r2, #2
 800462e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004632:	008b      	lsls	r3, r1, #2
 8004634:	461a      	mov	r2, r3
 8004636:	4623      	mov	r3, r4
 8004638:	4628      	mov	r0, r5
 800463a:	4631      	mov	r1, r6
 800463c:	f7fb fdc4 	bl	80001c8 <__aeabi_uldivmod>
 8004640:	4603      	mov	r3, r0
 8004642:	460c      	mov	r4, r1
 8004644:	461a      	mov	r2, r3
 8004646:	4b50      	ldr	r3, [pc, #320]	; (8004788 <UART_SetConfig+0x6f4>)
 8004648:	fba3 2302 	umull	r2, r3, r3, r2
 800464c:	095b      	lsrs	r3, r3, #5
 800464e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	469b      	mov	fp, r3
 8004656:	f04f 0c00 	mov.w	ip, #0
 800465a:	46d9      	mov	r9, fp
 800465c:	46e2      	mov	sl, ip
 800465e:	eb19 0309 	adds.w	r3, r9, r9
 8004662:	eb4a 040a 	adc.w	r4, sl, sl
 8004666:	4699      	mov	r9, r3
 8004668:	46a2      	mov	sl, r4
 800466a:	eb19 090b 	adds.w	r9, r9, fp
 800466e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004672:	f04f 0100 	mov.w	r1, #0
 8004676:	f04f 0200 	mov.w	r2, #0
 800467a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800467e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004682:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004686:	4689      	mov	r9, r1
 8004688:	4692      	mov	sl, r2
 800468a:	eb1b 0509 	adds.w	r5, fp, r9
 800468e:	eb4c 060a 	adc.w	r6, ip, sl
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	4619      	mov	r1, r3
 8004698:	f04f 0200 	mov.w	r2, #0
 800469c:	f04f 0300 	mov.w	r3, #0
 80046a0:	f04f 0400 	mov.w	r4, #0
 80046a4:	0094      	lsls	r4, r2, #2
 80046a6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80046aa:	008b      	lsls	r3, r1, #2
 80046ac:	461a      	mov	r2, r3
 80046ae:	4623      	mov	r3, r4
 80046b0:	4628      	mov	r0, r5
 80046b2:	4631      	mov	r1, r6
 80046b4:	f7fb fd88 	bl	80001c8 <__aeabi_uldivmod>
 80046b8:	4603      	mov	r3, r0
 80046ba:	460c      	mov	r4, r1
 80046bc:	461a      	mov	r2, r3
 80046be:	4b32      	ldr	r3, [pc, #200]	; (8004788 <UART_SetConfig+0x6f4>)
 80046c0:	fba3 1302 	umull	r1, r3, r3, r2
 80046c4:	095b      	lsrs	r3, r3, #5
 80046c6:	2164      	movs	r1, #100	; 0x64
 80046c8:	fb01 f303 	mul.w	r3, r1, r3
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	011b      	lsls	r3, r3, #4
 80046d0:	3332      	adds	r3, #50	; 0x32
 80046d2:	4a2d      	ldr	r2, [pc, #180]	; (8004788 <UART_SetConfig+0x6f4>)
 80046d4:	fba2 2303 	umull	r2, r3, r2, r3
 80046d8:	095b      	lsrs	r3, r3, #5
 80046da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046de:	4498      	add	r8, r3
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	469b      	mov	fp, r3
 80046e4:	f04f 0c00 	mov.w	ip, #0
 80046e8:	46d9      	mov	r9, fp
 80046ea:	46e2      	mov	sl, ip
 80046ec:	eb19 0309 	adds.w	r3, r9, r9
 80046f0:	eb4a 040a 	adc.w	r4, sl, sl
 80046f4:	4699      	mov	r9, r3
 80046f6:	46a2      	mov	sl, r4
 80046f8:	eb19 090b 	adds.w	r9, r9, fp
 80046fc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004700:	f04f 0100 	mov.w	r1, #0
 8004704:	f04f 0200 	mov.w	r2, #0
 8004708:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800470c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004710:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004714:	4689      	mov	r9, r1
 8004716:	4692      	mov	sl, r2
 8004718:	eb1b 0509 	adds.w	r5, fp, r9
 800471c:	eb4c 060a 	adc.w	r6, ip, sl
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	4619      	mov	r1, r3
 8004726:	f04f 0200 	mov.w	r2, #0
 800472a:	f04f 0300 	mov.w	r3, #0
 800472e:	f04f 0400 	mov.w	r4, #0
 8004732:	0094      	lsls	r4, r2, #2
 8004734:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004738:	008b      	lsls	r3, r1, #2
 800473a:	461a      	mov	r2, r3
 800473c:	4623      	mov	r3, r4
 800473e:	4628      	mov	r0, r5
 8004740:	4631      	mov	r1, r6
 8004742:	f7fb fd41 	bl	80001c8 <__aeabi_uldivmod>
 8004746:	4603      	mov	r3, r0
 8004748:	460c      	mov	r4, r1
 800474a:	461a      	mov	r2, r3
 800474c:	4b0e      	ldr	r3, [pc, #56]	; (8004788 <UART_SetConfig+0x6f4>)
 800474e:	fba3 1302 	umull	r1, r3, r3, r2
 8004752:	095b      	lsrs	r3, r3, #5
 8004754:	2164      	movs	r1, #100	; 0x64
 8004756:	fb01 f303 	mul.w	r3, r1, r3
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	011b      	lsls	r3, r3, #4
 800475e:	3332      	adds	r3, #50	; 0x32
 8004760:	4a09      	ldr	r2, [pc, #36]	; (8004788 <UART_SetConfig+0x6f4>)
 8004762:	fba2 2303 	umull	r2, r3, r2, r3
 8004766:	095b      	lsrs	r3, r3, #5
 8004768:	f003 020f 	and.w	r2, r3, #15
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4442      	add	r2, r8
 8004772:	609a      	str	r2, [r3, #8]
}
 8004774:	e7ff      	b.n	8004776 <UART_SetConfig+0x6e2>
 8004776:	bf00      	nop
 8004778:	3714      	adds	r7, #20
 800477a:	46bd      	mov	sp, r7
 800477c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004780:	40011000 	.word	0x40011000
 8004784:	40011400 	.word	0x40011400
 8004788:	51eb851f 	.word	0x51eb851f

0800478c <__errno>:
 800478c:	4b01      	ldr	r3, [pc, #4]	; (8004794 <__errno+0x8>)
 800478e:	6818      	ldr	r0, [r3, #0]
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	2000000c 	.word	0x2000000c

08004798 <__libc_init_array>:
 8004798:	b570      	push	{r4, r5, r6, lr}
 800479a:	4e0d      	ldr	r6, [pc, #52]	; (80047d0 <__libc_init_array+0x38>)
 800479c:	4c0d      	ldr	r4, [pc, #52]	; (80047d4 <__libc_init_array+0x3c>)
 800479e:	1ba4      	subs	r4, r4, r6
 80047a0:	10a4      	asrs	r4, r4, #2
 80047a2:	2500      	movs	r5, #0
 80047a4:	42a5      	cmp	r5, r4
 80047a6:	d109      	bne.n	80047bc <__libc_init_array+0x24>
 80047a8:	4e0b      	ldr	r6, [pc, #44]	; (80047d8 <__libc_init_array+0x40>)
 80047aa:	4c0c      	ldr	r4, [pc, #48]	; (80047dc <__libc_init_array+0x44>)
 80047ac:	f000 fc88 	bl	80050c0 <_init>
 80047b0:	1ba4      	subs	r4, r4, r6
 80047b2:	10a4      	asrs	r4, r4, #2
 80047b4:	2500      	movs	r5, #0
 80047b6:	42a5      	cmp	r5, r4
 80047b8:	d105      	bne.n	80047c6 <__libc_init_array+0x2e>
 80047ba:	bd70      	pop	{r4, r5, r6, pc}
 80047bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80047c0:	4798      	blx	r3
 80047c2:	3501      	adds	r5, #1
 80047c4:	e7ee      	b.n	80047a4 <__libc_init_array+0xc>
 80047c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80047ca:	4798      	blx	r3
 80047cc:	3501      	adds	r5, #1
 80047ce:	e7f2      	b.n	80047b6 <__libc_init_array+0x1e>
 80047d0:	08005168 	.word	0x08005168
 80047d4:	08005168 	.word	0x08005168
 80047d8:	08005168 	.word	0x08005168
 80047dc:	0800516c 	.word	0x0800516c

080047e0 <memset>:
 80047e0:	4402      	add	r2, r0
 80047e2:	4603      	mov	r3, r0
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d100      	bne.n	80047ea <memset+0xa>
 80047e8:	4770      	bx	lr
 80047ea:	f803 1b01 	strb.w	r1, [r3], #1
 80047ee:	e7f9      	b.n	80047e4 <memset+0x4>

080047f0 <_puts_r>:
 80047f0:	b570      	push	{r4, r5, r6, lr}
 80047f2:	460e      	mov	r6, r1
 80047f4:	4605      	mov	r5, r0
 80047f6:	b118      	cbz	r0, 8004800 <_puts_r+0x10>
 80047f8:	6983      	ldr	r3, [r0, #24]
 80047fa:	b90b      	cbnz	r3, 8004800 <_puts_r+0x10>
 80047fc:	f000 fa0c 	bl	8004c18 <__sinit>
 8004800:	69ab      	ldr	r3, [r5, #24]
 8004802:	68ac      	ldr	r4, [r5, #8]
 8004804:	b913      	cbnz	r3, 800480c <_puts_r+0x1c>
 8004806:	4628      	mov	r0, r5
 8004808:	f000 fa06 	bl	8004c18 <__sinit>
 800480c:	4b23      	ldr	r3, [pc, #140]	; (800489c <_puts_r+0xac>)
 800480e:	429c      	cmp	r4, r3
 8004810:	d117      	bne.n	8004842 <_puts_r+0x52>
 8004812:	686c      	ldr	r4, [r5, #4]
 8004814:	89a3      	ldrh	r3, [r4, #12]
 8004816:	071b      	lsls	r3, r3, #28
 8004818:	d51d      	bpl.n	8004856 <_puts_r+0x66>
 800481a:	6923      	ldr	r3, [r4, #16]
 800481c:	b1db      	cbz	r3, 8004856 <_puts_r+0x66>
 800481e:	3e01      	subs	r6, #1
 8004820:	68a3      	ldr	r3, [r4, #8]
 8004822:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004826:	3b01      	subs	r3, #1
 8004828:	60a3      	str	r3, [r4, #8]
 800482a:	b9e9      	cbnz	r1, 8004868 <_puts_r+0x78>
 800482c:	2b00      	cmp	r3, #0
 800482e:	da2e      	bge.n	800488e <_puts_r+0x9e>
 8004830:	4622      	mov	r2, r4
 8004832:	210a      	movs	r1, #10
 8004834:	4628      	mov	r0, r5
 8004836:	f000 f83f 	bl	80048b8 <__swbuf_r>
 800483a:	3001      	adds	r0, #1
 800483c:	d011      	beq.n	8004862 <_puts_r+0x72>
 800483e:	200a      	movs	r0, #10
 8004840:	e011      	b.n	8004866 <_puts_r+0x76>
 8004842:	4b17      	ldr	r3, [pc, #92]	; (80048a0 <_puts_r+0xb0>)
 8004844:	429c      	cmp	r4, r3
 8004846:	d101      	bne.n	800484c <_puts_r+0x5c>
 8004848:	68ac      	ldr	r4, [r5, #8]
 800484a:	e7e3      	b.n	8004814 <_puts_r+0x24>
 800484c:	4b15      	ldr	r3, [pc, #84]	; (80048a4 <_puts_r+0xb4>)
 800484e:	429c      	cmp	r4, r3
 8004850:	bf08      	it	eq
 8004852:	68ec      	ldreq	r4, [r5, #12]
 8004854:	e7de      	b.n	8004814 <_puts_r+0x24>
 8004856:	4621      	mov	r1, r4
 8004858:	4628      	mov	r0, r5
 800485a:	f000 f87f 	bl	800495c <__swsetup_r>
 800485e:	2800      	cmp	r0, #0
 8004860:	d0dd      	beq.n	800481e <_puts_r+0x2e>
 8004862:	f04f 30ff 	mov.w	r0, #4294967295
 8004866:	bd70      	pop	{r4, r5, r6, pc}
 8004868:	2b00      	cmp	r3, #0
 800486a:	da04      	bge.n	8004876 <_puts_r+0x86>
 800486c:	69a2      	ldr	r2, [r4, #24]
 800486e:	429a      	cmp	r2, r3
 8004870:	dc06      	bgt.n	8004880 <_puts_r+0x90>
 8004872:	290a      	cmp	r1, #10
 8004874:	d004      	beq.n	8004880 <_puts_r+0x90>
 8004876:	6823      	ldr	r3, [r4, #0]
 8004878:	1c5a      	adds	r2, r3, #1
 800487a:	6022      	str	r2, [r4, #0]
 800487c:	7019      	strb	r1, [r3, #0]
 800487e:	e7cf      	b.n	8004820 <_puts_r+0x30>
 8004880:	4622      	mov	r2, r4
 8004882:	4628      	mov	r0, r5
 8004884:	f000 f818 	bl	80048b8 <__swbuf_r>
 8004888:	3001      	adds	r0, #1
 800488a:	d1c9      	bne.n	8004820 <_puts_r+0x30>
 800488c:	e7e9      	b.n	8004862 <_puts_r+0x72>
 800488e:	6823      	ldr	r3, [r4, #0]
 8004890:	200a      	movs	r0, #10
 8004892:	1c5a      	adds	r2, r3, #1
 8004894:	6022      	str	r2, [r4, #0]
 8004896:	7018      	strb	r0, [r3, #0]
 8004898:	e7e5      	b.n	8004866 <_puts_r+0x76>
 800489a:	bf00      	nop
 800489c:	08005120 	.word	0x08005120
 80048a0:	08005140 	.word	0x08005140
 80048a4:	08005100 	.word	0x08005100

080048a8 <puts>:
 80048a8:	4b02      	ldr	r3, [pc, #8]	; (80048b4 <puts+0xc>)
 80048aa:	4601      	mov	r1, r0
 80048ac:	6818      	ldr	r0, [r3, #0]
 80048ae:	f7ff bf9f 	b.w	80047f0 <_puts_r>
 80048b2:	bf00      	nop
 80048b4:	2000000c 	.word	0x2000000c

080048b8 <__swbuf_r>:
 80048b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ba:	460e      	mov	r6, r1
 80048bc:	4614      	mov	r4, r2
 80048be:	4605      	mov	r5, r0
 80048c0:	b118      	cbz	r0, 80048ca <__swbuf_r+0x12>
 80048c2:	6983      	ldr	r3, [r0, #24]
 80048c4:	b90b      	cbnz	r3, 80048ca <__swbuf_r+0x12>
 80048c6:	f000 f9a7 	bl	8004c18 <__sinit>
 80048ca:	4b21      	ldr	r3, [pc, #132]	; (8004950 <__swbuf_r+0x98>)
 80048cc:	429c      	cmp	r4, r3
 80048ce:	d12a      	bne.n	8004926 <__swbuf_r+0x6e>
 80048d0:	686c      	ldr	r4, [r5, #4]
 80048d2:	69a3      	ldr	r3, [r4, #24]
 80048d4:	60a3      	str	r3, [r4, #8]
 80048d6:	89a3      	ldrh	r3, [r4, #12]
 80048d8:	071a      	lsls	r2, r3, #28
 80048da:	d52e      	bpl.n	800493a <__swbuf_r+0x82>
 80048dc:	6923      	ldr	r3, [r4, #16]
 80048de:	b363      	cbz	r3, 800493a <__swbuf_r+0x82>
 80048e0:	6923      	ldr	r3, [r4, #16]
 80048e2:	6820      	ldr	r0, [r4, #0]
 80048e4:	1ac0      	subs	r0, r0, r3
 80048e6:	6963      	ldr	r3, [r4, #20]
 80048e8:	b2f6      	uxtb	r6, r6
 80048ea:	4283      	cmp	r3, r0
 80048ec:	4637      	mov	r7, r6
 80048ee:	dc04      	bgt.n	80048fa <__swbuf_r+0x42>
 80048f0:	4621      	mov	r1, r4
 80048f2:	4628      	mov	r0, r5
 80048f4:	f000 f926 	bl	8004b44 <_fflush_r>
 80048f8:	bb28      	cbnz	r0, 8004946 <__swbuf_r+0x8e>
 80048fa:	68a3      	ldr	r3, [r4, #8]
 80048fc:	3b01      	subs	r3, #1
 80048fe:	60a3      	str	r3, [r4, #8]
 8004900:	6823      	ldr	r3, [r4, #0]
 8004902:	1c5a      	adds	r2, r3, #1
 8004904:	6022      	str	r2, [r4, #0]
 8004906:	701e      	strb	r6, [r3, #0]
 8004908:	6963      	ldr	r3, [r4, #20]
 800490a:	3001      	adds	r0, #1
 800490c:	4283      	cmp	r3, r0
 800490e:	d004      	beq.n	800491a <__swbuf_r+0x62>
 8004910:	89a3      	ldrh	r3, [r4, #12]
 8004912:	07db      	lsls	r3, r3, #31
 8004914:	d519      	bpl.n	800494a <__swbuf_r+0x92>
 8004916:	2e0a      	cmp	r6, #10
 8004918:	d117      	bne.n	800494a <__swbuf_r+0x92>
 800491a:	4621      	mov	r1, r4
 800491c:	4628      	mov	r0, r5
 800491e:	f000 f911 	bl	8004b44 <_fflush_r>
 8004922:	b190      	cbz	r0, 800494a <__swbuf_r+0x92>
 8004924:	e00f      	b.n	8004946 <__swbuf_r+0x8e>
 8004926:	4b0b      	ldr	r3, [pc, #44]	; (8004954 <__swbuf_r+0x9c>)
 8004928:	429c      	cmp	r4, r3
 800492a:	d101      	bne.n	8004930 <__swbuf_r+0x78>
 800492c:	68ac      	ldr	r4, [r5, #8]
 800492e:	e7d0      	b.n	80048d2 <__swbuf_r+0x1a>
 8004930:	4b09      	ldr	r3, [pc, #36]	; (8004958 <__swbuf_r+0xa0>)
 8004932:	429c      	cmp	r4, r3
 8004934:	bf08      	it	eq
 8004936:	68ec      	ldreq	r4, [r5, #12]
 8004938:	e7cb      	b.n	80048d2 <__swbuf_r+0x1a>
 800493a:	4621      	mov	r1, r4
 800493c:	4628      	mov	r0, r5
 800493e:	f000 f80d 	bl	800495c <__swsetup_r>
 8004942:	2800      	cmp	r0, #0
 8004944:	d0cc      	beq.n	80048e0 <__swbuf_r+0x28>
 8004946:	f04f 37ff 	mov.w	r7, #4294967295
 800494a:	4638      	mov	r0, r7
 800494c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800494e:	bf00      	nop
 8004950:	08005120 	.word	0x08005120
 8004954:	08005140 	.word	0x08005140
 8004958:	08005100 	.word	0x08005100

0800495c <__swsetup_r>:
 800495c:	4b32      	ldr	r3, [pc, #200]	; (8004a28 <__swsetup_r+0xcc>)
 800495e:	b570      	push	{r4, r5, r6, lr}
 8004960:	681d      	ldr	r5, [r3, #0]
 8004962:	4606      	mov	r6, r0
 8004964:	460c      	mov	r4, r1
 8004966:	b125      	cbz	r5, 8004972 <__swsetup_r+0x16>
 8004968:	69ab      	ldr	r3, [r5, #24]
 800496a:	b913      	cbnz	r3, 8004972 <__swsetup_r+0x16>
 800496c:	4628      	mov	r0, r5
 800496e:	f000 f953 	bl	8004c18 <__sinit>
 8004972:	4b2e      	ldr	r3, [pc, #184]	; (8004a2c <__swsetup_r+0xd0>)
 8004974:	429c      	cmp	r4, r3
 8004976:	d10f      	bne.n	8004998 <__swsetup_r+0x3c>
 8004978:	686c      	ldr	r4, [r5, #4]
 800497a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800497e:	b29a      	uxth	r2, r3
 8004980:	0715      	lsls	r5, r2, #28
 8004982:	d42c      	bmi.n	80049de <__swsetup_r+0x82>
 8004984:	06d0      	lsls	r0, r2, #27
 8004986:	d411      	bmi.n	80049ac <__swsetup_r+0x50>
 8004988:	2209      	movs	r2, #9
 800498a:	6032      	str	r2, [r6, #0]
 800498c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004990:	81a3      	strh	r3, [r4, #12]
 8004992:	f04f 30ff 	mov.w	r0, #4294967295
 8004996:	e03e      	b.n	8004a16 <__swsetup_r+0xba>
 8004998:	4b25      	ldr	r3, [pc, #148]	; (8004a30 <__swsetup_r+0xd4>)
 800499a:	429c      	cmp	r4, r3
 800499c:	d101      	bne.n	80049a2 <__swsetup_r+0x46>
 800499e:	68ac      	ldr	r4, [r5, #8]
 80049a0:	e7eb      	b.n	800497a <__swsetup_r+0x1e>
 80049a2:	4b24      	ldr	r3, [pc, #144]	; (8004a34 <__swsetup_r+0xd8>)
 80049a4:	429c      	cmp	r4, r3
 80049a6:	bf08      	it	eq
 80049a8:	68ec      	ldreq	r4, [r5, #12]
 80049aa:	e7e6      	b.n	800497a <__swsetup_r+0x1e>
 80049ac:	0751      	lsls	r1, r2, #29
 80049ae:	d512      	bpl.n	80049d6 <__swsetup_r+0x7a>
 80049b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80049b2:	b141      	cbz	r1, 80049c6 <__swsetup_r+0x6a>
 80049b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80049b8:	4299      	cmp	r1, r3
 80049ba:	d002      	beq.n	80049c2 <__swsetup_r+0x66>
 80049bc:	4630      	mov	r0, r6
 80049be:	f000 fa19 	bl	8004df4 <_free_r>
 80049c2:	2300      	movs	r3, #0
 80049c4:	6363      	str	r3, [r4, #52]	; 0x34
 80049c6:	89a3      	ldrh	r3, [r4, #12]
 80049c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80049cc:	81a3      	strh	r3, [r4, #12]
 80049ce:	2300      	movs	r3, #0
 80049d0:	6063      	str	r3, [r4, #4]
 80049d2:	6923      	ldr	r3, [r4, #16]
 80049d4:	6023      	str	r3, [r4, #0]
 80049d6:	89a3      	ldrh	r3, [r4, #12]
 80049d8:	f043 0308 	orr.w	r3, r3, #8
 80049dc:	81a3      	strh	r3, [r4, #12]
 80049de:	6923      	ldr	r3, [r4, #16]
 80049e0:	b94b      	cbnz	r3, 80049f6 <__swsetup_r+0x9a>
 80049e2:	89a3      	ldrh	r3, [r4, #12]
 80049e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80049e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049ec:	d003      	beq.n	80049f6 <__swsetup_r+0x9a>
 80049ee:	4621      	mov	r1, r4
 80049f0:	4630      	mov	r0, r6
 80049f2:	f000 f9bf 	bl	8004d74 <__smakebuf_r>
 80049f6:	89a2      	ldrh	r2, [r4, #12]
 80049f8:	f012 0301 	ands.w	r3, r2, #1
 80049fc:	d00c      	beq.n	8004a18 <__swsetup_r+0xbc>
 80049fe:	2300      	movs	r3, #0
 8004a00:	60a3      	str	r3, [r4, #8]
 8004a02:	6963      	ldr	r3, [r4, #20]
 8004a04:	425b      	negs	r3, r3
 8004a06:	61a3      	str	r3, [r4, #24]
 8004a08:	6923      	ldr	r3, [r4, #16]
 8004a0a:	b953      	cbnz	r3, 8004a22 <__swsetup_r+0xc6>
 8004a0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a10:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004a14:	d1ba      	bne.n	800498c <__swsetup_r+0x30>
 8004a16:	bd70      	pop	{r4, r5, r6, pc}
 8004a18:	0792      	lsls	r2, r2, #30
 8004a1a:	bf58      	it	pl
 8004a1c:	6963      	ldrpl	r3, [r4, #20]
 8004a1e:	60a3      	str	r3, [r4, #8]
 8004a20:	e7f2      	b.n	8004a08 <__swsetup_r+0xac>
 8004a22:	2000      	movs	r0, #0
 8004a24:	e7f7      	b.n	8004a16 <__swsetup_r+0xba>
 8004a26:	bf00      	nop
 8004a28:	2000000c 	.word	0x2000000c
 8004a2c:	08005120 	.word	0x08005120
 8004a30:	08005140 	.word	0x08005140
 8004a34:	08005100 	.word	0x08005100

08004a38 <__sflush_r>:
 8004a38:	898a      	ldrh	r2, [r1, #12]
 8004a3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a3e:	4605      	mov	r5, r0
 8004a40:	0710      	lsls	r0, r2, #28
 8004a42:	460c      	mov	r4, r1
 8004a44:	d458      	bmi.n	8004af8 <__sflush_r+0xc0>
 8004a46:	684b      	ldr	r3, [r1, #4]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	dc05      	bgt.n	8004a58 <__sflush_r+0x20>
 8004a4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	dc02      	bgt.n	8004a58 <__sflush_r+0x20>
 8004a52:	2000      	movs	r0, #0
 8004a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a5a:	2e00      	cmp	r6, #0
 8004a5c:	d0f9      	beq.n	8004a52 <__sflush_r+0x1a>
 8004a5e:	2300      	movs	r3, #0
 8004a60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004a64:	682f      	ldr	r7, [r5, #0]
 8004a66:	6a21      	ldr	r1, [r4, #32]
 8004a68:	602b      	str	r3, [r5, #0]
 8004a6a:	d032      	beq.n	8004ad2 <__sflush_r+0x9a>
 8004a6c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a6e:	89a3      	ldrh	r3, [r4, #12]
 8004a70:	075a      	lsls	r2, r3, #29
 8004a72:	d505      	bpl.n	8004a80 <__sflush_r+0x48>
 8004a74:	6863      	ldr	r3, [r4, #4]
 8004a76:	1ac0      	subs	r0, r0, r3
 8004a78:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a7a:	b10b      	cbz	r3, 8004a80 <__sflush_r+0x48>
 8004a7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a7e:	1ac0      	subs	r0, r0, r3
 8004a80:	2300      	movs	r3, #0
 8004a82:	4602      	mov	r2, r0
 8004a84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a86:	6a21      	ldr	r1, [r4, #32]
 8004a88:	4628      	mov	r0, r5
 8004a8a:	47b0      	blx	r6
 8004a8c:	1c43      	adds	r3, r0, #1
 8004a8e:	89a3      	ldrh	r3, [r4, #12]
 8004a90:	d106      	bne.n	8004aa0 <__sflush_r+0x68>
 8004a92:	6829      	ldr	r1, [r5, #0]
 8004a94:	291d      	cmp	r1, #29
 8004a96:	d848      	bhi.n	8004b2a <__sflush_r+0xf2>
 8004a98:	4a29      	ldr	r2, [pc, #164]	; (8004b40 <__sflush_r+0x108>)
 8004a9a:	40ca      	lsrs	r2, r1
 8004a9c:	07d6      	lsls	r6, r2, #31
 8004a9e:	d544      	bpl.n	8004b2a <__sflush_r+0xf2>
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	6062      	str	r2, [r4, #4]
 8004aa4:	04d9      	lsls	r1, r3, #19
 8004aa6:	6922      	ldr	r2, [r4, #16]
 8004aa8:	6022      	str	r2, [r4, #0]
 8004aaa:	d504      	bpl.n	8004ab6 <__sflush_r+0x7e>
 8004aac:	1c42      	adds	r2, r0, #1
 8004aae:	d101      	bne.n	8004ab4 <__sflush_r+0x7c>
 8004ab0:	682b      	ldr	r3, [r5, #0]
 8004ab2:	b903      	cbnz	r3, 8004ab6 <__sflush_r+0x7e>
 8004ab4:	6560      	str	r0, [r4, #84]	; 0x54
 8004ab6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ab8:	602f      	str	r7, [r5, #0]
 8004aba:	2900      	cmp	r1, #0
 8004abc:	d0c9      	beq.n	8004a52 <__sflush_r+0x1a>
 8004abe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ac2:	4299      	cmp	r1, r3
 8004ac4:	d002      	beq.n	8004acc <__sflush_r+0x94>
 8004ac6:	4628      	mov	r0, r5
 8004ac8:	f000 f994 	bl	8004df4 <_free_r>
 8004acc:	2000      	movs	r0, #0
 8004ace:	6360      	str	r0, [r4, #52]	; 0x34
 8004ad0:	e7c0      	b.n	8004a54 <__sflush_r+0x1c>
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	4628      	mov	r0, r5
 8004ad6:	47b0      	blx	r6
 8004ad8:	1c41      	adds	r1, r0, #1
 8004ada:	d1c8      	bne.n	8004a6e <__sflush_r+0x36>
 8004adc:	682b      	ldr	r3, [r5, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d0c5      	beq.n	8004a6e <__sflush_r+0x36>
 8004ae2:	2b1d      	cmp	r3, #29
 8004ae4:	d001      	beq.n	8004aea <__sflush_r+0xb2>
 8004ae6:	2b16      	cmp	r3, #22
 8004ae8:	d101      	bne.n	8004aee <__sflush_r+0xb6>
 8004aea:	602f      	str	r7, [r5, #0]
 8004aec:	e7b1      	b.n	8004a52 <__sflush_r+0x1a>
 8004aee:	89a3      	ldrh	r3, [r4, #12]
 8004af0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004af4:	81a3      	strh	r3, [r4, #12]
 8004af6:	e7ad      	b.n	8004a54 <__sflush_r+0x1c>
 8004af8:	690f      	ldr	r7, [r1, #16]
 8004afa:	2f00      	cmp	r7, #0
 8004afc:	d0a9      	beq.n	8004a52 <__sflush_r+0x1a>
 8004afe:	0793      	lsls	r3, r2, #30
 8004b00:	680e      	ldr	r6, [r1, #0]
 8004b02:	bf08      	it	eq
 8004b04:	694b      	ldreq	r3, [r1, #20]
 8004b06:	600f      	str	r7, [r1, #0]
 8004b08:	bf18      	it	ne
 8004b0a:	2300      	movne	r3, #0
 8004b0c:	eba6 0807 	sub.w	r8, r6, r7
 8004b10:	608b      	str	r3, [r1, #8]
 8004b12:	f1b8 0f00 	cmp.w	r8, #0
 8004b16:	dd9c      	ble.n	8004a52 <__sflush_r+0x1a>
 8004b18:	4643      	mov	r3, r8
 8004b1a:	463a      	mov	r2, r7
 8004b1c:	6a21      	ldr	r1, [r4, #32]
 8004b1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004b20:	4628      	mov	r0, r5
 8004b22:	47b0      	blx	r6
 8004b24:	2800      	cmp	r0, #0
 8004b26:	dc06      	bgt.n	8004b36 <__sflush_r+0xfe>
 8004b28:	89a3      	ldrh	r3, [r4, #12]
 8004b2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b2e:	81a3      	strh	r3, [r4, #12]
 8004b30:	f04f 30ff 	mov.w	r0, #4294967295
 8004b34:	e78e      	b.n	8004a54 <__sflush_r+0x1c>
 8004b36:	4407      	add	r7, r0
 8004b38:	eba8 0800 	sub.w	r8, r8, r0
 8004b3c:	e7e9      	b.n	8004b12 <__sflush_r+0xda>
 8004b3e:	bf00      	nop
 8004b40:	20400001 	.word	0x20400001

08004b44 <_fflush_r>:
 8004b44:	b538      	push	{r3, r4, r5, lr}
 8004b46:	690b      	ldr	r3, [r1, #16]
 8004b48:	4605      	mov	r5, r0
 8004b4a:	460c      	mov	r4, r1
 8004b4c:	b1db      	cbz	r3, 8004b86 <_fflush_r+0x42>
 8004b4e:	b118      	cbz	r0, 8004b58 <_fflush_r+0x14>
 8004b50:	6983      	ldr	r3, [r0, #24]
 8004b52:	b90b      	cbnz	r3, 8004b58 <_fflush_r+0x14>
 8004b54:	f000 f860 	bl	8004c18 <__sinit>
 8004b58:	4b0c      	ldr	r3, [pc, #48]	; (8004b8c <_fflush_r+0x48>)
 8004b5a:	429c      	cmp	r4, r3
 8004b5c:	d109      	bne.n	8004b72 <_fflush_r+0x2e>
 8004b5e:	686c      	ldr	r4, [r5, #4]
 8004b60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b64:	b17b      	cbz	r3, 8004b86 <_fflush_r+0x42>
 8004b66:	4621      	mov	r1, r4
 8004b68:	4628      	mov	r0, r5
 8004b6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b6e:	f7ff bf63 	b.w	8004a38 <__sflush_r>
 8004b72:	4b07      	ldr	r3, [pc, #28]	; (8004b90 <_fflush_r+0x4c>)
 8004b74:	429c      	cmp	r4, r3
 8004b76:	d101      	bne.n	8004b7c <_fflush_r+0x38>
 8004b78:	68ac      	ldr	r4, [r5, #8]
 8004b7a:	e7f1      	b.n	8004b60 <_fflush_r+0x1c>
 8004b7c:	4b05      	ldr	r3, [pc, #20]	; (8004b94 <_fflush_r+0x50>)
 8004b7e:	429c      	cmp	r4, r3
 8004b80:	bf08      	it	eq
 8004b82:	68ec      	ldreq	r4, [r5, #12]
 8004b84:	e7ec      	b.n	8004b60 <_fflush_r+0x1c>
 8004b86:	2000      	movs	r0, #0
 8004b88:	bd38      	pop	{r3, r4, r5, pc}
 8004b8a:	bf00      	nop
 8004b8c:	08005120 	.word	0x08005120
 8004b90:	08005140 	.word	0x08005140
 8004b94:	08005100 	.word	0x08005100

08004b98 <std>:
 8004b98:	2300      	movs	r3, #0
 8004b9a:	b510      	push	{r4, lr}
 8004b9c:	4604      	mov	r4, r0
 8004b9e:	e9c0 3300 	strd	r3, r3, [r0]
 8004ba2:	6083      	str	r3, [r0, #8]
 8004ba4:	8181      	strh	r1, [r0, #12]
 8004ba6:	6643      	str	r3, [r0, #100]	; 0x64
 8004ba8:	81c2      	strh	r2, [r0, #14]
 8004baa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004bae:	6183      	str	r3, [r0, #24]
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	2208      	movs	r2, #8
 8004bb4:	305c      	adds	r0, #92	; 0x5c
 8004bb6:	f7ff fe13 	bl	80047e0 <memset>
 8004bba:	4b05      	ldr	r3, [pc, #20]	; (8004bd0 <std+0x38>)
 8004bbc:	6263      	str	r3, [r4, #36]	; 0x24
 8004bbe:	4b05      	ldr	r3, [pc, #20]	; (8004bd4 <std+0x3c>)
 8004bc0:	62a3      	str	r3, [r4, #40]	; 0x28
 8004bc2:	4b05      	ldr	r3, [pc, #20]	; (8004bd8 <std+0x40>)
 8004bc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004bc6:	4b05      	ldr	r3, [pc, #20]	; (8004bdc <std+0x44>)
 8004bc8:	6224      	str	r4, [r4, #32]
 8004bca:	6323      	str	r3, [r4, #48]	; 0x30
 8004bcc:	bd10      	pop	{r4, pc}
 8004bce:	bf00      	nop
 8004bd0:	08004f65 	.word	0x08004f65
 8004bd4:	08004f87 	.word	0x08004f87
 8004bd8:	08004fbf 	.word	0x08004fbf
 8004bdc:	08004fe3 	.word	0x08004fe3

08004be0 <_cleanup_r>:
 8004be0:	4901      	ldr	r1, [pc, #4]	; (8004be8 <_cleanup_r+0x8>)
 8004be2:	f000 b885 	b.w	8004cf0 <_fwalk_reent>
 8004be6:	bf00      	nop
 8004be8:	08004b45 	.word	0x08004b45

08004bec <__sfmoreglue>:
 8004bec:	b570      	push	{r4, r5, r6, lr}
 8004bee:	1e4a      	subs	r2, r1, #1
 8004bf0:	2568      	movs	r5, #104	; 0x68
 8004bf2:	4355      	muls	r5, r2
 8004bf4:	460e      	mov	r6, r1
 8004bf6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004bfa:	f000 f949 	bl	8004e90 <_malloc_r>
 8004bfe:	4604      	mov	r4, r0
 8004c00:	b140      	cbz	r0, 8004c14 <__sfmoreglue+0x28>
 8004c02:	2100      	movs	r1, #0
 8004c04:	e9c0 1600 	strd	r1, r6, [r0]
 8004c08:	300c      	adds	r0, #12
 8004c0a:	60a0      	str	r0, [r4, #8]
 8004c0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004c10:	f7ff fde6 	bl	80047e0 <memset>
 8004c14:	4620      	mov	r0, r4
 8004c16:	bd70      	pop	{r4, r5, r6, pc}

08004c18 <__sinit>:
 8004c18:	6983      	ldr	r3, [r0, #24]
 8004c1a:	b510      	push	{r4, lr}
 8004c1c:	4604      	mov	r4, r0
 8004c1e:	bb33      	cbnz	r3, 8004c6e <__sinit+0x56>
 8004c20:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004c24:	6503      	str	r3, [r0, #80]	; 0x50
 8004c26:	4b12      	ldr	r3, [pc, #72]	; (8004c70 <__sinit+0x58>)
 8004c28:	4a12      	ldr	r2, [pc, #72]	; (8004c74 <__sinit+0x5c>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6282      	str	r2, [r0, #40]	; 0x28
 8004c2e:	4298      	cmp	r0, r3
 8004c30:	bf04      	itt	eq
 8004c32:	2301      	moveq	r3, #1
 8004c34:	6183      	streq	r3, [r0, #24]
 8004c36:	f000 f81f 	bl	8004c78 <__sfp>
 8004c3a:	6060      	str	r0, [r4, #4]
 8004c3c:	4620      	mov	r0, r4
 8004c3e:	f000 f81b 	bl	8004c78 <__sfp>
 8004c42:	60a0      	str	r0, [r4, #8]
 8004c44:	4620      	mov	r0, r4
 8004c46:	f000 f817 	bl	8004c78 <__sfp>
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	60e0      	str	r0, [r4, #12]
 8004c4e:	2104      	movs	r1, #4
 8004c50:	6860      	ldr	r0, [r4, #4]
 8004c52:	f7ff ffa1 	bl	8004b98 <std>
 8004c56:	2201      	movs	r2, #1
 8004c58:	2109      	movs	r1, #9
 8004c5a:	68a0      	ldr	r0, [r4, #8]
 8004c5c:	f7ff ff9c 	bl	8004b98 <std>
 8004c60:	2202      	movs	r2, #2
 8004c62:	2112      	movs	r1, #18
 8004c64:	68e0      	ldr	r0, [r4, #12]
 8004c66:	f7ff ff97 	bl	8004b98 <std>
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	61a3      	str	r3, [r4, #24]
 8004c6e:	bd10      	pop	{r4, pc}
 8004c70:	080050fc 	.word	0x080050fc
 8004c74:	08004be1 	.word	0x08004be1

08004c78 <__sfp>:
 8004c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c7a:	4b1b      	ldr	r3, [pc, #108]	; (8004ce8 <__sfp+0x70>)
 8004c7c:	681e      	ldr	r6, [r3, #0]
 8004c7e:	69b3      	ldr	r3, [r6, #24]
 8004c80:	4607      	mov	r7, r0
 8004c82:	b913      	cbnz	r3, 8004c8a <__sfp+0x12>
 8004c84:	4630      	mov	r0, r6
 8004c86:	f7ff ffc7 	bl	8004c18 <__sinit>
 8004c8a:	3648      	adds	r6, #72	; 0x48
 8004c8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004c90:	3b01      	subs	r3, #1
 8004c92:	d503      	bpl.n	8004c9c <__sfp+0x24>
 8004c94:	6833      	ldr	r3, [r6, #0]
 8004c96:	b133      	cbz	r3, 8004ca6 <__sfp+0x2e>
 8004c98:	6836      	ldr	r6, [r6, #0]
 8004c9a:	e7f7      	b.n	8004c8c <__sfp+0x14>
 8004c9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004ca0:	b16d      	cbz	r5, 8004cbe <__sfp+0x46>
 8004ca2:	3468      	adds	r4, #104	; 0x68
 8004ca4:	e7f4      	b.n	8004c90 <__sfp+0x18>
 8004ca6:	2104      	movs	r1, #4
 8004ca8:	4638      	mov	r0, r7
 8004caa:	f7ff ff9f 	bl	8004bec <__sfmoreglue>
 8004cae:	6030      	str	r0, [r6, #0]
 8004cb0:	2800      	cmp	r0, #0
 8004cb2:	d1f1      	bne.n	8004c98 <__sfp+0x20>
 8004cb4:	230c      	movs	r3, #12
 8004cb6:	603b      	str	r3, [r7, #0]
 8004cb8:	4604      	mov	r4, r0
 8004cba:	4620      	mov	r0, r4
 8004cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cbe:	4b0b      	ldr	r3, [pc, #44]	; (8004cec <__sfp+0x74>)
 8004cc0:	6665      	str	r5, [r4, #100]	; 0x64
 8004cc2:	e9c4 5500 	strd	r5, r5, [r4]
 8004cc6:	60a5      	str	r5, [r4, #8]
 8004cc8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004ccc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004cd0:	2208      	movs	r2, #8
 8004cd2:	4629      	mov	r1, r5
 8004cd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004cd8:	f7ff fd82 	bl	80047e0 <memset>
 8004cdc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004ce0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004ce4:	e7e9      	b.n	8004cba <__sfp+0x42>
 8004ce6:	bf00      	nop
 8004ce8:	080050fc 	.word	0x080050fc
 8004cec:	ffff0001 	.word	0xffff0001

08004cf0 <_fwalk_reent>:
 8004cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cf4:	4680      	mov	r8, r0
 8004cf6:	4689      	mov	r9, r1
 8004cf8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004cfc:	2600      	movs	r6, #0
 8004cfe:	b914      	cbnz	r4, 8004d06 <_fwalk_reent+0x16>
 8004d00:	4630      	mov	r0, r6
 8004d02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d06:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004d0a:	3f01      	subs	r7, #1
 8004d0c:	d501      	bpl.n	8004d12 <_fwalk_reent+0x22>
 8004d0e:	6824      	ldr	r4, [r4, #0]
 8004d10:	e7f5      	b.n	8004cfe <_fwalk_reent+0xe>
 8004d12:	89ab      	ldrh	r3, [r5, #12]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d907      	bls.n	8004d28 <_fwalk_reent+0x38>
 8004d18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	d003      	beq.n	8004d28 <_fwalk_reent+0x38>
 8004d20:	4629      	mov	r1, r5
 8004d22:	4640      	mov	r0, r8
 8004d24:	47c8      	blx	r9
 8004d26:	4306      	orrs	r6, r0
 8004d28:	3568      	adds	r5, #104	; 0x68
 8004d2a:	e7ee      	b.n	8004d0a <_fwalk_reent+0x1a>

08004d2c <__swhatbuf_r>:
 8004d2c:	b570      	push	{r4, r5, r6, lr}
 8004d2e:	460e      	mov	r6, r1
 8004d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d34:	2900      	cmp	r1, #0
 8004d36:	b096      	sub	sp, #88	; 0x58
 8004d38:	4614      	mov	r4, r2
 8004d3a:	461d      	mov	r5, r3
 8004d3c:	da07      	bge.n	8004d4e <__swhatbuf_r+0x22>
 8004d3e:	2300      	movs	r3, #0
 8004d40:	602b      	str	r3, [r5, #0]
 8004d42:	89b3      	ldrh	r3, [r6, #12]
 8004d44:	061a      	lsls	r2, r3, #24
 8004d46:	d410      	bmi.n	8004d6a <__swhatbuf_r+0x3e>
 8004d48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d4c:	e00e      	b.n	8004d6c <__swhatbuf_r+0x40>
 8004d4e:	466a      	mov	r2, sp
 8004d50:	f000 f96e 	bl	8005030 <_fstat_r>
 8004d54:	2800      	cmp	r0, #0
 8004d56:	dbf2      	blt.n	8004d3e <__swhatbuf_r+0x12>
 8004d58:	9a01      	ldr	r2, [sp, #4]
 8004d5a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004d5e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004d62:	425a      	negs	r2, r3
 8004d64:	415a      	adcs	r2, r3
 8004d66:	602a      	str	r2, [r5, #0]
 8004d68:	e7ee      	b.n	8004d48 <__swhatbuf_r+0x1c>
 8004d6a:	2340      	movs	r3, #64	; 0x40
 8004d6c:	2000      	movs	r0, #0
 8004d6e:	6023      	str	r3, [r4, #0]
 8004d70:	b016      	add	sp, #88	; 0x58
 8004d72:	bd70      	pop	{r4, r5, r6, pc}

08004d74 <__smakebuf_r>:
 8004d74:	898b      	ldrh	r3, [r1, #12]
 8004d76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004d78:	079d      	lsls	r5, r3, #30
 8004d7a:	4606      	mov	r6, r0
 8004d7c:	460c      	mov	r4, r1
 8004d7e:	d507      	bpl.n	8004d90 <__smakebuf_r+0x1c>
 8004d80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004d84:	6023      	str	r3, [r4, #0]
 8004d86:	6123      	str	r3, [r4, #16]
 8004d88:	2301      	movs	r3, #1
 8004d8a:	6163      	str	r3, [r4, #20]
 8004d8c:	b002      	add	sp, #8
 8004d8e:	bd70      	pop	{r4, r5, r6, pc}
 8004d90:	ab01      	add	r3, sp, #4
 8004d92:	466a      	mov	r2, sp
 8004d94:	f7ff ffca 	bl	8004d2c <__swhatbuf_r>
 8004d98:	9900      	ldr	r1, [sp, #0]
 8004d9a:	4605      	mov	r5, r0
 8004d9c:	4630      	mov	r0, r6
 8004d9e:	f000 f877 	bl	8004e90 <_malloc_r>
 8004da2:	b948      	cbnz	r0, 8004db8 <__smakebuf_r+0x44>
 8004da4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004da8:	059a      	lsls	r2, r3, #22
 8004daa:	d4ef      	bmi.n	8004d8c <__smakebuf_r+0x18>
 8004dac:	f023 0303 	bic.w	r3, r3, #3
 8004db0:	f043 0302 	orr.w	r3, r3, #2
 8004db4:	81a3      	strh	r3, [r4, #12]
 8004db6:	e7e3      	b.n	8004d80 <__smakebuf_r+0xc>
 8004db8:	4b0d      	ldr	r3, [pc, #52]	; (8004df0 <__smakebuf_r+0x7c>)
 8004dba:	62b3      	str	r3, [r6, #40]	; 0x28
 8004dbc:	89a3      	ldrh	r3, [r4, #12]
 8004dbe:	6020      	str	r0, [r4, #0]
 8004dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dc4:	81a3      	strh	r3, [r4, #12]
 8004dc6:	9b00      	ldr	r3, [sp, #0]
 8004dc8:	6163      	str	r3, [r4, #20]
 8004dca:	9b01      	ldr	r3, [sp, #4]
 8004dcc:	6120      	str	r0, [r4, #16]
 8004dce:	b15b      	cbz	r3, 8004de8 <__smakebuf_r+0x74>
 8004dd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004dd4:	4630      	mov	r0, r6
 8004dd6:	f000 f93d 	bl	8005054 <_isatty_r>
 8004dda:	b128      	cbz	r0, 8004de8 <__smakebuf_r+0x74>
 8004ddc:	89a3      	ldrh	r3, [r4, #12]
 8004dde:	f023 0303 	bic.w	r3, r3, #3
 8004de2:	f043 0301 	orr.w	r3, r3, #1
 8004de6:	81a3      	strh	r3, [r4, #12]
 8004de8:	89a3      	ldrh	r3, [r4, #12]
 8004dea:	431d      	orrs	r5, r3
 8004dec:	81a5      	strh	r5, [r4, #12]
 8004dee:	e7cd      	b.n	8004d8c <__smakebuf_r+0x18>
 8004df0:	08004be1 	.word	0x08004be1

08004df4 <_free_r>:
 8004df4:	b538      	push	{r3, r4, r5, lr}
 8004df6:	4605      	mov	r5, r0
 8004df8:	2900      	cmp	r1, #0
 8004dfa:	d045      	beq.n	8004e88 <_free_r+0x94>
 8004dfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e00:	1f0c      	subs	r4, r1, #4
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	bfb8      	it	lt
 8004e06:	18e4      	addlt	r4, r4, r3
 8004e08:	f000 f946 	bl	8005098 <__malloc_lock>
 8004e0c:	4a1f      	ldr	r2, [pc, #124]	; (8004e8c <_free_r+0x98>)
 8004e0e:	6813      	ldr	r3, [r2, #0]
 8004e10:	4610      	mov	r0, r2
 8004e12:	b933      	cbnz	r3, 8004e22 <_free_r+0x2e>
 8004e14:	6063      	str	r3, [r4, #4]
 8004e16:	6014      	str	r4, [r2, #0]
 8004e18:	4628      	mov	r0, r5
 8004e1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e1e:	f000 b93c 	b.w	800509a <__malloc_unlock>
 8004e22:	42a3      	cmp	r3, r4
 8004e24:	d90c      	bls.n	8004e40 <_free_r+0x4c>
 8004e26:	6821      	ldr	r1, [r4, #0]
 8004e28:	1862      	adds	r2, r4, r1
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	bf04      	itt	eq
 8004e2e:	681a      	ldreq	r2, [r3, #0]
 8004e30:	685b      	ldreq	r3, [r3, #4]
 8004e32:	6063      	str	r3, [r4, #4]
 8004e34:	bf04      	itt	eq
 8004e36:	1852      	addeq	r2, r2, r1
 8004e38:	6022      	streq	r2, [r4, #0]
 8004e3a:	6004      	str	r4, [r0, #0]
 8004e3c:	e7ec      	b.n	8004e18 <_free_r+0x24>
 8004e3e:	4613      	mov	r3, r2
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	b10a      	cbz	r2, 8004e48 <_free_r+0x54>
 8004e44:	42a2      	cmp	r2, r4
 8004e46:	d9fa      	bls.n	8004e3e <_free_r+0x4a>
 8004e48:	6819      	ldr	r1, [r3, #0]
 8004e4a:	1858      	adds	r0, r3, r1
 8004e4c:	42a0      	cmp	r0, r4
 8004e4e:	d10b      	bne.n	8004e68 <_free_r+0x74>
 8004e50:	6820      	ldr	r0, [r4, #0]
 8004e52:	4401      	add	r1, r0
 8004e54:	1858      	adds	r0, r3, r1
 8004e56:	4282      	cmp	r2, r0
 8004e58:	6019      	str	r1, [r3, #0]
 8004e5a:	d1dd      	bne.n	8004e18 <_free_r+0x24>
 8004e5c:	6810      	ldr	r0, [r2, #0]
 8004e5e:	6852      	ldr	r2, [r2, #4]
 8004e60:	605a      	str	r2, [r3, #4]
 8004e62:	4401      	add	r1, r0
 8004e64:	6019      	str	r1, [r3, #0]
 8004e66:	e7d7      	b.n	8004e18 <_free_r+0x24>
 8004e68:	d902      	bls.n	8004e70 <_free_r+0x7c>
 8004e6a:	230c      	movs	r3, #12
 8004e6c:	602b      	str	r3, [r5, #0]
 8004e6e:	e7d3      	b.n	8004e18 <_free_r+0x24>
 8004e70:	6820      	ldr	r0, [r4, #0]
 8004e72:	1821      	adds	r1, r4, r0
 8004e74:	428a      	cmp	r2, r1
 8004e76:	bf04      	itt	eq
 8004e78:	6811      	ldreq	r1, [r2, #0]
 8004e7a:	6852      	ldreq	r2, [r2, #4]
 8004e7c:	6062      	str	r2, [r4, #4]
 8004e7e:	bf04      	itt	eq
 8004e80:	1809      	addeq	r1, r1, r0
 8004e82:	6021      	streq	r1, [r4, #0]
 8004e84:	605c      	str	r4, [r3, #4]
 8004e86:	e7c7      	b.n	8004e18 <_free_r+0x24>
 8004e88:	bd38      	pop	{r3, r4, r5, pc}
 8004e8a:	bf00      	nop
 8004e8c:	20000090 	.word	0x20000090

08004e90 <_malloc_r>:
 8004e90:	b570      	push	{r4, r5, r6, lr}
 8004e92:	1ccd      	adds	r5, r1, #3
 8004e94:	f025 0503 	bic.w	r5, r5, #3
 8004e98:	3508      	adds	r5, #8
 8004e9a:	2d0c      	cmp	r5, #12
 8004e9c:	bf38      	it	cc
 8004e9e:	250c      	movcc	r5, #12
 8004ea0:	2d00      	cmp	r5, #0
 8004ea2:	4606      	mov	r6, r0
 8004ea4:	db01      	blt.n	8004eaa <_malloc_r+0x1a>
 8004ea6:	42a9      	cmp	r1, r5
 8004ea8:	d903      	bls.n	8004eb2 <_malloc_r+0x22>
 8004eaa:	230c      	movs	r3, #12
 8004eac:	6033      	str	r3, [r6, #0]
 8004eae:	2000      	movs	r0, #0
 8004eb0:	bd70      	pop	{r4, r5, r6, pc}
 8004eb2:	f000 f8f1 	bl	8005098 <__malloc_lock>
 8004eb6:	4a21      	ldr	r2, [pc, #132]	; (8004f3c <_malloc_r+0xac>)
 8004eb8:	6814      	ldr	r4, [r2, #0]
 8004eba:	4621      	mov	r1, r4
 8004ebc:	b991      	cbnz	r1, 8004ee4 <_malloc_r+0x54>
 8004ebe:	4c20      	ldr	r4, [pc, #128]	; (8004f40 <_malloc_r+0xb0>)
 8004ec0:	6823      	ldr	r3, [r4, #0]
 8004ec2:	b91b      	cbnz	r3, 8004ecc <_malloc_r+0x3c>
 8004ec4:	4630      	mov	r0, r6
 8004ec6:	f000 f83d 	bl	8004f44 <_sbrk_r>
 8004eca:	6020      	str	r0, [r4, #0]
 8004ecc:	4629      	mov	r1, r5
 8004ece:	4630      	mov	r0, r6
 8004ed0:	f000 f838 	bl	8004f44 <_sbrk_r>
 8004ed4:	1c43      	adds	r3, r0, #1
 8004ed6:	d124      	bne.n	8004f22 <_malloc_r+0x92>
 8004ed8:	230c      	movs	r3, #12
 8004eda:	6033      	str	r3, [r6, #0]
 8004edc:	4630      	mov	r0, r6
 8004ede:	f000 f8dc 	bl	800509a <__malloc_unlock>
 8004ee2:	e7e4      	b.n	8004eae <_malloc_r+0x1e>
 8004ee4:	680b      	ldr	r3, [r1, #0]
 8004ee6:	1b5b      	subs	r3, r3, r5
 8004ee8:	d418      	bmi.n	8004f1c <_malloc_r+0x8c>
 8004eea:	2b0b      	cmp	r3, #11
 8004eec:	d90f      	bls.n	8004f0e <_malloc_r+0x7e>
 8004eee:	600b      	str	r3, [r1, #0]
 8004ef0:	50cd      	str	r5, [r1, r3]
 8004ef2:	18cc      	adds	r4, r1, r3
 8004ef4:	4630      	mov	r0, r6
 8004ef6:	f000 f8d0 	bl	800509a <__malloc_unlock>
 8004efa:	f104 000b 	add.w	r0, r4, #11
 8004efe:	1d23      	adds	r3, r4, #4
 8004f00:	f020 0007 	bic.w	r0, r0, #7
 8004f04:	1ac3      	subs	r3, r0, r3
 8004f06:	d0d3      	beq.n	8004eb0 <_malloc_r+0x20>
 8004f08:	425a      	negs	r2, r3
 8004f0a:	50e2      	str	r2, [r4, r3]
 8004f0c:	e7d0      	b.n	8004eb0 <_malloc_r+0x20>
 8004f0e:	428c      	cmp	r4, r1
 8004f10:	684b      	ldr	r3, [r1, #4]
 8004f12:	bf16      	itet	ne
 8004f14:	6063      	strne	r3, [r4, #4]
 8004f16:	6013      	streq	r3, [r2, #0]
 8004f18:	460c      	movne	r4, r1
 8004f1a:	e7eb      	b.n	8004ef4 <_malloc_r+0x64>
 8004f1c:	460c      	mov	r4, r1
 8004f1e:	6849      	ldr	r1, [r1, #4]
 8004f20:	e7cc      	b.n	8004ebc <_malloc_r+0x2c>
 8004f22:	1cc4      	adds	r4, r0, #3
 8004f24:	f024 0403 	bic.w	r4, r4, #3
 8004f28:	42a0      	cmp	r0, r4
 8004f2a:	d005      	beq.n	8004f38 <_malloc_r+0xa8>
 8004f2c:	1a21      	subs	r1, r4, r0
 8004f2e:	4630      	mov	r0, r6
 8004f30:	f000 f808 	bl	8004f44 <_sbrk_r>
 8004f34:	3001      	adds	r0, #1
 8004f36:	d0cf      	beq.n	8004ed8 <_malloc_r+0x48>
 8004f38:	6025      	str	r5, [r4, #0]
 8004f3a:	e7db      	b.n	8004ef4 <_malloc_r+0x64>
 8004f3c:	20000090 	.word	0x20000090
 8004f40:	20000094 	.word	0x20000094

08004f44 <_sbrk_r>:
 8004f44:	b538      	push	{r3, r4, r5, lr}
 8004f46:	4c06      	ldr	r4, [pc, #24]	; (8004f60 <_sbrk_r+0x1c>)
 8004f48:	2300      	movs	r3, #0
 8004f4a:	4605      	mov	r5, r0
 8004f4c:	4608      	mov	r0, r1
 8004f4e:	6023      	str	r3, [r4, #0]
 8004f50:	f7fb fdd0 	bl	8000af4 <_sbrk>
 8004f54:	1c43      	adds	r3, r0, #1
 8004f56:	d102      	bne.n	8004f5e <_sbrk_r+0x1a>
 8004f58:	6823      	ldr	r3, [r4, #0]
 8004f5a:	b103      	cbz	r3, 8004f5e <_sbrk_r+0x1a>
 8004f5c:	602b      	str	r3, [r5, #0]
 8004f5e:	bd38      	pop	{r3, r4, r5, pc}
 8004f60:	200136d0 	.word	0x200136d0

08004f64 <__sread>:
 8004f64:	b510      	push	{r4, lr}
 8004f66:	460c      	mov	r4, r1
 8004f68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f6c:	f000 f896 	bl	800509c <_read_r>
 8004f70:	2800      	cmp	r0, #0
 8004f72:	bfab      	itete	ge
 8004f74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004f76:	89a3      	ldrhlt	r3, [r4, #12]
 8004f78:	181b      	addge	r3, r3, r0
 8004f7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004f7e:	bfac      	ite	ge
 8004f80:	6563      	strge	r3, [r4, #84]	; 0x54
 8004f82:	81a3      	strhlt	r3, [r4, #12]
 8004f84:	bd10      	pop	{r4, pc}

08004f86 <__swrite>:
 8004f86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f8a:	461f      	mov	r7, r3
 8004f8c:	898b      	ldrh	r3, [r1, #12]
 8004f8e:	05db      	lsls	r3, r3, #23
 8004f90:	4605      	mov	r5, r0
 8004f92:	460c      	mov	r4, r1
 8004f94:	4616      	mov	r6, r2
 8004f96:	d505      	bpl.n	8004fa4 <__swrite+0x1e>
 8004f98:	2302      	movs	r3, #2
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fa0:	f000 f868 	bl	8005074 <_lseek_r>
 8004fa4:	89a3      	ldrh	r3, [r4, #12]
 8004fa6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004faa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fae:	81a3      	strh	r3, [r4, #12]
 8004fb0:	4632      	mov	r2, r6
 8004fb2:	463b      	mov	r3, r7
 8004fb4:	4628      	mov	r0, r5
 8004fb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fba:	f000 b817 	b.w	8004fec <_write_r>

08004fbe <__sseek>:
 8004fbe:	b510      	push	{r4, lr}
 8004fc0:	460c      	mov	r4, r1
 8004fc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fc6:	f000 f855 	bl	8005074 <_lseek_r>
 8004fca:	1c43      	adds	r3, r0, #1
 8004fcc:	89a3      	ldrh	r3, [r4, #12]
 8004fce:	bf15      	itete	ne
 8004fd0:	6560      	strne	r0, [r4, #84]	; 0x54
 8004fd2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004fd6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004fda:	81a3      	strheq	r3, [r4, #12]
 8004fdc:	bf18      	it	ne
 8004fde:	81a3      	strhne	r3, [r4, #12]
 8004fe0:	bd10      	pop	{r4, pc}

08004fe2 <__sclose>:
 8004fe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fe6:	f000 b813 	b.w	8005010 <_close_r>
	...

08004fec <_write_r>:
 8004fec:	b538      	push	{r3, r4, r5, lr}
 8004fee:	4c07      	ldr	r4, [pc, #28]	; (800500c <_write_r+0x20>)
 8004ff0:	4605      	mov	r5, r0
 8004ff2:	4608      	mov	r0, r1
 8004ff4:	4611      	mov	r1, r2
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	6022      	str	r2, [r4, #0]
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	f7fb fd29 	bl	8000a52 <_write>
 8005000:	1c43      	adds	r3, r0, #1
 8005002:	d102      	bne.n	800500a <_write_r+0x1e>
 8005004:	6823      	ldr	r3, [r4, #0]
 8005006:	b103      	cbz	r3, 800500a <_write_r+0x1e>
 8005008:	602b      	str	r3, [r5, #0]
 800500a:	bd38      	pop	{r3, r4, r5, pc}
 800500c:	200136d0 	.word	0x200136d0

08005010 <_close_r>:
 8005010:	b538      	push	{r3, r4, r5, lr}
 8005012:	4c06      	ldr	r4, [pc, #24]	; (800502c <_close_r+0x1c>)
 8005014:	2300      	movs	r3, #0
 8005016:	4605      	mov	r5, r0
 8005018:	4608      	mov	r0, r1
 800501a:	6023      	str	r3, [r4, #0]
 800501c:	f7fb fd35 	bl	8000a8a <_close>
 8005020:	1c43      	adds	r3, r0, #1
 8005022:	d102      	bne.n	800502a <_close_r+0x1a>
 8005024:	6823      	ldr	r3, [r4, #0]
 8005026:	b103      	cbz	r3, 800502a <_close_r+0x1a>
 8005028:	602b      	str	r3, [r5, #0]
 800502a:	bd38      	pop	{r3, r4, r5, pc}
 800502c:	200136d0 	.word	0x200136d0

08005030 <_fstat_r>:
 8005030:	b538      	push	{r3, r4, r5, lr}
 8005032:	4c07      	ldr	r4, [pc, #28]	; (8005050 <_fstat_r+0x20>)
 8005034:	2300      	movs	r3, #0
 8005036:	4605      	mov	r5, r0
 8005038:	4608      	mov	r0, r1
 800503a:	4611      	mov	r1, r2
 800503c:	6023      	str	r3, [r4, #0]
 800503e:	f7fb fd30 	bl	8000aa2 <_fstat>
 8005042:	1c43      	adds	r3, r0, #1
 8005044:	d102      	bne.n	800504c <_fstat_r+0x1c>
 8005046:	6823      	ldr	r3, [r4, #0]
 8005048:	b103      	cbz	r3, 800504c <_fstat_r+0x1c>
 800504a:	602b      	str	r3, [r5, #0]
 800504c:	bd38      	pop	{r3, r4, r5, pc}
 800504e:	bf00      	nop
 8005050:	200136d0 	.word	0x200136d0

08005054 <_isatty_r>:
 8005054:	b538      	push	{r3, r4, r5, lr}
 8005056:	4c06      	ldr	r4, [pc, #24]	; (8005070 <_isatty_r+0x1c>)
 8005058:	2300      	movs	r3, #0
 800505a:	4605      	mov	r5, r0
 800505c:	4608      	mov	r0, r1
 800505e:	6023      	str	r3, [r4, #0]
 8005060:	f7fb fd2f 	bl	8000ac2 <_isatty>
 8005064:	1c43      	adds	r3, r0, #1
 8005066:	d102      	bne.n	800506e <_isatty_r+0x1a>
 8005068:	6823      	ldr	r3, [r4, #0]
 800506a:	b103      	cbz	r3, 800506e <_isatty_r+0x1a>
 800506c:	602b      	str	r3, [r5, #0]
 800506e:	bd38      	pop	{r3, r4, r5, pc}
 8005070:	200136d0 	.word	0x200136d0

08005074 <_lseek_r>:
 8005074:	b538      	push	{r3, r4, r5, lr}
 8005076:	4c07      	ldr	r4, [pc, #28]	; (8005094 <_lseek_r+0x20>)
 8005078:	4605      	mov	r5, r0
 800507a:	4608      	mov	r0, r1
 800507c:	4611      	mov	r1, r2
 800507e:	2200      	movs	r2, #0
 8005080:	6022      	str	r2, [r4, #0]
 8005082:	461a      	mov	r2, r3
 8005084:	f7fb fd28 	bl	8000ad8 <_lseek>
 8005088:	1c43      	adds	r3, r0, #1
 800508a:	d102      	bne.n	8005092 <_lseek_r+0x1e>
 800508c:	6823      	ldr	r3, [r4, #0]
 800508e:	b103      	cbz	r3, 8005092 <_lseek_r+0x1e>
 8005090:	602b      	str	r3, [r5, #0]
 8005092:	bd38      	pop	{r3, r4, r5, pc}
 8005094:	200136d0 	.word	0x200136d0

08005098 <__malloc_lock>:
 8005098:	4770      	bx	lr

0800509a <__malloc_unlock>:
 800509a:	4770      	bx	lr

0800509c <_read_r>:
 800509c:	b538      	push	{r3, r4, r5, lr}
 800509e:	4c07      	ldr	r4, [pc, #28]	; (80050bc <_read_r+0x20>)
 80050a0:	4605      	mov	r5, r0
 80050a2:	4608      	mov	r0, r1
 80050a4:	4611      	mov	r1, r2
 80050a6:	2200      	movs	r2, #0
 80050a8:	6022      	str	r2, [r4, #0]
 80050aa:	461a      	mov	r2, r3
 80050ac:	f7fb fcb4 	bl	8000a18 <_read>
 80050b0:	1c43      	adds	r3, r0, #1
 80050b2:	d102      	bne.n	80050ba <_read_r+0x1e>
 80050b4:	6823      	ldr	r3, [r4, #0]
 80050b6:	b103      	cbz	r3, 80050ba <_read_r+0x1e>
 80050b8:	602b      	str	r3, [r5, #0]
 80050ba:	bd38      	pop	{r3, r4, r5, pc}
 80050bc:	200136d0 	.word	0x200136d0

080050c0 <_init>:
 80050c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050c2:	bf00      	nop
 80050c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050c6:	bc08      	pop	{r3}
 80050c8:	469e      	mov	lr, r3
 80050ca:	4770      	bx	lr

080050cc <_fini>:
 80050cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ce:	bf00      	nop
 80050d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050d2:	bc08      	pop	{r3}
 80050d4:	469e      	mov	lr, r3
 80050d6:	4770      	bx	lr
