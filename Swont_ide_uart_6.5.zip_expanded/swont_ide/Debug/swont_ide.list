
swont_ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008040  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005094  080081d0  080081d0  000181d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d264  0800d264  00020118  2**0
                  CONTENTS
  4 .ARM          00000008  0800d264  0800d264  0001d264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d26c  0800d26c  00020118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d26c  0800d26c  0001d26c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d270  0800d270  0001d270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000118  20000000  0800d274  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013a28  20000118  0800d38c  00020118  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20013b40  0800d38c  00023b40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ece9  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a6c  00000000  00000000  0002ee31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc8  00000000  00000000  000318a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c60  00000000  00000000  00032668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024042  00000000  00000000  000332c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001243d  00000000  00000000  0005730a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cba9a  00000000  00000000  00069747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001351e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fe0  00000000  00000000  00135234  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000118 	.word	0x20000118
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080081b8 	.word	0x080081b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000011c 	.word	0x2000011c
 80001cc:	080081b8 	.word	0x080081b8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <FL_Input>:
//--------------------------------------------------------------
// @brief Function load input into structs
// @details This function loads the different arguments into the assigned structs
//--------------------------------------------------------------
void FL_Input()
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	switch(input.line_rx_buffer[firstCharacter])
 8000598:	4bbe      	ldr	r3, [pc, #760]	; (8000894 <FL_Input+0x300>)
 800059a:	785b      	ldrb	r3, [r3, #1]
 800059c:	3b62      	subs	r3, #98	; 0x62
 800059e:	2b12      	cmp	r3, #18
 80005a0:	f200 8174 	bhi.w	800088c <FL_Input+0x2f8>
 80005a4:	a201      	add	r2, pc, #4	; (adr r2, 80005ac <FL_Input+0x18>)
 80005a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005aa:	bf00      	nop
 80005ac:	0800080b 	.word	0x0800080b
 80005b0:	08000867 	.word	0x08000867
 80005b4:	0800088d 	.word	0x0800088d
 80005b8:	0800088d 	.word	0x0800088d
 80005bc:	0800088d 	.word	0x0800088d
 80005c0:	0800088d 	.word	0x0800088d
 80005c4:	0800088d 	.word	0x0800088d
 80005c8:	0800088d 	.word	0x0800088d
 80005cc:	0800088d 	.word	0x0800088d
 80005d0:	0800088d 	.word	0x0800088d
 80005d4:	080005f9 	.word	0x080005f9
 80005d8:	0800088d 	.word	0x0800088d
 80005dc:	0800088d 	.word	0x0800088d
 80005e0:	0800088d 	.word	0x0800088d
 80005e4:	0800088d 	.word	0x0800088d
 80005e8:	0800088d 	.word	0x0800088d
 80005ec:	08000741 	.word	0x08000741
 80005f0:	0800088d 	.word	0x0800088d
 80005f4:	08000699 	.word	0x08000699
	{
		case line:	//if the function line is called
			if(checkFunctionLen(lineLen) == false)
 80005f8:	2006      	movs	r0, #6
 80005fa:	f000 f9f5 	bl	80009e8 <checkFunctionLen>
 80005fe:	4603      	mov	r3, r0
 8000600:	f083 0301 	eor.w	r3, r3, #1
 8000604:	b2db      	uxtb	r3, r3
 8000606:	2b00      	cmp	r3, #0
 8000608:	f000 8162 	beq.w	80008d0 <FL_Input+0x33c>
			{
				arg(argumentONE, string_container, NOTEXT);	//collects the information from argument 1
 800060c:	2200      	movs	r2, #0
 800060e:	49a2      	ldr	r1, [pc, #648]	; (8000898 <FL_Input+0x304>)
 8000610:	2001      	movs	r0, #1
 8000612:	f000 f969 	bl	80008e8 <arg>
				line_s.x1 = atoi(string_container);	//stores the information from argument 1 into line struct
 8000616:	48a0      	ldr	r0, [pc, #640]	; (8000898 <FL_Input+0x304>)
 8000618:	f006 fd76 	bl	8007108 <atoi>
 800061c:	4603      	mov	r3, r0
 800061e:	b29a      	uxth	r2, r3
 8000620:	4b9e      	ldr	r3, [pc, #632]	; (800089c <FL_Input+0x308>)
 8000622:	801a      	strh	r2, [r3, #0]
				arg(argumentTWO, string_container, NOTEXT);	//etc
 8000624:	2200      	movs	r2, #0
 8000626:	499c      	ldr	r1, [pc, #624]	; (8000898 <FL_Input+0x304>)
 8000628:	2002      	movs	r0, #2
 800062a:	f000 f95d 	bl	80008e8 <arg>
				line_s.y1 = atoi(string_container);
 800062e:	489a      	ldr	r0, [pc, #616]	; (8000898 <FL_Input+0x304>)
 8000630:	f006 fd6a 	bl	8007108 <atoi>
 8000634:	4603      	mov	r3, r0
 8000636:	b29a      	uxth	r2, r3
 8000638:	4b98      	ldr	r3, [pc, #608]	; (800089c <FL_Input+0x308>)
 800063a:	805a      	strh	r2, [r3, #2]
				arg(argumentTHREE, string_container, NOTEXT);
 800063c:	2200      	movs	r2, #0
 800063e:	4996      	ldr	r1, [pc, #600]	; (8000898 <FL_Input+0x304>)
 8000640:	2003      	movs	r0, #3
 8000642:	f000 f951 	bl	80008e8 <arg>
				line_s.x2 = atoi(string_container);
 8000646:	4894      	ldr	r0, [pc, #592]	; (8000898 <FL_Input+0x304>)
 8000648:	f006 fd5e 	bl	8007108 <atoi>
 800064c:	4603      	mov	r3, r0
 800064e:	b29a      	uxth	r2, r3
 8000650:	4b92      	ldr	r3, [pc, #584]	; (800089c <FL_Input+0x308>)
 8000652:	809a      	strh	r2, [r3, #4]
				arg(argumentFOUR, string_container, NOTEXT);
 8000654:	2200      	movs	r2, #0
 8000656:	4990      	ldr	r1, [pc, #576]	; (8000898 <FL_Input+0x304>)
 8000658:	2004      	movs	r0, #4
 800065a:	f000 f945 	bl	80008e8 <arg>
				line_s.y2 = atoi(string_container);
 800065e:	488e      	ldr	r0, [pc, #568]	; (8000898 <FL_Input+0x304>)
 8000660:	f006 fd52 	bl	8007108 <atoi>
 8000664:	4603      	mov	r3, r0
 8000666:	b29a      	uxth	r2, r3
 8000668:	4b8c      	ldr	r3, [pc, #560]	; (800089c <FL_Input+0x308>)
 800066a:	80da      	strh	r2, [r3, #6]
				arg(argumentFIVE, string_container, NOTEXT);
 800066c:	2200      	movs	r2, #0
 800066e:	498a      	ldr	r1, [pc, #552]	; (8000898 <FL_Input+0x304>)
 8000670:	2005      	movs	r0, #5
 8000672:	f000 f939 	bl	80008e8 <arg>
				strcpy(line_s.color, string_container);
 8000676:	4988      	ldr	r1, [pc, #544]	; (8000898 <FL_Input+0x304>)
 8000678:	4889      	ldr	r0, [pc, #548]	; (80008a0 <FL_Input+0x30c>)
 800067a:	f006 fd93 	bl	80071a4 <strcpy>
				arg(argumentSIX, string_container, NOTEXT);
 800067e:	2200      	movs	r2, #0
 8000680:	4985      	ldr	r1, [pc, #532]	; (8000898 <FL_Input+0x304>)
 8000682:	2006      	movs	r0, #6
 8000684:	f000 f930 	bl	80008e8 <arg>
				line_s.weight = atoi(string_container);
 8000688:	4883      	ldr	r0, [pc, #524]	; (8000898 <FL_Input+0x304>)
 800068a:	f006 fd3d 	bl	8007108 <atoi>
 800068e:	4603      	mov	r3, r0
 8000690:	b2da      	uxtb	r2, r3
 8000692:	4b82      	ldr	r3, [pc, #520]	; (800089c <FL_Input+0x308>)
 8000694:	751a      	strb	r2, [r3, #20]
				break;
 8000696:	e124      	b.n	80008e2 <FL_Input+0x34e>
			}
			else break;
		case text:	//if the function text is called
			if(checkFunctionLen(textLen) == false)
 8000698:	2007      	movs	r0, #7
 800069a:	f000 f9a5 	bl	80009e8 <checkFunctionLen>
 800069e:	4603      	mov	r3, r0
 80006a0:	f083 0301 	eor.w	r3, r3, #1
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	f000 8114 	beq.w	80008d4 <FL_Input+0x340>
			{
				arg(argumentONE, string_container, NOTEXT);	//collects the information from argument 1
 80006ac:	2200      	movs	r2, #0
 80006ae:	497a      	ldr	r1, [pc, #488]	; (8000898 <FL_Input+0x304>)
 80006b0:	2001      	movs	r0, #1
 80006b2:	f000 f919 	bl	80008e8 <arg>
				text_s.xlup = atoi(string_container);	//stores the information from argument 1 into text struct
 80006b6:	4878      	ldr	r0, [pc, #480]	; (8000898 <FL_Input+0x304>)
 80006b8:	f006 fd26 	bl	8007108 <atoi>
 80006bc:	4603      	mov	r3, r0
 80006be:	b29a      	uxth	r2, r3
 80006c0:	4b78      	ldr	r3, [pc, #480]	; (80008a4 <FL_Input+0x310>)
 80006c2:	801a      	strh	r2, [r3, #0]
				arg(argumentTWO, string_container, NOTEXT);	//etc
 80006c4:	2200      	movs	r2, #0
 80006c6:	4974      	ldr	r1, [pc, #464]	; (8000898 <FL_Input+0x304>)
 80006c8:	2002      	movs	r0, #2
 80006ca:	f000 f90d 	bl	80008e8 <arg>
				text_s.ylup = atoi(string_container);
 80006ce:	4872      	ldr	r0, [pc, #456]	; (8000898 <FL_Input+0x304>)
 80006d0:	f006 fd1a 	bl	8007108 <atoi>
 80006d4:	4603      	mov	r3, r0
 80006d6:	b29a      	uxth	r2, r3
 80006d8:	4b72      	ldr	r3, [pc, #456]	; (80008a4 <FL_Input+0x310>)
 80006da:	805a      	strh	r2, [r3, #2]
				arg(argumentTHREE, string_container, NOTEXT);
 80006dc:	2200      	movs	r2, #0
 80006de:	496e      	ldr	r1, [pc, #440]	; (8000898 <FL_Input+0x304>)
 80006e0:	2003      	movs	r0, #3
 80006e2:	f000 f901 	bl	80008e8 <arg>
				strcpy(text_s.color, string_container);
 80006e6:	496c      	ldr	r1, [pc, #432]	; (8000898 <FL_Input+0x304>)
 80006e8:	486f      	ldr	r0, [pc, #444]	; (80008a8 <FL_Input+0x314>)
 80006ea:	f006 fd5b 	bl	80071a4 <strcpy>
				arg(argumentFOUR, string_container, YESTEXT);
 80006ee:	2201      	movs	r2, #1
 80006f0:	4969      	ldr	r1, [pc, #420]	; (8000898 <FL_Input+0x304>)
 80006f2:	2004      	movs	r0, #4
 80006f4:	f000 f8f8 	bl	80008e8 <arg>
				strcpy(text_s.textin, string_container);
 80006f8:	4967      	ldr	r1, [pc, #412]	; (8000898 <FL_Input+0x304>)
 80006fa:	486c      	ldr	r0, [pc, #432]	; (80008ac <FL_Input+0x318>)
 80006fc:	f006 fd52 	bl	80071a4 <strcpy>
				arg(argumentFIVE, string_container, NOTEXT);
 8000700:	2200      	movs	r2, #0
 8000702:	4965      	ldr	r1, [pc, #404]	; (8000898 <FL_Input+0x304>)
 8000704:	2005      	movs	r0, #5
 8000706:	f000 f8ef 	bl	80008e8 <arg>
				strcpy(text_s.fontname, string_container);
 800070a:	4963      	ldr	r1, [pc, #396]	; (8000898 <FL_Input+0x304>)
 800070c:	4868      	ldr	r0, [pc, #416]	; (80008b0 <FL_Input+0x31c>)
 800070e:	f006 fd49 	bl	80071a4 <strcpy>
				arg(argumentSIX, string_container, NOTEXT);
 8000712:	2200      	movs	r2, #0
 8000714:	4960      	ldr	r1, [pc, #384]	; (8000898 <FL_Input+0x304>)
 8000716:	2006      	movs	r0, #6
 8000718:	f000 f8e6 	bl	80008e8 <arg>
				text_s.fontsize = atoi(string_container);
 800071c:	485e      	ldr	r0, [pc, #376]	; (8000898 <FL_Input+0x304>)
 800071e:	f006 fcf3 	bl	8007108 <atoi>
 8000722:	4603      	mov	r3, r0
 8000724:	b2da      	uxtb	r2, r3
 8000726:	4b5f      	ldr	r3, [pc, #380]	; (80008a4 <FL_Input+0x310>)
 8000728:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
				arg(argumentSEVEN, string_container, NOTEXT);
 800072c:	2200      	movs	r2, #0
 800072e:	495a      	ldr	r1, [pc, #360]	; (8000898 <FL_Input+0x304>)
 8000730:	2007      	movs	r0, #7
 8000732:	f000 f8d9 	bl	80008e8 <arg>
				strcpy(text_s.fontstyle, string_container);
 8000736:	4958      	ldr	r1, [pc, #352]	; (8000898 <FL_Input+0x304>)
 8000738:	485e      	ldr	r0, [pc, #376]	; (80008b4 <FL_Input+0x320>)
 800073a:	f006 fd33 	bl	80071a4 <strcpy>
				break;
 800073e:	e0d0      	b.n	80008e2 <FL_Input+0x34e>
			}
			else break;
		case rectangle:	//if the function rectangle is called
			if(checkFunctionLen(rectangleLen) == false)
 8000740:	2008      	movs	r0, #8
 8000742:	f000 f951 	bl	80009e8 <checkFunctionLen>
 8000746:	4603      	mov	r3, r0
 8000748:	f083 0301 	eor.w	r3, r3, #1
 800074c:	b2db      	uxtb	r3, r3
 800074e:	2b00      	cmp	r3, #0
 8000750:	f000 80c2 	beq.w	80008d8 <FL_Input+0x344>
			{
				arg(argumentONE, string_container, NOTEXT);	//collects the information from argument 1
 8000754:	2200      	movs	r2, #0
 8000756:	4950      	ldr	r1, [pc, #320]	; (8000898 <FL_Input+0x304>)
 8000758:	2001      	movs	r0, #1
 800075a:	f000 f8c5 	bl	80008e8 <arg>
				rectangle_s.xlup = atoi(string_container);	//stores the information from argument 1 into rectangle struct
 800075e:	484e      	ldr	r0, [pc, #312]	; (8000898 <FL_Input+0x304>)
 8000760:	f006 fcd2 	bl	8007108 <atoi>
 8000764:	4603      	mov	r3, r0
 8000766:	b29a      	uxth	r2, r3
 8000768:	4b53      	ldr	r3, [pc, #332]	; (80008b8 <FL_Input+0x324>)
 800076a:	801a      	strh	r2, [r3, #0]
				arg(argumentTWO, string_container, NOTEXT);
 800076c:	2200      	movs	r2, #0
 800076e:	494a      	ldr	r1, [pc, #296]	; (8000898 <FL_Input+0x304>)
 8000770:	2002      	movs	r0, #2
 8000772:	f000 f8b9 	bl	80008e8 <arg>
				rectangle_s.ylup = atoi(string_container);
 8000776:	4848      	ldr	r0, [pc, #288]	; (8000898 <FL_Input+0x304>)
 8000778:	f006 fcc6 	bl	8007108 <atoi>
 800077c:	4603      	mov	r3, r0
 800077e:	b29a      	uxth	r2, r3
 8000780:	4b4d      	ldr	r3, [pc, #308]	; (80008b8 <FL_Input+0x324>)
 8000782:	805a      	strh	r2, [r3, #2]
				arg(argumentTHREE, string_container, NOTEXT);
 8000784:	2200      	movs	r2, #0
 8000786:	4944      	ldr	r1, [pc, #272]	; (8000898 <FL_Input+0x304>)
 8000788:	2003      	movs	r0, #3
 800078a:	f000 f8ad 	bl	80008e8 <arg>
				rectangle_s.width = atoi(string_container);
 800078e:	4842      	ldr	r0, [pc, #264]	; (8000898 <FL_Input+0x304>)
 8000790:	f006 fcba 	bl	8007108 <atoi>
 8000794:	4603      	mov	r3, r0
 8000796:	b2da      	uxtb	r2, r3
 8000798:	4b47      	ldr	r3, [pc, #284]	; (80008b8 <FL_Input+0x324>)
 800079a:	711a      	strb	r2, [r3, #4]
				arg(argumentFOUR, string_container, NOTEXT);
 800079c:	2200      	movs	r2, #0
 800079e:	493e      	ldr	r1, [pc, #248]	; (8000898 <FL_Input+0x304>)
 80007a0:	2004      	movs	r0, #4
 80007a2:	f000 f8a1 	bl	80008e8 <arg>
				rectangle_s.height = atoi(string_container);
 80007a6:	483c      	ldr	r0, [pc, #240]	; (8000898 <FL_Input+0x304>)
 80007a8:	f006 fcae 	bl	8007108 <atoi>
 80007ac:	4603      	mov	r3, r0
 80007ae:	b2da      	uxtb	r2, r3
 80007b0:	4b41      	ldr	r3, [pc, #260]	; (80008b8 <FL_Input+0x324>)
 80007b2:	715a      	strb	r2, [r3, #5]
				arg(argumentFIVE, string_container, NOTEXT);
 80007b4:	2200      	movs	r2, #0
 80007b6:	4938      	ldr	r1, [pc, #224]	; (8000898 <FL_Input+0x304>)
 80007b8:	2005      	movs	r0, #5
 80007ba:	f000 f895 	bl	80008e8 <arg>
				strcpy(rectangle_s.color, string_container);
 80007be:	4936      	ldr	r1, [pc, #216]	; (8000898 <FL_Input+0x304>)
 80007c0:	483e      	ldr	r0, [pc, #248]	; (80008bc <FL_Input+0x328>)
 80007c2:	f006 fcef 	bl	80071a4 <strcpy>
				arg(argumentSIX, string_container, NOTEXT);
 80007c6:	2200      	movs	r2, #0
 80007c8:	4933      	ldr	r1, [pc, #204]	; (8000898 <FL_Input+0x304>)
 80007ca:	2006      	movs	r0, #6
 80007cc:	f000 f88c 	bl	80008e8 <arg>
				rectangle_s.filled = atoi(string_container);
 80007d0:	4831      	ldr	r0, [pc, #196]	; (8000898 <FL_Input+0x304>)
 80007d2:	f006 fc99 	bl	8007108 <atoi>
 80007d6:	4603      	mov	r3, r0
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	4b37      	ldr	r3, [pc, #220]	; (80008b8 <FL_Input+0x324>)
 80007dc:	749a      	strb	r2, [r3, #18]
				arg(argumentSEVEN, string_container, NOTEXT);
 80007de:	2200      	movs	r2, #0
 80007e0:	492d      	ldr	r1, [pc, #180]	; (8000898 <FL_Input+0x304>)
 80007e2:	2007      	movs	r0, #7
 80007e4:	f000 f880 	bl	80008e8 <arg>
				strcpy(rectangle_s.bordercolor, string_container);
 80007e8:	492b      	ldr	r1, [pc, #172]	; (8000898 <FL_Input+0x304>)
 80007ea:	4835      	ldr	r0, [pc, #212]	; (80008c0 <FL_Input+0x32c>)
 80007ec:	f006 fcda 	bl	80071a4 <strcpy>
				arg(argumentEIGHT, string_container, NOTEXT);
 80007f0:	2200      	movs	r2, #0
 80007f2:	4929      	ldr	r1, [pc, #164]	; (8000898 <FL_Input+0x304>)
 80007f4:	2008      	movs	r0, #8
 80007f6:	f000 f877 	bl	80008e8 <arg>
				rectangle_s.linewidth = atoi(string_container);
 80007fa:	4827      	ldr	r0, [pc, #156]	; (8000898 <FL_Input+0x304>)
 80007fc:	f006 fc84 	bl	8007108 <atoi>
 8000800:	4603      	mov	r3, r0
 8000802:	b2da      	uxtb	r2, r3
 8000804:	4b2c      	ldr	r3, [pc, #176]	; (80008b8 <FL_Input+0x324>)
 8000806:	77da      	strb	r2, [r3, #31]
				break;
 8000808:	e06b      	b.n	80008e2 <FL_Input+0x34e>
			}
			else break;
		case bitmap:	//if the function bitmap is called
			if(checkFunctionLen(bitmapLen) == false)
 800080a:	2003      	movs	r0, #3
 800080c:	f000 f8ec 	bl	80009e8 <checkFunctionLen>
 8000810:	4603      	mov	r3, r0
 8000812:	f083 0301 	eor.w	r3, r3, #1
 8000816:	b2db      	uxtb	r3, r3
 8000818:	2b00      	cmp	r3, #0
 800081a:	d05f      	beq.n	80008dc <FL_Input+0x348>
			{
				arg(argumentONE, string_container, NOTEXT);	//collects the information from argument 1
 800081c:	2200      	movs	r2, #0
 800081e:	491e      	ldr	r1, [pc, #120]	; (8000898 <FL_Input+0x304>)
 8000820:	2001      	movs	r0, #1
 8000822:	f000 f861 	bl	80008e8 <arg>
				bitmap_s.nr = atoi(string_container);	//stores the information from argument 1 into bitmap struct
 8000826:	481c      	ldr	r0, [pc, #112]	; (8000898 <FL_Input+0x304>)
 8000828:	f006 fc6e 	bl	8007108 <atoi>
 800082c:	4603      	mov	r3, r0
 800082e:	b2da      	uxtb	r2, r3
 8000830:	4b24      	ldr	r3, [pc, #144]	; (80008c4 <FL_Input+0x330>)
 8000832:	701a      	strb	r2, [r3, #0]
				arg(argumentTWO, string_container, NOTEXT);
 8000834:	2200      	movs	r2, #0
 8000836:	4918      	ldr	r1, [pc, #96]	; (8000898 <FL_Input+0x304>)
 8000838:	2002      	movs	r0, #2
 800083a:	f000 f855 	bl	80008e8 <arg>
				bitmap_s.xlup = atoi(string_container);
 800083e:	4816      	ldr	r0, [pc, #88]	; (8000898 <FL_Input+0x304>)
 8000840:	f006 fc62 	bl	8007108 <atoi>
 8000844:	4603      	mov	r3, r0
 8000846:	b29a      	uxth	r2, r3
 8000848:	4b1e      	ldr	r3, [pc, #120]	; (80008c4 <FL_Input+0x330>)
 800084a:	805a      	strh	r2, [r3, #2]
				arg(argumentTHREE, string_container, NOTEXT);
 800084c:	2200      	movs	r2, #0
 800084e:	4912      	ldr	r1, [pc, #72]	; (8000898 <FL_Input+0x304>)
 8000850:	2003      	movs	r0, #3
 8000852:	f000 f849 	bl	80008e8 <arg>
				bitmap_s.ylup = atoi(string_container);
 8000856:	4810      	ldr	r0, [pc, #64]	; (8000898 <FL_Input+0x304>)
 8000858:	f006 fc56 	bl	8007108 <atoi>
 800085c:	4603      	mov	r3, r0
 800085e:	b29a      	uxth	r2, r3
 8000860:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <FL_Input+0x330>)
 8000862:	809a      	strh	r2, [r3, #4]
				break;
 8000864:	e03d      	b.n	80008e2 <FL_Input+0x34e>
			}
			else break;
		case clearscreen:	//if the function clearscreen is called
			if(checkFunctionLen(clearscreenLen) == false)
 8000866:	2001      	movs	r0, #1
 8000868:	f000 f8be 	bl	80009e8 <checkFunctionLen>
 800086c:	4603      	mov	r3, r0
 800086e:	f083 0301 	eor.w	r3, r3, #1
 8000872:	b2db      	uxtb	r3, r3
 8000874:	2b00      	cmp	r3, #0
 8000876:	d033      	beq.n	80008e0 <FL_Input+0x34c>
			{
				arg(argumentONE, string_container, NOTEXT);	//collects the information from argument 1
 8000878:	2200      	movs	r2, #0
 800087a:	4907      	ldr	r1, [pc, #28]	; (8000898 <FL_Input+0x304>)
 800087c:	2001      	movs	r0, #1
 800087e:	f000 f833 	bl	80008e8 <arg>
				strcpy(clearscreen_s.color, string_container);	//stores the information from argument 1 into line struct
 8000882:	4905      	ldr	r1, [pc, #20]	; (8000898 <FL_Input+0x304>)
 8000884:	4810      	ldr	r0, [pc, #64]	; (80008c8 <FL_Input+0x334>)
 8000886:	f006 fc8d 	bl	80071a4 <strcpy>
				break;
 800088a:	e02a      	b.n	80008e2 <FL_Input+0x34e>
			}
			else break;
		default:
			printf("The function name is not correct");
 800088c:	480f      	ldr	r0, [pc, #60]	; (80008cc <FL_Input+0x338>)
 800088e:	f006 fc71 	bl	8007174 <iprintf>
			break;
 8000892:	e026      	b.n	80008e2 <FL_Input+0x34e>
 8000894:	200008fc 	.word	0x200008fc
 8000898:	20000134 	.word	0x20000134
 800089c:	200001b4 	.word	0x200001b4
 80008a0:	200001bc 	.word	0x200001bc
 80008a4:	20000200 	.word	0x20000200
 80008a8:	20000204 	.word	0x20000204
 80008ac:	20000210 	.word	0x20000210
 80008b0:	20000290 	.word	0x20000290
 80008b4:	200002af 	.word	0x200002af
 80008b8:	200001e0 	.word	0x200001e0
 80008bc:	200001e6 	.word	0x200001e6
 80008c0:	200001f3 	.word	0x200001f3
 80008c4:	200001cc 	.word	0x200001cc
 80008c8:	200001d4 	.word	0x200001d4
 80008cc:	080081d0 	.word	0x080081d0
			else break;
 80008d0:	bf00      	nop
 80008d2:	e006      	b.n	80008e2 <FL_Input+0x34e>
			else break;
 80008d4:	bf00      	nop
 80008d6:	e004      	b.n	80008e2 <FL_Input+0x34e>
			else break;
 80008d8:	bf00      	nop
 80008da:	e002      	b.n	80008e2 <FL_Input+0x34e>
			else break;
 80008dc:	bf00      	nop
 80008de:	e000      	b.n	80008e2 <FL_Input+0x34e>
			else break;
 80008e0:	bf00      	nop
	}

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop

080008e8 <arg>:
// @param[in] a: The variable that determines which argument has to be read
// @param[in] *string_container: A pointer where the string will be put into
// @param[in] text_trigger: A boolean that determines if the argument is a text or not
//--------------------------------------------------------------
void arg(uint8_t a,char *string_container ,bool text_trigger)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	6039      	str	r1, [r7, #0]
 80008f2:	71fb      	strb	r3, [r7, #7]
 80008f4:	4613      	mov	r3, r2
 80008f6:	71bb      	strb	r3, [r7, #6]
	uint8_t i = 0;	//counter
 80008f8:	2300      	movs	r3, #0
 80008fa:	73fb      	strb	r3, [r7, #15]
	uint8_t j = 0;	//counter
 80008fc:	2300      	movs	r3, #0
 80008fe:	73bb      	strb	r3, [r7, #14]
	uint8_t arg_counter = 0;	//is needed to check what argument is currently beeing read
 8000900:	2300      	movs	r3, #0
 8000902:	737b      	strb	r3, [r7, #13]
	uint8_t arg_character_counter = 0;	//checks what the current character from the argument is
 8000904:	2300      	movs	r3, #0
 8000906:	733b      	strb	r3, [r7, #12]
	for (j=0; j<input.msglen; j++)	//cleans string container
 8000908:	2300      	movs	r3, #0
 800090a:	73bb      	strb	r3, [r7, #14]
 800090c:	e007      	b.n	800091e <arg+0x36>
	string_container[j] = 0;
 800090e:	7bbb      	ldrb	r3, [r7, #14]
 8000910:	683a      	ldr	r2, [r7, #0]
 8000912:	4413      	add	r3, r2
 8000914:	2200      	movs	r2, #0
 8000916:	701a      	strb	r2, [r3, #0]
	for (j=0; j<input.msglen; j++)	//cleans string container
 8000918:	7bbb      	ldrb	r3, [r7, #14]
 800091a:	3301      	adds	r3, #1
 800091c:	73bb      	strb	r3, [r7, #14]
 800091e:	7bba      	ldrb	r2, [r7, #14]
 8000920:	4b30      	ldr	r3, [pc, #192]	; (80009e4 <arg+0xfc>)
 8000922:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8000926:	429a      	cmp	r2, r3
 8000928:	dbf1      	blt.n	800090e <arg+0x26>
	while(i <= input.msglen)
 800092a:	e04e      	b.n	80009ca <arg+0xe2>
			{
				if(input.line_rx_buffer[i] == ',')	//if current character is a ',' the argument counter goes up
 800092c:	7bfb      	ldrb	r3, [r7, #15]
 800092e:	4a2d      	ldr	r2, [pc, #180]	; (80009e4 <arg+0xfc>)
 8000930:	4413      	add	r3, r2
 8000932:	785b      	ldrb	r3, [r3, #1]
 8000934:	2b2c      	cmp	r3, #44	; 0x2c
 8000936:	d106      	bne.n	8000946 <arg+0x5e>
				{
					arg_counter++;
 8000938:	7b7b      	ldrb	r3, [r7, #13]
 800093a:	3301      	adds	r3, #1
 800093c:	737b      	strb	r3, [r7, #13]
					i++;
 800093e:	7bfb      	ldrb	r3, [r7, #15]
 8000940:	3301      	adds	r3, #1
 8000942:	73fb      	strb	r3, [r7, #15]
 8000944:	e041      	b.n	80009ca <arg+0xe2>
				}
				else if(input.line_rx_buffer[i] == ' ' && text_trigger == false)	//if its a space it doesnt get read
 8000946:	7bfb      	ldrb	r3, [r7, #15]
 8000948:	4a26      	ldr	r2, [pc, #152]	; (80009e4 <arg+0xfc>)
 800094a:	4413      	add	r3, r2
 800094c:	785b      	ldrb	r3, [r3, #1]
 800094e:	2b20      	cmp	r3, #32
 8000950:	d109      	bne.n	8000966 <arg+0x7e>
 8000952:	79bb      	ldrb	r3, [r7, #6]
 8000954:	f083 0301 	eor.w	r3, r3, #1
 8000958:	b2db      	uxtb	r3, r3
 800095a:	2b00      	cmp	r3, #0
 800095c:	d003      	beq.n	8000966 <arg+0x7e>
				i++;
 800095e:	7bfb      	ldrb	r3, [r7, #15]
 8000960:	3301      	adds	r3, #1
 8000962:	73fb      	strb	r3, [r7, #15]
 8000964:	e031      	b.n	80009ca <arg+0xe2>
				else if(input.line_rx_buffer[i] == ' ' && text_trigger == true && arg_counter == a)	//if its a space but its in a text argument, it gets read
 8000966:	7bfb      	ldrb	r3, [r7, #15]
 8000968:	4a1e      	ldr	r2, [pc, #120]	; (80009e4 <arg+0xfc>)
 800096a:	4413      	add	r3, r2
 800096c:	785b      	ldrb	r3, [r3, #1]
 800096e:	2b20      	cmp	r3, #32
 8000970:	d115      	bne.n	800099e <arg+0xb6>
 8000972:	79bb      	ldrb	r3, [r7, #6]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d012      	beq.n	800099e <arg+0xb6>
 8000978:	7b7a      	ldrb	r2, [r7, #13]
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	429a      	cmp	r2, r3
 800097e:	d10e      	bne.n	800099e <arg+0xb6>
				{
					string_container[arg_character_counter++] = input.line_rx_buffer[i++];
 8000980:	7bfb      	ldrb	r3, [r7, #15]
 8000982:	1c5a      	adds	r2, r3, #1
 8000984:	73fa      	strb	r2, [r7, #15]
 8000986:	4619      	mov	r1, r3
 8000988:	7b3b      	ldrb	r3, [r7, #12]
 800098a:	1c5a      	adds	r2, r3, #1
 800098c:	733a      	strb	r2, [r7, #12]
 800098e:	461a      	mov	r2, r3
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	4413      	add	r3, r2
 8000994:	4a13      	ldr	r2, [pc, #76]	; (80009e4 <arg+0xfc>)
 8000996:	440a      	add	r2, r1
 8000998:	7852      	ldrb	r2, [r2, #1]
 800099a:	701a      	strb	r2, [r3, #0]
 800099c:	e015      	b.n	80009ca <arg+0xe2>
				}
				else if(arg_counter == a)	//if its a character in the correct argument it gets read
 800099e:	7b7a      	ldrb	r2, [r7, #13]
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	429a      	cmp	r2, r3
 80009a4:	d10e      	bne.n	80009c4 <arg+0xdc>
				string_container[arg_character_counter++] = input.line_rx_buffer[i++];
 80009a6:	7bfb      	ldrb	r3, [r7, #15]
 80009a8:	1c5a      	adds	r2, r3, #1
 80009aa:	73fa      	strb	r2, [r7, #15]
 80009ac:	4619      	mov	r1, r3
 80009ae:	7b3b      	ldrb	r3, [r7, #12]
 80009b0:	1c5a      	adds	r2, r3, #1
 80009b2:	733a      	strb	r2, [r7, #12]
 80009b4:	461a      	mov	r2, r3
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	4413      	add	r3, r2
 80009ba:	4a0a      	ldr	r2, [pc, #40]	; (80009e4 <arg+0xfc>)
 80009bc:	440a      	add	r2, r1
 80009be:	7852      	ldrb	r2, [r2, #1]
 80009c0:	701a      	strb	r2, [r3, #0]
 80009c2:	e002      	b.n	80009ca <arg+0xe2>
				else i++;	//else skips
 80009c4:	7bfb      	ldrb	r3, [r7, #15]
 80009c6:	3301      	adds	r3, #1
 80009c8:	73fb      	strb	r3, [r7, #15]
	while(i <= input.msglen)
 80009ca:	7bfa      	ldrb	r2, [r7, #15]
 80009cc:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <arg+0xfc>)
 80009ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80009d2:	429a      	cmp	r2, r3
 80009d4:	ddaa      	ble.n	800092c <arg+0x44>
			}
}
 80009d6:	bf00      	nop
 80009d8:	bf00      	nop
 80009da:	3714      	adds	r7, #20
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	200008fc 	.word	0x200008fc

080009e8 <checkFunctionLen>:

bool checkFunctionLen(uint8_t functionLen)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	73fb      	strb	r3, [r7, #15]
	uint8_t arg_counter = 0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	73bb      	strb	r3, [r7, #14]
	bool error = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	737b      	strb	r3, [r7, #13]
	while(i <= input.msglen)
 80009fe:	e00f      	b.n	8000a20 <checkFunctionLen+0x38>
	{
		if(input.line_rx_buffer[i] == ',')	//if current character is a ',' the argument counter goes up
 8000a00:	7bfb      	ldrb	r3, [r7, #15]
 8000a02:	4a19      	ldr	r2, [pc, #100]	; (8000a68 <checkFunctionLen+0x80>)
 8000a04:	4413      	add	r3, r2
 8000a06:	785b      	ldrb	r3, [r3, #1]
 8000a08:	2b2c      	cmp	r3, #44	; 0x2c
 8000a0a:	d106      	bne.n	8000a1a <checkFunctionLen+0x32>
			{
				arg_counter++;
 8000a0c:	7bbb      	ldrb	r3, [r7, #14]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	73bb      	strb	r3, [r7, #14]
				i++;
 8000a12:	7bfb      	ldrb	r3, [r7, #15]
 8000a14:	3301      	adds	r3, #1
 8000a16:	73fb      	strb	r3, [r7, #15]
 8000a18:	e002      	b.n	8000a20 <checkFunctionLen+0x38>
			}
		else i++;
 8000a1a:	7bfb      	ldrb	r3, [r7, #15]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	73fb      	strb	r3, [r7, #15]
	while(i <= input.msglen)
 8000a20:	7bfa      	ldrb	r2, [r7, #15]
 8000a22:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <checkFunctionLen+0x80>)
 8000a24:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	dde9      	ble.n	8000a00 <checkFunctionLen+0x18>
	}
	if(arg_counter > functionLen)
 8000a2c:	7bba      	ldrb	r2, [r7, #14]
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	d908      	bls.n	8000a46 <checkFunctionLen+0x5e>
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)"Warning: the input exceeds the maximum length of this function\n\r", sizeof("Warning: the input exceeds the maximum length of this function"),100);
 8000a34:	2364      	movs	r3, #100	; 0x64
 8000a36:	223f      	movs	r2, #63	; 0x3f
 8000a38:	490c      	ldr	r1, [pc, #48]	; (8000a6c <checkFunctionLen+0x84>)
 8000a3a:	480d      	ldr	r0, [pc, #52]	; (8000a70 <checkFunctionLen+0x88>)
 8000a3c:	f005 fb1d 	bl	800607a <HAL_UART_Transmit>
		error = false;
 8000a40:	2300      	movs	r3, #0
 8000a42:	737b      	strb	r3, [r7, #13]
 8000a44:	e00b      	b.n	8000a5e <checkFunctionLen+0x76>
	}
	else if(arg_counter < functionLen)
 8000a46:	7bba      	ldrb	r2, [r7, #14]
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	429a      	cmp	r2, r3
 8000a4c:	d207      	bcs.n	8000a5e <checkFunctionLen+0x76>
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)"Error: not enough arguments for this function\n\r", sizeof("Error: not enough arguments for this function"),100);
 8000a4e:	2364      	movs	r3, #100	; 0x64
 8000a50:	222e      	movs	r2, #46	; 0x2e
 8000a52:	4908      	ldr	r1, [pc, #32]	; (8000a74 <checkFunctionLen+0x8c>)
 8000a54:	4806      	ldr	r0, [pc, #24]	; (8000a70 <checkFunctionLen+0x88>)
 8000a56:	f005 fb10 	bl	800607a <HAL_UART_Transmit>
		error = true;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	737b      	strb	r3, [r7, #13]
	}
	return error;
 8000a5e:	7b7b      	ldrb	r3, [r7, #13]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3710      	adds	r7, #16
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	200008fc 	.word	0x200008fc
 8000a6c:	080081f4 	.word	0x080081f4
 8000a70:	20000df0 	.word	0x20000df0
 8000a74:	08008238 	.word	0x08008238

08000a78 <Bitmap_init>:
//--------------------------------------------------------------
// @brief Initializes bitmap
// @details This function generates and initializes all the necessary memory and registers for the bitmaps to function
//--------------------------------------------------------------
void Bitmap_init()
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
	//----------------------------------------------------------
	// Generate lookup table
	//----------------------------------------------------------
	uint16_t i;

	for(i = 0; i < BM_AMOUNT; i++)
 8000a7e:	2300      	movs	r3, #0
 8000a80:	80fb      	strh	r3, [r7, #6]
 8000a82:	e08b      	b.n	8000b9c <Bitmap_init+0x124>
	{	if(i < ALPHABET_SIZE)
 8000a84:	88fb      	ldrh	r3, [r7, #6]
 8000a86:	2b19      	cmp	r3, #25
 8000a88:	d81c      	bhi.n	8000ac4 <Bitmap_init+0x4c>
		{
			bmLookup[i][ID] = ('a' + i);
 8000a8a:	88fb      	ldrh	r3, [r7, #6]
 8000a8c:	88fa      	ldrh	r2, [r7, #6]
 8000a8e:	3261      	adds	r2, #97	; 0x61
 8000a90:	b291      	uxth	r1, r2
 8000a92:	4a48      	ldr	r2, [pc, #288]	; (8000bb4 <Bitmap_init+0x13c>)
 8000a94:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
			bmLookup[i][X_LEN] = 8;
 8000a98:	88fb      	ldrh	r3, [r7, #6]
 8000a9a:	4a46      	ldr	r2, [pc, #280]	; (8000bb4 <Bitmap_init+0x13c>)
 8000a9c:	00db      	lsls	r3, r3, #3
 8000a9e:	4413      	add	r3, r2
 8000aa0:	2208      	movs	r2, #8
 8000aa2:	805a      	strh	r2, [r3, #2]
			bmLookup[i][Y_LEN] = 8;
 8000aa4:	88fb      	ldrh	r3, [r7, #6]
 8000aa6:	4a43      	ldr	r2, [pc, #268]	; (8000bb4 <Bitmap_init+0x13c>)
 8000aa8:	00db      	lsls	r3, r3, #3
 8000aaa:	4413      	add	r3, r2
 8000aac:	2208      	movs	r2, #8
 8000aae:	809a      	strh	r2, [r3, #4]
			bmLookup[i][OFFSET] = (TEXT_SIZE * TEXT_SIZE * i);
 8000ab0:	88fb      	ldrh	r3, [r7, #6]
 8000ab2:	88fa      	ldrh	r2, [r7, #6]
 8000ab4:	0192      	lsls	r2, r2, #6
 8000ab6:	b291      	uxth	r1, r2
 8000ab8:	4a3e      	ldr	r2, [pc, #248]	; (8000bb4 <Bitmap_init+0x13c>)
 8000aba:	00db      	lsls	r3, r3, #3
 8000abc:	4413      	add	r3, r2
 8000abe:	460a      	mov	r2, r1
 8000ac0:	80da      	strh	r2, [r3, #6]
 8000ac2:	e068      	b.n	8000b96 <Bitmap_init+0x11e>
		}
		else if((i >= ALPHABET_SIZE) && (i < (ALPHABET_SIZE*2)))
 8000ac4:	88fb      	ldrh	r3, [r7, #6]
 8000ac6:	2b19      	cmp	r3, #25
 8000ac8:	d91f      	bls.n	8000b0a <Bitmap_init+0x92>
 8000aca:	88fb      	ldrh	r3, [r7, #6]
 8000acc:	2b33      	cmp	r3, #51	; 0x33
 8000ace:	d81c      	bhi.n	8000b0a <Bitmap_init+0x92>
		{
			bmLookup[i][ID] = ('A' + (i - 26));
 8000ad0:	88fb      	ldrh	r3, [r7, #6]
 8000ad2:	88fa      	ldrh	r2, [r7, #6]
 8000ad4:	3227      	adds	r2, #39	; 0x27
 8000ad6:	b291      	uxth	r1, r2
 8000ad8:	4a36      	ldr	r2, [pc, #216]	; (8000bb4 <Bitmap_init+0x13c>)
 8000ada:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
			bmLookup[i][X_LEN] = 8;
 8000ade:	88fb      	ldrh	r3, [r7, #6]
 8000ae0:	4a34      	ldr	r2, [pc, #208]	; (8000bb4 <Bitmap_init+0x13c>)
 8000ae2:	00db      	lsls	r3, r3, #3
 8000ae4:	4413      	add	r3, r2
 8000ae6:	2208      	movs	r2, #8
 8000ae8:	805a      	strh	r2, [r3, #2]
			bmLookup[i][Y_LEN] = 8;
 8000aea:	88fb      	ldrh	r3, [r7, #6]
 8000aec:	4a31      	ldr	r2, [pc, #196]	; (8000bb4 <Bitmap_init+0x13c>)
 8000aee:	00db      	lsls	r3, r3, #3
 8000af0:	4413      	add	r3, r2
 8000af2:	2208      	movs	r2, #8
 8000af4:	809a      	strh	r2, [r3, #4]
			bmLookup[i][OFFSET] = (TEXT_SIZE * TEXT_SIZE * i);
 8000af6:	88fb      	ldrh	r3, [r7, #6]
 8000af8:	88fa      	ldrh	r2, [r7, #6]
 8000afa:	0192      	lsls	r2, r2, #6
 8000afc:	b291      	uxth	r1, r2
 8000afe:	4a2d      	ldr	r2, [pc, #180]	; (8000bb4 <Bitmap_init+0x13c>)
 8000b00:	00db      	lsls	r3, r3, #3
 8000b02:	4413      	add	r3, r2
 8000b04:	460a      	mov	r2, r1
 8000b06:	80da      	strh	r2, [r3, #6]
 8000b08:	e045      	b.n	8000b96 <Bitmap_init+0x11e>
		}
		else if((i >= (ALPHABET_SIZE*2)) && (i < (ALPHABET_SIZE*4)))
 8000b0a:	88fb      	ldrh	r3, [r7, #6]
 8000b0c:	2b33      	cmp	r3, #51	; 0x33
 8000b0e:	d91f      	bls.n	8000b50 <Bitmap_init+0xd8>
 8000b10:	88fb      	ldrh	r3, [r7, #6]
 8000b12:	2b67      	cmp	r3, #103	; 0x67
 8000b14:	d81c      	bhi.n	8000b50 <Bitmap_init+0xd8>
		{
			bmLookup[i][ID] = (i-(ALPHABET_SIZE*2));
 8000b16:	88fb      	ldrh	r3, [r7, #6]
 8000b18:	88fa      	ldrh	r2, [r7, #6]
 8000b1a:	3a34      	subs	r2, #52	; 0x34
 8000b1c:	b291      	uxth	r1, r2
 8000b1e:	4a25      	ldr	r2, [pc, #148]	; (8000bb4 <Bitmap_init+0x13c>)
 8000b20:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
			bmLookup[i][X_LEN] = 8;
 8000b24:	88fb      	ldrh	r3, [r7, #6]
 8000b26:	4a23      	ldr	r2, [pc, #140]	; (8000bb4 <Bitmap_init+0x13c>)
 8000b28:	00db      	lsls	r3, r3, #3
 8000b2a:	4413      	add	r3, r2
 8000b2c:	2208      	movs	r2, #8
 8000b2e:	805a      	strh	r2, [r3, #2]
			bmLookup[i][Y_LEN] = 8;
 8000b30:	88fb      	ldrh	r3, [r7, #6]
 8000b32:	4a20      	ldr	r2, [pc, #128]	; (8000bb4 <Bitmap_init+0x13c>)
 8000b34:	00db      	lsls	r3, r3, #3
 8000b36:	4413      	add	r3, r2
 8000b38:	2208      	movs	r2, #8
 8000b3a:	809a      	strh	r2, [r3, #4]
			bmLookup[i][OFFSET] = (TEXT_SIZE * TEXT_SIZE * i);
 8000b3c:	88fb      	ldrh	r3, [r7, #6]
 8000b3e:	88fa      	ldrh	r2, [r7, #6]
 8000b40:	0192      	lsls	r2, r2, #6
 8000b42:	b291      	uxth	r1, r2
 8000b44:	4a1b      	ldr	r2, [pc, #108]	; (8000bb4 <Bitmap_init+0x13c>)
 8000b46:	00db      	lsls	r3, r3, #3
 8000b48:	4413      	add	r3, r2
 8000b4a:	460a      	mov	r2, r1
 8000b4c:	80da      	strh	r2, [r3, #6]
 8000b4e:	e022      	b.n	8000b96 <Bitmap_init+0x11e>
		}
		else if((i >= (ALPHABET_SIZE*4)) && (i < (ALPHABET_SIZE*6)))
 8000b50:	88fb      	ldrh	r3, [r7, #6]
 8000b52:	2b67      	cmp	r3, #103	; 0x67
 8000b54:	d91f      	bls.n	8000b96 <Bitmap_init+0x11e>
 8000b56:	88fb      	ldrh	r3, [r7, #6]
 8000b58:	2b9b      	cmp	r3, #155	; 0x9b
 8000b5a:	d81c      	bhi.n	8000b96 <Bitmap_init+0x11e>
		{
			bmLookup[i][ID] = ((i-(ALPHABET_SIZE*4))+500);
 8000b5c:	88fb      	ldrh	r3, [r7, #6]
 8000b5e:	88fa      	ldrh	r2, [r7, #6]
 8000b60:	f502 72c6 	add.w	r2, r2, #396	; 0x18c
 8000b64:	b291      	uxth	r1, r2
 8000b66:	4a13      	ldr	r2, [pc, #76]	; (8000bb4 <Bitmap_init+0x13c>)
 8000b68:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
			bmLookup[i][X_LEN] = 8;
 8000b6c:	88fb      	ldrh	r3, [r7, #6]
 8000b6e:	4a11      	ldr	r2, [pc, #68]	; (8000bb4 <Bitmap_init+0x13c>)
 8000b70:	00db      	lsls	r3, r3, #3
 8000b72:	4413      	add	r3, r2
 8000b74:	2208      	movs	r2, #8
 8000b76:	805a      	strh	r2, [r3, #2]
			bmLookup[i][Y_LEN] = 8;
 8000b78:	88fb      	ldrh	r3, [r7, #6]
 8000b7a:	4a0e      	ldr	r2, [pc, #56]	; (8000bb4 <Bitmap_init+0x13c>)
 8000b7c:	00db      	lsls	r3, r3, #3
 8000b7e:	4413      	add	r3, r2
 8000b80:	2208      	movs	r2, #8
 8000b82:	809a      	strh	r2, [r3, #4]
			bmLookup[i][OFFSET] = (TEXT_SIZE * TEXT_SIZE * i);
 8000b84:	88fb      	ldrh	r3, [r7, #6]
 8000b86:	88fa      	ldrh	r2, [r7, #6]
 8000b88:	0192      	lsls	r2, r2, #6
 8000b8a:	b291      	uxth	r1, r2
 8000b8c:	4a09      	ldr	r2, [pc, #36]	; (8000bb4 <Bitmap_init+0x13c>)
 8000b8e:	00db      	lsls	r3, r3, #3
 8000b90:	4413      	add	r3, r2
 8000b92:	460a      	mov	r2, r1
 8000b94:	80da      	strh	r2, [r3, #6]
	for(i = 0; i < BM_AMOUNT; i++)
 8000b96:	88fb      	ldrh	r3, [r7, #6]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	80fb      	strh	r3, [r7, #6]
 8000b9c:	88fb      	ldrh	r3, [r7, #6]
 8000b9e:	2bc7      	cmp	r3, #199	; 0xc7
 8000ba0:	f67f af70 	bls.w	8000a84 <Bitmap_init+0xc>
		}
	}
}
 8000ba4:	bf00      	nop
 8000ba6:	bf00      	nop
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	200002bc 	.word	0x200002bc

08000bb8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <MX_DMA_Init+0x3c>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a0b      	ldr	r2, [pc, #44]	; (8000bf4 <MX_DMA_Init+0x3c>)
 8000bc8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <MX_DMA_Init+0x3c>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2100      	movs	r1, #0
 8000bde:	2044      	movs	r0, #68	; 0x44
 8000be0:	f003 f851 	bl	8003c86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000be4:	2044      	movs	r0, #68	; 0x44
 8000be6:	f003 f86a 	bl	8003cbe <HAL_NVIC_EnableIRQ>

}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40023800 	.word	0x40023800

08000bf8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08a      	sub	sp, #40	; 0x28
 8000bfc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
 8000c0a:	60da      	str	r2, [r3, #12]
 8000c0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	613b      	str	r3, [r7, #16]
 8000c12:	4b32      	ldr	r3, [pc, #200]	; (8000cdc <MX_GPIO_Init+0xe4>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a31      	ldr	r2, [pc, #196]	; (8000cdc <MX_GPIO_Init+0xe4>)
 8000c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b2f      	ldr	r3, [pc, #188]	; (8000cdc <MX_GPIO_Init+0xe4>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c26:	613b      	str	r3, [r7, #16]
 8000c28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	4b2b      	ldr	r3, [pc, #172]	; (8000cdc <MX_GPIO_Init+0xe4>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a2a      	ldr	r2, [pc, #168]	; (8000cdc <MX_GPIO_Init+0xe4>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b28      	ldr	r3, [pc, #160]	; (8000cdc <MX_GPIO_Init+0xe4>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	4b24      	ldr	r3, [pc, #144]	; (8000cdc <MX_GPIO_Init+0xe4>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a23      	ldr	r2, [pc, #140]	; (8000cdc <MX_GPIO_Init+0xe4>)
 8000c50:	f043 0310 	orr.w	r3, r3, #16
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b21      	ldr	r3, [pc, #132]	; (8000cdc <MX_GPIO_Init+0xe4>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f003 0310 	and.w	r3, r3, #16
 8000c5e:	60bb      	str	r3, [r7, #8]
 8000c60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	607b      	str	r3, [r7, #4]
 8000c66:	4b1d      	ldr	r3, [pc, #116]	; (8000cdc <MX_GPIO_Init+0xe4>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a1c      	ldr	r2, [pc, #112]	; (8000cdc <MX_GPIO_Init+0xe4>)
 8000c6c:	f043 0302 	orr.w	r3, r3, #2
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b1a      	ldr	r3, [pc, #104]	; (8000cdc <MX_GPIO_Init+0xe4>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0302 	and.w	r3, r3, #2
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000c84:	4816      	ldr	r0, [pc, #88]	; (8000ce0 <MX_GPIO_Init+0xe8>)
 8000c86:	f003 fd63 	bl	8004750 <HAL_GPIO_WritePin>
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VGA_VSYNC_GPIO_Port, VGA_VSYNC_Pin, GPIO_PIN_RESET);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c90:	4814      	ldr	r0, [pc, #80]	; (8000ce4 <MX_GPIO_Init+0xec>)
 8000c92:	f003 fd5d 	bl	8004750 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 8000c96:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000c9a:	617b      	str	r3, [r7, #20]
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	4619      	mov	r1, r3
 8000cae:	480c      	ldr	r0, [pc, #48]	; (8000ce0 <MX_GPIO_Init+0xe8>)
 8000cb0:	f003 fbb2 	bl	8004418 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VGA_VSYNC_Pin;
 8000cb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VGA_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <MX_GPIO_Init+0xec>)
 8000cce:	f003 fba3 	bl	8004418 <HAL_GPIO_Init>

}
 8000cd2:	bf00      	nop
 8000cd4:	3728      	adds	r7, #40	; 0x28
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	40020400 	.word	0x40020400

08000ce8 <logic>:
// @param[in] x: The X-coordinate of the top left corner of the bitmap
// @param[in] y: The Y-coordinate of the top left corner of the bitmap
// @param[in] bmNr: The number ID of the bitmap to be loaded in
//--------------------------------------------------------------
void logic()
{
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	b084      	sub	sp, #16
 8000cee:	af04      	add	r7, sp, #16

	switch(input.line_rx_buffer[firstCharacter])
 8000cf0:	4b64      	ldr	r3, [pc, #400]	; (8000e84 <logic+0x19c>)
 8000cf2:	785b      	ldrb	r3, [r3, #1]
 8000cf4:	3b62      	subs	r3, #98	; 0x62
 8000cf6:	2b12      	cmp	r3, #18
 8000cf8:	f200 80b8 	bhi.w	8000e6c <logic+0x184>
 8000cfc:	a201      	add	r2, pc, #4	; (adr r2, 8000d04 <logic+0x1c>)
 8000cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d02:	bf00      	nop
 8000d04:	08000e2f 	.word	0x08000e2f
 8000d08:	08000e53 	.word	0x08000e53
 8000d0c:	08000e6d 	.word	0x08000e6d
 8000d10:	08000e6d 	.word	0x08000e6d
 8000d14:	08000e6d 	.word	0x08000e6d
 8000d18:	08000e6d 	.word	0x08000e6d
 8000d1c:	08000e6d 	.word	0x08000e6d
 8000d20:	08000e6d 	.word	0x08000e6d
 8000d24:	08000e6d 	.word	0x08000e6d
 8000d28:	08000e6d 	.word	0x08000e6d
 8000d2c:	08000d51 	.word	0x08000d51
 8000d30:	08000e6d 	.word	0x08000e6d
 8000d34:	08000e6d 	.word	0x08000e6d
 8000d38:	08000e6d 	.word	0x08000e6d
 8000d3c:	08000e6d 	.word	0x08000e6d
 8000d40:	08000e6d 	.word	0x08000e6d
 8000d44:	08000d8f 	.word	0x08000d8f
 8000d48:	08000e6d 	.word	0x08000e6d
 8000d4c:	08000de1 	.word	0x08000de1
	{
		case line:
			 UB_VGA_SetLine(line_s.x1,
 8000d50:	4b4d      	ldr	r3, [pc, #308]	; (8000e88 <logic+0x1a0>)
 8000d52:	881c      	ldrh	r4, [r3, #0]
 8000d54:	4b4c      	ldr	r3, [pc, #304]	; (8000e88 <logic+0x1a0>)
 8000d56:	885d      	ldrh	r5, [r3, #2]
 8000d58:	4b4b      	ldr	r3, [pc, #300]	; (8000e88 <logic+0x1a0>)
 8000d5a:	889e      	ldrh	r6, [r3, #4]
 8000d5c:	4b4a      	ldr	r3, [pc, #296]	; (8000e88 <logic+0x1a0>)
 8000d5e:	f8b3 8006 	ldrh.w	r8, [r3, #6]
							 line_s.y1,
							 line_s.x2,
							 line_s.y2,
							 color_check(line_s.color),
 8000d62:	484a      	ldr	r0, [pc, #296]	; (8000e8c <logic+0x1a4>)
 8000d64:	f000 f92e 	bl	8000fc4 <color_check>
 8000d68:	4603      	mov	r3, r0
			 UB_VGA_SetLine(line_s.x1,
 8000d6a:	b2db      	uxtb	r3, r3
							 line_s.weight);
 8000d6c:	4a46      	ldr	r2, [pc, #280]	; (8000e88 <logic+0x1a0>)
 8000d6e:	7d12      	ldrb	r2, [r2, #20]
			 UB_VGA_SetLine(line_s.x1,
 8000d70:	b292      	uxth	r2, r2
 8000d72:	9201      	str	r2, [sp, #4]
 8000d74:	9300      	str	r3, [sp, #0]
 8000d76:	4643      	mov	r3, r8
 8000d78:	4632      	mov	r2, r6
 8000d7a:	4629      	mov	r1, r5
 8000d7c:	4620      	mov	r0, r4
 8000d7e:	f001 f827 	bl	8001dd0 <UB_VGA_SetLine>
			 memset(&line_s, 0, sizeof(LINE_S));
 8000d82:	2216      	movs	r2, #22
 8000d84:	2100      	movs	r1, #0
 8000d86:	4840      	ldr	r0, [pc, #256]	; (8000e88 <logic+0x1a0>)
 8000d88:	f006 f9ec 	bl	8007164 <memset>
			 break;
 8000d8c:	e075      	b.n	8000e7a <logic+0x192>
		case rectangle:
			UB_VGA_DrawRectangle(rectangle_s.xlup,
 8000d8e:	4b40      	ldr	r3, [pc, #256]	; (8000e90 <logic+0x1a8>)
 8000d90:	881e      	ldrh	r6, [r3, #0]
 8000d92:	4b3f      	ldr	r3, [pc, #252]	; (8000e90 <logic+0x1a8>)
 8000d94:	f8b3 8002 	ldrh.w	r8, [r3, #2]
 8000d98:	4b3d      	ldr	r3, [pc, #244]	; (8000e90 <logic+0x1a8>)
 8000d9a:	f893 9004 	ldrb.w	r9, [r3, #4]
 8000d9e:	4b3c      	ldr	r3, [pc, #240]	; (8000e90 <logic+0x1a8>)
 8000da0:	f893 a005 	ldrb.w	sl, [r3, #5]
					rectangle_s.ylup,
					rectangle_s.width,
					rectangle_s.height,
					color_check(rectangle_s.color),
 8000da4:	483b      	ldr	r0, [pc, #236]	; (8000e94 <logic+0x1ac>)
 8000da6:	f000 f90d 	bl	8000fc4 <color_check>
 8000daa:	4603      	mov	r3, r0
			UB_VGA_DrawRectangle(rectangle_s.xlup,
 8000dac:	b2dc      	uxtb	r4, r3
 8000dae:	4b38      	ldr	r3, [pc, #224]	; (8000e90 <logic+0x1a8>)
 8000db0:	7c9d      	ldrb	r5, [r3, #18]
					rectangle_s.filled,
					color_check(rectangle_s.bordercolor),
 8000db2:	4839      	ldr	r0, [pc, #228]	; (8000e98 <logic+0x1b0>)
 8000db4:	f000 f906 	bl	8000fc4 <color_check>
 8000db8:	4603      	mov	r3, r0
			UB_VGA_DrawRectangle(rectangle_s.xlup,
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	4a34      	ldr	r2, [pc, #208]	; (8000e90 <logic+0x1a8>)
 8000dbe:	7fd2      	ldrb	r2, [r2, #31]
 8000dc0:	9203      	str	r2, [sp, #12]
 8000dc2:	9302      	str	r3, [sp, #8]
 8000dc4:	9501      	str	r5, [sp, #4]
 8000dc6:	9400      	str	r4, [sp, #0]
 8000dc8:	4653      	mov	r3, sl
 8000dca:	464a      	mov	r2, r9
 8000dcc:	4641      	mov	r1, r8
 8000dce:	4630      	mov	r0, r6
 8000dd0:	f001 f95f 	bl	8002092 <UB_VGA_DrawRectangle>
					rectangle_s.linewidth);
			 memset(&rectangle_s, 0, sizeof(RECTANGLE_S));
 8000dd4:	2220      	movs	r2, #32
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	482d      	ldr	r0, [pc, #180]	; (8000e90 <logic+0x1a8>)
 8000dda:	f006 f9c3 	bl	8007164 <memset>
			break;
 8000dde:	e04c      	b.n	8000e7a <logic+0x192>
		case text:
			UB_VGA_writeText(text_s.xlup,
 8000de0:	4b2e      	ldr	r3, [pc, #184]	; (8000e9c <logic+0x1b4>)
 8000de2:	881e      	ldrh	r6, [r3, #0]
 8000de4:	4b2d      	ldr	r3, [pc, #180]	; (8000e9c <logic+0x1b4>)
 8000de6:	f8b3 8002 	ldrh.w	r8, [r3, #2]
					text_s.ylup,
					color_check(text_s.color),
 8000dea:	482d      	ldr	r0, [pc, #180]	; (8000ea0 <logic+0x1b8>)
 8000dec:	f000 f8ea 	bl	8000fc4 <color_check>
 8000df0:	4603      	mov	r3, r0
			UB_VGA_writeText(text_s.xlup,
 8000df2:	fa5f f983 	uxtb.w	r9, r3
					text_s.textin,
					font_check(text_s.fontname),
 8000df6:	482b      	ldr	r0, [pc, #172]	; (8000ea4 <logic+0x1bc>)
 8000df8:	f000 f862 	bl	8000ec0 <font_check>
 8000dfc:	4603      	mov	r3, r0
			UB_VGA_writeText(text_s.xlup,
 8000dfe:	b2dc      	uxtb	r4, r3
 8000e00:	4b26      	ldr	r3, [pc, #152]	; (8000e9c <logic+0x1b4>)
 8000e02:	f893 50ae 	ldrb.w	r5, [r3, #174]	; 0xae
					text_s.fontsize,
					style_check(text_s.fontstyle));
 8000e06:	4828      	ldr	r0, [pc, #160]	; (8000ea8 <logic+0x1c0>)
 8000e08:	f000 f892 	bl	8000f30 <style_check>
 8000e0c:	4603      	mov	r3, r0
			UB_VGA_writeText(text_s.xlup,
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	9302      	str	r3, [sp, #8]
 8000e12:	9501      	str	r5, [sp, #4]
 8000e14:	9400      	str	r4, [sp, #0]
 8000e16:	4b25      	ldr	r3, [pc, #148]	; (8000eac <logic+0x1c4>)
 8000e18:	464a      	mov	r2, r9
 8000e1a:	4641      	mov	r1, r8
 8000e1c:	4630      	mov	r0, r6
 8000e1e:	f001 fb03 	bl	8002428 <UB_VGA_writeText>
			 memset(&text_s, 0, sizeof(TEXT_S));
 8000e22:	22bc      	movs	r2, #188	; 0xbc
 8000e24:	2100      	movs	r1, #0
 8000e26:	481d      	ldr	r0, [pc, #116]	; (8000e9c <logic+0x1b4>)
 8000e28:	f006 f99c 	bl	8007164 <memset>
			break;
 8000e2c:	e025      	b.n	8000e7a <logic+0x192>
		case bitmap:
			UB_VGA_DrawBitmap(bitmap_s.nr,
 8000e2e:	4b20      	ldr	r3, [pc, #128]	; (8000eb0 <logic+0x1c8>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	b298      	uxth	r0, r3
 8000e34:	4b1e      	ldr	r3, [pc, #120]	; (8000eb0 <logic+0x1c8>)
 8000e36:	8859      	ldrh	r1, [r3, #2]
 8000e38:	4b1d      	ldr	r3, [pc, #116]	; (8000eb0 <logic+0x1c8>)
 8000e3a:	889a      	ldrh	r2, [r3, #4]
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	9300      	str	r3, [sp, #0]
 8000e40:	2300      	movs	r3, #0
 8000e42:	f001 fa35 	bl	80022b0 <UB_VGA_DrawBitmap>
					bitmap_s.xlup,
					bitmap_s.ylup, 0, 0);
			 memset(&bitmap_s, 0, sizeof(BITMAP_S));
 8000e46:	2206      	movs	r2, #6
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4819      	ldr	r0, [pc, #100]	; (8000eb0 <logic+0x1c8>)
 8000e4c:	f006 f98a 	bl	8007164 <memset>
			break;
 8000e50:	e013      	b.n	8000e7a <logic+0x192>
		case clearscreen:
			UB_VGA_clearScreen(color_check(clearscreen_s.color));
 8000e52:	4818      	ldr	r0, [pc, #96]	; (8000eb4 <logic+0x1cc>)
 8000e54:	f000 f8b6 	bl	8000fc4 <color_check>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f001 fa06 	bl	800226c <UB_VGA_clearScreen>
			 memset(&clearscreen_s, 0, sizeof(CLEARSCREEN_S));
 8000e60:	220c      	movs	r2, #12
 8000e62:	2100      	movs	r1, #0
 8000e64:	4813      	ldr	r0, [pc, #76]	; (8000eb4 <logic+0x1cc>)
 8000e66:	f006 f97d 	bl	8007164 <memset>
			break;
 8000e6a:	e006      	b.n	8000e7a <logic+0x192>
		default:
			HAL_UART_Transmit(&huart2, (uint8_t *)"no comando\n\r", sizeof("no comando"),100);
 8000e6c:	2364      	movs	r3, #100	; 0x64
 8000e6e:	220b      	movs	r2, #11
 8000e70:	4911      	ldr	r1, [pc, #68]	; (8000eb8 <logic+0x1d0>)
 8000e72:	4812      	ldr	r0, [pc, #72]	; (8000ebc <logic+0x1d4>)
 8000e74:	f005 f901 	bl	800607a <HAL_UART_Transmit>
			break;
 8000e78:	bf00      	nop
	}
}
 8000e7a:	bf00      	nop
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	bf00      	nop
 8000e84:	200008fc 	.word	0x200008fc
 8000e88:	200001b4 	.word	0x200001b4
 8000e8c:	200001bc 	.word	0x200001bc
 8000e90:	200001e0 	.word	0x200001e0
 8000e94:	200001e6 	.word	0x200001e6
 8000e98:	200001f3 	.word	0x200001f3
 8000e9c:	20000200 	.word	0x20000200
 8000ea0:	20000204 	.word	0x20000204
 8000ea4:	20000290 	.word	0x20000290
 8000ea8:	200002af 	.word	0x200002af
 8000eac:	20000210 	.word	0x20000210
 8000eb0:	200001cc 	.word	0x200001cc
 8000eb4:	200001d4 	.word	0x200001d4
 8000eb8:	08008268 	.word	0x08008268
 8000ebc:	20000df0 	.word	0x20000df0

08000ec0 <font_check>:
// @param[in] fnt: char whit font type
//
// @return return font type as 1 or 2
//--------------------------------------------------------------
int font_check(char fnt[8])
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
	int font;
	uint8_t result = 0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	72fb      	strb	r3, [r7, #11]

	result = strcmp(fnt, arial);
 8000ecc:	4914      	ldr	r1, [pc, #80]	; (8000f20 <font_check+0x60>)
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f7ff f97e 	bl	80001d0 <strcmp>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	72fb      	strb	r3, [r7, #11]
	if (result == 0)
 8000ed8:	7afb      	ldrb	r3, [r7, #11]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d101      	bne.n	8000ee2 <font_check+0x22>
	{
		font = 1;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	60fb      	str	r3, [r7, #12]
	}
	result = strcmp(fnt, consolas);
 8000ee2:	4910      	ldr	r1, [pc, #64]	; (8000f24 <font_check+0x64>)
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff f973 	bl	80001d0 <strcmp>
 8000eea:	4603      	mov	r3, r0
 8000eec:	72fb      	strb	r3, [r7, #11]
	if (result == 0)
 8000eee:	7afb      	ldrb	r3, [r7, #11]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d102      	bne.n	8000efa <font_check+0x3a>
	{
		font = 2;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	e00c      	b.n	8000f14 <font_check+0x54>
	}
	else if(strcmp(fnt, arial) != 0)
 8000efa:	4909      	ldr	r1, [pc, #36]	; (8000f20 <font_check+0x60>)
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f7ff f967 	bl	80001d0 <strcmp>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d005      	beq.n	8000f14 <font_check+0x54>
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)"wrong font\n\r", sizeof("wrong font"),100);
 8000f08:	2364      	movs	r3, #100	; 0x64
 8000f0a:	220b      	movs	r2, #11
 8000f0c:	4906      	ldr	r1, [pc, #24]	; (8000f28 <font_check+0x68>)
 8000f0e:	4807      	ldr	r0, [pc, #28]	; (8000f2c <font_check+0x6c>)
 8000f10:	f005 f8b3 	bl	800607a <HAL_UART_Transmit>
	}



	return font;
 8000f14:	68fb      	ldr	r3, [r7, #12]
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	2000008c 	.word	0x2000008c
 8000f24:	20000080 	.word	0x20000080
 8000f28:	08008278 	.word	0x08008278
 8000f2c:	20000df0 	.word	0x20000df0

08000f30 <style_check>:
// @param[in] the char withe the fond style in it
//
// @return return the style code (1,2,3) 1 = normaal, 2 = vet, 3 = cursief
//--------------------------------------------------------------
int style_check(char stl[7])
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
	int style;
	uint8_t result;

	result = strcmp(stl, normaal);
 8000f38:	491d      	ldr	r1, [pc, #116]	; (8000fb0 <style_check+0x80>)
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f7ff f948 	bl	80001d0 <strcmp>
 8000f40:	4603      	mov	r3, r0
 8000f42:	72fb      	strb	r3, [r7, #11]
	if (result == 0)
 8000f44:	7afb      	ldrb	r3, [r7, #11]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d101      	bne.n	8000f4e <style_check+0x1e>
	{
		style = 1;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	60fb      	str	r3, [r7, #12]
	}
	result = strcmp(stl, vet);
 8000f4e:	4919      	ldr	r1, [pc, #100]	; (8000fb4 <style_check+0x84>)
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff f93d 	bl	80001d0 <strcmp>
 8000f56:	4603      	mov	r3, r0
 8000f58:	72fb      	strb	r3, [r7, #11]
	if (result == 0)
 8000f5a:	7afb      	ldrb	r3, [r7, #11]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d101      	bne.n	8000f64 <style_check+0x34>
	{
		style = 2;
 8000f60:	2302      	movs	r3, #2
 8000f62:	60fb      	str	r3, [r7, #12]
	}
	result = strcmp(stl, cursief);
 8000f64:	4914      	ldr	r1, [pc, #80]	; (8000fb8 <style_check+0x88>)
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f7ff f932 	bl	80001d0 <strcmp>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	72fb      	strb	r3, [r7, #11]
	if (result == 0)
 8000f70:	7afb      	ldrb	r3, [r7, #11]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d102      	bne.n	8000f7c <style_check+0x4c>
	{
		style = 3;
 8000f76:	2303      	movs	r3, #3
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	e013      	b.n	8000fa4 <style_check+0x74>
	}
	else if(strcmp(stl, vet) != 0 && strcmp(stl, normaal) != 0)
 8000f7c:	490d      	ldr	r1, [pc, #52]	; (8000fb4 <style_check+0x84>)
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f7ff f926 	bl	80001d0 <strcmp>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d00c      	beq.n	8000fa4 <style_check+0x74>
 8000f8a:	4909      	ldr	r1, [pc, #36]	; (8000fb0 <style_check+0x80>)
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f7ff f91f 	bl	80001d0 <strcmp>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d005      	beq.n	8000fa4 <style_check+0x74>
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)"wrong style\n\r", sizeof("wrong style"),100);
 8000f98:	2364      	movs	r3, #100	; 0x64
 8000f9a:	220c      	movs	r2, #12
 8000f9c:	4907      	ldr	r1, [pc, #28]	; (8000fbc <style_check+0x8c>)
 8000f9e:	4808      	ldr	r0, [pc, #32]	; (8000fc0 <style_check+0x90>)
 8000fa0:	f005 f86b 	bl	800607a <HAL_UART_Transmit>
	}

	return style;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000094 	.word	0x20000094
 8000fb4:	2000009c 	.word	0x2000009c
 8000fb8:	200000a0 	.word	0x200000a0
 8000fbc:	08008288 	.word	0x08008288
 8000fc0:	20000df0 	.word	0x20000df0

08000fc4 <color_check>:
// @param[in] color: char with the color
//
// @return return the color code
//--------------------------------------------------------------
int color_check(char color[11])
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
		int ret_val = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60fb      	str	r3, [r7, #12]
		uint8_t result = 1;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	72fb      	strb	r3, [r7, #11]
		switch(color[0])
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	3b62      	subs	r3, #98	; 0x62
 8000fda:	2b18      	cmp	r3, #24
 8000fdc:	f200 8188 	bhi.w	80012f0 <color_check+0x32c>
 8000fe0:	a201      	add	r2, pc, #4	; (adr r2, 8000fe8 <color_check+0x24>)
 8000fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe6:	bf00      	nop
 8000fe8:	080012ab 	.word	0x080012ab
 8000fec:	08001257 	.word	0x08001257
 8000ff0:	080012f1 	.word	0x080012f1
 8000ff4:	080012f1 	.word	0x080012f1
 8000ff8:	080012f1 	.word	0x080012f1
 8000ffc:	080011f9 	.word	0x080011f9
 8001000:	080012f1 	.word	0x080012f1
 8001004:	080012f1 	.word	0x080012f1
 8001008:	080012f1 	.word	0x080012f1
 800100c:	080012f1 	.word	0x080012f1
 8001010:	08001077 	.word	0x08001077
 8001014:	08001281 	.word	0x08001281
 8001018:	080012f1 	.word	0x080012f1
 800101c:	080012f1 	.word	0x080012f1
 8001020:	080012f1 	.word	0x080012f1
 8001024:	080012f1 	.word	0x080012f1
 8001028:	080011a5 	.word	0x080011a5
 800102c:	080012f1 	.word	0x080012f1
 8001030:	080012f1 	.word	0x080012f1
 8001034:	080012f1 	.word	0x080012f1
 8001038:	080012f1 	.word	0x080012f1
 800103c:	080011cf 	.word	0x080011cf
 8001040:	080012f1 	.word	0x080012f1
 8001044:	080012f1 	.word	0x080012f1
 8001048:	0800104d 	.word	0x0800104d
		{
		case 'z':
			result = strcmp(color, zwart);
 800104c:	49ab      	ldr	r1, [pc, #684]	; (80012fc <color_check+0x338>)
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff f8be 	bl	80001d0 <strcmp>
 8001054:	4603      	mov	r3, r0
 8001056:	72fb      	strb	r3, [r7, #11]
			if (result == 0)
 8001058:	7afb      	ldrb	r3, [r7, #11]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d104      	bne.n	8001068 <color_check+0xa4>
			{
			ret_val = VGA_COL_BLACK;
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
			result = 1;
 8001062:	2301      	movs	r3, #1
 8001064:	72fb      	strb	r3, [r7, #11]
			}
			else
			{
				HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
			}
			break;
 8001066:	e143      	b.n	80012f0 <color_check+0x32c>
				HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
 8001068:	2364      	movs	r3, #100	; 0x64
 800106a:	220c      	movs	r2, #12
 800106c:	49a4      	ldr	r1, [pc, #656]	; (8001300 <color_check+0x33c>)
 800106e:	48a5      	ldr	r0, [pc, #660]	; (8001304 <color_check+0x340>)
 8001070:	f005 f803 	bl	800607a <HAL_UART_Transmit>
			break;
 8001074:	e13c      	b.n	80012f0 <color_check+0x32c>
		case 'l':
			switch(color[5])
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	3305      	adds	r3, #5
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	3b62      	subs	r3, #98	; 0x62
 800107e:	2b10      	cmp	r3, #16
 8001080:	f200 8135 	bhi.w	80012ee <color_check+0x32a>
 8001084:	a201      	add	r2, pc, #4	; (adr r2, 800108c <color_check+0xc8>)
 8001086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800108a:	bf00      	nop
 800108c:	080010d1 	.word	0x080010d1
 8001090:	0800114f 	.word	0x0800114f
 8001094:	080012ef 	.word	0x080012ef
 8001098:	080012ef 	.word	0x080012ef
 800109c:	080012ef 	.word	0x080012ef
 80010a0:	080010fb 	.word	0x080010fb
 80010a4:	080012ef 	.word	0x080012ef
 80010a8:	080012ef 	.word	0x080012ef
 80010ac:	080012ef 	.word	0x080012ef
 80010b0:	080012ef 	.word	0x080012ef
 80010b4:	080012ef 	.word	0x080012ef
 80010b8:	08001179 	.word	0x08001179
 80010bc:	080012ef 	.word	0x080012ef
 80010c0:	080012ef 	.word	0x080012ef
 80010c4:	080012ef 	.word	0x080012ef
 80010c8:	080012ef 	.word	0x080012ef
 80010cc:	08001125 	.word	0x08001125
			{
			case 'b':
				result = strcmp(color, lblauw);
 80010d0:	498d      	ldr	r1, [pc, #564]	; (8001308 <color_check+0x344>)
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff f87c 	bl	80001d0 <strcmp>
 80010d8:	4603      	mov	r3, r0
 80010da:	72fb      	strb	r3, [r7, #11]
				if (result == 0)
 80010dc:	7afb      	ldrb	r3, [r7, #11]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d104      	bne.n	80010ec <color_check+0x128>
				{
				ret_val = VGA_COL_LIGHTBLUE;
 80010e2:	232d      	movs	r3, #45	; 0x2d
 80010e4:	60fb      	str	r3, [r7, #12]
				result = 1;
 80010e6:	2301      	movs	r3, #1
 80010e8:	72fb      	strb	r3, [r7, #11]
				}
				else
				{
					HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
				}
				break;
 80010ea:	e05a      	b.n	80011a2 <color_check+0x1de>
					HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
 80010ec:	2364      	movs	r3, #100	; 0x64
 80010ee:	220c      	movs	r2, #12
 80010f0:	4983      	ldr	r1, [pc, #524]	; (8001300 <color_check+0x33c>)
 80010f2:	4884      	ldr	r0, [pc, #528]	; (8001304 <color_check+0x340>)
 80010f4:	f004 ffc1 	bl	800607a <HAL_UART_Transmit>
				break;
 80010f8:	e053      	b.n	80011a2 <color_check+0x1de>
			case 'g':
				result = strcmp(color, lgroen);
 80010fa:	4984      	ldr	r1, [pc, #528]	; (800130c <color_check+0x348>)
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f7ff f867 	bl	80001d0 <strcmp>
 8001102:	4603      	mov	r3, r0
 8001104:	72fb      	strb	r3, [r7, #11]
				if (result == 0)
 8001106:	7afb      	ldrb	r3, [r7, #11]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d104      	bne.n	8001116 <color_check+0x152>
				{
				ret_val = VGA_COL_LIGHTGREEN;
 800110c:	232e      	movs	r3, #46	; 0x2e
 800110e:	60fb      	str	r3, [r7, #12]
				result = 1;
 8001110:	2301      	movs	r3, #1
 8001112:	72fb      	strb	r3, [r7, #11]
				}
				else
				{
					HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
				}
				break;
 8001114:	e045      	b.n	80011a2 <color_check+0x1de>
					HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
 8001116:	2364      	movs	r3, #100	; 0x64
 8001118:	220c      	movs	r2, #12
 800111a:	4979      	ldr	r1, [pc, #484]	; (8001300 <color_check+0x33c>)
 800111c:	4879      	ldr	r0, [pc, #484]	; (8001304 <color_check+0x340>)
 800111e:	f004 ffac 	bl	800607a <HAL_UART_Transmit>
				break;
 8001122:	e03e      	b.n	80011a2 <color_check+0x1de>
			case 'r':
				result = strcmp(color, lrood);
 8001124:	497a      	ldr	r1, [pc, #488]	; (8001310 <color_check+0x34c>)
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff f852 	bl	80001d0 <strcmp>
 800112c:	4603      	mov	r3, r0
 800112e:	72fb      	strb	r3, [r7, #11]
				if (result == 0)
 8001130:	7afb      	ldrb	r3, [r7, #11]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d104      	bne.n	8001140 <color_check+0x17c>
				{
				ret_val = VGA_COL_LIGHTRED;
 8001136:	23c4      	movs	r3, #196	; 0xc4
 8001138:	60fb      	str	r3, [r7, #12]
				result = 1;
 800113a:	2301      	movs	r3, #1
 800113c:	72fb      	strb	r3, [r7, #11]
				}
				else
				{
					HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
				}
				break;
 800113e:	e030      	b.n	80011a2 <color_check+0x1de>
					HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
 8001140:	2364      	movs	r3, #100	; 0x64
 8001142:	220c      	movs	r2, #12
 8001144:	496e      	ldr	r1, [pc, #440]	; (8001300 <color_check+0x33c>)
 8001146:	486f      	ldr	r0, [pc, #444]	; (8001304 <color_check+0x340>)
 8001148:	f004 ff97 	bl	800607a <HAL_UART_Transmit>
				break;
 800114c:	e029      	b.n	80011a2 <color_check+0x1de>
			case 'c':
				result = strcmp(color, lcyaan);
 800114e:	4971      	ldr	r1, [pc, #452]	; (8001314 <color_check+0x350>)
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff f83d 	bl	80001d0 <strcmp>
 8001156:	4603      	mov	r3, r0
 8001158:	72fb      	strb	r3, [r7, #11]
				if (result == 0)
 800115a:	7afb      	ldrb	r3, [r7, #11]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d104      	bne.n	800116a <color_check+0x1a6>
				{
				ret_val = VGA_COL_LIGHTCYAN;
 8001160:	2375      	movs	r3, #117	; 0x75
 8001162:	60fb      	str	r3, [r7, #12]
				result = 1;
 8001164:	2301      	movs	r3, #1
 8001166:	72fb      	strb	r3, [r7, #11]
				}
				else
				{
					HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
				}
				break;
 8001168:	e01b      	b.n	80011a2 <color_check+0x1de>
					HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
 800116a:	2364      	movs	r3, #100	; 0x64
 800116c:	220c      	movs	r2, #12
 800116e:	4964      	ldr	r1, [pc, #400]	; (8001300 <color_check+0x33c>)
 8001170:	4864      	ldr	r0, [pc, #400]	; (8001304 <color_check+0x340>)
 8001172:	f004 ff82 	bl	800607a <HAL_UART_Transmit>
				break;
 8001176:	e014      	b.n	80011a2 <color_check+0x1de>
			case 'm':
				result = strcmp(color, lmagenta);
 8001178:	4967      	ldr	r1, [pc, #412]	; (8001318 <color_check+0x354>)
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff f828 	bl	80001d0 <strcmp>
 8001180:	4603      	mov	r3, r0
 8001182:	72fb      	strb	r3, [r7, #11]
				if (result == 0)
 8001184:	7afb      	ldrb	r3, [r7, #11]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d104      	bne.n	8001194 <color_check+0x1d0>
				{
				ret_val = VGA_COL_LIGHTMAGENTA;
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
				result = 1;
 800118e:	2301      	movs	r3, #1
 8001190:	72fb      	strb	r3, [r7, #11]
				}
				else
				{
					HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
				}
				break;
 8001192:	e005      	b.n	80011a0 <color_check+0x1dc>
					HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
 8001194:	2364      	movs	r3, #100	; 0x64
 8001196:	220c      	movs	r2, #12
 8001198:	4959      	ldr	r1, [pc, #356]	; (8001300 <color_check+0x33c>)
 800119a:	485a      	ldr	r0, [pc, #360]	; (8001304 <color_check+0x340>)
 800119c:	f004 ff6d 	bl	800607a <HAL_UART_Transmit>
				break;
 80011a0:	bf00      	nop
			}
			break;
 80011a2:	e0a4      	b.n	80012ee <color_check+0x32a>
		case 'r':
			result = strcmp(color, rood);
 80011a4:	495d      	ldr	r1, [pc, #372]	; (800131c <color_check+0x358>)
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f7ff f812 	bl	80001d0 <strcmp>
 80011ac:	4603      	mov	r3, r0
 80011ae:	72fb      	strb	r3, [r7, #11]
			if (result == 0)
 80011b0:	7afb      	ldrb	r3, [r7, #11]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d104      	bne.n	80011c0 <color_check+0x1fc>
			{
			ret_val = VGA_COL_RED;
 80011b6:	23e0      	movs	r3, #224	; 0xe0
 80011b8:	60fb      	str	r3, [r7, #12]
			result = 1;
 80011ba:	2301      	movs	r3, #1
 80011bc:	72fb      	strb	r3, [r7, #11]
			}
			else
			{
				HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
			}
			break;
 80011be:	e097      	b.n	80012f0 <color_check+0x32c>
				HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
 80011c0:	2364      	movs	r3, #100	; 0x64
 80011c2:	220c      	movs	r2, #12
 80011c4:	494e      	ldr	r1, [pc, #312]	; (8001300 <color_check+0x33c>)
 80011c6:	484f      	ldr	r0, [pc, #316]	; (8001304 <color_check+0x340>)
 80011c8:	f004 ff57 	bl	800607a <HAL_UART_Transmit>
			break;
 80011cc:	e090      	b.n	80012f0 <color_check+0x32c>
		case 'w':
			result = strcmp(color, wit);
 80011ce:	4954      	ldr	r1, [pc, #336]	; (8001320 <color_check+0x35c>)
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7fe fffd 	bl	80001d0 <strcmp>
 80011d6:	4603      	mov	r3, r0
 80011d8:	72fb      	strb	r3, [r7, #11]
			if (result == 0)
 80011da:	7afb      	ldrb	r3, [r7, #11]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d104      	bne.n	80011ea <color_check+0x226>
			{
			ret_val = VGA_COL_WHITE;
 80011e0:	23ff      	movs	r3, #255	; 0xff
 80011e2:	60fb      	str	r3, [r7, #12]
			result = 1;
 80011e4:	2301      	movs	r3, #1
 80011e6:	72fb      	strb	r3, [r7, #11]
			}
			else
			{
				HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
			}
			break;
 80011e8:	e082      	b.n	80012f0 <color_check+0x32c>
				HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
 80011ea:	2364      	movs	r3, #100	; 0x64
 80011ec:	220c      	movs	r2, #12
 80011ee:	4944      	ldr	r1, [pc, #272]	; (8001300 <color_check+0x33c>)
 80011f0:	4844      	ldr	r0, [pc, #272]	; (8001304 <color_check+0x340>)
 80011f2:	f004 ff42 	bl	800607a <HAL_UART_Transmit>
			break;
 80011f6:	e07b      	b.n	80012f0 <color_check+0x32c>
		case 'g':
			result = strcmp(color, geel);
 80011f8:	494a      	ldr	r1, [pc, #296]	; (8001324 <color_check+0x360>)
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7fe ffe8 	bl	80001d0 <strcmp>
 8001200:	4603      	mov	r3, r0
 8001202:	72fb      	strb	r3, [r7, #11]
			if (result == 0)
 8001204:	7afb      	ldrb	r3, [r7, #11]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d103      	bne.n	8001212 <color_check+0x24e>
			{
			ret_val = VGA_COL_YELLOW;
 800120a:	23fc      	movs	r3, #252	; 0xfc
 800120c:	60fb      	str	r3, [r7, #12]
			result = 1;
 800120e:	2301      	movs	r3, #1
 8001210:	72fb      	strb	r3, [r7, #11]
			}
			result = strcmp(color, grijs);
 8001212:	4945      	ldr	r1, [pc, #276]	; (8001328 <color_check+0x364>)
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7fe ffdb 	bl	80001d0 <strcmp>
 800121a:	4603      	mov	r3, r0
 800121c:	72fb      	strb	r3, [r7, #11]
			if (result == 0)
 800121e:	7afb      	ldrb	r3, [r7, #11]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d103      	bne.n	800122c <color_check+0x268>
			{
			ret_val = VGA_COL_GRAY;
 8001224:	2300      	movs	r3, #0
 8001226:	60fb      	str	r3, [r7, #12]
			result = 1;
 8001228:	2301      	movs	r3, #1
 800122a:	72fb      	strb	r3, [r7, #11]
			}
			result = strcmp(color, groen);
 800122c:	493f      	ldr	r1, [pc, #252]	; (800132c <color_check+0x368>)
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f7fe ffce 	bl	80001d0 <strcmp>
 8001234:	4603      	mov	r3, r0
 8001236:	72fb      	strb	r3, [r7, #11]

			if (result == 0)
 8001238:	7afb      	ldrb	r3, [r7, #11]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d104      	bne.n	8001248 <color_check+0x284>
			{
			ret_val = VGA_COL_GREEN;
 800123e:	231c      	movs	r3, #28
 8001240:	60fb      	str	r3, [r7, #12]
			result = 1;
 8001242:	2301      	movs	r3, #1
 8001244:	72fb      	strb	r3, [r7, #11]
			}
			else
			{
				HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
			}
			break;
 8001246:	e053      	b.n	80012f0 <color_check+0x32c>
				HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
 8001248:	2364      	movs	r3, #100	; 0x64
 800124a:	220c      	movs	r2, #12
 800124c:	492c      	ldr	r1, [pc, #176]	; (8001300 <color_check+0x33c>)
 800124e:	482d      	ldr	r0, [pc, #180]	; (8001304 <color_check+0x340>)
 8001250:	f004 ff13 	bl	800607a <HAL_UART_Transmit>
			break;
 8001254:	e04c      	b.n	80012f0 <color_check+0x32c>
		case 'c':
			result = strcmp(color, cyaan);
 8001256:	4936      	ldr	r1, [pc, #216]	; (8001330 <color_check+0x36c>)
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7fe ffb9 	bl	80001d0 <strcmp>
 800125e:	4603      	mov	r3, r0
 8001260:	72fb      	strb	r3, [r7, #11]
			if (result == 0)
 8001262:	7afb      	ldrb	r3, [r7, #11]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d104      	bne.n	8001272 <color_check+0x2ae>
			{
			ret_val = VGA_COL_CYAN;
 8001268:	231f      	movs	r3, #31
 800126a:	60fb      	str	r3, [r7, #12]
			result = 1;
 800126c:	2301      	movs	r3, #1
 800126e:	72fb      	strb	r3, [r7, #11]
			}
			else
			{
				HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
			}
			break;
 8001270:	e03e      	b.n	80012f0 <color_check+0x32c>
				HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
 8001272:	2364      	movs	r3, #100	; 0x64
 8001274:	220c      	movs	r2, #12
 8001276:	4922      	ldr	r1, [pc, #136]	; (8001300 <color_check+0x33c>)
 8001278:	4822      	ldr	r0, [pc, #136]	; (8001304 <color_check+0x340>)
 800127a:	f004 fefe 	bl	800607a <HAL_UART_Transmit>
			break;
 800127e:	e037      	b.n	80012f0 <color_check+0x32c>
		case 'm':
			result = strcmp(color, magenta);
 8001280:	492c      	ldr	r1, [pc, #176]	; (8001334 <color_check+0x370>)
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7fe ffa4 	bl	80001d0 <strcmp>
 8001288:	4603      	mov	r3, r0
 800128a:	72fb      	strb	r3, [r7, #11]
			if (result == 0)
 800128c:	7afb      	ldrb	r3, [r7, #11]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d104      	bne.n	800129c <color_check+0x2d8>
			{
			ret_val = VGA_COL_MAGENTA;
 8001292:	23e3      	movs	r3, #227	; 0xe3
 8001294:	60fb      	str	r3, [r7, #12]
			result = 1;
 8001296:	2301      	movs	r3, #1
 8001298:	72fb      	strb	r3, [r7, #11]
			}
			else
			{
				HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
			}
			break;
 800129a:	e029      	b.n	80012f0 <color_check+0x32c>
				HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
 800129c:	2364      	movs	r3, #100	; 0x64
 800129e:	220c      	movs	r2, #12
 80012a0:	4917      	ldr	r1, [pc, #92]	; (8001300 <color_check+0x33c>)
 80012a2:	4818      	ldr	r0, [pc, #96]	; (8001304 <color_check+0x340>)
 80012a4:	f004 fee9 	bl	800607a <HAL_UART_Transmit>
			break;
 80012a8:	e022      	b.n	80012f0 <color_check+0x32c>
		case 'b':
			result = strcmp(color, blauw);
 80012aa:	4923      	ldr	r1, [pc, #140]	; (8001338 <color_check+0x374>)
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f7fe ff8f 	bl	80001d0 <strcmp>
 80012b2:	4603      	mov	r3, r0
 80012b4:	72fb      	strb	r3, [r7, #11]
			if (result == 0)
 80012b6:	7afb      	ldrb	r3, [r7, #11]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d103      	bne.n	80012c4 <color_check+0x300>
			{
			ret_val = VGA_COL_BLUE;
 80012bc:	2303      	movs	r3, #3
 80012be:	60fb      	str	r3, [r7, #12]
			result = 1;
 80012c0:	2301      	movs	r3, #1
 80012c2:	72fb      	strb	r3, [r7, #11]
			}
			result = strcmp(color, bruin);
 80012c4:	491d      	ldr	r1, [pc, #116]	; (800133c <color_check+0x378>)
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7fe ff82 	bl	80001d0 <strcmp>
 80012cc:	4603      	mov	r3, r0
 80012ce:	72fb      	strb	r3, [r7, #11]
			if (result == 0)
 80012d0:	7afb      	ldrb	r3, [r7, #11]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d104      	bne.n	80012e0 <color_check+0x31c>
			{
			ret_val = VGA_COL_BROWN;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
			result = 1;
 80012da:	2301      	movs	r3, #1
 80012dc:	72fb      	strb	r3, [r7, #11]
			}
			else
			{
				HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
			}
			break;
 80012de:	e007      	b.n	80012f0 <color_check+0x32c>
				HAL_UART_Transmit(&huart2, (uint8_t *)"wrong color\n\r", sizeof("wrong color"),100);
 80012e0:	2364      	movs	r3, #100	; 0x64
 80012e2:	220c      	movs	r2, #12
 80012e4:	4906      	ldr	r1, [pc, #24]	; (8001300 <color_check+0x33c>)
 80012e6:	4807      	ldr	r0, [pc, #28]	; (8001304 <color_check+0x340>)
 80012e8:	f004 fec7 	bl	800607a <HAL_UART_Transmit>
			break;
 80012ec:	e000      	b.n	80012f0 <color_check+0x32c>
			break;
 80012ee:	bf00      	nop
		}

	return ret_val;
 80012f0:	68fb      	ldr	r3, [r7, #12]
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	2000000c 	.word	0x2000000c
 8001300:	08008298 	.word	0x08008298
 8001304:	20000df0 	.word	0x20000df0
 8001308:	20000014 	.word	0x20000014
 800130c:	20000028 	.word	0x20000028
 8001310:	20000048 	.word	0x20000048
 8001314:	2000003c 	.word	0x2000003c
 8001318:	2000005c 	.word	0x2000005c
 800131c:	20000000 	.word	0x20000000
 8001320:	2000007c 	.word	0x2000007c
 8001324:	20000070 	.word	0x20000070
 8001328:	20000074 	.word	0x20000074
 800132c:	20000020 	.word	0x20000020
 8001330:	20000034 	.word	0x20000034
 8001334:	20000054 	.word	0x20000054
 8001338:	20000004 	.word	0x20000004
 800133c:	20000068 	.word	0x20000068

08001340 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001346:	f002 fb51 	bl	80039ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800134a:	f000 f843 	bl	80013d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800134e:	f7ff fc53 	bl	8000bf8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001352:	f7ff fc31 	bl	8000bb8 <MX_DMA_Init>
  MX_TIM1_Init();
 8001356:	f000 fa91 	bl	800187c <MX_TIM1_Init>
  MX_TIM2_Init();
 800135a:	f000 fadf 	bl	800191c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800135e:	f000 fbf5 	bl	8001b4c <MX_USART2_UART_Init>
  Bitmap_init();
 8001362:	f7ff fb89 	bl	8000a78 <Bitmap_init>
  /* USER CODE BEGIN 2 */

  UB_VGA_Screen_Init(); // Init VGA-Screen
 8001366:	f000 fc95 	bl	8001c94 <UB_VGA_Screen_Init>

  UB_VGA_FillScreen(VGA_COL_WHITE);
 800136a:	20ff      	movs	r0, #255	; 0xff
 800136c:	f000 fce4 	bl	8001d38 <UB_VGA_FillScreen>
//	  UB_VGA_DrawBitmap(0 + (i*9), 145, (i+526), VGA_COL_GREEN, 0);
//  }

//  	  UB_VGA_DrawBitmap(100, 100, 'a', 1, 1);

  for(i = 0; i < LINE_BUFLEN; i++)
 8001370:	2300      	movs	r3, #0
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	e008      	b.n	8001388 <main+0x48>
	  input.line_rx_buffer[i] = 0;
 8001376:	4a15      	ldr	r2, [pc, #84]	; (80013cc <main+0x8c>)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4413      	add	r3, r2
 800137c:	3301      	adds	r3, #1
 800137e:	2200      	movs	r2, #0
 8001380:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < LINE_BUFLEN; i++)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	3301      	adds	r3, #1
 8001386:	607b      	str	r3, [r7, #4]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800138e:	dbf2      	blt.n	8001376 <main+0x36>

  // Reset some stuff
  input.byte_buffer_rx[0] = 0;
 8001390:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <main+0x8c>)
 8001392:	2200      	movs	r2, #0
 8001394:	701a      	strb	r2, [r3, #0]
  input.char_counter = 0;
 8001396:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <main+0x8c>)
 8001398:	2200      	movs	r2, #0
 800139a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  input.command_execute_flag = FALSE;
 800139e:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <main+0x8c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c

  // HAl wants a memory location to store the charachter it receives from the UART
  // We will pass it an array, but we will not use it. We declare our own variable in the interupt handler
  // See stm32f4xx_it.c
  HAL_UART_Receive_IT(&huart2, input.byte_buffer_rx, BYTE_BUFLEN);
 80013a6:	2201      	movs	r2, #1
 80013a8:	4908      	ldr	r1, [pc, #32]	; (80013cc <main+0x8c>)
 80013aa:	4809      	ldr	r0, [pc, #36]	; (80013d0 <main+0x90>)
 80013ac:	f004 fefe 	bl	80061ac <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  UB_VGA_SetPixel(160,120,VGA_COL_RED);
	  if(input.command_execute_flag == TRUE)
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <main+0x8c>)
 80013b2:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 80013b6:	2bff      	cmp	r3, #255	; 0xff
 80013b8:	d1fa      	bne.n	80013b0 <main+0x70>
	  {
		  // jump to parser
		  FL_Input();
 80013ba:	f7ff f8eb 	bl	8000594 <FL_Input>
		  logic();
 80013be:	f7ff fc93 	bl	8000ce8 <logic>
		  // When finished reset the flag
		  input.command_execute_flag = FALSE;
 80013c2:	4b02      	ldr	r3, [pc, #8]	; (80013cc <main+0x8c>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
	  if(input.command_execute_flag == TRUE)
 80013ca:	e7f1      	b.n	80013b0 <main+0x70>
 80013cc:	200008fc 	.word	0x200008fc
 80013d0:	20000df0 	.word	0x20000df0

080013d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b094      	sub	sp, #80	; 0x50
 80013d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013da:	f107 0320 	add.w	r3, r7, #32
 80013de:	2230      	movs	r2, #48	; 0x30
 80013e0:	2100      	movs	r1, #0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f005 febe 	bl	8007164 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e8:	f107 030c 	add.w	r3, r7, #12
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f8:	2300      	movs	r3, #0
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	4b28      	ldr	r3, [pc, #160]	; (80014a0 <SystemClock_Config+0xcc>)
 80013fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001400:	4a27      	ldr	r2, [pc, #156]	; (80014a0 <SystemClock_Config+0xcc>)
 8001402:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001406:	6413      	str	r3, [r2, #64]	; 0x40
 8001408:	4b25      	ldr	r3, [pc, #148]	; (80014a0 <SystemClock_Config+0xcc>)
 800140a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001414:	2300      	movs	r3, #0
 8001416:	607b      	str	r3, [r7, #4]
 8001418:	4b22      	ldr	r3, [pc, #136]	; (80014a4 <SystemClock_Config+0xd0>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a21      	ldr	r2, [pc, #132]	; (80014a4 <SystemClock_Config+0xd0>)
 800141e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001422:	6013      	str	r3, [r2, #0]
 8001424:	4b1f      	ldr	r3, [pc, #124]	; (80014a4 <SystemClock_Config+0xd0>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001430:	2301      	movs	r3, #1
 8001432:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001434:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800143a:	2302      	movs	r3, #2
 800143c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800143e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001442:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001444:	2304      	movs	r3, #4
 8001446:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001448:	23a8      	movs	r3, #168	; 0xa8
 800144a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800144c:	2302      	movs	r3, #2
 800144e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001450:	2304      	movs	r3, #4
 8001452:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001454:	f107 0320 	add.w	r3, r7, #32
 8001458:	4618      	mov	r0, r3
 800145a:	f003 f993 	bl	8004784 <HAL_RCC_OscConfig>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001464:	f000 f832 	bl	80014cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001468:	230f      	movs	r3, #15
 800146a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800146c:	2302      	movs	r3, #2
 800146e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001474:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001478:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800147a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800147e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001480:	f107 030c 	add.w	r3, r7, #12
 8001484:	2105      	movs	r1, #5
 8001486:	4618      	mov	r0, r3
 8001488:	f003 fbea 	bl	8004c60 <HAL_RCC_ClockConfig>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001492:	f000 f81b 	bl	80014cc <Error_Handler>
  }
}
 8001496:	bf00      	nop
 8001498:	3750      	adds	r7, #80	; 0x50
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40007000 	.word	0x40007000

080014a8 <__io_putchar>:
	#define USART_PRINTF int fputc(int ch, FILE *f)		//With other compiler printf calls fputc()
#endif /* __GNUC__ */

//Retargets the C library printf function to the USART
USART_PRINTF
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);	//Write character to UART2
 80014b0:	1d39      	adds	r1, r7, #4
 80014b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014b6:	2201      	movs	r2, #1
 80014b8:	4803      	ldr	r0, [pc, #12]	; (80014c8 <__io_putchar+0x20>)
 80014ba:	f004 fdde 	bl	800607a <HAL_UART_Transmit>
	return ch;												//Return the character
 80014be:	687b      	ldr	r3, [r7, #4]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000df0 	.word	0x20000df0

080014cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
	...

080014dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	607b      	str	r3, [r7, #4]
 80014e6:	4b10      	ldr	r3, [pc, #64]	; (8001528 <HAL_MspInit+0x4c>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ea:	4a0f      	ldr	r2, [pc, #60]	; (8001528 <HAL_MspInit+0x4c>)
 80014ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f0:	6453      	str	r3, [r2, #68]	; 0x44
 80014f2:	4b0d      	ldr	r3, [pc, #52]	; (8001528 <HAL_MspInit+0x4c>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	603b      	str	r3, [r7, #0]
 8001502:	4b09      	ldr	r3, [pc, #36]	; (8001528 <HAL_MspInit+0x4c>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	4a08      	ldr	r2, [pc, #32]	; (8001528 <HAL_MspInit+0x4c>)
 8001508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800150c:	6413      	str	r3, [r2, #64]	; 0x40
 800150e:	4b06      	ldr	r3, [pc, #24]	; (8001528 <HAL_MspInit+0x4c>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001516:	603b      	str	r3, [r7, #0]
 8001518:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	40023800 	.word	0x40023800

0800152c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800153e:	e7fe      	b.n	800153e <HardFault_Handler+0x4>

08001540 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001544:	e7fe      	b.n	8001544 <MemManage_Handler+0x4>

08001546 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800154a:	e7fe      	b.n	800154a <BusFault_Handler+0x4>

0800154c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001550:	e7fe      	b.n	8001550 <UsageFault_Handler+0x4>

08001552 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001580:	f002 fa86 	bl	8003a90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}

08001588 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800158c:	4828      	ldr	r0, [pc, #160]	; (8001630 <TIM2_IRQHandler+0xa8>)
 800158e:	f003 fec3 	bl	8005318 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC3); // uncomment HAL_TIM_IRQHandler(&htim2); ^^
 8001592:	4b27      	ldr	r3, [pc, #156]	; (8001630 <TIM2_IRQHandler+0xa8>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f06f 0208 	mvn.w	r2, #8
 800159a:	611a      	str	r2, [r3, #16]

  VGA.hsync_cnt++;
 800159c:	4b25      	ldr	r3, [pc, #148]	; (8001634 <TIM2_IRQHandler+0xac>)
 800159e:	881b      	ldrh	r3, [r3, #0]
 80015a0:	3301      	adds	r3, #1
 80015a2:	b29a      	uxth	r2, r3
 80015a4:	4b23      	ldr	r3, [pc, #140]	; (8001634 <TIM2_IRQHandler+0xac>)
 80015a6:	801a      	strh	r2, [r3, #0]
  if (VGA.hsync_cnt >= VGA_VSYNC_PERIODE)
 80015a8:	4b22      	ldr	r3, [pc, #136]	; (8001634 <TIM2_IRQHandler+0xac>)
 80015aa:	881b      	ldrh	r3, [r3, #0]
 80015ac:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 80015b0:	d905      	bls.n	80015be <TIM2_IRQHandler+0x36>
  {
    // -----------
    VGA.hsync_cnt = 0;
 80015b2:	4b20      	ldr	r3, [pc, #128]	; (8001634 <TIM2_IRQHandler+0xac>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr = (uint32_t)(&VGA_RAM1[0]);
 80015b8:	4a1f      	ldr	r2, [pc, #124]	; (8001638 <TIM2_IRQHandler+0xb0>)
 80015ba:	4b1e      	ldr	r3, [pc, #120]	; (8001634 <TIM2_IRQHandler+0xac>)
 80015bc:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  GPIOB->BSRR = (VGA.hsync_cnt < VGA_VSYNC_IMP) ? VGA_VSYNC_Pin << 16u: VGA_VSYNC_Pin;
 80015be:	4b1d      	ldr	r3, [pc, #116]	; (8001634 <TIM2_IRQHandler+0xac>)
 80015c0:	881b      	ldrh	r3, [r3, #0]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d802      	bhi.n	80015cc <TIM2_IRQHandler+0x44>
 80015c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80015ca:	e001      	b.n	80015d0 <TIM2_IRQHandler+0x48>
 80015cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015d0:	4a1a      	ldr	r2, [pc, #104]	; (800163c <TIM2_IRQHandler+0xb4>)
 80015d2:	6193      	str	r3, [r2, #24]

  // Test for DMA start
  if((VGA.hsync_cnt >= VGA_VSYNC_BILD_START) && (VGA.hsync_cnt <= VGA_VSYNC_BILD_STOP))
 80015d4:	4b17      	ldr	r3, [pc, #92]	; (8001634 <TIM2_IRQHandler+0xac>)
 80015d6:	881b      	ldrh	r3, [r3, #0]
 80015d8:	2b23      	cmp	r3, #35	; 0x23
 80015da:	d927      	bls.n	800162c <TIM2_IRQHandler+0xa4>
 80015dc:	4b15      	ldr	r3, [pc, #84]	; (8001634 <TIM2_IRQHandler+0xac>)
 80015de:	881b      	ldrh	r3, [r3, #0]
 80015e0:	f240 2202 	movw	r2, #514	; 0x202
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d821      	bhi.n	800162c <TIM2_IRQHandler+0xa4>
  {
    // after FP start => DMA Transfer

    // DMA2 init
	  DMA2_Stream5->CR = VGA.dma2_cr_reg;
 80015e8:	4a15      	ldr	r2, [pc, #84]	; (8001640 <TIM2_IRQHandler+0xb8>)
 80015ea:	4b12      	ldr	r3, [pc, #72]	; (8001634 <TIM2_IRQHandler+0xac>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR = VGA.start_adr;
 80015f0:	4a13      	ldr	r2, [pc, #76]	; (8001640 <TIM2_IRQHandler+0xb8>)
 80015f2:	4b10      	ldr	r3, [pc, #64]	; (8001634 <TIM2_IRQHandler+0xac>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1 |= TIM_CR1_CEN; // __HAL_TIM_ENABLE(&htim1); // too slow?
 80015f8:	4b12      	ldr	r3, [pc, #72]	; (8001644 <TIM2_IRQHandler+0xbc>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a11      	ldr	r2, [pc, #68]	; (8001644 <TIM2_IRQHandler+0xbc>)
 80015fe:	f043 0301 	orr.w	r3, r3, #1
 8001602:	6013      	str	r3, [r2, #0]
    // DMA2 enable
    __HAL_DMA_ENABLE(&hdma_tim1_up);
 8001604:	4b10      	ldr	r3, [pc, #64]	; (8001648 <TIM2_IRQHandler+0xc0>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <TIM2_IRQHandler+0xc0>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f042 0201 	orr.w	r2, r2, #1
 8001612:	601a      	str	r2, [r3, #0]
    // Test Adrespointer for high
    if(VGA.hsync_cnt & 0x01)
 8001614:	4b07      	ldr	r3, [pc, #28]	; (8001634 <TIM2_IRQHandler+0xac>)
 8001616:	881b      	ldrh	r3, [r3, #0]
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	2b00      	cmp	r3, #0
 800161e:	d005      	beq.n	800162c <TIM2_IRQHandler+0xa4>
      VGA.start_adr += (VGA_DISPLAY_X + 1); // inc after Hsync
 8001620:	4b04      	ldr	r3, [pc, #16]	; (8001634 <TIM2_IRQHandler+0xac>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f203 1341 	addw	r3, r3, #321	; 0x141
 8001628:	4a02      	ldr	r2, [pc, #8]	; (8001634 <TIM2_IRQHandler+0xac>)
 800162a:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20000d50 	.word	0x20000d50
 8001634:	20013b20 	.word	0x20013b20
 8001638:	20000e30 	.word	0x20000e30
 800163c:	40020400 	.word	0x40020400
 8001640:	40026488 	.word	0x40026488
 8001644:	40010000 	.word	0x40010000
 8001648:	20000d90 	.word	0x20000d90

0800164c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	// Store the byte we received on the UART
	char uart_char = USART2->DR;
 8001652:	4b1a      	ldr	r3, [pc, #104]	; (80016bc <USART2_IRQHandler+0x70>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	71fb      	strb	r3, [r7, #7]

	//Ignore the '\n' character
	if(uart_char != LINE_FEED)
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	2b0a      	cmp	r3, #10
 800165c:	d026      	beq.n	80016ac <USART2_IRQHandler+0x60>
	{
		// Check for CR or a dot
		// There was a small bug in the terminal program.
		// By terminating your message with a dot you can ignore the CR (Enter) character
		if((uart_char == CARRIAGE_RETURN) || (uart_char == '.'))
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	2b0d      	cmp	r3, #13
 8001662:	d002      	beq.n	800166a <USART2_IRQHandler+0x1e>
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	2b2e      	cmp	r3, #46	; 0x2e
 8001668:	d10e      	bne.n	8001688 <USART2_IRQHandler+0x3c>
		{
			input.command_execute_flag = TRUE;
 800166a:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <USART2_IRQHandler+0x74>)
 800166c:	22ff      	movs	r2, #255	; 0xff
 800166e:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			// Store the message length for processing
			input.msglen = input.char_counter;
 8001672:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <USART2_IRQHandler+0x74>)
 8001674:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001678:	4a11      	ldr	r2, [pc, #68]	; (80016c0 <USART2_IRQHandler+0x74>)
 800167a:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			// Reset the counter for the next line
			input.char_counter = 0;
 800167e:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <USART2_IRQHandler+0x74>)
 8001680:	2200      	movs	r2, #0
 8001682:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8001686:	e011      	b.n	80016ac <USART2_IRQHandler+0x60>
			//Gently exit interrupt
		}
		else
		{
			input.command_execute_flag = FALSE;
 8001688:	4b0d      	ldr	r3, [pc, #52]	; (80016c0 <USART2_IRQHandler+0x74>)
 800168a:	2200      	movs	r2, #0
 800168c:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			input.line_rx_buffer[input.char_counter] = uart_char;
 8001690:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <USART2_IRQHandler+0x74>)
 8001692:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001696:	4a0a      	ldr	r2, [pc, #40]	; (80016c0 <USART2_IRQHandler+0x74>)
 8001698:	4413      	add	r3, r2
 800169a:	79fa      	ldrb	r2, [r7, #7]
 800169c:	705a      	strb	r2, [r3, #1]
			input.char_counter++;
 800169e:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <USART2_IRQHandler+0x74>)
 80016a0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80016a4:	3301      	adds	r3, #1
 80016a6:	4a06      	ldr	r2, [pc, #24]	; (80016c0 <USART2_IRQHandler+0x74>)
 80016a8:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
		}
	}

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016ac:	4805      	ldr	r0, [pc, #20]	; (80016c4 <USART2_IRQHandler+0x78>)
 80016ae:	f004 fdd3 	bl	8006258 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40004400 	.word	0x40004400
 80016c0:	200008fc 	.word	0x200008fc
 80016c4:	20000df0 	.word	0x20000df0

080016c8 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

    // Timer1 stop
    __HAL_TIM_DISABLE(&htim1);
 80016cc:	4b10      	ldr	r3, [pc, #64]	; (8001710 <DMA2_Stream5_IRQHandler+0x48>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6a1a      	ldr	r2, [r3, #32]
 80016d2:	f241 1311 	movw	r3, #4369	; 0x1111
 80016d6:	4013      	ands	r3, r2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d10f      	bne.n	80016fc <DMA2_Stream5_IRQHandler+0x34>
 80016dc:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <DMA2_Stream5_IRQHandler+0x48>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6a1a      	ldr	r2, [r3, #32]
 80016e2:	f240 4344 	movw	r3, #1092	; 0x444
 80016e6:	4013      	ands	r3, r2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d107      	bne.n	80016fc <DMA2_Stream5_IRQHandler+0x34>
 80016ec:	4b08      	ldr	r3, [pc, #32]	; (8001710 <DMA2_Stream5_IRQHandler+0x48>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	4b07      	ldr	r3, [pc, #28]	; (8001710 <DMA2_Stream5_IRQHandler+0x48>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f022 0201 	bic.w	r2, r2, #1
 80016fa:	601a      	str	r2, [r3, #0]
    // DMA2 disable
    // __HAL_DMA_DISABLE(&hdma_tim1_up); // not needed?
    // switch on black
    GPIOE->BSRR = VGA_GPIO_HINIBBLE << 16u;
 80016fc:	4b05      	ldr	r3, [pc, #20]	; (8001714 <DMA2_Stream5_IRQHandler+0x4c>)
 80016fe:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8001702:	619a      	str	r2, [r3, #24]

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8001704:	4804      	ldr	r0, [pc, #16]	; (8001718 <DMA2_Stream5_IRQHandler+0x50>)
 8001706:	f002 fc1d 	bl	8003f44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000d10 	.word	0x20000d10
 8001714:	40021000 	.word	0x40021000
 8001718:	20000d90 	.word	0x20000d90

0800171c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]
 800172c:	e00a      	b.n	8001744 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800172e:	f3af 8000 	nop.w
 8001732:	4601      	mov	r1, r0
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	1c5a      	adds	r2, r3, #1
 8001738:	60ba      	str	r2, [r7, #8]
 800173a:	b2ca      	uxtb	r2, r1
 800173c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	3301      	adds	r3, #1
 8001742:	617b      	str	r3, [r7, #20]
 8001744:	697a      	ldr	r2, [r7, #20]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	429a      	cmp	r2, r3
 800174a:	dbf0      	blt.n	800172e <_read+0x12>
	}

return len;
 800174c:	687b      	ldr	r3, [r7, #4]
}
 800174e:	4618      	mov	r0, r3
 8001750:	3718      	adds	r7, #24
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b086      	sub	sp, #24
 800175a:	af00      	add	r7, sp, #0
 800175c:	60f8      	str	r0, [r7, #12]
 800175e:	60b9      	str	r1, [r7, #8]
 8001760:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001762:	2300      	movs	r3, #0
 8001764:	617b      	str	r3, [r7, #20]
 8001766:	e009      	b.n	800177c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	1c5a      	adds	r2, r3, #1
 800176c:	60ba      	str	r2, [r7, #8]
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff fe99 	bl	80014a8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	3301      	adds	r3, #1
 800177a:	617b      	str	r3, [r7, #20]
 800177c:	697a      	ldr	r2, [r7, #20]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	429a      	cmp	r2, r3
 8001782:	dbf1      	blt.n	8001768 <_write+0x12>
	}
	return len;
 8001784:	687b      	ldr	r3, [r7, #4]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3718      	adds	r7, #24
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <_close>:

int _close(int file)
{
 800178e:	b480      	push	{r7}
 8001790:	b083      	sub	sp, #12
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
	return -1;
 8001796:	f04f 33ff 	mov.w	r3, #4294967295
}
 800179a:	4618      	mov	r0, r3
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b083      	sub	sp, #12
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
 80017ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017b6:	605a      	str	r2, [r3, #4]
	return 0;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <_isatty>:

int _isatty(int file)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b083      	sub	sp, #12
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
	return 1;
 80017ce:	2301      	movs	r3, #1
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
	return 0;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
	...

080017f8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001800:	4b11      	ldr	r3, [pc, #68]	; (8001848 <_sbrk+0x50>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d102      	bne.n	800180e <_sbrk+0x16>
		heap_end = &end;
 8001808:	4b0f      	ldr	r3, [pc, #60]	; (8001848 <_sbrk+0x50>)
 800180a:	4a10      	ldr	r2, [pc, #64]	; (800184c <_sbrk+0x54>)
 800180c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800180e:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <_sbrk+0x50>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001814:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <_sbrk+0x50>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4413      	add	r3, r2
 800181c:	466a      	mov	r2, sp
 800181e:	4293      	cmp	r3, r2
 8001820:	d907      	bls.n	8001832 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001822:	f005 fc75 	bl	8007110 <__errno>
 8001826:	4603      	mov	r3, r0
 8001828:	220c      	movs	r2, #12
 800182a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800182c:	f04f 33ff 	mov.w	r3, #4294967295
 8001830:	e006      	b.n	8001840 <_sbrk+0x48>
	}

	heap_end += incr;
 8001832:	4b05      	ldr	r3, [pc, #20]	; (8001848 <_sbrk+0x50>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4413      	add	r3, r2
 800183a:	4a03      	ldr	r2, [pc, #12]	; (8001848 <_sbrk+0x50>)
 800183c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800183e:	68fb      	ldr	r3, [r7, #12]
}
 8001840:	4618      	mov	r0, r3
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20000d0c 	.word	0x20000d0c
 800184c:	20013b40 	.word	0x20013b40

08001850 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001854:	4b08      	ldr	r3, [pc, #32]	; (8001878 <SystemInit+0x28>)
 8001856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800185a:	4a07      	ldr	r2, [pc, #28]	; (8001878 <SystemInit+0x28>)
 800185c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001860:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001864:	4b04      	ldr	r3, [pc, #16]	; (8001878 <SystemInit+0x28>)
 8001866:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800186a:	609a      	str	r2, [r3, #8]
#endif
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim1_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001882:	f107 0308 	add.w	r3, r7, #8
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	605a      	str	r2, [r3, #4]
 800188c:	609a      	str	r2, [r3, #8]
 800188e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001890:	463b      	mov	r3, r7
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8001898:	4b1e      	ldr	r3, [pc, #120]	; (8001914 <MX_TIM1_Init+0x98>)
 800189a:	4a1f      	ldr	r2, [pc, #124]	; (8001918 <MX_TIM1_Init+0x9c>)
 800189c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = VGA_TIM1_PRESCALE;
 800189e:	4b1d      	ldr	r3, [pc, #116]	; (8001914 <MX_TIM1_Init+0x98>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a4:	4b1b      	ldr	r3, [pc, #108]	; (8001914 <MX_TIM1_Init+0x98>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = VGA_TIM1_PERIODE;
 80018aa:	4b1a      	ldr	r3, [pc, #104]	; (8001914 <MX_TIM1_Init+0x98>)
 80018ac:	220b      	movs	r2, #11
 80018ae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018b0:	4b18      	ldr	r3, [pc, #96]	; (8001914 <MX_TIM1_Init+0x98>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018b6:	4b17      	ldr	r3, [pc, #92]	; (8001914 <MX_TIM1_Init+0x98>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018bc:	4b15      	ldr	r3, [pc, #84]	; (8001914 <MX_TIM1_Init+0x98>)
 80018be:	2200      	movs	r2, #0
 80018c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018c2:	4814      	ldr	r0, [pc, #80]	; (8001914 <MX_TIM1_Init+0x98>)
 80018c4:	f003 fbec 	bl	80050a0 <HAL_TIM_Base_Init>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 80018ce:	f7ff fdfd 	bl	80014cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018d8:	f107 0308 	add.w	r3, r7, #8
 80018dc:	4619      	mov	r1, r3
 80018de:	480d      	ldr	r0, [pc, #52]	; (8001914 <MX_TIM1_Init+0x98>)
 80018e0:	f003 fee8 	bl	80056b4 <HAL_TIM_ConfigClockSource>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 80018ea:	f7ff fdef 	bl	80014cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ee:	2300      	movs	r3, #0
 80018f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018f2:	2300      	movs	r3, #0
 80018f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018f6:	463b      	mov	r3, r7
 80018f8:	4619      	mov	r1, r3
 80018fa:	4806      	ldr	r0, [pc, #24]	; (8001914 <MX_TIM1_Init+0x98>)
 80018fc:	f004 fae0 	bl	8005ec0 <HAL_TIMEx_MasterConfigSynchronization>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8001906:	f7ff fde1 	bl	80014cc <Error_Handler>
  }

}
 800190a:	bf00      	nop
 800190c:	3718      	adds	r7, #24
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20000d10 	.word	0x20000d10
 8001918:	40010000 	.word	0x40010000

0800191c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08a      	sub	sp, #40	; 0x28
 8001920:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001922:	f107 0320 	add.w	r3, r7, #32
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800192c:	1d3b      	adds	r3, r7, #4
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	605a      	str	r2, [r3, #4]
 8001934:	609a      	str	r2, [r3, #8]
 8001936:	60da      	str	r2, [r3, #12]
 8001938:	611a      	str	r2, [r3, #16]
 800193a:	615a      	str	r2, [r3, #20]
 800193c:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 800193e:	4b2a      	ldr	r3, [pc, #168]	; (80019e8 <MX_TIM2_Init+0xcc>)
 8001940:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001944:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 8001946:	4b28      	ldr	r3, [pc, #160]	; (80019e8 <MX_TIM2_Init+0xcc>)
 8001948:	2200      	movs	r2, #0
 800194a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800194c:	4b26      	ldr	r3, [pc, #152]	; (80019e8 <MX_TIM2_Init+0xcc>)
 800194e:	2200      	movs	r2, #0
 8001950:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = VGA_TIM2_HSYNC_PERIODE;
 8001952:	4b25      	ldr	r3, [pc, #148]	; (80019e8 <MX_TIM2_Init+0xcc>)
 8001954:	f640 226b 	movw	r2, #2667	; 0xa6b
 8001958:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800195a:	4b23      	ldr	r3, [pc, #140]	; (80019e8 <MX_TIM2_Init+0xcc>)
 800195c:	2200      	movs	r2, #0
 800195e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001960:	4b21      	ldr	r3, [pc, #132]	; (80019e8 <MX_TIM2_Init+0xcc>)
 8001962:	2200      	movs	r2, #0
 8001964:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001966:	4820      	ldr	r0, [pc, #128]	; (80019e8 <MX_TIM2_Init+0xcc>)
 8001968:	f003 fbe9 	bl	800513e <HAL_TIM_PWM_Init>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001972:	f7ff fdab 	bl	80014cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001976:	2300      	movs	r3, #0
 8001978:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800197a:	2300      	movs	r3, #0
 800197c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800197e:	f107 0320 	add.w	r3, r7, #32
 8001982:	4619      	mov	r1, r3
 8001984:	4818      	ldr	r0, [pc, #96]	; (80019e8 <MX_TIM2_Init+0xcc>)
 8001986:	f004 fa9b 	bl	8005ec0 <HAL_TIMEx_MasterConfigSynchronization>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001990:	f7ff fd9c 	bl	80014cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001994:	2360      	movs	r3, #96	; 0x60
 8001996:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = VGA_TIM2_HTRIGGER_START - VGA_TIM2_DMA_DELAY;
 8001998:	f240 13bb 	movw	r3, #443	; 0x1bb
 800199c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800199e:	2302      	movs	r3, #2
 80019a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019a6:	1d3b      	adds	r3, r7, #4
 80019a8:	2208      	movs	r2, #8
 80019aa:	4619      	mov	r1, r3
 80019ac:	480e      	ldr	r0, [pc, #56]	; (80019e8 <MX_TIM2_Init+0xcc>)
 80019ae:	f003 fdbb 	bl	8005528 <HAL_TIM_PWM_ConfigChannel>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80019b8:	f7ff fd88 	bl	80014cc <Error_Handler>
  }
  sConfigOC.Pulse = VGA_TIM2_HSYNC_IMP;
 80019bc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80019c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019c2:	1d3b      	adds	r3, r7, #4
 80019c4:	220c      	movs	r2, #12
 80019c6:	4619      	mov	r1, r3
 80019c8:	4807      	ldr	r0, [pc, #28]	; (80019e8 <MX_TIM2_Init+0xcc>)
 80019ca:	f003 fdad 	bl	8005528 <HAL_TIM_PWM_ConfigChannel>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 80019d4:	f7ff fd7a 	bl	80014cc <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80019d8:	4803      	ldr	r0, [pc, #12]	; (80019e8 <MX_TIM2_Init+0xcc>)
 80019da:	f000 f87f 	bl	8001adc <HAL_TIM_MspPostInit>

}
 80019de:	bf00      	nop
 80019e0:	3728      	adds	r7, #40	; 0x28
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000d50 	.word	0x20000d50

080019ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a21      	ldr	r2, [pc, #132]	; (8001a80 <HAL_TIM_Base_MspInit+0x94>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d13c      	bne.n	8001a78 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	4b20      	ldr	r3, [pc, #128]	; (8001a84 <HAL_TIM_Base_MspInit+0x98>)
 8001a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a06:	4a1f      	ldr	r2, [pc, #124]	; (8001a84 <HAL_TIM_Base_MspInit+0x98>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a0e:	4b1d      	ldr	r3, [pc, #116]	; (8001a84 <HAL_TIM_Base_MspInit+0x98>)
 8001a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 8001a1a:	4b1b      	ldr	r3, [pc, #108]	; (8001a88 <HAL_TIM_Base_MspInit+0x9c>)
 8001a1c:	4a1b      	ldr	r2, [pc, #108]	; (8001a8c <HAL_TIM_Base_MspInit+0xa0>)
 8001a1e:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8001a20:	4b19      	ldr	r3, [pc, #100]	; (8001a88 <HAL_TIM_Base_MspInit+0x9c>)
 8001a22:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001a26:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a28:	4b17      	ldr	r3, [pc, #92]	; (8001a88 <HAL_TIM_Base_MspInit+0x9c>)
 8001a2a:	2240      	movs	r2, #64	; 0x40
 8001a2c:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a2e:	4b16      	ldr	r3, [pc, #88]	; (8001a88 <HAL_TIM_Base_MspInit+0x9c>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8001a34:	4b14      	ldr	r3, [pc, #80]	; (8001a88 <HAL_TIM_Base_MspInit+0x9c>)
 8001a36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a3a:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a3c:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <HAL_TIM_Base_MspInit+0x9c>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a42:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <HAL_TIM_Base_MspInit+0x9c>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 8001a48:	4b0f      	ldr	r3, [pc, #60]	; (8001a88 <HAL_TIM_Base_MspInit+0x9c>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001a4e:	4b0e      	ldr	r3, [pc, #56]	; (8001a88 <HAL_TIM_Base_MspInit+0x9c>)
 8001a50:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001a54:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a56:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <HAL_TIM_Base_MspInit+0x9c>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8001a5c:	480a      	ldr	r0, [pc, #40]	; (8001a88 <HAL_TIM_Base_MspInit+0x9c>)
 8001a5e:	f002 f949 	bl	8003cf4 <HAL_DMA_Init>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <HAL_TIM_Base_MspInit+0x80>
    {
      Error_Handler();
 8001a68:	f7ff fd30 	bl	80014cc <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4a06      	ldr	r2, [pc, #24]	; (8001a88 <HAL_TIM_Base_MspInit+0x9c>)
 8001a70:	621a      	str	r2, [r3, #32]
 8001a72:	4a05      	ldr	r2, [pc, #20]	; (8001a88 <HAL_TIM_Base_MspInit+0x9c>)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001a78:	bf00      	nop
 8001a7a:	3710      	adds	r7, #16
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40010000 	.word	0x40010000
 8001a84:	40023800 	.word	0x40023800
 8001a88:	20000d90 	.word	0x20000d90
 8001a8c:	40026488 	.word	0x40026488

08001a90 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aa0:	d115      	bne.n	8001ace <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <HAL_TIM_PWM_MspInit+0x48>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	4a0b      	ldr	r2, [pc, #44]	; (8001ad8 <HAL_TIM_PWM_MspInit+0x48>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ab2:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <HAL_TIM_PWM_MspInit+0x48>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	201c      	movs	r0, #28
 8001ac4:	f002 f8df 	bl	8003c86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ac8:	201c      	movs	r0, #28
 8001aca:	f002 f8f8 	bl	8003cbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001ace:	bf00      	nop
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40023800 	.word	0x40023800

08001adc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b088      	sub	sp, #32
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae4:	f107 030c 	add.w	r3, r7, #12
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]
 8001af2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001afc:	d11e      	bne.n	8001b3c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <HAL_TIM_MspPostInit+0x68>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	4a0f      	ldr	r2, [pc, #60]	; (8001b44 <HAL_TIM_MspPostInit+0x68>)
 8001b08:	f043 0302 	orr.w	r3, r3, #2
 8001b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0e:	4b0d      	ldr	r3, [pc, #52]	; (8001b44 <HAL_TIM_MspPostInit+0x68>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	60bb      	str	r3, [r7, #8]
 8001b18:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = VGA_HSYNC_Pin;
 8001b1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b1e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b20:	2302      	movs	r3, #2
 8001b22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VGA_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8001b30:	f107 030c 	add.w	r3, r7, #12
 8001b34:	4619      	mov	r1, r3
 8001b36:	4804      	ldr	r0, [pc, #16]	; (8001b48 <HAL_TIM_MspPostInit+0x6c>)
 8001b38:	f002 fc6e 	bl	8004418 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001b3c:	bf00      	nop
 8001b3e:	3720      	adds	r7, #32
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40023800 	.word	0x40023800
 8001b48:	40020400 	.word	0x40020400

08001b4c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001b50:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <MX_USART2_UART_Init+0x4c>)
 8001b52:	4a12      	ldr	r2, [pc, #72]	; (8001b9c <MX_USART2_UART_Init+0x50>)
 8001b54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b56:	4b10      	ldr	r3, [pc, #64]	; (8001b98 <MX_USART2_UART_Init+0x4c>)
 8001b58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b5e:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <MX_USART2_UART_Init+0x4c>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b64:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <MX_USART2_UART_Init+0x4c>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <MX_USART2_UART_Init+0x4c>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b70:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <MX_USART2_UART_Init+0x4c>)
 8001b72:	220c      	movs	r2, #12
 8001b74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b76:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <MX_USART2_UART_Init+0x4c>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b7c:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <MX_USART2_UART_Init+0x4c>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b82:	4805      	ldr	r0, [pc, #20]	; (8001b98 <MX_USART2_UART_Init+0x4c>)
 8001b84:	f004 fa2c 	bl	8005fe0 <HAL_UART_Init>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b8e:	f7ff fc9d 	bl	80014cc <Error_Handler>
  }

}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20000df0 	.word	0x20000df0
 8001b9c:	40004400 	.word	0x40004400

08001ba0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08a      	sub	sp, #40	; 0x28
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba8:	f107 0314 	add.w	r3, r7, #20
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
 8001bb6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a1d      	ldr	r2, [pc, #116]	; (8001c34 <HAL_UART_MspInit+0x94>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d133      	bne.n	8001c2a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	613b      	str	r3, [r7, #16]
 8001bc6:	4b1c      	ldr	r3, [pc, #112]	; (8001c38 <HAL_UART_MspInit+0x98>)
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	4a1b      	ldr	r2, [pc, #108]	; (8001c38 <HAL_UART_MspInit+0x98>)
 8001bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bd2:	4b19      	ldr	r3, [pc, #100]	; (8001c38 <HAL_UART_MspInit+0x98>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bda:	613b      	str	r3, [r7, #16]
 8001bdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	4b15      	ldr	r3, [pc, #84]	; (8001c38 <HAL_UART_MspInit+0x98>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	4a14      	ldr	r2, [pc, #80]	; (8001c38 <HAL_UART_MspInit+0x98>)
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	6313      	str	r3, [r2, #48]	; 0x30
 8001bee:	4b12      	ldr	r3, [pc, #72]	; (8001c38 <HAL_UART_MspInit+0x98>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001bfa:	230c      	movs	r3, #12
 8001bfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c06:	2303      	movs	r3, #3
 8001c08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c0a:	2307      	movs	r3, #7
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c0e:	f107 0314 	add.w	r3, r7, #20
 8001c12:	4619      	mov	r1, r3
 8001c14:	4809      	ldr	r0, [pc, #36]	; (8001c3c <HAL_UART_MspInit+0x9c>)
 8001c16:	f002 fbff 	bl	8004418 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	2026      	movs	r0, #38	; 0x26
 8001c20:	f002 f831 	bl	8003c86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c24:	2026      	movs	r0, #38	; 0x26
 8001c26:	f002 f84a 	bl	8003cbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c2a:	bf00      	nop
 8001c2c:	3728      	adds	r7, #40	; 0x28
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40004400 	.word	0x40004400
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	40020000 	.word	0x40020000

08001c40 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack     /* set stack pointer */
 8001c40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c78 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001c44:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c46:	e003      	b.n	8001c50 <LoopCopyDataInit>

08001c48 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c48:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001c4a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001c4c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001c4e:	3104      	adds	r1, #4

08001c50 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001c50:	480b      	ldr	r0, [pc, #44]	; (8001c80 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001c52:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001c54:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c56:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c58:	d3f6      	bcc.n	8001c48 <CopyDataInit>
  ldr  r2, =_sbss
 8001c5a:	4a0b      	ldr	r2, [pc, #44]	; (8001c88 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001c5c:	e002      	b.n	8001c64 <LoopFillZerobss>

08001c5e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001c5e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c60:	f842 3b04 	str.w	r3, [r2], #4

08001c64 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c64:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001c66:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001c68:	d3f9      	bcc.n	8001c5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c6a:	f7ff fdf1 	bl	8001850 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c6e:	f005 fa55 	bl	800711c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c72:	f7ff fb65 	bl	8001340 <main>
  bx  lr    
 8001c76:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c78:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001c7c:	0800d274 	.word	0x0800d274
  ldr  r0, =_sdata
 8001c80:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c84:	20000118 	.word	0x20000118
  ldr  r2, =_sbss
 8001c88:	20000118 	.word	0x20000118
  ldr  r3, = _ebss
 8001c8c:	20013b40 	.word	0x20013b40

08001c90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c90:	e7fe      	b.n	8001c90 <ADC_IRQHandler>
	...

08001c94 <UB_VGA_Screen_Init>:
// @brief The initialisation of the VGA driver
// @details The function initialises the timer registers of timer 1 & 2.
//			It also initialises the DMA register.
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  VGA.hsync_cnt = 0;
 8001c98:	4b1f      	ldr	r3, [pc, #124]	; (8001d18 <UB_VGA_Screen_Init+0x84>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	801a      	strh	r2, [r3, #0]
  VGA.start_adr = 0;
 8001c9e:	4b1e      	ldr	r3, [pc, #120]	; (8001d18 <UB_VGA_Screen_Init+0x84>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg = 0;
 8001ca4:	4b1c      	ldr	r3, [pc, #112]	; (8001d18 <UB_VGA_Screen_Init+0x84>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	609a      	str	r2, [r3, #8]

  GPIOB->BSRR = VGA_VSYNC_Pin;
 8001caa:	4b1c      	ldr	r3, [pc, #112]	; (8001d1c <UB_VGA_Screen_Init+0x88>)
 8001cac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001cb0:	619a      	str	r2, [r3, #24]

  // TIM2
  HAL_TIM_Base_Start(&htim2);
 8001cb2:	481b      	ldr	r0, [pc, #108]	; (8001d20 <UB_VGA_Screen_Init+0x8c>)
 8001cb4:	f003 fa1f 	bl	80050f6 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001cb8:	210c      	movs	r1, #12
 8001cba:	4819      	ldr	r0, [pc, #100]	; (8001d20 <UB_VGA_Screen_Init+0x8c>)
 8001cbc:	f003 fa6a 	bl	8005194 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 8001cc0:	2108      	movs	r1, #8
 8001cc2:	4817      	ldr	r0, [pc, #92]	; (8001d20 <UB_VGA_Screen_Init+0x8c>)
 8001cc4:	f003 faa4 	bl	8005210 <HAL_TIM_PWM_Start_IT>

  // TIM1
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8001cc8:	4b16      	ldr	r3, [pc, #88]	; (8001d24 <UB_VGA_Screen_Init+0x90>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	68da      	ldr	r2, [r3, #12]
 8001cce:	4b15      	ldr	r3, [pc, #84]	; (8001d24 <UB_VGA_Screen_Init+0x90>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cd6:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 8001cd8:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <UB_VGA_Screen_Init+0x90>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <UB_VGA_Screen_Init+0x90>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f042 0201 	orr.w	r2, r2, #1
 8001ce6:	601a      	str	r2, [r3, #0]
  HAL_DMA_Start_IT(&hdma_tim1_up, (uint32_t)&VGA_RAM1[0], VGA_GPIOE_ODR_ADDRESS, VGA_DISPLAY_X + 1);
 8001ce8:	490f      	ldr	r1, [pc, #60]	; (8001d28 <UB_VGA_Screen_Init+0x94>)
 8001cea:	f240 1341 	movw	r3, #321	; 0x141
 8001cee:	4a0f      	ldr	r2, [pc, #60]	; (8001d2c <UB_VGA_Screen_Init+0x98>)
 8001cf0:	480f      	ldr	r0, [pc, #60]	; (8001d30 <UB_VGA_Screen_Init+0x9c>)
 8001cf2:	f002 f8ad 	bl	8003e50 <HAL_DMA_Start_IT>

  HAL_DMA_Init(&hdma_tim1_up);
 8001cf6:	480e      	ldr	r0, [pc, #56]	; (8001d30 <UB_VGA_Screen_Init+0x9c>)
 8001cf8:	f001 fffc 	bl	8003cf4 <HAL_DMA_Init>
  __HAL_DMA_ENABLE_IT(&hdma_tim1_up, DMA_IT_TC);
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <UB_VGA_Screen_Init+0x9c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	4b0b      	ldr	r3, [pc, #44]	; (8001d30 <UB_VGA_Screen_Init+0x9c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f042 0210 	orr.w	r2, r2, #16
 8001d0a:	601a      	str	r2, [r3, #0]

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg = DMA2_Stream5->CR;
 8001d0c:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <UB_VGA_Screen_Init+0xa0>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a01      	ldr	r2, [pc, #4]	; (8001d18 <UB_VGA_Screen_Init+0x84>)
 8001d12:	6093      	str	r3, [r2, #8]
}
 8001d14:	bf00      	nop
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	20013b20 	.word	0x20013b20
 8001d1c:	40020400 	.word	0x40020400
 8001d20:	20000d50 	.word	0x20000d50
 8001d24:	20000d10 	.word	0x20000d10
 8001d28:	20000e30 	.word	0x20000e30
 8001d2c:	40021015 	.word	0x40021015
 8001d30:	20000d90 	.word	0x20000d90
 8001d34:	40026488 	.word	0x40026488

08001d38 <UB_VGA_FillScreen>:
// @details This function writes for all pixels a single color to the ram.
//
// @param[in] color The 8-bit color-code to display
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 8001d42:	2300      	movs	r3, #0
 8001d44:	81bb      	strh	r3, [r7, #12]
 8001d46:	e012      	b.n	8001d6e <UB_VGA_FillScreen+0x36>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 8001d48:	2300      	movs	r3, #0
 8001d4a:	81fb      	strh	r3, [r7, #14]
 8001d4c:	e008      	b.n	8001d60 <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp, yp, color);
 8001d4e:	79fa      	ldrb	r2, [r7, #7]
 8001d50:	89b9      	ldrh	r1, [r7, #12]
 8001d52:	89fb      	ldrh	r3, [r7, #14]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f000 f813 	bl	8001d80 <UB_VGA_SetPixel>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 8001d5a:	89fb      	ldrh	r3, [r7, #14]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	81fb      	strh	r3, [r7, #14]
 8001d60:	89fb      	ldrh	r3, [r7, #14]
 8001d62:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001d66:	d3f2      	bcc.n	8001d4e <UB_VGA_FillScreen+0x16>
  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 8001d68:	89bb      	ldrh	r3, [r7, #12]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	81bb      	strh	r3, [r7, #12]
 8001d6e:	89bb      	ldrh	r3, [r7, #12]
 8001d70:	2bef      	cmp	r3, #239	; 0xef
 8001d72:	d9e9      	bls.n	8001d48 <UB_VGA_FillScreen+0x10>
    }
  }
}
 8001d74:	bf00      	nop
 8001d76:	bf00      	nop
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
	...

08001d80 <UB_VGA_SetPixel>:
// @param[in] xp The X-coordinate of the pixel
// @param[in] yp The Y-coordinate of the pixel
// @param[in] color The 8-bit color-code to display
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	80fb      	strh	r3, [r7, #6]
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	80bb      	strh	r3, [r7, #4]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	70fb      	strb	r3, [r7, #3]
  if(xp >= VGA_DISPLAY_X)
 8001d92:	88fb      	ldrh	r3, [r7, #6]
 8001d94:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001d98:	d301      	bcc.n	8001d9e <UB_VGA_SetPixel+0x1e>
    xp = 0;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	80fb      	strh	r3, [r7, #6]
  if(yp >= VGA_DISPLAY_Y)
 8001d9e:	88bb      	ldrh	r3, [r7, #4]
 8001da0:	2bef      	cmp	r3, #239	; 0xef
 8001da2:	d901      	bls.n	8001da8 <UB_VGA_SetPixel+0x28>
    yp = 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp * (VGA_DISPLAY_X + 1)) + xp] = color;
 8001da8:	88ba      	ldrh	r2, [r7, #4]
 8001daa:	4613      	mov	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	019b      	lsls	r3, r3, #6
 8001db2:	441a      	add	r2, r3
 8001db4:	88fb      	ldrh	r3, [r7, #6]
 8001db6:	4413      	add	r3, r2
 8001db8:	4904      	ldr	r1, [pc, #16]	; (8001dcc <UB_VGA_SetPixel+0x4c>)
 8001dba:	78fa      	ldrb	r2, [r7, #3]
 8001dbc:	54ca      	strb	r2, [r1, r3]
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	20000e30 	.word	0x20000e30

08001dd0 <UB_VGA_SetLine>:
// @param[in] y2 The Y-coordinate of point 2 of the line
// @param[in] color The 8-bit color-code to display
// @param[in] width The width of the line in pixels
//--------------------------------------------------------------
void UB_VGA_SetLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t color, uint16_t width)
{
 8001dd0:	b590      	push	{r4, r7, lr}
 8001dd2:	b089      	sub	sp, #36	; 0x24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4604      	mov	r4, r0
 8001dd8:	4608      	mov	r0, r1
 8001dda:	4611      	mov	r1, r2
 8001ddc:	461a      	mov	r2, r3
 8001dde:	4623      	mov	r3, r4
 8001de0:	80fb      	strh	r3, [r7, #6]
 8001de2:	4603      	mov	r3, r0
 8001de4:	80bb      	strh	r3, [r7, #4]
 8001de6:	460b      	mov	r3, r1
 8001de8:	807b      	strh	r3, [r7, #2]
 8001dea:	4613      	mov	r3, r2
 8001dec:	803b      	strh	r3, [r7, #0]
  uint16_t j; 								//Count amount of width pixels
  uint8_t neg;
  uint16_t amPerSide;
  float slope;

  dx=x2-x1;      							//the horizontal distance of the line
 8001dee:	887a      	ldrh	r2, [r7, #2]
 8001df0:	88fb      	ldrh	r3, [r7, #6]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	837b      	strh	r3, [r7, #26]
  dy=y2-y1;      							//the vertical distance of the line
 8001df8:	883a      	ldrh	r2, [r7, #0]
 8001dfa:	88bb      	ldrh	r3, [r7, #4]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	833b      	strh	r3, [r7, #24]
  dxabs=abs(dx);
 8001e02:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	bfb8      	it	lt
 8001e0a:	425b      	neglt	r3, r3
 8001e0c:	82fb      	strh	r3, [r7, #22]
  dyabs=abs(dy);
 8001e0e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	bfb8      	it	lt
 8001e16:	425b      	neglt	r3, r3
 8001e18:	82bb      	strh	r3, [r7, #20]
  amPerSide = width / 2;
 8001e1a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001e1c:	085b      	lsrs	r3, r3, #1
 8001e1e:	827b      	strh	r3, [r7, #18]
  neg = width % 2;
 8001e20:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	747b      	strb	r3, [r7, #17]

  if (dxabs>=dyabs) 						//the line is more horizontal than vertical
 8001e2a:	8afa      	ldrh	r2, [r7, #22]
 8001e2c:	8abb      	ldrh	r3, [r7, #20]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	f0c0 8096 	bcc.w	8001f60 <UB_VGA_SetLine+0x190>
  {
    slope=(float)dy / (float)dx;
 8001e34:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001e38:	ee07 3a90 	vmov	s15, r3
 8001e3c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e40:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001e44:	ee07 3a90 	vmov	s15, r3
 8001e48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e50:	edc7 7a03 	vstr	s15, [r7, #12]
    for(i=0;i!=dx;i++)
 8001e54:	2300      	movs	r3, #0
 8001e56:	83fb      	strh	r3, [r7, #30]
 8001e58:	e07b      	b.n	8001f52 <UB_VGA_SetLine+0x182>
    {
      px=i+x1;
 8001e5a:	8bfa      	ldrh	r2, [r7, #30]
 8001e5c:	88fb      	ldrh	r3, [r7, #6]
 8001e5e:	4413      	add	r3, r2
 8001e60:	817b      	strh	r3, [r7, #10]
      py=slope*i+y1;						//Calculate Y-value for the current Y-value
 8001e62:	8bfb      	ldrh	r3, [r7, #30]
 8001e64:	ee07 3a90 	vmov	s15, r3
 8001e68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e6c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e74:	88bb      	ldrh	r3, [r7, #4]
 8001e76:	ee07 3a90 	vmov	s15, r3
 8001e7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e86:	ee17 3a90 	vmov	r3, s15
 8001e8a:	813b      	strh	r3, [r7, #8]
      UB_VGA_SetPixel(px,py,color);
 8001e8c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001e90:	8939      	ldrh	r1, [r7, #8]
 8001e92:	897b      	ldrh	r3, [r7, #10]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff ff73 	bl	8001d80 <UB_VGA_SetPixel>

      for(j = 0; j <= amPerSide; j++)
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	83bb      	strh	r3, [r7, #28]
 8001e9e:	e04f      	b.n	8001f40 <UB_VGA_SetLine+0x170>
      {
          py = slope * i + y1 + j;			//Calculate extra width-pixels on the positive side
 8001ea0:	8bfb      	ldrh	r3, [r7, #30]
 8001ea2:	ee07 3a90 	vmov	s15, r3
 8001ea6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001eaa:	edd7 7a03 	vldr	s15, [r7, #12]
 8001eae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001eb2:	88bb      	ldrh	r3, [r7, #4]
 8001eb4:	ee07 3a90 	vmov	s15, r3
 8001eb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ebc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ec0:	8bbb      	ldrh	r3, [r7, #28]
 8001ec2:	ee07 3a90 	vmov	s15, r3
 8001ec6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ece:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ed2:	ee17 3a90 	vmov	r3, s15
 8001ed6:	813b      	strh	r3, [r7, #8]
          UB_VGA_SetPixel(px,py,color);
 8001ed8:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001edc:	8939      	ldrh	r1, [r7, #8]
 8001ede:	897b      	ldrh	r3, [r7, #10]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff ff4d 	bl	8001d80 <UB_VGA_SetPixel>

          if(!(neg) && (j == amPerSide))
 8001ee6:	7c7b      	ldrb	r3, [r7, #17]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d103      	bne.n	8001ef4 <UB_VGA_SetLine+0x124>
 8001eec:	8bba      	ldrh	r2, [r7, #28]
 8001eee:	8a7b      	ldrh	r3, [r7, #18]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d02a      	beq.n	8001f4a <UB_VGA_SetLine+0x17a>
        	  break;						//Break when positive and last width pixel

          py = slope * i + y1 - j;			//Calculate extra width-pixels on the negative side
 8001ef4:	8bfb      	ldrh	r3, [r7, #30]
 8001ef6:	ee07 3a90 	vmov	s15, r3
 8001efa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001efe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f06:	88bb      	ldrh	r3, [r7, #4]
 8001f08:	ee07 3a90 	vmov	s15, r3
 8001f0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f14:	8bbb      	ldrh	r3, [r7, #28]
 8001f16:	ee07 3a90 	vmov	s15, r3
 8001f1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f26:	ee17 3a90 	vmov	r3, s15
 8001f2a:	813b      	strh	r3, [r7, #8]
          UB_VGA_SetPixel(px,py,color);
 8001f2c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001f30:	8939      	ldrh	r1, [r7, #8]
 8001f32:	897b      	ldrh	r3, [r7, #10]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff ff23 	bl	8001d80 <UB_VGA_SetPixel>
      for(j = 0; j <= amPerSide; j++)
 8001f3a:	8bbb      	ldrh	r3, [r7, #28]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	83bb      	strh	r3, [r7, #28]
 8001f40:	8bba      	ldrh	r2, [r7, #28]
 8001f42:	8a7b      	ldrh	r3, [r7, #18]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d9ab      	bls.n	8001ea0 <UB_VGA_SetLine+0xd0>
 8001f48:	e000      	b.n	8001f4c <UB_VGA_SetLine+0x17c>
        	  break;						//Break when positive and last width pixel
 8001f4a:	bf00      	nop
    for(i=0;i!=dx;i++)
 8001f4c:	8bfb      	ldrh	r3, [r7, #30]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	83fb      	strh	r3, [r7, #30]
 8001f52:	8bfa      	ldrh	r2, [r7, #30]
 8001f54:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	f47f af7e 	bne.w	8001e5a <UB_VGA_SetLine+0x8a>
          px = slope * i + x1 - j;			//Calculate extra width-pixels on the negative side
    	  UB_VGA_SetPixel(px,py,color);
      }
    }
  }
}
 8001f5e:	e094      	b.n	800208a <UB_VGA_SetLine+0x2ba>
    slope=(float)dx / (float)dy;
 8001f60:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001f64:	ee07 3a90 	vmov	s15, r3
 8001f68:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001f6c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001f70:	ee07 3a90 	vmov	s15, r3
 8001f74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f7c:	edc7 7a03 	vstr	s15, [r7, #12]
    for(i=0;i!=dy;i++)
 8001f80:	2300      	movs	r3, #0
 8001f82:	83fb      	strh	r3, [r7, #30]
 8001f84:	e07b      	b.n	800207e <UB_VGA_SetLine+0x2ae>
      px=slope*i+x1; 						//Calculate X-value for the current Y-value
 8001f86:	8bfb      	ldrh	r3, [r7, #30]
 8001f88:	ee07 3a90 	vmov	s15, r3
 8001f8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f90:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f98:	88fb      	ldrh	r3, [r7, #6]
 8001f9a:	ee07 3a90 	vmov	s15, r3
 8001f9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fa2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001faa:	ee17 3a90 	vmov	r3, s15
 8001fae:	817b      	strh	r3, [r7, #10]
      py=i+y1;
 8001fb0:	8bfa      	ldrh	r2, [r7, #30]
 8001fb2:	88bb      	ldrh	r3, [r7, #4]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	813b      	strh	r3, [r7, #8]
      UB_VGA_SetPixel(px,py,color);
 8001fb8:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001fbc:	8939      	ldrh	r1, [r7, #8]
 8001fbe:	897b      	ldrh	r3, [r7, #10]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff fedd 	bl	8001d80 <UB_VGA_SetPixel>
      for(j = 0; j <= amPerSide; j++)
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	83bb      	strh	r3, [r7, #28]
 8001fca:	e04f      	b.n	800206c <UB_VGA_SetLine+0x29c>
          px = slope * i + x1 + j;			//Calculate extra width-pixels on the positive side
 8001fcc:	8bfb      	ldrh	r3, [r7, #30]
 8001fce:	ee07 3a90 	vmov	s15, r3
 8001fd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fd6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fde:	88fb      	ldrh	r3, [r7, #6]
 8001fe0:	ee07 3a90 	vmov	s15, r3
 8001fe4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fe8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fec:	8bbb      	ldrh	r3, [r7, #28]
 8001fee:	ee07 3a90 	vmov	s15, r3
 8001ff2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ff6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ffa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ffe:	ee17 3a90 	vmov	r3, s15
 8002002:	817b      	strh	r3, [r7, #10]
    	  UB_VGA_SetPixel(px,py,color);
 8002004:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002008:	8939      	ldrh	r1, [r7, #8]
 800200a:	897b      	ldrh	r3, [r7, #10]
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff feb7 	bl	8001d80 <UB_VGA_SetPixel>
    	  if(!(neg) && (j == amPerSide))
 8002012:	7c7b      	ldrb	r3, [r7, #17]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d103      	bne.n	8002020 <UB_VGA_SetLine+0x250>
 8002018:	8bba      	ldrh	r2, [r7, #28]
 800201a:	8a7b      	ldrh	r3, [r7, #18]
 800201c:	429a      	cmp	r2, r3
 800201e:	d02a      	beq.n	8002076 <UB_VGA_SetLine+0x2a6>
          px = slope * i + x1 - j;			//Calculate extra width-pixels on the negative side
 8002020:	8bfb      	ldrh	r3, [r7, #30]
 8002022:	ee07 3a90 	vmov	s15, r3
 8002026:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800202a:	edd7 7a03 	vldr	s15, [r7, #12]
 800202e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002032:	88fb      	ldrh	r3, [r7, #6]
 8002034:	ee07 3a90 	vmov	s15, r3
 8002038:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800203c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002040:	8bbb      	ldrh	r3, [r7, #28]
 8002042:	ee07 3a90 	vmov	s15, r3
 8002046:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800204a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800204e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002052:	ee17 3a90 	vmov	r3, s15
 8002056:	817b      	strh	r3, [r7, #10]
    	  UB_VGA_SetPixel(px,py,color);
 8002058:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800205c:	8939      	ldrh	r1, [r7, #8]
 800205e:	897b      	ldrh	r3, [r7, #10]
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff fe8d 	bl	8001d80 <UB_VGA_SetPixel>
      for(j = 0; j <= amPerSide; j++)
 8002066:	8bbb      	ldrh	r3, [r7, #28]
 8002068:	3301      	adds	r3, #1
 800206a:	83bb      	strh	r3, [r7, #28]
 800206c:	8bba      	ldrh	r2, [r7, #28]
 800206e:	8a7b      	ldrh	r3, [r7, #18]
 8002070:	429a      	cmp	r2, r3
 8002072:	d9ab      	bls.n	8001fcc <UB_VGA_SetLine+0x1fc>
 8002074:	e000      	b.n	8002078 <UB_VGA_SetLine+0x2a8>
    		  break;						//Break when positive and last width pixel
 8002076:	bf00      	nop
    for(i=0;i!=dy;i++)
 8002078:	8bfb      	ldrh	r3, [r7, #30]
 800207a:	3301      	adds	r3, #1
 800207c:	83fb      	strh	r3, [r7, #30]
 800207e:	8bfa      	ldrh	r2, [r7, #30]
 8002080:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002084:	429a      	cmp	r2, r3
 8002086:	f47f af7e 	bne.w	8001f86 <UB_VGA_SetLine+0x1b6>
}
 800208a:	bf00      	nop
 800208c:	3724      	adds	r7, #36	; 0x24
 800208e:	46bd      	mov	sp, r7
 8002090:	bd90      	pop	{r4, r7, pc}

08002092 <UB_VGA_DrawRectangle>:
// @param[in] lineWidth: The width of the line that determines the border of the rectangle
//--------------------------------------------------------------

void UB_VGA_DrawRectangle(uint16_t xp, uint16_t yp, uint8_t width, uint8_t height, uint8_t color, uint8_t filled,
		uint8_t bordercolor, uint8_t lineWidth)
{
 8002092:	b590      	push	{r4, r7, lr}
 8002094:	b085      	sub	sp, #20
 8002096:	af00      	add	r7, sp, #0
 8002098:	4604      	mov	r4, r0
 800209a:	4608      	mov	r0, r1
 800209c:	4611      	mov	r1, r2
 800209e:	461a      	mov	r2, r3
 80020a0:	4623      	mov	r3, r4
 80020a2:	80fb      	strh	r3, [r7, #6]
 80020a4:	4603      	mov	r3, r0
 80020a6:	80bb      	strh	r3, [r7, #4]
 80020a8:	460b      	mov	r3, r1
 80020aa:	70fb      	strb	r3, [r7, #3]
 80020ac:	4613      	mov	r3, r2
 80020ae:	70bb      	strb	r3, [r7, #2]
	uint16_t px;
	uint16_t py;
	uint16_t i;
	uint16_t j;

	if(xp >= VGA_DISPLAY_X)
 80020b0:	88fb      	ldrh	r3, [r7, #6]
 80020b2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80020b6:	d301      	bcc.n	80020bc <UB_VGA_DrawRectangle+0x2a>
	  xp = 0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	80fb      	strh	r3, [r7, #6]
	if(yp >= VGA_DISPLAY_Y)
 80020bc:	88bb      	ldrh	r3, [r7, #4]
 80020be:	2bef      	cmp	r3, #239	; 0xef
 80020c0:	d901      	bls.n	80020c6 <UB_VGA_DrawRectangle+0x34>
	  yp = 0;
 80020c2:	2300      	movs	r3, #0
 80020c4:	80bb      	strh	r3, [r7, #4]

	/* the vertical part of the rectangle */
	for(j=0; j < lineWidth; j++)
 80020c6:	2300      	movs	r3, #0
 80020c8:	81bb      	strh	r3, [r7, #12]
 80020ca:	e03a      	b.n	8002142 <UB_VGA_DrawRectangle+0xb0>
	{
		for(i=0; i <= height; i++)
 80020cc:	2300      	movs	r3, #0
 80020ce:	81fb      	strh	r3, [r7, #14]
 80020d0:	e011      	b.n	80020f6 <UB_VGA_DrawRectangle+0x64>
		{
			py = yp + i;
 80020d2:	88ba      	ldrh	r2, [r7, #4]
 80020d4:	89fb      	ldrh	r3, [r7, #14]
 80020d6:	4413      	add	r3, r2
 80020d8:	813b      	strh	r3, [r7, #8]
			px = xp + j;
 80020da:	88fa      	ldrh	r2, [r7, #6]
 80020dc:	89bb      	ldrh	r3, [r7, #12]
 80020de:	4413      	add	r3, r2
 80020e0:	817b      	strh	r3, [r7, #10]
			UB_VGA_SetPixel(px,py,bordercolor);
 80020e2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80020e6:	8939      	ldrh	r1, [r7, #8]
 80020e8:	897b      	ldrh	r3, [r7, #10]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff fe48 	bl	8001d80 <UB_VGA_SetPixel>
		for(i=0; i <= height; i++)
 80020f0:	89fb      	ldrh	r3, [r7, #14]
 80020f2:	3301      	adds	r3, #1
 80020f4:	81fb      	strh	r3, [r7, #14]
 80020f6:	78bb      	ldrb	r3, [r7, #2]
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	89fa      	ldrh	r2, [r7, #14]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d9e8      	bls.n	80020d2 <UB_VGA_DrawRectangle+0x40>
		}
		for(i=0; i <= height; i++)
 8002100:	2300      	movs	r3, #0
 8002102:	81fb      	strh	r3, [r7, #14]
 8002104:	e015      	b.n	8002132 <UB_VGA_DrawRectangle+0xa0>
		{
			py = yp + i;
 8002106:	88ba      	ldrh	r2, [r7, #4]
 8002108:	89fb      	ldrh	r3, [r7, #14]
 800210a:	4413      	add	r3, r2
 800210c:	813b      	strh	r3, [r7, #8]
			px = xp + width - j;
 800210e:	78fb      	ldrb	r3, [r7, #3]
 8002110:	b29a      	uxth	r2, r3
 8002112:	88fb      	ldrh	r3, [r7, #6]
 8002114:	4413      	add	r3, r2
 8002116:	b29a      	uxth	r2, r3
 8002118:	89bb      	ldrh	r3, [r7, #12]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	817b      	strh	r3, [r7, #10]
			UB_VGA_SetPixel(px,py,bordercolor);
 800211e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002122:	8939      	ldrh	r1, [r7, #8]
 8002124:	897b      	ldrh	r3, [r7, #10]
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff fe2a 	bl	8001d80 <UB_VGA_SetPixel>
		for(i=0; i <= height; i++)
 800212c:	89fb      	ldrh	r3, [r7, #14]
 800212e:	3301      	adds	r3, #1
 8002130:	81fb      	strh	r3, [r7, #14]
 8002132:	78bb      	ldrb	r3, [r7, #2]
 8002134:	b29b      	uxth	r3, r3
 8002136:	89fa      	ldrh	r2, [r7, #14]
 8002138:	429a      	cmp	r2, r3
 800213a:	d9e4      	bls.n	8002106 <UB_VGA_DrawRectangle+0x74>
	for(j=0; j < lineWidth; j++)
 800213c:	89bb      	ldrh	r3, [r7, #12]
 800213e:	3301      	adds	r3, #1
 8002140:	81bb      	strh	r3, [r7, #12]
 8002142:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002146:	b29b      	uxth	r3, r3
 8002148:	89ba      	ldrh	r2, [r7, #12]
 800214a:	429a      	cmp	r2, r3
 800214c:	d3be      	bcc.n	80020cc <UB_VGA_DrawRectangle+0x3a>
		}
	}

    /* the horizontal part of the rectangle */
	for(j=0; j < lineWidth; j++)
 800214e:	2300      	movs	r3, #0
 8002150:	81bb      	strh	r3, [r7, #12]
 8002152:	e048      	b.n	80021e6 <UB_VGA_DrawRectangle+0x154>
	{
		for(i=0; i <= width-lineWidth; i++)
 8002154:	2300      	movs	r3, #0
 8002156:	81fb      	strh	r3, [r7, #14]
 8002158:	e016      	b.n	8002188 <UB_VGA_DrawRectangle+0xf6>
		{
			py = yp + j;
 800215a:	88ba      	ldrh	r2, [r7, #4]
 800215c:	89bb      	ldrh	r3, [r7, #12]
 800215e:	4413      	add	r3, r2
 8002160:	813b      	strh	r3, [r7, #8]
			px = xp + i + lineWidth;
 8002162:	88fa      	ldrh	r2, [r7, #6]
 8002164:	89fb      	ldrh	r3, [r7, #14]
 8002166:	4413      	add	r3, r2
 8002168:	b29a      	uxth	r2, r3
 800216a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800216e:	b29b      	uxth	r3, r3
 8002170:	4413      	add	r3, r2
 8002172:	817b      	strh	r3, [r7, #10]
			UB_VGA_SetPixel(px,py,bordercolor);
 8002174:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002178:	8939      	ldrh	r1, [r7, #8]
 800217a:	897b      	ldrh	r3, [r7, #10]
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff fdff 	bl	8001d80 <UB_VGA_SetPixel>
		for(i=0; i <= width-lineWidth; i++)
 8002182:	89fb      	ldrh	r3, [r7, #14]
 8002184:	3301      	adds	r3, #1
 8002186:	81fb      	strh	r3, [r7, #14]
 8002188:	89fa      	ldrh	r2, [r7, #14]
 800218a:	78f9      	ldrb	r1, [r7, #3]
 800218c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002190:	1acb      	subs	r3, r1, r3
 8002192:	429a      	cmp	r2, r3
 8002194:	dde1      	ble.n	800215a <UB_VGA_DrawRectangle+0xc8>
		}
		for(i=0; i <= width-lineWidth; i++)
 8002196:	2300      	movs	r3, #0
 8002198:	81fb      	strh	r3, [r7, #14]
 800219a:	e01a      	b.n	80021d2 <UB_VGA_DrawRectangle+0x140>
		{
			py = yp + height - j;
 800219c:	78bb      	ldrb	r3, [r7, #2]
 800219e:	b29a      	uxth	r2, r3
 80021a0:	88bb      	ldrh	r3, [r7, #4]
 80021a2:	4413      	add	r3, r2
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	89bb      	ldrh	r3, [r7, #12]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	813b      	strh	r3, [r7, #8]
			px = xp + i + lineWidth;
 80021ac:	88fa      	ldrh	r2, [r7, #6]
 80021ae:	89fb      	ldrh	r3, [r7, #14]
 80021b0:	4413      	add	r3, r2
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	4413      	add	r3, r2
 80021bc:	817b      	strh	r3, [r7, #10]
			UB_VGA_SetPixel(px,py,bordercolor);
 80021be:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80021c2:	8939      	ldrh	r1, [r7, #8]
 80021c4:	897b      	ldrh	r3, [r7, #10]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff fdda 	bl	8001d80 <UB_VGA_SetPixel>
		for(i=0; i <= width-lineWidth; i++)
 80021cc:	89fb      	ldrh	r3, [r7, #14]
 80021ce:	3301      	adds	r3, #1
 80021d0:	81fb      	strh	r3, [r7, #14]
 80021d2:	89fa      	ldrh	r2, [r7, #14]
 80021d4:	78f9      	ldrb	r1, [r7, #3]
 80021d6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80021da:	1acb      	subs	r3, r1, r3
 80021dc:	429a      	cmp	r2, r3
 80021de:	dddd      	ble.n	800219c <UB_VGA_DrawRectangle+0x10a>
	for(j=0; j < lineWidth; j++)
 80021e0:	89bb      	ldrh	r3, [r7, #12]
 80021e2:	3301      	adds	r3, #1
 80021e4:	81bb      	strh	r3, [r7, #12]
 80021e6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	89ba      	ldrh	r2, [r7, #12]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d3b0      	bcc.n	8002154 <UB_VGA_DrawRectangle+0xc2>
		}
	}

    /* filling in the rectangle */
    if(filled == 1)
 80021f2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d134      	bne.n	8002264 <UB_VGA_DrawRectangle+0x1d2>
    {
    	for(i=0; i <= width-lineWidth*2; i++)
 80021fa:	2300      	movs	r3, #0
 80021fc:	81fb      	strh	r3, [r7, #14]
 80021fe:	e029      	b.n	8002254 <UB_VGA_DrawRectangle+0x1c2>
    	{
    		px = xp + i + lineWidth;
 8002200:	88fa      	ldrh	r2, [r7, #6]
 8002202:	89fb      	ldrh	r3, [r7, #14]
 8002204:	4413      	add	r3, r2
 8002206:	b29a      	uxth	r2, r3
 8002208:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800220c:	b29b      	uxth	r3, r3
 800220e:	4413      	add	r3, r2
 8002210:	817b      	strh	r3, [r7, #10]

        	for(j=0; j <= height-(lineWidth*2); j++)
 8002212:	2300      	movs	r3, #0
 8002214:	81bb      	strh	r3, [r7, #12]
 8002216:	e012      	b.n	800223e <UB_VGA_DrawRectangle+0x1ac>
        	{
        		py = yp + j + lineWidth;
 8002218:	88ba      	ldrh	r2, [r7, #4]
 800221a:	89bb      	ldrh	r3, [r7, #12]
 800221c:	4413      	add	r3, r2
 800221e:	b29a      	uxth	r2, r3
 8002220:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002224:	b29b      	uxth	r3, r3
 8002226:	4413      	add	r3, r2
 8002228:	813b      	strh	r3, [r7, #8]
        		UB_VGA_SetPixel(px,py,color);
 800222a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800222e:	8939      	ldrh	r1, [r7, #8]
 8002230:	897b      	ldrh	r3, [r7, #10]
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff fda4 	bl	8001d80 <UB_VGA_SetPixel>
        	for(j=0; j <= height-(lineWidth*2); j++)
 8002238:	89bb      	ldrh	r3, [r7, #12]
 800223a:	3301      	adds	r3, #1
 800223c:	81bb      	strh	r3, [r7, #12]
 800223e:	89ba      	ldrh	r2, [r7, #12]
 8002240:	78b9      	ldrb	r1, [r7, #2]
 8002242:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	1acb      	subs	r3, r1, r3
 800224a:	429a      	cmp	r2, r3
 800224c:	dde4      	ble.n	8002218 <UB_VGA_DrawRectangle+0x186>
    	for(i=0; i <= width-lineWidth*2; i++)
 800224e:	89fb      	ldrh	r3, [r7, #14]
 8002250:	3301      	adds	r3, #1
 8002252:	81fb      	strh	r3, [r7, #14]
 8002254:	89fa      	ldrh	r2, [r7, #14]
 8002256:	78f9      	ldrb	r1, [r7, #3]
 8002258:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	1acb      	subs	r3, r1, r3
 8002260:	429a      	cmp	r2, r3
 8002262:	ddcd      	ble.n	8002200 <UB_VGA_DrawRectangle+0x16e>
        	}
    	}
    }

}
 8002264:	bf00      	nop
 8002266:	3714      	adds	r7, #20
 8002268:	46bd      	mov	sp, r7
 800226a:	bd90      	pop	{r4, r7, pc}

0800226c <UB_VGA_clearScreen>:
//--------------------------------------------------------------
// @brief Function to clear the whole screen.
// @details This function writes for all pixels the color white to the ram.
//--------------------------------------------------------------
void UB_VGA_clearScreen()
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
  uint16_t xp,yp;

  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 8002272:	2300      	movs	r3, #0
 8002274:	80bb      	strh	r3, [r7, #4]
 8002276:	e012      	b.n	800229e <UB_VGA_clearScreen+0x32>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 8002278:	2300      	movs	r3, #0
 800227a:	80fb      	strh	r3, [r7, #6]
 800227c:	e008      	b.n	8002290 <UB_VGA_clearScreen+0x24>
      UB_VGA_SetPixel(xp, yp, VGA_COL_WHITE);
 800227e:	88b9      	ldrh	r1, [r7, #4]
 8002280:	88fb      	ldrh	r3, [r7, #6]
 8002282:	22ff      	movs	r2, #255	; 0xff
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff fd7b 	bl	8001d80 <UB_VGA_SetPixel>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 800228a:	88fb      	ldrh	r3, [r7, #6]
 800228c:	3301      	adds	r3, #1
 800228e:	80fb      	strh	r3, [r7, #6]
 8002290:	88fb      	ldrh	r3, [r7, #6]
 8002292:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002296:	d3f2      	bcc.n	800227e <UB_VGA_clearScreen+0x12>
  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 8002298:	88bb      	ldrh	r3, [r7, #4]
 800229a:	3301      	adds	r3, #1
 800229c:	80bb      	strh	r3, [r7, #4]
 800229e:	88bb      	ldrh	r3, [r7, #4]
 80022a0:	2bef      	cmp	r3, #239	; 0xef
 80022a2:	d9e9      	bls.n	8002278 <UB_VGA_clearScreen+0xc>
    }
  }
}
 80022a4:	bf00      	nop
 80022a6:	bf00      	nop
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
	...

080022b0 <UB_VGA_DrawBitmap>:
// @param[in] x: The X-coordinate of the top left corner of the bitmap
// @param[in] y: The Y-coordinate of the top left corner of the bitmap
// @param[in] bmNr: The number ID of the bitmap to be loaded in
//--------------------------------------------------------------
void UB_VGA_DrawBitmap(uint16_t x, uint16_t y, uint16_t bmNr, uint8_t color, uint8_t double_size)
{
 80022b0:	b590      	push	{r4, r7, lr}
 80022b2:	b087      	sub	sp, #28
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4604      	mov	r4, r0
 80022b8:	4608      	mov	r0, r1
 80022ba:	4611      	mov	r1, r2
 80022bc:	461a      	mov	r2, r3
 80022be:	4623      	mov	r3, r4
 80022c0:	80fb      	strh	r3, [r7, #6]
 80022c2:	4603      	mov	r3, r0
 80022c4:	80bb      	strh	r3, [r7, #4]
 80022c6:	460b      	mov	r3, r1
 80022c8:	807b      	strh	r3, [r7, #2]
 80022ca:	4613      	mov	r3, r2
 80022cc:	707b      	strb	r3, [r7, #1]
  	uint8_t yBm; //Counts y of the bitmap
  	uint16_t bmCoord;
  	uint8_t doubleXFlag;
  	uint8_t doubleYFlag;

  	doubleXFlag = 0;
 80022ce:	2300      	movs	r3, #0
 80022d0:	73fb      	strb	r3, [r7, #15]
  	doubleYFlag = 0;
 80022d2:	2300      	movs	r3, #0
 80022d4:	73bb      	strb	r3, [r7, #14]
  	bmCoord = 0;
 80022d6:	2300      	movs	r3, #0
 80022d8:	823b      	strh	r3, [r7, #16]
  	yBm = 0;
 80022da:	2300      	movs	r3, #0
 80022dc:	74bb      	strb	r3, [r7, #18]
  	xBm = 0;
 80022de:	2300      	movs	r3, #0
 80022e0:	74fb      	strb	r3, [r7, #19]

  	for(i = 0; i < BM_AMOUNT; i++) //Look for bm ID
 80022e2:	2300      	movs	r3, #0
 80022e4:	82fb      	strh	r3, [r7, #22]
 80022e6:	e00c      	b.n	8002302 <UB_VGA_DrawBitmap+0x52>
  	{
  		if(bmNr == bmLookup[i][ID])
 80022e8:	8afb      	ldrh	r3, [r7, #22]
 80022ea:	4a4d      	ldr	r2, [pc, #308]	; (8002420 <UB_VGA_DrawBitmap+0x170>)
 80022ec:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 80022f0:	887a      	ldrh	r2, [r7, #2]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d102      	bne.n	80022fc <UB_VGA_DrawBitmap+0x4c>
  		{
  			bmNr = i;
 80022f6:	8afb      	ldrh	r3, [r7, #22]
 80022f8:	807b      	strh	r3, [r7, #2]
  			break;
 80022fa:	e005      	b.n	8002308 <UB_VGA_DrawBitmap+0x58>
  	for(i = 0; i < BM_AMOUNT; i++) //Look for bm ID
 80022fc:	8afb      	ldrh	r3, [r7, #22]
 80022fe:	3301      	adds	r3, #1
 8002300:	82fb      	strh	r3, [r7, #22]
 8002302:	8afb      	ldrh	r3, [r7, #22]
 8002304:	2bc7      	cmp	r3, #199	; 0xc7
 8002306:	d9ef      	bls.n	80022e8 <UB_VGA_DrawBitmap+0x38>
  		}
  	}

  	bmCoord = bmLookup[bmNr][OFFSET];
 8002308:	887b      	ldrh	r3, [r7, #2]
 800230a:	4a45      	ldr	r2, [pc, #276]	; (8002420 <UB_VGA_DrawBitmap+0x170>)
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	4413      	add	r3, r2
 8002310:	88db      	ldrh	r3, [r3, #6]
 8002312:	823b      	strh	r3, [r7, #16]

  	for(i = 0; i < VGA_DISPLAY_Y; i++)
 8002314:	2300      	movs	r3, #0
 8002316:	82fb      	strh	r3, [r7, #22]
 8002318:	e078      	b.n	800240c <UB_VGA_DrawBitmap+0x15c>
    {
  		if(i >= y)
 800231a:	8afa      	ldrh	r2, [r7, #22]
 800231c:	88bb      	ldrh	r3, [r7, #4]
 800231e:	429a      	cmp	r2, r3
 8002320:	d371      	bcc.n	8002406 <UB_VGA_DrawBitmap+0x156>
  		{
  			if(yBm == bmLookup[bmNr][Y_LEN]) //Check for Y length of bm
 8002322:	7cbb      	ldrb	r3, [r7, #18]
 8002324:	b29a      	uxth	r2, r3
 8002326:	887b      	ldrh	r3, [r7, #2]
 8002328:	493d      	ldr	r1, [pc, #244]	; (8002420 <UB_VGA_DrawBitmap+0x170>)
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	440b      	add	r3, r1
 800232e:	889b      	ldrh	r3, [r3, #4]
 8002330:	429a      	cmp	r2, r3
 8002332:	d06f      	beq.n	8002414 <UB_VGA_DrawBitmap+0x164>
  				break;
  			for(j = 0; j < VGA_DISPLAY_X; j++)
 8002334:	2300      	movs	r3, #0
 8002336:	82bb      	strh	r3, [r7, #20]
 8002338:	e044      	b.n	80023c4 <UB_VGA_DrawBitmap+0x114>
  			{
  				if(j >= x)
 800233a:	8aba      	ldrh	r2, [r7, #20]
 800233c:	88fb      	ldrh	r3, [r7, #6]
 800233e:	429a      	cmp	r2, r3
 8002340:	d33d      	bcc.n	80023be <UB_VGA_DrawBitmap+0x10e>
  				{
  					if(xBm == bmLookup[bmNr][X_LEN]) //Check for X length of bm
 8002342:	7cfb      	ldrb	r3, [r7, #19]
 8002344:	b29a      	uxth	r2, r3
 8002346:	887b      	ldrh	r3, [r7, #2]
 8002348:	4935      	ldr	r1, [pc, #212]	; (8002420 <UB_VGA_DrawBitmap+0x170>)
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	440b      	add	r3, r1
 800234e:	885b      	ldrh	r3, [r3, #2]
 8002350:	429a      	cmp	r2, r3
 8002352:	d03c      	beq.n	80023ce <UB_VGA_DrawBitmap+0x11e>
  						break;

  					if (color)
 8002354:	787b      	ldrb	r3, [r7, #1]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d013      	beq.n	8002382 <UB_VGA_DrawBitmap+0xd2>
  					{
  						if (bitmap_test[bmCoord] == 0XFF)
 800235a:	8a3b      	ldrh	r3, [r7, #16]
 800235c:	4a31      	ldr	r2, [pc, #196]	; (8002424 <UB_VGA_DrawBitmap+0x174>)
 800235e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002362:	2bff      	cmp	r3, #255	; 0xff
 8002364:	d106      	bne.n	8002374 <UB_VGA_DrawBitmap+0xc4>
  						{
  							UB_VGA_SetPixel(j, i, color);
 8002366:	787a      	ldrb	r2, [r7, #1]
 8002368:	8af9      	ldrh	r1, [r7, #22]
 800236a:	8abb      	ldrh	r3, [r7, #20]
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff fd07 	bl	8001d80 <UB_VGA_SetPixel>
 8002372:	e010      	b.n	8002396 <UB_VGA_DrawBitmap+0xe6>
  						}
  						else
  							UB_VGA_SetPixel(j, i, 0xFF);
 8002374:	8af9      	ldrh	r1, [r7, #22]
 8002376:	8abb      	ldrh	r3, [r7, #20]
 8002378:	22ff      	movs	r2, #255	; 0xff
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff fd00 	bl	8001d80 <UB_VGA_SetPixel>
 8002380:	e009      	b.n	8002396 <UB_VGA_DrawBitmap+0xe6>
  					}
  					else
  						UB_VGA_SetPixel(j, i, bitmap_test[bmCoord]);
 8002382:	8a3b      	ldrh	r3, [r7, #16]
 8002384:	4a27      	ldr	r2, [pc, #156]	; (8002424 <UB_VGA_DrawBitmap+0x174>)
 8002386:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800238a:	b2da      	uxtb	r2, r3
 800238c:	8af9      	ldrh	r1, [r7, #22]
 800238e:	8abb      	ldrh	r3, [r7, #20]
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff fcf5 	bl	8001d80 <UB_VGA_SetPixel>

  					if(double_size && !doubleXFlag)
 8002396:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800239a:	2b00      	cmp	r3, #0
 800239c:	d006      	beq.n	80023ac <UB_VGA_DrawBitmap+0xfc>
 800239e:	7bfb      	ldrb	r3, [r7, #15]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d103      	bne.n	80023ac <UB_VGA_DrawBitmap+0xfc>
  						doubleXFlag++;
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
 80023a6:	3301      	adds	r3, #1
 80023a8:	73fb      	strb	r3, [r7, #15]
 80023aa:	e008      	b.n	80023be <UB_VGA_DrawBitmap+0x10e>
  					else
  					{
  						doubleXFlag--;
 80023ac:	7bfb      	ldrb	r3, [r7, #15]
 80023ae:	3b01      	subs	r3, #1
 80023b0:	73fb      	strb	r3, [r7, #15]
  	  					xBm++;
 80023b2:	7cfb      	ldrb	r3, [r7, #19]
 80023b4:	3301      	adds	r3, #1
 80023b6:	74fb      	strb	r3, [r7, #19]
  	  					bmCoord++;
 80023b8:	8a3b      	ldrh	r3, [r7, #16]
 80023ba:	3301      	adds	r3, #1
 80023bc:	823b      	strh	r3, [r7, #16]
  			for(j = 0; j < VGA_DISPLAY_X; j++)
 80023be:	8abb      	ldrh	r3, [r7, #20]
 80023c0:	3301      	adds	r3, #1
 80023c2:	82bb      	strh	r3, [r7, #20]
 80023c4:	8abb      	ldrh	r3, [r7, #20]
 80023c6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80023ca:	d3b6      	bcc.n	800233a <UB_VGA_DrawBitmap+0x8a>
 80023cc:	e000      	b.n	80023d0 <UB_VGA_DrawBitmap+0x120>
  						break;
 80023ce:	bf00      	nop
  					}
  				}
	    	}
  			xBm = 0;
 80023d0:	2300      	movs	r3, #0
 80023d2:	74fb      	strb	r3, [r7, #19]


			if(double_size && !doubleYFlag)
 80023d4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00e      	beq.n	80023fa <UB_VGA_DrawBitmap+0x14a>
 80023dc:	7bbb      	ldrb	r3, [r7, #14]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10b      	bne.n	80023fa <UB_VGA_DrawBitmap+0x14a>
			{
				doubleYFlag++;
 80023e2:	7bbb      	ldrb	r3, [r7, #14]
 80023e4:	3301      	adds	r3, #1
 80023e6:	73bb      	strb	r3, [r7, #14]
				bmCoord -= bmLookup[bmNr][X_LEN];
 80023e8:	887b      	ldrh	r3, [r7, #2]
 80023ea:	4a0d      	ldr	r2, [pc, #52]	; (8002420 <UB_VGA_DrawBitmap+0x170>)
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	4413      	add	r3, r2
 80023f0:	885b      	ldrh	r3, [r3, #2]
 80023f2:	8a3a      	ldrh	r2, [r7, #16]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	823b      	strh	r3, [r7, #16]
 80023f8:	e005      	b.n	8002406 <UB_VGA_DrawBitmap+0x156>
			}
			else
			{
				doubleYFlag--;
 80023fa:	7bbb      	ldrb	r3, [r7, #14]
 80023fc:	3b01      	subs	r3, #1
 80023fe:	73bb      	strb	r3, [r7, #14]
				yBm++;
 8002400:	7cbb      	ldrb	r3, [r7, #18]
 8002402:	3301      	adds	r3, #1
 8002404:	74bb      	strb	r3, [r7, #18]
  	for(i = 0; i < VGA_DISPLAY_Y; i++)
 8002406:	8afb      	ldrh	r3, [r7, #22]
 8002408:	3301      	adds	r3, #1
 800240a:	82fb      	strh	r3, [r7, #22]
 800240c:	8afb      	ldrh	r3, [r7, #22]
 800240e:	2bef      	cmp	r3, #239	; 0xef
 8002410:	d983      	bls.n	800231a <UB_VGA_DrawBitmap+0x6a>
			}
  		}
    }
}
 8002412:	e000      	b.n	8002416 <UB_VGA_DrawBitmap+0x166>
  				break;
 8002414:	bf00      	nop
}
 8002416:	bf00      	nop
 8002418:	371c      	adds	r7, #28
 800241a:	46bd      	mov	sp, r7
 800241c:	bd90      	pop	{r4, r7, pc}
 800241e:	bf00      	nop
 8002420:	200002bc 	.word	0x200002bc
 8002424:	080082a8 	.word	0x080082a8

08002428 <UB_VGA_writeText>:
// @param[in] fontname: The fontname that the text is printed in
// @param[in] fontsize: The fontsize that the text is printed in
// @param[in] fontstyle: The fontstyle that the text is printed in
//--------------------------------------------------------------
void UB_VGA_writeText(uint16_t x_lup, uint16_t y_lup, uint8_t color, char text[20], char fontname, uint8_t fontsize, uint8_t fontstyle)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b088      	sub	sp, #32
 800242c:	af02      	add	r7, sp, #8
 800242e:	607b      	str	r3, [r7, #4]
 8002430:	4603      	mov	r3, r0
 8002432:	81fb      	strh	r3, [r7, #14]
 8002434:	460b      	mov	r3, r1
 8002436:	81bb      	strh	r3, [r7, #12]
 8002438:	4613      	mov	r3, r2
 800243a:	72fb      	strb	r3, [r7, #11]
    uint16_t px = 0;
 800243c:	2300      	movs	r3, #0
 800243e:	82bb      	strh	r3, [r7, #20]
    uint8_t i = 0;
 8002440:	2300      	movs	r3, #0
 8002442:	75fb      	strb	r3, [r7, #23]
    uint8_t letterWidth = 0;
 8002444:	2300      	movs	r3, #0
 8002446:	75bb      	strb	r3, [r7, #22]
    if(fontsize == 1)	//normal fontsize is selected
 8002448:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800244c:	2b01      	cmp	r3, #1
 800244e:	d102      	bne.n	8002456 <UB_VGA_writeText+0x2e>
    {
        letterWidth = 16;
 8002450:	2310      	movs	r3, #16
 8002452:	75bb      	strb	r3, [r7, #22]
 8002454:	e005      	b.n	8002462 <UB_VGA_writeText+0x3a>
    }
    else if(fontsize == 2)	//large fontsize is selected
 8002456:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800245a:	2b02      	cmp	r3, #2
 800245c:	d101      	bne.n	8002462 <UB_VGA_writeText+0x3a>
    {
        letterWidth = 24;
 800245e:	2318      	movs	r3, #24
 8002460:	75bb      	strb	r3, [r7, #22]
    }


    for(i=0; i < 20; i++)	//maximum text size of 20 letters
 8002462:	2300      	movs	r3, #0
 8002464:	75fb      	strb	r3, [r7, #23]
 8002466:	f001 bab8 	b.w	80039da <UB_VGA_writeText+0x15b2>
    {
        px = x_lup + (i * letterWidth);	//changes the position of x
 800246a:	7dfb      	ldrb	r3, [r7, #23]
 800246c:	b29a      	uxth	r2, r3
 800246e:	7dbb      	ldrb	r3, [r7, #22]
 8002470:	b29b      	uxth	r3, r3
 8002472:	fb12 f303 	smulbb	r3, r2, r3
 8002476:	b29a      	uxth	r2, r3
 8002478:	89fb      	ldrh	r3, [r7, #14]
 800247a:	4413      	add	r3, r2
 800247c:	82bb      	strh	r3, [r7, #20]
        switch(text[i])
 800247e:	7dfb      	ldrb	r3, [r7, #23]
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	4413      	add	r3, r2
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	3b61      	subs	r3, #97	; 0x61
 8002488:	2b19      	cmp	r3, #25
 800248a:	f201 82a2 	bhi.w	80039d2 <UB_VGA_writeText+0x15aa>
 800248e:	a201      	add	r2, pc, #4	; (adr r2, 8002494 <UB_VGA_writeText+0x6c>)
 8002490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002494:	080024fd 	.word	0x080024fd
 8002498:	080025cb 	.word	0x080025cb
 800249c:	08002699 	.word	0x08002699
 80024a0:	08002767 	.word	0x08002767
 80024a4:	08002835 	.word	0x08002835
 80024a8:	08002903 	.word	0x08002903
 80024ac:	080029d1 	.word	0x080029d1
 80024b0:	08002a9f 	.word	0x08002a9f
 80024b4:	08002b6d 	.word	0x08002b6d
 80024b8:	08002c3b 	.word	0x08002c3b
 80024bc:	08002d09 	.word	0x08002d09
 80024c0:	08002dd7 	.word	0x08002dd7
 80024c4:	08002ea5 	.word	0x08002ea5
 80024c8:	08002f73 	.word	0x08002f73
 80024cc:	08003041 	.word	0x08003041
 80024d0:	0800310f 	.word	0x0800310f
 80024d4:	080031db 	.word	0x080031db
 80024d8:	080032a7 	.word	0x080032a7
 80024dc:	08003373 	.word	0x08003373
 80024e0:	0800343f 	.word	0x0800343f
 80024e4:	0800350b 	.word	0x0800350b
 80024e8:	080035d7 	.word	0x080035d7
 80024ec:	080036a3 	.word	0x080036a3
 80024f0:	0800376f 	.word	0x0800376f
 80024f4:	0800383b 	.word	0x0800383b
 80024f8:	08003907 	.word	0x08003907
        {
            case 'a':	//if the letter is 'a'
            	switch(fontname)	//checks what the fontname is
 80024fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d002      	beq.n	800250a <UB_VGA_writeText+0xe2>
 8002504:	2b02      	cmp	r3, #2
 8002506:	d02f      	beq.n	8002568 <UB_VGA_writeText+0x140>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 0, color, fontsize); break;	//normal fontstyle
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 26, color, fontsize); break;	//bold fontstyle
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 500, color, fontsize); break;	//cursive fontstyle
                			default: break;
                		}
                	default: break;
 8002508:	e05c      	b.n	80025c4 <UB_VGA_writeText+0x19c>
            			switch(fontstyle)	//checks what fontname is
 800250a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800250e:	2b03      	cmp	r3, #3
 8002510:	d01c      	beq.n	800254c <UB_VGA_writeText+0x124>
 8002512:	2b03      	cmp	r3, #3
 8002514:	dc26      	bgt.n	8002564 <UB_VGA_writeText+0x13c>
 8002516:	2b01      	cmp	r3, #1
 8002518:	d002      	beq.n	8002520 <UB_VGA_writeText+0xf8>
 800251a:	2b02      	cmp	r3, #2
 800251c:	d00b      	beq.n	8002536 <UB_VGA_writeText+0x10e>
            				default: break;
 800251e:	e021      	b.n	8002564 <UB_VGA_writeText+0x13c>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'a', color, fontsize); break;	//normal fontstyle
 8002520:	7afa      	ldrb	r2, [r7, #11]
 8002522:	89b9      	ldrh	r1, [r7, #12]
 8002524:	8ab8      	ldrh	r0, [r7, #20]
 8002526:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800252a:	9300      	str	r3, [sp, #0]
 800252c:	4613      	mov	r3, r2
 800252e:	2261      	movs	r2, #97	; 0x61
 8002530:	f7ff febe 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002534:	e017      	b.n	8002566 <UB_VGA_writeText+0x13e>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'A', color, fontsize); break;	//bold fontstyle
 8002536:	7afa      	ldrb	r2, [r7, #11]
 8002538:	89b9      	ldrh	r1, [r7, #12]
 800253a:	8ab8      	ldrh	r0, [r7, #20]
 800253c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002540:	9300      	str	r3, [sp, #0]
 8002542:	4613      	mov	r3, r2
 8002544:	2241      	movs	r2, #65	; 0x41
 8002546:	f7ff feb3 	bl	80022b0 <UB_VGA_DrawBitmap>
 800254a:	e00c      	b.n	8002566 <UB_VGA_writeText+0x13e>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 526, color, fontsize); break;	//cursive fontstyle
 800254c:	7afa      	ldrb	r2, [r7, #11]
 800254e:	89b9      	ldrh	r1, [r7, #12]
 8002550:	8ab8      	ldrh	r0, [r7, #20]
 8002552:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002556:	9300      	str	r3, [sp, #0]
 8002558:	4613      	mov	r3, r2
 800255a:	f240 220e 	movw	r2, #526	; 0x20e
 800255e:	f7ff fea7 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002562:	e000      	b.n	8002566 <UB_VGA_writeText+0x13e>
            				default: break;
 8002564:	bf00      	nop
            			break;
 8002566:	e02e      	b.n	80025c6 <UB_VGA_writeText+0x19e>
                		switch(fontstyle)
 8002568:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800256c:	2b03      	cmp	r3, #3
 800256e:	d01c      	beq.n	80025aa <UB_VGA_writeText+0x182>
 8002570:	2b03      	cmp	r3, #3
 8002572:	dc26      	bgt.n	80025c2 <UB_VGA_writeText+0x19a>
 8002574:	2b01      	cmp	r3, #1
 8002576:	d002      	beq.n	800257e <UB_VGA_writeText+0x156>
 8002578:	2b02      	cmp	r3, #2
 800257a:	d00b      	beq.n	8002594 <UB_VGA_writeText+0x16c>
                			default: break;
 800257c:	e021      	b.n	80025c2 <UB_VGA_writeText+0x19a>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 0, color, fontsize); break;	//normal fontstyle
 800257e:	7afa      	ldrb	r2, [r7, #11]
 8002580:	89b9      	ldrh	r1, [r7, #12]
 8002582:	8ab8      	ldrh	r0, [r7, #20]
 8002584:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	4613      	mov	r3, r2
 800258c:	2200      	movs	r2, #0
 800258e:	f7ff fe8f 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002592:	e017      	b.n	80025c4 <UB_VGA_writeText+0x19c>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 26, color, fontsize); break;	//bold fontstyle
 8002594:	7afa      	ldrb	r2, [r7, #11]
 8002596:	89b9      	ldrh	r1, [r7, #12]
 8002598:	8ab8      	ldrh	r0, [r7, #20]
 800259a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800259e:	9300      	str	r3, [sp, #0]
 80025a0:	4613      	mov	r3, r2
 80025a2:	221a      	movs	r2, #26
 80025a4:	f7ff fe84 	bl	80022b0 <UB_VGA_DrawBitmap>
 80025a8:	e00c      	b.n	80025c4 <UB_VGA_writeText+0x19c>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 500, color, fontsize); break;	//cursive fontstyle
 80025aa:	7afa      	ldrb	r2, [r7, #11]
 80025ac:	89b9      	ldrh	r1, [r7, #12]
 80025ae:	8ab8      	ldrh	r0, [r7, #20]
 80025b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	4613      	mov	r3, r2
 80025b8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80025bc:	f7ff fe78 	bl	80022b0 <UB_VGA_DrawBitmap>
 80025c0:	e000      	b.n	80025c4 <UB_VGA_writeText+0x19c>
                			default: break;
 80025c2:	bf00      	nop
                	default: break;
 80025c4:	bf00      	nop
            	}
                break;
 80025c6:	f001 ba05 	b.w	80039d4 <UB_VGA_writeText+0x15ac>
            case 'b':
            	switch(fontname)
 80025ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d002      	beq.n	80025d8 <UB_VGA_writeText+0x1b0>
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d02f      	beq.n	8002636 <UB_VGA_writeText+0x20e>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 1, color, fontsize); break;
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 27, color, fontsize); break;
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 501, color, fontsize); break;
                			default: break;
                		}
                	default: break;
 80025d6:	e05c      	b.n	8002692 <UB_VGA_writeText+0x26a>
            			switch(fontstyle)
 80025d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80025dc:	2b03      	cmp	r3, #3
 80025de:	d01c      	beq.n	800261a <UB_VGA_writeText+0x1f2>
 80025e0:	2b03      	cmp	r3, #3
 80025e2:	dc26      	bgt.n	8002632 <UB_VGA_writeText+0x20a>
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d002      	beq.n	80025ee <UB_VGA_writeText+0x1c6>
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d00b      	beq.n	8002604 <UB_VGA_writeText+0x1dc>
            				default: break;
 80025ec:	e021      	b.n	8002632 <UB_VGA_writeText+0x20a>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'b', color, fontsize); break;
 80025ee:	7afa      	ldrb	r2, [r7, #11]
 80025f0:	89b9      	ldrh	r1, [r7, #12]
 80025f2:	8ab8      	ldrh	r0, [r7, #20]
 80025f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	4613      	mov	r3, r2
 80025fc:	2262      	movs	r2, #98	; 0x62
 80025fe:	f7ff fe57 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002602:	e017      	b.n	8002634 <UB_VGA_writeText+0x20c>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'B', color, fontsize); break;
 8002604:	7afa      	ldrb	r2, [r7, #11]
 8002606:	89b9      	ldrh	r1, [r7, #12]
 8002608:	8ab8      	ldrh	r0, [r7, #20]
 800260a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	4613      	mov	r3, r2
 8002612:	2242      	movs	r2, #66	; 0x42
 8002614:	f7ff fe4c 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002618:	e00c      	b.n	8002634 <UB_VGA_writeText+0x20c>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 527, color, fontsize); break;
 800261a:	7afa      	ldrb	r2, [r7, #11]
 800261c:	89b9      	ldrh	r1, [r7, #12]
 800261e:	8ab8      	ldrh	r0, [r7, #20]
 8002620:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002624:	9300      	str	r3, [sp, #0]
 8002626:	4613      	mov	r3, r2
 8002628:	f240 220f 	movw	r2, #527	; 0x20f
 800262c:	f7ff fe40 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002630:	e000      	b.n	8002634 <UB_VGA_writeText+0x20c>
            				default: break;
 8002632:	bf00      	nop
            			break;
 8002634:	e02e      	b.n	8002694 <UB_VGA_writeText+0x26c>
                		switch(fontstyle)
 8002636:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800263a:	2b03      	cmp	r3, #3
 800263c:	d01c      	beq.n	8002678 <UB_VGA_writeText+0x250>
 800263e:	2b03      	cmp	r3, #3
 8002640:	dc26      	bgt.n	8002690 <UB_VGA_writeText+0x268>
 8002642:	2b01      	cmp	r3, #1
 8002644:	d002      	beq.n	800264c <UB_VGA_writeText+0x224>
 8002646:	2b02      	cmp	r3, #2
 8002648:	d00b      	beq.n	8002662 <UB_VGA_writeText+0x23a>
                			default: break;
 800264a:	e021      	b.n	8002690 <UB_VGA_writeText+0x268>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 1, color, fontsize); break;
 800264c:	7afa      	ldrb	r2, [r7, #11]
 800264e:	89b9      	ldrh	r1, [r7, #12]
 8002650:	8ab8      	ldrh	r0, [r7, #20]
 8002652:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002656:	9300      	str	r3, [sp, #0]
 8002658:	4613      	mov	r3, r2
 800265a:	2201      	movs	r2, #1
 800265c:	f7ff fe28 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002660:	e017      	b.n	8002692 <UB_VGA_writeText+0x26a>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 27, color, fontsize); break;
 8002662:	7afa      	ldrb	r2, [r7, #11]
 8002664:	89b9      	ldrh	r1, [r7, #12]
 8002666:	8ab8      	ldrh	r0, [r7, #20]
 8002668:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800266c:	9300      	str	r3, [sp, #0]
 800266e:	4613      	mov	r3, r2
 8002670:	221b      	movs	r2, #27
 8002672:	f7ff fe1d 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002676:	e00c      	b.n	8002692 <UB_VGA_writeText+0x26a>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 501, color, fontsize); break;
 8002678:	7afa      	ldrb	r2, [r7, #11]
 800267a:	89b9      	ldrh	r1, [r7, #12]
 800267c:	8ab8      	ldrh	r0, [r7, #20]
 800267e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002682:	9300      	str	r3, [sp, #0]
 8002684:	4613      	mov	r3, r2
 8002686:	f240 12f5 	movw	r2, #501	; 0x1f5
 800268a:	f7ff fe11 	bl	80022b0 <UB_VGA_DrawBitmap>
 800268e:	e000      	b.n	8002692 <UB_VGA_writeText+0x26a>
                			default: break;
 8002690:	bf00      	nop
                	default: break;
 8002692:	bf00      	nop
            	}
                break;
 8002694:	f001 b99e 	b.w	80039d4 <UB_VGA_writeText+0x15ac>
            case 'c':
            	switch(fontname)
 8002698:	f897 3020 	ldrb.w	r3, [r7, #32]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d002      	beq.n	80026a6 <UB_VGA_writeText+0x27e>
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d02f      	beq.n	8002704 <UB_VGA_writeText+0x2dc>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 2, color, fontsize); break;
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 28, color, fontsize); break;
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 502, color, fontsize); break;
                			default: break;
                		}
                	default: break;
 80026a4:	e05c      	b.n	8002760 <UB_VGA_writeText+0x338>
            			switch(fontstyle)
 80026a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80026aa:	2b03      	cmp	r3, #3
 80026ac:	d01c      	beq.n	80026e8 <UB_VGA_writeText+0x2c0>
 80026ae:	2b03      	cmp	r3, #3
 80026b0:	dc26      	bgt.n	8002700 <UB_VGA_writeText+0x2d8>
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d002      	beq.n	80026bc <UB_VGA_writeText+0x294>
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d00b      	beq.n	80026d2 <UB_VGA_writeText+0x2aa>
            				default: break;
 80026ba:	e021      	b.n	8002700 <UB_VGA_writeText+0x2d8>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'c', color, fontsize); break;
 80026bc:	7afa      	ldrb	r2, [r7, #11]
 80026be:	89b9      	ldrh	r1, [r7, #12]
 80026c0:	8ab8      	ldrh	r0, [r7, #20]
 80026c2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80026c6:	9300      	str	r3, [sp, #0]
 80026c8:	4613      	mov	r3, r2
 80026ca:	2263      	movs	r2, #99	; 0x63
 80026cc:	f7ff fdf0 	bl	80022b0 <UB_VGA_DrawBitmap>
 80026d0:	e017      	b.n	8002702 <UB_VGA_writeText+0x2da>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'C', color, fontsize); break;
 80026d2:	7afa      	ldrb	r2, [r7, #11]
 80026d4:	89b9      	ldrh	r1, [r7, #12]
 80026d6:	8ab8      	ldrh	r0, [r7, #20]
 80026d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80026dc:	9300      	str	r3, [sp, #0]
 80026de:	4613      	mov	r3, r2
 80026e0:	2243      	movs	r2, #67	; 0x43
 80026e2:	f7ff fde5 	bl	80022b0 <UB_VGA_DrawBitmap>
 80026e6:	e00c      	b.n	8002702 <UB_VGA_writeText+0x2da>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 528, color, fontsize); break;
 80026e8:	7afa      	ldrb	r2, [r7, #11]
 80026ea:	89b9      	ldrh	r1, [r7, #12]
 80026ec:	8ab8      	ldrh	r0, [r7, #20]
 80026ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	4613      	mov	r3, r2
 80026f6:	f44f 7204 	mov.w	r2, #528	; 0x210
 80026fa:	f7ff fdd9 	bl	80022b0 <UB_VGA_DrawBitmap>
 80026fe:	e000      	b.n	8002702 <UB_VGA_writeText+0x2da>
            				default: break;
 8002700:	bf00      	nop
            			break;
 8002702:	e02e      	b.n	8002762 <UB_VGA_writeText+0x33a>
                		switch(fontstyle)
 8002704:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002708:	2b03      	cmp	r3, #3
 800270a:	d01c      	beq.n	8002746 <UB_VGA_writeText+0x31e>
 800270c:	2b03      	cmp	r3, #3
 800270e:	dc26      	bgt.n	800275e <UB_VGA_writeText+0x336>
 8002710:	2b01      	cmp	r3, #1
 8002712:	d002      	beq.n	800271a <UB_VGA_writeText+0x2f2>
 8002714:	2b02      	cmp	r3, #2
 8002716:	d00b      	beq.n	8002730 <UB_VGA_writeText+0x308>
                			default: break;
 8002718:	e021      	b.n	800275e <UB_VGA_writeText+0x336>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 2, color, fontsize); break;
 800271a:	7afa      	ldrb	r2, [r7, #11]
 800271c:	89b9      	ldrh	r1, [r7, #12]
 800271e:	8ab8      	ldrh	r0, [r7, #20]
 8002720:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	4613      	mov	r3, r2
 8002728:	2202      	movs	r2, #2
 800272a:	f7ff fdc1 	bl	80022b0 <UB_VGA_DrawBitmap>
 800272e:	e017      	b.n	8002760 <UB_VGA_writeText+0x338>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 28, color, fontsize); break;
 8002730:	7afa      	ldrb	r2, [r7, #11]
 8002732:	89b9      	ldrh	r1, [r7, #12]
 8002734:	8ab8      	ldrh	r0, [r7, #20]
 8002736:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800273a:	9300      	str	r3, [sp, #0]
 800273c:	4613      	mov	r3, r2
 800273e:	221c      	movs	r2, #28
 8002740:	f7ff fdb6 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002744:	e00c      	b.n	8002760 <UB_VGA_writeText+0x338>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 502, color, fontsize); break;
 8002746:	7afa      	ldrb	r2, [r7, #11]
 8002748:	89b9      	ldrh	r1, [r7, #12]
 800274a:	8ab8      	ldrh	r0, [r7, #20]
 800274c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002750:	9300      	str	r3, [sp, #0]
 8002752:	4613      	mov	r3, r2
 8002754:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 8002758:	f7ff fdaa 	bl	80022b0 <UB_VGA_DrawBitmap>
 800275c:	e000      	b.n	8002760 <UB_VGA_writeText+0x338>
                			default: break;
 800275e:	bf00      	nop
                	default: break;
 8002760:	bf00      	nop
            	}
                break;
 8002762:	f001 b937 	b.w	80039d4 <UB_VGA_writeText+0x15ac>
            case 'd':
            	switch(fontname)
 8002766:	f897 3020 	ldrb.w	r3, [r7, #32]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d002      	beq.n	8002774 <UB_VGA_writeText+0x34c>
 800276e:	2b02      	cmp	r3, #2
 8002770:	d02f      	beq.n	80027d2 <UB_VGA_writeText+0x3aa>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 3, color, fontsize); break;
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 29, color, fontsize); break;
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 503, color, fontsize); break;
                			default: break;
                		}
                	default: break;
 8002772:	e05c      	b.n	800282e <UB_VGA_writeText+0x406>
            			switch(fontstyle)
 8002774:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002778:	2b03      	cmp	r3, #3
 800277a:	d01c      	beq.n	80027b6 <UB_VGA_writeText+0x38e>
 800277c:	2b03      	cmp	r3, #3
 800277e:	dc26      	bgt.n	80027ce <UB_VGA_writeText+0x3a6>
 8002780:	2b01      	cmp	r3, #1
 8002782:	d002      	beq.n	800278a <UB_VGA_writeText+0x362>
 8002784:	2b02      	cmp	r3, #2
 8002786:	d00b      	beq.n	80027a0 <UB_VGA_writeText+0x378>
            				default: break;
 8002788:	e021      	b.n	80027ce <UB_VGA_writeText+0x3a6>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'd', color, fontsize); break;
 800278a:	7afa      	ldrb	r2, [r7, #11]
 800278c:	89b9      	ldrh	r1, [r7, #12]
 800278e:	8ab8      	ldrh	r0, [r7, #20]
 8002790:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	4613      	mov	r3, r2
 8002798:	2264      	movs	r2, #100	; 0x64
 800279a:	f7ff fd89 	bl	80022b0 <UB_VGA_DrawBitmap>
 800279e:	e017      	b.n	80027d0 <UB_VGA_writeText+0x3a8>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'D', color, fontsize); break;
 80027a0:	7afa      	ldrb	r2, [r7, #11]
 80027a2:	89b9      	ldrh	r1, [r7, #12]
 80027a4:	8ab8      	ldrh	r0, [r7, #20]
 80027a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	4613      	mov	r3, r2
 80027ae:	2244      	movs	r2, #68	; 0x44
 80027b0:	f7ff fd7e 	bl	80022b0 <UB_VGA_DrawBitmap>
 80027b4:	e00c      	b.n	80027d0 <UB_VGA_writeText+0x3a8>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 529, color, fontsize); break;
 80027b6:	7afa      	ldrb	r2, [r7, #11]
 80027b8:	89b9      	ldrh	r1, [r7, #12]
 80027ba:	8ab8      	ldrh	r0, [r7, #20]
 80027bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80027c0:	9300      	str	r3, [sp, #0]
 80027c2:	4613      	mov	r3, r2
 80027c4:	f240 2211 	movw	r2, #529	; 0x211
 80027c8:	f7ff fd72 	bl	80022b0 <UB_VGA_DrawBitmap>
 80027cc:	e000      	b.n	80027d0 <UB_VGA_writeText+0x3a8>
            				default: break;
 80027ce:	bf00      	nop
            			break;
 80027d0:	e02e      	b.n	8002830 <UB_VGA_writeText+0x408>
                		switch(fontstyle)
 80027d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80027d6:	2b03      	cmp	r3, #3
 80027d8:	d01c      	beq.n	8002814 <UB_VGA_writeText+0x3ec>
 80027da:	2b03      	cmp	r3, #3
 80027dc:	dc26      	bgt.n	800282c <UB_VGA_writeText+0x404>
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d002      	beq.n	80027e8 <UB_VGA_writeText+0x3c0>
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d00b      	beq.n	80027fe <UB_VGA_writeText+0x3d6>
                			default: break;
 80027e6:	e021      	b.n	800282c <UB_VGA_writeText+0x404>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 3, color, fontsize); break;
 80027e8:	7afa      	ldrb	r2, [r7, #11]
 80027ea:	89b9      	ldrh	r1, [r7, #12]
 80027ec:	8ab8      	ldrh	r0, [r7, #20]
 80027ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80027f2:	9300      	str	r3, [sp, #0]
 80027f4:	4613      	mov	r3, r2
 80027f6:	2203      	movs	r2, #3
 80027f8:	f7ff fd5a 	bl	80022b0 <UB_VGA_DrawBitmap>
 80027fc:	e017      	b.n	800282e <UB_VGA_writeText+0x406>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 29, color, fontsize); break;
 80027fe:	7afa      	ldrb	r2, [r7, #11]
 8002800:	89b9      	ldrh	r1, [r7, #12]
 8002802:	8ab8      	ldrh	r0, [r7, #20]
 8002804:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	4613      	mov	r3, r2
 800280c:	221d      	movs	r2, #29
 800280e:	f7ff fd4f 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002812:	e00c      	b.n	800282e <UB_VGA_writeText+0x406>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 503, color, fontsize); break;
 8002814:	7afa      	ldrb	r2, [r7, #11]
 8002816:	89b9      	ldrh	r1, [r7, #12]
 8002818:	8ab8      	ldrh	r0, [r7, #20]
 800281a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800281e:	9300      	str	r3, [sp, #0]
 8002820:	4613      	mov	r3, r2
 8002822:	f240 12f7 	movw	r2, #503	; 0x1f7
 8002826:	f7ff fd43 	bl	80022b0 <UB_VGA_DrawBitmap>
 800282a:	e000      	b.n	800282e <UB_VGA_writeText+0x406>
                			default: break;
 800282c:	bf00      	nop
                	default: break;
 800282e:	bf00      	nop
            	}
                break;
 8002830:	f001 b8d0 	b.w	80039d4 <UB_VGA_writeText+0x15ac>
            case 'e':
            	switch(fontname)
 8002834:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d002      	beq.n	8002842 <UB_VGA_writeText+0x41a>
 800283c:	2b02      	cmp	r3, #2
 800283e:	d02f      	beq.n	80028a0 <UB_VGA_writeText+0x478>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 4, color, fontsize); break;
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 30, color, fontsize); break;
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 504, color, fontsize); break;
                			default: break;
                		}
                	default: break;
 8002840:	e05c      	b.n	80028fc <UB_VGA_writeText+0x4d4>
            			switch(fontstyle)
 8002842:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002846:	2b03      	cmp	r3, #3
 8002848:	d01c      	beq.n	8002884 <UB_VGA_writeText+0x45c>
 800284a:	2b03      	cmp	r3, #3
 800284c:	dc26      	bgt.n	800289c <UB_VGA_writeText+0x474>
 800284e:	2b01      	cmp	r3, #1
 8002850:	d002      	beq.n	8002858 <UB_VGA_writeText+0x430>
 8002852:	2b02      	cmp	r3, #2
 8002854:	d00b      	beq.n	800286e <UB_VGA_writeText+0x446>
            				default: break;
 8002856:	e021      	b.n	800289c <UB_VGA_writeText+0x474>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'e', color, fontsize); break;
 8002858:	7afa      	ldrb	r2, [r7, #11]
 800285a:	89b9      	ldrh	r1, [r7, #12]
 800285c:	8ab8      	ldrh	r0, [r7, #20]
 800285e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	4613      	mov	r3, r2
 8002866:	2265      	movs	r2, #101	; 0x65
 8002868:	f7ff fd22 	bl	80022b0 <UB_VGA_DrawBitmap>
 800286c:	e017      	b.n	800289e <UB_VGA_writeText+0x476>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'E', color, fontsize); break;
 800286e:	7afa      	ldrb	r2, [r7, #11]
 8002870:	89b9      	ldrh	r1, [r7, #12]
 8002872:	8ab8      	ldrh	r0, [r7, #20]
 8002874:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002878:	9300      	str	r3, [sp, #0]
 800287a:	4613      	mov	r3, r2
 800287c:	2245      	movs	r2, #69	; 0x45
 800287e:	f7ff fd17 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002882:	e00c      	b.n	800289e <UB_VGA_writeText+0x476>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 530, color, fontsize); break;
 8002884:	7afa      	ldrb	r2, [r7, #11]
 8002886:	89b9      	ldrh	r1, [r7, #12]
 8002888:	8ab8      	ldrh	r0, [r7, #20]
 800288a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800288e:	9300      	str	r3, [sp, #0]
 8002890:	4613      	mov	r3, r2
 8002892:	f240 2212 	movw	r2, #530	; 0x212
 8002896:	f7ff fd0b 	bl	80022b0 <UB_VGA_DrawBitmap>
 800289a:	e000      	b.n	800289e <UB_VGA_writeText+0x476>
            				default: break;
 800289c:	bf00      	nop
            			break;
 800289e:	e02e      	b.n	80028fe <UB_VGA_writeText+0x4d6>
                		switch(fontstyle)
 80028a0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80028a4:	2b03      	cmp	r3, #3
 80028a6:	d01c      	beq.n	80028e2 <UB_VGA_writeText+0x4ba>
 80028a8:	2b03      	cmp	r3, #3
 80028aa:	dc26      	bgt.n	80028fa <UB_VGA_writeText+0x4d2>
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d002      	beq.n	80028b6 <UB_VGA_writeText+0x48e>
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d00b      	beq.n	80028cc <UB_VGA_writeText+0x4a4>
                			default: break;
 80028b4:	e021      	b.n	80028fa <UB_VGA_writeText+0x4d2>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 4, color, fontsize); break;
 80028b6:	7afa      	ldrb	r2, [r7, #11]
 80028b8:	89b9      	ldrh	r1, [r7, #12]
 80028ba:	8ab8      	ldrh	r0, [r7, #20]
 80028bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80028c0:	9300      	str	r3, [sp, #0]
 80028c2:	4613      	mov	r3, r2
 80028c4:	2204      	movs	r2, #4
 80028c6:	f7ff fcf3 	bl	80022b0 <UB_VGA_DrawBitmap>
 80028ca:	e017      	b.n	80028fc <UB_VGA_writeText+0x4d4>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 30, color, fontsize); break;
 80028cc:	7afa      	ldrb	r2, [r7, #11]
 80028ce:	89b9      	ldrh	r1, [r7, #12]
 80028d0:	8ab8      	ldrh	r0, [r7, #20]
 80028d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80028d6:	9300      	str	r3, [sp, #0]
 80028d8:	4613      	mov	r3, r2
 80028da:	221e      	movs	r2, #30
 80028dc:	f7ff fce8 	bl	80022b0 <UB_VGA_DrawBitmap>
 80028e0:	e00c      	b.n	80028fc <UB_VGA_writeText+0x4d4>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 504, color, fontsize); break;
 80028e2:	7afa      	ldrb	r2, [r7, #11]
 80028e4:	89b9      	ldrh	r1, [r7, #12]
 80028e6:	8ab8      	ldrh	r0, [r7, #20]
 80028e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80028ec:	9300      	str	r3, [sp, #0]
 80028ee:	4613      	mov	r3, r2
 80028f0:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80028f4:	f7ff fcdc 	bl	80022b0 <UB_VGA_DrawBitmap>
 80028f8:	e000      	b.n	80028fc <UB_VGA_writeText+0x4d4>
                			default: break;
 80028fa:	bf00      	nop
                	default: break;
 80028fc:	bf00      	nop
            	}
                break;
 80028fe:	f001 b869 	b.w	80039d4 <UB_VGA_writeText+0x15ac>
            case 'f':
            	switch(fontname)
 8002902:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d002      	beq.n	8002910 <UB_VGA_writeText+0x4e8>
 800290a:	2b02      	cmp	r3, #2
 800290c:	d02f      	beq.n	800296e <UB_VGA_writeText+0x546>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 5, color, fontsize); break;
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 31, color, fontsize); break;
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 505, color, fontsize); break;
                			default: break;
                		}
                	default: break;
 800290e:	e05c      	b.n	80029ca <UB_VGA_writeText+0x5a2>
            			switch(fontstyle)
 8002910:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002914:	2b03      	cmp	r3, #3
 8002916:	d01c      	beq.n	8002952 <UB_VGA_writeText+0x52a>
 8002918:	2b03      	cmp	r3, #3
 800291a:	dc26      	bgt.n	800296a <UB_VGA_writeText+0x542>
 800291c:	2b01      	cmp	r3, #1
 800291e:	d002      	beq.n	8002926 <UB_VGA_writeText+0x4fe>
 8002920:	2b02      	cmp	r3, #2
 8002922:	d00b      	beq.n	800293c <UB_VGA_writeText+0x514>
            				default: break;
 8002924:	e021      	b.n	800296a <UB_VGA_writeText+0x542>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'f', color, fontsize); break;
 8002926:	7afa      	ldrb	r2, [r7, #11]
 8002928:	89b9      	ldrh	r1, [r7, #12]
 800292a:	8ab8      	ldrh	r0, [r7, #20]
 800292c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	4613      	mov	r3, r2
 8002934:	2266      	movs	r2, #102	; 0x66
 8002936:	f7ff fcbb 	bl	80022b0 <UB_VGA_DrawBitmap>
 800293a:	e017      	b.n	800296c <UB_VGA_writeText+0x544>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'F', color, fontsize); break;
 800293c:	7afa      	ldrb	r2, [r7, #11]
 800293e:	89b9      	ldrh	r1, [r7, #12]
 8002940:	8ab8      	ldrh	r0, [r7, #20]
 8002942:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002946:	9300      	str	r3, [sp, #0]
 8002948:	4613      	mov	r3, r2
 800294a:	2246      	movs	r2, #70	; 0x46
 800294c:	f7ff fcb0 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002950:	e00c      	b.n	800296c <UB_VGA_writeText+0x544>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 531, color, fontsize); break;
 8002952:	7afa      	ldrb	r2, [r7, #11]
 8002954:	89b9      	ldrh	r1, [r7, #12]
 8002956:	8ab8      	ldrh	r0, [r7, #20]
 8002958:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	4613      	mov	r3, r2
 8002960:	f240 2213 	movw	r2, #531	; 0x213
 8002964:	f7ff fca4 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002968:	e000      	b.n	800296c <UB_VGA_writeText+0x544>
            				default: break;
 800296a:	bf00      	nop
            			break;
 800296c:	e02e      	b.n	80029cc <UB_VGA_writeText+0x5a4>
                		switch(fontstyle)
 800296e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002972:	2b03      	cmp	r3, #3
 8002974:	d01c      	beq.n	80029b0 <UB_VGA_writeText+0x588>
 8002976:	2b03      	cmp	r3, #3
 8002978:	dc26      	bgt.n	80029c8 <UB_VGA_writeText+0x5a0>
 800297a:	2b01      	cmp	r3, #1
 800297c:	d002      	beq.n	8002984 <UB_VGA_writeText+0x55c>
 800297e:	2b02      	cmp	r3, #2
 8002980:	d00b      	beq.n	800299a <UB_VGA_writeText+0x572>
                			default: break;
 8002982:	e021      	b.n	80029c8 <UB_VGA_writeText+0x5a0>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 5, color, fontsize); break;
 8002984:	7afa      	ldrb	r2, [r7, #11]
 8002986:	89b9      	ldrh	r1, [r7, #12]
 8002988:	8ab8      	ldrh	r0, [r7, #20]
 800298a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800298e:	9300      	str	r3, [sp, #0]
 8002990:	4613      	mov	r3, r2
 8002992:	2205      	movs	r2, #5
 8002994:	f7ff fc8c 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002998:	e017      	b.n	80029ca <UB_VGA_writeText+0x5a2>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 31, color, fontsize); break;
 800299a:	7afa      	ldrb	r2, [r7, #11]
 800299c:	89b9      	ldrh	r1, [r7, #12]
 800299e:	8ab8      	ldrh	r0, [r7, #20]
 80029a0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	4613      	mov	r3, r2
 80029a8:	221f      	movs	r2, #31
 80029aa:	f7ff fc81 	bl	80022b0 <UB_VGA_DrawBitmap>
 80029ae:	e00c      	b.n	80029ca <UB_VGA_writeText+0x5a2>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 505, color, fontsize); break;
 80029b0:	7afa      	ldrb	r2, [r7, #11]
 80029b2:	89b9      	ldrh	r1, [r7, #12]
 80029b4:	8ab8      	ldrh	r0, [r7, #20]
 80029b6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	4613      	mov	r3, r2
 80029be:	f240 12f9 	movw	r2, #505	; 0x1f9
 80029c2:	f7ff fc75 	bl	80022b0 <UB_VGA_DrawBitmap>
 80029c6:	e000      	b.n	80029ca <UB_VGA_writeText+0x5a2>
                			default: break;
 80029c8:	bf00      	nop
                	default: break;
 80029ca:	bf00      	nop
            	}
                break;
 80029cc:	f001 b802 	b.w	80039d4 <UB_VGA_writeText+0x15ac>
            case 'g':
            	switch(fontname)
 80029d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d002      	beq.n	80029de <UB_VGA_writeText+0x5b6>
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d02f      	beq.n	8002a3c <UB_VGA_writeText+0x614>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 6, color, fontsize); break;
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 32, color, fontsize); break;
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 506, color, fontsize); break;
                			default: break;
                		}
                	default: break;
 80029dc:	e05c      	b.n	8002a98 <UB_VGA_writeText+0x670>
            			switch(fontstyle)
 80029de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80029e2:	2b03      	cmp	r3, #3
 80029e4:	d01c      	beq.n	8002a20 <UB_VGA_writeText+0x5f8>
 80029e6:	2b03      	cmp	r3, #3
 80029e8:	dc26      	bgt.n	8002a38 <UB_VGA_writeText+0x610>
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d002      	beq.n	80029f4 <UB_VGA_writeText+0x5cc>
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d00b      	beq.n	8002a0a <UB_VGA_writeText+0x5e2>
            				default: break;
 80029f2:	e021      	b.n	8002a38 <UB_VGA_writeText+0x610>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'g', color, fontsize); break;
 80029f4:	7afa      	ldrb	r2, [r7, #11]
 80029f6:	89b9      	ldrh	r1, [r7, #12]
 80029f8:	8ab8      	ldrh	r0, [r7, #20]
 80029fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80029fe:	9300      	str	r3, [sp, #0]
 8002a00:	4613      	mov	r3, r2
 8002a02:	2267      	movs	r2, #103	; 0x67
 8002a04:	f7ff fc54 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002a08:	e017      	b.n	8002a3a <UB_VGA_writeText+0x612>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'G', color, fontsize); break;
 8002a0a:	7afa      	ldrb	r2, [r7, #11]
 8002a0c:	89b9      	ldrh	r1, [r7, #12]
 8002a0e:	8ab8      	ldrh	r0, [r7, #20]
 8002a10:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	4613      	mov	r3, r2
 8002a18:	2247      	movs	r2, #71	; 0x47
 8002a1a:	f7ff fc49 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002a1e:	e00c      	b.n	8002a3a <UB_VGA_writeText+0x612>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 532, color, fontsize); break;
 8002a20:	7afa      	ldrb	r2, [r7, #11]
 8002a22:	89b9      	ldrh	r1, [r7, #12]
 8002a24:	8ab8      	ldrh	r0, [r7, #20]
 8002a26:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002a2a:	9300      	str	r3, [sp, #0]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	f44f 7205 	mov.w	r2, #532	; 0x214
 8002a32:	f7ff fc3d 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002a36:	e000      	b.n	8002a3a <UB_VGA_writeText+0x612>
            				default: break;
 8002a38:	bf00      	nop
            			break;
 8002a3a:	e02e      	b.n	8002a9a <UB_VGA_writeText+0x672>
                		switch(fontstyle)
 8002a3c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002a40:	2b03      	cmp	r3, #3
 8002a42:	d01c      	beq.n	8002a7e <UB_VGA_writeText+0x656>
 8002a44:	2b03      	cmp	r3, #3
 8002a46:	dc26      	bgt.n	8002a96 <UB_VGA_writeText+0x66e>
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d002      	beq.n	8002a52 <UB_VGA_writeText+0x62a>
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d00b      	beq.n	8002a68 <UB_VGA_writeText+0x640>
                			default: break;
 8002a50:	e021      	b.n	8002a96 <UB_VGA_writeText+0x66e>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 6, color, fontsize); break;
 8002a52:	7afa      	ldrb	r2, [r7, #11]
 8002a54:	89b9      	ldrh	r1, [r7, #12]
 8002a56:	8ab8      	ldrh	r0, [r7, #20]
 8002a58:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002a5c:	9300      	str	r3, [sp, #0]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	2206      	movs	r2, #6
 8002a62:	f7ff fc25 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002a66:	e017      	b.n	8002a98 <UB_VGA_writeText+0x670>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 32, color, fontsize); break;
 8002a68:	7afa      	ldrb	r2, [r7, #11]
 8002a6a:	89b9      	ldrh	r1, [r7, #12]
 8002a6c:	8ab8      	ldrh	r0, [r7, #20]
 8002a6e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002a72:	9300      	str	r3, [sp, #0]
 8002a74:	4613      	mov	r3, r2
 8002a76:	2220      	movs	r2, #32
 8002a78:	f7ff fc1a 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002a7c:	e00c      	b.n	8002a98 <UB_VGA_writeText+0x670>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 506, color, fontsize); break;
 8002a7e:	7afa      	ldrb	r2, [r7, #11]
 8002a80:	89b9      	ldrh	r1, [r7, #12]
 8002a82:	8ab8      	ldrh	r0, [r7, #20]
 8002a84:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002a88:	9300      	str	r3, [sp, #0]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	f44f 72fd 	mov.w	r2, #506	; 0x1fa
 8002a90:	f7ff fc0e 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002a94:	e000      	b.n	8002a98 <UB_VGA_writeText+0x670>
                			default: break;
 8002a96:	bf00      	nop
                	default: break;
 8002a98:	bf00      	nop
            	}
                break;
 8002a9a:	f000 bf9b 	b.w	80039d4 <UB_VGA_writeText+0x15ac>
            case 'h':
            	switch(fontname)
 8002a9e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d002      	beq.n	8002aac <UB_VGA_writeText+0x684>
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d02f      	beq.n	8002b0a <UB_VGA_writeText+0x6e2>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 7, color, fontsize); break;
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 33, color, fontsize); break;
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 507, color, fontsize); break;
                			default: break;
                		}
                	default: break;
 8002aaa:	e05c      	b.n	8002b66 <UB_VGA_writeText+0x73e>
            			switch(fontstyle)
 8002aac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002ab0:	2b03      	cmp	r3, #3
 8002ab2:	d01c      	beq.n	8002aee <UB_VGA_writeText+0x6c6>
 8002ab4:	2b03      	cmp	r3, #3
 8002ab6:	dc26      	bgt.n	8002b06 <UB_VGA_writeText+0x6de>
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d002      	beq.n	8002ac2 <UB_VGA_writeText+0x69a>
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d00b      	beq.n	8002ad8 <UB_VGA_writeText+0x6b0>
            				default: break;
 8002ac0:	e021      	b.n	8002b06 <UB_VGA_writeText+0x6de>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'h', color, fontsize); break;
 8002ac2:	7afa      	ldrb	r2, [r7, #11]
 8002ac4:	89b9      	ldrh	r1, [r7, #12]
 8002ac6:	8ab8      	ldrh	r0, [r7, #20]
 8002ac8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002acc:	9300      	str	r3, [sp, #0]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	2268      	movs	r2, #104	; 0x68
 8002ad2:	f7ff fbed 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002ad6:	e017      	b.n	8002b08 <UB_VGA_writeText+0x6e0>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'H', color, fontsize); break;
 8002ad8:	7afa      	ldrb	r2, [r7, #11]
 8002ada:	89b9      	ldrh	r1, [r7, #12]
 8002adc:	8ab8      	ldrh	r0, [r7, #20]
 8002ade:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	2248      	movs	r2, #72	; 0x48
 8002ae8:	f7ff fbe2 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002aec:	e00c      	b.n	8002b08 <UB_VGA_writeText+0x6e0>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 533, color, fontsize); break;
 8002aee:	7afa      	ldrb	r2, [r7, #11]
 8002af0:	89b9      	ldrh	r1, [r7, #12]
 8002af2:	8ab8      	ldrh	r0, [r7, #20]
 8002af4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	4613      	mov	r3, r2
 8002afc:	f240 2215 	movw	r2, #533	; 0x215
 8002b00:	f7ff fbd6 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002b04:	e000      	b.n	8002b08 <UB_VGA_writeText+0x6e0>
            				default: break;
 8002b06:	bf00      	nop
            			break;
 8002b08:	e02e      	b.n	8002b68 <UB_VGA_writeText+0x740>
                		switch(fontstyle)
 8002b0a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002b0e:	2b03      	cmp	r3, #3
 8002b10:	d01c      	beq.n	8002b4c <UB_VGA_writeText+0x724>
 8002b12:	2b03      	cmp	r3, #3
 8002b14:	dc26      	bgt.n	8002b64 <UB_VGA_writeText+0x73c>
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d002      	beq.n	8002b20 <UB_VGA_writeText+0x6f8>
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d00b      	beq.n	8002b36 <UB_VGA_writeText+0x70e>
                			default: break;
 8002b1e:	e021      	b.n	8002b64 <UB_VGA_writeText+0x73c>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 7, color, fontsize); break;
 8002b20:	7afa      	ldrb	r2, [r7, #11]
 8002b22:	89b9      	ldrh	r1, [r7, #12]
 8002b24:	8ab8      	ldrh	r0, [r7, #20]
 8002b26:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	2207      	movs	r2, #7
 8002b30:	f7ff fbbe 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002b34:	e017      	b.n	8002b66 <UB_VGA_writeText+0x73e>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 33, color, fontsize); break;
 8002b36:	7afa      	ldrb	r2, [r7, #11]
 8002b38:	89b9      	ldrh	r1, [r7, #12]
 8002b3a:	8ab8      	ldrh	r0, [r7, #20]
 8002b3c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002b40:	9300      	str	r3, [sp, #0]
 8002b42:	4613      	mov	r3, r2
 8002b44:	2221      	movs	r2, #33	; 0x21
 8002b46:	f7ff fbb3 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002b4a:	e00c      	b.n	8002b66 <UB_VGA_writeText+0x73e>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 507, color, fontsize); break;
 8002b4c:	7afa      	ldrb	r2, [r7, #11]
 8002b4e:	89b9      	ldrh	r1, [r7, #12]
 8002b50:	8ab8      	ldrh	r0, [r7, #20]
 8002b52:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	f240 12fb 	movw	r2, #507	; 0x1fb
 8002b5e:	f7ff fba7 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002b62:	e000      	b.n	8002b66 <UB_VGA_writeText+0x73e>
                			default: break;
 8002b64:	bf00      	nop
                	default: break;
 8002b66:	bf00      	nop
            	}
                break;
 8002b68:	f000 bf34 	b.w	80039d4 <UB_VGA_writeText+0x15ac>
            case 'i':
            	switch(fontname)
 8002b6c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d002      	beq.n	8002b7a <UB_VGA_writeText+0x752>
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d02f      	beq.n	8002bd8 <UB_VGA_writeText+0x7b0>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 8, color, fontsize); break;
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 34, color, fontsize); break;
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 508, color, fontsize); break;
                			default: break;
                		}
                	default: break;
 8002b78:	e05c      	b.n	8002c34 <UB_VGA_writeText+0x80c>
            			switch(fontstyle)
 8002b7a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002b7e:	2b03      	cmp	r3, #3
 8002b80:	d01c      	beq.n	8002bbc <UB_VGA_writeText+0x794>
 8002b82:	2b03      	cmp	r3, #3
 8002b84:	dc26      	bgt.n	8002bd4 <UB_VGA_writeText+0x7ac>
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d002      	beq.n	8002b90 <UB_VGA_writeText+0x768>
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d00b      	beq.n	8002ba6 <UB_VGA_writeText+0x77e>
            				default: break;
 8002b8e:	e021      	b.n	8002bd4 <UB_VGA_writeText+0x7ac>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'i', color, fontsize); break;
 8002b90:	7afa      	ldrb	r2, [r7, #11]
 8002b92:	89b9      	ldrh	r1, [r7, #12]
 8002b94:	8ab8      	ldrh	r0, [r7, #20]
 8002b96:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002b9a:	9300      	str	r3, [sp, #0]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	2269      	movs	r2, #105	; 0x69
 8002ba0:	f7ff fb86 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002ba4:	e017      	b.n	8002bd6 <UB_VGA_writeText+0x7ae>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'I', color, fontsize); break;
 8002ba6:	7afa      	ldrb	r2, [r7, #11]
 8002ba8:	89b9      	ldrh	r1, [r7, #12]
 8002baa:	8ab8      	ldrh	r0, [r7, #20]
 8002bac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002bb0:	9300      	str	r3, [sp, #0]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	2249      	movs	r2, #73	; 0x49
 8002bb6:	f7ff fb7b 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002bba:	e00c      	b.n	8002bd6 <UB_VGA_writeText+0x7ae>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 534, color, fontsize); break;
 8002bbc:	7afa      	ldrb	r2, [r7, #11]
 8002bbe:	89b9      	ldrh	r1, [r7, #12]
 8002bc0:	8ab8      	ldrh	r0, [r7, #20]
 8002bc2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002bc6:	9300      	str	r3, [sp, #0]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	f240 2216 	movw	r2, #534	; 0x216
 8002bce:	f7ff fb6f 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002bd2:	e000      	b.n	8002bd6 <UB_VGA_writeText+0x7ae>
            				default: break;
 8002bd4:	bf00      	nop
            			break;
 8002bd6:	e02e      	b.n	8002c36 <UB_VGA_writeText+0x80e>
                		switch(fontstyle)
 8002bd8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002bdc:	2b03      	cmp	r3, #3
 8002bde:	d01c      	beq.n	8002c1a <UB_VGA_writeText+0x7f2>
 8002be0:	2b03      	cmp	r3, #3
 8002be2:	dc26      	bgt.n	8002c32 <UB_VGA_writeText+0x80a>
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d002      	beq.n	8002bee <UB_VGA_writeText+0x7c6>
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d00b      	beq.n	8002c04 <UB_VGA_writeText+0x7dc>
                			default: break;
 8002bec:	e021      	b.n	8002c32 <UB_VGA_writeText+0x80a>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 8, color, fontsize); break;
 8002bee:	7afa      	ldrb	r2, [r7, #11]
 8002bf0:	89b9      	ldrh	r1, [r7, #12]
 8002bf2:	8ab8      	ldrh	r0, [r7, #20]
 8002bf4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002bf8:	9300      	str	r3, [sp, #0]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	2208      	movs	r2, #8
 8002bfe:	f7ff fb57 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002c02:	e017      	b.n	8002c34 <UB_VGA_writeText+0x80c>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 34, color, fontsize); break;
 8002c04:	7afa      	ldrb	r2, [r7, #11]
 8002c06:	89b9      	ldrh	r1, [r7, #12]
 8002c08:	8ab8      	ldrh	r0, [r7, #20]
 8002c0a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	4613      	mov	r3, r2
 8002c12:	2222      	movs	r2, #34	; 0x22
 8002c14:	f7ff fb4c 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002c18:	e00c      	b.n	8002c34 <UB_VGA_writeText+0x80c>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 508, color, fontsize); break;
 8002c1a:	7afa      	ldrb	r2, [r7, #11]
 8002c1c:	89b9      	ldrh	r1, [r7, #12]
 8002c1e:	8ab8      	ldrh	r0, [r7, #20]
 8002c20:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002c24:	9300      	str	r3, [sp, #0]
 8002c26:	4613      	mov	r3, r2
 8002c28:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 8002c2c:	f7ff fb40 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002c30:	e000      	b.n	8002c34 <UB_VGA_writeText+0x80c>
                			default: break;
 8002c32:	bf00      	nop
                	default: break;
 8002c34:	bf00      	nop
            	}
                break;
 8002c36:	f000 becd 	b.w	80039d4 <UB_VGA_writeText+0x15ac>
            case 'j':
            	switch(fontname)
 8002c3a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d002      	beq.n	8002c48 <UB_VGA_writeText+0x820>
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d02f      	beq.n	8002ca6 <UB_VGA_writeText+0x87e>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 9, color, fontsize); break;
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 35, color, fontsize); break;
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 509, color, fontsize); break;
                			default: break;
                		}
                	default: break;
 8002c46:	e05c      	b.n	8002d02 <UB_VGA_writeText+0x8da>
            			switch(fontstyle)
 8002c48:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002c4c:	2b03      	cmp	r3, #3
 8002c4e:	d01c      	beq.n	8002c8a <UB_VGA_writeText+0x862>
 8002c50:	2b03      	cmp	r3, #3
 8002c52:	dc26      	bgt.n	8002ca2 <UB_VGA_writeText+0x87a>
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d002      	beq.n	8002c5e <UB_VGA_writeText+0x836>
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d00b      	beq.n	8002c74 <UB_VGA_writeText+0x84c>
            				default: break;
 8002c5c:	e021      	b.n	8002ca2 <UB_VGA_writeText+0x87a>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'j', color, fontsize); break;
 8002c5e:	7afa      	ldrb	r2, [r7, #11]
 8002c60:	89b9      	ldrh	r1, [r7, #12]
 8002c62:	8ab8      	ldrh	r0, [r7, #20]
 8002c64:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002c68:	9300      	str	r3, [sp, #0]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	226a      	movs	r2, #106	; 0x6a
 8002c6e:	f7ff fb1f 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002c72:	e017      	b.n	8002ca4 <UB_VGA_writeText+0x87c>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'J', color, fontsize); break;
 8002c74:	7afa      	ldrb	r2, [r7, #11]
 8002c76:	89b9      	ldrh	r1, [r7, #12]
 8002c78:	8ab8      	ldrh	r0, [r7, #20]
 8002c7a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	4613      	mov	r3, r2
 8002c82:	224a      	movs	r2, #74	; 0x4a
 8002c84:	f7ff fb14 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002c88:	e00c      	b.n	8002ca4 <UB_VGA_writeText+0x87c>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 535, color, fontsize); break;
 8002c8a:	7afa      	ldrb	r2, [r7, #11]
 8002c8c:	89b9      	ldrh	r1, [r7, #12]
 8002c8e:	8ab8      	ldrh	r0, [r7, #20]
 8002c90:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002c94:	9300      	str	r3, [sp, #0]
 8002c96:	4613      	mov	r3, r2
 8002c98:	f240 2217 	movw	r2, #535	; 0x217
 8002c9c:	f7ff fb08 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002ca0:	e000      	b.n	8002ca4 <UB_VGA_writeText+0x87c>
            				default: break;
 8002ca2:	bf00      	nop
            			break;
 8002ca4:	e02e      	b.n	8002d04 <UB_VGA_writeText+0x8dc>
                		switch(fontstyle)
 8002ca6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002caa:	2b03      	cmp	r3, #3
 8002cac:	d01c      	beq.n	8002ce8 <UB_VGA_writeText+0x8c0>
 8002cae:	2b03      	cmp	r3, #3
 8002cb0:	dc26      	bgt.n	8002d00 <UB_VGA_writeText+0x8d8>
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d002      	beq.n	8002cbc <UB_VGA_writeText+0x894>
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d00b      	beq.n	8002cd2 <UB_VGA_writeText+0x8aa>
                			default: break;
 8002cba:	e021      	b.n	8002d00 <UB_VGA_writeText+0x8d8>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 9, color, fontsize); break;
 8002cbc:	7afa      	ldrb	r2, [r7, #11]
 8002cbe:	89b9      	ldrh	r1, [r7, #12]
 8002cc0:	8ab8      	ldrh	r0, [r7, #20]
 8002cc2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002cc6:	9300      	str	r3, [sp, #0]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	2209      	movs	r2, #9
 8002ccc:	f7ff faf0 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002cd0:	e017      	b.n	8002d02 <UB_VGA_writeText+0x8da>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 35, color, fontsize); break;
 8002cd2:	7afa      	ldrb	r2, [r7, #11]
 8002cd4:	89b9      	ldrh	r1, [r7, #12]
 8002cd6:	8ab8      	ldrh	r0, [r7, #20]
 8002cd8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	2223      	movs	r2, #35	; 0x23
 8002ce2:	f7ff fae5 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002ce6:	e00c      	b.n	8002d02 <UB_VGA_writeText+0x8da>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 509, color, fontsize); break;
 8002ce8:	7afa      	ldrb	r2, [r7, #11]
 8002cea:	89b9      	ldrh	r1, [r7, #12]
 8002cec:	8ab8      	ldrh	r0, [r7, #20]
 8002cee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002cf2:	9300      	str	r3, [sp, #0]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	f240 12fd 	movw	r2, #509	; 0x1fd
 8002cfa:	f7ff fad9 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002cfe:	e000      	b.n	8002d02 <UB_VGA_writeText+0x8da>
                			default: break;
 8002d00:	bf00      	nop
                	default: break;
 8002d02:	bf00      	nop
            	}
                break;
 8002d04:	f000 be66 	b.w	80039d4 <UB_VGA_writeText+0x15ac>
            case 'k':
            	switch(fontname)
 8002d08:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d002      	beq.n	8002d16 <UB_VGA_writeText+0x8ee>
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d02f      	beq.n	8002d74 <UB_VGA_writeText+0x94c>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 10, color, fontsize); break;
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 36, color, fontsize); break;
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 510, color, fontsize); break;
                			default: break;
                		}
                	default: break;
 8002d14:	e05c      	b.n	8002dd0 <UB_VGA_writeText+0x9a8>
            			switch(fontstyle)
 8002d16:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002d1a:	2b03      	cmp	r3, #3
 8002d1c:	d01c      	beq.n	8002d58 <UB_VGA_writeText+0x930>
 8002d1e:	2b03      	cmp	r3, #3
 8002d20:	dc26      	bgt.n	8002d70 <UB_VGA_writeText+0x948>
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d002      	beq.n	8002d2c <UB_VGA_writeText+0x904>
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d00b      	beq.n	8002d42 <UB_VGA_writeText+0x91a>
            				default: break;
 8002d2a:	e021      	b.n	8002d70 <UB_VGA_writeText+0x948>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'k', color, fontsize); break;
 8002d2c:	7afa      	ldrb	r2, [r7, #11]
 8002d2e:	89b9      	ldrh	r1, [r7, #12]
 8002d30:	8ab8      	ldrh	r0, [r7, #20]
 8002d32:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002d36:	9300      	str	r3, [sp, #0]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	226b      	movs	r2, #107	; 0x6b
 8002d3c:	f7ff fab8 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002d40:	e017      	b.n	8002d72 <UB_VGA_writeText+0x94a>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'K', color, fontsize); break;
 8002d42:	7afa      	ldrb	r2, [r7, #11]
 8002d44:	89b9      	ldrh	r1, [r7, #12]
 8002d46:	8ab8      	ldrh	r0, [r7, #20]
 8002d48:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	224b      	movs	r2, #75	; 0x4b
 8002d52:	f7ff faad 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002d56:	e00c      	b.n	8002d72 <UB_VGA_writeText+0x94a>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 536, color, fontsize); break;
 8002d58:	7afa      	ldrb	r2, [r7, #11]
 8002d5a:	89b9      	ldrh	r1, [r7, #12]
 8002d5c:	8ab8      	ldrh	r0, [r7, #20]
 8002d5e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	4613      	mov	r3, r2
 8002d66:	f44f 7206 	mov.w	r2, #536	; 0x218
 8002d6a:	f7ff faa1 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002d6e:	e000      	b.n	8002d72 <UB_VGA_writeText+0x94a>
            				default: break;
 8002d70:	bf00      	nop
            			break;
 8002d72:	e02e      	b.n	8002dd2 <UB_VGA_writeText+0x9aa>
                		switch(fontstyle)
 8002d74:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002d78:	2b03      	cmp	r3, #3
 8002d7a:	d01c      	beq.n	8002db6 <UB_VGA_writeText+0x98e>
 8002d7c:	2b03      	cmp	r3, #3
 8002d7e:	dc26      	bgt.n	8002dce <UB_VGA_writeText+0x9a6>
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d002      	beq.n	8002d8a <UB_VGA_writeText+0x962>
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d00b      	beq.n	8002da0 <UB_VGA_writeText+0x978>
                			default: break;
 8002d88:	e021      	b.n	8002dce <UB_VGA_writeText+0x9a6>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 10, color, fontsize); break;
 8002d8a:	7afa      	ldrb	r2, [r7, #11]
 8002d8c:	89b9      	ldrh	r1, [r7, #12]
 8002d8e:	8ab8      	ldrh	r0, [r7, #20]
 8002d90:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002d94:	9300      	str	r3, [sp, #0]
 8002d96:	4613      	mov	r3, r2
 8002d98:	220a      	movs	r2, #10
 8002d9a:	f7ff fa89 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002d9e:	e017      	b.n	8002dd0 <UB_VGA_writeText+0x9a8>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 36, color, fontsize); break;
 8002da0:	7afa      	ldrb	r2, [r7, #11]
 8002da2:	89b9      	ldrh	r1, [r7, #12]
 8002da4:	8ab8      	ldrh	r0, [r7, #20]
 8002da6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002daa:	9300      	str	r3, [sp, #0]
 8002dac:	4613      	mov	r3, r2
 8002dae:	2224      	movs	r2, #36	; 0x24
 8002db0:	f7ff fa7e 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002db4:	e00c      	b.n	8002dd0 <UB_VGA_writeText+0x9a8>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 510, color, fontsize); break;
 8002db6:	7afa      	ldrb	r2, [r7, #11]
 8002db8:	89b9      	ldrh	r1, [r7, #12]
 8002dba:	8ab8      	ldrh	r0, [r7, #20]
 8002dbc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 8002dc8:	f7ff fa72 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002dcc:	e000      	b.n	8002dd0 <UB_VGA_writeText+0x9a8>
                			default: break;
 8002dce:	bf00      	nop
                	default: break;
 8002dd0:	bf00      	nop
            	}
                break;
 8002dd2:	f000 bdff 	b.w	80039d4 <UB_VGA_writeText+0x15ac>
            case 'l':
            	switch(fontname)
 8002dd6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d002      	beq.n	8002de4 <UB_VGA_writeText+0x9bc>
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d02f      	beq.n	8002e42 <UB_VGA_writeText+0xa1a>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 11, color, fontsize); break;
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 37, color, fontsize); break;
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 511, color, fontsize); break;
                			default: break;
                		}
                	default: break;
 8002de2:	e05c      	b.n	8002e9e <UB_VGA_writeText+0xa76>
            			switch(fontstyle)
 8002de4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002de8:	2b03      	cmp	r3, #3
 8002dea:	d01c      	beq.n	8002e26 <UB_VGA_writeText+0x9fe>
 8002dec:	2b03      	cmp	r3, #3
 8002dee:	dc26      	bgt.n	8002e3e <UB_VGA_writeText+0xa16>
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d002      	beq.n	8002dfa <UB_VGA_writeText+0x9d2>
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d00b      	beq.n	8002e10 <UB_VGA_writeText+0x9e8>
            				default: break;
 8002df8:	e021      	b.n	8002e3e <UB_VGA_writeText+0xa16>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'l', color, fontsize); break;
 8002dfa:	7afa      	ldrb	r2, [r7, #11]
 8002dfc:	89b9      	ldrh	r1, [r7, #12]
 8002dfe:	8ab8      	ldrh	r0, [r7, #20]
 8002e00:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	4613      	mov	r3, r2
 8002e08:	226c      	movs	r2, #108	; 0x6c
 8002e0a:	f7ff fa51 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002e0e:	e017      	b.n	8002e40 <UB_VGA_writeText+0xa18>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'L', color, fontsize); break;
 8002e10:	7afa      	ldrb	r2, [r7, #11]
 8002e12:	89b9      	ldrh	r1, [r7, #12]
 8002e14:	8ab8      	ldrh	r0, [r7, #20]
 8002e16:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	224c      	movs	r2, #76	; 0x4c
 8002e20:	f7ff fa46 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002e24:	e00c      	b.n	8002e40 <UB_VGA_writeText+0xa18>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 537, color, fontsize); break;
 8002e26:	7afa      	ldrb	r2, [r7, #11]
 8002e28:	89b9      	ldrh	r1, [r7, #12]
 8002e2a:	8ab8      	ldrh	r0, [r7, #20]
 8002e2c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	4613      	mov	r3, r2
 8002e34:	f240 2219 	movw	r2, #537	; 0x219
 8002e38:	f7ff fa3a 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002e3c:	e000      	b.n	8002e40 <UB_VGA_writeText+0xa18>
            				default: break;
 8002e3e:	bf00      	nop
            			break;
 8002e40:	e02e      	b.n	8002ea0 <UB_VGA_writeText+0xa78>
                		switch(fontstyle)
 8002e42:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002e46:	2b03      	cmp	r3, #3
 8002e48:	d01c      	beq.n	8002e84 <UB_VGA_writeText+0xa5c>
 8002e4a:	2b03      	cmp	r3, #3
 8002e4c:	dc26      	bgt.n	8002e9c <UB_VGA_writeText+0xa74>
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d002      	beq.n	8002e58 <UB_VGA_writeText+0xa30>
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d00b      	beq.n	8002e6e <UB_VGA_writeText+0xa46>
                			default: break;
 8002e56:	e021      	b.n	8002e9c <UB_VGA_writeText+0xa74>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 11, color, fontsize); break;
 8002e58:	7afa      	ldrb	r2, [r7, #11]
 8002e5a:	89b9      	ldrh	r1, [r7, #12]
 8002e5c:	8ab8      	ldrh	r0, [r7, #20]
 8002e5e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002e62:	9300      	str	r3, [sp, #0]
 8002e64:	4613      	mov	r3, r2
 8002e66:	220b      	movs	r2, #11
 8002e68:	f7ff fa22 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002e6c:	e017      	b.n	8002e9e <UB_VGA_writeText+0xa76>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 37, color, fontsize); break;
 8002e6e:	7afa      	ldrb	r2, [r7, #11]
 8002e70:	89b9      	ldrh	r1, [r7, #12]
 8002e72:	8ab8      	ldrh	r0, [r7, #20]
 8002e74:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002e78:	9300      	str	r3, [sp, #0]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	2225      	movs	r2, #37	; 0x25
 8002e7e:	f7ff fa17 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002e82:	e00c      	b.n	8002e9e <UB_VGA_writeText+0xa76>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 511, color, fontsize); break;
 8002e84:	7afa      	ldrb	r2, [r7, #11]
 8002e86:	89b9      	ldrh	r1, [r7, #12]
 8002e88:	8ab8      	ldrh	r0, [r7, #20]
 8002e8a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002e8e:	9300      	str	r3, [sp, #0]
 8002e90:	4613      	mov	r3, r2
 8002e92:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002e96:	f7ff fa0b 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002e9a:	e000      	b.n	8002e9e <UB_VGA_writeText+0xa76>
                			default: break;
 8002e9c:	bf00      	nop
                	default: break;
 8002e9e:	bf00      	nop
            	}
                break;
 8002ea0:	f000 bd98 	b.w	80039d4 <UB_VGA_writeText+0x15ac>
            case 'm':
            	switch(fontname)
 8002ea4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d002      	beq.n	8002eb2 <UB_VGA_writeText+0xa8a>
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d02f      	beq.n	8002f10 <UB_VGA_writeText+0xae8>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 12, color, fontsize); break;
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 38, color, fontsize); break;
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 512, color, fontsize); break;
                			default: break;
                		}
                	default: break;
 8002eb0:	e05c      	b.n	8002f6c <UB_VGA_writeText+0xb44>
            			switch(fontstyle)
 8002eb2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002eb6:	2b03      	cmp	r3, #3
 8002eb8:	d01c      	beq.n	8002ef4 <UB_VGA_writeText+0xacc>
 8002eba:	2b03      	cmp	r3, #3
 8002ebc:	dc26      	bgt.n	8002f0c <UB_VGA_writeText+0xae4>
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d002      	beq.n	8002ec8 <UB_VGA_writeText+0xaa0>
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d00b      	beq.n	8002ede <UB_VGA_writeText+0xab6>
            				default: break;
 8002ec6:	e021      	b.n	8002f0c <UB_VGA_writeText+0xae4>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'm', color, fontsize); break;
 8002ec8:	7afa      	ldrb	r2, [r7, #11]
 8002eca:	89b9      	ldrh	r1, [r7, #12]
 8002ecc:	8ab8      	ldrh	r0, [r7, #20]
 8002ece:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002ed2:	9300      	str	r3, [sp, #0]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	226d      	movs	r2, #109	; 0x6d
 8002ed8:	f7ff f9ea 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002edc:	e017      	b.n	8002f0e <UB_VGA_writeText+0xae6>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'M', color, fontsize); break;
 8002ede:	7afa      	ldrb	r2, [r7, #11]
 8002ee0:	89b9      	ldrh	r1, [r7, #12]
 8002ee2:	8ab8      	ldrh	r0, [r7, #20]
 8002ee4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002ee8:	9300      	str	r3, [sp, #0]
 8002eea:	4613      	mov	r3, r2
 8002eec:	224d      	movs	r2, #77	; 0x4d
 8002eee:	f7ff f9df 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002ef2:	e00c      	b.n	8002f0e <UB_VGA_writeText+0xae6>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 538, color, fontsize); break;
 8002ef4:	7afa      	ldrb	r2, [r7, #11]
 8002ef6:	89b9      	ldrh	r1, [r7, #12]
 8002ef8:	8ab8      	ldrh	r0, [r7, #20]
 8002efa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	4613      	mov	r3, r2
 8002f02:	f240 221a 	movw	r2, #538	; 0x21a
 8002f06:	f7ff f9d3 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002f0a:	e000      	b.n	8002f0e <UB_VGA_writeText+0xae6>
            				default: break;
 8002f0c:	bf00      	nop
            			break;
 8002f0e:	e02e      	b.n	8002f6e <UB_VGA_writeText+0xb46>
                		switch(fontstyle)
 8002f10:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002f14:	2b03      	cmp	r3, #3
 8002f16:	d01c      	beq.n	8002f52 <UB_VGA_writeText+0xb2a>
 8002f18:	2b03      	cmp	r3, #3
 8002f1a:	dc26      	bgt.n	8002f6a <UB_VGA_writeText+0xb42>
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d002      	beq.n	8002f26 <UB_VGA_writeText+0xafe>
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d00b      	beq.n	8002f3c <UB_VGA_writeText+0xb14>
                			default: break;
 8002f24:	e021      	b.n	8002f6a <UB_VGA_writeText+0xb42>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 12, color, fontsize); break;
 8002f26:	7afa      	ldrb	r2, [r7, #11]
 8002f28:	89b9      	ldrh	r1, [r7, #12]
 8002f2a:	8ab8      	ldrh	r0, [r7, #20]
 8002f2c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002f30:	9300      	str	r3, [sp, #0]
 8002f32:	4613      	mov	r3, r2
 8002f34:	220c      	movs	r2, #12
 8002f36:	f7ff f9bb 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002f3a:	e017      	b.n	8002f6c <UB_VGA_writeText+0xb44>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 38, color, fontsize); break;
 8002f3c:	7afa      	ldrb	r2, [r7, #11]
 8002f3e:	89b9      	ldrh	r1, [r7, #12]
 8002f40:	8ab8      	ldrh	r0, [r7, #20]
 8002f42:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002f46:	9300      	str	r3, [sp, #0]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	2226      	movs	r2, #38	; 0x26
 8002f4c:	f7ff f9b0 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002f50:	e00c      	b.n	8002f6c <UB_VGA_writeText+0xb44>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 512, color, fontsize); break;
 8002f52:	7afa      	ldrb	r2, [r7, #11]
 8002f54:	89b9      	ldrh	r1, [r7, #12]
 8002f56:	8ab8      	ldrh	r0, [r7, #20]
 8002f58:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002f5c:	9300      	str	r3, [sp, #0]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f64:	f7ff f9a4 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002f68:	e000      	b.n	8002f6c <UB_VGA_writeText+0xb44>
                			default: break;
 8002f6a:	bf00      	nop
                	default: break;
 8002f6c:	bf00      	nop
            	}
                break;
 8002f6e:	f000 bd31 	b.w	80039d4 <UB_VGA_writeText+0x15ac>
            case 'n':
            	switch(fontname)
 8002f72:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d002      	beq.n	8002f80 <UB_VGA_writeText+0xb58>
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d02f      	beq.n	8002fde <UB_VGA_writeText+0xbb6>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 13, color, fontsize); break;
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 39, color, fontsize); break;
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 513, color, fontsize); break;
                			default: break;
                		}
                	default: break;
 8002f7e:	e05c      	b.n	800303a <UB_VGA_writeText+0xc12>
            			switch(fontstyle)
 8002f80:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002f84:	2b03      	cmp	r3, #3
 8002f86:	d01c      	beq.n	8002fc2 <UB_VGA_writeText+0xb9a>
 8002f88:	2b03      	cmp	r3, #3
 8002f8a:	dc26      	bgt.n	8002fda <UB_VGA_writeText+0xbb2>
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d002      	beq.n	8002f96 <UB_VGA_writeText+0xb6e>
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d00b      	beq.n	8002fac <UB_VGA_writeText+0xb84>
            				default: break;
 8002f94:	e021      	b.n	8002fda <UB_VGA_writeText+0xbb2>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'n', color, fontsize); break;
 8002f96:	7afa      	ldrb	r2, [r7, #11]
 8002f98:	89b9      	ldrh	r1, [r7, #12]
 8002f9a:	8ab8      	ldrh	r0, [r7, #20]
 8002f9c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	226e      	movs	r2, #110	; 0x6e
 8002fa6:	f7ff f983 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002faa:	e017      	b.n	8002fdc <UB_VGA_writeText+0xbb4>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'N', color, fontsize); break;
 8002fac:	7afa      	ldrb	r2, [r7, #11]
 8002fae:	89b9      	ldrh	r1, [r7, #12]
 8002fb0:	8ab8      	ldrh	r0, [r7, #20]
 8002fb2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002fb6:	9300      	str	r3, [sp, #0]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	224e      	movs	r2, #78	; 0x4e
 8002fbc:	f7ff f978 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002fc0:	e00c      	b.n	8002fdc <UB_VGA_writeText+0xbb4>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 539, color, fontsize); break;
 8002fc2:	7afa      	ldrb	r2, [r7, #11]
 8002fc4:	89b9      	ldrh	r1, [r7, #12]
 8002fc6:	8ab8      	ldrh	r0, [r7, #20]
 8002fc8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002fcc:	9300      	str	r3, [sp, #0]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	f240 221b 	movw	r2, #539	; 0x21b
 8002fd4:	f7ff f96c 	bl	80022b0 <UB_VGA_DrawBitmap>
 8002fd8:	e000      	b.n	8002fdc <UB_VGA_writeText+0xbb4>
            				default: break;
 8002fda:	bf00      	nop
            			break;
 8002fdc:	e02e      	b.n	800303c <UB_VGA_writeText+0xc14>
                		switch(fontstyle)
 8002fde:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002fe2:	2b03      	cmp	r3, #3
 8002fe4:	d01c      	beq.n	8003020 <UB_VGA_writeText+0xbf8>
 8002fe6:	2b03      	cmp	r3, #3
 8002fe8:	dc26      	bgt.n	8003038 <UB_VGA_writeText+0xc10>
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d002      	beq.n	8002ff4 <UB_VGA_writeText+0xbcc>
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d00b      	beq.n	800300a <UB_VGA_writeText+0xbe2>
                			default: break;
 8002ff2:	e021      	b.n	8003038 <UB_VGA_writeText+0xc10>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 13, color, fontsize); break;
 8002ff4:	7afa      	ldrb	r2, [r7, #11]
 8002ff6:	89b9      	ldrh	r1, [r7, #12]
 8002ff8:	8ab8      	ldrh	r0, [r7, #20]
 8002ffa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002ffe:	9300      	str	r3, [sp, #0]
 8003000:	4613      	mov	r3, r2
 8003002:	220d      	movs	r2, #13
 8003004:	f7ff f954 	bl	80022b0 <UB_VGA_DrawBitmap>
 8003008:	e017      	b.n	800303a <UB_VGA_writeText+0xc12>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 39, color, fontsize); break;
 800300a:	7afa      	ldrb	r2, [r7, #11]
 800300c:	89b9      	ldrh	r1, [r7, #12]
 800300e:	8ab8      	ldrh	r0, [r7, #20]
 8003010:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	4613      	mov	r3, r2
 8003018:	2227      	movs	r2, #39	; 0x27
 800301a:	f7ff f949 	bl	80022b0 <UB_VGA_DrawBitmap>
 800301e:	e00c      	b.n	800303a <UB_VGA_writeText+0xc12>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 513, color, fontsize); break;
 8003020:	7afa      	ldrb	r2, [r7, #11]
 8003022:	89b9      	ldrh	r1, [r7, #12]
 8003024:	8ab8      	ldrh	r0, [r7, #20]
 8003026:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800302a:	9300      	str	r3, [sp, #0]
 800302c:	4613      	mov	r3, r2
 800302e:	f240 2201 	movw	r2, #513	; 0x201
 8003032:	f7ff f93d 	bl	80022b0 <UB_VGA_DrawBitmap>
 8003036:	e000      	b.n	800303a <UB_VGA_writeText+0xc12>
                			default: break;
 8003038:	bf00      	nop
                	default: break;
 800303a:	bf00      	nop
            	}
                break;
 800303c:	f000 bcca 	b.w	80039d4 <UB_VGA_writeText+0x15ac>
            case 'o':
            	switch(fontname)
 8003040:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d002      	beq.n	800304e <UB_VGA_writeText+0xc26>
 8003048:	2b02      	cmp	r3, #2
 800304a:	d02f      	beq.n	80030ac <UB_VGA_writeText+0xc84>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 14, color, fontsize); break;
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 40, color, fontsize); break;
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 514, color, fontsize); break;
                			default: break;
                		}
                	default: break;
 800304c:	e05c      	b.n	8003108 <UB_VGA_writeText+0xce0>
            			switch(fontstyle)
 800304e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003052:	2b03      	cmp	r3, #3
 8003054:	d01c      	beq.n	8003090 <UB_VGA_writeText+0xc68>
 8003056:	2b03      	cmp	r3, #3
 8003058:	dc26      	bgt.n	80030a8 <UB_VGA_writeText+0xc80>
 800305a:	2b01      	cmp	r3, #1
 800305c:	d002      	beq.n	8003064 <UB_VGA_writeText+0xc3c>
 800305e:	2b02      	cmp	r3, #2
 8003060:	d00b      	beq.n	800307a <UB_VGA_writeText+0xc52>
            				default: break;
 8003062:	e021      	b.n	80030a8 <UB_VGA_writeText+0xc80>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'o', color, fontsize); break;
 8003064:	7afa      	ldrb	r2, [r7, #11]
 8003066:	89b9      	ldrh	r1, [r7, #12]
 8003068:	8ab8      	ldrh	r0, [r7, #20]
 800306a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	4613      	mov	r3, r2
 8003072:	226f      	movs	r2, #111	; 0x6f
 8003074:	f7ff f91c 	bl	80022b0 <UB_VGA_DrawBitmap>
 8003078:	e017      	b.n	80030aa <UB_VGA_writeText+0xc82>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'O', color, fontsize); break;
 800307a:	7afa      	ldrb	r2, [r7, #11]
 800307c:	89b9      	ldrh	r1, [r7, #12]
 800307e:	8ab8      	ldrh	r0, [r7, #20]
 8003080:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003084:	9300      	str	r3, [sp, #0]
 8003086:	4613      	mov	r3, r2
 8003088:	224f      	movs	r2, #79	; 0x4f
 800308a:	f7ff f911 	bl	80022b0 <UB_VGA_DrawBitmap>
 800308e:	e00c      	b.n	80030aa <UB_VGA_writeText+0xc82>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 540, color, fontsize); break;
 8003090:	7afa      	ldrb	r2, [r7, #11]
 8003092:	89b9      	ldrh	r1, [r7, #12]
 8003094:	8ab8      	ldrh	r0, [r7, #20]
 8003096:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800309a:	9300      	str	r3, [sp, #0]
 800309c:	4613      	mov	r3, r2
 800309e:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80030a2:	f7ff f905 	bl	80022b0 <UB_VGA_DrawBitmap>
 80030a6:	e000      	b.n	80030aa <UB_VGA_writeText+0xc82>
            				default: break;
 80030a8:	bf00      	nop
            			break;
 80030aa:	e02e      	b.n	800310a <UB_VGA_writeText+0xce2>
                		switch(fontstyle)
 80030ac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80030b0:	2b03      	cmp	r3, #3
 80030b2:	d01c      	beq.n	80030ee <UB_VGA_writeText+0xcc6>
 80030b4:	2b03      	cmp	r3, #3
 80030b6:	dc26      	bgt.n	8003106 <UB_VGA_writeText+0xcde>
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d002      	beq.n	80030c2 <UB_VGA_writeText+0xc9a>
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d00b      	beq.n	80030d8 <UB_VGA_writeText+0xcb0>
                			default: break;
 80030c0:	e021      	b.n	8003106 <UB_VGA_writeText+0xcde>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 14, color, fontsize); break;
 80030c2:	7afa      	ldrb	r2, [r7, #11]
 80030c4:	89b9      	ldrh	r1, [r7, #12]
 80030c6:	8ab8      	ldrh	r0, [r7, #20]
 80030c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80030cc:	9300      	str	r3, [sp, #0]
 80030ce:	4613      	mov	r3, r2
 80030d0:	220e      	movs	r2, #14
 80030d2:	f7ff f8ed 	bl	80022b0 <UB_VGA_DrawBitmap>
 80030d6:	e017      	b.n	8003108 <UB_VGA_writeText+0xce0>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 40, color, fontsize); break;
 80030d8:	7afa      	ldrb	r2, [r7, #11]
 80030da:	89b9      	ldrh	r1, [r7, #12]
 80030dc:	8ab8      	ldrh	r0, [r7, #20]
 80030de:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80030e2:	9300      	str	r3, [sp, #0]
 80030e4:	4613      	mov	r3, r2
 80030e6:	2228      	movs	r2, #40	; 0x28
 80030e8:	f7ff f8e2 	bl	80022b0 <UB_VGA_DrawBitmap>
 80030ec:	e00c      	b.n	8003108 <UB_VGA_writeText+0xce0>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 514, color, fontsize); break;
 80030ee:	7afa      	ldrb	r2, [r7, #11]
 80030f0:	89b9      	ldrh	r1, [r7, #12]
 80030f2:	8ab8      	ldrh	r0, [r7, #20]
 80030f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80030f8:	9300      	str	r3, [sp, #0]
 80030fa:	4613      	mov	r3, r2
 80030fc:	f240 2202 	movw	r2, #514	; 0x202
 8003100:	f7ff f8d6 	bl	80022b0 <UB_VGA_DrawBitmap>
 8003104:	e000      	b.n	8003108 <UB_VGA_writeText+0xce0>
                			default: break;
 8003106:	bf00      	nop
                	default: break;
 8003108:	bf00      	nop
            	}
                break;
 800310a:	f000 bc63 	b.w	80039d4 <UB_VGA_writeText+0x15ac>
            case 'p':
            	switch(fontname)
 800310e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d002      	beq.n	800311c <UB_VGA_writeText+0xcf4>
 8003116:	2b02      	cmp	r3, #2
 8003118:	d02f      	beq.n	800317a <UB_VGA_writeText+0xd52>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 15, color, fontsize); break;
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 41, color, fontsize); break;
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 515, color, fontsize); break;
                			default: break;
                		}
                	default: break;
 800311a:	e05c      	b.n	80031d6 <UB_VGA_writeText+0xdae>
            			switch(fontstyle)
 800311c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003120:	2b03      	cmp	r3, #3
 8003122:	d01c      	beq.n	800315e <UB_VGA_writeText+0xd36>
 8003124:	2b03      	cmp	r3, #3
 8003126:	dc26      	bgt.n	8003176 <UB_VGA_writeText+0xd4e>
 8003128:	2b01      	cmp	r3, #1
 800312a:	d002      	beq.n	8003132 <UB_VGA_writeText+0xd0a>
 800312c:	2b02      	cmp	r3, #2
 800312e:	d00b      	beq.n	8003148 <UB_VGA_writeText+0xd20>
            				default: break;
 8003130:	e021      	b.n	8003176 <UB_VGA_writeText+0xd4e>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'p', color, fontsize); break;
 8003132:	7afa      	ldrb	r2, [r7, #11]
 8003134:	89b9      	ldrh	r1, [r7, #12]
 8003136:	8ab8      	ldrh	r0, [r7, #20]
 8003138:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	4613      	mov	r3, r2
 8003140:	2270      	movs	r2, #112	; 0x70
 8003142:	f7ff f8b5 	bl	80022b0 <UB_VGA_DrawBitmap>
 8003146:	e017      	b.n	8003178 <UB_VGA_writeText+0xd50>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'P', color, fontsize); break;
 8003148:	7afa      	ldrb	r2, [r7, #11]
 800314a:	89b9      	ldrh	r1, [r7, #12]
 800314c:	8ab8      	ldrh	r0, [r7, #20]
 800314e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003152:	9300      	str	r3, [sp, #0]
 8003154:	4613      	mov	r3, r2
 8003156:	2250      	movs	r2, #80	; 0x50
 8003158:	f7ff f8aa 	bl	80022b0 <UB_VGA_DrawBitmap>
 800315c:	e00c      	b.n	8003178 <UB_VGA_writeText+0xd50>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 541, color, fontsize); break;
 800315e:	7afa      	ldrb	r2, [r7, #11]
 8003160:	89b9      	ldrh	r1, [r7, #12]
 8003162:	8ab8      	ldrh	r0, [r7, #20]
 8003164:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003168:	9300      	str	r3, [sp, #0]
 800316a:	4613      	mov	r3, r2
 800316c:	f240 221d 	movw	r2, #541	; 0x21d
 8003170:	f7ff f89e 	bl	80022b0 <UB_VGA_DrawBitmap>
 8003174:	e000      	b.n	8003178 <UB_VGA_writeText+0xd50>
            				default: break;
 8003176:	bf00      	nop
            			break;
 8003178:	e02e      	b.n	80031d8 <UB_VGA_writeText+0xdb0>
                		switch(fontstyle)
 800317a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800317e:	2b03      	cmp	r3, #3
 8003180:	d01c      	beq.n	80031bc <UB_VGA_writeText+0xd94>
 8003182:	2b03      	cmp	r3, #3
 8003184:	dc26      	bgt.n	80031d4 <UB_VGA_writeText+0xdac>
 8003186:	2b01      	cmp	r3, #1
 8003188:	d002      	beq.n	8003190 <UB_VGA_writeText+0xd68>
 800318a:	2b02      	cmp	r3, #2
 800318c:	d00b      	beq.n	80031a6 <UB_VGA_writeText+0xd7e>
                			default: break;
 800318e:	e021      	b.n	80031d4 <UB_VGA_writeText+0xdac>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 15, color, fontsize); break;
 8003190:	7afa      	ldrb	r2, [r7, #11]
 8003192:	89b9      	ldrh	r1, [r7, #12]
 8003194:	8ab8      	ldrh	r0, [r7, #20]
 8003196:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800319a:	9300      	str	r3, [sp, #0]
 800319c:	4613      	mov	r3, r2
 800319e:	220f      	movs	r2, #15
 80031a0:	f7ff f886 	bl	80022b0 <UB_VGA_DrawBitmap>
 80031a4:	e017      	b.n	80031d6 <UB_VGA_writeText+0xdae>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 41, color, fontsize); break;
 80031a6:	7afa      	ldrb	r2, [r7, #11]
 80031a8:	89b9      	ldrh	r1, [r7, #12]
 80031aa:	8ab8      	ldrh	r0, [r7, #20]
 80031ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80031b0:	9300      	str	r3, [sp, #0]
 80031b2:	4613      	mov	r3, r2
 80031b4:	2229      	movs	r2, #41	; 0x29
 80031b6:	f7ff f87b 	bl	80022b0 <UB_VGA_DrawBitmap>
 80031ba:	e00c      	b.n	80031d6 <UB_VGA_writeText+0xdae>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 515, color, fontsize); break;
 80031bc:	7afa      	ldrb	r2, [r7, #11]
 80031be:	89b9      	ldrh	r1, [r7, #12]
 80031c0:	8ab8      	ldrh	r0, [r7, #20]
 80031c2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80031c6:	9300      	str	r3, [sp, #0]
 80031c8:	4613      	mov	r3, r2
 80031ca:	f240 2203 	movw	r2, #515	; 0x203
 80031ce:	f7ff f86f 	bl	80022b0 <UB_VGA_DrawBitmap>
 80031d2:	e000      	b.n	80031d6 <UB_VGA_writeText+0xdae>
                			default: break;
 80031d4:	bf00      	nop
                	default: break;
 80031d6:	bf00      	nop
            	}
                break;
 80031d8:	e3fc      	b.n	80039d4 <UB_VGA_writeText+0x15ac>
            case 'q':
            	switch(fontname)
 80031da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d002      	beq.n	80031e8 <UB_VGA_writeText+0xdc0>
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d02f      	beq.n	8003246 <UB_VGA_writeText+0xe1e>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 16, color, fontsize); break;
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 42, color, fontsize); break;
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 516, color, fontsize); break;
                			default: break;
                		}
                	default: break;
 80031e6:	e05c      	b.n	80032a2 <UB_VGA_writeText+0xe7a>
            			switch(fontstyle)
 80031e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80031ec:	2b03      	cmp	r3, #3
 80031ee:	d01c      	beq.n	800322a <UB_VGA_writeText+0xe02>
 80031f0:	2b03      	cmp	r3, #3
 80031f2:	dc26      	bgt.n	8003242 <UB_VGA_writeText+0xe1a>
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d002      	beq.n	80031fe <UB_VGA_writeText+0xdd6>
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d00b      	beq.n	8003214 <UB_VGA_writeText+0xdec>
            				default: break;
 80031fc:	e021      	b.n	8003242 <UB_VGA_writeText+0xe1a>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'q', color, fontsize); break;
 80031fe:	7afa      	ldrb	r2, [r7, #11]
 8003200:	89b9      	ldrh	r1, [r7, #12]
 8003202:	8ab8      	ldrh	r0, [r7, #20]
 8003204:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003208:	9300      	str	r3, [sp, #0]
 800320a:	4613      	mov	r3, r2
 800320c:	2271      	movs	r2, #113	; 0x71
 800320e:	f7ff f84f 	bl	80022b0 <UB_VGA_DrawBitmap>
 8003212:	e017      	b.n	8003244 <UB_VGA_writeText+0xe1c>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'Q', color, fontsize); break;
 8003214:	7afa      	ldrb	r2, [r7, #11]
 8003216:	89b9      	ldrh	r1, [r7, #12]
 8003218:	8ab8      	ldrh	r0, [r7, #20]
 800321a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	4613      	mov	r3, r2
 8003222:	2251      	movs	r2, #81	; 0x51
 8003224:	f7ff f844 	bl	80022b0 <UB_VGA_DrawBitmap>
 8003228:	e00c      	b.n	8003244 <UB_VGA_writeText+0xe1c>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 542, color, fontsize); break;
 800322a:	7afa      	ldrb	r2, [r7, #11]
 800322c:	89b9      	ldrh	r1, [r7, #12]
 800322e:	8ab8      	ldrh	r0, [r7, #20]
 8003230:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	4613      	mov	r3, r2
 8003238:	f240 221e 	movw	r2, #542	; 0x21e
 800323c:	f7ff f838 	bl	80022b0 <UB_VGA_DrawBitmap>
 8003240:	e000      	b.n	8003244 <UB_VGA_writeText+0xe1c>
            				default: break;
 8003242:	bf00      	nop
            			break;
 8003244:	e02e      	b.n	80032a4 <UB_VGA_writeText+0xe7c>
                		switch(fontstyle)
 8003246:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800324a:	2b03      	cmp	r3, #3
 800324c:	d01c      	beq.n	8003288 <UB_VGA_writeText+0xe60>
 800324e:	2b03      	cmp	r3, #3
 8003250:	dc26      	bgt.n	80032a0 <UB_VGA_writeText+0xe78>
 8003252:	2b01      	cmp	r3, #1
 8003254:	d002      	beq.n	800325c <UB_VGA_writeText+0xe34>
 8003256:	2b02      	cmp	r3, #2
 8003258:	d00b      	beq.n	8003272 <UB_VGA_writeText+0xe4a>
                			default: break;
 800325a:	e021      	b.n	80032a0 <UB_VGA_writeText+0xe78>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 16, color, fontsize); break;
 800325c:	7afa      	ldrb	r2, [r7, #11]
 800325e:	89b9      	ldrh	r1, [r7, #12]
 8003260:	8ab8      	ldrh	r0, [r7, #20]
 8003262:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003266:	9300      	str	r3, [sp, #0]
 8003268:	4613      	mov	r3, r2
 800326a:	2210      	movs	r2, #16
 800326c:	f7ff f820 	bl	80022b0 <UB_VGA_DrawBitmap>
 8003270:	e017      	b.n	80032a2 <UB_VGA_writeText+0xe7a>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 42, color, fontsize); break;
 8003272:	7afa      	ldrb	r2, [r7, #11]
 8003274:	89b9      	ldrh	r1, [r7, #12]
 8003276:	8ab8      	ldrh	r0, [r7, #20]
 8003278:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800327c:	9300      	str	r3, [sp, #0]
 800327e:	4613      	mov	r3, r2
 8003280:	222a      	movs	r2, #42	; 0x2a
 8003282:	f7ff f815 	bl	80022b0 <UB_VGA_DrawBitmap>
 8003286:	e00c      	b.n	80032a2 <UB_VGA_writeText+0xe7a>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 516, color, fontsize); break;
 8003288:	7afa      	ldrb	r2, [r7, #11]
 800328a:	89b9      	ldrh	r1, [r7, #12]
 800328c:	8ab8      	ldrh	r0, [r7, #20]
 800328e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003292:	9300      	str	r3, [sp, #0]
 8003294:	4613      	mov	r3, r2
 8003296:	f44f 7201 	mov.w	r2, #516	; 0x204
 800329a:	f7ff f809 	bl	80022b0 <UB_VGA_DrawBitmap>
 800329e:	e000      	b.n	80032a2 <UB_VGA_writeText+0xe7a>
                			default: break;
 80032a0:	bf00      	nop
                	default: break;
 80032a2:	bf00      	nop
            	}
                break;
 80032a4:	e396      	b.n	80039d4 <UB_VGA_writeText+0x15ac>
            case 'r':
            	switch(fontname)
 80032a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d002      	beq.n	80032b4 <UB_VGA_writeText+0xe8c>
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d02f      	beq.n	8003312 <UB_VGA_writeText+0xeea>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 17, color, fontsize); break;
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 43, color, fontsize); break;
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 517, color, fontsize); break;
                			default: break;
                		}
                	default: break;
 80032b2:	e05c      	b.n	800336e <UB_VGA_writeText+0xf46>
            			switch(fontstyle)
 80032b4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80032b8:	2b03      	cmp	r3, #3
 80032ba:	d01c      	beq.n	80032f6 <UB_VGA_writeText+0xece>
 80032bc:	2b03      	cmp	r3, #3
 80032be:	dc26      	bgt.n	800330e <UB_VGA_writeText+0xee6>
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d002      	beq.n	80032ca <UB_VGA_writeText+0xea2>
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d00b      	beq.n	80032e0 <UB_VGA_writeText+0xeb8>
            				default: break;
 80032c8:	e021      	b.n	800330e <UB_VGA_writeText+0xee6>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'r', color, fontsize); break;
 80032ca:	7afa      	ldrb	r2, [r7, #11]
 80032cc:	89b9      	ldrh	r1, [r7, #12]
 80032ce:	8ab8      	ldrh	r0, [r7, #20]
 80032d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80032d4:	9300      	str	r3, [sp, #0]
 80032d6:	4613      	mov	r3, r2
 80032d8:	2272      	movs	r2, #114	; 0x72
 80032da:	f7fe ffe9 	bl	80022b0 <UB_VGA_DrawBitmap>
 80032de:	e017      	b.n	8003310 <UB_VGA_writeText+0xee8>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'R', color, fontsize); break;
 80032e0:	7afa      	ldrb	r2, [r7, #11]
 80032e2:	89b9      	ldrh	r1, [r7, #12]
 80032e4:	8ab8      	ldrh	r0, [r7, #20]
 80032e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	4613      	mov	r3, r2
 80032ee:	2252      	movs	r2, #82	; 0x52
 80032f0:	f7fe ffde 	bl	80022b0 <UB_VGA_DrawBitmap>
 80032f4:	e00c      	b.n	8003310 <UB_VGA_writeText+0xee8>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 543, color, fontsize); break;
 80032f6:	7afa      	ldrb	r2, [r7, #11]
 80032f8:	89b9      	ldrh	r1, [r7, #12]
 80032fa:	8ab8      	ldrh	r0, [r7, #20]
 80032fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	4613      	mov	r3, r2
 8003304:	f240 221f 	movw	r2, #543	; 0x21f
 8003308:	f7fe ffd2 	bl	80022b0 <UB_VGA_DrawBitmap>
 800330c:	e000      	b.n	8003310 <UB_VGA_writeText+0xee8>
            				default: break;
 800330e:	bf00      	nop
            			break;
 8003310:	e02e      	b.n	8003370 <UB_VGA_writeText+0xf48>
                		switch(fontstyle)
 8003312:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003316:	2b03      	cmp	r3, #3
 8003318:	d01c      	beq.n	8003354 <UB_VGA_writeText+0xf2c>
 800331a:	2b03      	cmp	r3, #3
 800331c:	dc26      	bgt.n	800336c <UB_VGA_writeText+0xf44>
 800331e:	2b01      	cmp	r3, #1
 8003320:	d002      	beq.n	8003328 <UB_VGA_writeText+0xf00>
 8003322:	2b02      	cmp	r3, #2
 8003324:	d00b      	beq.n	800333e <UB_VGA_writeText+0xf16>
                			default: break;
 8003326:	e021      	b.n	800336c <UB_VGA_writeText+0xf44>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 17, color, fontsize); break;
 8003328:	7afa      	ldrb	r2, [r7, #11]
 800332a:	89b9      	ldrh	r1, [r7, #12]
 800332c:	8ab8      	ldrh	r0, [r7, #20]
 800332e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	4613      	mov	r3, r2
 8003336:	2211      	movs	r2, #17
 8003338:	f7fe ffba 	bl	80022b0 <UB_VGA_DrawBitmap>
 800333c:	e017      	b.n	800336e <UB_VGA_writeText+0xf46>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 43, color, fontsize); break;
 800333e:	7afa      	ldrb	r2, [r7, #11]
 8003340:	89b9      	ldrh	r1, [r7, #12]
 8003342:	8ab8      	ldrh	r0, [r7, #20]
 8003344:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	4613      	mov	r3, r2
 800334c:	222b      	movs	r2, #43	; 0x2b
 800334e:	f7fe ffaf 	bl	80022b0 <UB_VGA_DrawBitmap>
 8003352:	e00c      	b.n	800336e <UB_VGA_writeText+0xf46>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 517, color, fontsize); break;
 8003354:	7afa      	ldrb	r2, [r7, #11]
 8003356:	89b9      	ldrh	r1, [r7, #12]
 8003358:	8ab8      	ldrh	r0, [r7, #20]
 800335a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800335e:	9300      	str	r3, [sp, #0]
 8003360:	4613      	mov	r3, r2
 8003362:	f240 2205 	movw	r2, #517	; 0x205
 8003366:	f7fe ffa3 	bl	80022b0 <UB_VGA_DrawBitmap>
 800336a:	e000      	b.n	800336e <UB_VGA_writeText+0xf46>
                			default: break;
 800336c:	bf00      	nop
                	default: break;
 800336e:	bf00      	nop
            	}
                break;
 8003370:	e330      	b.n	80039d4 <UB_VGA_writeText+0x15ac>
            case 's':
            	switch(fontname)
 8003372:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d002      	beq.n	8003380 <UB_VGA_writeText+0xf58>
 800337a:	2b02      	cmp	r3, #2
 800337c:	d02f      	beq.n	80033de <UB_VGA_writeText+0xfb6>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 18, color, fontsize); break;
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 44, color, fontsize); break;
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 518, color, fontsize); break;
                			default: break;
                		}
                	default: break;
 800337e:	e05c      	b.n	800343a <UB_VGA_writeText+0x1012>
            			switch(fontstyle)
 8003380:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003384:	2b03      	cmp	r3, #3
 8003386:	d01c      	beq.n	80033c2 <UB_VGA_writeText+0xf9a>
 8003388:	2b03      	cmp	r3, #3
 800338a:	dc26      	bgt.n	80033da <UB_VGA_writeText+0xfb2>
 800338c:	2b01      	cmp	r3, #1
 800338e:	d002      	beq.n	8003396 <UB_VGA_writeText+0xf6e>
 8003390:	2b02      	cmp	r3, #2
 8003392:	d00b      	beq.n	80033ac <UB_VGA_writeText+0xf84>
            				default: break;
 8003394:	e021      	b.n	80033da <UB_VGA_writeText+0xfb2>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 's', color, fontsize); break;
 8003396:	7afa      	ldrb	r2, [r7, #11]
 8003398:	89b9      	ldrh	r1, [r7, #12]
 800339a:	8ab8      	ldrh	r0, [r7, #20]
 800339c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	4613      	mov	r3, r2
 80033a4:	2273      	movs	r2, #115	; 0x73
 80033a6:	f7fe ff83 	bl	80022b0 <UB_VGA_DrawBitmap>
 80033aa:	e017      	b.n	80033dc <UB_VGA_writeText+0xfb4>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'S', color, fontsize); break;
 80033ac:	7afa      	ldrb	r2, [r7, #11]
 80033ae:	89b9      	ldrh	r1, [r7, #12]
 80033b0:	8ab8      	ldrh	r0, [r7, #20]
 80033b2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80033b6:	9300      	str	r3, [sp, #0]
 80033b8:	4613      	mov	r3, r2
 80033ba:	2253      	movs	r2, #83	; 0x53
 80033bc:	f7fe ff78 	bl	80022b0 <UB_VGA_DrawBitmap>
 80033c0:	e00c      	b.n	80033dc <UB_VGA_writeText+0xfb4>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 544, color, fontsize); break;
 80033c2:	7afa      	ldrb	r2, [r7, #11]
 80033c4:	89b9      	ldrh	r1, [r7, #12]
 80033c6:	8ab8      	ldrh	r0, [r7, #20]
 80033c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	4613      	mov	r3, r2
 80033d0:	f44f 7208 	mov.w	r2, #544	; 0x220
 80033d4:	f7fe ff6c 	bl	80022b0 <UB_VGA_DrawBitmap>
 80033d8:	e000      	b.n	80033dc <UB_VGA_writeText+0xfb4>
            				default: break;
 80033da:	bf00      	nop
            			break;
 80033dc:	e02e      	b.n	800343c <UB_VGA_writeText+0x1014>
                		switch(fontstyle)
 80033de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80033e2:	2b03      	cmp	r3, #3
 80033e4:	d01c      	beq.n	8003420 <UB_VGA_writeText+0xff8>
 80033e6:	2b03      	cmp	r3, #3
 80033e8:	dc26      	bgt.n	8003438 <UB_VGA_writeText+0x1010>
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d002      	beq.n	80033f4 <UB_VGA_writeText+0xfcc>
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d00b      	beq.n	800340a <UB_VGA_writeText+0xfe2>
                			default: break;
 80033f2:	e021      	b.n	8003438 <UB_VGA_writeText+0x1010>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 18, color, fontsize); break;
 80033f4:	7afa      	ldrb	r2, [r7, #11]
 80033f6:	89b9      	ldrh	r1, [r7, #12]
 80033f8:	8ab8      	ldrh	r0, [r7, #20]
 80033fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80033fe:	9300      	str	r3, [sp, #0]
 8003400:	4613      	mov	r3, r2
 8003402:	2212      	movs	r2, #18
 8003404:	f7fe ff54 	bl	80022b0 <UB_VGA_DrawBitmap>
 8003408:	e017      	b.n	800343a <UB_VGA_writeText+0x1012>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 44, color, fontsize); break;
 800340a:	7afa      	ldrb	r2, [r7, #11]
 800340c:	89b9      	ldrh	r1, [r7, #12]
 800340e:	8ab8      	ldrh	r0, [r7, #20]
 8003410:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	4613      	mov	r3, r2
 8003418:	222c      	movs	r2, #44	; 0x2c
 800341a:	f7fe ff49 	bl	80022b0 <UB_VGA_DrawBitmap>
 800341e:	e00c      	b.n	800343a <UB_VGA_writeText+0x1012>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 518, color, fontsize); break;
 8003420:	7afa      	ldrb	r2, [r7, #11]
 8003422:	89b9      	ldrh	r1, [r7, #12]
 8003424:	8ab8      	ldrh	r0, [r7, #20]
 8003426:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800342a:	9300      	str	r3, [sp, #0]
 800342c:	4613      	mov	r3, r2
 800342e:	f240 2206 	movw	r2, #518	; 0x206
 8003432:	f7fe ff3d 	bl	80022b0 <UB_VGA_DrawBitmap>
 8003436:	e000      	b.n	800343a <UB_VGA_writeText+0x1012>
                			default: break;
 8003438:	bf00      	nop
                	default: break;
 800343a:	bf00      	nop
            	}
            	break;
 800343c:	e2ca      	b.n	80039d4 <UB_VGA_writeText+0x15ac>
            case 't':
            	switch(fontname)
 800343e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d002      	beq.n	800344c <UB_VGA_writeText+0x1024>
 8003446:	2b02      	cmp	r3, #2
 8003448:	d02f      	beq.n	80034aa <UB_VGA_writeText+0x1082>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 19, color, fontsize); break;
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 45, color, fontsize); break;
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 519, color, fontsize); break;
                			default: break;
                		}
                	default: break;
 800344a:	e05c      	b.n	8003506 <UB_VGA_writeText+0x10de>
            			switch(fontstyle)
 800344c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003450:	2b03      	cmp	r3, #3
 8003452:	d01c      	beq.n	800348e <UB_VGA_writeText+0x1066>
 8003454:	2b03      	cmp	r3, #3
 8003456:	dc26      	bgt.n	80034a6 <UB_VGA_writeText+0x107e>
 8003458:	2b01      	cmp	r3, #1
 800345a:	d002      	beq.n	8003462 <UB_VGA_writeText+0x103a>
 800345c:	2b02      	cmp	r3, #2
 800345e:	d00b      	beq.n	8003478 <UB_VGA_writeText+0x1050>
            				default: break;
 8003460:	e021      	b.n	80034a6 <UB_VGA_writeText+0x107e>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 't', color, fontsize); break;
 8003462:	7afa      	ldrb	r2, [r7, #11]
 8003464:	89b9      	ldrh	r1, [r7, #12]
 8003466:	8ab8      	ldrh	r0, [r7, #20]
 8003468:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800346c:	9300      	str	r3, [sp, #0]
 800346e:	4613      	mov	r3, r2
 8003470:	2274      	movs	r2, #116	; 0x74
 8003472:	f7fe ff1d 	bl	80022b0 <UB_VGA_DrawBitmap>
 8003476:	e017      	b.n	80034a8 <UB_VGA_writeText+0x1080>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'T', color, fontsize); break;
 8003478:	7afa      	ldrb	r2, [r7, #11]
 800347a:	89b9      	ldrh	r1, [r7, #12]
 800347c:	8ab8      	ldrh	r0, [r7, #20]
 800347e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	4613      	mov	r3, r2
 8003486:	2254      	movs	r2, #84	; 0x54
 8003488:	f7fe ff12 	bl	80022b0 <UB_VGA_DrawBitmap>
 800348c:	e00c      	b.n	80034a8 <UB_VGA_writeText+0x1080>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 545, color, fontsize); break;
 800348e:	7afa      	ldrb	r2, [r7, #11]
 8003490:	89b9      	ldrh	r1, [r7, #12]
 8003492:	8ab8      	ldrh	r0, [r7, #20]
 8003494:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003498:	9300      	str	r3, [sp, #0]
 800349a:	4613      	mov	r3, r2
 800349c:	f240 2221 	movw	r2, #545	; 0x221
 80034a0:	f7fe ff06 	bl	80022b0 <UB_VGA_DrawBitmap>
 80034a4:	e000      	b.n	80034a8 <UB_VGA_writeText+0x1080>
            				default: break;
 80034a6:	bf00      	nop
            			break;
 80034a8:	e02e      	b.n	8003508 <UB_VGA_writeText+0x10e0>
                		switch(fontstyle)
 80034aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80034ae:	2b03      	cmp	r3, #3
 80034b0:	d01c      	beq.n	80034ec <UB_VGA_writeText+0x10c4>
 80034b2:	2b03      	cmp	r3, #3
 80034b4:	dc26      	bgt.n	8003504 <UB_VGA_writeText+0x10dc>
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d002      	beq.n	80034c0 <UB_VGA_writeText+0x1098>
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d00b      	beq.n	80034d6 <UB_VGA_writeText+0x10ae>
                			default: break;
 80034be:	e021      	b.n	8003504 <UB_VGA_writeText+0x10dc>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 19, color, fontsize); break;
 80034c0:	7afa      	ldrb	r2, [r7, #11]
 80034c2:	89b9      	ldrh	r1, [r7, #12]
 80034c4:	8ab8      	ldrh	r0, [r7, #20]
 80034c6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80034ca:	9300      	str	r3, [sp, #0]
 80034cc:	4613      	mov	r3, r2
 80034ce:	2213      	movs	r2, #19
 80034d0:	f7fe feee 	bl	80022b0 <UB_VGA_DrawBitmap>
 80034d4:	e017      	b.n	8003506 <UB_VGA_writeText+0x10de>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 45, color, fontsize); break;
 80034d6:	7afa      	ldrb	r2, [r7, #11]
 80034d8:	89b9      	ldrh	r1, [r7, #12]
 80034da:	8ab8      	ldrh	r0, [r7, #20]
 80034dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80034e0:	9300      	str	r3, [sp, #0]
 80034e2:	4613      	mov	r3, r2
 80034e4:	222d      	movs	r2, #45	; 0x2d
 80034e6:	f7fe fee3 	bl	80022b0 <UB_VGA_DrawBitmap>
 80034ea:	e00c      	b.n	8003506 <UB_VGA_writeText+0x10de>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 519, color, fontsize); break;
 80034ec:	7afa      	ldrb	r2, [r7, #11]
 80034ee:	89b9      	ldrh	r1, [r7, #12]
 80034f0:	8ab8      	ldrh	r0, [r7, #20]
 80034f2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	4613      	mov	r3, r2
 80034fa:	f240 2207 	movw	r2, #519	; 0x207
 80034fe:	f7fe fed7 	bl	80022b0 <UB_VGA_DrawBitmap>
 8003502:	e000      	b.n	8003506 <UB_VGA_writeText+0x10de>
                			default: break;
 8003504:	bf00      	nop
                	default: break;
 8003506:	bf00      	nop
            	}
                break;
 8003508:	e264      	b.n	80039d4 <UB_VGA_writeText+0x15ac>
            case 'u':
            	switch(fontname)
 800350a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d002      	beq.n	8003518 <UB_VGA_writeText+0x10f0>
 8003512:	2b02      	cmp	r3, #2
 8003514:	d02f      	beq.n	8003576 <UB_VGA_writeText+0x114e>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 20, color, fontsize); break;
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 46, color, fontsize); break;
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 520, color, fontsize); break;
                			default: break;
                		}
                	default: break;
 8003516:	e05c      	b.n	80035d2 <UB_VGA_writeText+0x11aa>
            			switch(fontstyle)
 8003518:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800351c:	2b03      	cmp	r3, #3
 800351e:	d01c      	beq.n	800355a <UB_VGA_writeText+0x1132>
 8003520:	2b03      	cmp	r3, #3
 8003522:	dc26      	bgt.n	8003572 <UB_VGA_writeText+0x114a>
 8003524:	2b01      	cmp	r3, #1
 8003526:	d002      	beq.n	800352e <UB_VGA_writeText+0x1106>
 8003528:	2b02      	cmp	r3, #2
 800352a:	d00b      	beq.n	8003544 <UB_VGA_writeText+0x111c>
            				default: break;
 800352c:	e021      	b.n	8003572 <UB_VGA_writeText+0x114a>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'u', color, fontsize); break;
 800352e:	7afa      	ldrb	r2, [r7, #11]
 8003530:	89b9      	ldrh	r1, [r7, #12]
 8003532:	8ab8      	ldrh	r0, [r7, #20]
 8003534:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	4613      	mov	r3, r2
 800353c:	2275      	movs	r2, #117	; 0x75
 800353e:	f7fe feb7 	bl	80022b0 <UB_VGA_DrawBitmap>
 8003542:	e017      	b.n	8003574 <UB_VGA_writeText+0x114c>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'U', color, fontsize); break;
 8003544:	7afa      	ldrb	r2, [r7, #11]
 8003546:	89b9      	ldrh	r1, [r7, #12]
 8003548:	8ab8      	ldrh	r0, [r7, #20]
 800354a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	4613      	mov	r3, r2
 8003552:	2255      	movs	r2, #85	; 0x55
 8003554:	f7fe feac 	bl	80022b0 <UB_VGA_DrawBitmap>
 8003558:	e00c      	b.n	8003574 <UB_VGA_writeText+0x114c>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 546, color, fontsize); break;
 800355a:	7afa      	ldrb	r2, [r7, #11]
 800355c:	89b9      	ldrh	r1, [r7, #12]
 800355e:	8ab8      	ldrh	r0, [r7, #20]
 8003560:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003564:	9300      	str	r3, [sp, #0]
 8003566:	4613      	mov	r3, r2
 8003568:	f240 2222 	movw	r2, #546	; 0x222
 800356c:	f7fe fea0 	bl	80022b0 <UB_VGA_DrawBitmap>
 8003570:	e000      	b.n	8003574 <UB_VGA_writeText+0x114c>
            				default: break;
 8003572:	bf00      	nop
            			break;
 8003574:	e02e      	b.n	80035d4 <UB_VGA_writeText+0x11ac>
                		switch(fontstyle)
 8003576:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800357a:	2b03      	cmp	r3, #3
 800357c:	d01c      	beq.n	80035b8 <UB_VGA_writeText+0x1190>
 800357e:	2b03      	cmp	r3, #3
 8003580:	dc26      	bgt.n	80035d0 <UB_VGA_writeText+0x11a8>
 8003582:	2b01      	cmp	r3, #1
 8003584:	d002      	beq.n	800358c <UB_VGA_writeText+0x1164>
 8003586:	2b02      	cmp	r3, #2
 8003588:	d00b      	beq.n	80035a2 <UB_VGA_writeText+0x117a>
                			default: break;
 800358a:	e021      	b.n	80035d0 <UB_VGA_writeText+0x11a8>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 20, color, fontsize); break;
 800358c:	7afa      	ldrb	r2, [r7, #11]
 800358e:	89b9      	ldrh	r1, [r7, #12]
 8003590:	8ab8      	ldrh	r0, [r7, #20]
 8003592:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003596:	9300      	str	r3, [sp, #0]
 8003598:	4613      	mov	r3, r2
 800359a:	2214      	movs	r2, #20
 800359c:	f7fe fe88 	bl	80022b0 <UB_VGA_DrawBitmap>
 80035a0:	e017      	b.n	80035d2 <UB_VGA_writeText+0x11aa>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 46, color, fontsize); break;
 80035a2:	7afa      	ldrb	r2, [r7, #11]
 80035a4:	89b9      	ldrh	r1, [r7, #12]
 80035a6:	8ab8      	ldrh	r0, [r7, #20]
 80035a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80035ac:	9300      	str	r3, [sp, #0]
 80035ae:	4613      	mov	r3, r2
 80035b0:	222e      	movs	r2, #46	; 0x2e
 80035b2:	f7fe fe7d 	bl	80022b0 <UB_VGA_DrawBitmap>
 80035b6:	e00c      	b.n	80035d2 <UB_VGA_writeText+0x11aa>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 520, color, fontsize); break;
 80035b8:	7afa      	ldrb	r2, [r7, #11]
 80035ba:	89b9      	ldrh	r1, [r7, #12]
 80035bc:	8ab8      	ldrh	r0, [r7, #20]
 80035be:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80035c2:	9300      	str	r3, [sp, #0]
 80035c4:	4613      	mov	r3, r2
 80035c6:	f44f 7202 	mov.w	r2, #520	; 0x208
 80035ca:	f7fe fe71 	bl	80022b0 <UB_VGA_DrawBitmap>
 80035ce:	e000      	b.n	80035d2 <UB_VGA_writeText+0x11aa>
                			default: break;
 80035d0:	bf00      	nop
                	default: break;
 80035d2:	bf00      	nop
            	}
                break;
 80035d4:	e1fe      	b.n	80039d4 <UB_VGA_writeText+0x15ac>
            case 'v':
            	switch(fontname)
 80035d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d002      	beq.n	80035e4 <UB_VGA_writeText+0x11bc>
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d02f      	beq.n	8003642 <UB_VGA_writeText+0x121a>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 21, color, fontsize); break;
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 47, color, fontsize); break;
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 521, color, fontsize); break;
                			default: break;
                		}
                	default: break;
 80035e2:	e05c      	b.n	800369e <UB_VGA_writeText+0x1276>
            			switch(fontstyle)
 80035e4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80035e8:	2b03      	cmp	r3, #3
 80035ea:	d01c      	beq.n	8003626 <UB_VGA_writeText+0x11fe>
 80035ec:	2b03      	cmp	r3, #3
 80035ee:	dc26      	bgt.n	800363e <UB_VGA_writeText+0x1216>
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d002      	beq.n	80035fa <UB_VGA_writeText+0x11d2>
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d00b      	beq.n	8003610 <UB_VGA_writeText+0x11e8>
            				default: break;
 80035f8:	e021      	b.n	800363e <UB_VGA_writeText+0x1216>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'v', color, fontsize); break;
 80035fa:	7afa      	ldrb	r2, [r7, #11]
 80035fc:	89b9      	ldrh	r1, [r7, #12]
 80035fe:	8ab8      	ldrh	r0, [r7, #20]
 8003600:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003604:	9300      	str	r3, [sp, #0]
 8003606:	4613      	mov	r3, r2
 8003608:	2276      	movs	r2, #118	; 0x76
 800360a:	f7fe fe51 	bl	80022b0 <UB_VGA_DrawBitmap>
 800360e:	e017      	b.n	8003640 <UB_VGA_writeText+0x1218>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'V', color, fontsize); break;
 8003610:	7afa      	ldrb	r2, [r7, #11]
 8003612:	89b9      	ldrh	r1, [r7, #12]
 8003614:	8ab8      	ldrh	r0, [r7, #20]
 8003616:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800361a:	9300      	str	r3, [sp, #0]
 800361c:	4613      	mov	r3, r2
 800361e:	2256      	movs	r2, #86	; 0x56
 8003620:	f7fe fe46 	bl	80022b0 <UB_VGA_DrawBitmap>
 8003624:	e00c      	b.n	8003640 <UB_VGA_writeText+0x1218>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 547, color, fontsize); break;
 8003626:	7afa      	ldrb	r2, [r7, #11]
 8003628:	89b9      	ldrh	r1, [r7, #12]
 800362a:	8ab8      	ldrh	r0, [r7, #20]
 800362c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	4613      	mov	r3, r2
 8003634:	f240 2223 	movw	r2, #547	; 0x223
 8003638:	f7fe fe3a 	bl	80022b0 <UB_VGA_DrawBitmap>
 800363c:	e000      	b.n	8003640 <UB_VGA_writeText+0x1218>
            				default: break;
 800363e:	bf00      	nop
            			break;
 8003640:	e02e      	b.n	80036a0 <UB_VGA_writeText+0x1278>
                		switch(fontstyle)
 8003642:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003646:	2b03      	cmp	r3, #3
 8003648:	d01c      	beq.n	8003684 <UB_VGA_writeText+0x125c>
 800364a:	2b03      	cmp	r3, #3
 800364c:	dc26      	bgt.n	800369c <UB_VGA_writeText+0x1274>
 800364e:	2b01      	cmp	r3, #1
 8003650:	d002      	beq.n	8003658 <UB_VGA_writeText+0x1230>
 8003652:	2b02      	cmp	r3, #2
 8003654:	d00b      	beq.n	800366e <UB_VGA_writeText+0x1246>
                			default: break;
 8003656:	e021      	b.n	800369c <UB_VGA_writeText+0x1274>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 21, color, fontsize); break;
 8003658:	7afa      	ldrb	r2, [r7, #11]
 800365a:	89b9      	ldrh	r1, [r7, #12]
 800365c:	8ab8      	ldrh	r0, [r7, #20]
 800365e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003662:	9300      	str	r3, [sp, #0]
 8003664:	4613      	mov	r3, r2
 8003666:	2215      	movs	r2, #21
 8003668:	f7fe fe22 	bl	80022b0 <UB_VGA_DrawBitmap>
 800366c:	e017      	b.n	800369e <UB_VGA_writeText+0x1276>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 47, color, fontsize); break;
 800366e:	7afa      	ldrb	r2, [r7, #11]
 8003670:	89b9      	ldrh	r1, [r7, #12]
 8003672:	8ab8      	ldrh	r0, [r7, #20]
 8003674:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003678:	9300      	str	r3, [sp, #0]
 800367a:	4613      	mov	r3, r2
 800367c:	222f      	movs	r2, #47	; 0x2f
 800367e:	f7fe fe17 	bl	80022b0 <UB_VGA_DrawBitmap>
 8003682:	e00c      	b.n	800369e <UB_VGA_writeText+0x1276>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 521, color, fontsize); break;
 8003684:	7afa      	ldrb	r2, [r7, #11]
 8003686:	89b9      	ldrh	r1, [r7, #12]
 8003688:	8ab8      	ldrh	r0, [r7, #20]
 800368a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800368e:	9300      	str	r3, [sp, #0]
 8003690:	4613      	mov	r3, r2
 8003692:	f240 2209 	movw	r2, #521	; 0x209
 8003696:	f7fe fe0b 	bl	80022b0 <UB_VGA_DrawBitmap>
 800369a:	e000      	b.n	800369e <UB_VGA_writeText+0x1276>
                			default: break;
 800369c:	bf00      	nop
                	default: break;
 800369e:	bf00      	nop
            	}
                break;
 80036a0:	e198      	b.n	80039d4 <UB_VGA_writeText+0x15ac>
            case 'w':
            	switch(fontname)
 80036a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d002      	beq.n	80036b0 <UB_VGA_writeText+0x1288>
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d02f      	beq.n	800370e <UB_VGA_writeText+0x12e6>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 22, color, fontsize); break;
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 48, color, fontsize); break;
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 522, color, fontsize); break;
                			default: break;
                		}
                	default: break;
 80036ae:	e05c      	b.n	800376a <UB_VGA_writeText+0x1342>
            			switch(fontstyle)
 80036b0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80036b4:	2b03      	cmp	r3, #3
 80036b6:	d01c      	beq.n	80036f2 <UB_VGA_writeText+0x12ca>
 80036b8:	2b03      	cmp	r3, #3
 80036ba:	dc26      	bgt.n	800370a <UB_VGA_writeText+0x12e2>
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d002      	beq.n	80036c6 <UB_VGA_writeText+0x129e>
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d00b      	beq.n	80036dc <UB_VGA_writeText+0x12b4>
            				default: break;
 80036c4:	e021      	b.n	800370a <UB_VGA_writeText+0x12e2>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'w', color, fontsize); break;
 80036c6:	7afa      	ldrb	r2, [r7, #11]
 80036c8:	89b9      	ldrh	r1, [r7, #12]
 80036ca:	8ab8      	ldrh	r0, [r7, #20]
 80036cc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80036d0:	9300      	str	r3, [sp, #0]
 80036d2:	4613      	mov	r3, r2
 80036d4:	2277      	movs	r2, #119	; 0x77
 80036d6:	f7fe fdeb 	bl	80022b0 <UB_VGA_DrawBitmap>
 80036da:	e017      	b.n	800370c <UB_VGA_writeText+0x12e4>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'W', color, fontsize); break;
 80036dc:	7afa      	ldrb	r2, [r7, #11]
 80036de:	89b9      	ldrh	r1, [r7, #12]
 80036e0:	8ab8      	ldrh	r0, [r7, #20]
 80036e2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	4613      	mov	r3, r2
 80036ea:	2257      	movs	r2, #87	; 0x57
 80036ec:	f7fe fde0 	bl	80022b0 <UB_VGA_DrawBitmap>
 80036f0:	e00c      	b.n	800370c <UB_VGA_writeText+0x12e4>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 548, color, fontsize); break;
 80036f2:	7afa      	ldrb	r2, [r7, #11]
 80036f4:	89b9      	ldrh	r1, [r7, #12]
 80036f6:	8ab8      	ldrh	r0, [r7, #20]
 80036f8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80036fc:	9300      	str	r3, [sp, #0]
 80036fe:	4613      	mov	r3, r2
 8003700:	f44f 7209 	mov.w	r2, #548	; 0x224
 8003704:	f7fe fdd4 	bl	80022b0 <UB_VGA_DrawBitmap>
 8003708:	e000      	b.n	800370c <UB_VGA_writeText+0x12e4>
            				default: break;
 800370a:	bf00      	nop
            			break;
 800370c:	e02e      	b.n	800376c <UB_VGA_writeText+0x1344>
                		switch(fontstyle)
 800370e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003712:	2b03      	cmp	r3, #3
 8003714:	d01c      	beq.n	8003750 <UB_VGA_writeText+0x1328>
 8003716:	2b03      	cmp	r3, #3
 8003718:	dc26      	bgt.n	8003768 <UB_VGA_writeText+0x1340>
 800371a:	2b01      	cmp	r3, #1
 800371c:	d002      	beq.n	8003724 <UB_VGA_writeText+0x12fc>
 800371e:	2b02      	cmp	r3, #2
 8003720:	d00b      	beq.n	800373a <UB_VGA_writeText+0x1312>
                			default: break;
 8003722:	e021      	b.n	8003768 <UB_VGA_writeText+0x1340>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 22, color, fontsize); break;
 8003724:	7afa      	ldrb	r2, [r7, #11]
 8003726:	89b9      	ldrh	r1, [r7, #12]
 8003728:	8ab8      	ldrh	r0, [r7, #20]
 800372a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	4613      	mov	r3, r2
 8003732:	2216      	movs	r2, #22
 8003734:	f7fe fdbc 	bl	80022b0 <UB_VGA_DrawBitmap>
 8003738:	e017      	b.n	800376a <UB_VGA_writeText+0x1342>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 48, color, fontsize); break;
 800373a:	7afa      	ldrb	r2, [r7, #11]
 800373c:	89b9      	ldrh	r1, [r7, #12]
 800373e:	8ab8      	ldrh	r0, [r7, #20]
 8003740:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	4613      	mov	r3, r2
 8003748:	2230      	movs	r2, #48	; 0x30
 800374a:	f7fe fdb1 	bl	80022b0 <UB_VGA_DrawBitmap>
 800374e:	e00c      	b.n	800376a <UB_VGA_writeText+0x1342>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 522, color, fontsize); break;
 8003750:	7afa      	ldrb	r2, [r7, #11]
 8003752:	89b9      	ldrh	r1, [r7, #12]
 8003754:	8ab8      	ldrh	r0, [r7, #20]
 8003756:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800375a:	9300      	str	r3, [sp, #0]
 800375c:	4613      	mov	r3, r2
 800375e:	f240 220a 	movw	r2, #522	; 0x20a
 8003762:	f7fe fda5 	bl	80022b0 <UB_VGA_DrawBitmap>
 8003766:	e000      	b.n	800376a <UB_VGA_writeText+0x1342>
                			default: break;
 8003768:	bf00      	nop
                	default: break;
 800376a:	bf00      	nop
            	}
                break;
 800376c:	e132      	b.n	80039d4 <UB_VGA_writeText+0x15ac>
            case 'x':
            	switch(fontname)
 800376e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d002      	beq.n	800377c <UB_VGA_writeText+0x1354>
 8003776:	2b02      	cmp	r3, #2
 8003778:	d02f      	beq.n	80037da <UB_VGA_writeText+0x13b2>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 23, color, fontsize); break;
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 49, color, fontsize); break;
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 523, color, fontsize); break;
                			default: break;
                		}
                	default: break;
 800377a:	e05c      	b.n	8003836 <UB_VGA_writeText+0x140e>
            			switch(fontstyle)
 800377c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003780:	2b03      	cmp	r3, #3
 8003782:	d01c      	beq.n	80037be <UB_VGA_writeText+0x1396>
 8003784:	2b03      	cmp	r3, #3
 8003786:	dc26      	bgt.n	80037d6 <UB_VGA_writeText+0x13ae>
 8003788:	2b01      	cmp	r3, #1
 800378a:	d002      	beq.n	8003792 <UB_VGA_writeText+0x136a>
 800378c:	2b02      	cmp	r3, #2
 800378e:	d00b      	beq.n	80037a8 <UB_VGA_writeText+0x1380>
            				default: break;
 8003790:	e021      	b.n	80037d6 <UB_VGA_writeText+0x13ae>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'x', color, fontsize); break;
 8003792:	7afa      	ldrb	r2, [r7, #11]
 8003794:	89b9      	ldrh	r1, [r7, #12]
 8003796:	8ab8      	ldrh	r0, [r7, #20]
 8003798:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	4613      	mov	r3, r2
 80037a0:	2278      	movs	r2, #120	; 0x78
 80037a2:	f7fe fd85 	bl	80022b0 <UB_VGA_DrawBitmap>
 80037a6:	e017      	b.n	80037d8 <UB_VGA_writeText+0x13b0>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'X', color, fontsize); break;
 80037a8:	7afa      	ldrb	r2, [r7, #11]
 80037aa:	89b9      	ldrh	r1, [r7, #12]
 80037ac:	8ab8      	ldrh	r0, [r7, #20]
 80037ae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	4613      	mov	r3, r2
 80037b6:	2258      	movs	r2, #88	; 0x58
 80037b8:	f7fe fd7a 	bl	80022b0 <UB_VGA_DrawBitmap>
 80037bc:	e00c      	b.n	80037d8 <UB_VGA_writeText+0x13b0>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 549, color, fontsize); break;
 80037be:	7afa      	ldrb	r2, [r7, #11]
 80037c0:	89b9      	ldrh	r1, [r7, #12]
 80037c2:	8ab8      	ldrh	r0, [r7, #20]
 80037c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80037c8:	9300      	str	r3, [sp, #0]
 80037ca:	4613      	mov	r3, r2
 80037cc:	f240 2225 	movw	r2, #549	; 0x225
 80037d0:	f7fe fd6e 	bl	80022b0 <UB_VGA_DrawBitmap>
 80037d4:	e000      	b.n	80037d8 <UB_VGA_writeText+0x13b0>
            				default: break;
 80037d6:	bf00      	nop
            			break;
 80037d8:	e02e      	b.n	8003838 <UB_VGA_writeText+0x1410>
                		switch(fontstyle)
 80037da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80037de:	2b03      	cmp	r3, #3
 80037e0:	d01c      	beq.n	800381c <UB_VGA_writeText+0x13f4>
 80037e2:	2b03      	cmp	r3, #3
 80037e4:	dc26      	bgt.n	8003834 <UB_VGA_writeText+0x140c>
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d002      	beq.n	80037f0 <UB_VGA_writeText+0x13c8>
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d00b      	beq.n	8003806 <UB_VGA_writeText+0x13de>
                			default: break;
 80037ee:	e021      	b.n	8003834 <UB_VGA_writeText+0x140c>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 23, color, fontsize); break;
 80037f0:	7afa      	ldrb	r2, [r7, #11]
 80037f2:	89b9      	ldrh	r1, [r7, #12]
 80037f4:	8ab8      	ldrh	r0, [r7, #20]
 80037f6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80037fa:	9300      	str	r3, [sp, #0]
 80037fc:	4613      	mov	r3, r2
 80037fe:	2217      	movs	r2, #23
 8003800:	f7fe fd56 	bl	80022b0 <UB_VGA_DrawBitmap>
 8003804:	e017      	b.n	8003836 <UB_VGA_writeText+0x140e>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 49, color, fontsize); break;
 8003806:	7afa      	ldrb	r2, [r7, #11]
 8003808:	89b9      	ldrh	r1, [r7, #12]
 800380a:	8ab8      	ldrh	r0, [r7, #20]
 800380c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003810:	9300      	str	r3, [sp, #0]
 8003812:	4613      	mov	r3, r2
 8003814:	2231      	movs	r2, #49	; 0x31
 8003816:	f7fe fd4b 	bl	80022b0 <UB_VGA_DrawBitmap>
 800381a:	e00c      	b.n	8003836 <UB_VGA_writeText+0x140e>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 523, color, fontsize); break;
 800381c:	7afa      	ldrb	r2, [r7, #11]
 800381e:	89b9      	ldrh	r1, [r7, #12]
 8003820:	8ab8      	ldrh	r0, [r7, #20]
 8003822:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003826:	9300      	str	r3, [sp, #0]
 8003828:	4613      	mov	r3, r2
 800382a:	f240 220b 	movw	r2, #523	; 0x20b
 800382e:	f7fe fd3f 	bl	80022b0 <UB_VGA_DrawBitmap>
 8003832:	e000      	b.n	8003836 <UB_VGA_writeText+0x140e>
                			default: break;
 8003834:	bf00      	nop
                	default: break;
 8003836:	bf00      	nop
            	}
                break;
 8003838:	e0cc      	b.n	80039d4 <UB_VGA_writeText+0x15ac>
            case 'y':
            	switch(fontname)
 800383a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d002      	beq.n	8003848 <UB_VGA_writeText+0x1420>
 8003842:	2b02      	cmp	r3, #2
 8003844:	d02f      	beq.n	80038a6 <UB_VGA_writeText+0x147e>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 24, color, fontsize); break;
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 50, color, fontsize); break;
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 524, color, fontsize); break;
                			default: break;
                		}
                	default: break;
 8003846:	e05c      	b.n	8003902 <UB_VGA_writeText+0x14da>
            			switch(fontstyle)
 8003848:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800384c:	2b03      	cmp	r3, #3
 800384e:	d01c      	beq.n	800388a <UB_VGA_writeText+0x1462>
 8003850:	2b03      	cmp	r3, #3
 8003852:	dc26      	bgt.n	80038a2 <UB_VGA_writeText+0x147a>
 8003854:	2b01      	cmp	r3, #1
 8003856:	d002      	beq.n	800385e <UB_VGA_writeText+0x1436>
 8003858:	2b02      	cmp	r3, #2
 800385a:	d00b      	beq.n	8003874 <UB_VGA_writeText+0x144c>
            				default: break;
 800385c:	e021      	b.n	80038a2 <UB_VGA_writeText+0x147a>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'y', color, fontsize); break;
 800385e:	7afa      	ldrb	r2, [r7, #11]
 8003860:	89b9      	ldrh	r1, [r7, #12]
 8003862:	8ab8      	ldrh	r0, [r7, #20]
 8003864:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003868:	9300      	str	r3, [sp, #0]
 800386a:	4613      	mov	r3, r2
 800386c:	2279      	movs	r2, #121	; 0x79
 800386e:	f7fe fd1f 	bl	80022b0 <UB_VGA_DrawBitmap>
 8003872:	e017      	b.n	80038a4 <UB_VGA_writeText+0x147c>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'Y', color, fontsize); break;
 8003874:	7afa      	ldrb	r2, [r7, #11]
 8003876:	89b9      	ldrh	r1, [r7, #12]
 8003878:	8ab8      	ldrh	r0, [r7, #20]
 800387a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800387e:	9300      	str	r3, [sp, #0]
 8003880:	4613      	mov	r3, r2
 8003882:	2259      	movs	r2, #89	; 0x59
 8003884:	f7fe fd14 	bl	80022b0 <UB_VGA_DrawBitmap>
 8003888:	e00c      	b.n	80038a4 <UB_VGA_writeText+0x147c>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 550, color, fontsize); break;
 800388a:	7afa      	ldrb	r2, [r7, #11]
 800388c:	89b9      	ldrh	r1, [r7, #12]
 800388e:	8ab8      	ldrh	r0, [r7, #20]
 8003890:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	4613      	mov	r3, r2
 8003898:	f240 2226 	movw	r2, #550	; 0x226
 800389c:	f7fe fd08 	bl	80022b0 <UB_VGA_DrawBitmap>
 80038a0:	e000      	b.n	80038a4 <UB_VGA_writeText+0x147c>
            				default: break;
 80038a2:	bf00      	nop
            			break;
 80038a4:	e02e      	b.n	8003904 <UB_VGA_writeText+0x14dc>
                		switch(fontstyle)
 80038a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80038aa:	2b03      	cmp	r3, #3
 80038ac:	d01c      	beq.n	80038e8 <UB_VGA_writeText+0x14c0>
 80038ae:	2b03      	cmp	r3, #3
 80038b0:	dc26      	bgt.n	8003900 <UB_VGA_writeText+0x14d8>
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d002      	beq.n	80038bc <UB_VGA_writeText+0x1494>
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d00b      	beq.n	80038d2 <UB_VGA_writeText+0x14aa>
                			default: break;
 80038ba:	e021      	b.n	8003900 <UB_VGA_writeText+0x14d8>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 24, color, fontsize); break;
 80038bc:	7afa      	ldrb	r2, [r7, #11]
 80038be:	89b9      	ldrh	r1, [r7, #12]
 80038c0:	8ab8      	ldrh	r0, [r7, #20]
 80038c2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	4613      	mov	r3, r2
 80038ca:	2218      	movs	r2, #24
 80038cc:	f7fe fcf0 	bl	80022b0 <UB_VGA_DrawBitmap>
 80038d0:	e017      	b.n	8003902 <UB_VGA_writeText+0x14da>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 50, color, fontsize); break;
 80038d2:	7afa      	ldrb	r2, [r7, #11]
 80038d4:	89b9      	ldrh	r1, [r7, #12]
 80038d6:	8ab8      	ldrh	r0, [r7, #20]
 80038d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	4613      	mov	r3, r2
 80038e0:	2232      	movs	r2, #50	; 0x32
 80038e2:	f7fe fce5 	bl	80022b0 <UB_VGA_DrawBitmap>
 80038e6:	e00c      	b.n	8003902 <UB_VGA_writeText+0x14da>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 524, color, fontsize); break;
 80038e8:	7afa      	ldrb	r2, [r7, #11]
 80038ea:	89b9      	ldrh	r1, [r7, #12]
 80038ec:	8ab8      	ldrh	r0, [r7, #20]
 80038ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	4613      	mov	r3, r2
 80038f6:	f44f 7203 	mov.w	r2, #524	; 0x20c
 80038fa:	f7fe fcd9 	bl	80022b0 <UB_VGA_DrawBitmap>
 80038fe:	e000      	b.n	8003902 <UB_VGA_writeText+0x14da>
                			default: break;
 8003900:	bf00      	nop
                	default: break;
 8003902:	bf00      	nop
            	}
                break;
 8003904:	e066      	b.n	80039d4 <UB_VGA_writeText+0x15ac>
            case 'z':
            	switch(fontname)
 8003906:	f897 3020 	ldrb.w	r3, [r7, #32]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d002      	beq.n	8003914 <UB_VGA_writeText+0x14ec>
 800390e:	2b02      	cmp	r3, #2
 8003910:	d02f      	beq.n	8003972 <UB_VGA_writeText+0x154a>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 25, color, fontsize); break;
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 51, color, fontsize); break;
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 525, color, fontsize); break;
                			default: break;
                		}
                	default: break;
 8003912:	e05c      	b.n	80039ce <UB_VGA_writeText+0x15a6>
            			switch(fontstyle)
 8003914:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003918:	2b03      	cmp	r3, #3
 800391a:	d01c      	beq.n	8003956 <UB_VGA_writeText+0x152e>
 800391c:	2b03      	cmp	r3, #3
 800391e:	dc26      	bgt.n	800396e <UB_VGA_writeText+0x1546>
 8003920:	2b01      	cmp	r3, #1
 8003922:	d002      	beq.n	800392a <UB_VGA_writeText+0x1502>
 8003924:	2b02      	cmp	r3, #2
 8003926:	d00b      	beq.n	8003940 <UB_VGA_writeText+0x1518>
            				default: break;
 8003928:	e021      	b.n	800396e <UB_VGA_writeText+0x1546>
            				case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'z', color, fontsize); break;
 800392a:	7afa      	ldrb	r2, [r7, #11]
 800392c:	89b9      	ldrh	r1, [r7, #12]
 800392e:	8ab8      	ldrh	r0, [r7, #20]
 8003930:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003934:	9300      	str	r3, [sp, #0]
 8003936:	4613      	mov	r3, r2
 8003938:	227a      	movs	r2, #122	; 0x7a
 800393a:	f7fe fcb9 	bl	80022b0 <UB_VGA_DrawBitmap>
 800393e:	e017      	b.n	8003970 <UB_VGA_writeText+0x1548>
            				case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 'Z', color, fontsize); break;
 8003940:	7afa      	ldrb	r2, [r7, #11]
 8003942:	89b9      	ldrh	r1, [r7, #12]
 8003944:	8ab8      	ldrh	r0, [r7, #20]
 8003946:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	4613      	mov	r3, r2
 800394e:	225a      	movs	r2, #90	; 0x5a
 8003950:	f7fe fcae 	bl	80022b0 <UB_VGA_DrawBitmap>
 8003954:	e00c      	b.n	8003970 <UB_VGA_writeText+0x1548>
            				case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 551, color, fontsize); break;
 8003956:	7afa      	ldrb	r2, [r7, #11]
 8003958:	89b9      	ldrh	r1, [r7, #12]
 800395a:	8ab8      	ldrh	r0, [r7, #20]
 800395c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003960:	9300      	str	r3, [sp, #0]
 8003962:	4613      	mov	r3, r2
 8003964:	f240 2227 	movw	r2, #551	; 0x227
 8003968:	f7fe fca2 	bl	80022b0 <UB_VGA_DrawBitmap>
 800396c:	e000      	b.n	8003970 <UB_VGA_writeText+0x1548>
            				default: break;
 800396e:	bf00      	nop
            			break;
 8003970:	e02e      	b.n	80039d0 <UB_VGA_writeText+0x15a8>
                		switch(fontstyle)
 8003972:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003976:	2b03      	cmp	r3, #3
 8003978:	d01c      	beq.n	80039b4 <UB_VGA_writeText+0x158c>
 800397a:	2b03      	cmp	r3, #3
 800397c:	dc26      	bgt.n	80039cc <UB_VGA_writeText+0x15a4>
 800397e:	2b01      	cmp	r3, #1
 8003980:	d002      	beq.n	8003988 <UB_VGA_writeText+0x1560>
 8003982:	2b02      	cmp	r3, #2
 8003984:	d00b      	beq.n	800399e <UB_VGA_writeText+0x1576>
                			default: break;
 8003986:	e021      	b.n	80039cc <UB_VGA_writeText+0x15a4>
                			case NORMAL_STYLE: UB_VGA_DrawBitmap(px, y_lup, 25, color, fontsize); break;
 8003988:	7afa      	ldrb	r2, [r7, #11]
 800398a:	89b9      	ldrh	r1, [r7, #12]
 800398c:	8ab8      	ldrh	r0, [r7, #20]
 800398e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003992:	9300      	str	r3, [sp, #0]
 8003994:	4613      	mov	r3, r2
 8003996:	2219      	movs	r2, #25
 8003998:	f7fe fc8a 	bl	80022b0 <UB_VGA_DrawBitmap>
 800399c:	e017      	b.n	80039ce <UB_VGA_writeText+0x15a6>
                			case BOLD_STYLE: UB_VGA_DrawBitmap(px, y_lup, 51, color, fontsize); break;
 800399e:	7afa      	ldrb	r2, [r7, #11]
 80039a0:	89b9      	ldrh	r1, [r7, #12]
 80039a2:	8ab8      	ldrh	r0, [r7, #20]
 80039a4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	4613      	mov	r3, r2
 80039ac:	2233      	movs	r2, #51	; 0x33
 80039ae:	f7fe fc7f 	bl	80022b0 <UB_VGA_DrawBitmap>
 80039b2:	e00c      	b.n	80039ce <UB_VGA_writeText+0x15a6>
                			case CURSIVE_STYLE: UB_VGA_DrawBitmap(px, y_lup, 525, color, fontsize); break;
 80039b4:	7afa      	ldrb	r2, [r7, #11]
 80039b6:	89b9      	ldrh	r1, [r7, #12]
 80039b8:	8ab8      	ldrh	r0, [r7, #20]
 80039ba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80039be:	9300      	str	r3, [sp, #0]
 80039c0:	4613      	mov	r3, r2
 80039c2:	f240 220d 	movw	r2, #525	; 0x20d
 80039c6:	f7fe fc73 	bl	80022b0 <UB_VGA_DrawBitmap>
 80039ca:	e000      	b.n	80039ce <UB_VGA_writeText+0x15a6>
                			default: break;
 80039cc:	bf00      	nop
                	default: break;
 80039ce:	bf00      	nop
            	}
                break;
 80039d0:	e000      	b.n	80039d4 <UB_VGA_writeText+0x15ac>
            default:
                break;
 80039d2:	bf00      	nop
    for(i=0; i < 20; i++)	//maximum text size of 20 letters
 80039d4:	7dfb      	ldrb	r3, [r7, #23]
 80039d6:	3301      	adds	r3, #1
 80039d8:	75fb      	strb	r3, [r7, #23]
 80039da:	7dfb      	ldrb	r3, [r7, #23]
 80039dc:	2b13      	cmp	r3, #19
 80039de:	f67e ad44 	bls.w	800246a <UB_VGA_writeText+0x42>


        }
    }
}
 80039e2:	bf00      	nop
 80039e4:	bf00      	nop
 80039e6:	3718      	adds	r7, #24
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80039f0:	4b0e      	ldr	r3, [pc, #56]	; (8003a2c <HAL_Init+0x40>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a0d      	ldr	r2, [pc, #52]	; (8003a2c <HAL_Init+0x40>)
 80039f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80039fc:	4b0b      	ldr	r3, [pc, #44]	; (8003a2c <HAL_Init+0x40>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a0a      	ldr	r2, [pc, #40]	; (8003a2c <HAL_Init+0x40>)
 8003a02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a08:	4b08      	ldr	r3, [pc, #32]	; (8003a2c <HAL_Init+0x40>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a07      	ldr	r2, [pc, #28]	; (8003a2c <HAL_Init+0x40>)
 8003a0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a14:	2003      	movs	r0, #3
 8003a16:	f000 f92b 	bl	8003c70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a1a:	2000      	movs	r0, #0
 8003a1c:	f000 f808 	bl	8003a30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a20:	f7fd fd5c 	bl	80014dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	40023c00 	.word	0x40023c00

08003a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a38:	4b12      	ldr	r3, [pc, #72]	; (8003a84 <HAL_InitTick+0x54>)
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	4b12      	ldr	r3, [pc, #72]	; (8003a88 <HAL_InitTick+0x58>)
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	4619      	mov	r1, r3
 8003a42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a46:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f000 f943 	bl	8003cda <HAL_SYSTICK_Config>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e00e      	b.n	8003a7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b0f      	cmp	r3, #15
 8003a62:	d80a      	bhi.n	8003a7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a64:	2200      	movs	r2, #0
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	f04f 30ff 	mov.w	r0, #4294967295
 8003a6c:	f000 f90b 	bl	8003c86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a70:	4a06      	ldr	r2, [pc, #24]	; (8003a8c <HAL_InitTick+0x5c>)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
 8003a78:	e000      	b.n	8003a7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3708      	adds	r7, #8
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	200000a8 	.word	0x200000a8
 8003a88:	200000b0 	.word	0x200000b0
 8003a8c:	200000ac 	.word	0x200000ac

08003a90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a94:	4b06      	ldr	r3, [pc, #24]	; (8003ab0 <HAL_IncTick+0x20>)
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	461a      	mov	r2, r3
 8003a9a:	4b06      	ldr	r3, [pc, #24]	; (8003ab4 <HAL_IncTick+0x24>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	4a04      	ldr	r2, [pc, #16]	; (8003ab4 <HAL_IncTick+0x24>)
 8003aa2:	6013      	str	r3, [r2, #0]
}
 8003aa4:	bf00      	nop
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	200000b0 	.word	0x200000b0
 8003ab4:	20013b2c 	.word	0x20013b2c

08003ab8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0
  return uwTick;
 8003abc:	4b03      	ldr	r3, [pc, #12]	; (8003acc <HAL_GetTick+0x14>)
 8003abe:	681b      	ldr	r3, [r3, #0]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	20013b2c 	.word	0x20013b2c

08003ad0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f003 0307 	and.w	r3, r3, #7
 8003ade:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ae0:	4b0c      	ldr	r3, [pc, #48]	; (8003b14 <__NVIC_SetPriorityGrouping+0x44>)
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ae6:	68ba      	ldr	r2, [r7, #8]
 8003ae8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003aec:	4013      	ands	r3, r2
 8003aee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003af8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b02:	4a04      	ldr	r2, [pc, #16]	; (8003b14 <__NVIC_SetPriorityGrouping+0x44>)
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	60d3      	str	r3, [r2, #12]
}
 8003b08:	bf00      	nop
 8003b0a:	3714      	adds	r7, #20
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr
 8003b14:	e000ed00 	.word	0xe000ed00

08003b18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b1c:	4b04      	ldr	r3, [pc, #16]	; (8003b30 <__NVIC_GetPriorityGrouping+0x18>)
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	0a1b      	lsrs	r3, r3, #8
 8003b22:	f003 0307 	and.w	r3, r3, #7
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr
 8003b30:	e000ed00 	.word	0xe000ed00

08003b34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	db0b      	blt.n	8003b5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b46:	79fb      	ldrb	r3, [r7, #7]
 8003b48:	f003 021f 	and.w	r2, r3, #31
 8003b4c:	4907      	ldr	r1, [pc, #28]	; (8003b6c <__NVIC_EnableIRQ+0x38>)
 8003b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b52:	095b      	lsrs	r3, r3, #5
 8003b54:	2001      	movs	r0, #1
 8003b56:	fa00 f202 	lsl.w	r2, r0, r2
 8003b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b5e:	bf00      	nop
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	e000e100 	.word	0xe000e100

08003b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	4603      	mov	r3, r0
 8003b78:	6039      	str	r1, [r7, #0]
 8003b7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	db0a      	blt.n	8003b9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	b2da      	uxtb	r2, r3
 8003b88:	490c      	ldr	r1, [pc, #48]	; (8003bbc <__NVIC_SetPriority+0x4c>)
 8003b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b8e:	0112      	lsls	r2, r2, #4
 8003b90:	b2d2      	uxtb	r2, r2
 8003b92:	440b      	add	r3, r1
 8003b94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b98:	e00a      	b.n	8003bb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	b2da      	uxtb	r2, r3
 8003b9e:	4908      	ldr	r1, [pc, #32]	; (8003bc0 <__NVIC_SetPriority+0x50>)
 8003ba0:	79fb      	ldrb	r3, [r7, #7]
 8003ba2:	f003 030f 	and.w	r3, r3, #15
 8003ba6:	3b04      	subs	r3, #4
 8003ba8:	0112      	lsls	r2, r2, #4
 8003baa:	b2d2      	uxtb	r2, r2
 8003bac:	440b      	add	r3, r1
 8003bae:	761a      	strb	r2, [r3, #24]
}
 8003bb0:	bf00      	nop
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr
 8003bbc:	e000e100 	.word	0xe000e100
 8003bc0:	e000ed00 	.word	0xe000ed00

08003bc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b089      	sub	sp, #36	; 0x24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f003 0307 	and.w	r3, r3, #7
 8003bd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	f1c3 0307 	rsb	r3, r3, #7
 8003bde:	2b04      	cmp	r3, #4
 8003be0:	bf28      	it	cs
 8003be2:	2304      	movcs	r3, #4
 8003be4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	3304      	adds	r3, #4
 8003bea:	2b06      	cmp	r3, #6
 8003bec:	d902      	bls.n	8003bf4 <NVIC_EncodePriority+0x30>
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	3b03      	subs	r3, #3
 8003bf2:	e000      	b.n	8003bf6 <NVIC_EncodePriority+0x32>
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003c02:	43da      	mvns	r2, r3
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	401a      	ands	r2, r3
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	fa01 f303 	lsl.w	r3, r1, r3
 8003c16:	43d9      	mvns	r1, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c1c:	4313      	orrs	r3, r2
         );
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3724      	adds	r7, #36	; 0x24
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
	...

08003c2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	3b01      	subs	r3, #1
 8003c38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c3c:	d301      	bcc.n	8003c42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e00f      	b.n	8003c62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c42:	4a0a      	ldr	r2, [pc, #40]	; (8003c6c <SysTick_Config+0x40>)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	3b01      	subs	r3, #1
 8003c48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c4a:	210f      	movs	r1, #15
 8003c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c50:	f7ff ff8e 	bl	8003b70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c54:	4b05      	ldr	r3, [pc, #20]	; (8003c6c <SysTick_Config+0x40>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c5a:	4b04      	ldr	r3, [pc, #16]	; (8003c6c <SysTick_Config+0x40>)
 8003c5c:	2207      	movs	r2, #7
 8003c5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3708      	adds	r7, #8
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	e000e010 	.word	0xe000e010

08003c70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f7ff ff29 	bl	8003ad0 <__NVIC_SetPriorityGrouping>
}
 8003c7e:	bf00      	nop
 8003c80:	3708      	adds	r7, #8
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b086      	sub	sp, #24
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	60b9      	str	r1, [r7, #8]
 8003c90:	607a      	str	r2, [r7, #4]
 8003c92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c98:	f7ff ff3e 	bl	8003b18 <__NVIC_GetPriorityGrouping>
 8003c9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	68b9      	ldr	r1, [r7, #8]
 8003ca2:	6978      	ldr	r0, [r7, #20]
 8003ca4:	f7ff ff8e 	bl	8003bc4 <NVIC_EncodePriority>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cae:	4611      	mov	r1, r2
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7ff ff5d 	bl	8003b70 <__NVIC_SetPriority>
}
 8003cb6:	bf00      	nop
 8003cb8:	3718      	adds	r7, #24
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b082      	sub	sp, #8
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7ff ff31 	bl	8003b34 <__NVIC_EnableIRQ>
}
 8003cd2:	bf00      	nop
 8003cd4:	3708      	adds	r7, #8
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b082      	sub	sp, #8
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f7ff ffa2 	bl	8003c2c <SysTick_Config>
 8003ce8:	4603      	mov	r3, r0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3708      	adds	r7, #8
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
	...

08003cf4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b086      	sub	sp, #24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003d00:	f7ff feda 	bl	8003ab8 <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d101      	bne.n	8003d10 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e099      	b.n	8003e44 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 0201 	bic.w	r2, r2, #1
 8003d2e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d30:	e00f      	b.n	8003d52 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d32:	f7ff fec1 	bl	8003ab8 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b05      	cmp	r3, #5
 8003d3e:	d908      	bls.n	8003d52 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2220      	movs	r2, #32
 8003d44:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2203      	movs	r2, #3
 8003d4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e078      	b.n	8003e44 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0301 	and.w	r3, r3, #1
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1e8      	bne.n	8003d32 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	4b38      	ldr	r3, [pc, #224]	; (8003e4c <HAL_DMA_Init+0x158>)
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a1b      	ldr	r3, [r3, #32]
 8003d9c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da8:	2b04      	cmp	r3, #4
 8003daa:	d107      	bne.n	8003dbc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db4:	4313      	orrs	r3, r2
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f023 0307 	bic.w	r3, r3, #7
 8003dd2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de2:	2b04      	cmp	r3, #4
 8003de4:	d117      	bne.n	8003e16 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00e      	beq.n	8003e16 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 fa91 	bl	8004320 <DMA_CheckFifoParam>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d008      	beq.n	8003e16 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2240      	movs	r2, #64	; 0x40
 8003e08:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003e12:	2301      	movs	r3, #1
 8003e14:	e016      	b.n	8003e44 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 fa48 	bl	80042b4 <DMA_CalcBaseAndBitshift>
 8003e24:	4603      	mov	r3, r0
 8003e26:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e2c:	223f      	movs	r2, #63	; 0x3f
 8003e2e:	409a      	lsls	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3718      	adds	r7, #24
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	f010803f 	.word	0xf010803f

08003e50 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]
 8003e5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e66:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d101      	bne.n	8003e76 <HAL_DMA_Start_IT+0x26>
 8003e72:	2302      	movs	r3, #2
 8003e74:	e040      	b.n	8003ef8 <HAL_DMA_Start_IT+0xa8>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d12f      	bne.n	8003eea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2202      	movs	r2, #2
 8003e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	68b9      	ldr	r1, [r7, #8]
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f000 f9da 	bl	8004258 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea8:	223f      	movs	r2, #63	; 0x3f
 8003eaa:	409a      	lsls	r2, r3
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f042 0216 	orr.w	r2, r2, #22
 8003ebe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d007      	beq.n	8003ed8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f042 0208 	orr.w	r2, r2, #8
 8003ed6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f042 0201 	orr.w	r2, r2, #1
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	e005      	b.n	8003ef6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003ef6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3718      	adds	r7, #24
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d004      	beq.n	8003f1e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2280      	movs	r2, #128	; 0x80
 8003f18:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e00c      	b.n	8003f38 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2205      	movs	r2, #5
 8003f22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 0201 	bic.w	r2, r2, #1
 8003f34:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b086      	sub	sp, #24
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003f50:	4b8e      	ldr	r3, [pc, #568]	; (800418c <HAL_DMA_IRQHandler+0x248>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a8e      	ldr	r2, [pc, #568]	; (8004190 <HAL_DMA_IRQHandler+0x24c>)
 8003f56:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5a:	0a9b      	lsrs	r3, r3, #10
 8003f5c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f62:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f6e:	2208      	movs	r2, #8
 8003f70:	409a      	lsls	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	4013      	ands	r3, r2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d01a      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0304 	and.w	r3, r3, #4
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d013      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 0204 	bic.w	r2, r2, #4
 8003f96:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f9c:	2208      	movs	r2, #8
 8003f9e:	409a      	lsls	r2, r3
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa8:	f043 0201 	orr.w	r2, r3, #1
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	409a      	lsls	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d012      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00b      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	409a      	lsls	r2, r3
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fde:	f043 0202 	orr.w	r2, r3, #2
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fea:	2204      	movs	r2, #4
 8003fec:	409a      	lsls	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d012      	beq.n	800401c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	2b00      	cmp	r3, #0
 8004002:	d00b      	beq.n	800401c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004008:	2204      	movs	r2, #4
 800400a:	409a      	lsls	r2, r3
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004014:	f043 0204 	orr.w	r2, r3, #4
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004020:	2210      	movs	r2, #16
 8004022:	409a      	lsls	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	4013      	ands	r3, r2
 8004028:	2b00      	cmp	r3, #0
 800402a:	d043      	beq.n	80040b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0308 	and.w	r3, r3, #8
 8004036:	2b00      	cmp	r3, #0
 8004038:	d03c      	beq.n	80040b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800403e:	2210      	movs	r2, #16
 8004040:	409a      	lsls	r2, r3
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d018      	beq.n	8004086 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d108      	bne.n	8004074 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004066:	2b00      	cmp	r3, #0
 8004068:	d024      	beq.n	80040b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	4798      	blx	r3
 8004072:	e01f      	b.n	80040b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004078:	2b00      	cmp	r3, #0
 800407a:	d01b      	beq.n	80040b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	4798      	blx	r3
 8004084:	e016      	b.n	80040b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004090:	2b00      	cmp	r3, #0
 8004092:	d107      	bne.n	80040a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f022 0208 	bic.w	r2, r2, #8
 80040a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d003      	beq.n	80040b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b8:	2220      	movs	r2, #32
 80040ba:	409a      	lsls	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	4013      	ands	r3, r2
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f000 808f 	beq.w	80041e4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0310 	and.w	r3, r3, #16
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f000 8087 	beq.w	80041e4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040da:	2220      	movs	r2, #32
 80040dc:	409a      	lsls	r2, r3
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b05      	cmp	r3, #5
 80040ec:	d136      	bne.n	800415c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f022 0216 	bic.w	r2, r2, #22
 80040fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	695a      	ldr	r2, [r3, #20]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800410c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004112:	2b00      	cmp	r3, #0
 8004114:	d103      	bne.n	800411e <HAL_DMA_IRQHandler+0x1da>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800411a:	2b00      	cmp	r3, #0
 800411c:	d007      	beq.n	800412e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f022 0208 	bic.w	r2, r2, #8
 800412c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004132:	223f      	movs	r2, #63	; 0x3f
 8004134:	409a      	lsls	r2, r3
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800414e:	2b00      	cmp	r3, #0
 8004150:	d07e      	beq.n	8004250 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	4798      	blx	r3
        }
        return;
 800415a:	e079      	b.n	8004250 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d01d      	beq.n	80041a6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d10d      	bne.n	8004194 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800417c:	2b00      	cmp	r3, #0
 800417e:	d031      	beq.n	80041e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	4798      	blx	r3
 8004188:	e02c      	b.n	80041e4 <HAL_DMA_IRQHandler+0x2a0>
 800418a:	bf00      	nop
 800418c:	200000a8 	.word	0x200000a8
 8004190:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004198:	2b00      	cmp	r3, #0
 800419a:	d023      	beq.n	80041e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	4798      	blx	r3
 80041a4:	e01e      	b.n	80041e4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d10f      	bne.n	80041d4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 0210 	bic.w	r2, r2, #16
 80041c2:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d003      	beq.n	80041e4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d032      	beq.n	8004252 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d022      	beq.n	800423e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2205      	movs	r2, #5
 80041fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f022 0201 	bic.w	r2, r2, #1
 800420e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	3301      	adds	r3, #1
 8004214:	60bb      	str	r3, [r7, #8]
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	429a      	cmp	r2, r3
 800421a:	d307      	bcc.n	800422c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1f2      	bne.n	8004210 <HAL_DMA_IRQHandler+0x2cc>
 800422a:	e000      	b.n	800422e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800422c:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2201      	movs	r2, #1
 800423a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004242:	2b00      	cmp	r3, #0
 8004244:	d005      	beq.n	8004252 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	4798      	blx	r3
 800424e:	e000      	b.n	8004252 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004250:	bf00      	nop
    }
  }
}
 8004252:	3718      	adds	r7, #24
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
 8004264:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004274:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	2b40      	cmp	r3, #64	; 0x40
 8004284:	d108      	bne.n	8004298 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68ba      	ldr	r2, [r7, #8]
 8004294:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004296:	e007      	b.n	80042a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68ba      	ldr	r2, [r7, #8]
 800429e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	60da      	str	r2, [r3, #12]
}
 80042a8:	bf00      	nop
 80042aa:	3714      	adds	r7, #20
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	3b10      	subs	r3, #16
 80042c4:	4a14      	ldr	r2, [pc, #80]	; (8004318 <DMA_CalcBaseAndBitshift+0x64>)
 80042c6:	fba2 2303 	umull	r2, r3, r2, r3
 80042ca:	091b      	lsrs	r3, r3, #4
 80042cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80042ce:	4a13      	ldr	r2, [pc, #76]	; (800431c <DMA_CalcBaseAndBitshift+0x68>)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	4413      	add	r3, r2
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	461a      	mov	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2b03      	cmp	r3, #3
 80042e0:	d909      	bls.n	80042f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80042ea:	f023 0303 	bic.w	r3, r3, #3
 80042ee:	1d1a      	adds	r2, r3, #4
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	659a      	str	r2, [r3, #88]	; 0x58
 80042f4:	e007      	b.n	8004306 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80042fe:	f023 0303 	bic.w	r3, r3, #3
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800430a:	4618      	mov	r0, r3
 800430c:	3714      	adds	r7, #20
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	aaaaaaab 	.word	0xaaaaaaab
 800431c:	0800d0c0 	.word	0x0800d0c0

08004320 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004328:	2300      	movs	r3, #0
 800432a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004330:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d11f      	bne.n	800437a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	2b03      	cmp	r3, #3
 800433e:	d856      	bhi.n	80043ee <DMA_CheckFifoParam+0xce>
 8004340:	a201      	add	r2, pc, #4	; (adr r2, 8004348 <DMA_CheckFifoParam+0x28>)
 8004342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004346:	bf00      	nop
 8004348:	08004359 	.word	0x08004359
 800434c:	0800436b 	.word	0x0800436b
 8004350:	08004359 	.word	0x08004359
 8004354:	080043ef 	.word	0x080043ef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d046      	beq.n	80043f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004368:	e043      	b.n	80043f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004372:	d140      	bne.n	80043f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004378:	e03d      	b.n	80043f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004382:	d121      	bne.n	80043c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	2b03      	cmp	r3, #3
 8004388:	d837      	bhi.n	80043fa <DMA_CheckFifoParam+0xda>
 800438a:	a201      	add	r2, pc, #4	; (adr r2, 8004390 <DMA_CheckFifoParam+0x70>)
 800438c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004390:	080043a1 	.word	0x080043a1
 8004394:	080043a7 	.word	0x080043a7
 8004398:	080043a1 	.word	0x080043a1
 800439c:	080043b9 	.word	0x080043b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	73fb      	strb	r3, [r7, #15]
      break;
 80043a4:	e030      	b.n	8004408 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d025      	beq.n	80043fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043b6:	e022      	b.n	80043fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80043c0:	d11f      	bne.n	8004402 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80043c6:	e01c      	b.n	8004402 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d903      	bls.n	80043d6 <DMA_CheckFifoParam+0xb6>
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	2b03      	cmp	r3, #3
 80043d2:	d003      	beq.n	80043dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80043d4:	e018      	b.n	8004408 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	73fb      	strb	r3, [r7, #15]
      break;
 80043da:	e015      	b.n	8004408 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00e      	beq.n	8004406 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	73fb      	strb	r3, [r7, #15]
      break;
 80043ec:	e00b      	b.n	8004406 <DMA_CheckFifoParam+0xe6>
      break;
 80043ee:	bf00      	nop
 80043f0:	e00a      	b.n	8004408 <DMA_CheckFifoParam+0xe8>
      break;
 80043f2:	bf00      	nop
 80043f4:	e008      	b.n	8004408 <DMA_CheckFifoParam+0xe8>
      break;
 80043f6:	bf00      	nop
 80043f8:	e006      	b.n	8004408 <DMA_CheckFifoParam+0xe8>
      break;
 80043fa:	bf00      	nop
 80043fc:	e004      	b.n	8004408 <DMA_CheckFifoParam+0xe8>
      break;
 80043fe:	bf00      	nop
 8004400:	e002      	b.n	8004408 <DMA_CheckFifoParam+0xe8>
      break;   
 8004402:	bf00      	nop
 8004404:	e000      	b.n	8004408 <DMA_CheckFifoParam+0xe8>
      break;
 8004406:	bf00      	nop
    }
  } 
  
  return status; 
 8004408:	7bfb      	ldrb	r3, [r7, #15]
}
 800440a:	4618      	mov	r0, r3
 800440c:	3714      	adds	r7, #20
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop

08004418 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004418:	b480      	push	{r7}
 800441a:	b089      	sub	sp, #36	; 0x24
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004422:	2300      	movs	r3, #0
 8004424:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004426:	2300      	movs	r3, #0
 8004428:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800442a:	2300      	movs	r3, #0
 800442c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800442e:	2300      	movs	r3, #0
 8004430:	61fb      	str	r3, [r7, #28]
 8004432:	e16b      	b.n	800470c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004434:	2201      	movs	r2, #1
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	fa02 f303 	lsl.w	r3, r2, r3
 800443c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	4013      	ands	r3, r2
 8004446:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	429a      	cmp	r2, r3
 800444e:	f040 815a 	bne.w	8004706 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d00b      	beq.n	8004472 <HAL_GPIO_Init+0x5a>
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	2b02      	cmp	r3, #2
 8004460:	d007      	beq.n	8004472 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004466:	2b11      	cmp	r3, #17
 8004468:	d003      	beq.n	8004472 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	2b12      	cmp	r3, #18
 8004470:	d130      	bne.n	80044d4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	005b      	lsls	r3, r3, #1
 800447c:	2203      	movs	r2, #3
 800447e:	fa02 f303 	lsl.w	r3, r2, r3
 8004482:	43db      	mvns	r3, r3
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	4013      	ands	r3, r2
 8004488:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	68da      	ldr	r2, [r3, #12]
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	005b      	lsls	r3, r3, #1
 8004492:	fa02 f303 	lsl.w	r3, r2, r3
 8004496:	69ba      	ldr	r2, [r7, #24]
 8004498:	4313      	orrs	r3, r2
 800449a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	69ba      	ldr	r2, [r7, #24]
 80044a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80044a8:	2201      	movs	r2, #1
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	fa02 f303 	lsl.w	r3, r2, r3
 80044b0:	43db      	mvns	r3, r3
 80044b2:	69ba      	ldr	r2, [r7, #24]
 80044b4:	4013      	ands	r3, r2
 80044b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	091b      	lsrs	r3, r3, #4
 80044be:	f003 0201 	and.w	r2, r3, #1
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	fa02 f303 	lsl.w	r3, r2, r3
 80044c8:	69ba      	ldr	r2, [r7, #24]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	005b      	lsls	r3, r3, #1
 80044de:	2203      	movs	r2, #3
 80044e0:	fa02 f303 	lsl.w	r3, r2, r3
 80044e4:	43db      	mvns	r3, r3
 80044e6:	69ba      	ldr	r2, [r7, #24]
 80044e8:	4013      	ands	r3, r2
 80044ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	689a      	ldr	r2, [r3, #8]
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	005b      	lsls	r3, r3, #1
 80044f4:	fa02 f303 	lsl.w	r3, r2, r3
 80044f8:	69ba      	ldr	r2, [r7, #24]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	69ba      	ldr	r2, [r7, #24]
 8004502:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	2b02      	cmp	r3, #2
 800450a:	d003      	beq.n	8004514 <HAL_GPIO_Init+0xfc>
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	2b12      	cmp	r3, #18
 8004512:	d123      	bne.n	800455c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	08da      	lsrs	r2, r3, #3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	3208      	adds	r2, #8
 800451c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004520:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	f003 0307 	and.w	r3, r3, #7
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	220f      	movs	r2, #15
 800452c:	fa02 f303 	lsl.w	r3, r2, r3
 8004530:	43db      	mvns	r3, r3
 8004532:	69ba      	ldr	r2, [r7, #24]
 8004534:	4013      	ands	r3, r2
 8004536:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	691a      	ldr	r2, [r3, #16]
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	f003 0307 	and.w	r3, r3, #7
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	fa02 f303 	lsl.w	r3, r2, r3
 8004548:	69ba      	ldr	r2, [r7, #24]
 800454a:	4313      	orrs	r3, r2
 800454c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	08da      	lsrs	r2, r3, #3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	3208      	adds	r2, #8
 8004556:	69b9      	ldr	r1, [r7, #24]
 8004558:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	005b      	lsls	r3, r3, #1
 8004566:	2203      	movs	r2, #3
 8004568:	fa02 f303 	lsl.w	r3, r2, r3
 800456c:	43db      	mvns	r3, r3
 800456e:	69ba      	ldr	r2, [r7, #24]
 8004570:	4013      	ands	r3, r2
 8004572:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f003 0203 	and.w	r2, r3, #3
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	005b      	lsls	r3, r3, #1
 8004580:	fa02 f303 	lsl.w	r3, r2, r3
 8004584:	69ba      	ldr	r2, [r7, #24]
 8004586:	4313      	orrs	r3, r2
 8004588:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	69ba      	ldr	r2, [r7, #24]
 800458e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004598:	2b00      	cmp	r3, #0
 800459a:	f000 80b4 	beq.w	8004706 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800459e:	2300      	movs	r3, #0
 80045a0:	60fb      	str	r3, [r7, #12]
 80045a2:	4b60      	ldr	r3, [pc, #384]	; (8004724 <HAL_GPIO_Init+0x30c>)
 80045a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a6:	4a5f      	ldr	r2, [pc, #380]	; (8004724 <HAL_GPIO_Init+0x30c>)
 80045a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045ac:	6453      	str	r3, [r2, #68]	; 0x44
 80045ae:	4b5d      	ldr	r3, [pc, #372]	; (8004724 <HAL_GPIO_Init+0x30c>)
 80045b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045b6:	60fb      	str	r3, [r7, #12]
 80045b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80045ba:	4a5b      	ldr	r2, [pc, #364]	; (8004728 <HAL_GPIO_Init+0x310>)
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	089b      	lsrs	r3, r3, #2
 80045c0:	3302      	adds	r3, #2
 80045c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	f003 0303 	and.w	r3, r3, #3
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	220f      	movs	r2, #15
 80045d2:	fa02 f303 	lsl.w	r3, r2, r3
 80045d6:	43db      	mvns	r3, r3
 80045d8:	69ba      	ldr	r2, [r7, #24]
 80045da:	4013      	ands	r3, r2
 80045dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a52      	ldr	r2, [pc, #328]	; (800472c <HAL_GPIO_Init+0x314>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d02b      	beq.n	800463e <HAL_GPIO_Init+0x226>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a51      	ldr	r2, [pc, #324]	; (8004730 <HAL_GPIO_Init+0x318>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d025      	beq.n	800463a <HAL_GPIO_Init+0x222>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a50      	ldr	r2, [pc, #320]	; (8004734 <HAL_GPIO_Init+0x31c>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d01f      	beq.n	8004636 <HAL_GPIO_Init+0x21e>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a4f      	ldr	r2, [pc, #316]	; (8004738 <HAL_GPIO_Init+0x320>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d019      	beq.n	8004632 <HAL_GPIO_Init+0x21a>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a4e      	ldr	r2, [pc, #312]	; (800473c <HAL_GPIO_Init+0x324>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d013      	beq.n	800462e <HAL_GPIO_Init+0x216>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a4d      	ldr	r2, [pc, #308]	; (8004740 <HAL_GPIO_Init+0x328>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d00d      	beq.n	800462a <HAL_GPIO_Init+0x212>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a4c      	ldr	r2, [pc, #304]	; (8004744 <HAL_GPIO_Init+0x32c>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d007      	beq.n	8004626 <HAL_GPIO_Init+0x20e>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a4b      	ldr	r2, [pc, #300]	; (8004748 <HAL_GPIO_Init+0x330>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d101      	bne.n	8004622 <HAL_GPIO_Init+0x20a>
 800461e:	2307      	movs	r3, #7
 8004620:	e00e      	b.n	8004640 <HAL_GPIO_Init+0x228>
 8004622:	2308      	movs	r3, #8
 8004624:	e00c      	b.n	8004640 <HAL_GPIO_Init+0x228>
 8004626:	2306      	movs	r3, #6
 8004628:	e00a      	b.n	8004640 <HAL_GPIO_Init+0x228>
 800462a:	2305      	movs	r3, #5
 800462c:	e008      	b.n	8004640 <HAL_GPIO_Init+0x228>
 800462e:	2304      	movs	r3, #4
 8004630:	e006      	b.n	8004640 <HAL_GPIO_Init+0x228>
 8004632:	2303      	movs	r3, #3
 8004634:	e004      	b.n	8004640 <HAL_GPIO_Init+0x228>
 8004636:	2302      	movs	r3, #2
 8004638:	e002      	b.n	8004640 <HAL_GPIO_Init+0x228>
 800463a:	2301      	movs	r3, #1
 800463c:	e000      	b.n	8004640 <HAL_GPIO_Init+0x228>
 800463e:	2300      	movs	r3, #0
 8004640:	69fa      	ldr	r2, [r7, #28]
 8004642:	f002 0203 	and.w	r2, r2, #3
 8004646:	0092      	lsls	r2, r2, #2
 8004648:	4093      	lsls	r3, r2
 800464a:	69ba      	ldr	r2, [r7, #24]
 800464c:	4313      	orrs	r3, r2
 800464e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004650:	4935      	ldr	r1, [pc, #212]	; (8004728 <HAL_GPIO_Init+0x310>)
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	089b      	lsrs	r3, r3, #2
 8004656:	3302      	adds	r3, #2
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800465e:	4b3b      	ldr	r3, [pc, #236]	; (800474c <HAL_GPIO_Init+0x334>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	43db      	mvns	r3, r3
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	4013      	ands	r3, r2
 800466c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d003      	beq.n	8004682 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800467a:	69ba      	ldr	r2, [r7, #24]
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	4313      	orrs	r3, r2
 8004680:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004682:	4a32      	ldr	r2, [pc, #200]	; (800474c <HAL_GPIO_Init+0x334>)
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004688:	4b30      	ldr	r3, [pc, #192]	; (800474c <HAL_GPIO_Init+0x334>)
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	43db      	mvns	r3, r3
 8004692:	69ba      	ldr	r2, [r7, #24]
 8004694:	4013      	ands	r3, r2
 8004696:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d003      	beq.n	80046ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80046a4:	69ba      	ldr	r2, [r7, #24]
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80046ac:	4a27      	ldr	r2, [pc, #156]	; (800474c <HAL_GPIO_Init+0x334>)
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80046b2:	4b26      	ldr	r3, [pc, #152]	; (800474c <HAL_GPIO_Init+0x334>)
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	43db      	mvns	r3, r3
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	4013      	ands	r3, r2
 80046c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d003      	beq.n	80046d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80046ce:	69ba      	ldr	r2, [r7, #24]
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80046d6:	4a1d      	ldr	r2, [pc, #116]	; (800474c <HAL_GPIO_Init+0x334>)
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80046dc:	4b1b      	ldr	r3, [pc, #108]	; (800474c <HAL_GPIO_Init+0x334>)
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	43db      	mvns	r3, r3
 80046e6:	69ba      	ldr	r2, [r7, #24]
 80046e8:	4013      	ands	r3, r2
 80046ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d003      	beq.n	8004700 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80046f8:	69ba      	ldr	r2, [r7, #24]
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004700:	4a12      	ldr	r2, [pc, #72]	; (800474c <HAL_GPIO_Init+0x334>)
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	3301      	adds	r3, #1
 800470a:	61fb      	str	r3, [r7, #28]
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	2b0f      	cmp	r3, #15
 8004710:	f67f ae90 	bls.w	8004434 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004714:	bf00      	nop
 8004716:	bf00      	nop
 8004718:	3724      	adds	r7, #36	; 0x24
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	40023800 	.word	0x40023800
 8004728:	40013800 	.word	0x40013800
 800472c:	40020000 	.word	0x40020000
 8004730:	40020400 	.word	0x40020400
 8004734:	40020800 	.word	0x40020800
 8004738:	40020c00 	.word	0x40020c00
 800473c:	40021000 	.word	0x40021000
 8004740:	40021400 	.word	0x40021400
 8004744:	40021800 	.word	0x40021800
 8004748:	40021c00 	.word	0x40021c00
 800474c:	40013c00 	.word	0x40013c00

08004750 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	460b      	mov	r3, r1
 800475a:	807b      	strh	r3, [r7, #2]
 800475c:	4613      	mov	r3, r2
 800475e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004760:	787b      	ldrb	r3, [r7, #1]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d003      	beq.n	800476e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004766:	887a      	ldrh	r2, [r7, #2]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800476c:	e003      	b.n	8004776 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800476e:	887b      	ldrh	r3, [r7, #2]
 8004770:	041a      	lsls	r2, r3, #16
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	619a      	str	r2, [r3, #24]
}
 8004776:	bf00      	nop
 8004778:	370c      	adds	r7, #12
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
	...

08004784 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b086      	sub	sp, #24
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e25e      	b.n	8004c54 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d075      	beq.n	800488e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047a2:	4b88      	ldr	r3, [pc, #544]	; (80049c4 <HAL_RCC_OscConfig+0x240>)
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f003 030c 	and.w	r3, r3, #12
 80047aa:	2b04      	cmp	r3, #4
 80047ac:	d00c      	beq.n	80047c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047ae:	4b85      	ldr	r3, [pc, #532]	; (80049c4 <HAL_RCC_OscConfig+0x240>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047b6:	2b08      	cmp	r3, #8
 80047b8:	d112      	bne.n	80047e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047ba:	4b82      	ldr	r3, [pc, #520]	; (80049c4 <HAL_RCC_OscConfig+0x240>)
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047c6:	d10b      	bne.n	80047e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047c8:	4b7e      	ldr	r3, [pc, #504]	; (80049c4 <HAL_RCC_OscConfig+0x240>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d05b      	beq.n	800488c <HAL_RCC_OscConfig+0x108>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d157      	bne.n	800488c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e239      	b.n	8004c54 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047e8:	d106      	bne.n	80047f8 <HAL_RCC_OscConfig+0x74>
 80047ea:	4b76      	ldr	r3, [pc, #472]	; (80049c4 <HAL_RCC_OscConfig+0x240>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a75      	ldr	r2, [pc, #468]	; (80049c4 <HAL_RCC_OscConfig+0x240>)
 80047f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047f4:	6013      	str	r3, [r2, #0]
 80047f6:	e01d      	b.n	8004834 <HAL_RCC_OscConfig+0xb0>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004800:	d10c      	bne.n	800481c <HAL_RCC_OscConfig+0x98>
 8004802:	4b70      	ldr	r3, [pc, #448]	; (80049c4 <HAL_RCC_OscConfig+0x240>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a6f      	ldr	r2, [pc, #444]	; (80049c4 <HAL_RCC_OscConfig+0x240>)
 8004808:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800480c:	6013      	str	r3, [r2, #0]
 800480e:	4b6d      	ldr	r3, [pc, #436]	; (80049c4 <HAL_RCC_OscConfig+0x240>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a6c      	ldr	r2, [pc, #432]	; (80049c4 <HAL_RCC_OscConfig+0x240>)
 8004814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004818:	6013      	str	r3, [r2, #0]
 800481a:	e00b      	b.n	8004834 <HAL_RCC_OscConfig+0xb0>
 800481c:	4b69      	ldr	r3, [pc, #420]	; (80049c4 <HAL_RCC_OscConfig+0x240>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a68      	ldr	r2, [pc, #416]	; (80049c4 <HAL_RCC_OscConfig+0x240>)
 8004822:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004826:	6013      	str	r3, [r2, #0]
 8004828:	4b66      	ldr	r3, [pc, #408]	; (80049c4 <HAL_RCC_OscConfig+0x240>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a65      	ldr	r2, [pc, #404]	; (80049c4 <HAL_RCC_OscConfig+0x240>)
 800482e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004832:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d013      	beq.n	8004864 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800483c:	f7ff f93c 	bl	8003ab8 <HAL_GetTick>
 8004840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004842:	e008      	b.n	8004856 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004844:	f7ff f938 	bl	8003ab8 <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	2b64      	cmp	r3, #100	; 0x64
 8004850:	d901      	bls.n	8004856 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e1fe      	b.n	8004c54 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004856:	4b5b      	ldr	r3, [pc, #364]	; (80049c4 <HAL_RCC_OscConfig+0x240>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d0f0      	beq.n	8004844 <HAL_RCC_OscConfig+0xc0>
 8004862:	e014      	b.n	800488e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004864:	f7ff f928 	bl	8003ab8 <HAL_GetTick>
 8004868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800486a:	e008      	b.n	800487e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800486c:	f7ff f924 	bl	8003ab8 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b64      	cmp	r3, #100	; 0x64
 8004878:	d901      	bls.n	800487e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e1ea      	b.n	8004c54 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800487e:	4b51      	ldr	r3, [pc, #324]	; (80049c4 <HAL_RCC_OscConfig+0x240>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1f0      	bne.n	800486c <HAL_RCC_OscConfig+0xe8>
 800488a:	e000      	b.n	800488e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800488c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	2b00      	cmp	r3, #0
 8004898:	d063      	beq.n	8004962 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800489a:	4b4a      	ldr	r3, [pc, #296]	; (80049c4 <HAL_RCC_OscConfig+0x240>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f003 030c 	and.w	r3, r3, #12
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00b      	beq.n	80048be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048a6:	4b47      	ldr	r3, [pc, #284]	; (80049c4 <HAL_RCC_OscConfig+0x240>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048ae:	2b08      	cmp	r3, #8
 80048b0:	d11c      	bne.n	80048ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048b2:	4b44      	ldr	r3, [pc, #272]	; (80049c4 <HAL_RCC_OscConfig+0x240>)
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d116      	bne.n	80048ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048be:	4b41      	ldr	r3, [pc, #260]	; (80049c4 <HAL_RCC_OscConfig+0x240>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d005      	beq.n	80048d6 <HAL_RCC_OscConfig+0x152>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d001      	beq.n	80048d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e1be      	b.n	8004c54 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048d6:	4b3b      	ldr	r3, [pc, #236]	; (80049c4 <HAL_RCC_OscConfig+0x240>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	00db      	lsls	r3, r3, #3
 80048e4:	4937      	ldr	r1, [pc, #220]	; (80049c4 <HAL_RCC_OscConfig+0x240>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ea:	e03a      	b.n	8004962 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d020      	beq.n	8004936 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048f4:	4b34      	ldr	r3, [pc, #208]	; (80049c8 <HAL_RCC_OscConfig+0x244>)
 80048f6:	2201      	movs	r2, #1
 80048f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048fa:	f7ff f8dd 	bl	8003ab8 <HAL_GetTick>
 80048fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004900:	e008      	b.n	8004914 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004902:	f7ff f8d9 	bl	8003ab8 <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	2b02      	cmp	r3, #2
 800490e:	d901      	bls.n	8004914 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e19f      	b.n	8004c54 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004914:	4b2b      	ldr	r3, [pc, #172]	; (80049c4 <HAL_RCC_OscConfig+0x240>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0302 	and.w	r3, r3, #2
 800491c:	2b00      	cmp	r3, #0
 800491e:	d0f0      	beq.n	8004902 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004920:	4b28      	ldr	r3, [pc, #160]	; (80049c4 <HAL_RCC_OscConfig+0x240>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	00db      	lsls	r3, r3, #3
 800492e:	4925      	ldr	r1, [pc, #148]	; (80049c4 <HAL_RCC_OscConfig+0x240>)
 8004930:	4313      	orrs	r3, r2
 8004932:	600b      	str	r3, [r1, #0]
 8004934:	e015      	b.n	8004962 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004936:	4b24      	ldr	r3, [pc, #144]	; (80049c8 <HAL_RCC_OscConfig+0x244>)
 8004938:	2200      	movs	r2, #0
 800493a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800493c:	f7ff f8bc 	bl	8003ab8 <HAL_GetTick>
 8004940:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004942:	e008      	b.n	8004956 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004944:	f7ff f8b8 	bl	8003ab8 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	2b02      	cmp	r3, #2
 8004950:	d901      	bls.n	8004956 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e17e      	b.n	8004c54 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004956:	4b1b      	ldr	r3, [pc, #108]	; (80049c4 <HAL_RCC_OscConfig+0x240>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1f0      	bne.n	8004944 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0308 	and.w	r3, r3, #8
 800496a:	2b00      	cmp	r3, #0
 800496c:	d036      	beq.n	80049dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d016      	beq.n	80049a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004976:	4b15      	ldr	r3, [pc, #84]	; (80049cc <HAL_RCC_OscConfig+0x248>)
 8004978:	2201      	movs	r2, #1
 800497a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800497c:	f7ff f89c 	bl	8003ab8 <HAL_GetTick>
 8004980:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004982:	e008      	b.n	8004996 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004984:	f7ff f898 	bl	8003ab8 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b02      	cmp	r3, #2
 8004990:	d901      	bls.n	8004996 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e15e      	b.n	8004c54 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004996:	4b0b      	ldr	r3, [pc, #44]	; (80049c4 <HAL_RCC_OscConfig+0x240>)
 8004998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800499a:	f003 0302 	and.w	r3, r3, #2
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d0f0      	beq.n	8004984 <HAL_RCC_OscConfig+0x200>
 80049a2:	e01b      	b.n	80049dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049a4:	4b09      	ldr	r3, [pc, #36]	; (80049cc <HAL_RCC_OscConfig+0x248>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049aa:	f7ff f885 	bl	8003ab8 <HAL_GetTick>
 80049ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049b0:	e00e      	b.n	80049d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049b2:	f7ff f881 	bl	8003ab8 <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d907      	bls.n	80049d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e147      	b.n	8004c54 <HAL_RCC_OscConfig+0x4d0>
 80049c4:	40023800 	.word	0x40023800
 80049c8:	42470000 	.word	0x42470000
 80049cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049d0:	4b88      	ldr	r3, [pc, #544]	; (8004bf4 <HAL_RCC_OscConfig+0x470>)
 80049d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049d4:	f003 0302 	and.w	r3, r3, #2
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1ea      	bne.n	80049b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0304 	and.w	r3, r3, #4
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f000 8097 	beq.w	8004b18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049ea:	2300      	movs	r3, #0
 80049ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049ee:	4b81      	ldr	r3, [pc, #516]	; (8004bf4 <HAL_RCC_OscConfig+0x470>)
 80049f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d10f      	bne.n	8004a1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049fa:	2300      	movs	r3, #0
 80049fc:	60bb      	str	r3, [r7, #8]
 80049fe:	4b7d      	ldr	r3, [pc, #500]	; (8004bf4 <HAL_RCC_OscConfig+0x470>)
 8004a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a02:	4a7c      	ldr	r2, [pc, #496]	; (8004bf4 <HAL_RCC_OscConfig+0x470>)
 8004a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a08:	6413      	str	r3, [r2, #64]	; 0x40
 8004a0a:	4b7a      	ldr	r3, [pc, #488]	; (8004bf4 <HAL_RCC_OscConfig+0x470>)
 8004a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a12:	60bb      	str	r3, [r7, #8]
 8004a14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a16:	2301      	movs	r3, #1
 8004a18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a1a:	4b77      	ldr	r3, [pc, #476]	; (8004bf8 <HAL_RCC_OscConfig+0x474>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d118      	bne.n	8004a58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a26:	4b74      	ldr	r3, [pc, #464]	; (8004bf8 <HAL_RCC_OscConfig+0x474>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a73      	ldr	r2, [pc, #460]	; (8004bf8 <HAL_RCC_OscConfig+0x474>)
 8004a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a32:	f7ff f841 	bl	8003ab8 <HAL_GetTick>
 8004a36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a38:	e008      	b.n	8004a4c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a3a:	f7ff f83d 	bl	8003ab8 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d901      	bls.n	8004a4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e103      	b.n	8004c54 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a4c:	4b6a      	ldr	r3, [pc, #424]	; (8004bf8 <HAL_RCC_OscConfig+0x474>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d0f0      	beq.n	8004a3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d106      	bne.n	8004a6e <HAL_RCC_OscConfig+0x2ea>
 8004a60:	4b64      	ldr	r3, [pc, #400]	; (8004bf4 <HAL_RCC_OscConfig+0x470>)
 8004a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a64:	4a63      	ldr	r2, [pc, #396]	; (8004bf4 <HAL_RCC_OscConfig+0x470>)
 8004a66:	f043 0301 	orr.w	r3, r3, #1
 8004a6a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a6c:	e01c      	b.n	8004aa8 <HAL_RCC_OscConfig+0x324>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	2b05      	cmp	r3, #5
 8004a74:	d10c      	bne.n	8004a90 <HAL_RCC_OscConfig+0x30c>
 8004a76:	4b5f      	ldr	r3, [pc, #380]	; (8004bf4 <HAL_RCC_OscConfig+0x470>)
 8004a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a7a:	4a5e      	ldr	r2, [pc, #376]	; (8004bf4 <HAL_RCC_OscConfig+0x470>)
 8004a7c:	f043 0304 	orr.w	r3, r3, #4
 8004a80:	6713      	str	r3, [r2, #112]	; 0x70
 8004a82:	4b5c      	ldr	r3, [pc, #368]	; (8004bf4 <HAL_RCC_OscConfig+0x470>)
 8004a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a86:	4a5b      	ldr	r2, [pc, #364]	; (8004bf4 <HAL_RCC_OscConfig+0x470>)
 8004a88:	f043 0301 	orr.w	r3, r3, #1
 8004a8c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a8e:	e00b      	b.n	8004aa8 <HAL_RCC_OscConfig+0x324>
 8004a90:	4b58      	ldr	r3, [pc, #352]	; (8004bf4 <HAL_RCC_OscConfig+0x470>)
 8004a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a94:	4a57      	ldr	r2, [pc, #348]	; (8004bf4 <HAL_RCC_OscConfig+0x470>)
 8004a96:	f023 0301 	bic.w	r3, r3, #1
 8004a9a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a9c:	4b55      	ldr	r3, [pc, #340]	; (8004bf4 <HAL_RCC_OscConfig+0x470>)
 8004a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa0:	4a54      	ldr	r2, [pc, #336]	; (8004bf4 <HAL_RCC_OscConfig+0x470>)
 8004aa2:	f023 0304 	bic.w	r3, r3, #4
 8004aa6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d015      	beq.n	8004adc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ab0:	f7ff f802 	bl	8003ab8 <HAL_GetTick>
 8004ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ab6:	e00a      	b.n	8004ace <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ab8:	f7fe fffe 	bl	8003ab8 <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e0c2      	b.n	8004c54 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ace:	4b49      	ldr	r3, [pc, #292]	; (8004bf4 <HAL_RCC_OscConfig+0x470>)
 8004ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d0ee      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x334>
 8004ada:	e014      	b.n	8004b06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004adc:	f7fe ffec 	bl	8003ab8 <HAL_GetTick>
 8004ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ae2:	e00a      	b.n	8004afa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ae4:	f7fe ffe8 	bl	8003ab8 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e0ac      	b.n	8004c54 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004afa:	4b3e      	ldr	r3, [pc, #248]	; (8004bf4 <HAL_RCC_OscConfig+0x470>)
 8004afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1ee      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b06:	7dfb      	ldrb	r3, [r7, #23]
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d105      	bne.n	8004b18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b0c:	4b39      	ldr	r3, [pc, #228]	; (8004bf4 <HAL_RCC_OscConfig+0x470>)
 8004b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b10:	4a38      	ldr	r2, [pc, #224]	; (8004bf4 <HAL_RCC_OscConfig+0x470>)
 8004b12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b16:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	699b      	ldr	r3, [r3, #24]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f000 8098 	beq.w	8004c52 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b22:	4b34      	ldr	r3, [pc, #208]	; (8004bf4 <HAL_RCC_OscConfig+0x470>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f003 030c 	and.w	r3, r3, #12
 8004b2a:	2b08      	cmp	r3, #8
 8004b2c:	d05c      	beq.n	8004be8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	699b      	ldr	r3, [r3, #24]
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d141      	bne.n	8004bba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b36:	4b31      	ldr	r3, [pc, #196]	; (8004bfc <HAL_RCC_OscConfig+0x478>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b3c:	f7fe ffbc 	bl	8003ab8 <HAL_GetTick>
 8004b40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b42:	e008      	b.n	8004b56 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b44:	f7fe ffb8 	bl	8003ab8 <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d901      	bls.n	8004b56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e07e      	b.n	8004c54 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b56:	4b27      	ldr	r3, [pc, #156]	; (8004bf4 <HAL_RCC_OscConfig+0x470>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1f0      	bne.n	8004b44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	69da      	ldr	r2, [r3, #28]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	431a      	orrs	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b70:	019b      	lsls	r3, r3, #6
 8004b72:	431a      	orrs	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b78:	085b      	lsrs	r3, r3, #1
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	041b      	lsls	r3, r3, #16
 8004b7e:	431a      	orrs	r2, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b84:	061b      	lsls	r3, r3, #24
 8004b86:	491b      	ldr	r1, [pc, #108]	; (8004bf4 <HAL_RCC_OscConfig+0x470>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b8c:	4b1b      	ldr	r3, [pc, #108]	; (8004bfc <HAL_RCC_OscConfig+0x478>)
 8004b8e:	2201      	movs	r2, #1
 8004b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b92:	f7fe ff91 	bl	8003ab8 <HAL_GetTick>
 8004b96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b98:	e008      	b.n	8004bac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b9a:	f7fe ff8d 	bl	8003ab8 <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d901      	bls.n	8004bac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e053      	b.n	8004c54 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bac:	4b11      	ldr	r3, [pc, #68]	; (8004bf4 <HAL_RCC_OscConfig+0x470>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d0f0      	beq.n	8004b9a <HAL_RCC_OscConfig+0x416>
 8004bb8:	e04b      	b.n	8004c52 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bba:	4b10      	ldr	r3, [pc, #64]	; (8004bfc <HAL_RCC_OscConfig+0x478>)
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc0:	f7fe ff7a 	bl	8003ab8 <HAL_GetTick>
 8004bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bc6:	e008      	b.n	8004bda <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bc8:	f7fe ff76 	bl	8003ab8 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d901      	bls.n	8004bda <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e03c      	b.n	8004c54 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bda:	4b06      	ldr	r3, [pc, #24]	; (8004bf4 <HAL_RCC_OscConfig+0x470>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1f0      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x444>
 8004be6:	e034      	b.n	8004c52 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d107      	bne.n	8004c00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e02f      	b.n	8004c54 <HAL_RCC_OscConfig+0x4d0>
 8004bf4:	40023800 	.word	0x40023800
 8004bf8:	40007000 	.word	0x40007000
 8004bfc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c00:	4b16      	ldr	r3, [pc, #88]	; (8004c5c <HAL_RCC_OscConfig+0x4d8>)
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	69db      	ldr	r3, [r3, #28]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d11c      	bne.n	8004c4e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d115      	bne.n	8004c4e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c28:	4013      	ands	r3, r2
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d10d      	bne.n	8004c4e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d106      	bne.n	8004c4e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d001      	beq.n	8004c52 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e000      	b.n	8004c54 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3718      	adds	r7, #24
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	40023800 	.word	0x40023800

08004c60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d101      	bne.n	8004c74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e0cc      	b.n	8004e0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c74:	4b68      	ldr	r3, [pc, #416]	; (8004e18 <HAL_RCC_ClockConfig+0x1b8>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 030f 	and.w	r3, r3, #15
 8004c7c:	683a      	ldr	r2, [r7, #0]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d90c      	bls.n	8004c9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c82:	4b65      	ldr	r3, [pc, #404]	; (8004e18 <HAL_RCC_ClockConfig+0x1b8>)
 8004c84:	683a      	ldr	r2, [r7, #0]
 8004c86:	b2d2      	uxtb	r2, r2
 8004c88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c8a:	4b63      	ldr	r3, [pc, #396]	; (8004e18 <HAL_RCC_ClockConfig+0x1b8>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 030f 	and.w	r3, r3, #15
 8004c92:	683a      	ldr	r2, [r7, #0]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d001      	beq.n	8004c9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e0b8      	b.n	8004e0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d020      	beq.n	8004cea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0304 	and.w	r3, r3, #4
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d005      	beq.n	8004cc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cb4:	4b59      	ldr	r3, [pc, #356]	; (8004e1c <HAL_RCC_ClockConfig+0x1bc>)
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	4a58      	ldr	r2, [pc, #352]	; (8004e1c <HAL_RCC_ClockConfig+0x1bc>)
 8004cba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004cbe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0308 	and.w	r3, r3, #8
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d005      	beq.n	8004cd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ccc:	4b53      	ldr	r3, [pc, #332]	; (8004e1c <HAL_RCC_ClockConfig+0x1bc>)
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	4a52      	ldr	r2, [pc, #328]	; (8004e1c <HAL_RCC_ClockConfig+0x1bc>)
 8004cd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004cd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cd8:	4b50      	ldr	r3, [pc, #320]	; (8004e1c <HAL_RCC_ClockConfig+0x1bc>)
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	494d      	ldr	r1, [pc, #308]	; (8004e1c <HAL_RCC_ClockConfig+0x1bc>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0301 	and.w	r3, r3, #1
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d044      	beq.n	8004d80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d107      	bne.n	8004d0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cfe:	4b47      	ldr	r3, [pc, #284]	; (8004e1c <HAL_RCC_ClockConfig+0x1bc>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d119      	bne.n	8004d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e07f      	b.n	8004e0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d003      	beq.n	8004d1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d1a:	2b03      	cmp	r3, #3
 8004d1c:	d107      	bne.n	8004d2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d1e:	4b3f      	ldr	r3, [pc, #252]	; (8004e1c <HAL_RCC_ClockConfig+0x1bc>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d109      	bne.n	8004d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e06f      	b.n	8004e0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d2e:	4b3b      	ldr	r3, [pc, #236]	; (8004e1c <HAL_RCC_ClockConfig+0x1bc>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e067      	b.n	8004e0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d3e:	4b37      	ldr	r3, [pc, #220]	; (8004e1c <HAL_RCC_ClockConfig+0x1bc>)
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f023 0203 	bic.w	r2, r3, #3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	4934      	ldr	r1, [pc, #208]	; (8004e1c <HAL_RCC_ClockConfig+0x1bc>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d50:	f7fe feb2 	bl	8003ab8 <HAL_GetTick>
 8004d54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d56:	e00a      	b.n	8004d6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d58:	f7fe feae 	bl	8003ab8 <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d901      	bls.n	8004d6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e04f      	b.n	8004e0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d6e:	4b2b      	ldr	r3, [pc, #172]	; (8004e1c <HAL_RCC_ClockConfig+0x1bc>)
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f003 020c 	and.w	r2, r3, #12
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d1eb      	bne.n	8004d58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d80:	4b25      	ldr	r3, [pc, #148]	; (8004e18 <HAL_RCC_ClockConfig+0x1b8>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 030f 	and.w	r3, r3, #15
 8004d88:	683a      	ldr	r2, [r7, #0]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d20c      	bcs.n	8004da8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d8e:	4b22      	ldr	r3, [pc, #136]	; (8004e18 <HAL_RCC_ClockConfig+0x1b8>)
 8004d90:	683a      	ldr	r2, [r7, #0]
 8004d92:	b2d2      	uxtb	r2, r2
 8004d94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d96:	4b20      	ldr	r3, [pc, #128]	; (8004e18 <HAL_RCC_ClockConfig+0x1b8>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 030f 	and.w	r3, r3, #15
 8004d9e:	683a      	ldr	r2, [r7, #0]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d001      	beq.n	8004da8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e032      	b.n	8004e0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0304 	and.w	r3, r3, #4
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d008      	beq.n	8004dc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004db4:	4b19      	ldr	r3, [pc, #100]	; (8004e1c <HAL_RCC_ClockConfig+0x1bc>)
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	4916      	ldr	r1, [pc, #88]	; (8004e1c <HAL_RCC_ClockConfig+0x1bc>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0308 	and.w	r3, r3, #8
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d009      	beq.n	8004de6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004dd2:	4b12      	ldr	r3, [pc, #72]	; (8004e1c <HAL_RCC_ClockConfig+0x1bc>)
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	00db      	lsls	r3, r3, #3
 8004de0:	490e      	ldr	r1, [pc, #56]	; (8004e1c <HAL_RCC_ClockConfig+0x1bc>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004de6:	f000 f821 	bl	8004e2c <HAL_RCC_GetSysClockFreq>
 8004dea:	4602      	mov	r2, r0
 8004dec:	4b0b      	ldr	r3, [pc, #44]	; (8004e1c <HAL_RCC_ClockConfig+0x1bc>)
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	091b      	lsrs	r3, r3, #4
 8004df2:	f003 030f 	and.w	r3, r3, #15
 8004df6:	490a      	ldr	r1, [pc, #40]	; (8004e20 <HAL_RCC_ClockConfig+0x1c0>)
 8004df8:	5ccb      	ldrb	r3, [r1, r3]
 8004dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8004dfe:	4a09      	ldr	r2, [pc, #36]	; (8004e24 <HAL_RCC_ClockConfig+0x1c4>)
 8004e00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e02:	4b09      	ldr	r3, [pc, #36]	; (8004e28 <HAL_RCC_ClockConfig+0x1c8>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7fe fe12 	bl	8003a30 <HAL_InitTick>

  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	40023c00 	.word	0x40023c00
 8004e1c:	40023800 	.word	0x40023800
 8004e20:	0800d0a8 	.word	0x0800d0a8
 8004e24:	200000a8 	.word	0x200000a8
 8004e28:	200000ac 	.word	0x200000ac

08004e2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e30:	b094      	sub	sp, #80	; 0x50
 8004e32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e34:	2300      	movs	r3, #0
 8004e36:	647b      	str	r3, [r7, #68]	; 0x44
 8004e38:	2300      	movs	r3, #0
 8004e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004e40:	2300      	movs	r3, #0
 8004e42:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e44:	4b79      	ldr	r3, [pc, #484]	; (800502c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	f003 030c 	and.w	r3, r3, #12
 8004e4c:	2b08      	cmp	r3, #8
 8004e4e:	d00d      	beq.n	8004e6c <HAL_RCC_GetSysClockFreq+0x40>
 8004e50:	2b08      	cmp	r3, #8
 8004e52:	f200 80e1 	bhi.w	8005018 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d002      	beq.n	8004e60 <HAL_RCC_GetSysClockFreq+0x34>
 8004e5a:	2b04      	cmp	r3, #4
 8004e5c:	d003      	beq.n	8004e66 <HAL_RCC_GetSysClockFreq+0x3a>
 8004e5e:	e0db      	b.n	8005018 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e60:	4b73      	ldr	r3, [pc, #460]	; (8005030 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e62:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004e64:	e0db      	b.n	800501e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e66:	4b73      	ldr	r3, [pc, #460]	; (8005034 <HAL_RCC_GetSysClockFreq+0x208>)
 8004e68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e6a:	e0d8      	b.n	800501e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e6c:	4b6f      	ldr	r3, [pc, #444]	; (800502c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e74:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e76:	4b6d      	ldr	r3, [pc, #436]	; (800502c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d063      	beq.n	8004f4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e82:	4b6a      	ldr	r3, [pc, #424]	; (800502c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	099b      	lsrs	r3, r3, #6
 8004e88:	2200      	movs	r2, #0
 8004e8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e8c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e94:	633b      	str	r3, [r7, #48]	; 0x30
 8004e96:	2300      	movs	r3, #0
 8004e98:	637b      	str	r3, [r7, #52]	; 0x34
 8004e9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004e9e:	4622      	mov	r2, r4
 8004ea0:	462b      	mov	r3, r5
 8004ea2:	f04f 0000 	mov.w	r0, #0
 8004ea6:	f04f 0100 	mov.w	r1, #0
 8004eaa:	0159      	lsls	r1, r3, #5
 8004eac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004eb0:	0150      	lsls	r0, r2, #5
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	4621      	mov	r1, r4
 8004eb8:	1a51      	subs	r1, r2, r1
 8004eba:	6139      	str	r1, [r7, #16]
 8004ebc:	4629      	mov	r1, r5
 8004ebe:	eb63 0301 	sbc.w	r3, r3, r1
 8004ec2:	617b      	str	r3, [r7, #20]
 8004ec4:	f04f 0200 	mov.w	r2, #0
 8004ec8:	f04f 0300 	mov.w	r3, #0
 8004ecc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ed0:	4659      	mov	r1, fp
 8004ed2:	018b      	lsls	r3, r1, #6
 8004ed4:	4651      	mov	r1, sl
 8004ed6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004eda:	4651      	mov	r1, sl
 8004edc:	018a      	lsls	r2, r1, #6
 8004ede:	4651      	mov	r1, sl
 8004ee0:	ebb2 0801 	subs.w	r8, r2, r1
 8004ee4:	4659      	mov	r1, fp
 8004ee6:	eb63 0901 	sbc.w	r9, r3, r1
 8004eea:	f04f 0200 	mov.w	r2, #0
 8004eee:	f04f 0300 	mov.w	r3, #0
 8004ef2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ef6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004efa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004efe:	4690      	mov	r8, r2
 8004f00:	4699      	mov	r9, r3
 8004f02:	4623      	mov	r3, r4
 8004f04:	eb18 0303 	adds.w	r3, r8, r3
 8004f08:	60bb      	str	r3, [r7, #8]
 8004f0a:	462b      	mov	r3, r5
 8004f0c:	eb49 0303 	adc.w	r3, r9, r3
 8004f10:	60fb      	str	r3, [r7, #12]
 8004f12:	f04f 0200 	mov.w	r2, #0
 8004f16:	f04f 0300 	mov.w	r3, #0
 8004f1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004f1e:	4629      	mov	r1, r5
 8004f20:	024b      	lsls	r3, r1, #9
 8004f22:	4621      	mov	r1, r4
 8004f24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f28:	4621      	mov	r1, r4
 8004f2a:	024a      	lsls	r2, r1, #9
 8004f2c:	4610      	mov	r0, r2
 8004f2e:	4619      	mov	r1, r3
 8004f30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f32:	2200      	movs	r2, #0
 8004f34:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f3c:	f7fb f9a8 	bl	8000290 <__aeabi_uldivmod>
 8004f40:	4602      	mov	r2, r0
 8004f42:	460b      	mov	r3, r1
 8004f44:	4613      	mov	r3, r2
 8004f46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f48:	e058      	b.n	8004ffc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f4a:	4b38      	ldr	r3, [pc, #224]	; (800502c <HAL_RCC_GetSysClockFreq+0x200>)
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	099b      	lsrs	r3, r3, #6
 8004f50:	2200      	movs	r2, #0
 8004f52:	4618      	mov	r0, r3
 8004f54:	4611      	mov	r1, r2
 8004f56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004f5a:	623b      	str	r3, [r7, #32]
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	627b      	str	r3, [r7, #36]	; 0x24
 8004f60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004f64:	4642      	mov	r2, r8
 8004f66:	464b      	mov	r3, r9
 8004f68:	f04f 0000 	mov.w	r0, #0
 8004f6c:	f04f 0100 	mov.w	r1, #0
 8004f70:	0159      	lsls	r1, r3, #5
 8004f72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f76:	0150      	lsls	r0, r2, #5
 8004f78:	4602      	mov	r2, r0
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	4641      	mov	r1, r8
 8004f7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004f82:	4649      	mov	r1, r9
 8004f84:	eb63 0b01 	sbc.w	fp, r3, r1
 8004f88:	f04f 0200 	mov.w	r2, #0
 8004f8c:	f04f 0300 	mov.w	r3, #0
 8004f90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004f94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004f98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004f9c:	ebb2 040a 	subs.w	r4, r2, sl
 8004fa0:	eb63 050b 	sbc.w	r5, r3, fp
 8004fa4:	f04f 0200 	mov.w	r2, #0
 8004fa8:	f04f 0300 	mov.w	r3, #0
 8004fac:	00eb      	lsls	r3, r5, #3
 8004fae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fb2:	00e2      	lsls	r2, r4, #3
 8004fb4:	4614      	mov	r4, r2
 8004fb6:	461d      	mov	r5, r3
 8004fb8:	4643      	mov	r3, r8
 8004fba:	18e3      	adds	r3, r4, r3
 8004fbc:	603b      	str	r3, [r7, #0]
 8004fbe:	464b      	mov	r3, r9
 8004fc0:	eb45 0303 	adc.w	r3, r5, r3
 8004fc4:	607b      	str	r3, [r7, #4]
 8004fc6:	f04f 0200 	mov.w	r2, #0
 8004fca:	f04f 0300 	mov.w	r3, #0
 8004fce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004fd2:	4629      	mov	r1, r5
 8004fd4:	028b      	lsls	r3, r1, #10
 8004fd6:	4621      	mov	r1, r4
 8004fd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004fdc:	4621      	mov	r1, r4
 8004fde:	028a      	lsls	r2, r1, #10
 8004fe0:	4610      	mov	r0, r2
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	61bb      	str	r3, [r7, #24]
 8004fea:	61fa      	str	r2, [r7, #28]
 8004fec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ff0:	f7fb f94e 	bl	8000290 <__aeabi_uldivmod>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ffc:	4b0b      	ldr	r3, [pc, #44]	; (800502c <HAL_RCC_GetSysClockFreq+0x200>)
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	0c1b      	lsrs	r3, r3, #16
 8005002:	f003 0303 	and.w	r3, r3, #3
 8005006:	3301      	adds	r3, #1
 8005008:	005b      	lsls	r3, r3, #1
 800500a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800500c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800500e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005010:	fbb2 f3f3 	udiv	r3, r2, r3
 8005014:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005016:	e002      	b.n	800501e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005018:	4b05      	ldr	r3, [pc, #20]	; (8005030 <HAL_RCC_GetSysClockFreq+0x204>)
 800501a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800501c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800501e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005020:	4618      	mov	r0, r3
 8005022:	3750      	adds	r7, #80	; 0x50
 8005024:	46bd      	mov	sp, r7
 8005026:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800502a:	bf00      	nop
 800502c:	40023800 	.word	0x40023800
 8005030:	00f42400 	.word	0x00f42400
 8005034:	007a1200 	.word	0x007a1200

08005038 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005038:	b480      	push	{r7}
 800503a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800503c:	4b03      	ldr	r3, [pc, #12]	; (800504c <HAL_RCC_GetHCLKFreq+0x14>)
 800503e:	681b      	ldr	r3, [r3, #0]
}
 8005040:	4618      	mov	r0, r3
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	200000a8 	.word	0x200000a8

08005050 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005054:	f7ff fff0 	bl	8005038 <HAL_RCC_GetHCLKFreq>
 8005058:	4602      	mov	r2, r0
 800505a:	4b05      	ldr	r3, [pc, #20]	; (8005070 <HAL_RCC_GetPCLK1Freq+0x20>)
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	0a9b      	lsrs	r3, r3, #10
 8005060:	f003 0307 	and.w	r3, r3, #7
 8005064:	4903      	ldr	r1, [pc, #12]	; (8005074 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005066:	5ccb      	ldrb	r3, [r1, r3]
 8005068:	fa22 f303 	lsr.w	r3, r2, r3
}
 800506c:	4618      	mov	r0, r3
 800506e:	bd80      	pop	{r7, pc}
 8005070:	40023800 	.word	0x40023800
 8005074:	0800d0b8 	.word	0x0800d0b8

08005078 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800507c:	f7ff ffdc 	bl	8005038 <HAL_RCC_GetHCLKFreq>
 8005080:	4602      	mov	r2, r0
 8005082:	4b05      	ldr	r3, [pc, #20]	; (8005098 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	0b5b      	lsrs	r3, r3, #13
 8005088:	f003 0307 	and.w	r3, r3, #7
 800508c:	4903      	ldr	r1, [pc, #12]	; (800509c <HAL_RCC_GetPCLK2Freq+0x24>)
 800508e:	5ccb      	ldrb	r3, [r1, r3]
 8005090:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005094:	4618      	mov	r0, r3
 8005096:	bd80      	pop	{r7, pc}
 8005098:	40023800 	.word	0x40023800
 800509c:	0800d0b8 	.word	0x0800d0b8

080050a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d101      	bne.n	80050b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e01d      	b.n	80050ee <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d106      	bne.n	80050cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f7fc fc90 	bl	80019ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2202      	movs	r2, #2
 80050d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	3304      	adds	r3, #4
 80050dc:	4619      	mov	r1, r3
 80050de:	4610      	mov	r0, r2
 80050e0:	f000 fbde 	bl	80058a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3708      	adds	r7, #8
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80050f6:	b480      	push	{r7}
 80050f8:	b085      	sub	sp, #20
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2202      	movs	r2, #2
 8005102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	f003 0307 	and.w	r3, r3, #7
 8005110:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2b06      	cmp	r3, #6
 8005116:	d007      	beq.n	8005128 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f042 0201 	orr.w	r2, r2, #1
 8005126:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3714      	adds	r7, #20
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr

0800513e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800513e:	b580      	push	{r7, lr}
 8005140:	b082      	sub	sp, #8
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d101      	bne.n	8005150 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e01d      	b.n	800518c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005156:	b2db      	uxtb	r3, r3
 8005158:	2b00      	cmp	r3, #0
 800515a:	d106      	bne.n	800516a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f7fc fc93 	bl	8001a90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2202      	movs	r2, #2
 800516e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	3304      	adds	r3, #4
 800517a:	4619      	mov	r1, r3
 800517c:	4610      	mov	r0, r2
 800517e:	f000 fb8f 	bl	80058a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2201      	movs	r2, #1
 8005186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	3708      	adds	r7, #8
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2201      	movs	r2, #1
 80051a4:	6839      	ldr	r1, [r7, #0]
 80051a6:	4618      	mov	r0, r3
 80051a8:	f000 fe64 	bl	8005e74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a15      	ldr	r2, [pc, #84]	; (8005208 <HAL_TIM_PWM_Start+0x74>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d004      	beq.n	80051c0 <HAL_TIM_PWM_Start+0x2c>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a14      	ldr	r2, [pc, #80]	; (800520c <HAL_TIM_PWM_Start+0x78>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d101      	bne.n	80051c4 <HAL_TIM_PWM_Start+0x30>
 80051c0:	2301      	movs	r3, #1
 80051c2:	e000      	b.n	80051c6 <HAL_TIM_PWM_Start+0x32>
 80051c4:	2300      	movs	r3, #0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d007      	beq.n	80051da <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f003 0307 	and.w	r3, r3, #7
 80051e4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2b06      	cmp	r3, #6
 80051ea:	d007      	beq.n	80051fc <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f042 0201 	orr.w	r2, r2, #1
 80051fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3710      	adds	r7, #16
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	40010000 	.word	0x40010000
 800520c:	40010400 	.word	0x40010400

08005210 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	2b0c      	cmp	r3, #12
 800521e:	d841      	bhi.n	80052a4 <HAL_TIM_PWM_Start_IT+0x94>
 8005220:	a201      	add	r2, pc, #4	; (adr r2, 8005228 <HAL_TIM_PWM_Start_IT+0x18>)
 8005222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005226:	bf00      	nop
 8005228:	0800525d 	.word	0x0800525d
 800522c:	080052a5 	.word	0x080052a5
 8005230:	080052a5 	.word	0x080052a5
 8005234:	080052a5 	.word	0x080052a5
 8005238:	0800526f 	.word	0x0800526f
 800523c:	080052a5 	.word	0x080052a5
 8005240:	080052a5 	.word	0x080052a5
 8005244:	080052a5 	.word	0x080052a5
 8005248:	08005281 	.word	0x08005281
 800524c:	080052a5 	.word	0x080052a5
 8005250:	080052a5 	.word	0x080052a5
 8005254:	080052a5 	.word	0x080052a5
 8005258:	08005293 	.word	0x08005293
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68da      	ldr	r2, [r3, #12]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f042 0202 	orr.w	r2, r2, #2
 800526a:	60da      	str	r2, [r3, #12]
      break;
 800526c:	e01b      	b.n	80052a6 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68da      	ldr	r2, [r3, #12]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f042 0204 	orr.w	r2, r2, #4
 800527c:	60da      	str	r2, [r3, #12]
      break;
 800527e:	e012      	b.n	80052a6 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68da      	ldr	r2, [r3, #12]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f042 0208 	orr.w	r2, r2, #8
 800528e:	60da      	str	r2, [r3, #12]
      break;
 8005290:	e009      	b.n	80052a6 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68da      	ldr	r2, [r3, #12]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f042 0210 	orr.w	r2, r2, #16
 80052a0:	60da      	str	r2, [r3, #12]
      break;
 80052a2:	e000      	b.n	80052a6 <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 80052a4:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2201      	movs	r2, #1
 80052ac:	6839      	ldr	r1, [r7, #0]
 80052ae:	4618      	mov	r0, r3
 80052b0:	f000 fde0 	bl	8005e74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a15      	ldr	r2, [pc, #84]	; (8005310 <HAL_TIM_PWM_Start_IT+0x100>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d004      	beq.n	80052c8 <HAL_TIM_PWM_Start_IT+0xb8>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a14      	ldr	r2, [pc, #80]	; (8005314 <HAL_TIM_PWM_Start_IT+0x104>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d101      	bne.n	80052cc <HAL_TIM_PWM_Start_IT+0xbc>
 80052c8:	2301      	movs	r3, #1
 80052ca:	e000      	b.n	80052ce <HAL_TIM_PWM_Start_IT+0xbe>
 80052cc:	2300      	movs	r3, #0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d007      	beq.n	80052e2 <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	f003 0307 	and.w	r3, r3, #7
 80052ec:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2b06      	cmp	r3, #6
 80052f2:	d007      	beq.n	8005304 <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f042 0201 	orr.w	r2, r2, #1
 8005302:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3710      	adds	r7, #16
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	40010000 	.word	0x40010000
 8005314:	40010400 	.word	0x40010400

08005318 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	f003 0302 	and.w	r3, r3, #2
 800532a:	2b02      	cmp	r3, #2
 800532c:	d122      	bne.n	8005374 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	f003 0302 	and.w	r3, r3, #2
 8005338:	2b02      	cmp	r3, #2
 800533a:	d11b      	bne.n	8005374 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f06f 0202 	mvn.w	r2, #2
 8005344:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2201      	movs	r2, #1
 800534a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	f003 0303 	and.w	r3, r3, #3
 8005356:	2b00      	cmp	r3, #0
 8005358:	d003      	beq.n	8005362 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 fa82 	bl	8005864 <HAL_TIM_IC_CaptureCallback>
 8005360:	e005      	b.n	800536e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 fa74 	bl	8005850 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 fa85 	bl	8005878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	f003 0304 	and.w	r3, r3, #4
 800537e:	2b04      	cmp	r3, #4
 8005380:	d122      	bne.n	80053c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	f003 0304 	and.w	r3, r3, #4
 800538c:	2b04      	cmp	r3, #4
 800538e:	d11b      	bne.n	80053c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f06f 0204 	mvn.w	r2, #4
 8005398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2202      	movs	r2, #2
 800539e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d003      	beq.n	80053b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 fa58 	bl	8005864 <HAL_TIM_IC_CaptureCallback>
 80053b4:	e005      	b.n	80053c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 fa4a 	bl	8005850 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 fa5b 	bl	8005878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	f003 0308 	and.w	r3, r3, #8
 80053d2:	2b08      	cmp	r3, #8
 80053d4:	d122      	bne.n	800541c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	f003 0308 	and.w	r3, r3, #8
 80053e0:	2b08      	cmp	r3, #8
 80053e2:	d11b      	bne.n	800541c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f06f 0208 	mvn.w	r2, #8
 80053ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2204      	movs	r2, #4
 80053f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	69db      	ldr	r3, [r3, #28]
 80053fa:	f003 0303 	and.w	r3, r3, #3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d003      	beq.n	800540a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 fa2e 	bl	8005864 <HAL_TIM_IC_CaptureCallback>
 8005408:	e005      	b.n	8005416 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 fa20 	bl	8005850 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f000 fa31 	bl	8005878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	f003 0310 	and.w	r3, r3, #16
 8005426:	2b10      	cmp	r3, #16
 8005428:	d122      	bne.n	8005470 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	f003 0310 	and.w	r3, r3, #16
 8005434:	2b10      	cmp	r3, #16
 8005436:	d11b      	bne.n	8005470 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f06f 0210 	mvn.w	r2, #16
 8005440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2208      	movs	r2, #8
 8005446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	69db      	ldr	r3, [r3, #28]
 800544e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005452:	2b00      	cmp	r3, #0
 8005454:	d003      	beq.n	800545e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 fa04 	bl	8005864 <HAL_TIM_IC_CaptureCallback>
 800545c:	e005      	b.n	800546a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 f9f6 	bl	8005850 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 fa07 	bl	8005878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	f003 0301 	and.w	r3, r3, #1
 800547a:	2b01      	cmp	r3, #1
 800547c:	d10e      	bne.n	800549c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	f003 0301 	and.w	r3, r3, #1
 8005488:	2b01      	cmp	r3, #1
 800548a:	d107      	bne.n	800549c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f06f 0201 	mvn.w	r2, #1
 8005494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 f9d0 	bl	800583c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054a6:	2b80      	cmp	r3, #128	; 0x80
 80054a8:	d10e      	bne.n	80054c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054b4:	2b80      	cmp	r3, #128	; 0x80
 80054b6:	d107      	bne.n	80054c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 fd82 	bl	8005fcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d2:	2b40      	cmp	r3, #64	; 0x40
 80054d4:	d10e      	bne.n	80054f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e0:	2b40      	cmp	r3, #64	; 0x40
 80054e2:	d107      	bne.n	80054f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 f9cc 	bl	800588c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	f003 0320 	and.w	r3, r3, #32
 80054fe:	2b20      	cmp	r3, #32
 8005500:	d10e      	bne.n	8005520 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	f003 0320 	and.w	r3, r3, #32
 800550c:	2b20      	cmp	r3, #32
 800550e:	d107      	bne.n	8005520 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f06f 0220 	mvn.w	r2, #32
 8005518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 fd4c 	bl	8005fb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005520:	bf00      	nop
 8005522:	3708      	adds	r7, #8
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800553a:	2b01      	cmp	r3, #1
 800553c:	d101      	bne.n	8005542 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800553e:	2302      	movs	r3, #2
 8005540:	e0b4      	b.n	80056ac <HAL_TIM_PWM_ConfigChannel+0x184>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2201      	movs	r2, #1
 8005546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2202      	movs	r2, #2
 800554e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2b0c      	cmp	r3, #12
 8005556:	f200 809f 	bhi.w	8005698 <HAL_TIM_PWM_ConfigChannel+0x170>
 800555a:	a201      	add	r2, pc, #4	; (adr r2, 8005560 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800555c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005560:	08005595 	.word	0x08005595
 8005564:	08005699 	.word	0x08005699
 8005568:	08005699 	.word	0x08005699
 800556c:	08005699 	.word	0x08005699
 8005570:	080055d5 	.word	0x080055d5
 8005574:	08005699 	.word	0x08005699
 8005578:	08005699 	.word	0x08005699
 800557c:	08005699 	.word	0x08005699
 8005580:	08005617 	.word	0x08005617
 8005584:	08005699 	.word	0x08005699
 8005588:	08005699 	.word	0x08005699
 800558c:	08005699 	.word	0x08005699
 8005590:	08005657 	.word	0x08005657
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68b9      	ldr	r1, [r7, #8]
 800559a:	4618      	mov	r0, r3
 800559c:	f000 fa20 	bl	80059e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	699a      	ldr	r2, [r3, #24]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f042 0208 	orr.w	r2, r2, #8
 80055ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	699a      	ldr	r2, [r3, #24]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f022 0204 	bic.w	r2, r2, #4
 80055be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	6999      	ldr	r1, [r3, #24]
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	691a      	ldr	r2, [r3, #16]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	430a      	orrs	r2, r1
 80055d0:	619a      	str	r2, [r3, #24]
      break;
 80055d2:	e062      	b.n	800569a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68b9      	ldr	r1, [r7, #8]
 80055da:	4618      	mov	r0, r3
 80055dc:	f000 fa70 	bl	8005ac0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	699a      	ldr	r2, [r3, #24]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	699a      	ldr	r2, [r3, #24]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	6999      	ldr	r1, [r3, #24]
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	021a      	lsls	r2, r3, #8
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	430a      	orrs	r2, r1
 8005612:	619a      	str	r2, [r3, #24]
      break;
 8005614:	e041      	b.n	800569a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68b9      	ldr	r1, [r7, #8]
 800561c:	4618      	mov	r0, r3
 800561e:	f000 fac5 	bl	8005bac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	69da      	ldr	r2, [r3, #28]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f042 0208 	orr.w	r2, r2, #8
 8005630:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	69da      	ldr	r2, [r3, #28]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f022 0204 	bic.w	r2, r2, #4
 8005640:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	69d9      	ldr	r1, [r3, #28]
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	691a      	ldr	r2, [r3, #16]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	430a      	orrs	r2, r1
 8005652:	61da      	str	r2, [r3, #28]
      break;
 8005654:	e021      	b.n	800569a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68b9      	ldr	r1, [r7, #8]
 800565c:	4618      	mov	r0, r3
 800565e:	f000 fb19 	bl	8005c94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	69da      	ldr	r2, [r3, #28]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005670:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	69da      	ldr	r2, [r3, #28]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005680:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	69d9      	ldr	r1, [r3, #28]
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	021a      	lsls	r2, r3, #8
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	430a      	orrs	r2, r1
 8005694:	61da      	str	r2, [r3, #28]
      break;
 8005696:	e000      	b.n	800569a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005698:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2201      	movs	r2, #1
 800569e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3710      	adds	r7, #16
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d101      	bne.n	80056cc <HAL_TIM_ConfigClockSource+0x18>
 80056c8:	2302      	movs	r3, #2
 80056ca:	e0b3      	b.n	8005834 <HAL_TIM_ConfigClockSource+0x180>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2202      	movs	r2, #2
 80056d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80056ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056f2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005704:	d03e      	beq.n	8005784 <HAL_TIM_ConfigClockSource+0xd0>
 8005706:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800570a:	f200 8087 	bhi.w	800581c <HAL_TIM_ConfigClockSource+0x168>
 800570e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005712:	f000 8085 	beq.w	8005820 <HAL_TIM_ConfigClockSource+0x16c>
 8005716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800571a:	d87f      	bhi.n	800581c <HAL_TIM_ConfigClockSource+0x168>
 800571c:	2b70      	cmp	r3, #112	; 0x70
 800571e:	d01a      	beq.n	8005756 <HAL_TIM_ConfigClockSource+0xa2>
 8005720:	2b70      	cmp	r3, #112	; 0x70
 8005722:	d87b      	bhi.n	800581c <HAL_TIM_ConfigClockSource+0x168>
 8005724:	2b60      	cmp	r3, #96	; 0x60
 8005726:	d050      	beq.n	80057ca <HAL_TIM_ConfigClockSource+0x116>
 8005728:	2b60      	cmp	r3, #96	; 0x60
 800572a:	d877      	bhi.n	800581c <HAL_TIM_ConfigClockSource+0x168>
 800572c:	2b50      	cmp	r3, #80	; 0x50
 800572e:	d03c      	beq.n	80057aa <HAL_TIM_ConfigClockSource+0xf6>
 8005730:	2b50      	cmp	r3, #80	; 0x50
 8005732:	d873      	bhi.n	800581c <HAL_TIM_ConfigClockSource+0x168>
 8005734:	2b40      	cmp	r3, #64	; 0x40
 8005736:	d058      	beq.n	80057ea <HAL_TIM_ConfigClockSource+0x136>
 8005738:	2b40      	cmp	r3, #64	; 0x40
 800573a:	d86f      	bhi.n	800581c <HAL_TIM_ConfigClockSource+0x168>
 800573c:	2b30      	cmp	r3, #48	; 0x30
 800573e:	d064      	beq.n	800580a <HAL_TIM_ConfigClockSource+0x156>
 8005740:	2b30      	cmp	r3, #48	; 0x30
 8005742:	d86b      	bhi.n	800581c <HAL_TIM_ConfigClockSource+0x168>
 8005744:	2b20      	cmp	r3, #32
 8005746:	d060      	beq.n	800580a <HAL_TIM_ConfigClockSource+0x156>
 8005748:	2b20      	cmp	r3, #32
 800574a:	d867      	bhi.n	800581c <HAL_TIM_ConfigClockSource+0x168>
 800574c:	2b00      	cmp	r3, #0
 800574e:	d05c      	beq.n	800580a <HAL_TIM_ConfigClockSource+0x156>
 8005750:	2b10      	cmp	r3, #16
 8005752:	d05a      	beq.n	800580a <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005754:	e062      	b.n	800581c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6818      	ldr	r0, [r3, #0]
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	6899      	ldr	r1, [r3, #8]
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	f000 fb65 	bl	8005e34 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005778:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	609a      	str	r2, [r3, #8]
      break;
 8005782:	e04e      	b.n	8005822 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6818      	ldr	r0, [r3, #0]
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	6899      	ldr	r1, [r3, #8]
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	685a      	ldr	r2, [r3, #4]
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	f000 fb4e 	bl	8005e34 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	689a      	ldr	r2, [r3, #8]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057a6:	609a      	str	r2, [r3, #8]
      break;
 80057a8:	e03b      	b.n	8005822 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6818      	ldr	r0, [r3, #0]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	6859      	ldr	r1, [r3, #4]
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	461a      	mov	r2, r3
 80057b8:	f000 fac2 	bl	8005d40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2150      	movs	r1, #80	; 0x50
 80057c2:	4618      	mov	r0, r3
 80057c4:	f000 fb1b 	bl	8005dfe <TIM_ITRx_SetConfig>
      break;
 80057c8:	e02b      	b.n	8005822 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6818      	ldr	r0, [r3, #0]
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	6859      	ldr	r1, [r3, #4]
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	461a      	mov	r2, r3
 80057d8:	f000 fae1 	bl	8005d9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2160      	movs	r1, #96	; 0x60
 80057e2:	4618      	mov	r0, r3
 80057e4:	f000 fb0b 	bl	8005dfe <TIM_ITRx_SetConfig>
      break;
 80057e8:	e01b      	b.n	8005822 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6818      	ldr	r0, [r3, #0]
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	6859      	ldr	r1, [r3, #4]
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	461a      	mov	r2, r3
 80057f8:	f000 faa2 	bl	8005d40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2140      	movs	r1, #64	; 0x40
 8005802:	4618      	mov	r0, r3
 8005804:	f000 fafb 	bl	8005dfe <TIM_ITRx_SetConfig>
      break;
 8005808:	e00b      	b.n	8005822 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4619      	mov	r1, r3
 8005814:	4610      	mov	r0, r2
 8005816:	f000 faf2 	bl	8005dfe <TIM_ITRx_SetConfig>
      break;
 800581a:	e002      	b.n	8005822 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800581c:	bf00      	nop
 800581e:	e000      	b.n	8005822 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005820:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	3710      	adds	r7, #16
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005844:	bf00      	nop
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005858:	bf00      	nop
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800586c:	bf00      	nop
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005880:	bf00      	nop
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005894:	bf00      	nop
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a40      	ldr	r2, [pc, #256]	; (80059b4 <TIM_Base_SetConfig+0x114>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d013      	beq.n	80058e0 <TIM_Base_SetConfig+0x40>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058be:	d00f      	beq.n	80058e0 <TIM_Base_SetConfig+0x40>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a3d      	ldr	r2, [pc, #244]	; (80059b8 <TIM_Base_SetConfig+0x118>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d00b      	beq.n	80058e0 <TIM_Base_SetConfig+0x40>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a3c      	ldr	r2, [pc, #240]	; (80059bc <TIM_Base_SetConfig+0x11c>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d007      	beq.n	80058e0 <TIM_Base_SetConfig+0x40>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a3b      	ldr	r2, [pc, #236]	; (80059c0 <TIM_Base_SetConfig+0x120>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d003      	beq.n	80058e0 <TIM_Base_SetConfig+0x40>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a3a      	ldr	r2, [pc, #232]	; (80059c4 <TIM_Base_SetConfig+0x124>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d108      	bne.n	80058f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a2f      	ldr	r2, [pc, #188]	; (80059b4 <TIM_Base_SetConfig+0x114>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d02b      	beq.n	8005952 <TIM_Base_SetConfig+0xb2>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005900:	d027      	beq.n	8005952 <TIM_Base_SetConfig+0xb2>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a2c      	ldr	r2, [pc, #176]	; (80059b8 <TIM_Base_SetConfig+0x118>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d023      	beq.n	8005952 <TIM_Base_SetConfig+0xb2>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a2b      	ldr	r2, [pc, #172]	; (80059bc <TIM_Base_SetConfig+0x11c>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d01f      	beq.n	8005952 <TIM_Base_SetConfig+0xb2>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a2a      	ldr	r2, [pc, #168]	; (80059c0 <TIM_Base_SetConfig+0x120>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d01b      	beq.n	8005952 <TIM_Base_SetConfig+0xb2>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a29      	ldr	r2, [pc, #164]	; (80059c4 <TIM_Base_SetConfig+0x124>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d017      	beq.n	8005952 <TIM_Base_SetConfig+0xb2>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a28      	ldr	r2, [pc, #160]	; (80059c8 <TIM_Base_SetConfig+0x128>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d013      	beq.n	8005952 <TIM_Base_SetConfig+0xb2>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a27      	ldr	r2, [pc, #156]	; (80059cc <TIM_Base_SetConfig+0x12c>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d00f      	beq.n	8005952 <TIM_Base_SetConfig+0xb2>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a26      	ldr	r2, [pc, #152]	; (80059d0 <TIM_Base_SetConfig+0x130>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d00b      	beq.n	8005952 <TIM_Base_SetConfig+0xb2>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a25      	ldr	r2, [pc, #148]	; (80059d4 <TIM_Base_SetConfig+0x134>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d007      	beq.n	8005952 <TIM_Base_SetConfig+0xb2>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a24      	ldr	r2, [pc, #144]	; (80059d8 <TIM_Base_SetConfig+0x138>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d003      	beq.n	8005952 <TIM_Base_SetConfig+0xb2>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a23      	ldr	r2, [pc, #140]	; (80059dc <TIM_Base_SetConfig+0x13c>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d108      	bne.n	8005964 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005958:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	4313      	orrs	r3, r2
 8005962:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	4313      	orrs	r3, r2
 8005970:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	689a      	ldr	r2, [r3, #8]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a0a      	ldr	r2, [pc, #40]	; (80059b4 <TIM_Base_SetConfig+0x114>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d003      	beq.n	8005998 <TIM_Base_SetConfig+0xf8>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a0c      	ldr	r2, [pc, #48]	; (80059c4 <TIM_Base_SetConfig+0x124>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d103      	bne.n	80059a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	691a      	ldr	r2, [r3, #16]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	615a      	str	r2, [r3, #20]
}
 80059a6:	bf00      	nop
 80059a8:	3714      	adds	r7, #20
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	40010000 	.word	0x40010000
 80059b8:	40000400 	.word	0x40000400
 80059bc:	40000800 	.word	0x40000800
 80059c0:	40000c00 	.word	0x40000c00
 80059c4:	40010400 	.word	0x40010400
 80059c8:	40014000 	.word	0x40014000
 80059cc:	40014400 	.word	0x40014400
 80059d0:	40014800 	.word	0x40014800
 80059d4:	40001800 	.word	0x40001800
 80059d8:	40001c00 	.word	0x40001c00
 80059dc:	40002000 	.word	0x40002000

080059e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b087      	sub	sp, #28
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a1b      	ldr	r3, [r3, #32]
 80059ee:	f023 0201 	bic.w	r2, r3, #1
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a1b      	ldr	r3, [r3, #32]
 80059fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	699b      	ldr	r3, [r3, #24]
 8005a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f023 0303 	bic.w	r3, r3, #3
 8005a16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	f023 0302 	bic.w	r3, r3, #2
 8005a28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	697a      	ldr	r2, [r7, #20]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a20      	ldr	r2, [pc, #128]	; (8005ab8 <TIM_OC1_SetConfig+0xd8>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d003      	beq.n	8005a44 <TIM_OC1_SetConfig+0x64>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a1f      	ldr	r2, [pc, #124]	; (8005abc <TIM_OC1_SetConfig+0xdc>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d10c      	bne.n	8005a5e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	f023 0308 	bic.w	r3, r3, #8
 8005a4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	697a      	ldr	r2, [r7, #20]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	f023 0304 	bic.w	r3, r3, #4
 8005a5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a15      	ldr	r2, [pc, #84]	; (8005ab8 <TIM_OC1_SetConfig+0xd8>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d003      	beq.n	8005a6e <TIM_OC1_SetConfig+0x8e>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a14      	ldr	r2, [pc, #80]	; (8005abc <TIM_OC1_SetConfig+0xdc>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d111      	bne.n	8005a92 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	695b      	ldr	r3, [r3, #20]
 8005a82:	693a      	ldr	r2, [r7, #16]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	693a      	ldr	r2, [r7, #16]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	685a      	ldr	r2, [r3, #4]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	621a      	str	r2, [r3, #32]
}
 8005aac:	bf00      	nop
 8005aae:	371c      	adds	r7, #28
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr
 8005ab8:	40010000 	.word	0x40010000
 8005abc:	40010400 	.word	0x40010400

08005ac0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b087      	sub	sp, #28
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a1b      	ldr	r3, [r3, #32]
 8005ace:	f023 0210 	bic.w	r2, r3, #16
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a1b      	ldr	r3, [r3, #32]
 8005ada:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	699b      	ldr	r3, [r3, #24]
 8005ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005af6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	021b      	lsls	r3, r3, #8
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	f023 0320 	bic.w	r3, r3, #32
 8005b0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	011b      	lsls	r3, r3, #4
 8005b12:	697a      	ldr	r2, [r7, #20]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a22      	ldr	r2, [pc, #136]	; (8005ba4 <TIM_OC2_SetConfig+0xe4>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d003      	beq.n	8005b28 <TIM_OC2_SetConfig+0x68>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a21      	ldr	r2, [pc, #132]	; (8005ba8 <TIM_OC2_SetConfig+0xe8>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d10d      	bne.n	8005b44 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	011b      	lsls	r3, r3, #4
 8005b36:	697a      	ldr	r2, [r7, #20]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b42:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a17      	ldr	r2, [pc, #92]	; (8005ba4 <TIM_OC2_SetConfig+0xe4>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d003      	beq.n	8005b54 <TIM_OC2_SetConfig+0x94>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a16      	ldr	r2, [pc, #88]	; (8005ba8 <TIM_OC2_SetConfig+0xe8>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d113      	bne.n	8005b7c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	695b      	ldr	r3, [r3, #20]
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	693a      	ldr	r2, [r7, #16]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	693a      	ldr	r2, [r7, #16]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	693a      	ldr	r2, [r7, #16]
 8005b80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	685a      	ldr	r2, [r3, #4]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	621a      	str	r2, [r3, #32]
}
 8005b96:	bf00      	nop
 8005b98:	371c      	adds	r7, #28
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	40010000 	.word	0x40010000
 8005ba8:	40010400 	.word	0x40010400

08005bac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b087      	sub	sp, #28
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a1b      	ldr	r3, [r3, #32]
 8005bba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	69db      	ldr	r3, [r3, #28]
 8005bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f023 0303 	bic.w	r3, r3, #3
 8005be2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	021b      	lsls	r3, r3, #8
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a21      	ldr	r2, [pc, #132]	; (8005c8c <TIM_OC3_SetConfig+0xe0>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d003      	beq.n	8005c12 <TIM_OC3_SetConfig+0x66>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a20      	ldr	r2, [pc, #128]	; (8005c90 <TIM_OC3_SetConfig+0xe4>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d10d      	bne.n	8005c2e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	021b      	lsls	r3, r3, #8
 8005c20:	697a      	ldr	r2, [r7, #20]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a16      	ldr	r2, [pc, #88]	; (8005c8c <TIM_OC3_SetConfig+0xe0>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d003      	beq.n	8005c3e <TIM_OC3_SetConfig+0x92>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a15      	ldr	r2, [pc, #84]	; (8005c90 <TIM_OC3_SetConfig+0xe4>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d113      	bne.n	8005c66 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	695b      	ldr	r3, [r3, #20]
 8005c52:	011b      	lsls	r3, r3, #4
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	011b      	lsls	r3, r3, #4
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	693a      	ldr	r2, [r7, #16]
 8005c6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	685a      	ldr	r2, [r3, #4]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	621a      	str	r2, [r3, #32]
}
 8005c80:	bf00      	nop
 8005c82:	371c      	adds	r7, #28
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr
 8005c8c:	40010000 	.word	0x40010000
 8005c90:	40010400 	.word	0x40010400

08005c94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b087      	sub	sp, #28
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a1b      	ldr	r3, [r3, #32]
 8005ca2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	69db      	ldr	r3, [r3, #28]
 8005cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	021b      	lsls	r3, r3, #8
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	031b      	lsls	r3, r3, #12
 8005ce6:	693a      	ldr	r2, [r7, #16]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a12      	ldr	r2, [pc, #72]	; (8005d38 <TIM_OC4_SetConfig+0xa4>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d003      	beq.n	8005cfc <TIM_OC4_SetConfig+0x68>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a11      	ldr	r2, [pc, #68]	; (8005d3c <TIM_OC4_SetConfig+0xa8>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d109      	bne.n	8005d10 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	695b      	ldr	r3, [r3, #20]
 8005d08:	019b      	lsls	r3, r3, #6
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	697a      	ldr	r2, [r7, #20]
 8005d14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	685a      	ldr	r2, [r3, #4]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	693a      	ldr	r2, [r7, #16]
 8005d28:	621a      	str	r2, [r3, #32]
}
 8005d2a:	bf00      	nop
 8005d2c:	371c      	adds	r7, #28
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	40010000 	.word	0x40010000
 8005d3c:	40010400 	.word	0x40010400

08005d40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b087      	sub	sp, #28
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6a1b      	ldr	r3, [r3, #32]
 8005d50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6a1b      	ldr	r3, [r3, #32]
 8005d56:	f023 0201 	bic.w	r2, r3, #1
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	011b      	lsls	r3, r3, #4
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	f023 030a 	bic.w	r3, r3, #10
 8005d7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	621a      	str	r2, [r3, #32]
}
 8005d92:	bf00      	nop
 8005d94:	371c      	adds	r7, #28
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr

08005d9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b087      	sub	sp, #28
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	60f8      	str	r0, [r7, #12]
 8005da6:	60b9      	str	r1, [r7, #8]
 8005da8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	f023 0210 	bic.w	r2, r3, #16
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6a1b      	ldr	r3, [r3, #32]
 8005dc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005dc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	031b      	lsls	r3, r3, #12
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005dda:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	011b      	lsls	r3, r3, #4
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	697a      	ldr	r2, [r7, #20]
 8005dea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	621a      	str	r2, [r3, #32]
}
 8005df2:	bf00      	nop
 8005df4:	371c      	adds	r7, #28
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr

08005dfe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005dfe:	b480      	push	{r7}
 8005e00:	b085      	sub	sp, #20
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
 8005e06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e16:	683a      	ldr	r2, [r7, #0]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	f043 0307 	orr.w	r3, r3, #7
 8005e20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	609a      	str	r2, [r3, #8]
}
 8005e28:	bf00      	nop
 8005e2a:	3714      	adds	r7, #20
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b087      	sub	sp, #28
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	607a      	str	r2, [r7, #4]
 8005e40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	021a      	lsls	r2, r3, #8
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	431a      	orrs	r2, r3
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	697a      	ldr	r2, [r7, #20]
 8005e66:	609a      	str	r2, [r3, #8]
}
 8005e68:	bf00      	nop
 8005e6a:	371c      	adds	r7, #28
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b087      	sub	sp, #28
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	f003 031f 	and.w	r3, r3, #31
 8005e86:	2201      	movs	r2, #1
 8005e88:	fa02 f303 	lsl.w	r3, r2, r3
 8005e8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6a1a      	ldr	r2, [r3, #32]
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	43db      	mvns	r3, r3
 8005e96:	401a      	ands	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6a1a      	ldr	r2, [r3, #32]
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	f003 031f 	and.w	r3, r3, #31
 8005ea6:	6879      	ldr	r1, [r7, #4]
 8005ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8005eac:	431a      	orrs	r2, r3
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	621a      	str	r2, [r3, #32]
}
 8005eb2:	bf00      	nop
 8005eb4:	371c      	adds	r7, #28
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr
	...

08005ec0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b085      	sub	sp, #20
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d101      	bne.n	8005ed8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ed4:	2302      	movs	r3, #2
 8005ed6:	e05a      	b.n	8005f8e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2202      	movs	r2, #2
 8005ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005efe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a21      	ldr	r2, [pc, #132]	; (8005f9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d022      	beq.n	8005f62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f24:	d01d      	beq.n	8005f62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a1d      	ldr	r2, [pc, #116]	; (8005fa0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d018      	beq.n	8005f62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a1b      	ldr	r2, [pc, #108]	; (8005fa4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d013      	beq.n	8005f62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a1a      	ldr	r2, [pc, #104]	; (8005fa8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d00e      	beq.n	8005f62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a18      	ldr	r2, [pc, #96]	; (8005fac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d009      	beq.n	8005f62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a17      	ldr	r2, [pc, #92]	; (8005fb0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d004      	beq.n	8005f62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a15      	ldr	r2, [pc, #84]	; (8005fb4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d10c      	bne.n	8005f7c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	68ba      	ldr	r2, [r7, #8]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	68ba      	ldr	r2, [r7, #8]
 8005f7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3714      	adds	r7, #20
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	40010000 	.word	0x40010000
 8005fa0:	40000400 	.word	0x40000400
 8005fa4:	40000800 	.word	0x40000800
 8005fa8:	40000c00 	.word	0x40000c00
 8005fac:	40010400 	.word	0x40010400
 8005fb0:	40014000 	.word	0x40014000
 8005fb4:	40001800 	.word	0x40001800

08005fb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005fc0:	bf00      	nop
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fd4:	bf00      	nop
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d101      	bne.n	8005ff2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e03f      	b.n	8006072 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d106      	bne.n	800600c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f7fb fdca 	bl	8001ba0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2224      	movs	r2, #36	; 0x24
 8006010:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68da      	ldr	r2, [r3, #12]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006022:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 fba1 	bl	800676c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	691a      	ldr	r2, [r3, #16]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006038:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	695a      	ldr	r2, [r3, #20]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006048:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68da      	ldr	r2, [r3, #12]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006058:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2220      	movs	r2, #32
 8006064:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2220      	movs	r2, #32
 800606c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	3708      	adds	r7, #8
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800607a:	b580      	push	{r7, lr}
 800607c:	b088      	sub	sp, #32
 800607e:	af02      	add	r7, sp, #8
 8006080:	60f8      	str	r0, [r7, #12]
 8006082:	60b9      	str	r1, [r7, #8]
 8006084:	603b      	str	r3, [r7, #0]
 8006086:	4613      	mov	r3, r2
 8006088:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800608a:	2300      	movs	r3, #0
 800608c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006094:	b2db      	uxtb	r3, r3
 8006096:	2b20      	cmp	r3, #32
 8006098:	f040 8083 	bne.w	80061a2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d002      	beq.n	80060a8 <HAL_UART_Transmit+0x2e>
 80060a2:	88fb      	ldrh	r3, [r7, #6]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d101      	bne.n	80060ac <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	e07b      	b.n	80061a4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d101      	bne.n	80060ba <HAL_UART_Transmit+0x40>
 80060b6:	2302      	movs	r3, #2
 80060b8:	e074      	b.n	80061a4 <HAL_UART_Transmit+0x12a>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2201      	movs	r2, #1
 80060be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2200      	movs	r2, #0
 80060c6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2221      	movs	r2, #33	; 0x21
 80060cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80060d0:	f7fd fcf2 	bl	8003ab8 <HAL_GetTick>
 80060d4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	88fa      	ldrh	r2, [r7, #6]
 80060da:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	88fa      	ldrh	r2, [r7, #6]
 80060e0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80060ea:	e042      	b.n	8006172 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	3b01      	subs	r3, #1
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006102:	d122      	bne.n	800614a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	9300      	str	r3, [sp, #0]
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	2200      	movs	r2, #0
 800610c:	2180      	movs	r1, #128	; 0x80
 800610e:	68f8      	ldr	r0, [r7, #12]
 8006110:	f000 f9c0 	bl	8006494 <UART_WaitOnFlagUntilTimeout>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d001      	beq.n	800611e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800611a:	2303      	movs	r3, #3
 800611c:	e042      	b.n	80061a4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	881b      	ldrh	r3, [r3, #0]
 8006126:	461a      	mov	r2, r3
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006130:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d103      	bne.n	8006142 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	3302      	adds	r3, #2
 800613e:	60bb      	str	r3, [r7, #8]
 8006140:	e017      	b.n	8006172 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	3301      	adds	r3, #1
 8006146:	60bb      	str	r3, [r7, #8]
 8006148:	e013      	b.n	8006172 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	9300      	str	r3, [sp, #0]
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	2200      	movs	r2, #0
 8006152:	2180      	movs	r1, #128	; 0x80
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	f000 f99d 	bl	8006494 <UART_WaitOnFlagUntilTimeout>
 800615a:	4603      	mov	r3, r0
 800615c:	2b00      	cmp	r3, #0
 800615e:	d001      	beq.n	8006164 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8006160:	2303      	movs	r3, #3
 8006162:	e01f      	b.n	80061a4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	1c5a      	adds	r2, r3, #1
 8006168:	60ba      	str	r2, [r7, #8]
 800616a:	781a      	ldrb	r2, [r3, #0]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006176:	b29b      	uxth	r3, r3
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1b7      	bne.n	80060ec <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	9300      	str	r3, [sp, #0]
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	2200      	movs	r2, #0
 8006184:	2140      	movs	r1, #64	; 0x40
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f000 f984 	bl	8006494 <UART_WaitOnFlagUntilTimeout>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d001      	beq.n	8006196 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8006192:	2303      	movs	r3, #3
 8006194:	e006      	b.n	80061a4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2220      	movs	r2, #32
 800619a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800619e:	2300      	movs	r3, #0
 80061a0:	e000      	b.n	80061a4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80061a2:	2302      	movs	r3, #2
  }
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3718      	adds	r7, #24
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b085      	sub	sp, #20
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	4613      	mov	r3, r2
 80061b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	2b20      	cmp	r3, #32
 80061c4:	d140      	bne.n	8006248 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d002      	beq.n	80061d2 <HAL_UART_Receive_IT+0x26>
 80061cc:	88fb      	ldrh	r3, [r7, #6]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d101      	bne.n	80061d6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e039      	b.n	800624a <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d101      	bne.n	80061e4 <HAL_UART_Receive_IT+0x38>
 80061e0:	2302      	movs	r3, #2
 80061e2:	e032      	b.n	800624a <HAL_UART_Receive_IT+0x9e>
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	68ba      	ldr	r2, [r7, #8]
 80061f0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	88fa      	ldrh	r2, [r7, #6]
 80061f6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	88fa      	ldrh	r2, [r7, #6]
 80061fc:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2200      	movs	r2, #0
 8006202:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2222      	movs	r2, #34	; 0x22
 8006208:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2200      	movs	r2, #0
 8006210:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68da      	ldr	r2, [r3, #12]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006222:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	695a      	ldr	r2, [r3, #20]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f042 0201 	orr.w	r2, r2, #1
 8006232:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68da      	ldr	r2, [r3, #12]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f042 0220 	orr.w	r2, r2, #32
 8006242:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006244:	2300      	movs	r3, #0
 8006246:	e000      	b.n	800624a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006248:	2302      	movs	r3, #2
  }
}
 800624a:	4618      	mov	r0, r3
 800624c:	3714      	adds	r7, #20
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr
	...

08006258 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b088      	sub	sp, #32
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	695b      	ldr	r3, [r3, #20]
 8006276:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006278:	2300      	movs	r3, #0
 800627a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800627c:	2300      	movs	r3, #0
 800627e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	f003 030f 	and.w	r3, r3, #15
 8006286:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d10d      	bne.n	80062aa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	f003 0320 	and.w	r3, r3, #32
 8006294:	2b00      	cmp	r3, #0
 8006296:	d008      	beq.n	80062aa <HAL_UART_IRQHandler+0x52>
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	f003 0320 	and.w	r3, r3, #32
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d003      	beq.n	80062aa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 f9e0 	bl	8006668 <UART_Receive_IT>
      return;
 80062a8:	e0d0      	b.n	800644c <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f000 80b0 	beq.w	8006412 <HAL_UART_IRQHandler+0x1ba>
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	f003 0301 	and.w	r3, r3, #1
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d105      	bne.n	80062c8 <HAL_UART_IRQHandler+0x70>
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	f000 80a5 	beq.w	8006412 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	f003 0301 	and.w	r3, r3, #1
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00a      	beq.n	80062e8 <HAL_UART_IRQHandler+0x90>
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d005      	beq.n	80062e8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062e0:	f043 0201 	orr.w	r2, r3, #1
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	f003 0304 	and.w	r3, r3, #4
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d00a      	beq.n	8006308 <HAL_UART_IRQHandler+0xb0>
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	f003 0301 	and.w	r3, r3, #1
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d005      	beq.n	8006308 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006300:	f043 0202 	orr.w	r2, r3, #2
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	f003 0302 	and.w	r3, r3, #2
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00a      	beq.n	8006328 <HAL_UART_IRQHandler+0xd0>
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	f003 0301 	and.w	r3, r3, #1
 8006318:	2b00      	cmp	r3, #0
 800631a:	d005      	beq.n	8006328 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006320:	f043 0204 	orr.w	r2, r3, #4
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	f003 0308 	and.w	r3, r3, #8
 800632e:	2b00      	cmp	r3, #0
 8006330:	d00f      	beq.n	8006352 <HAL_UART_IRQHandler+0xfa>
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	f003 0320 	and.w	r3, r3, #32
 8006338:	2b00      	cmp	r3, #0
 800633a:	d104      	bne.n	8006346 <HAL_UART_IRQHandler+0xee>
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	f003 0301 	and.w	r3, r3, #1
 8006342:	2b00      	cmp	r3, #0
 8006344:	d005      	beq.n	8006352 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800634a:	f043 0208 	orr.w	r2, r3, #8
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006356:	2b00      	cmp	r3, #0
 8006358:	d077      	beq.n	800644a <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	f003 0320 	and.w	r3, r3, #32
 8006360:	2b00      	cmp	r3, #0
 8006362:	d007      	beq.n	8006374 <HAL_UART_IRQHandler+0x11c>
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	f003 0320 	and.w	r3, r3, #32
 800636a:	2b00      	cmp	r3, #0
 800636c:	d002      	beq.n	8006374 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 f97a 	bl	8006668 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	695b      	ldr	r3, [r3, #20]
 800637a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800637e:	2b40      	cmp	r3, #64	; 0x40
 8006380:	bf0c      	ite	eq
 8006382:	2301      	moveq	r3, #1
 8006384:	2300      	movne	r3, #0
 8006386:	b2db      	uxtb	r3, r3
 8006388:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800638e:	f003 0308 	and.w	r3, r3, #8
 8006392:	2b00      	cmp	r3, #0
 8006394:	d102      	bne.n	800639c <HAL_UART_IRQHandler+0x144>
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d031      	beq.n	8006400 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 f8c3 	bl	8006528 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	695b      	ldr	r3, [r3, #20]
 80063a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ac:	2b40      	cmp	r3, #64	; 0x40
 80063ae:	d123      	bne.n	80063f8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	695a      	ldr	r2, [r3, #20]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063be:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d013      	beq.n	80063f0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063cc:	4a21      	ldr	r2, [pc, #132]	; (8006454 <HAL_UART_IRQHandler+0x1fc>)
 80063ce:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063d4:	4618      	mov	r0, r3
 80063d6:	f7fd fd93 	bl	8003f00 <HAL_DMA_Abort_IT>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d016      	beq.n	800640e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80063ea:	4610      	mov	r0, r2
 80063ec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063ee:	e00e      	b.n	800640e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 f845 	bl	8006480 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063f6:	e00a      	b.n	800640e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 f841 	bl	8006480 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063fe:	e006      	b.n	800640e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 f83d 	bl	8006480 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800640c:	e01d      	b.n	800644a <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800640e:	bf00      	nop
    return;
 8006410:	e01b      	b.n	800644a <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006418:	2b00      	cmp	r3, #0
 800641a:	d008      	beq.n	800642e <HAL_UART_IRQHandler+0x1d6>
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006422:	2b00      	cmp	r3, #0
 8006424:	d003      	beq.n	800642e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 f8b0 	bl	800658c <UART_Transmit_IT>
    return;
 800642c:	e00e      	b.n	800644c <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006434:	2b00      	cmp	r3, #0
 8006436:	d009      	beq.n	800644c <HAL_UART_IRQHandler+0x1f4>
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800643e:	2b00      	cmp	r3, #0
 8006440:	d004      	beq.n	800644c <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 f8f8 	bl	8006638 <UART_EndTransmit_IT>
    return;
 8006448:	e000      	b.n	800644c <HAL_UART_IRQHandler+0x1f4>
    return;
 800644a:	bf00      	nop
  }
}
 800644c:	3720      	adds	r7, #32
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	08006565 	.word	0x08006565

08006458 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006474:	bf00      	nop
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006488:	bf00      	nop
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	603b      	str	r3, [r7, #0]
 80064a0:	4613      	mov	r3, r2
 80064a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064a4:	e02c      	b.n	8006500 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ac:	d028      	beq.n	8006500 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d007      	beq.n	80064c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80064b4:	f7fd fb00 	bl	8003ab8 <HAL_GetTick>
 80064b8:	4602      	mov	r2, r0
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	69ba      	ldr	r2, [r7, #24]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d21d      	bcs.n	8006500 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68da      	ldr	r2, [r3, #12]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80064d2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	695a      	ldr	r2, [r3, #20]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f022 0201 	bic.w	r2, r2, #1
 80064e2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2220      	movs	r2, #32
 80064e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2220      	movs	r2, #32
 80064f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80064fc:	2303      	movs	r3, #3
 80064fe:	e00f      	b.n	8006520 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	4013      	ands	r3, r2
 800650a:	68ba      	ldr	r2, [r7, #8]
 800650c:	429a      	cmp	r2, r3
 800650e:	bf0c      	ite	eq
 8006510:	2301      	moveq	r3, #1
 8006512:	2300      	movne	r3, #0
 8006514:	b2db      	uxtb	r3, r3
 8006516:	461a      	mov	r2, r3
 8006518:	79fb      	ldrb	r3, [r7, #7]
 800651a:	429a      	cmp	r2, r3
 800651c:	d0c3      	beq.n	80064a6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800651e:	2300      	movs	r3, #0
}
 8006520:	4618      	mov	r0, r3
 8006522:	3710      	adds	r7, #16
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	68da      	ldr	r2, [r3, #12]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800653e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	695a      	ldr	r2, [r3, #20]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f022 0201 	bic.w	r2, r2, #1
 800654e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2220      	movs	r2, #32
 8006554:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006558:	bf00      	nop
 800655a:	370c      	adds	r7, #12
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006570:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2200      	movs	r2, #0
 800657c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800657e:	68f8      	ldr	r0, [r7, #12]
 8006580:	f7ff ff7e 	bl	8006480 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006584:	bf00      	nop
 8006586:	3710      	adds	r7, #16
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800658c:	b480      	push	{r7}
 800658e:	b085      	sub	sp, #20
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800659a:	b2db      	uxtb	r3, r3
 800659c:	2b21      	cmp	r3, #33	; 0x21
 800659e:	d144      	bne.n	800662a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065a8:	d11a      	bne.n	80065e0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a1b      	ldr	r3, [r3, #32]
 80065ae:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	881b      	ldrh	r3, [r3, #0]
 80065b4:	461a      	mov	r2, r3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065be:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d105      	bne.n	80065d4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6a1b      	ldr	r3, [r3, #32]
 80065cc:	1c9a      	adds	r2, r3, #2
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	621a      	str	r2, [r3, #32]
 80065d2:	e00e      	b.n	80065f2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a1b      	ldr	r3, [r3, #32]
 80065d8:	1c5a      	adds	r2, r3, #1
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	621a      	str	r2, [r3, #32]
 80065de:	e008      	b.n	80065f2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6a1b      	ldr	r3, [r3, #32]
 80065e4:	1c59      	adds	r1, r3, #1
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	6211      	str	r1, [r2, #32]
 80065ea:	781a      	ldrb	r2, [r3, #0]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	3b01      	subs	r3, #1
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	4619      	mov	r1, r3
 8006600:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006602:	2b00      	cmp	r3, #0
 8006604:	d10f      	bne.n	8006626 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	68da      	ldr	r2, [r3, #12]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006614:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68da      	ldr	r2, [r3, #12]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006624:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006626:	2300      	movs	r3, #0
 8006628:	e000      	b.n	800662c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800662a:	2302      	movs	r3, #2
  }
}
 800662c:	4618      	mov	r0, r3
 800662e:	3714      	adds	r7, #20
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	68da      	ldr	r2, [r3, #12]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800664e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2220      	movs	r2, #32
 8006654:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f7ff fefd 	bl	8006458 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800665e:	2300      	movs	r3, #0
}
 8006660:	4618      	mov	r0, r3
 8006662:	3708      	adds	r7, #8
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006676:	b2db      	uxtb	r3, r3
 8006678:	2b22      	cmp	r3, #34	; 0x22
 800667a:	d171      	bne.n	8006760 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006684:	d123      	bne.n	80066ce <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800668a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d10e      	bne.n	80066b2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	b29b      	uxth	r3, r3
 800669c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066a0:	b29a      	uxth	r2, r3
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066aa:	1c9a      	adds	r2, r3, #2
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	629a      	str	r2, [r3, #40]	; 0x28
 80066b0:	e029      	b.n	8006706 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	b29a      	uxth	r2, r3
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c6:	1c5a      	adds	r2, r3, #1
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	629a      	str	r2, [r3, #40]	; 0x28
 80066cc:	e01b      	b.n	8006706 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d10a      	bne.n	80066ec <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	6858      	ldr	r0, [r3, #4]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e0:	1c59      	adds	r1, r3, #1
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	6291      	str	r1, [r2, #40]	; 0x28
 80066e6:	b2c2      	uxtb	r2, r0
 80066e8:	701a      	strb	r2, [r3, #0]
 80066ea:	e00c      	b.n	8006706 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	b2da      	uxtb	r2, r3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f8:	1c58      	adds	r0, r3, #1
 80066fa:	6879      	ldr	r1, [r7, #4]
 80066fc:	6288      	str	r0, [r1, #40]	; 0x28
 80066fe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006702:	b2d2      	uxtb	r2, r2
 8006704:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800670a:	b29b      	uxth	r3, r3
 800670c:	3b01      	subs	r3, #1
 800670e:	b29b      	uxth	r3, r3
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	4619      	mov	r1, r3
 8006714:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006716:	2b00      	cmp	r3, #0
 8006718:	d120      	bne.n	800675c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68da      	ldr	r2, [r3, #12]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f022 0220 	bic.w	r2, r2, #32
 8006728:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68da      	ldr	r2, [r3, #12]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006738:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	695a      	ldr	r2, [r3, #20]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f022 0201 	bic.w	r2, r2, #1
 8006748:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2220      	movs	r2, #32
 800674e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f7ff fe8a 	bl	800646c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006758:	2300      	movs	r3, #0
 800675a:	e002      	b.n	8006762 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800675c:	2300      	movs	r3, #0
 800675e:	e000      	b.n	8006762 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006760:	2302      	movs	r3, #2
  }
}
 8006762:	4618      	mov	r0, r3
 8006764:	3710      	adds	r7, #16
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
	...

0800676c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800676c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006770:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8006774:	af00      	add	r7, sp, #0
 8006776:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800677a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006786:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800678a:	68d9      	ldr	r1, [r3, #12]
 800678c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	ea40 0301 	orr.w	r3, r0, r1
 8006796:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006798:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800679c:	689a      	ldr	r2, [r3, #8]
 800679e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	431a      	orrs	r2, r3
 80067a6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80067aa:	695b      	ldr	r3, [r3, #20]
 80067ac:	431a      	orrs	r2, r3
 80067ae:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80067b2:	69db      	ldr	r3, [r3, #28]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 80067ba:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80067c6:	f021 010c 	bic.w	r1, r1, #12
 80067ca:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80067d4:	430b      	orrs	r3, r1
 80067d6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80067d8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	695b      	ldr	r3, [r3, #20]
 80067e0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80067e4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80067e8:	6999      	ldr	r1, [r3, #24]
 80067ea:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	ea40 0301 	orr.w	r3, r0, r1
 80067f4:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067f6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80067fa:	69db      	ldr	r3, [r3, #28]
 80067fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006800:	f040 824a 	bne.w	8006c98 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006804:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	4b96      	ldr	r3, [pc, #600]	; (8006a64 <UART_SetConfig+0x2f8>)
 800680c:	429a      	cmp	r2, r3
 800680e:	d006      	beq.n	800681e <UART_SetConfig+0xb2>
 8006810:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	4b94      	ldr	r3, [pc, #592]	; (8006a68 <UART_SetConfig+0x2fc>)
 8006818:	429a      	cmp	r2, r3
 800681a:	f040 8129 	bne.w	8006a70 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800681e:	f7fe fc2b 	bl	8005078 <HAL_RCC_GetPCLK2Freq>
 8006822:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006826:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800682a:	2200      	movs	r2, #0
 800682c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8006830:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8006834:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8006838:	4622      	mov	r2, r4
 800683a:	462b      	mov	r3, r5
 800683c:	1891      	adds	r1, r2, r2
 800683e:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8006842:	415b      	adcs	r3, r3
 8006844:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006848:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800684c:	4621      	mov	r1, r4
 800684e:	1851      	adds	r1, r2, r1
 8006850:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8006854:	4629      	mov	r1, r5
 8006856:	414b      	adcs	r3, r1
 8006858:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800685c:	f04f 0200 	mov.w	r2, #0
 8006860:	f04f 0300 	mov.w	r3, #0
 8006864:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8006868:	4649      	mov	r1, r9
 800686a:	00cb      	lsls	r3, r1, #3
 800686c:	4641      	mov	r1, r8
 800686e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006872:	4641      	mov	r1, r8
 8006874:	00ca      	lsls	r2, r1, #3
 8006876:	4610      	mov	r0, r2
 8006878:	4619      	mov	r1, r3
 800687a:	4603      	mov	r3, r0
 800687c:	4622      	mov	r2, r4
 800687e:	189b      	adds	r3, r3, r2
 8006880:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8006884:	462b      	mov	r3, r5
 8006886:	460a      	mov	r2, r1
 8006888:	eb42 0303 	adc.w	r3, r2, r3
 800688c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8006890:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800689c:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 80068a0:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 80068a4:	460b      	mov	r3, r1
 80068a6:	18db      	adds	r3, r3, r3
 80068a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80068ac:	4613      	mov	r3, r2
 80068ae:	eb42 0303 	adc.w	r3, r2, r3
 80068b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80068b6:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80068ba:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 80068be:	f7f9 fce7 	bl	8000290 <__aeabi_uldivmod>
 80068c2:	4602      	mov	r2, r0
 80068c4:	460b      	mov	r3, r1
 80068c6:	4b69      	ldr	r3, [pc, #420]	; (8006a6c <UART_SetConfig+0x300>)
 80068c8:	fba3 2302 	umull	r2, r3, r3, r2
 80068cc:	095b      	lsrs	r3, r3, #5
 80068ce:	011c      	lsls	r4, r3, #4
 80068d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80068d4:	2200      	movs	r2, #0
 80068d6:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 80068da:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80068de:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 80068e2:	4642      	mov	r2, r8
 80068e4:	464b      	mov	r3, r9
 80068e6:	1891      	adds	r1, r2, r2
 80068e8:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80068ec:	415b      	adcs	r3, r3
 80068ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80068f2:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80068f6:	4641      	mov	r1, r8
 80068f8:	1851      	adds	r1, r2, r1
 80068fa:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 80068fe:	4649      	mov	r1, r9
 8006900:	414b      	adcs	r3, r1
 8006902:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006906:	f04f 0200 	mov.w	r2, #0
 800690a:	f04f 0300 	mov.w	r3, #0
 800690e:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 8006912:	4659      	mov	r1, fp
 8006914:	00cb      	lsls	r3, r1, #3
 8006916:	4651      	mov	r1, sl
 8006918:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800691c:	4651      	mov	r1, sl
 800691e:	00ca      	lsls	r2, r1, #3
 8006920:	4610      	mov	r0, r2
 8006922:	4619      	mov	r1, r3
 8006924:	4603      	mov	r3, r0
 8006926:	4642      	mov	r2, r8
 8006928:	189b      	adds	r3, r3, r2
 800692a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800692e:	464b      	mov	r3, r9
 8006930:	460a      	mov	r2, r1
 8006932:	eb42 0303 	adc.w	r3, r2, r3
 8006936:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800693a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8006946:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 800694a:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 800694e:	460b      	mov	r3, r1
 8006950:	18db      	adds	r3, r3, r3
 8006952:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006956:	4613      	mov	r3, r2
 8006958:	eb42 0303 	adc.w	r3, r2, r3
 800695c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006960:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8006964:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8006968:	f7f9 fc92 	bl	8000290 <__aeabi_uldivmod>
 800696c:	4602      	mov	r2, r0
 800696e:	460b      	mov	r3, r1
 8006970:	4611      	mov	r1, r2
 8006972:	4b3e      	ldr	r3, [pc, #248]	; (8006a6c <UART_SetConfig+0x300>)
 8006974:	fba3 2301 	umull	r2, r3, r3, r1
 8006978:	095b      	lsrs	r3, r3, #5
 800697a:	2264      	movs	r2, #100	; 0x64
 800697c:	fb02 f303 	mul.w	r3, r2, r3
 8006980:	1acb      	subs	r3, r1, r3
 8006982:	00db      	lsls	r3, r3, #3
 8006984:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006988:	4b38      	ldr	r3, [pc, #224]	; (8006a6c <UART_SetConfig+0x300>)
 800698a:	fba3 2302 	umull	r2, r3, r3, r2
 800698e:	095b      	lsrs	r3, r3, #5
 8006990:	005b      	lsls	r3, r3, #1
 8006992:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006996:	441c      	add	r4, r3
 8006998:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800699c:	2200      	movs	r2, #0
 800699e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80069a2:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 80069a6:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 80069aa:	4642      	mov	r2, r8
 80069ac:	464b      	mov	r3, r9
 80069ae:	1891      	adds	r1, r2, r2
 80069b0:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 80069b4:	415b      	adcs	r3, r3
 80069b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80069ba:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80069be:	4641      	mov	r1, r8
 80069c0:	1851      	adds	r1, r2, r1
 80069c2:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80069c6:	4649      	mov	r1, r9
 80069c8:	414b      	adcs	r3, r1
 80069ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80069ce:	f04f 0200 	mov.w	r2, #0
 80069d2:	f04f 0300 	mov.w	r3, #0
 80069d6:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 80069da:	4659      	mov	r1, fp
 80069dc:	00cb      	lsls	r3, r1, #3
 80069de:	4651      	mov	r1, sl
 80069e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069e4:	4651      	mov	r1, sl
 80069e6:	00ca      	lsls	r2, r1, #3
 80069e8:	4610      	mov	r0, r2
 80069ea:	4619      	mov	r1, r3
 80069ec:	4603      	mov	r3, r0
 80069ee:	4642      	mov	r2, r8
 80069f0:	189b      	adds	r3, r3, r2
 80069f2:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 80069f6:	464b      	mov	r3, r9
 80069f8:	460a      	mov	r2, r1
 80069fa:	eb42 0303 	adc.w	r3, r2, r3
 80069fe:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8006a02:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8006a0e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8006a12:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 8006a16:	460b      	mov	r3, r1
 8006a18:	18db      	adds	r3, r3, r3
 8006a1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006a1e:	4613      	mov	r3, r2
 8006a20:	eb42 0303 	adc.w	r3, r2, r3
 8006a24:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006a28:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8006a2c:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8006a30:	f7f9 fc2e 	bl	8000290 <__aeabi_uldivmod>
 8006a34:	4602      	mov	r2, r0
 8006a36:	460b      	mov	r3, r1
 8006a38:	4b0c      	ldr	r3, [pc, #48]	; (8006a6c <UART_SetConfig+0x300>)
 8006a3a:	fba3 1302 	umull	r1, r3, r3, r2
 8006a3e:	095b      	lsrs	r3, r3, #5
 8006a40:	2164      	movs	r1, #100	; 0x64
 8006a42:	fb01 f303 	mul.w	r3, r1, r3
 8006a46:	1ad3      	subs	r3, r2, r3
 8006a48:	00db      	lsls	r3, r3, #3
 8006a4a:	3332      	adds	r3, #50	; 0x32
 8006a4c:	4a07      	ldr	r2, [pc, #28]	; (8006a6c <UART_SetConfig+0x300>)
 8006a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a52:	095b      	lsrs	r3, r3, #5
 8006a54:	f003 0207 	and.w	r2, r3, #7
 8006a58:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4422      	add	r2, r4
 8006a60:	609a      	str	r2, [r3, #8]
 8006a62:	e349      	b.n	80070f8 <UART_SetConfig+0x98c>
 8006a64:	40011000 	.word	0x40011000
 8006a68:	40011400 	.word	0x40011400
 8006a6c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a70:	f7fe faee 	bl	8005050 <HAL_RCC_GetPCLK1Freq>
 8006a74:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a78:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8006a82:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8006a86:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8006a8a:	4622      	mov	r2, r4
 8006a8c:	462b      	mov	r3, r5
 8006a8e:	1891      	adds	r1, r2, r2
 8006a90:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8006a94:	415b      	adcs	r3, r3
 8006a96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006a9a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006a9e:	4621      	mov	r1, r4
 8006aa0:	eb12 0a01 	adds.w	sl, r2, r1
 8006aa4:	4629      	mov	r1, r5
 8006aa6:	eb43 0b01 	adc.w	fp, r3, r1
 8006aaa:	f04f 0200 	mov.w	r2, #0
 8006aae:	f04f 0300 	mov.w	r3, #0
 8006ab2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006ab6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006aba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006abe:	4692      	mov	sl, r2
 8006ac0:	469b      	mov	fp, r3
 8006ac2:	4623      	mov	r3, r4
 8006ac4:	eb1a 0303 	adds.w	r3, sl, r3
 8006ac8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8006acc:	462b      	mov	r3, r5
 8006ace:	eb4b 0303 	adc.w	r3, fp, r3
 8006ad2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8006ad6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8006ae2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8006ae6:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8006aea:	460b      	mov	r3, r1
 8006aec:	18db      	adds	r3, r3, r3
 8006aee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006af2:	4613      	mov	r3, r2
 8006af4:	eb42 0303 	adc.w	r3, r2, r3
 8006af8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006afc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8006b00:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8006b04:	f7f9 fbc4 	bl	8000290 <__aeabi_uldivmod>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	4b61      	ldr	r3, [pc, #388]	; (8006c94 <UART_SetConfig+0x528>)
 8006b0e:	fba3 2302 	umull	r2, r3, r3, r2
 8006b12:	095b      	lsrs	r3, r3, #5
 8006b14:	011c      	lsls	r4, r3, #4
 8006b16:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8006b20:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8006b24:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8006b28:	4642      	mov	r2, r8
 8006b2a:	464b      	mov	r3, r9
 8006b2c:	1891      	adds	r1, r2, r2
 8006b2e:	67b9      	str	r1, [r7, #120]	; 0x78
 8006b30:	415b      	adcs	r3, r3
 8006b32:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006b34:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8006b38:	4641      	mov	r1, r8
 8006b3a:	1851      	adds	r1, r2, r1
 8006b3c:	6739      	str	r1, [r7, #112]	; 0x70
 8006b3e:	4649      	mov	r1, r9
 8006b40:	414b      	adcs	r3, r1
 8006b42:	677b      	str	r3, [r7, #116]	; 0x74
 8006b44:	f04f 0200 	mov.w	r2, #0
 8006b48:	f04f 0300 	mov.w	r3, #0
 8006b4c:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8006b50:	4659      	mov	r1, fp
 8006b52:	00cb      	lsls	r3, r1, #3
 8006b54:	4651      	mov	r1, sl
 8006b56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b5a:	4651      	mov	r1, sl
 8006b5c:	00ca      	lsls	r2, r1, #3
 8006b5e:	4610      	mov	r0, r2
 8006b60:	4619      	mov	r1, r3
 8006b62:	4603      	mov	r3, r0
 8006b64:	4642      	mov	r2, r8
 8006b66:	189b      	adds	r3, r3, r2
 8006b68:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8006b6c:	464b      	mov	r3, r9
 8006b6e:	460a      	mov	r2, r1
 8006b70:	eb42 0303 	adc.w	r3, r2, r3
 8006b74:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8006b78:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8006b84:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8006b88:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	18db      	adds	r3, r3, r3
 8006b90:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b92:	4613      	mov	r3, r2
 8006b94:	eb42 0303 	adc.w	r3, r2, r3
 8006b98:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b9a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8006b9e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8006ba2:	f7f9 fb75 	bl	8000290 <__aeabi_uldivmod>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	460b      	mov	r3, r1
 8006baa:	4611      	mov	r1, r2
 8006bac:	4b39      	ldr	r3, [pc, #228]	; (8006c94 <UART_SetConfig+0x528>)
 8006bae:	fba3 2301 	umull	r2, r3, r3, r1
 8006bb2:	095b      	lsrs	r3, r3, #5
 8006bb4:	2264      	movs	r2, #100	; 0x64
 8006bb6:	fb02 f303 	mul.w	r3, r2, r3
 8006bba:	1acb      	subs	r3, r1, r3
 8006bbc:	00db      	lsls	r3, r3, #3
 8006bbe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006bc2:	4b34      	ldr	r3, [pc, #208]	; (8006c94 <UART_SetConfig+0x528>)
 8006bc4:	fba3 2302 	umull	r2, r3, r3, r2
 8006bc8:	095b      	lsrs	r3, r3, #5
 8006bca:	005b      	lsls	r3, r3, #1
 8006bcc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006bd0:	441c      	add	r4, r3
 8006bd2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8006bdc:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8006be0:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8006be4:	4642      	mov	r2, r8
 8006be6:	464b      	mov	r3, r9
 8006be8:	1891      	adds	r1, r2, r2
 8006bea:	6639      	str	r1, [r7, #96]	; 0x60
 8006bec:	415b      	adcs	r3, r3
 8006bee:	667b      	str	r3, [r7, #100]	; 0x64
 8006bf0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8006bf4:	4641      	mov	r1, r8
 8006bf6:	1851      	adds	r1, r2, r1
 8006bf8:	65b9      	str	r1, [r7, #88]	; 0x58
 8006bfa:	4649      	mov	r1, r9
 8006bfc:	414b      	adcs	r3, r1
 8006bfe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c00:	f04f 0200 	mov.w	r2, #0
 8006c04:	f04f 0300 	mov.w	r3, #0
 8006c08:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8006c0c:	4659      	mov	r1, fp
 8006c0e:	00cb      	lsls	r3, r1, #3
 8006c10:	4651      	mov	r1, sl
 8006c12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c16:	4651      	mov	r1, sl
 8006c18:	00ca      	lsls	r2, r1, #3
 8006c1a:	4610      	mov	r0, r2
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	4603      	mov	r3, r0
 8006c20:	4642      	mov	r2, r8
 8006c22:	189b      	adds	r3, r3, r2
 8006c24:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8006c28:	464b      	mov	r3, r9
 8006c2a:	460a      	mov	r2, r1
 8006c2c:	eb42 0303 	adc.w	r3, r2, r3
 8006c30:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8006c34:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8006c40:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8006c44:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8006c48:	460b      	mov	r3, r1
 8006c4a:	18db      	adds	r3, r3, r3
 8006c4c:	653b      	str	r3, [r7, #80]	; 0x50
 8006c4e:	4613      	mov	r3, r2
 8006c50:	eb42 0303 	adc.w	r3, r2, r3
 8006c54:	657b      	str	r3, [r7, #84]	; 0x54
 8006c56:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006c5a:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8006c5e:	f7f9 fb17 	bl	8000290 <__aeabi_uldivmod>
 8006c62:	4602      	mov	r2, r0
 8006c64:	460b      	mov	r3, r1
 8006c66:	4b0b      	ldr	r3, [pc, #44]	; (8006c94 <UART_SetConfig+0x528>)
 8006c68:	fba3 1302 	umull	r1, r3, r3, r2
 8006c6c:	095b      	lsrs	r3, r3, #5
 8006c6e:	2164      	movs	r1, #100	; 0x64
 8006c70:	fb01 f303 	mul.w	r3, r1, r3
 8006c74:	1ad3      	subs	r3, r2, r3
 8006c76:	00db      	lsls	r3, r3, #3
 8006c78:	3332      	adds	r3, #50	; 0x32
 8006c7a:	4a06      	ldr	r2, [pc, #24]	; (8006c94 <UART_SetConfig+0x528>)
 8006c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c80:	095b      	lsrs	r3, r3, #5
 8006c82:	f003 0207 	and.w	r2, r3, #7
 8006c86:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4422      	add	r2, r4
 8006c8e:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006c90:	e232      	b.n	80070f8 <UART_SetConfig+0x98c>
 8006c92:	bf00      	nop
 8006c94:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c98:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	4b8d      	ldr	r3, [pc, #564]	; (8006ed4 <UART_SetConfig+0x768>)
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d006      	beq.n	8006cb2 <UART_SetConfig+0x546>
 8006ca4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	4b8b      	ldr	r3, [pc, #556]	; (8006ed8 <UART_SetConfig+0x76c>)
 8006cac:	429a      	cmp	r2, r3
 8006cae:	f040 8117 	bne.w	8006ee0 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006cb2:	f7fe f9e1 	bl	8005078 <HAL_RCC_GetPCLK2Freq>
 8006cb6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006cba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8006cc4:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8006cc8:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8006ccc:	4622      	mov	r2, r4
 8006cce:	462b      	mov	r3, r5
 8006cd0:	1891      	adds	r1, r2, r2
 8006cd2:	64b9      	str	r1, [r7, #72]	; 0x48
 8006cd4:	415b      	adcs	r3, r3
 8006cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cd8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006cdc:	4621      	mov	r1, r4
 8006cde:	eb12 0801 	adds.w	r8, r2, r1
 8006ce2:	4629      	mov	r1, r5
 8006ce4:	eb43 0901 	adc.w	r9, r3, r1
 8006ce8:	f04f 0200 	mov.w	r2, #0
 8006cec:	f04f 0300 	mov.w	r3, #0
 8006cf0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006cf4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006cf8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006cfc:	4690      	mov	r8, r2
 8006cfe:	4699      	mov	r9, r3
 8006d00:	4623      	mov	r3, r4
 8006d02:	eb18 0303 	adds.w	r3, r8, r3
 8006d06:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8006d0a:	462b      	mov	r3, r5
 8006d0c:	eb49 0303 	adc.w	r3, r9, r3
 8006d10:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8006d14:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8006d20:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8006d24:	f04f 0200 	mov.w	r2, #0
 8006d28:	f04f 0300 	mov.w	r3, #0
 8006d2c:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8006d30:	4629      	mov	r1, r5
 8006d32:	008b      	lsls	r3, r1, #2
 8006d34:	4621      	mov	r1, r4
 8006d36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d3a:	4621      	mov	r1, r4
 8006d3c:	008a      	lsls	r2, r1, #2
 8006d3e:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8006d42:	f7f9 faa5 	bl	8000290 <__aeabi_uldivmod>
 8006d46:	4602      	mov	r2, r0
 8006d48:	460b      	mov	r3, r1
 8006d4a:	4b64      	ldr	r3, [pc, #400]	; (8006edc <UART_SetConfig+0x770>)
 8006d4c:	fba3 2302 	umull	r2, r3, r3, r2
 8006d50:	095b      	lsrs	r3, r3, #5
 8006d52:	011c      	lsls	r4, r3, #4
 8006d54:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8006d5e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8006d62:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 8006d66:	4642      	mov	r2, r8
 8006d68:	464b      	mov	r3, r9
 8006d6a:	1891      	adds	r1, r2, r2
 8006d6c:	6439      	str	r1, [r7, #64]	; 0x40
 8006d6e:	415b      	adcs	r3, r3
 8006d70:	647b      	str	r3, [r7, #68]	; 0x44
 8006d72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006d76:	4641      	mov	r1, r8
 8006d78:	1851      	adds	r1, r2, r1
 8006d7a:	63b9      	str	r1, [r7, #56]	; 0x38
 8006d7c:	4649      	mov	r1, r9
 8006d7e:	414b      	adcs	r3, r1
 8006d80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d82:	f04f 0200 	mov.w	r2, #0
 8006d86:	f04f 0300 	mov.w	r3, #0
 8006d8a:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8006d8e:	4659      	mov	r1, fp
 8006d90:	00cb      	lsls	r3, r1, #3
 8006d92:	4651      	mov	r1, sl
 8006d94:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d98:	4651      	mov	r1, sl
 8006d9a:	00ca      	lsls	r2, r1, #3
 8006d9c:	4610      	mov	r0, r2
 8006d9e:	4619      	mov	r1, r3
 8006da0:	4603      	mov	r3, r0
 8006da2:	4642      	mov	r2, r8
 8006da4:	189b      	adds	r3, r3, r2
 8006da6:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8006daa:	464b      	mov	r3, r9
 8006dac:	460a      	mov	r2, r1
 8006dae:	eb42 0303 	adc.w	r3, r2, r3
 8006db2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8006db6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8006dc2:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8006dc6:	f04f 0200 	mov.w	r2, #0
 8006dca:	f04f 0300 	mov.w	r3, #0
 8006dce:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8006dd2:	4649      	mov	r1, r9
 8006dd4:	008b      	lsls	r3, r1, #2
 8006dd6:	4641      	mov	r1, r8
 8006dd8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ddc:	4641      	mov	r1, r8
 8006dde:	008a      	lsls	r2, r1, #2
 8006de0:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8006de4:	f7f9 fa54 	bl	8000290 <__aeabi_uldivmod>
 8006de8:	4602      	mov	r2, r0
 8006dea:	460b      	mov	r3, r1
 8006dec:	4b3b      	ldr	r3, [pc, #236]	; (8006edc <UART_SetConfig+0x770>)
 8006dee:	fba3 1302 	umull	r1, r3, r3, r2
 8006df2:	095b      	lsrs	r3, r3, #5
 8006df4:	2164      	movs	r1, #100	; 0x64
 8006df6:	fb01 f303 	mul.w	r3, r1, r3
 8006dfa:	1ad3      	subs	r3, r2, r3
 8006dfc:	011b      	lsls	r3, r3, #4
 8006dfe:	3332      	adds	r3, #50	; 0x32
 8006e00:	4a36      	ldr	r2, [pc, #216]	; (8006edc <UART_SetConfig+0x770>)
 8006e02:	fba2 2303 	umull	r2, r3, r2, r3
 8006e06:	095b      	lsrs	r3, r3, #5
 8006e08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e0c:	441c      	add	r4, r3
 8006e0e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006e12:	2200      	movs	r2, #0
 8006e14:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8006e18:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8006e1c:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8006e20:	4642      	mov	r2, r8
 8006e22:	464b      	mov	r3, r9
 8006e24:	1891      	adds	r1, r2, r2
 8006e26:	6339      	str	r1, [r7, #48]	; 0x30
 8006e28:	415b      	adcs	r3, r3
 8006e2a:	637b      	str	r3, [r7, #52]	; 0x34
 8006e2c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006e30:	4641      	mov	r1, r8
 8006e32:	1851      	adds	r1, r2, r1
 8006e34:	62b9      	str	r1, [r7, #40]	; 0x28
 8006e36:	4649      	mov	r1, r9
 8006e38:	414b      	adcs	r3, r1
 8006e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e3c:	f04f 0200 	mov.w	r2, #0
 8006e40:	f04f 0300 	mov.w	r3, #0
 8006e44:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8006e48:	4659      	mov	r1, fp
 8006e4a:	00cb      	lsls	r3, r1, #3
 8006e4c:	4651      	mov	r1, sl
 8006e4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e52:	4651      	mov	r1, sl
 8006e54:	00ca      	lsls	r2, r1, #3
 8006e56:	4610      	mov	r0, r2
 8006e58:	4619      	mov	r1, r3
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	4642      	mov	r2, r8
 8006e5e:	189b      	adds	r3, r3, r2
 8006e60:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006e64:	464b      	mov	r3, r9
 8006e66:	460a      	mov	r2, r1
 8006e68:	eb42 0303 	adc.w	r3, r2, r3
 8006e6c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006e70:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006e7c:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8006e80:	f04f 0200 	mov.w	r2, #0
 8006e84:	f04f 0300 	mov.w	r3, #0
 8006e88:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 8006e8c:	4649      	mov	r1, r9
 8006e8e:	008b      	lsls	r3, r1, #2
 8006e90:	4641      	mov	r1, r8
 8006e92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e96:	4641      	mov	r1, r8
 8006e98:	008a      	lsls	r2, r1, #2
 8006e9a:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8006e9e:	f7f9 f9f7 	bl	8000290 <__aeabi_uldivmod>
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	460b      	mov	r3, r1
 8006ea6:	4b0d      	ldr	r3, [pc, #52]	; (8006edc <UART_SetConfig+0x770>)
 8006ea8:	fba3 1302 	umull	r1, r3, r3, r2
 8006eac:	095b      	lsrs	r3, r3, #5
 8006eae:	2164      	movs	r1, #100	; 0x64
 8006eb0:	fb01 f303 	mul.w	r3, r1, r3
 8006eb4:	1ad3      	subs	r3, r2, r3
 8006eb6:	011b      	lsls	r3, r3, #4
 8006eb8:	3332      	adds	r3, #50	; 0x32
 8006eba:	4a08      	ldr	r2, [pc, #32]	; (8006edc <UART_SetConfig+0x770>)
 8006ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8006ec0:	095b      	lsrs	r3, r3, #5
 8006ec2:	f003 020f 	and.w	r2, r3, #15
 8006ec6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4422      	add	r2, r4
 8006ece:	609a      	str	r2, [r3, #8]
 8006ed0:	e112      	b.n	80070f8 <UART_SetConfig+0x98c>
 8006ed2:	bf00      	nop
 8006ed4:	40011000 	.word	0x40011000
 8006ed8:	40011400 	.word	0x40011400
 8006edc:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8006ee0:	f7fe f8b6 	bl	8005050 <HAL_RCC_GetPCLK1Freq>
 8006ee4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ee8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006eec:	2200      	movs	r2, #0
 8006eee:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006ef2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8006ef6:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8006efa:	4642      	mov	r2, r8
 8006efc:	464b      	mov	r3, r9
 8006efe:	1891      	adds	r1, r2, r2
 8006f00:	6239      	str	r1, [r7, #32]
 8006f02:	415b      	adcs	r3, r3
 8006f04:	627b      	str	r3, [r7, #36]	; 0x24
 8006f06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006f0a:	4641      	mov	r1, r8
 8006f0c:	1854      	adds	r4, r2, r1
 8006f0e:	4649      	mov	r1, r9
 8006f10:	eb43 0501 	adc.w	r5, r3, r1
 8006f14:	f04f 0200 	mov.w	r2, #0
 8006f18:	f04f 0300 	mov.w	r3, #0
 8006f1c:	00eb      	lsls	r3, r5, #3
 8006f1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f22:	00e2      	lsls	r2, r4, #3
 8006f24:	4614      	mov	r4, r2
 8006f26:	461d      	mov	r5, r3
 8006f28:	4643      	mov	r3, r8
 8006f2a:	18e3      	adds	r3, r4, r3
 8006f2c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006f30:	464b      	mov	r3, r9
 8006f32:	eb45 0303 	adc.w	r3, r5, r3
 8006f36:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006f3a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006f46:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8006f4a:	f04f 0200 	mov.w	r2, #0
 8006f4e:	f04f 0300 	mov.w	r3, #0
 8006f52:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8006f56:	4629      	mov	r1, r5
 8006f58:	008b      	lsls	r3, r1, #2
 8006f5a:	4621      	mov	r1, r4
 8006f5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f60:	4621      	mov	r1, r4
 8006f62:	008a      	lsls	r2, r1, #2
 8006f64:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8006f68:	f7f9 f992 	bl	8000290 <__aeabi_uldivmod>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	460b      	mov	r3, r1
 8006f70:	4b64      	ldr	r3, [pc, #400]	; (8007104 <UART_SetConfig+0x998>)
 8006f72:	fba3 2302 	umull	r2, r3, r3, r2
 8006f76:	095b      	lsrs	r3, r3, #5
 8006f78:	011c      	lsls	r4, r3, #4
 8006f7a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006f84:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8006f88:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8006f8c:	4642      	mov	r2, r8
 8006f8e:	464b      	mov	r3, r9
 8006f90:	1891      	adds	r1, r2, r2
 8006f92:	61b9      	str	r1, [r7, #24]
 8006f94:	415b      	adcs	r3, r3
 8006f96:	61fb      	str	r3, [r7, #28]
 8006f98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f9c:	4641      	mov	r1, r8
 8006f9e:	1851      	adds	r1, r2, r1
 8006fa0:	6139      	str	r1, [r7, #16]
 8006fa2:	4649      	mov	r1, r9
 8006fa4:	414b      	adcs	r3, r1
 8006fa6:	617b      	str	r3, [r7, #20]
 8006fa8:	f04f 0200 	mov.w	r2, #0
 8006fac:	f04f 0300 	mov.w	r3, #0
 8006fb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006fb4:	4659      	mov	r1, fp
 8006fb6:	00cb      	lsls	r3, r1, #3
 8006fb8:	4651      	mov	r1, sl
 8006fba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fbe:	4651      	mov	r1, sl
 8006fc0:	00ca      	lsls	r2, r1, #3
 8006fc2:	4610      	mov	r0, r2
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	4642      	mov	r2, r8
 8006fca:	189b      	adds	r3, r3, r2
 8006fcc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006fd0:	464b      	mov	r3, r9
 8006fd2:	460a      	mov	r2, r1
 8006fd4:	eb42 0303 	adc.w	r3, r2, r3
 8006fd8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006fdc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006fe8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8006fec:	f04f 0200 	mov.w	r2, #0
 8006ff0:	f04f 0300 	mov.w	r3, #0
 8006ff4:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8006ff8:	4649      	mov	r1, r9
 8006ffa:	008b      	lsls	r3, r1, #2
 8006ffc:	4641      	mov	r1, r8
 8006ffe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007002:	4641      	mov	r1, r8
 8007004:	008a      	lsls	r2, r1, #2
 8007006:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800700a:	f7f9 f941 	bl	8000290 <__aeabi_uldivmod>
 800700e:	4602      	mov	r2, r0
 8007010:	460b      	mov	r3, r1
 8007012:	4b3c      	ldr	r3, [pc, #240]	; (8007104 <UART_SetConfig+0x998>)
 8007014:	fba3 1302 	umull	r1, r3, r3, r2
 8007018:	095b      	lsrs	r3, r3, #5
 800701a:	2164      	movs	r1, #100	; 0x64
 800701c:	fb01 f303 	mul.w	r3, r1, r3
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	011b      	lsls	r3, r3, #4
 8007024:	3332      	adds	r3, #50	; 0x32
 8007026:	4a37      	ldr	r2, [pc, #220]	; (8007104 <UART_SetConfig+0x998>)
 8007028:	fba2 2303 	umull	r2, r3, r2, r3
 800702c:	095b      	lsrs	r3, r3, #5
 800702e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007032:	441c      	add	r4, r3
 8007034:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007038:	2200      	movs	r2, #0
 800703a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800703e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007042:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8007046:	4642      	mov	r2, r8
 8007048:	464b      	mov	r3, r9
 800704a:	1891      	adds	r1, r2, r2
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	415b      	adcs	r3, r3
 8007050:	60fb      	str	r3, [r7, #12]
 8007052:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007056:	4641      	mov	r1, r8
 8007058:	1851      	adds	r1, r2, r1
 800705a:	6039      	str	r1, [r7, #0]
 800705c:	4649      	mov	r1, r9
 800705e:	414b      	adcs	r3, r1
 8007060:	607b      	str	r3, [r7, #4]
 8007062:	f04f 0200 	mov.w	r2, #0
 8007066:	f04f 0300 	mov.w	r3, #0
 800706a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800706e:	4659      	mov	r1, fp
 8007070:	00cb      	lsls	r3, r1, #3
 8007072:	4651      	mov	r1, sl
 8007074:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007078:	4651      	mov	r1, sl
 800707a:	00ca      	lsls	r2, r1, #3
 800707c:	4610      	mov	r0, r2
 800707e:	4619      	mov	r1, r3
 8007080:	4603      	mov	r3, r0
 8007082:	4642      	mov	r2, r8
 8007084:	189b      	adds	r3, r3, r2
 8007086:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800708a:	464b      	mov	r3, r9
 800708c:	460a      	mov	r2, r1
 800708e:	eb42 0303 	adc.w	r3, r2, r3
 8007092:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007096:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	2200      	movs	r2, #0
 800709e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80070a2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80070a6:	f04f 0200 	mov.w	r2, #0
 80070aa:	f04f 0300 	mov.w	r3, #0
 80070ae:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 80070b2:	4649      	mov	r1, r9
 80070b4:	008b      	lsls	r3, r1, #2
 80070b6:	4641      	mov	r1, r8
 80070b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070bc:	4641      	mov	r1, r8
 80070be:	008a      	lsls	r2, r1, #2
 80070c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80070c4:	f7f9 f8e4 	bl	8000290 <__aeabi_uldivmod>
 80070c8:	4602      	mov	r2, r0
 80070ca:	460b      	mov	r3, r1
 80070cc:	4b0d      	ldr	r3, [pc, #52]	; (8007104 <UART_SetConfig+0x998>)
 80070ce:	fba3 1302 	umull	r1, r3, r3, r2
 80070d2:	095b      	lsrs	r3, r3, #5
 80070d4:	2164      	movs	r1, #100	; 0x64
 80070d6:	fb01 f303 	mul.w	r3, r1, r3
 80070da:	1ad3      	subs	r3, r2, r3
 80070dc:	011b      	lsls	r3, r3, #4
 80070de:	3332      	adds	r3, #50	; 0x32
 80070e0:	4a08      	ldr	r2, [pc, #32]	; (8007104 <UART_SetConfig+0x998>)
 80070e2:	fba2 2303 	umull	r2, r3, r2, r3
 80070e6:	095b      	lsrs	r3, r3, #5
 80070e8:	f003 020f 	and.w	r2, r3, #15
 80070ec:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4422      	add	r2, r4
 80070f4:	609a      	str	r2, [r3, #8]
}
 80070f6:	e7ff      	b.n	80070f8 <UART_SetConfig+0x98c>
 80070f8:	bf00      	nop
 80070fa:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80070fe:	46bd      	mov	sp, r7
 8007100:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007104:	51eb851f 	.word	0x51eb851f

08007108 <atoi>:
 8007108:	220a      	movs	r2, #10
 800710a:	2100      	movs	r1, #0
 800710c:	f000 b8d4 	b.w	80072b8 <strtol>

08007110 <__errno>:
 8007110:	4b01      	ldr	r3, [pc, #4]	; (8007118 <__errno+0x8>)
 8007112:	6818      	ldr	r0, [r3, #0]
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop
 8007118:	200000b4 	.word	0x200000b4

0800711c <__libc_init_array>:
 800711c:	b570      	push	{r4, r5, r6, lr}
 800711e:	4d0d      	ldr	r5, [pc, #52]	; (8007154 <__libc_init_array+0x38>)
 8007120:	4c0d      	ldr	r4, [pc, #52]	; (8007158 <__libc_init_array+0x3c>)
 8007122:	1b64      	subs	r4, r4, r5
 8007124:	10a4      	asrs	r4, r4, #2
 8007126:	2600      	movs	r6, #0
 8007128:	42a6      	cmp	r6, r4
 800712a:	d109      	bne.n	8007140 <__libc_init_array+0x24>
 800712c:	4d0b      	ldr	r5, [pc, #44]	; (800715c <__libc_init_array+0x40>)
 800712e:	4c0c      	ldr	r4, [pc, #48]	; (8007160 <__libc_init_array+0x44>)
 8007130:	f001 f842 	bl	80081b8 <_init>
 8007134:	1b64      	subs	r4, r4, r5
 8007136:	10a4      	asrs	r4, r4, #2
 8007138:	2600      	movs	r6, #0
 800713a:	42a6      	cmp	r6, r4
 800713c:	d105      	bne.n	800714a <__libc_init_array+0x2e>
 800713e:	bd70      	pop	{r4, r5, r6, pc}
 8007140:	f855 3b04 	ldr.w	r3, [r5], #4
 8007144:	4798      	blx	r3
 8007146:	3601      	adds	r6, #1
 8007148:	e7ee      	b.n	8007128 <__libc_init_array+0xc>
 800714a:	f855 3b04 	ldr.w	r3, [r5], #4
 800714e:	4798      	blx	r3
 8007150:	3601      	adds	r6, #1
 8007152:	e7f2      	b.n	800713a <__libc_init_array+0x1e>
 8007154:	0800d26c 	.word	0x0800d26c
 8007158:	0800d26c 	.word	0x0800d26c
 800715c:	0800d26c 	.word	0x0800d26c
 8007160:	0800d270 	.word	0x0800d270

08007164 <memset>:
 8007164:	4402      	add	r2, r0
 8007166:	4603      	mov	r3, r0
 8007168:	4293      	cmp	r3, r2
 800716a:	d100      	bne.n	800716e <memset+0xa>
 800716c:	4770      	bx	lr
 800716e:	f803 1b01 	strb.w	r1, [r3], #1
 8007172:	e7f9      	b.n	8007168 <memset+0x4>

08007174 <iprintf>:
 8007174:	b40f      	push	{r0, r1, r2, r3}
 8007176:	4b0a      	ldr	r3, [pc, #40]	; (80071a0 <iprintf+0x2c>)
 8007178:	b513      	push	{r0, r1, r4, lr}
 800717a:	681c      	ldr	r4, [r3, #0]
 800717c:	b124      	cbz	r4, 8007188 <iprintf+0x14>
 800717e:	69a3      	ldr	r3, [r4, #24]
 8007180:	b913      	cbnz	r3, 8007188 <iprintf+0x14>
 8007182:	4620      	mov	r0, r4
 8007184:	f000 f8fa 	bl	800737c <__sinit>
 8007188:	ab05      	add	r3, sp, #20
 800718a:	9a04      	ldr	r2, [sp, #16]
 800718c:	68a1      	ldr	r1, [r4, #8]
 800718e:	9301      	str	r3, [sp, #4]
 8007190:	4620      	mov	r0, r4
 8007192:	f000 fa51 	bl	8007638 <_vfiprintf_r>
 8007196:	b002      	add	sp, #8
 8007198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800719c:	b004      	add	sp, #16
 800719e:	4770      	bx	lr
 80071a0:	200000b4 	.word	0x200000b4

080071a4 <strcpy>:
 80071a4:	4603      	mov	r3, r0
 80071a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071aa:	f803 2b01 	strb.w	r2, [r3], #1
 80071ae:	2a00      	cmp	r2, #0
 80071b0:	d1f9      	bne.n	80071a6 <strcpy+0x2>
 80071b2:	4770      	bx	lr

080071b4 <_strtol_l.constprop.0>:
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071ba:	d001      	beq.n	80071c0 <_strtol_l.constprop.0+0xc>
 80071bc:	2b24      	cmp	r3, #36	; 0x24
 80071be:	d906      	bls.n	80071ce <_strtol_l.constprop.0+0x1a>
 80071c0:	f7ff ffa6 	bl	8007110 <__errno>
 80071c4:	2316      	movs	r3, #22
 80071c6:	6003      	str	r3, [r0, #0]
 80071c8:	2000      	movs	r0, #0
 80071ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071ce:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80072b4 <_strtol_l.constprop.0+0x100>
 80071d2:	460d      	mov	r5, r1
 80071d4:	462e      	mov	r6, r5
 80071d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80071da:	f814 700c 	ldrb.w	r7, [r4, ip]
 80071de:	f017 0708 	ands.w	r7, r7, #8
 80071e2:	d1f7      	bne.n	80071d4 <_strtol_l.constprop.0+0x20>
 80071e4:	2c2d      	cmp	r4, #45	; 0x2d
 80071e6:	d132      	bne.n	800724e <_strtol_l.constprop.0+0x9a>
 80071e8:	782c      	ldrb	r4, [r5, #0]
 80071ea:	2701      	movs	r7, #1
 80071ec:	1cb5      	adds	r5, r6, #2
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d05b      	beq.n	80072aa <_strtol_l.constprop.0+0xf6>
 80071f2:	2b10      	cmp	r3, #16
 80071f4:	d109      	bne.n	800720a <_strtol_l.constprop.0+0x56>
 80071f6:	2c30      	cmp	r4, #48	; 0x30
 80071f8:	d107      	bne.n	800720a <_strtol_l.constprop.0+0x56>
 80071fa:	782c      	ldrb	r4, [r5, #0]
 80071fc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007200:	2c58      	cmp	r4, #88	; 0x58
 8007202:	d14d      	bne.n	80072a0 <_strtol_l.constprop.0+0xec>
 8007204:	786c      	ldrb	r4, [r5, #1]
 8007206:	2310      	movs	r3, #16
 8007208:	3502      	adds	r5, #2
 800720a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800720e:	f108 38ff 	add.w	r8, r8, #4294967295
 8007212:	f04f 0c00 	mov.w	ip, #0
 8007216:	fbb8 f9f3 	udiv	r9, r8, r3
 800721a:	4666      	mov	r6, ip
 800721c:	fb03 8a19 	mls	sl, r3, r9, r8
 8007220:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007224:	f1be 0f09 	cmp.w	lr, #9
 8007228:	d816      	bhi.n	8007258 <_strtol_l.constprop.0+0xa4>
 800722a:	4674      	mov	r4, lr
 800722c:	42a3      	cmp	r3, r4
 800722e:	dd24      	ble.n	800727a <_strtol_l.constprop.0+0xc6>
 8007230:	f1bc 0f00 	cmp.w	ip, #0
 8007234:	db1e      	blt.n	8007274 <_strtol_l.constprop.0+0xc0>
 8007236:	45b1      	cmp	r9, r6
 8007238:	d31c      	bcc.n	8007274 <_strtol_l.constprop.0+0xc0>
 800723a:	d101      	bne.n	8007240 <_strtol_l.constprop.0+0x8c>
 800723c:	45a2      	cmp	sl, r4
 800723e:	db19      	blt.n	8007274 <_strtol_l.constprop.0+0xc0>
 8007240:	fb06 4603 	mla	r6, r6, r3, r4
 8007244:	f04f 0c01 	mov.w	ip, #1
 8007248:	f815 4b01 	ldrb.w	r4, [r5], #1
 800724c:	e7e8      	b.n	8007220 <_strtol_l.constprop.0+0x6c>
 800724e:	2c2b      	cmp	r4, #43	; 0x2b
 8007250:	bf04      	itt	eq
 8007252:	782c      	ldrbeq	r4, [r5, #0]
 8007254:	1cb5      	addeq	r5, r6, #2
 8007256:	e7ca      	b.n	80071ee <_strtol_l.constprop.0+0x3a>
 8007258:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800725c:	f1be 0f19 	cmp.w	lr, #25
 8007260:	d801      	bhi.n	8007266 <_strtol_l.constprop.0+0xb2>
 8007262:	3c37      	subs	r4, #55	; 0x37
 8007264:	e7e2      	b.n	800722c <_strtol_l.constprop.0+0x78>
 8007266:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800726a:	f1be 0f19 	cmp.w	lr, #25
 800726e:	d804      	bhi.n	800727a <_strtol_l.constprop.0+0xc6>
 8007270:	3c57      	subs	r4, #87	; 0x57
 8007272:	e7db      	b.n	800722c <_strtol_l.constprop.0+0x78>
 8007274:	f04f 3cff 	mov.w	ip, #4294967295
 8007278:	e7e6      	b.n	8007248 <_strtol_l.constprop.0+0x94>
 800727a:	f1bc 0f00 	cmp.w	ip, #0
 800727e:	da05      	bge.n	800728c <_strtol_l.constprop.0+0xd8>
 8007280:	2322      	movs	r3, #34	; 0x22
 8007282:	6003      	str	r3, [r0, #0]
 8007284:	4646      	mov	r6, r8
 8007286:	b942      	cbnz	r2, 800729a <_strtol_l.constprop.0+0xe6>
 8007288:	4630      	mov	r0, r6
 800728a:	e79e      	b.n	80071ca <_strtol_l.constprop.0+0x16>
 800728c:	b107      	cbz	r7, 8007290 <_strtol_l.constprop.0+0xdc>
 800728e:	4276      	negs	r6, r6
 8007290:	2a00      	cmp	r2, #0
 8007292:	d0f9      	beq.n	8007288 <_strtol_l.constprop.0+0xd4>
 8007294:	f1bc 0f00 	cmp.w	ip, #0
 8007298:	d000      	beq.n	800729c <_strtol_l.constprop.0+0xe8>
 800729a:	1e69      	subs	r1, r5, #1
 800729c:	6011      	str	r1, [r2, #0]
 800729e:	e7f3      	b.n	8007288 <_strtol_l.constprop.0+0xd4>
 80072a0:	2430      	movs	r4, #48	; 0x30
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d1b1      	bne.n	800720a <_strtol_l.constprop.0+0x56>
 80072a6:	2308      	movs	r3, #8
 80072a8:	e7af      	b.n	800720a <_strtol_l.constprop.0+0x56>
 80072aa:	2c30      	cmp	r4, #48	; 0x30
 80072ac:	d0a5      	beq.n	80071fa <_strtol_l.constprop.0+0x46>
 80072ae:	230a      	movs	r3, #10
 80072b0:	e7ab      	b.n	800720a <_strtol_l.constprop.0+0x56>
 80072b2:	bf00      	nop
 80072b4:	0800d0cd 	.word	0x0800d0cd

080072b8 <strtol>:
 80072b8:	4613      	mov	r3, r2
 80072ba:	460a      	mov	r2, r1
 80072bc:	4601      	mov	r1, r0
 80072be:	4802      	ldr	r0, [pc, #8]	; (80072c8 <strtol+0x10>)
 80072c0:	6800      	ldr	r0, [r0, #0]
 80072c2:	f7ff bf77 	b.w	80071b4 <_strtol_l.constprop.0>
 80072c6:	bf00      	nop
 80072c8:	200000b4 	.word	0x200000b4

080072cc <std>:
 80072cc:	2300      	movs	r3, #0
 80072ce:	b510      	push	{r4, lr}
 80072d0:	4604      	mov	r4, r0
 80072d2:	e9c0 3300 	strd	r3, r3, [r0]
 80072d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80072da:	6083      	str	r3, [r0, #8]
 80072dc:	8181      	strh	r1, [r0, #12]
 80072de:	6643      	str	r3, [r0, #100]	; 0x64
 80072e0:	81c2      	strh	r2, [r0, #14]
 80072e2:	6183      	str	r3, [r0, #24]
 80072e4:	4619      	mov	r1, r3
 80072e6:	2208      	movs	r2, #8
 80072e8:	305c      	adds	r0, #92	; 0x5c
 80072ea:	f7ff ff3b 	bl	8007164 <memset>
 80072ee:	4b05      	ldr	r3, [pc, #20]	; (8007304 <std+0x38>)
 80072f0:	6263      	str	r3, [r4, #36]	; 0x24
 80072f2:	4b05      	ldr	r3, [pc, #20]	; (8007308 <std+0x3c>)
 80072f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80072f6:	4b05      	ldr	r3, [pc, #20]	; (800730c <std+0x40>)
 80072f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80072fa:	4b05      	ldr	r3, [pc, #20]	; (8007310 <std+0x44>)
 80072fc:	6224      	str	r4, [r4, #32]
 80072fe:	6323      	str	r3, [r4, #48]	; 0x30
 8007300:	bd10      	pop	{r4, pc}
 8007302:	bf00      	nop
 8007304:	08007be1 	.word	0x08007be1
 8007308:	08007c03 	.word	0x08007c03
 800730c:	08007c3b 	.word	0x08007c3b
 8007310:	08007c5f 	.word	0x08007c5f

08007314 <_cleanup_r>:
 8007314:	4901      	ldr	r1, [pc, #4]	; (800731c <_cleanup_r+0x8>)
 8007316:	f000 b8af 	b.w	8007478 <_fwalk_reent>
 800731a:	bf00      	nop
 800731c:	08007f39 	.word	0x08007f39

08007320 <__sfmoreglue>:
 8007320:	b570      	push	{r4, r5, r6, lr}
 8007322:	2268      	movs	r2, #104	; 0x68
 8007324:	1e4d      	subs	r5, r1, #1
 8007326:	4355      	muls	r5, r2
 8007328:	460e      	mov	r6, r1
 800732a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800732e:	f000 f8e5 	bl	80074fc <_malloc_r>
 8007332:	4604      	mov	r4, r0
 8007334:	b140      	cbz	r0, 8007348 <__sfmoreglue+0x28>
 8007336:	2100      	movs	r1, #0
 8007338:	e9c0 1600 	strd	r1, r6, [r0]
 800733c:	300c      	adds	r0, #12
 800733e:	60a0      	str	r0, [r4, #8]
 8007340:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007344:	f7ff ff0e 	bl	8007164 <memset>
 8007348:	4620      	mov	r0, r4
 800734a:	bd70      	pop	{r4, r5, r6, pc}

0800734c <__sfp_lock_acquire>:
 800734c:	4801      	ldr	r0, [pc, #4]	; (8007354 <__sfp_lock_acquire+0x8>)
 800734e:	f000 b8b3 	b.w	80074b8 <__retarget_lock_acquire_recursive>
 8007352:	bf00      	nop
 8007354:	20013b31 	.word	0x20013b31

08007358 <__sfp_lock_release>:
 8007358:	4801      	ldr	r0, [pc, #4]	; (8007360 <__sfp_lock_release+0x8>)
 800735a:	f000 b8ae 	b.w	80074ba <__retarget_lock_release_recursive>
 800735e:	bf00      	nop
 8007360:	20013b31 	.word	0x20013b31

08007364 <__sinit_lock_acquire>:
 8007364:	4801      	ldr	r0, [pc, #4]	; (800736c <__sinit_lock_acquire+0x8>)
 8007366:	f000 b8a7 	b.w	80074b8 <__retarget_lock_acquire_recursive>
 800736a:	bf00      	nop
 800736c:	20013b32 	.word	0x20013b32

08007370 <__sinit_lock_release>:
 8007370:	4801      	ldr	r0, [pc, #4]	; (8007378 <__sinit_lock_release+0x8>)
 8007372:	f000 b8a2 	b.w	80074ba <__retarget_lock_release_recursive>
 8007376:	bf00      	nop
 8007378:	20013b32 	.word	0x20013b32

0800737c <__sinit>:
 800737c:	b510      	push	{r4, lr}
 800737e:	4604      	mov	r4, r0
 8007380:	f7ff fff0 	bl	8007364 <__sinit_lock_acquire>
 8007384:	69a3      	ldr	r3, [r4, #24]
 8007386:	b11b      	cbz	r3, 8007390 <__sinit+0x14>
 8007388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800738c:	f7ff bff0 	b.w	8007370 <__sinit_lock_release>
 8007390:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007394:	6523      	str	r3, [r4, #80]	; 0x50
 8007396:	4b13      	ldr	r3, [pc, #76]	; (80073e4 <__sinit+0x68>)
 8007398:	4a13      	ldr	r2, [pc, #76]	; (80073e8 <__sinit+0x6c>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	62a2      	str	r2, [r4, #40]	; 0x28
 800739e:	42a3      	cmp	r3, r4
 80073a0:	bf04      	itt	eq
 80073a2:	2301      	moveq	r3, #1
 80073a4:	61a3      	streq	r3, [r4, #24]
 80073a6:	4620      	mov	r0, r4
 80073a8:	f000 f820 	bl	80073ec <__sfp>
 80073ac:	6060      	str	r0, [r4, #4]
 80073ae:	4620      	mov	r0, r4
 80073b0:	f000 f81c 	bl	80073ec <__sfp>
 80073b4:	60a0      	str	r0, [r4, #8]
 80073b6:	4620      	mov	r0, r4
 80073b8:	f000 f818 	bl	80073ec <__sfp>
 80073bc:	2200      	movs	r2, #0
 80073be:	60e0      	str	r0, [r4, #12]
 80073c0:	2104      	movs	r1, #4
 80073c2:	6860      	ldr	r0, [r4, #4]
 80073c4:	f7ff ff82 	bl	80072cc <std>
 80073c8:	68a0      	ldr	r0, [r4, #8]
 80073ca:	2201      	movs	r2, #1
 80073cc:	2109      	movs	r1, #9
 80073ce:	f7ff ff7d 	bl	80072cc <std>
 80073d2:	68e0      	ldr	r0, [r4, #12]
 80073d4:	2202      	movs	r2, #2
 80073d6:	2112      	movs	r1, #18
 80073d8:	f7ff ff78 	bl	80072cc <std>
 80073dc:	2301      	movs	r3, #1
 80073de:	61a3      	str	r3, [r4, #24]
 80073e0:	e7d2      	b.n	8007388 <__sinit+0xc>
 80073e2:	bf00      	nop
 80073e4:	0800d0c8 	.word	0x0800d0c8
 80073e8:	08007315 	.word	0x08007315

080073ec <__sfp>:
 80073ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ee:	4607      	mov	r7, r0
 80073f0:	f7ff ffac 	bl	800734c <__sfp_lock_acquire>
 80073f4:	4b1e      	ldr	r3, [pc, #120]	; (8007470 <__sfp+0x84>)
 80073f6:	681e      	ldr	r6, [r3, #0]
 80073f8:	69b3      	ldr	r3, [r6, #24]
 80073fa:	b913      	cbnz	r3, 8007402 <__sfp+0x16>
 80073fc:	4630      	mov	r0, r6
 80073fe:	f7ff ffbd 	bl	800737c <__sinit>
 8007402:	3648      	adds	r6, #72	; 0x48
 8007404:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007408:	3b01      	subs	r3, #1
 800740a:	d503      	bpl.n	8007414 <__sfp+0x28>
 800740c:	6833      	ldr	r3, [r6, #0]
 800740e:	b30b      	cbz	r3, 8007454 <__sfp+0x68>
 8007410:	6836      	ldr	r6, [r6, #0]
 8007412:	e7f7      	b.n	8007404 <__sfp+0x18>
 8007414:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007418:	b9d5      	cbnz	r5, 8007450 <__sfp+0x64>
 800741a:	4b16      	ldr	r3, [pc, #88]	; (8007474 <__sfp+0x88>)
 800741c:	60e3      	str	r3, [r4, #12]
 800741e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007422:	6665      	str	r5, [r4, #100]	; 0x64
 8007424:	f000 f847 	bl	80074b6 <__retarget_lock_init_recursive>
 8007428:	f7ff ff96 	bl	8007358 <__sfp_lock_release>
 800742c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007430:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007434:	6025      	str	r5, [r4, #0]
 8007436:	61a5      	str	r5, [r4, #24]
 8007438:	2208      	movs	r2, #8
 800743a:	4629      	mov	r1, r5
 800743c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007440:	f7ff fe90 	bl	8007164 <memset>
 8007444:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007448:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800744c:	4620      	mov	r0, r4
 800744e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007450:	3468      	adds	r4, #104	; 0x68
 8007452:	e7d9      	b.n	8007408 <__sfp+0x1c>
 8007454:	2104      	movs	r1, #4
 8007456:	4638      	mov	r0, r7
 8007458:	f7ff ff62 	bl	8007320 <__sfmoreglue>
 800745c:	4604      	mov	r4, r0
 800745e:	6030      	str	r0, [r6, #0]
 8007460:	2800      	cmp	r0, #0
 8007462:	d1d5      	bne.n	8007410 <__sfp+0x24>
 8007464:	f7ff ff78 	bl	8007358 <__sfp_lock_release>
 8007468:	230c      	movs	r3, #12
 800746a:	603b      	str	r3, [r7, #0]
 800746c:	e7ee      	b.n	800744c <__sfp+0x60>
 800746e:	bf00      	nop
 8007470:	0800d0c8 	.word	0x0800d0c8
 8007474:	ffff0001 	.word	0xffff0001

08007478 <_fwalk_reent>:
 8007478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800747c:	4606      	mov	r6, r0
 800747e:	4688      	mov	r8, r1
 8007480:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007484:	2700      	movs	r7, #0
 8007486:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800748a:	f1b9 0901 	subs.w	r9, r9, #1
 800748e:	d505      	bpl.n	800749c <_fwalk_reent+0x24>
 8007490:	6824      	ldr	r4, [r4, #0]
 8007492:	2c00      	cmp	r4, #0
 8007494:	d1f7      	bne.n	8007486 <_fwalk_reent+0xe>
 8007496:	4638      	mov	r0, r7
 8007498:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800749c:	89ab      	ldrh	r3, [r5, #12]
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d907      	bls.n	80074b2 <_fwalk_reent+0x3a>
 80074a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80074a6:	3301      	adds	r3, #1
 80074a8:	d003      	beq.n	80074b2 <_fwalk_reent+0x3a>
 80074aa:	4629      	mov	r1, r5
 80074ac:	4630      	mov	r0, r6
 80074ae:	47c0      	blx	r8
 80074b0:	4307      	orrs	r7, r0
 80074b2:	3568      	adds	r5, #104	; 0x68
 80074b4:	e7e9      	b.n	800748a <_fwalk_reent+0x12>

080074b6 <__retarget_lock_init_recursive>:
 80074b6:	4770      	bx	lr

080074b8 <__retarget_lock_acquire_recursive>:
 80074b8:	4770      	bx	lr

080074ba <__retarget_lock_release_recursive>:
 80074ba:	4770      	bx	lr

080074bc <sbrk_aligned>:
 80074bc:	b570      	push	{r4, r5, r6, lr}
 80074be:	4e0e      	ldr	r6, [pc, #56]	; (80074f8 <sbrk_aligned+0x3c>)
 80074c0:	460c      	mov	r4, r1
 80074c2:	6831      	ldr	r1, [r6, #0]
 80074c4:	4605      	mov	r5, r0
 80074c6:	b911      	cbnz	r1, 80074ce <sbrk_aligned+0x12>
 80074c8:	f000 fb7a 	bl	8007bc0 <_sbrk_r>
 80074cc:	6030      	str	r0, [r6, #0]
 80074ce:	4621      	mov	r1, r4
 80074d0:	4628      	mov	r0, r5
 80074d2:	f000 fb75 	bl	8007bc0 <_sbrk_r>
 80074d6:	1c43      	adds	r3, r0, #1
 80074d8:	d00a      	beq.n	80074f0 <sbrk_aligned+0x34>
 80074da:	1cc4      	adds	r4, r0, #3
 80074dc:	f024 0403 	bic.w	r4, r4, #3
 80074e0:	42a0      	cmp	r0, r4
 80074e2:	d007      	beq.n	80074f4 <sbrk_aligned+0x38>
 80074e4:	1a21      	subs	r1, r4, r0
 80074e6:	4628      	mov	r0, r5
 80074e8:	f000 fb6a 	bl	8007bc0 <_sbrk_r>
 80074ec:	3001      	adds	r0, #1
 80074ee:	d101      	bne.n	80074f4 <sbrk_aligned+0x38>
 80074f0:	f04f 34ff 	mov.w	r4, #4294967295
 80074f4:	4620      	mov	r0, r4
 80074f6:	bd70      	pop	{r4, r5, r6, pc}
 80074f8:	20013b38 	.word	0x20013b38

080074fc <_malloc_r>:
 80074fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007500:	1ccd      	adds	r5, r1, #3
 8007502:	f025 0503 	bic.w	r5, r5, #3
 8007506:	3508      	adds	r5, #8
 8007508:	2d0c      	cmp	r5, #12
 800750a:	bf38      	it	cc
 800750c:	250c      	movcc	r5, #12
 800750e:	2d00      	cmp	r5, #0
 8007510:	4607      	mov	r7, r0
 8007512:	db01      	blt.n	8007518 <_malloc_r+0x1c>
 8007514:	42a9      	cmp	r1, r5
 8007516:	d905      	bls.n	8007524 <_malloc_r+0x28>
 8007518:	230c      	movs	r3, #12
 800751a:	603b      	str	r3, [r7, #0]
 800751c:	2600      	movs	r6, #0
 800751e:	4630      	mov	r0, r6
 8007520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007524:	4e2e      	ldr	r6, [pc, #184]	; (80075e0 <_malloc_r+0xe4>)
 8007526:	f000 fdbb 	bl	80080a0 <__malloc_lock>
 800752a:	6833      	ldr	r3, [r6, #0]
 800752c:	461c      	mov	r4, r3
 800752e:	bb34      	cbnz	r4, 800757e <_malloc_r+0x82>
 8007530:	4629      	mov	r1, r5
 8007532:	4638      	mov	r0, r7
 8007534:	f7ff ffc2 	bl	80074bc <sbrk_aligned>
 8007538:	1c43      	adds	r3, r0, #1
 800753a:	4604      	mov	r4, r0
 800753c:	d14d      	bne.n	80075da <_malloc_r+0xde>
 800753e:	6834      	ldr	r4, [r6, #0]
 8007540:	4626      	mov	r6, r4
 8007542:	2e00      	cmp	r6, #0
 8007544:	d140      	bne.n	80075c8 <_malloc_r+0xcc>
 8007546:	6823      	ldr	r3, [r4, #0]
 8007548:	4631      	mov	r1, r6
 800754a:	4638      	mov	r0, r7
 800754c:	eb04 0803 	add.w	r8, r4, r3
 8007550:	f000 fb36 	bl	8007bc0 <_sbrk_r>
 8007554:	4580      	cmp	r8, r0
 8007556:	d13a      	bne.n	80075ce <_malloc_r+0xd2>
 8007558:	6821      	ldr	r1, [r4, #0]
 800755a:	3503      	adds	r5, #3
 800755c:	1a6d      	subs	r5, r5, r1
 800755e:	f025 0503 	bic.w	r5, r5, #3
 8007562:	3508      	adds	r5, #8
 8007564:	2d0c      	cmp	r5, #12
 8007566:	bf38      	it	cc
 8007568:	250c      	movcc	r5, #12
 800756a:	4629      	mov	r1, r5
 800756c:	4638      	mov	r0, r7
 800756e:	f7ff ffa5 	bl	80074bc <sbrk_aligned>
 8007572:	3001      	adds	r0, #1
 8007574:	d02b      	beq.n	80075ce <_malloc_r+0xd2>
 8007576:	6823      	ldr	r3, [r4, #0]
 8007578:	442b      	add	r3, r5
 800757a:	6023      	str	r3, [r4, #0]
 800757c:	e00e      	b.n	800759c <_malloc_r+0xa0>
 800757e:	6822      	ldr	r2, [r4, #0]
 8007580:	1b52      	subs	r2, r2, r5
 8007582:	d41e      	bmi.n	80075c2 <_malloc_r+0xc6>
 8007584:	2a0b      	cmp	r2, #11
 8007586:	d916      	bls.n	80075b6 <_malloc_r+0xba>
 8007588:	1961      	adds	r1, r4, r5
 800758a:	42a3      	cmp	r3, r4
 800758c:	6025      	str	r5, [r4, #0]
 800758e:	bf18      	it	ne
 8007590:	6059      	strne	r1, [r3, #4]
 8007592:	6863      	ldr	r3, [r4, #4]
 8007594:	bf08      	it	eq
 8007596:	6031      	streq	r1, [r6, #0]
 8007598:	5162      	str	r2, [r4, r5]
 800759a:	604b      	str	r3, [r1, #4]
 800759c:	4638      	mov	r0, r7
 800759e:	f104 060b 	add.w	r6, r4, #11
 80075a2:	f000 fd83 	bl	80080ac <__malloc_unlock>
 80075a6:	f026 0607 	bic.w	r6, r6, #7
 80075aa:	1d23      	adds	r3, r4, #4
 80075ac:	1af2      	subs	r2, r6, r3
 80075ae:	d0b6      	beq.n	800751e <_malloc_r+0x22>
 80075b0:	1b9b      	subs	r3, r3, r6
 80075b2:	50a3      	str	r3, [r4, r2]
 80075b4:	e7b3      	b.n	800751e <_malloc_r+0x22>
 80075b6:	6862      	ldr	r2, [r4, #4]
 80075b8:	42a3      	cmp	r3, r4
 80075ba:	bf0c      	ite	eq
 80075bc:	6032      	streq	r2, [r6, #0]
 80075be:	605a      	strne	r2, [r3, #4]
 80075c0:	e7ec      	b.n	800759c <_malloc_r+0xa0>
 80075c2:	4623      	mov	r3, r4
 80075c4:	6864      	ldr	r4, [r4, #4]
 80075c6:	e7b2      	b.n	800752e <_malloc_r+0x32>
 80075c8:	4634      	mov	r4, r6
 80075ca:	6876      	ldr	r6, [r6, #4]
 80075cc:	e7b9      	b.n	8007542 <_malloc_r+0x46>
 80075ce:	230c      	movs	r3, #12
 80075d0:	603b      	str	r3, [r7, #0]
 80075d2:	4638      	mov	r0, r7
 80075d4:	f000 fd6a 	bl	80080ac <__malloc_unlock>
 80075d8:	e7a1      	b.n	800751e <_malloc_r+0x22>
 80075da:	6025      	str	r5, [r4, #0]
 80075dc:	e7de      	b.n	800759c <_malloc_r+0xa0>
 80075de:	bf00      	nop
 80075e0:	20013b34 	.word	0x20013b34

080075e4 <__sfputc_r>:
 80075e4:	6893      	ldr	r3, [r2, #8]
 80075e6:	3b01      	subs	r3, #1
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	b410      	push	{r4}
 80075ec:	6093      	str	r3, [r2, #8]
 80075ee:	da08      	bge.n	8007602 <__sfputc_r+0x1e>
 80075f0:	6994      	ldr	r4, [r2, #24]
 80075f2:	42a3      	cmp	r3, r4
 80075f4:	db01      	blt.n	80075fa <__sfputc_r+0x16>
 80075f6:	290a      	cmp	r1, #10
 80075f8:	d103      	bne.n	8007602 <__sfputc_r+0x1e>
 80075fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075fe:	f000 bb33 	b.w	8007c68 <__swbuf_r>
 8007602:	6813      	ldr	r3, [r2, #0]
 8007604:	1c58      	adds	r0, r3, #1
 8007606:	6010      	str	r0, [r2, #0]
 8007608:	7019      	strb	r1, [r3, #0]
 800760a:	4608      	mov	r0, r1
 800760c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007610:	4770      	bx	lr

08007612 <__sfputs_r>:
 8007612:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007614:	4606      	mov	r6, r0
 8007616:	460f      	mov	r7, r1
 8007618:	4614      	mov	r4, r2
 800761a:	18d5      	adds	r5, r2, r3
 800761c:	42ac      	cmp	r4, r5
 800761e:	d101      	bne.n	8007624 <__sfputs_r+0x12>
 8007620:	2000      	movs	r0, #0
 8007622:	e007      	b.n	8007634 <__sfputs_r+0x22>
 8007624:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007628:	463a      	mov	r2, r7
 800762a:	4630      	mov	r0, r6
 800762c:	f7ff ffda 	bl	80075e4 <__sfputc_r>
 8007630:	1c43      	adds	r3, r0, #1
 8007632:	d1f3      	bne.n	800761c <__sfputs_r+0xa>
 8007634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007638 <_vfiprintf_r>:
 8007638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800763c:	460d      	mov	r5, r1
 800763e:	b09d      	sub	sp, #116	; 0x74
 8007640:	4614      	mov	r4, r2
 8007642:	4698      	mov	r8, r3
 8007644:	4606      	mov	r6, r0
 8007646:	b118      	cbz	r0, 8007650 <_vfiprintf_r+0x18>
 8007648:	6983      	ldr	r3, [r0, #24]
 800764a:	b90b      	cbnz	r3, 8007650 <_vfiprintf_r+0x18>
 800764c:	f7ff fe96 	bl	800737c <__sinit>
 8007650:	4b89      	ldr	r3, [pc, #548]	; (8007878 <_vfiprintf_r+0x240>)
 8007652:	429d      	cmp	r5, r3
 8007654:	d11b      	bne.n	800768e <_vfiprintf_r+0x56>
 8007656:	6875      	ldr	r5, [r6, #4]
 8007658:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800765a:	07d9      	lsls	r1, r3, #31
 800765c:	d405      	bmi.n	800766a <_vfiprintf_r+0x32>
 800765e:	89ab      	ldrh	r3, [r5, #12]
 8007660:	059a      	lsls	r2, r3, #22
 8007662:	d402      	bmi.n	800766a <_vfiprintf_r+0x32>
 8007664:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007666:	f7ff ff27 	bl	80074b8 <__retarget_lock_acquire_recursive>
 800766a:	89ab      	ldrh	r3, [r5, #12]
 800766c:	071b      	lsls	r3, r3, #28
 800766e:	d501      	bpl.n	8007674 <_vfiprintf_r+0x3c>
 8007670:	692b      	ldr	r3, [r5, #16]
 8007672:	b9eb      	cbnz	r3, 80076b0 <_vfiprintf_r+0x78>
 8007674:	4629      	mov	r1, r5
 8007676:	4630      	mov	r0, r6
 8007678:	f000 fb5a 	bl	8007d30 <__swsetup_r>
 800767c:	b1c0      	cbz	r0, 80076b0 <_vfiprintf_r+0x78>
 800767e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007680:	07dc      	lsls	r4, r3, #31
 8007682:	d50e      	bpl.n	80076a2 <_vfiprintf_r+0x6a>
 8007684:	f04f 30ff 	mov.w	r0, #4294967295
 8007688:	b01d      	add	sp, #116	; 0x74
 800768a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800768e:	4b7b      	ldr	r3, [pc, #492]	; (800787c <_vfiprintf_r+0x244>)
 8007690:	429d      	cmp	r5, r3
 8007692:	d101      	bne.n	8007698 <_vfiprintf_r+0x60>
 8007694:	68b5      	ldr	r5, [r6, #8]
 8007696:	e7df      	b.n	8007658 <_vfiprintf_r+0x20>
 8007698:	4b79      	ldr	r3, [pc, #484]	; (8007880 <_vfiprintf_r+0x248>)
 800769a:	429d      	cmp	r5, r3
 800769c:	bf08      	it	eq
 800769e:	68f5      	ldreq	r5, [r6, #12]
 80076a0:	e7da      	b.n	8007658 <_vfiprintf_r+0x20>
 80076a2:	89ab      	ldrh	r3, [r5, #12]
 80076a4:	0598      	lsls	r0, r3, #22
 80076a6:	d4ed      	bmi.n	8007684 <_vfiprintf_r+0x4c>
 80076a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076aa:	f7ff ff06 	bl	80074ba <__retarget_lock_release_recursive>
 80076ae:	e7e9      	b.n	8007684 <_vfiprintf_r+0x4c>
 80076b0:	2300      	movs	r3, #0
 80076b2:	9309      	str	r3, [sp, #36]	; 0x24
 80076b4:	2320      	movs	r3, #32
 80076b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80076ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80076be:	2330      	movs	r3, #48	; 0x30
 80076c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007884 <_vfiprintf_r+0x24c>
 80076c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80076c8:	f04f 0901 	mov.w	r9, #1
 80076cc:	4623      	mov	r3, r4
 80076ce:	469a      	mov	sl, r3
 80076d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076d4:	b10a      	cbz	r2, 80076da <_vfiprintf_r+0xa2>
 80076d6:	2a25      	cmp	r2, #37	; 0x25
 80076d8:	d1f9      	bne.n	80076ce <_vfiprintf_r+0x96>
 80076da:	ebba 0b04 	subs.w	fp, sl, r4
 80076de:	d00b      	beq.n	80076f8 <_vfiprintf_r+0xc0>
 80076e0:	465b      	mov	r3, fp
 80076e2:	4622      	mov	r2, r4
 80076e4:	4629      	mov	r1, r5
 80076e6:	4630      	mov	r0, r6
 80076e8:	f7ff ff93 	bl	8007612 <__sfputs_r>
 80076ec:	3001      	adds	r0, #1
 80076ee:	f000 80aa 	beq.w	8007846 <_vfiprintf_r+0x20e>
 80076f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076f4:	445a      	add	r2, fp
 80076f6:	9209      	str	r2, [sp, #36]	; 0x24
 80076f8:	f89a 3000 	ldrb.w	r3, [sl]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	f000 80a2 	beq.w	8007846 <_vfiprintf_r+0x20e>
 8007702:	2300      	movs	r3, #0
 8007704:	f04f 32ff 	mov.w	r2, #4294967295
 8007708:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800770c:	f10a 0a01 	add.w	sl, sl, #1
 8007710:	9304      	str	r3, [sp, #16]
 8007712:	9307      	str	r3, [sp, #28]
 8007714:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007718:	931a      	str	r3, [sp, #104]	; 0x68
 800771a:	4654      	mov	r4, sl
 800771c:	2205      	movs	r2, #5
 800771e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007722:	4858      	ldr	r0, [pc, #352]	; (8007884 <_vfiprintf_r+0x24c>)
 8007724:	f7f8 fd64 	bl	80001f0 <memchr>
 8007728:	9a04      	ldr	r2, [sp, #16]
 800772a:	b9d8      	cbnz	r0, 8007764 <_vfiprintf_r+0x12c>
 800772c:	06d1      	lsls	r1, r2, #27
 800772e:	bf44      	itt	mi
 8007730:	2320      	movmi	r3, #32
 8007732:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007736:	0713      	lsls	r3, r2, #28
 8007738:	bf44      	itt	mi
 800773a:	232b      	movmi	r3, #43	; 0x2b
 800773c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007740:	f89a 3000 	ldrb.w	r3, [sl]
 8007744:	2b2a      	cmp	r3, #42	; 0x2a
 8007746:	d015      	beq.n	8007774 <_vfiprintf_r+0x13c>
 8007748:	9a07      	ldr	r2, [sp, #28]
 800774a:	4654      	mov	r4, sl
 800774c:	2000      	movs	r0, #0
 800774e:	f04f 0c0a 	mov.w	ip, #10
 8007752:	4621      	mov	r1, r4
 8007754:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007758:	3b30      	subs	r3, #48	; 0x30
 800775a:	2b09      	cmp	r3, #9
 800775c:	d94e      	bls.n	80077fc <_vfiprintf_r+0x1c4>
 800775e:	b1b0      	cbz	r0, 800778e <_vfiprintf_r+0x156>
 8007760:	9207      	str	r2, [sp, #28]
 8007762:	e014      	b.n	800778e <_vfiprintf_r+0x156>
 8007764:	eba0 0308 	sub.w	r3, r0, r8
 8007768:	fa09 f303 	lsl.w	r3, r9, r3
 800776c:	4313      	orrs	r3, r2
 800776e:	9304      	str	r3, [sp, #16]
 8007770:	46a2      	mov	sl, r4
 8007772:	e7d2      	b.n	800771a <_vfiprintf_r+0xe2>
 8007774:	9b03      	ldr	r3, [sp, #12]
 8007776:	1d19      	adds	r1, r3, #4
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	9103      	str	r1, [sp, #12]
 800777c:	2b00      	cmp	r3, #0
 800777e:	bfbb      	ittet	lt
 8007780:	425b      	neglt	r3, r3
 8007782:	f042 0202 	orrlt.w	r2, r2, #2
 8007786:	9307      	strge	r3, [sp, #28]
 8007788:	9307      	strlt	r3, [sp, #28]
 800778a:	bfb8      	it	lt
 800778c:	9204      	strlt	r2, [sp, #16]
 800778e:	7823      	ldrb	r3, [r4, #0]
 8007790:	2b2e      	cmp	r3, #46	; 0x2e
 8007792:	d10c      	bne.n	80077ae <_vfiprintf_r+0x176>
 8007794:	7863      	ldrb	r3, [r4, #1]
 8007796:	2b2a      	cmp	r3, #42	; 0x2a
 8007798:	d135      	bne.n	8007806 <_vfiprintf_r+0x1ce>
 800779a:	9b03      	ldr	r3, [sp, #12]
 800779c:	1d1a      	adds	r2, r3, #4
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	9203      	str	r2, [sp, #12]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	bfb8      	it	lt
 80077a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80077aa:	3402      	adds	r4, #2
 80077ac:	9305      	str	r3, [sp, #20]
 80077ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007894 <_vfiprintf_r+0x25c>
 80077b2:	7821      	ldrb	r1, [r4, #0]
 80077b4:	2203      	movs	r2, #3
 80077b6:	4650      	mov	r0, sl
 80077b8:	f7f8 fd1a 	bl	80001f0 <memchr>
 80077bc:	b140      	cbz	r0, 80077d0 <_vfiprintf_r+0x198>
 80077be:	2340      	movs	r3, #64	; 0x40
 80077c0:	eba0 000a 	sub.w	r0, r0, sl
 80077c4:	fa03 f000 	lsl.w	r0, r3, r0
 80077c8:	9b04      	ldr	r3, [sp, #16]
 80077ca:	4303      	orrs	r3, r0
 80077cc:	3401      	adds	r4, #1
 80077ce:	9304      	str	r3, [sp, #16]
 80077d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077d4:	482c      	ldr	r0, [pc, #176]	; (8007888 <_vfiprintf_r+0x250>)
 80077d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80077da:	2206      	movs	r2, #6
 80077dc:	f7f8 fd08 	bl	80001f0 <memchr>
 80077e0:	2800      	cmp	r0, #0
 80077e2:	d03f      	beq.n	8007864 <_vfiprintf_r+0x22c>
 80077e4:	4b29      	ldr	r3, [pc, #164]	; (800788c <_vfiprintf_r+0x254>)
 80077e6:	bb1b      	cbnz	r3, 8007830 <_vfiprintf_r+0x1f8>
 80077e8:	9b03      	ldr	r3, [sp, #12]
 80077ea:	3307      	adds	r3, #7
 80077ec:	f023 0307 	bic.w	r3, r3, #7
 80077f0:	3308      	adds	r3, #8
 80077f2:	9303      	str	r3, [sp, #12]
 80077f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077f6:	443b      	add	r3, r7
 80077f8:	9309      	str	r3, [sp, #36]	; 0x24
 80077fa:	e767      	b.n	80076cc <_vfiprintf_r+0x94>
 80077fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8007800:	460c      	mov	r4, r1
 8007802:	2001      	movs	r0, #1
 8007804:	e7a5      	b.n	8007752 <_vfiprintf_r+0x11a>
 8007806:	2300      	movs	r3, #0
 8007808:	3401      	adds	r4, #1
 800780a:	9305      	str	r3, [sp, #20]
 800780c:	4619      	mov	r1, r3
 800780e:	f04f 0c0a 	mov.w	ip, #10
 8007812:	4620      	mov	r0, r4
 8007814:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007818:	3a30      	subs	r2, #48	; 0x30
 800781a:	2a09      	cmp	r2, #9
 800781c:	d903      	bls.n	8007826 <_vfiprintf_r+0x1ee>
 800781e:	2b00      	cmp	r3, #0
 8007820:	d0c5      	beq.n	80077ae <_vfiprintf_r+0x176>
 8007822:	9105      	str	r1, [sp, #20]
 8007824:	e7c3      	b.n	80077ae <_vfiprintf_r+0x176>
 8007826:	fb0c 2101 	mla	r1, ip, r1, r2
 800782a:	4604      	mov	r4, r0
 800782c:	2301      	movs	r3, #1
 800782e:	e7f0      	b.n	8007812 <_vfiprintf_r+0x1da>
 8007830:	ab03      	add	r3, sp, #12
 8007832:	9300      	str	r3, [sp, #0]
 8007834:	462a      	mov	r2, r5
 8007836:	4b16      	ldr	r3, [pc, #88]	; (8007890 <_vfiprintf_r+0x258>)
 8007838:	a904      	add	r1, sp, #16
 800783a:	4630      	mov	r0, r6
 800783c:	f3af 8000 	nop.w
 8007840:	4607      	mov	r7, r0
 8007842:	1c78      	adds	r0, r7, #1
 8007844:	d1d6      	bne.n	80077f4 <_vfiprintf_r+0x1bc>
 8007846:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007848:	07d9      	lsls	r1, r3, #31
 800784a:	d405      	bmi.n	8007858 <_vfiprintf_r+0x220>
 800784c:	89ab      	ldrh	r3, [r5, #12]
 800784e:	059a      	lsls	r2, r3, #22
 8007850:	d402      	bmi.n	8007858 <_vfiprintf_r+0x220>
 8007852:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007854:	f7ff fe31 	bl	80074ba <__retarget_lock_release_recursive>
 8007858:	89ab      	ldrh	r3, [r5, #12]
 800785a:	065b      	lsls	r3, r3, #25
 800785c:	f53f af12 	bmi.w	8007684 <_vfiprintf_r+0x4c>
 8007860:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007862:	e711      	b.n	8007688 <_vfiprintf_r+0x50>
 8007864:	ab03      	add	r3, sp, #12
 8007866:	9300      	str	r3, [sp, #0]
 8007868:	462a      	mov	r2, r5
 800786a:	4b09      	ldr	r3, [pc, #36]	; (8007890 <_vfiprintf_r+0x258>)
 800786c:	a904      	add	r1, sp, #16
 800786e:	4630      	mov	r0, r6
 8007870:	f000 f880 	bl	8007974 <_printf_i>
 8007874:	e7e4      	b.n	8007840 <_vfiprintf_r+0x208>
 8007876:	bf00      	nop
 8007878:	0800d1f0 	.word	0x0800d1f0
 800787c:	0800d210 	.word	0x0800d210
 8007880:	0800d1d0 	.word	0x0800d1d0
 8007884:	0800d230 	.word	0x0800d230
 8007888:	0800d23a 	.word	0x0800d23a
 800788c:	00000000 	.word	0x00000000
 8007890:	08007613 	.word	0x08007613
 8007894:	0800d236 	.word	0x0800d236

08007898 <_printf_common>:
 8007898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800789c:	4616      	mov	r6, r2
 800789e:	4699      	mov	r9, r3
 80078a0:	688a      	ldr	r2, [r1, #8]
 80078a2:	690b      	ldr	r3, [r1, #16]
 80078a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80078a8:	4293      	cmp	r3, r2
 80078aa:	bfb8      	it	lt
 80078ac:	4613      	movlt	r3, r2
 80078ae:	6033      	str	r3, [r6, #0]
 80078b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80078b4:	4607      	mov	r7, r0
 80078b6:	460c      	mov	r4, r1
 80078b8:	b10a      	cbz	r2, 80078be <_printf_common+0x26>
 80078ba:	3301      	adds	r3, #1
 80078bc:	6033      	str	r3, [r6, #0]
 80078be:	6823      	ldr	r3, [r4, #0]
 80078c0:	0699      	lsls	r1, r3, #26
 80078c2:	bf42      	ittt	mi
 80078c4:	6833      	ldrmi	r3, [r6, #0]
 80078c6:	3302      	addmi	r3, #2
 80078c8:	6033      	strmi	r3, [r6, #0]
 80078ca:	6825      	ldr	r5, [r4, #0]
 80078cc:	f015 0506 	ands.w	r5, r5, #6
 80078d0:	d106      	bne.n	80078e0 <_printf_common+0x48>
 80078d2:	f104 0a19 	add.w	sl, r4, #25
 80078d6:	68e3      	ldr	r3, [r4, #12]
 80078d8:	6832      	ldr	r2, [r6, #0]
 80078da:	1a9b      	subs	r3, r3, r2
 80078dc:	42ab      	cmp	r3, r5
 80078de:	dc26      	bgt.n	800792e <_printf_common+0x96>
 80078e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80078e4:	1e13      	subs	r3, r2, #0
 80078e6:	6822      	ldr	r2, [r4, #0]
 80078e8:	bf18      	it	ne
 80078ea:	2301      	movne	r3, #1
 80078ec:	0692      	lsls	r2, r2, #26
 80078ee:	d42b      	bmi.n	8007948 <_printf_common+0xb0>
 80078f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80078f4:	4649      	mov	r1, r9
 80078f6:	4638      	mov	r0, r7
 80078f8:	47c0      	blx	r8
 80078fa:	3001      	adds	r0, #1
 80078fc:	d01e      	beq.n	800793c <_printf_common+0xa4>
 80078fe:	6823      	ldr	r3, [r4, #0]
 8007900:	68e5      	ldr	r5, [r4, #12]
 8007902:	6832      	ldr	r2, [r6, #0]
 8007904:	f003 0306 	and.w	r3, r3, #6
 8007908:	2b04      	cmp	r3, #4
 800790a:	bf08      	it	eq
 800790c:	1aad      	subeq	r5, r5, r2
 800790e:	68a3      	ldr	r3, [r4, #8]
 8007910:	6922      	ldr	r2, [r4, #16]
 8007912:	bf0c      	ite	eq
 8007914:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007918:	2500      	movne	r5, #0
 800791a:	4293      	cmp	r3, r2
 800791c:	bfc4      	itt	gt
 800791e:	1a9b      	subgt	r3, r3, r2
 8007920:	18ed      	addgt	r5, r5, r3
 8007922:	2600      	movs	r6, #0
 8007924:	341a      	adds	r4, #26
 8007926:	42b5      	cmp	r5, r6
 8007928:	d11a      	bne.n	8007960 <_printf_common+0xc8>
 800792a:	2000      	movs	r0, #0
 800792c:	e008      	b.n	8007940 <_printf_common+0xa8>
 800792e:	2301      	movs	r3, #1
 8007930:	4652      	mov	r2, sl
 8007932:	4649      	mov	r1, r9
 8007934:	4638      	mov	r0, r7
 8007936:	47c0      	blx	r8
 8007938:	3001      	adds	r0, #1
 800793a:	d103      	bne.n	8007944 <_printf_common+0xac>
 800793c:	f04f 30ff 	mov.w	r0, #4294967295
 8007940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007944:	3501      	adds	r5, #1
 8007946:	e7c6      	b.n	80078d6 <_printf_common+0x3e>
 8007948:	18e1      	adds	r1, r4, r3
 800794a:	1c5a      	adds	r2, r3, #1
 800794c:	2030      	movs	r0, #48	; 0x30
 800794e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007952:	4422      	add	r2, r4
 8007954:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007958:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800795c:	3302      	adds	r3, #2
 800795e:	e7c7      	b.n	80078f0 <_printf_common+0x58>
 8007960:	2301      	movs	r3, #1
 8007962:	4622      	mov	r2, r4
 8007964:	4649      	mov	r1, r9
 8007966:	4638      	mov	r0, r7
 8007968:	47c0      	blx	r8
 800796a:	3001      	adds	r0, #1
 800796c:	d0e6      	beq.n	800793c <_printf_common+0xa4>
 800796e:	3601      	adds	r6, #1
 8007970:	e7d9      	b.n	8007926 <_printf_common+0x8e>
	...

08007974 <_printf_i>:
 8007974:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007978:	7e0f      	ldrb	r7, [r1, #24]
 800797a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800797c:	2f78      	cmp	r7, #120	; 0x78
 800797e:	4691      	mov	r9, r2
 8007980:	4680      	mov	r8, r0
 8007982:	460c      	mov	r4, r1
 8007984:	469a      	mov	sl, r3
 8007986:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800798a:	d807      	bhi.n	800799c <_printf_i+0x28>
 800798c:	2f62      	cmp	r7, #98	; 0x62
 800798e:	d80a      	bhi.n	80079a6 <_printf_i+0x32>
 8007990:	2f00      	cmp	r7, #0
 8007992:	f000 80d8 	beq.w	8007b46 <_printf_i+0x1d2>
 8007996:	2f58      	cmp	r7, #88	; 0x58
 8007998:	f000 80a3 	beq.w	8007ae2 <_printf_i+0x16e>
 800799c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80079a4:	e03a      	b.n	8007a1c <_printf_i+0xa8>
 80079a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80079aa:	2b15      	cmp	r3, #21
 80079ac:	d8f6      	bhi.n	800799c <_printf_i+0x28>
 80079ae:	a101      	add	r1, pc, #4	; (adr r1, 80079b4 <_printf_i+0x40>)
 80079b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80079b4:	08007a0d 	.word	0x08007a0d
 80079b8:	08007a21 	.word	0x08007a21
 80079bc:	0800799d 	.word	0x0800799d
 80079c0:	0800799d 	.word	0x0800799d
 80079c4:	0800799d 	.word	0x0800799d
 80079c8:	0800799d 	.word	0x0800799d
 80079cc:	08007a21 	.word	0x08007a21
 80079d0:	0800799d 	.word	0x0800799d
 80079d4:	0800799d 	.word	0x0800799d
 80079d8:	0800799d 	.word	0x0800799d
 80079dc:	0800799d 	.word	0x0800799d
 80079e0:	08007b2d 	.word	0x08007b2d
 80079e4:	08007a51 	.word	0x08007a51
 80079e8:	08007b0f 	.word	0x08007b0f
 80079ec:	0800799d 	.word	0x0800799d
 80079f0:	0800799d 	.word	0x0800799d
 80079f4:	08007b4f 	.word	0x08007b4f
 80079f8:	0800799d 	.word	0x0800799d
 80079fc:	08007a51 	.word	0x08007a51
 8007a00:	0800799d 	.word	0x0800799d
 8007a04:	0800799d 	.word	0x0800799d
 8007a08:	08007b17 	.word	0x08007b17
 8007a0c:	682b      	ldr	r3, [r5, #0]
 8007a0e:	1d1a      	adds	r2, r3, #4
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	602a      	str	r2, [r5, #0]
 8007a14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	e0a3      	b.n	8007b68 <_printf_i+0x1f4>
 8007a20:	6820      	ldr	r0, [r4, #0]
 8007a22:	6829      	ldr	r1, [r5, #0]
 8007a24:	0606      	lsls	r6, r0, #24
 8007a26:	f101 0304 	add.w	r3, r1, #4
 8007a2a:	d50a      	bpl.n	8007a42 <_printf_i+0xce>
 8007a2c:	680e      	ldr	r6, [r1, #0]
 8007a2e:	602b      	str	r3, [r5, #0]
 8007a30:	2e00      	cmp	r6, #0
 8007a32:	da03      	bge.n	8007a3c <_printf_i+0xc8>
 8007a34:	232d      	movs	r3, #45	; 0x2d
 8007a36:	4276      	negs	r6, r6
 8007a38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a3c:	485e      	ldr	r0, [pc, #376]	; (8007bb8 <_printf_i+0x244>)
 8007a3e:	230a      	movs	r3, #10
 8007a40:	e019      	b.n	8007a76 <_printf_i+0x102>
 8007a42:	680e      	ldr	r6, [r1, #0]
 8007a44:	602b      	str	r3, [r5, #0]
 8007a46:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007a4a:	bf18      	it	ne
 8007a4c:	b236      	sxthne	r6, r6
 8007a4e:	e7ef      	b.n	8007a30 <_printf_i+0xbc>
 8007a50:	682b      	ldr	r3, [r5, #0]
 8007a52:	6820      	ldr	r0, [r4, #0]
 8007a54:	1d19      	adds	r1, r3, #4
 8007a56:	6029      	str	r1, [r5, #0]
 8007a58:	0601      	lsls	r1, r0, #24
 8007a5a:	d501      	bpl.n	8007a60 <_printf_i+0xec>
 8007a5c:	681e      	ldr	r6, [r3, #0]
 8007a5e:	e002      	b.n	8007a66 <_printf_i+0xf2>
 8007a60:	0646      	lsls	r6, r0, #25
 8007a62:	d5fb      	bpl.n	8007a5c <_printf_i+0xe8>
 8007a64:	881e      	ldrh	r6, [r3, #0]
 8007a66:	4854      	ldr	r0, [pc, #336]	; (8007bb8 <_printf_i+0x244>)
 8007a68:	2f6f      	cmp	r7, #111	; 0x6f
 8007a6a:	bf0c      	ite	eq
 8007a6c:	2308      	moveq	r3, #8
 8007a6e:	230a      	movne	r3, #10
 8007a70:	2100      	movs	r1, #0
 8007a72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a76:	6865      	ldr	r5, [r4, #4]
 8007a78:	60a5      	str	r5, [r4, #8]
 8007a7a:	2d00      	cmp	r5, #0
 8007a7c:	bfa2      	ittt	ge
 8007a7e:	6821      	ldrge	r1, [r4, #0]
 8007a80:	f021 0104 	bicge.w	r1, r1, #4
 8007a84:	6021      	strge	r1, [r4, #0]
 8007a86:	b90e      	cbnz	r6, 8007a8c <_printf_i+0x118>
 8007a88:	2d00      	cmp	r5, #0
 8007a8a:	d04d      	beq.n	8007b28 <_printf_i+0x1b4>
 8007a8c:	4615      	mov	r5, r2
 8007a8e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007a92:	fb03 6711 	mls	r7, r3, r1, r6
 8007a96:	5dc7      	ldrb	r7, [r0, r7]
 8007a98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007a9c:	4637      	mov	r7, r6
 8007a9e:	42bb      	cmp	r3, r7
 8007aa0:	460e      	mov	r6, r1
 8007aa2:	d9f4      	bls.n	8007a8e <_printf_i+0x11a>
 8007aa4:	2b08      	cmp	r3, #8
 8007aa6:	d10b      	bne.n	8007ac0 <_printf_i+0x14c>
 8007aa8:	6823      	ldr	r3, [r4, #0]
 8007aaa:	07de      	lsls	r6, r3, #31
 8007aac:	d508      	bpl.n	8007ac0 <_printf_i+0x14c>
 8007aae:	6923      	ldr	r3, [r4, #16]
 8007ab0:	6861      	ldr	r1, [r4, #4]
 8007ab2:	4299      	cmp	r1, r3
 8007ab4:	bfde      	ittt	le
 8007ab6:	2330      	movle	r3, #48	; 0x30
 8007ab8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007abc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007ac0:	1b52      	subs	r2, r2, r5
 8007ac2:	6122      	str	r2, [r4, #16]
 8007ac4:	f8cd a000 	str.w	sl, [sp]
 8007ac8:	464b      	mov	r3, r9
 8007aca:	aa03      	add	r2, sp, #12
 8007acc:	4621      	mov	r1, r4
 8007ace:	4640      	mov	r0, r8
 8007ad0:	f7ff fee2 	bl	8007898 <_printf_common>
 8007ad4:	3001      	adds	r0, #1
 8007ad6:	d14c      	bne.n	8007b72 <_printf_i+0x1fe>
 8007ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8007adc:	b004      	add	sp, #16
 8007ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ae2:	4835      	ldr	r0, [pc, #212]	; (8007bb8 <_printf_i+0x244>)
 8007ae4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007ae8:	6829      	ldr	r1, [r5, #0]
 8007aea:	6823      	ldr	r3, [r4, #0]
 8007aec:	f851 6b04 	ldr.w	r6, [r1], #4
 8007af0:	6029      	str	r1, [r5, #0]
 8007af2:	061d      	lsls	r5, r3, #24
 8007af4:	d514      	bpl.n	8007b20 <_printf_i+0x1ac>
 8007af6:	07df      	lsls	r7, r3, #31
 8007af8:	bf44      	itt	mi
 8007afa:	f043 0320 	orrmi.w	r3, r3, #32
 8007afe:	6023      	strmi	r3, [r4, #0]
 8007b00:	b91e      	cbnz	r6, 8007b0a <_printf_i+0x196>
 8007b02:	6823      	ldr	r3, [r4, #0]
 8007b04:	f023 0320 	bic.w	r3, r3, #32
 8007b08:	6023      	str	r3, [r4, #0]
 8007b0a:	2310      	movs	r3, #16
 8007b0c:	e7b0      	b.n	8007a70 <_printf_i+0xfc>
 8007b0e:	6823      	ldr	r3, [r4, #0]
 8007b10:	f043 0320 	orr.w	r3, r3, #32
 8007b14:	6023      	str	r3, [r4, #0]
 8007b16:	2378      	movs	r3, #120	; 0x78
 8007b18:	4828      	ldr	r0, [pc, #160]	; (8007bbc <_printf_i+0x248>)
 8007b1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b1e:	e7e3      	b.n	8007ae8 <_printf_i+0x174>
 8007b20:	0659      	lsls	r1, r3, #25
 8007b22:	bf48      	it	mi
 8007b24:	b2b6      	uxthmi	r6, r6
 8007b26:	e7e6      	b.n	8007af6 <_printf_i+0x182>
 8007b28:	4615      	mov	r5, r2
 8007b2a:	e7bb      	b.n	8007aa4 <_printf_i+0x130>
 8007b2c:	682b      	ldr	r3, [r5, #0]
 8007b2e:	6826      	ldr	r6, [r4, #0]
 8007b30:	6961      	ldr	r1, [r4, #20]
 8007b32:	1d18      	adds	r0, r3, #4
 8007b34:	6028      	str	r0, [r5, #0]
 8007b36:	0635      	lsls	r5, r6, #24
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	d501      	bpl.n	8007b40 <_printf_i+0x1cc>
 8007b3c:	6019      	str	r1, [r3, #0]
 8007b3e:	e002      	b.n	8007b46 <_printf_i+0x1d2>
 8007b40:	0670      	lsls	r0, r6, #25
 8007b42:	d5fb      	bpl.n	8007b3c <_printf_i+0x1c8>
 8007b44:	8019      	strh	r1, [r3, #0]
 8007b46:	2300      	movs	r3, #0
 8007b48:	6123      	str	r3, [r4, #16]
 8007b4a:	4615      	mov	r5, r2
 8007b4c:	e7ba      	b.n	8007ac4 <_printf_i+0x150>
 8007b4e:	682b      	ldr	r3, [r5, #0]
 8007b50:	1d1a      	adds	r2, r3, #4
 8007b52:	602a      	str	r2, [r5, #0]
 8007b54:	681d      	ldr	r5, [r3, #0]
 8007b56:	6862      	ldr	r2, [r4, #4]
 8007b58:	2100      	movs	r1, #0
 8007b5a:	4628      	mov	r0, r5
 8007b5c:	f7f8 fb48 	bl	80001f0 <memchr>
 8007b60:	b108      	cbz	r0, 8007b66 <_printf_i+0x1f2>
 8007b62:	1b40      	subs	r0, r0, r5
 8007b64:	6060      	str	r0, [r4, #4]
 8007b66:	6863      	ldr	r3, [r4, #4]
 8007b68:	6123      	str	r3, [r4, #16]
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b70:	e7a8      	b.n	8007ac4 <_printf_i+0x150>
 8007b72:	6923      	ldr	r3, [r4, #16]
 8007b74:	462a      	mov	r2, r5
 8007b76:	4649      	mov	r1, r9
 8007b78:	4640      	mov	r0, r8
 8007b7a:	47d0      	blx	sl
 8007b7c:	3001      	adds	r0, #1
 8007b7e:	d0ab      	beq.n	8007ad8 <_printf_i+0x164>
 8007b80:	6823      	ldr	r3, [r4, #0]
 8007b82:	079b      	lsls	r3, r3, #30
 8007b84:	d413      	bmi.n	8007bae <_printf_i+0x23a>
 8007b86:	68e0      	ldr	r0, [r4, #12]
 8007b88:	9b03      	ldr	r3, [sp, #12]
 8007b8a:	4298      	cmp	r0, r3
 8007b8c:	bfb8      	it	lt
 8007b8e:	4618      	movlt	r0, r3
 8007b90:	e7a4      	b.n	8007adc <_printf_i+0x168>
 8007b92:	2301      	movs	r3, #1
 8007b94:	4632      	mov	r2, r6
 8007b96:	4649      	mov	r1, r9
 8007b98:	4640      	mov	r0, r8
 8007b9a:	47d0      	blx	sl
 8007b9c:	3001      	adds	r0, #1
 8007b9e:	d09b      	beq.n	8007ad8 <_printf_i+0x164>
 8007ba0:	3501      	adds	r5, #1
 8007ba2:	68e3      	ldr	r3, [r4, #12]
 8007ba4:	9903      	ldr	r1, [sp, #12]
 8007ba6:	1a5b      	subs	r3, r3, r1
 8007ba8:	42ab      	cmp	r3, r5
 8007baa:	dcf2      	bgt.n	8007b92 <_printf_i+0x21e>
 8007bac:	e7eb      	b.n	8007b86 <_printf_i+0x212>
 8007bae:	2500      	movs	r5, #0
 8007bb0:	f104 0619 	add.w	r6, r4, #25
 8007bb4:	e7f5      	b.n	8007ba2 <_printf_i+0x22e>
 8007bb6:	bf00      	nop
 8007bb8:	0800d241 	.word	0x0800d241
 8007bbc:	0800d252 	.word	0x0800d252

08007bc0 <_sbrk_r>:
 8007bc0:	b538      	push	{r3, r4, r5, lr}
 8007bc2:	4d06      	ldr	r5, [pc, #24]	; (8007bdc <_sbrk_r+0x1c>)
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	4604      	mov	r4, r0
 8007bc8:	4608      	mov	r0, r1
 8007bca:	602b      	str	r3, [r5, #0]
 8007bcc:	f7f9 fe14 	bl	80017f8 <_sbrk>
 8007bd0:	1c43      	adds	r3, r0, #1
 8007bd2:	d102      	bne.n	8007bda <_sbrk_r+0x1a>
 8007bd4:	682b      	ldr	r3, [r5, #0]
 8007bd6:	b103      	cbz	r3, 8007bda <_sbrk_r+0x1a>
 8007bd8:	6023      	str	r3, [r4, #0]
 8007bda:	bd38      	pop	{r3, r4, r5, pc}
 8007bdc:	20013b3c 	.word	0x20013b3c

08007be0 <__sread>:
 8007be0:	b510      	push	{r4, lr}
 8007be2:	460c      	mov	r4, r1
 8007be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007be8:	f000 fab2 	bl	8008150 <_read_r>
 8007bec:	2800      	cmp	r0, #0
 8007bee:	bfab      	itete	ge
 8007bf0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007bf2:	89a3      	ldrhlt	r3, [r4, #12]
 8007bf4:	181b      	addge	r3, r3, r0
 8007bf6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007bfa:	bfac      	ite	ge
 8007bfc:	6563      	strge	r3, [r4, #84]	; 0x54
 8007bfe:	81a3      	strhlt	r3, [r4, #12]
 8007c00:	bd10      	pop	{r4, pc}

08007c02 <__swrite>:
 8007c02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c06:	461f      	mov	r7, r3
 8007c08:	898b      	ldrh	r3, [r1, #12]
 8007c0a:	05db      	lsls	r3, r3, #23
 8007c0c:	4605      	mov	r5, r0
 8007c0e:	460c      	mov	r4, r1
 8007c10:	4616      	mov	r6, r2
 8007c12:	d505      	bpl.n	8007c20 <__swrite+0x1e>
 8007c14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c18:	2302      	movs	r3, #2
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f000 f9c8 	bl	8007fb0 <_lseek_r>
 8007c20:	89a3      	ldrh	r3, [r4, #12]
 8007c22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c2a:	81a3      	strh	r3, [r4, #12]
 8007c2c:	4632      	mov	r2, r6
 8007c2e:	463b      	mov	r3, r7
 8007c30:	4628      	mov	r0, r5
 8007c32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c36:	f000 b869 	b.w	8007d0c <_write_r>

08007c3a <__sseek>:
 8007c3a:	b510      	push	{r4, lr}
 8007c3c:	460c      	mov	r4, r1
 8007c3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c42:	f000 f9b5 	bl	8007fb0 <_lseek_r>
 8007c46:	1c43      	adds	r3, r0, #1
 8007c48:	89a3      	ldrh	r3, [r4, #12]
 8007c4a:	bf15      	itete	ne
 8007c4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007c4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007c52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007c56:	81a3      	strheq	r3, [r4, #12]
 8007c58:	bf18      	it	ne
 8007c5a:	81a3      	strhne	r3, [r4, #12]
 8007c5c:	bd10      	pop	{r4, pc}

08007c5e <__sclose>:
 8007c5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c62:	f000 b8d3 	b.w	8007e0c <_close_r>
	...

08007c68 <__swbuf_r>:
 8007c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c6a:	460e      	mov	r6, r1
 8007c6c:	4614      	mov	r4, r2
 8007c6e:	4605      	mov	r5, r0
 8007c70:	b118      	cbz	r0, 8007c7a <__swbuf_r+0x12>
 8007c72:	6983      	ldr	r3, [r0, #24]
 8007c74:	b90b      	cbnz	r3, 8007c7a <__swbuf_r+0x12>
 8007c76:	f7ff fb81 	bl	800737c <__sinit>
 8007c7a:	4b21      	ldr	r3, [pc, #132]	; (8007d00 <__swbuf_r+0x98>)
 8007c7c:	429c      	cmp	r4, r3
 8007c7e:	d12b      	bne.n	8007cd8 <__swbuf_r+0x70>
 8007c80:	686c      	ldr	r4, [r5, #4]
 8007c82:	69a3      	ldr	r3, [r4, #24]
 8007c84:	60a3      	str	r3, [r4, #8]
 8007c86:	89a3      	ldrh	r3, [r4, #12]
 8007c88:	071a      	lsls	r2, r3, #28
 8007c8a:	d52f      	bpl.n	8007cec <__swbuf_r+0x84>
 8007c8c:	6923      	ldr	r3, [r4, #16]
 8007c8e:	b36b      	cbz	r3, 8007cec <__swbuf_r+0x84>
 8007c90:	6923      	ldr	r3, [r4, #16]
 8007c92:	6820      	ldr	r0, [r4, #0]
 8007c94:	1ac0      	subs	r0, r0, r3
 8007c96:	6963      	ldr	r3, [r4, #20]
 8007c98:	b2f6      	uxtb	r6, r6
 8007c9a:	4283      	cmp	r3, r0
 8007c9c:	4637      	mov	r7, r6
 8007c9e:	dc04      	bgt.n	8007caa <__swbuf_r+0x42>
 8007ca0:	4621      	mov	r1, r4
 8007ca2:	4628      	mov	r0, r5
 8007ca4:	f000 f948 	bl	8007f38 <_fflush_r>
 8007ca8:	bb30      	cbnz	r0, 8007cf8 <__swbuf_r+0x90>
 8007caa:	68a3      	ldr	r3, [r4, #8]
 8007cac:	3b01      	subs	r3, #1
 8007cae:	60a3      	str	r3, [r4, #8]
 8007cb0:	6823      	ldr	r3, [r4, #0]
 8007cb2:	1c5a      	adds	r2, r3, #1
 8007cb4:	6022      	str	r2, [r4, #0]
 8007cb6:	701e      	strb	r6, [r3, #0]
 8007cb8:	6963      	ldr	r3, [r4, #20]
 8007cba:	3001      	adds	r0, #1
 8007cbc:	4283      	cmp	r3, r0
 8007cbe:	d004      	beq.n	8007cca <__swbuf_r+0x62>
 8007cc0:	89a3      	ldrh	r3, [r4, #12]
 8007cc2:	07db      	lsls	r3, r3, #31
 8007cc4:	d506      	bpl.n	8007cd4 <__swbuf_r+0x6c>
 8007cc6:	2e0a      	cmp	r6, #10
 8007cc8:	d104      	bne.n	8007cd4 <__swbuf_r+0x6c>
 8007cca:	4621      	mov	r1, r4
 8007ccc:	4628      	mov	r0, r5
 8007cce:	f000 f933 	bl	8007f38 <_fflush_r>
 8007cd2:	b988      	cbnz	r0, 8007cf8 <__swbuf_r+0x90>
 8007cd4:	4638      	mov	r0, r7
 8007cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cd8:	4b0a      	ldr	r3, [pc, #40]	; (8007d04 <__swbuf_r+0x9c>)
 8007cda:	429c      	cmp	r4, r3
 8007cdc:	d101      	bne.n	8007ce2 <__swbuf_r+0x7a>
 8007cde:	68ac      	ldr	r4, [r5, #8]
 8007ce0:	e7cf      	b.n	8007c82 <__swbuf_r+0x1a>
 8007ce2:	4b09      	ldr	r3, [pc, #36]	; (8007d08 <__swbuf_r+0xa0>)
 8007ce4:	429c      	cmp	r4, r3
 8007ce6:	bf08      	it	eq
 8007ce8:	68ec      	ldreq	r4, [r5, #12]
 8007cea:	e7ca      	b.n	8007c82 <__swbuf_r+0x1a>
 8007cec:	4621      	mov	r1, r4
 8007cee:	4628      	mov	r0, r5
 8007cf0:	f000 f81e 	bl	8007d30 <__swsetup_r>
 8007cf4:	2800      	cmp	r0, #0
 8007cf6:	d0cb      	beq.n	8007c90 <__swbuf_r+0x28>
 8007cf8:	f04f 37ff 	mov.w	r7, #4294967295
 8007cfc:	e7ea      	b.n	8007cd4 <__swbuf_r+0x6c>
 8007cfe:	bf00      	nop
 8007d00:	0800d1f0 	.word	0x0800d1f0
 8007d04:	0800d210 	.word	0x0800d210
 8007d08:	0800d1d0 	.word	0x0800d1d0

08007d0c <_write_r>:
 8007d0c:	b538      	push	{r3, r4, r5, lr}
 8007d0e:	4d07      	ldr	r5, [pc, #28]	; (8007d2c <_write_r+0x20>)
 8007d10:	4604      	mov	r4, r0
 8007d12:	4608      	mov	r0, r1
 8007d14:	4611      	mov	r1, r2
 8007d16:	2200      	movs	r2, #0
 8007d18:	602a      	str	r2, [r5, #0]
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	f7f9 fd1b 	bl	8001756 <_write>
 8007d20:	1c43      	adds	r3, r0, #1
 8007d22:	d102      	bne.n	8007d2a <_write_r+0x1e>
 8007d24:	682b      	ldr	r3, [r5, #0]
 8007d26:	b103      	cbz	r3, 8007d2a <_write_r+0x1e>
 8007d28:	6023      	str	r3, [r4, #0]
 8007d2a:	bd38      	pop	{r3, r4, r5, pc}
 8007d2c:	20013b3c 	.word	0x20013b3c

08007d30 <__swsetup_r>:
 8007d30:	4b32      	ldr	r3, [pc, #200]	; (8007dfc <__swsetup_r+0xcc>)
 8007d32:	b570      	push	{r4, r5, r6, lr}
 8007d34:	681d      	ldr	r5, [r3, #0]
 8007d36:	4606      	mov	r6, r0
 8007d38:	460c      	mov	r4, r1
 8007d3a:	b125      	cbz	r5, 8007d46 <__swsetup_r+0x16>
 8007d3c:	69ab      	ldr	r3, [r5, #24]
 8007d3e:	b913      	cbnz	r3, 8007d46 <__swsetup_r+0x16>
 8007d40:	4628      	mov	r0, r5
 8007d42:	f7ff fb1b 	bl	800737c <__sinit>
 8007d46:	4b2e      	ldr	r3, [pc, #184]	; (8007e00 <__swsetup_r+0xd0>)
 8007d48:	429c      	cmp	r4, r3
 8007d4a:	d10f      	bne.n	8007d6c <__swsetup_r+0x3c>
 8007d4c:	686c      	ldr	r4, [r5, #4]
 8007d4e:	89a3      	ldrh	r3, [r4, #12]
 8007d50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d54:	0719      	lsls	r1, r3, #28
 8007d56:	d42c      	bmi.n	8007db2 <__swsetup_r+0x82>
 8007d58:	06dd      	lsls	r5, r3, #27
 8007d5a:	d411      	bmi.n	8007d80 <__swsetup_r+0x50>
 8007d5c:	2309      	movs	r3, #9
 8007d5e:	6033      	str	r3, [r6, #0]
 8007d60:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007d64:	81a3      	strh	r3, [r4, #12]
 8007d66:	f04f 30ff 	mov.w	r0, #4294967295
 8007d6a:	e03e      	b.n	8007dea <__swsetup_r+0xba>
 8007d6c:	4b25      	ldr	r3, [pc, #148]	; (8007e04 <__swsetup_r+0xd4>)
 8007d6e:	429c      	cmp	r4, r3
 8007d70:	d101      	bne.n	8007d76 <__swsetup_r+0x46>
 8007d72:	68ac      	ldr	r4, [r5, #8]
 8007d74:	e7eb      	b.n	8007d4e <__swsetup_r+0x1e>
 8007d76:	4b24      	ldr	r3, [pc, #144]	; (8007e08 <__swsetup_r+0xd8>)
 8007d78:	429c      	cmp	r4, r3
 8007d7a:	bf08      	it	eq
 8007d7c:	68ec      	ldreq	r4, [r5, #12]
 8007d7e:	e7e6      	b.n	8007d4e <__swsetup_r+0x1e>
 8007d80:	0758      	lsls	r0, r3, #29
 8007d82:	d512      	bpl.n	8007daa <__swsetup_r+0x7a>
 8007d84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d86:	b141      	cbz	r1, 8007d9a <__swsetup_r+0x6a>
 8007d88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d8c:	4299      	cmp	r1, r3
 8007d8e:	d002      	beq.n	8007d96 <__swsetup_r+0x66>
 8007d90:	4630      	mov	r0, r6
 8007d92:	f000 f991 	bl	80080b8 <_free_r>
 8007d96:	2300      	movs	r3, #0
 8007d98:	6363      	str	r3, [r4, #52]	; 0x34
 8007d9a:	89a3      	ldrh	r3, [r4, #12]
 8007d9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007da0:	81a3      	strh	r3, [r4, #12]
 8007da2:	2300      	movs	r3, #0
 8007da4:	6063      	str	r3, [r4, #4]
 8007da6:	6923      	ldr	r3, [r4, #16]
 8007da8:	6023      	str	r3, [r4, #0]
 8007daa:	89a3      	ldrh	r3, [r4, #12]
 8007dac:	f043 0308 	orr.w	r3, r3, #8
 8007db0:	81a3      	strh	r3, [r4, #12]
 8007db2:	6923      	ldr	r3, [r4, #16]
 8007db4:	b94b      	cbnz	r3, 8007dca <__swsetup_r+0x9a>
 8007db6:	89a3      	ldrh	r3, [r4, #12]
 8007db8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007dbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dc0:	d003      	beq.n	8007dca <__swsetup_r+0x9a>
 8007dc2:	4621      	mov	r1, r4
 8007dc4:	4630      	mov	r0, r6
 8007dc6:	f000 f92b 	bl	8008020 <__smakebuf_r>
 8007dca:	89a0      	ldrh	r0, [r4, #12]
 8007dcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007dd0:	f010 0301 	ands.w	r3, r0, #1
 8007dd4:	d00a      	beq.n	8007dec <__swsetup_r+0xbc>
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	60a3      	str	r3, [r4, #8]
 8007dda:	6963      	ldr	r3, [r4, #20]
 8007ddc:	425b      	negs	r3, r3
 8007dde:	61a3      	str	r3, [r4, #24]
 8007de0:	6923      	ldr	r3, [r4, #16]
 8007de2:	b943      	cbnz	r3, 8007df6 <__swsetup_r+0xc6>
 8007de4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007de8:	d1ba      	bne.n	8007d60 <__swsetup_r+0x30>
 8007dea:	bd70      	pop	{r4, r5, r6, pc}
 8007dec:	0781      	lsls	r1, r0, #30
 8007dee:	bf58      	it	pl
 8007df0:	6963      	ldrpl	r3, [r4, #20]
 8007df2:	60a3      	str	r3, [r4, #8]
 8007df4:	e7f4      	b.n	8007de0 <__swsetup_r+0xb0>
 8007df6:	2000      	movs	r0, #0
 8007df8:	e7f7      	b.n	8007dea <__swsetup_r+0xba>
 8007dfa:	bf00      	nop
 8007dfc:	200000b4 	.word	0x200000b4
 8007e00:	0800d1f0 	.word	0x0800d1f0
 8007e04:	0800d210 	.word	0x0800d210
 8007e08:	0800d1d0 	.word	0x0800d1d0

08007e0c <_close_r>:
 8007e0c:	b538      	push	{r3, r4, r5, lr}
 8007e0e:	4d06      	ldr	r5, [pc, #24]	; (8007e28 <_close_r+0x1c>)
 8007e10:	2300      	movs	r3, #0
 8007e12:	4604      	mov	r4, r0
 8007e14:	4608      	mov	r0, r1
 8007e16:	602b      	str	r3, [r5, #0]
 8007e18:	f7f9 fcb9 	bl	800178e <_close>
 8007e1c:	1c43      	adds	r3, r0, #1
 8007e1e:	d102      	bne.n	8007e26 <_close_r+0x1a>
 8007e20:	682b      	ldr	r3, [r5, #0]
 8007e22:	b103      	cbz	r3, 8007e26 <_close_r+0x1a>
 8007e24:	6023      	str	r3, [r4, #0]
 8007e26:	bd38      	pop	{r3, r4, r5, pc}
 8007e28:	20013b3c 	.word	0x20013b3c

08007e2c <__sflush_r>:
 8007e2c:	898a      	ldrh	r2, [r1, #12]
 8007e2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e32:	4605      	mov	r5, r0
 8007e34:	0710      	lsls	r0, r2, #28
 8007e36:	460c      	mov	r4, r1
 8007e38:	d458      	bmi.n	8007eec <__sflush_r+0xc0>
 8007e3a:	684b      	ldr	r3, [r1, #4]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	dc05      	bgt.n	8007e4c <__sflush_r+0x20>
 8007e40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	dc02      	bgt.n	8007e4c <__sflush_r+0x20>
 8007e46:	2000      	movs	r0, #0
 8007e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e4e:	2e00      	cmp	r6, #0
 8007e50:	d0f9      	beq.n	8007e46 <__sflush_r+0x1a>
 8007e52:	2300      	movs	r3, #0
 8007e54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e58:	682f      	ldr	r7, [r5, #0]
 8007e5a:	602b      	str	r3, [r5, #0]
 8007e5c:	d032      	beq.n	8007ec4 <__sflush_r+0x98>
 8007e5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e60:	89a3      	ldrh	r3, [r4, #12]
 8007e62:	075a      	lsls	r2, r3, #29
 8007e64:	d505      	bpl.n	8007e72 <__sflush_r+0x46>
 8007e66:	6863      	ldr	r3, [r4, #4]
 8007e68:	1ac0      	subs	r0, r0, r3
 8007e6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e6c:	b10b      	cbz	r3, 8007e72 <__sflush_r+0x46>
 8007e6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e70:	1ac0      	subs	r0, r0, r3
 8007e72:	2300      	movs	r3, #0
 8007e74:	4602      	mov	r2, r0
 8007e76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e78:	6a21      	ldr	r1, [r4, #32]
 8007e7a:	4628      	mov	r0, r5
 8007e7c:	47b0      	blx	r6
 8007e7e:	1c43      	adds	r3, r0, #1
 8007e80:	89a3      	ldrh	r3, [r4, #12]
 8007e82:	d106      	bne.n	8007e92 <__sflush_r+0x66>
 8007e84:	6829      	ldr	r1, [r5, #0]
 8007e86:	291d      	cmp	r1, #29
 8007e88:	d82c      	bhi.n	8007ee4 <__sflush_r+0xb8>
 8007e8a:	4a2a      	ldr	r2, [pc, #168]	; (8007f34 <__sflush_r+0x108>)
 8007e8c:	40ca      	lsrs	r2, r1
 8007e8e:	07d6      	lsls	r6, r2, #31
 8007e90:	d528      	bpl.n	8007ee4 <__sflush_r+0xb8>
 8007e92:	2200      	movs	r2, #0
 8007e94:	6062      	str	r2, [r4, #4]
 8007e96:	04d9      	lsls	r1, r3, #19
 8007e98:	6922      	ldr	r2, [r4, #16]
 8007e9a:	6022      	str	r2, [r4, #0]
 8007e9c:	d504      	bpl.n	8007ea8 <__sflush_r+0x7c>
 8007e9e:	1c42      	adds	r2, r0, #1
 8007ea0:	d101      	bne.n	8007ea6 <__sflush_r+0x7a>
 8007ea2:	682b      	ldr	r3, [r5, #0]
 8007ea4:	b903      	cbnz	r3, 8007ea8 <__sflush_r+0x7c>
 8007ea6:	6560      	str	r0, [r4, #84]	; 0x54
 8007ea8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007eaa:	602f      	str	r7, [r5, #0]
 8007eac:	2900      	cmp	r1, #0
 8007eae:	d0ca      	beq.n	8007e46 <__sflush_r+0x1a>
 8007eb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007eb4:	4299      	cmp	r1, r3
 8007eb6:	d002      	beq.n	8007ebe <__sflush_r+0x92>
 8007eb8:	4628      	mov	r0, r5
 8007eba:	f000 f8fd 	bl	80080b8 <_free_r>
 8007ebe:	2000      	movs	r0, #0
 8007ec0:	6360      	str	r0, [r4, #52]	; 0x34
 8007ec2:	e7c1      	b.n	8007e48 <__sflush_r+0x1c>
 8007ec4:	6a21      	ldr	r1, [r4, #32]
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	4628      	mov	r0, r5
 8007eca:	47b0      	blx	r6
 8007ecc:	1c41      	adds	r1, r0, #1
 8007ece:	d1c7      	bne.n	8007e60 <__sflush_r+0x34>
 8007ed0:	682b      	ldr	r3, [r5, #0]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d0c4      	beq.n	8007e60 <__sflush_r+0x34>
 8007ed6:	2b1d      	cmp	r3, #29
 8007ed8:	d001      	beq.n	8007ede <__sflush_r+0xb2>
 8007eda:	2b16      	cmp	r3, #22
 8007edc:	d101      	bne.n	8007ee2 <__sflush_r+0xb6>
 8007ede:	602f      	str	r7, [r5, #0]
 8007ee0:	e7b1      	b.n	8007e46 <__sflush_r+0x1a>
 8007ee2:	89a3      	ldrh	r3, [r4, #12]
 8007ee4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ee8:	81a3      	strh	r3, [r4, #12]
 8007eea:	e7ad      	b.n	8007e48 <__sflush_r+0x1c>
 8007eec:	690f      	ldr	r7, [r1, #16]
 8007eee:	2f00      	cmp	r7, #0
 8007ef0:	d0a9      	beq.n	8007e46 <__sflush_r+0x1a>
 8007ef2:	0793      	lsls	r3, r2, #30
 8007ef4:	680e      	ldr	r6, [r1, #0]
 8007ef6:	bf08      	it	eq
 8007ef8:	694b      	ldreq	r3, [r1, #20]
 8007efa:	600f      	str	r7, [r1, #0]
 8007efc:	bf18      	it	ne
 8007efe:	2300      	movne	r3, #0
 8007f00:	eba6 0807 	sub.w	r8, r6, r7
 8007f04:	608b      	str	r3, [r1, #8]
 8007f06:	f1b8 0f00 	cmp.w	r8, #0
 8007f0a:	dd9c      	ble.n	8007e46 <__sflush_r+0x1a>
 8007f0c:	6a21      	ldr	r1, [r4, #32]
 8007f0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007f10:	4643      	mov	r3, r8
 8007f12:	463a      	mov	r2, r7
 8007f14:	4628      	mov	r0, r5
 8007f16:	47b0      	blx	r6
 8007f18:	2800      	cmp	r0, #0
 8007f1a:	dc06      	bgt.n	8007f2a <__sflush_r+0xfe>
 8007f1c:	89a3      	ldrh	r3, [r4, #12]
 8007f1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f22:	81a3      	strh	r3, [r4, #12]
 8007f24:	f04f 30ff 	mov.w	r0, #4294967295
 8007f28:	e78e      	b.n	8007e48 <__sflush_r+0x1c>
 8007f2a:	4407      	add	r7, r0
 8007f2c:	eba8 0800 	sub.w	r8, r8, r0
 8007f30:	e7e9      	b.n	8007f06 <__sflush_r+0xda>
 8007f32:	bf00      	nop
 8007f34:	20400001 	.word	0x20400001

08007f38 <_fflush_r>:
 8007f38:	b538      	push	{r3, r4, r5, lr}
 8007f3a:	690b      	ldr	r3, [r1, #16]
 8007f3c:	4605      	mov	r5, r0
 8007f3e:	460c      	mov	r4, r1
 8007f40:	b913      	cbnz	r3, 8007f48 <_fflush_r+0x10>
 8007f42:	2500      	movs	r5, #0
 8007f44:	4628      	mov	r0, r5
 8007f46:	bd38      	pop	{r3, r4, r5, pc}
 8007f48:	b118      	cbz	r0, 8007f52 <_fflush_r+0x1a>
 8007f4a:	6983      	ldr	r3, [r0, #24]
 8007f4c:	b90b      	cbnz	r3, 8007f52 <_fflush_r+0x1a>
 8007f4e:	f7ff fa15 	bl	800737c <__sinit>
 8007f52:	4b14      	ldr	r3, [pc, #80]	; (8007fa4 <_fflush_r+0x6c>)
 8007f54:	429c      	cmp	r4, r3
 8007f56:	d11b      	bne.n	8007f90 <_fflush_r+0x58>
 8007f58:	686c      	ldr	r4, [r5, #4]
 8007f5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d0ef      	beq.n	8007f42 <_fflush_r+0xa>
 8007f62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007f64:	07d0      	lsls	r0, r2, #31
 8007f66:	d404      	bmi.n	8007f72 <_fflush_r+0x3a>
 8007f68:	0599      	lsls	r1, r3, #22
 8007f6a:	d402      	bmi.n	8007f72 <_fflush_r+0x3a>
 8007f6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f6e:	f7ff faa3 	bl	80074b8 <__retarget_lock_acquire_recursive>
 8007f72:	4628      	mov	r0, r5
 8007f74:	4621      	mov	r1, r4
 8007f76:	f7ff ff59 	bl	8007e2c <__sflush_r>
 8007f7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f7c:	07da      	lsls	r2, r3, #31
 8007f7e:	4605      	mov	r5, r0
 8007f80:	d4e0      	bmi.n	8007f44 <_fflush_r+0xc>
 8007f82:	89a3      	ldrh	r3, [r4, #12]
 8007f84:	059b      	lsls	r3, r3, #22
 8007f86:	d4dd      	bmi.n	8007f44 <_fflush_r+0xc>
 8007f88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f8a:	f7ff fa96 	bl	80074ba <__retarget_lock_release_recursive>
 8007f8e:	e7d9      	b.n	8007f44 <_fflush_r+0xc>
 8007f90:	4b05      	ldr	r3, [pc, #20]	; (8007fa8 <_fflush_r+0x70>)
 8007f92:	429c      	cmp	r4, r3
 8007f94:	d101      	bne.n	8007f9a <_fflush_r+0x62>
 8007f96:	68ac      	ldr	r4, [r5, #8]
 8007f98:	e7df      	b.n	8007f5a <_fflush_r+0x22>
 8007f9a:	4b04      	ldr	r3, [pc, #16]	; (8007fac <_fflush_r+0x74>)
 8007f9c:	429c      	cmp	r4, r3
 8007f9e:	bf08      	it	eq
 8007fa0:	68ec      	ldreq	r4, [r5, #12]
 8007fa2:	e7da      	b.n	8007f5a <_fflush_r+0x22>
 8007fa4:	0800d1f0 	.word	0x0800d1f0
 8007fa8:	0800d210 	.word	0x0800d210
 8007fac:	0800d1d0 	.word	0x0800d1d0

08007fb0 <_lseek_r>:
 8007fb0:	b538      	push	{r3, r4, r5, lr}
 8007fb2:	4d07      	ldr	r5, [pc, #28]	; (8007fd0 <_lseek_r+0x20>)
 8007fb4:	4604      	mov	r4, r0
 8007fb6:	4608      	mov	r0, r1
 8007fb8:	4611      	mov	r1, r2
 8007fba:	2200      	movs	r2, #0
 8007fbc:	602a      	str	r2, [r5, #0]
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	f7f9 fc0c 	bl	80017dc <_lseek>
 8007fc4:	1c43      	adds	r3, r0, #1
 8007fc6:	d102      	bne.n	8007fce <_lseek_r+0x1e>
 8007fc8:	682b      	ldr	r3, [r5, #0]
 8007fca:	b103      	cbz	r3, 8007fce <_lseek_r+0x1e>
 8007fcc:	6023      	str	r3, [r4, #0]
 8007fce:	bd38      	pop	{r3, r4, r5, pc}
 8007fd0:	20013b3c 	.word	0x20013b3c

08007fd4 <__swhatbuf_r>:
 8007fd4:	b570      	push	{r4, r5, r6, lr}
 8007fd6:	460e      	mov	r6, r1
 8007fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fdc:	2900      	cmp	r1, #0
 8007fde:	b096      	sub	sp, #88	; 0x58
 8007fe0:	4614      	mov	r4, r2
 8007fe2:	461d      	mov	r5, r3
 8007fe4:	da08      	bge.n	8007ff8 <__swhatbuf_r+0x24>
 8007fe6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007fea:	2200      	movs	r2, #0
 8007fec:	602a      	str	r2, [r5, #0]
 8007fee:	061a      	lsls	r2, r3, #24
 8007ff0:	d410      	bmi.n	8008014 <__swhatbuf_r+0x40>
 8007ff2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ff6:	e00e      	b.n	8008016 <__swhatbuf_r+0x42>
 8007ff8:	466a      	mov	r2, sp
 8007ffa:	f000 f8bb 	bl	8008174 <_fstat_r>
 8007ffe:	2800      	cmp	r0, #0
 8008000:	dbf1      	blt.n	8007fe6 <__swhatbuf_r+0x12>
 8008002:	9a01      	ldr	r2, [sp, #4]
 8008004:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008008:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800800c:	425a      	negs	r2, r3
 800800e:	415a      	adcs	r2, r3
 8008010:	602a      	str	r2, [r5, #0]
 8008012:	e7ee      	b.n	8007ff2 <__swhatbuf_r+0x1e>
 8008014:	2340      	movs	r3, #64	; 0x40
 8008016:	2000      	movs	r0, #0
 8008018:	6023      	str	r3, [r4, #0]
 800801a:	b016      	add	sp, #88	; 0x58
 800801c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008020 <__smakebuf_r>:
 8008020:	898b      	ldrh	r3, [r1, #12]
 8008022:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008024:	079d      	lsls	r5, r3, #30
 8008026:	4606      	mov	r6, r0
 8008028:	460c      	mov	r4, r1
 800802a:	d507      	bpl.n	800803c <__smakebuf_r+0x1c>
 800802c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008030:	6023      	str	r3, [r4, #0]
 8008032:	6123      	str	r3, [r4, #16]
 8008034:	2301      	movs	r3, #1
 8008036:	6163      	str	r3, [r4, #20]
 8008038:	b002      	add	sp, #8
 800803a:	bd70      	pop	{r4, r5, r6, pc}
 800803c:	ab01      	add	r3, sp, #4
 800803e:	466a      	mov	r2, sp
 8008040:	f7ff ffc8 	bl	8007fd4 <__swhatbuf_r>
 8008044:	9900      	ldr	r1, [sp, #0]
 8008046:	4605      	mov	r5, r0
 8008048:	4630      	mov	r0, r6
 800804a:	f7ff fa57 	bl	80074fc <_malloc_r>
 800804e:	b948      	cbnz	r0, 8008064 <__smakebuf_r+0x44>
 8008050:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008054:	059a      	lsls	r2, r3, #22
 8008056:	d4ef      	bmi.n	8008038 <__smakebuf_r+0x18>
 8008058:	f023 0303 	bic.w	r3, r3, #3
 800805c:	f043 0302 	orr.w	r3, r3, #2
 8008060:	81a3      	strh	r3, [r4, #12]
 8008062:	e7e3      	b.n	800802c <__smakebuf_r+0xc>
 8008064:	4b0d      	ldr	r3, [pc, #52]	; (800809c <__smakebuf_r+0x7c>)
 8008066:	62b3      	str	r3, [r6, #40]	; 0x28
 8008068:	89a3      	ldrh	r3, [r4, #12]
 800806a:	6020      	str	r0, [r4, #0]
 800806c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008070:	81a3      	strh	r3, [r4, #12]
 8008072:	9b00      	ldr	r3, [sp, #0]
 8008074:	6163      	str	r3, [r4, #20]
 8008076:	9b01      	ldr	r3, [sp, #4]
 8008078:	6120      	str	r0, [r4, #16]
 800807a:	b15b      	cbz	r3, 8008094 <__smakebuf_r+0x74>
 800807c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008080:	4630      	mov	r0, r6
 8008082:	f000 f889 	bl	8008198 <_isatty_r>
 8008086:	b128      	cbz	r0, 8008094 <__smakebuf_r+0x74>
 8008088:	89a3      	ldrh	r3, [r4, #12]
 800808a:	f023 0303 	bic.w	r3, r3, #3
 800808e:	f043 0301 	orr.w	r3, r3, #1
 8008092:	81a3      	strh	r3, [r4, #12]
 8008094:	89a0      	ldrh	r0, [r4, #12]
 8008096:	4305      	orrs	r5, r0
 8008098:	81a5      	strh	r5, [r4, #12]
 800809a:	e7cd      	b.n	8008038 <__smakebuf_r+0x18>
 800809c:	08007315 	.word	0x08007315

080080a0 <__malloc_lock>:
 80080a0:	4801      	ldr	r0, [pc, #4]	; (80080a8 <__malloc_lock+0x8>)
 80080a2:	f7ff ba09 	b.w	80074b8 <__retarget_lock_acquire_recursive>
 80080a6:	bf00      	nop
 80080a8:	20013b30 	.word	0x20013b30

080080ac <__malloc_unlock>:
 80080ac:	4801      	ldr	r0, [pc, #4]	; (80080b4 <__malloc_unlock+0x8>)
 80080ae:	f7ff ba04 	b.w	80074ba <__retarget_lock_release_recursive>
 80080b2:	bf00      	nop
 80080b4:	20013b30 	.word	0x20013b30

080080b8 <_free_r>:
 80080b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080ba:	2900      	cmp	r1, #0
 80080bc:	d044      	beq.n	8008148 <_free_r+0x90>
 80080be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080c2:	9001      	str	r0, [sp, #4]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	f1a1 0404 	sub.w	r4, r1, #4
 80080ca:	bfb8      	it	lt
 80080cc:	18e4      	addlt	r4, r4, r3
 80080ce:	f7ff ffe7 	bl	80080a0 <__malloc_lock>
 80080d2:	4a1e      	ldr	r2, [pc, #120]	; (800814c <_free_r+0x94>)
 80080d4:	9801      	ldr	r0, [sp, #4]
 80080d6:	6813      	ldr	r3, [r2, #0]
 80080d8:	b933      	cbnz	r3, 80080e8 <_free_r+0x30>
 80080da:	6063      	str	r3, [r4, #4]
 80080dc:	6014      	str	r4, [r2, #0]
 80080de:	b003      	add	sp, #12
 80080e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80080e4:	f7ff bfe2 	b.w	80080ac <__malloc_unlock>
 80080e8:	42a3      	cmp	r3, r4
 80080ea:	d908      	bls.n	80080fe <_free_r+0x46>
 80080ec:	6825      	ldr	r5, [r4, #0]
 80080ee:	1961      	adds	r1, r4, r5
 80080f0:	428b      	cmp	r3, r1
 80080f2:	bf01      	itttt	eq
 80080f4:	6819      	ldreq	r1, [r3, #0]
 80080f6:	685b      	ldreq	r3, [r3, #4]
 80080f8:	1949      	addeq	r1, r1, r5
 80080fa:	6021      	streq	r1, [r4, #0]
 80080fc:	e7ed      	b.n	80080da <_free_r+0x22>
 80080fe:	461a      	mov	r2, r3
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	b10b      	cbz	r3, 8008108 <_free_r+0x50>
 8008104:	42a3      	cmp	r3, r4
 8008106:	d9fa      	bls.n	80080fe <_free_r+0x46>
 8008108:	6811      	ldr	r1, [r2, #0]
 800810a:	1855      	adds	r5, r2, r1
 800810c:	42a5      	cmp	r5, r4
 800810e:	d10b      	bne.n	8008128 <_free_r+0x70>
 8008110:	6824      	ldr	r4, [r4, #0]
 8008112:	4421      	add	r1, r4
 8008114:	1854      	adds	r4, r2, r1
 8008116:	42a3      	cmp	r3, r4
 8008118:	6011      	str	r1, [r2, #0]
 800811a:	d1e0      	bne.n	80080de <_free_r+0x26>
 800811c:	681c      	ldr	r4, [r3, #0]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	6053      	str	r3, [r2, #4]
 8008122:	4421      	add	r1, r4
 8008124:	6011      	str	r1, [r2, #0]
 8008126:	e7da      	b.n	80080de <_free_r+0x26>
 8008128:	d902      	bls.n	8008130 <_free_r+0x78>
 800812a:	230c      	movs	r3, #12
 800812c:	6003      	str	r3, [r0, #0]
 800812e:	e7d6      	b.n	80080de <_free_r+0x26>
 8008130:	6825      	ldr	r5, [r4, #0]
 8008132:	1961      	adds	r1, r4, r5
 8008134:	428b      	cmp	r3, r1
 8008136:	bf04      	itt	eq
 8008138:	6819      	ldreq	r1, [r3, #0]
 800813a:	685b      	ldreq	r3, [r3, #4]
 800813c:	6063      	str	r3, [r4, #4]
 800813e:	bf04      	itt	eq
 8008140:	1949      	addeq	r1, r1, r5
 8008142:	6021      	streq	r1, [r4, #0]
 8008144:	6054      	str	r4, [r2, #4]
 8008146:	e7ca      	b.n	80080de <_free_r+0x26>
 8008148:	b003      	add	sp, #12
 800814a:	bd30      	pop	{r4, r5, pc}
 800814c:	20013b34 	.word	0x20013b34

08008150 <_read_r>:
 8008150:	b538      	push	{r3, r4, r5, lr}
 8008152:	4d07      	ldr	r5, [pc, #28]	; (8008170 <_read_r+0x20>)
 8008154:	4604      	mov	r4, r0
 8008156:	4608      	mov	r0, r1
 8008158:	4611      	mov	r1, r2
 800815a:	2200      	movs	r2, #0
 800815c:	602a      	str	r2, [r5, #0]
 800815e:	461a      	mov	r2, r3
 8008160:	f7f9 fadc 	bl	800171c <_read>
 8008164:	1c43      	adds	r3, r0, #1
 8008166:	d102      	bne.n	800816e <_read_r+0x1e>
 8008168:	682b      	ldr	r3, [r5, #0]
 800816a:	b103      	cbz	r3, 800816e <_read_r+0x1e>
 800816c:	6023      	str	r3, [r4, #0]
 800816e:	bd38      	pop	{r3, r4, r5, pc}
 8008170:	20013b3c 	.word	0x20013b3c

08008174 <_fstat_r>:
 8008174:	b538      	push	{r3, r4, r5, lr}
 8008176:	4d07      	ldr	r5, [pc, #28]	; (8008194 <_fstat_r+0x20>)
 8008178:	2300      	movs	r3, #0
 800817a:	4604      	mov	r4, r0
 800817c:	4608      	mov	r0, r1
 800817e:	4611      	mov	r1, r2
 8008180:	602b      	str	r3, [r5, #0]
 8008182:	f7f9 fb10 	bl	80017a6 <_fstat>
 8008186:	1c43      	adds	r3, r0, #1
 8008188:	d102      	bne.n	8008190 <_fstat_r+0x1c>
 800818a:	682b      	ldr	r3, [r5, #0]
 800818c:	b103      	cbz	r3, 8008190 <_fstat_r+0x1c>
 800818e:	6023      	str	r3, [r4, #0]
 8008190:	bd38      	pop	{r3, r4, r5, pc}
 8008192:	bf00      	nop
 8008194:	20013b3c 	.word	0x20013b3c

08008198 <_isatty_r>:
 8008198:	b538      	push	{r3, r4, r5, lr}
 800819a:	4d06      	ldr	r5, [pc, #24]	; (80081b4 <_isatty_r+0x1c>)
 800819c:	2300      	movs	r3, #0
 800819e:	4604      	mov	r4, r0
 80081a0:	4608      	mov	r0, r1
 80081a2:	602b      	str	r3, [r5, #0]
 80081a4:	f7f9 fb0f 	bl	80017c6 <_isatty>
 80081a8:	1c43      	adds	r3, r0, #1
 80081aa:	d102      	bne.n	80081b2 <_isatty_r+0x1a>
 80081ac:	682b      	ldr	r3, [r5, #0]
 80081ae:	b103      	cbz	r3, 80081b2 <_isatty_r+0x1a>
 80081b0:	6023      	str	r3, [r4, #0]
 80081b2:	bd38      	pop	{r3, r4, r5, pc}
 80081b4:	20013b3c 	.word	0x20013b3c

080081b8 <_init>:
 80081b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ba:	bf00      	nop
 80081bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081be:	bc08      	pop	{r3}
 80081c0:	469e      	mov	lr, r3
 80081c2:	4770      	bx	lr

080081c4 <_fini>:
 80081c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081c6:	bf00      	nop
 80081c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081ca:	bc08      	pop	{r3}
 80081cc:	469e      	mov	lr, r3
 80081ce:	4770      	bx	lr
