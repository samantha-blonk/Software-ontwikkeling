
swont_ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08005980  08005980  00015980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ab0  08005ab0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005ab0  08005ab0  00015ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ab8  08005ab8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ab8  08005ab8  00015ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005abc  08005abc  00015abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005ac0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013270  20000070  08005b30  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200132e0  08005b30  000232e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d300  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000259e  00000000  00000000  0002d3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  0002f940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf8  00000000  00000000  00030680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000236a4  00000000  00000000  00031278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ffc4  00000000  00000000  0005491c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb4be  00000000  00000000  000648e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012fd9e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d38  00000000  00000000  0012fdf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005968 	.word	0x08005968

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005968 	.word	0x08005968

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <recief>:
{
	printf("fakka kill ");
}

void recief()
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
	trigger = 1;
 800057a:	4b51      	ldr	r3, [pc, #324]	; (80006c0 <recief+0x14c>)
 800057c:	2201      	movs	r2, #1
 800057e:	701a      	strb	r2, [r3, #0]
	for(uint8_t a =0; a<input.msglen; a++)
 8000580:	2300      	movs	r3, #0
 8000582:	71fb      	strb	r3, [r7, #7]
 8000584:	e01c      	b.n	80005c0 <recief+0x4c>
	{
		if(input.line_rx_buffer[a] != ',' && trigger == 1)
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	4a4e      	ldr	r2, [pc, #312]	; (80006c4 <recief+0x150>)
 800058a:	4413      	add	r3, r2
 800058c:	785b      	ldrb	r3, [r3, #1]
 800058e:	2b2c      	cmp	r3, #44	; 0x2c
 8000590:	d00a      	beq.n	80005a8 <recief+0x34>
 8000592:	4b4b      	ldr	r3, [pc, #300]	; (80006c0 <recief+0x14c>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	2b01      	cmp	r3, #1
 8000598:	d106      	bne.n	80005a8 <recief+0x34>
			command[a] = input.line_rx_buffer[a];
 800059a:	79fa      	ldrb	r2, [r7, #7]
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	4949      	ldr	r1, [pc, #292]	; (80006c4 <recief+0x150>)
 80005a0:	440a      	add	r2, r1
 80005a2:	7851      	ldrb	r1, [r2, #1]
 80005a4:	4a48      	ldr	r2, [pc, #288]	; (80006c8 <recief+0x154>)
 80005a6:	54d1      	strb	r1, [r2, r3]
		if(input.line_rx_buffer[a] == ',')
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	4a46      	ldr	r2, [pc, #280]	; (80006c4 <recief+0x150>)
 80005ac:	4413      	add	r3, r2
 80005ae:	785b      	ldrb	r3, [r3, #1]
 80005b0:	2b2c      	cmp	r3, #44	; 0x2c
 80005b2:	d102      	bne.n	80005ba <recief+0x46>
			trigger = 0;
 80005b4:	4b42      	ldr	r3, [pc, #264]	; (80006c0 <recief+0x14c>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	701a      	strb	r2, [r3, #0]
	for(uint8_t a =0; a<input.msglen; a++)
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	3301      	adds	r3, #1
 80005be:	71fb      	strb	r3, [r7, #7]
 80005c0:	79fa      	ldrb	r2, [r7, #7]
 80005c2:	4b40      	ldr	r3, [pc, #256]	; (80006c4 <recief+0x150>)
 80005c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80005c8:	429a      	cmp	r2, r3
 80005ca:	dbdc      	blt.n	8000586 <recief+0x12>
	}

	switch(command[0])
 80005cc:	4b3e      	ldr	r3, [pc, #248]	; (80006c8 <recief+0x154>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	3b4c      	subs	r3, #76	; 0x4c
 80005d2:	2b28      	cmp	r3, #40	; 0x28
 80005d4:	d86c      	bhi.n	80006b0 <recief+0x13c>
 80005d6:	a201      	add	r2, pc, #4	; (adr r2, 80005dc <recief+0x68>)
 80005d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005dc:	080006a9 	.word	0x080006a9
 80005e0:	080006b1 	.word	0x080006b1
 80005e4:	080006b1 	.word	0x080006b1
 80005e8:	080006b1 	.word	0x080006b1
 80005ec:	080006b1 	.word	0x080006b1
 80005f0:	080006b1 	.word	0x080006b1
 80005f4:	080006b1 	.word	0x080006b1
 80005f8:	080006b1 	.word	0x080006b1
 80005fc:	080006b1 	.word	0x080006b1
 8000600:	080006b1 	.word	0x080006b1
 8000604:	080006b1 	.word	0x080006b1
 8000608:	080006b1 	.word	0x080006b1
 800060c:	080006b1 	.word	0x080006b1
 8000610:	080006b1 	.word	0x080006b1
 8000614:	080006b1 	.word	0x080006b1
 8000618:	080006b1 	.word	0x080006b1
 800061c:	080006b1 	.word	0x080006b1
 8000620:	080006b1 	.word	0x080006b1
 8000624:	080006b1 	.word	0x080006b1
 8000628:	080006b1 	.word	0x080006b1
 800062c:	080006b1 	.word	0x080006b1
 8000630:	080006b1 	.word	0x080006b1
 8000634:	080006a1 	.word	0x080006a1
 8000638:	08000699 	.word	0x08000699
 800063c:	080006b1 	.word	0x080006b1
 8000640:	080006b1 	.word	0x080006b1
 8000644:	080006b1 	.word	0x080006b1
 8000648:	080006b1 	.word	0x080006b1
 800064c:	080006b1 	.word	0x080006b1
 8000650:	080006b1 	.word	0x080006b1
 8000654:	080006b1 	.word	0x080006b1
 8000658:	080006b1 	.word	0x080006b1
 800065c:	08000681 	.word	0x08000681
 8000660:	080006b1 	.word	0x080006b1
 8000664:	080006b1 	.word	0x080006b1
 8000668:	080006b1 	.word	0x080006b1
 800066c:	080006b1 	.word	0x080006b1
 8000670:	080006b1 	.word	0x080006b1
 8000674:	08000689 	.word	0x08000689
 8000678:	080006b1 	.word	0x080006b1
 800067c:	08000691 	.word	0x08000691
	{
		case'l':
			 printf("comando lijn");
 8000680:	4812      	ldr	r0, [pc, #72]	; (80006cc <recief+0x158>)
 8000682:	f004 f9e3 	bl	8004a4c <iprintf>
			 break;
 8000686:	e017      	b.n	80006b8 <recief+0x144>
		case'r':
			printf("comando rechthoek");
 8000688:	4811      	ldr	r0, [pc, #68]	; (80006d0 <recief+0x15c>)
 800068a:	f004 f9df 	bl	8004a4c <iprintf>
			break;
 800068e:	e013      	b.n	80006b8 <recief+0x144>
		case't':
			printf("comando tekst");
 8000690:	4810      	ldr	r0, [pc, #64]	; (80006d4 <recief+0x160>)
 8000692:	f004 f9db 	bl	8004a4c <iprintf>
			break;
 8000696:	e00f      	b.n	80006b8 <recief+0x144>
		case'c':
			printf("comando clearscherm");
 8000698:	480f      	ldr	r0, [pc, #60]	; (80006d8 <recief+0x164>)
 800069a:	f004 f9d7 	bl	8004a4c <iprintf>
			break;
 800069e:	e00b      	b.n	80006b8 <recief+0x144>
		case'b':
			printf("comando bitmap");
 80006a0:	480e      	ldr	r0, [pc, #56]	; (80006dc <recief+0x168>)
 80006a2:	f004 f9d3 	bl	8004a4c <iprintf>
			break;
 80006a6:	e007      	b.n	80006b8 <recief+0x144>
		case'L':
			printf("comando lijn");
 80006a8:	4808      	ldr	r0, [pc, #32]	; (80006cc <recief+0x158>)
 80006aa:	f004 f9cf 	bl	8004a4c <iprintf>
			break;
 80006ae:	e003      	b.n	80006b8 <recief+0x144>
		default:
			printf("onbekent comando");
 80006b0:	480b      	ldr	r0, [pc, #44]	; (80006e0 <recief+0x16c>)
 80006b2:	f004 f9cb 	bl	8004a4c <iprintf>
			break;
 80006b6:	bf00      	nop

	}


}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20000098 	.word	0x20000098
 80006c4:	2000009c 	.word	0x2000009c
 80006c8:	2000008c 	.word	0x2000008c
 80006cc:	0800598c 	.word	0x0800598c
 80006d0:	0800599c 	.word	0x0800599c
 80006d4:	080059b0 	.word	0x080059b0
 80006d8:	080059c0 	.word	0x080059c0
 80006dc:	080059d4 	.word	0x080059d4
 80006e0:	080059e4 	.word	0x080059e4

080006e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_DMA_Init+0x3c>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a0b      	ldr	r2, [pc, #44]	; (8000720 <MX_DMA_Init+0x3c>)
 80006f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_DMA_Init+0x3c>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000706:	2200      	movs	r2, #0
 8000708:	2100      	movs	r1, #0
 800070a:	2044      	movs	r0, #68	; 0x44
 800070c:	f000 ff2b 	bl	8001566 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000710:	2044      	movs	r0, #68	; 0x44
 8000712:	f000 ff44 	bl	800159e <HAL_NVIC_EnableIRQ>

}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40023800 	.word	0x40023800

08000724 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	; 0x28
 8000728:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	613b      	str	r3, [r7, #16]
 800073e:	4b32      	ldr	r3, [pc, #200]	; (8000808 <MX_GPIO_Init+0xe4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a31      	ldr	r2, [pc, #196]	; (8000808 <MX_GPIO_Init+0xe4>)
 8000744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b2f      	ldr	r3, [pc, #188]	; (8000808 <MX_GPIO_Init+0xe4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	4b2b      	ldr	r3, [pc, #172]	; (8000808 <MX_GPIO_Init+0xe4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a2a      	ldr	r2, [pc, #168]	; (8000808 <MX_GPIO_Init+0xe4>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b28      	ldr	r3, [pc, #160]	; (8000808 <MX_GPIO_Init+0xe4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	4b24      	ldr	r3, [pc, #144]	; (8000808 <MX_GPIO_Init+0xe4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a23      	ldr	r2, [pc, #140]	; (8000808 <MX_GPIO_Init+0xe4>)
 800077c:	f043 0310 	orr.w	r3, r3, #16
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b21      	ldr	r3, [pc, #132]	; (8000808 <MX_GPIO_Init+0xe4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0310 	and.w	r3, r3, #16
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	4b1d      	ldr	r3, [pc, #116]	; (8000808 <MX_GPIO_Init+0xe4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a1c      	ldr	r2, [pc, #112]	; (8000808 <MX_GPIO_Init+0xe4>)
 8000798:	f043 0302 	orr.w	r3, r3, #2
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b1a      	ldr	r3, [pc, #104]	; (8000808 <MX_GPIO_Init+0xe4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 80007aa:	2200      	movs	r2, #0
 80007ac:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80007b0:	4816      	ldr	r0, [pc, #88]	; (800080c <MX_GPIO_Init+0xe8>)
 80007b2:	f001 fc3d 	bl	8002030 <HAL_GPIO_WritePin>
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VGA_VSYNC_GPIO_Port, VGA_VSYNC_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007bc:	4814      	ldr	r0, [pc, #80]	; (8000810 <MX_GPIO_Init+0xec>)
 80007be:	f001 fc37 	bl	8002030 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 80007c2:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80007c6:	617b      	str	r3, [r7, #20]
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c8:	2301      	movs	r3, #1
 80007ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d0:	2303      	movs	r3, #3
 80007d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	4619      	mov	r1, r3
 80007da:	480c      	ldr	r0, [pc, #48]	; (800080c <MX_GPIO_Init+0xe8>)
 80007dc:	f001 fa8c 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VGA_VSYNC_Pin;
 80007e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e6:	2301      	movs	r3, #1
 80007e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ee:	2303      	movs	r3, #3
 80007f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VGA_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	4619      	mov	r1, r3
 80007f8:	4805      	ldr	r0, [pc, #20]	; (8000810 <MX_GPIO_Init+0xec>)
 80007fa:	f001 fa7d 	bl	8001cf8 <HAL_GPIO_Init>

}
 80007fe:	bf00      	nop
 8000800:	3728      	adds	r7, #40	; 0x28
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40023800 	.word	0x40023800
 800080c:	40021000 	.word	0x40021000
 8000810:	40020400 	.word	0x40020400

08000814 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800081a:	f000 fd57 	bl	80012cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800081e:	f000 f857 	bl	80008d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000822:	f7ff ff7f 	bl	8000724 <MX_GPIO_Init>
  MX_DMA_Init();
 8000826:	f7ff ff5d 	bl	80006e4 <MX_DMA_Init>
  MX_TIM1_Init();
 800082a:	f000 faa5 	bl	8000d78 <MX_TIM1_Init>
  MX_TIM2_Init();
 800082e:	f000 faf3 	bl	8000e18 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000832:	f000 fc09 	bl	8001048 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  UB_VGA_Screen_Init(); // Init VGA-Screen
 8000836:	f000 fcab 	bl	8001190 <UB_VGA_Screen_Init>

  UB_VGA_FillScreen(VGA_COL_WHITE);
 800083a:	20ff      	movs	r0, #255	; 0xff
 800083c:	f000 fcfa 	bl	8001234 <UB_VGA_FillScreen>
  UB_VGA_SetPixel(10,10,10);
 8000840:	220a      	movs	r2, #10
 8000842:	210a      	movs	r1, #10
 8000844:	200a      	movs	r0, #10
 8000846:	f000 fd19 	bl	800127c <UB_VGA_SetPixel>
  UB_VGA_SetPixel(0,0,0x00);
 800084a:	2200      	movs	r2, #0
 800084c:	2100      	movs	r1, #0
 800084e:	2000      	movs	r0, #0
 8000850:	f000 fd14 	bl	800127c <UB_VGA_SetPixel>
  UB_VGA_SetPixel(319,0,0x00);
 8000854:	2200      	movs	r2, #0
 8000856:	2100      	movs	r1, #0
 8000858:	f240 103f 	movw	r0, #319	; 0x13f
 800085c:	f000 fd0e 	bl	800127c <UB_VGA_SetPixel>

  int i;

  for(i = 0; i < LINE_BUFLEN; i++)
 8000860:	2300      	movs	r3, #0
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	e008      	b.n	8000878 <main+0x64>
	  input.line_rx_buffer[i] = 0;
 8000866:	4a18      	ldr	r2, [pc, #96]	; (80008c8 <main+0xb4>)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	4413      	add	r3, r2
 800086c:	3301      	adds	r3, #1
 800086e:	2200      	movs	r2, #0
 8000870:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < LINE_BUFLEN; i++)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	3301      	adds	r3, #1
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800087e:	dbf2      	blt.n	8000866 <main+0x52>

  // Reset some stuff
  input.byte_buffer_rx[0] = 0;
 8000880:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <main+0xb4>)
 8000882:	2200      	movs	r2, #0
 8000884:	701a      	strb	r2, [r3, #0]
  input.char_counter = 0;
 8000886:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <main+0xb4>)
 8000888:	2200      	movs	r2, #0
 800088a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  input.command_execute_flag = FALSE;
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <main+0xb4>)
 8000890:	2200      	movs	r2, #0
 8000892:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c

  // HAl wants a memory location to store the charachter it receives from the UART
  // We will pass it an array, but we will not use it. We declare our own variable in the interupt handler
  // See stm32f4xx_it.c
  HAL_UART_Receive_IT(&huart2, input.byte_buffer_rx, BYTE_BUFLEN);
 8000896:	2201      	movs	r2, #1
 8000898:	490b      	ldr	r1, [pc, #44]	; (80008c8 <main+0xb4>)
 800089a:	480c      	ldr	r0, [pc, #48]	; (80008cc <main+0xb8>)
 800089c:	f003 f8f6 	bl	8003a8c <HAL_UART_Receive_IT>

  // Test to see if the screen reacts to UART
  unsigned char colorTest = TRUE;
 80008a0:	23ff      	movs	r3, #255	; 0xff
 80008a2:	70fb      	strb	r3, [r7, #3]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  UB_VGA_SetPixel(160,120,VGA_COL_RED);
 80008a4:	22e0      	movs	r2, #224	; 0xe0
 80008a6:	2178      	movs	r1, #120	; 0x78
 80008a8:	20a0      	movs	r0, #160	; 0xa0
 80008aa:	f000 fce7 	bl	800127c <UB_VGA_SetPixel>
	  if(input.command_execute_flag == TRUE)
 80008ae:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <main+0xb4>)
 80008b0:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 80008b4:	2bff      	cmp	r3, #255	; 0xff
 80008b6:	d1f5      	bne.n	80008a4 <main+0x90>
	  {
		  // jump to parser
		  recief();
 80008b8:	f7ff fe5c 	bl	8000574 <recief>
		  // When finished reset the flag
		  input.command_execute_flag = FALSE;
 80008bc:	4b02      	ldr	r3, [pc, #8]	; (80008c8 <main+0xb4>)
 80008be:	2200      	movs	r2, #0
 80008c0:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
	  UB_VGA_SetPixel(160,120,VGA_COL_RED);
 80008c4:	e7ee      	b.n	80008a4 <main+0x90>
 80008c6:	bf00      	nop
 80008c8:	2000009c 	.word	0x2000009c
 80008cc:	20000590 	.word	0x20000590

080008d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b094      	sub	sp, #80	; 0x50
 80008d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d6:	f107 0320 	add.w	r3, r7, #32
 80008da:	2230      	movs	r2, #48	; 0x30
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f004 f8ac 	bl	8004a3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e4:	f107 030c 	add.w	r3, r7, #12
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f4:	2300      	movs	r3, #0
 80008f6:	60bb      	str	r3, [r7, #8]
 80008f8:	4b28      	ldr	r3, [pc, #160]	; (800099c <SystemClock_Config+0xcc>)
 80008fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fc:	4a27      	ldr	r2, [pc, #156]	; (800099c <SystemClock_Config+0xcc>)
 80008fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000902:	6413      	str	r3, [r2, #64]	; 0x40
 8000904:	4b25      	ldr	r3, [pc, #148]	; (800099c <SystemClock_Config+0xcc>)
 8000906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090c:	60bb      	str	r3, [r7, #8]
 800090e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000910:	2300      	movs	r3, #0
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	4b22      	ldr	r3, [pc, #136]	; (80009a0 <SystemClock_Config+0xd0>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a21      	ldr	r2, [pc, #132]	; (80009a0 <SystemClock_Config+0xd0>)
 800091a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800091e:	6013      	str	r3, [r2, #0]
 8000920:	4b1f      	ldr	r3, [pc, #124]	; (80009a0 <SystemClock_Config+0xd0>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000928:	607b      	str	r3, [r7, #4]
 800092a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800092c:	2301      	movs	r3, #1
 800092e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000930:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000936:	2302      	movs	r3, #2
 8000938:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800093a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800093e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000940:	2304      	movs	r3, #4
 8000942:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000944:	23a8      	movs	r3, #168	; 0xa8
 8000946:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000948:	2302      	movs	r3, #2
 800094a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800094c:	2304      	movs	r3, #4
 800094e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000950:	f107 0320 	add.w	r3, r7, #32
 8000954:	4618      	mov	r0, r3
 8000956:	f001 fb85 	bl	8002064 <HAL_RCC_OscConfig>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000960:	f000 f832 	bl	80009c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000964:	230f      	movs	r3, #15
 8000966:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000968:	2302      	movs	r3, #2
 800096a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000970:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000974:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000976:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800097a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800097c:	f107 030c 	add.w	r3, r7, #12
 8000980:	2105      	movs	r1, #5
 8000982:	4618      	mov	r0, r3
 8000984:	f001 fddc 	bl	8002540 <HAL_RCC_ClockConfig>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800098e:	f000 f81b 	bl	80009c8 <Error_Handler>
  }
}
 8000992:	bf00      	nop
 8000994:	3750      	adds	r7, #80	; 0x50
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40023800 	.word	0x40023800
 80009a0:	40007000 	.word	0x40007000

080009a4 <__io_putchar>:
	#define USART_PRINTF int fputc(int ch, FILE *f)		//With other compiler printf calls fputc()
#endif /* __GNUC__ */

//Retargets the C library printf function to the USART
USART_PRINTF
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);	//Write character to UART2
 80009ac:	1d39      	adds	r1, r7, #4
 80009ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009b2:	2201      	movs	r2, #1
 80009b4:	4803      	ldr	r0, [pc, #12]	; (80009c4 <__io_putchar+0x20>)
 80009b6:	f002 ffd0 	bl	800395a <HAL_UART_Transmit>
	return ch;												//Return the character
 80009ba:	687b      	ldr	r3, [r7, #4]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20000590 	.word	0x20000590

080009c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
	...

080009d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <HAL_MspInit+0x4c>)
 80009e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e6:	4a0f      	ldr	r2, [pc, #60]	; (8000a24 <HAL_MspInit+0x4c>)
 80009e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ec:	6453      	str	r3, [r2, #68]	; 0x44
 80009ee:	4b0d      	ldr	r3, [pc, #52]	; (8000a24 <HAL_MspInit+0x4c>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	603b      	str	r3, [r7, #0]
 80009fe:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <HAL_MspInit+0x4c>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a02:	4a08      	ldr	r2, [pc, #32]	; (8000a24 <HAL_MspInit+0x4c>)
 8000a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a08:	6413      	str	r3, [r2, #64]	; 0x40
 8000a0a:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <HAL_MspInit+0x4c>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a12:	603b      	str	r3, [r7, #0]
 8000a14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a16:	bf00      	nop
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	40023800 	.word	0x40023800

08000a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr

08000a36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a3a:	e7fe      	b.n	8000a3a <HardFault_Handler+0x4>

08000a3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <MemManage_Handler+0x4>

08000a42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a46:	e7fe      	b.n	8000a46 <BusFault_Handler+0x4>

08000a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <UsageFault_Handler+0x4>

08000a4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr

08000a6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a7c:	f000 fc78 	bl	8001370 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a88:	4828      	ldr	r0, [pc, #160]	; (8000b2c <TIM2_IRQHandler+0xa8>)
 8000a8a:	f002 f8b5 	bl	8002bf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC3); // uncomment HAL_TIM_IRQHandler(&htim2); ^^
 8000a8e:	4b27      	ldr	r3, [pc, #156]	; (8000b2c <TIM2_IRQHandler+0xa8>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f06f 0208 	mvn.w	r2, #8
 8000a96:	611a      	str	r2, [r3, #16]

  VGA.hsync_cnt++;
 8000a98:	4b25      	ldr	r3, [pc, #148]	; (8000b30 <TIM2_IRQHandler+0xac>)
 8000a9a:	881b      	ldrh	r3, [r3, #0]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	b29a      	uxth	r2, r3
 8000aa0:	4b23      	ldr	r3, [pc, #140]	; (8000b30 <TIM2_IRQHandler+0xac>)
 8000aa2:	801a      	strh	r2, [r3, #0]
  if (VGA.hsync_cnt >= VGA_VSYNC_PERIODE)
 8000aa4:	4b22      	ldr	r3, [pc, #136]	; (8000b30 <TIM2_IRQHandler+0xac>)
 8000aa6:	881b      	ldrh	r3, [r3, #0]
 8000aa8:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8000aac:	d905      	bls.n	8000aba <TIM2_IRQHandler+0x36>
  {
    // -----------
    VGA.hsync_cnt = 0;
 8000aae:	4b20      	ldr	r3, [pc, #128]	; (8000b30 <TIM2_IRQHandler+0xac>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr = (uint32_t)(&VGA_RAM1[0]);
 8000ab4:	4a1f      	ldr	r2, [pc, #124]	; (8000b34 <TIM2_IRQHandler+0xb0>)
 8000ab6:	4b1e      	ldr	r3, [pc, #120]	; (8000b30 <TIM2_IRQHandler+0xac>)
 8000ab8:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  GPIOB->BSRR = (VGA.hsync_cnt < VGA_VSYNC_IMP) ? VGA_VSYNC_Pin << 16u: VGA_VSYNC_Pin;
 8000aba:	4b1d      	ldr	r3, [pc, #116]	; (8000b30 <TIM2_IRQHandler+0xac>)
 8000abc:	881b      	ldrh	r3, [r3, #0]
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d802      	bhi.n	8000ac8 <TIM2_IRQHandler+0x44>
 8000ac2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ac6:	e001      	b.n	8000acc <TIM2_IRQHandler+0x48>
 8000ac8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000acc:	4a1a      	ldr	r2, [pc, #104]	; (8000b38 <TIM2_IRQHandler+0xb4>)
 8000ace:	6193      	str	r3, [r2, #24]

  // Test for DMA start
  if((VGA.hsync_cnt >= VGA_VSYNC_BILD_START) && (VGA.hsync_cnt <= VGA_VSYNC_BILD_STOP))
 8000ad0:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <TIM2_IRQHandler+0xac>)
 8000ad2:	881b      	ldrh	r3, [r3, #0]
 8000ad4:	2b23      	cmp	r3, #35	; 0x23
 8000ad6:	d927      	bls.n	8000b28 <TIM2_IRQHandler+0xa4>
 8000ad8:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <TIM2_IRQHandler+0xac>)
 8000ada:	881b      	ldrh	r3, [r3, #0]
 8000adc:	f240 2202 	movw	r2, #514	; 0x202
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d821      	bhi.n	8000b28 <TIM2_IRQHandler+0xa4>
  {
    // after FP start => DMA Transfer

    // DMA2 init
	  DMA2_Stream5->CR = VGA.dma2_cr_reg;
 8000ae4:	4a15      	ldr	r2, [pc, #84]	; (8000b3c <TIM2_IRQHandler+0xb8>)
 8000ae6:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <TIM2_IRQHandler+0xac>)
 8000ae8:	689b      	ldr	r3, [r3, #8]
 8000aea:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR = VGA.start_adr;
 8000aec:	4a13      	ldr	r2, [pc, #76]	; (8000b3c <TIM2_IRQHandler+0xb8>)
 8000aee:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <TIM2_IRQHandler+0xac>)
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1 |= TIM_CR1_CEN; // __HAL_TIM_ENABLE(&htim1); // too slow?
 8000af4:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <TIM2_IRQHandler+0xbc>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a11      	ldr	r2, [pc, #68]	; (8000b40 <TIM2_IRQHandler+0xbc>)
 8000afa:	f043 0301 	orr.w	r3, r3, #1
 8000afe:	6013      	str	r3, [r2, #0]
    // DMA2 enable
    __HAL_DMA_ENABLE(&hdma_tim1_up);
 8000b00:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <TIM2_IRQHandler+0xc0>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <TIM2_IRQHandler+0xc0>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f042 0201 	orr.w	r2, r2, #1
 8000b0e:	601a      	str	r2, [r3, #0]
    // Test Adrespointer for high
    if(VGA.hsync_cnt & 0x01)
 8000b10:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <TIM2_IRQHandler+0xac>)
 8000b12:	881b      	ldrh	r3, [r3, #0]
 8000b14:	f003 0301 	and.w	r3, r3, #1
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d005      	beq.n	8000b28 <TIM2_IRQHandler+0xa4>
      VGA.start_adr += (VGA_DISPLAY_X + 1); // inc after Hsync
 8000b1c:	4b04      	ldr	r3, [pc, #16]	; (8000b30 <TIM2_IRQHandler+0xac>)
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	f203 1341 	addw	r3, r3, #321	; 0x141
 8000b24:	4a02      	ldr	r2, [pc, #8]	; (8000b30 <TIM2_IRQHandler+0xac>)
 8000b26:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	200004f0 	.word	0x200004f0
 8000b30:	200132c0 	.word	0x200132c0
 8000b34:	200005d0 	.word	0x200005d0
 8000b38:	40020400 	.word	0x40020400
 8000b3c:	40026488 	.word	0x40026488
 8000b40:	40010000 	.word	0x40010000
 8000b44:	20000530 	.word	0x20000530

08000b48 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	// Store the byte we received on the UART
	char uart_char = USART2->DR;
 8000b4e:	4b1a      	ldr	r3, [pc, #104]	; (8000bb8 <USART2_IRQHandler+0x70>)
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	71fb      	strb	r3, [r7, #7]

	//Ignore the '\n' character
	if(uart_char != LINE_FEED)
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	2b0a      	cmp	r3, #10
 8000b58:	d026      	beq.n	8000ba8 <USART2_IRQHandler+0x60>
	{
		// Check for CR or a dot
		// There was a small bug in the terminal program.
		// By terminating your message with a dot you can ignore the CR (Enter) character
		if((uart_char == CARRIAGE_RETURN) || (uart_char == '.'))
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	2b0d      	cmp	r3, #13
 8000b5e:	d002      	beq.n	8000b66 <USART2_IRQHandler+0x1e>
 8000b60:	79fb      	ldrb	r3, [r7, #7]
 8000b62:	2b2e      	cmp	r3, #46	; 0x2e
 8000b64:	d10e      	bne.n	8000b84 <USART2_IRQHandler+0x3c>
		{
			input.command_execute_flag = TRUE;
 8000b66:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <USART2_IRQHandler+0x74>)
 8000b68:	22ff      	movs	r2, #255	; 0xff
 8000b6a:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			// Store the message length for processing
			input.msglen = input.char_counter;
 8000b6e:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <USART2_IRQHandler+0x74>)
 8000b70:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000b74:	4a11      	ldr	r2, [pc, #68]	; (8000bbc <USART2_IRQHandler+0x74>)
 8000b76:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			// Reset the counter for the next line
			input.char_counter = 0;
 8000b7a:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <USART2_IRQHandler+0x74>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8000b82:	e011      	b.n	8000ba8 <USART2_IRQHandler+0x60>
			//Gently exit interrupt
		}
		else
		{
			input.command_execute_flag = FALSE;
 8000b84:	4b0d      	ldr	r3, [pc, #52]	; (8000bbc <USART2_IRQHandler+0x74>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			input.line_rx_buffer[input.char_counter] = uart_char;
 8000b8c:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <USART2_IRQHandler+0x74>)
 8000b8e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000b92:	4a0a      	ldr	r2, [pc, #40]	; (8000bbc <USART2_IRQHandler+0x74>)
 8000b94:	4413      	add	r3, r2
 8000b96:	79fa      	ldrb	r2, [r7, #7]
 8000b98:	705a      	strb	r2, [r3, #1]
			input.char_counter++;
 8000b9a:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <USART2_IRQHandler+0x74>)
 8000b9c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	4a06      	ldr	r2, [pc, #24]	; (8000bbc <USART2_IRQHandler+0x74>)
 8000ba4:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
		}
	}

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ba8:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <USART2_IRQHandler+0x78>)
 8000baa:	f002 ffc5 	bl	8003b38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40004400 	.word	0x40004400
 8000bbc:	2000009c 	.word	0x2000009c
 8000bc0:	20000590 	.word	0x20000590

08000bc4 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

    // Timer1 stop
    __HAL_TIM_DISABLE(&htim1);
 8000bc8:	4b10      	ldr	r3, [pc, #64]	; (8000c0c <DMA2_Stream5_IRQHandler+0x48>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	6a1a      	ldr	r2, [r3, #32]
 8000bce:	f241 1311 	movw	r3, #4369	; 0x1111
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d10f      	bne.n	8000bf8 <DMA2_Stream5_IRQHandler+0x34>
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <DMA2_Stream5_IRQHandler+0x48>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	6a1a      	ldr	r2, [r3, #32]
 8000bde:	f240 4344 	movw	r3, #1092	; 0x444
 8000be2:	4013      	ands	r3, r2
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d107      	bne.n	8000bf8 <DMA2_Stream5_IRQHandler+0x34>
 8000be8:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <DMA2_Stream5_IRQHandler+0x48>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	4b07      	ldr	r3, [pc, #28]	; (8000c0c <DMA2_Stream5_IRQHandler+0x48>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f022 0201 	bic.w	r2, r2, #1
 8000bf6:	601a      	str	r2, [r3, #0]
    // DMA2 disable
    // __HAL_DMA_DISABLE(&hdma_tim1_up); // not needed?
    // switch on black
    GPIOE->BSRR = VGA_GPIO_HINIBBLE << 16u;
 8000bf8:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <DMA2_Stream5_IRQHandler+0x4c>)
 8000bfa:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000bfe:	619a      	str	r2, [r3, #24]

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8000c00:	4804      	ldr	r0, [pc, #16]	; (8000c14 <DMA2_Stream5_IRQHandler+0x50>)
 8000c02:	f000 fe0f 	bl	8001824 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	200004b0 	.word	0x200004b0
 8000c10:	40021000 	.word	0x40021000
 8000c14:	20000530 	.word	0x20000530

08000c18 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]
 8000c28:	e00a      	b.n	8000c40 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c2a:	f3af 8000 	nop.w
 8000c2e:	4601      	mov	r1, r0
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	1c5a      	adds	r2, r3, #1
 8000c34:	60ba      	str	r2, [r7, #8]
 8000c36:	b2ca      	uxtb	r2, r1
 8000c38:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	617b      	str	r3, [r7, #20]
 8000c40:	697a      	ldr	r2, [r7, #20]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	dbf0      	blt.n	8000c2a <_read+0x12>
	}

return len;
 8000c48:	687b      	ldr	r3, [r7, #4]
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3718      	adds	r7, #24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b086      	sub	sp, #24
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	60f8      	str	r0, [r7, #12]
 8000c5a:	60b9      	str	r1, [r7, #8]
 8000c5c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5e:	2300      	movs	r3, #0
 8000c60:	617b      	str	r3, [r7, #20]
 8000c62:	e009      	b.n	8000c78 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	1c5a      	adds	r2, r3, #1
 8000c68:	60ba      	str	r2, [r7, #8]
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff fe99 	bl	80009a4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	3301      	adds	r3, #1
 8000c76:	617b      	str	r3, [r7, #20]
 8000c78:	697a      	ldr	r2, [r7, #20]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	dbf1      	blt.n	8000c64 <_write+0x12>
	}
	return len;
 8000c80:	687b      	ldr	r3, [r7, #4]
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <_close>:

int _close(int file)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	b083      	sub	sp, #12
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
	return -1;
 8000c92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	b083      	sub	sp, #12
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
 8000caa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cb2:	605a      	str	r2, [r3, #4]
	return 0;
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr

08000cc2 <_isatty>:

int _isatty(int file)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	b083      	sub	sp, #12
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
	return 1;
 8000cca:	2301      	movs	r3, #1
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
	return 0;
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3714      	adds	r7, #20
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
	...

08000cf4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000cfc:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <_sbrk+0x50>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d102      	bne.n	8000d0a <_sbrk+0x16>
		heap_end = &end;
 8000d04:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <_sbrk+0x50>)
 8000d06:	4a10      	ldr	r2, [pc, #64]	; (8000d48 <_sbrk+0x54>)
 8000d08:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <_sbrk+0x50>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <_sbrk+0x50>)
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4413      	add	r3, r2
 8000d18:	466a      	mov	r2, sp
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d907      	bls.n	8000d2e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000d1e:	f003 fe63 	bl	80049e8 <__errno>
 8000d22:	4603      	mov	r3, r0
 8000d24:	220c      	movs	r2, #12
 8000d26:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000d28:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2c:	e006      	b.n	8000d3c <_sbrk+0x48>
	}

	heap_end += incr;
 8000d2e:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <_sbrk+0x50>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4413      	add	r3, r2
 8000d36:	4a03      	ldr	r2, [pc, #12]	; (8000d44 <_sbrk+0x50>)
 8000d38:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3710      	adds	r7, #16
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	200004ac 	.word	0x200004ac
 8000d48:	200132e0 	.word	0x200132e0

08000d4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d50:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <SystemInit+0x28>)
 8000d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d56:	4a07      	ldr	r2, [pc, #28]	; (8000d74 <SystemInit+0x28>)
 8000d58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d60:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <SystemInit+0x28>)
 8000d62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d66:	609a      	str	r2, [r3, #8]
#endif
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim1_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d7e:	f107 0308 	add.w	r3, r7, #8
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
 8000d88:	609a      	str	r2, [r3, #8]
 8000d8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d8c:	463b      	mov	r3, r7
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8000d94:	4b1e      	ldr	r3, [pc, #120]	; (8000e10 <MX_TIM1_Init+0x98>)
 8000d96:	4a1f      	ldr	r2, [pc, #124]	; (8000e14 <MX_TIM1_Init+0x9c>)
 8000d98:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = VGA_TIM1_PRESCALE;
 8000d9a:	4b1d      	ldr	r3, [pc, #116]	; (8000e10 <MX_TIM1_Init+0x98>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da0:	4b1b      	ldr	r3, [pc, #108]	; (8000e10 <MX_TIM1_Init+0x98>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = VGA_TIM1_PERIODE;
 8000da6:	4b1a      	ldr	r3, [pc, #104]	; (8000e10 <MX_TIM1_Init+0x98>)
 8000da8:	220b      	movs	r2, #11
 8000daa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dac:	4b18      	ldr	r3, [pc, #96]	; (8000e10 <MX_TIM1_Init+0x98>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000db2:	4b17      	ldr	r3, [pc, #92]	; (8000e10 <MX_TIM1_Init+0x98>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db8:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <MX_TIM1_Init+0x98>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000dbe:	4814      	ldr	r0, [pc, #80]	; (8000e10 <MX_TIM1_Init+0x98>)
 8000dc0:	f001 fdde 	bl	8002980 <HAL_TIM_Base_Init>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8000dca:	f7ff fdfd 	bl	80009c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dd2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000dd4:	f107 0308 	add.w	r3, r7, #8
 8000dd8:	4619      	mov	r1, r3
 8000dda:	480d      	ldr	r0, [pc, #52]	; (8000e10 <MX_TIM1_Init+0x98>)
 8000ddc:	f002 f8da 	bl	8002f94 <HAL_TIM_ConfigClockSource>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8000de6:	f7ff fdef 	bl	80009c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dea:	2300      	movs	r3, #0
 8000dec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dee:	2300      	movs	r3, #0
 8000df0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000df2:	463b      	mov	r3, r7
 8000df4:	4619      	mov	r1, r3
 8000df6:	4806      	ldr	r0, [pc, #24]	; (8000e10 <MX_TIM1_Init+0x98>)
 8000df8:	f002 fcd2 	bl	80037a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000e02:	f7ff fde1 	bl	80009c8 <Error_Handler>
  }

}
 8000e06:	bf00      	nop
 8000e08:	3718      	adds	r7, #24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	200004b0 	.word	0x200004b0
 8000e14:	40010000 	.word	0x40010000

08000e18 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08a      	sub	sp, #40	; 0x28
 8000e1c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e1e:	f107 0320 	add.w	r3, r7, #32
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e28:	1d3b      	adds	r3, r7, #4
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	609a      	str	r2, [r3, #8]
 8000e32:	60da      	str	r2, [r3, #12]
 8000e34:	611a      	str	r2, [r3, #16]
 8000e36:	615a      	str	r2, [r3, #20]
 8000e38:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000e3a:	4b2a      	ldr	r3, [pc, #168]	; (8000ee4 <MX_TIM2_Init+0xcc>)
 8000e3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e40:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 8000e42:	4b28      	ldr	r3, [pc, #160]	; (8000ee4 <MX_TIM2_Init+0xcc>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e48:	4b26      	ldr	r3, [pc, #152]	; (8000ee4 <MX_TIM2_Init+0xcc>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = VGA_TIM2_HSYNC_PERIODE;
 8000e4e:	4b25      	ldr	r3, [pc, #148]	; (8000ee4 <MX_TIM2_Init+0xcc>)
 8000e50:	f640 226b 	movw	r2, #2667	; 0xa6b
 8000e54:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e56:	4b23      	ldr	r3, [pc, #140]	; (8000ee4 <MX_TIM2_Init+0xcc>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e5c:	4b21      	ldr	r3, [pc, #132]	; (8000ee4 <MX_TIM2_Init+0xcc>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e62:	4820      	ldr	r0, [pc, #128]	; (8000ee4 <MX_TIM2_Init+0xcc>)
 8000e64:	f001 fddb 	bl	8002a1e <HAL_TIM_PWM_Init>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000e6e:	f7ff fdab 	bl	80009c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e72:	2300      	movs	r3, #0
 8000e74:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e76:	2300      	movs	r3, #0
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e7a:	f107 0320 	add.w	r3, r7, #32
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4818      	ldr	r0, [pc, #96]	; (8000ee4 <MX_TIM2_Init+0xcc>)
 8000e82:	f002 fc8d 	bl	80037a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000e8c:	f7ff fd9c 	bl	80009c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e90:	2360      	movs	r3, #96	; 0x60
 8000e92:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = VGA_TIM2_HTRIGGER_START - VGA_TIM2_DMA_DELAY;
 8000e94:	f240 13bb 	movw	r3, #443	; 0x1bb
 8000e98:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ea2:	1d3b      	adds	r3, r7, #4
 8000ea4:	2208      	movs	r2, #8
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	480e      	ldr	r0, [pc, #56]	; (8000ee4 <MX_TIM2_Init+0xcc>)
 8000eaa:	f001 ffad 	bl	8002e08 <HAL_TIM_PWM_ConfigChannel>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000eb4:	f7ff fd88 	bl	80009c8 <Error_Handler>
  }
  sConfigOC.Pulse = VGA_TIM2_HSYNC_IMP;
 8000eb8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000ebc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	220c      	movs	r2, #12
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4807      	ldr	r0, [pc, #28]	; (8000ee4 <MX_TIM2_Init+0xcc>)
 8000ec6:	f001 ff9f 	bl	8002e08 <HAL_TIM_PWM_ConfigChannel>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8000ed0:	f7ff fd7a 	bl	80009c8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000ed4:	4803      	ldr	r0, [pc, #12]	; (8000ee4 <MX_TIM2_Init+0xcc>)
 8000ed6:	f000 f87f 	bl	8000fd8 <HAL_TIM_MspPostInit>

}
 8000eda:	bf00      	nop
 8000edc:	3728      	adds	r7, #40	; 0x28
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	200004f0 	.word	0x200004f0

08000ee8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a21      	ldr	r2, [pc, #132]	; (8000f7c <HAL_TIM_Base_MspInit+0x94>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d13c      	bne.n	8000f74 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	4b20      	ldr	r3, [pc, #128]	; (8000f80 <HAL_TIM_Base_MspInit+0x98>)
 8000f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f02:	4a1f      	ldr	r2, [pc, #124]	; (8000f80 <HAL_TIM_Base_MspInit+0x98>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	6453      	str	r3, [r2, #68]	; 0x44
 8000f0a:	4b1d      	ldr	r3, [pc, #116]	; (8000f80 <HAL_TIM_Base_MspInit+0x98>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 8000f16:	4b1b      	ldr	r3, [pc, #108]	; (8000f84 <HAL_TIM_Base_MspInit+0x9c>)
 8000f18:	4a1b      	ldr	r2, [pc, #108]	; (8000f88 <HAL_TIM_Base_MspInit+0xa0>)
 8000f1a:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8000f1c:	4b19      	ldr	r3, [pc, #100]	; (8000f84 <HAL_TIM_Base_MspInit+0x9c>)
 8000f1e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000f22:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f24:	4b17      	ldr	r3, [pc, #92]	; (8000f84 <HAL_TIM_Base_MspInit+0x9c>)
 8000f26:	2240      	movs	r2, #64	; 0x40
 8000f28:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f2a:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <HAL_TIM_Base_MspInit+0x9c>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8000f30:	4b14      	ldr	r3, [pc, #80]	; (8000f84 <HAL_TIM_Base_MspInit+0x9c>)
 8000f32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f36:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f38:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <HAL_TIM_Base_MspInit+0x9c>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f3e:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <HAL_TIM_Base_MspInit+0x9c>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 8000f44:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <HAL_TIM_Base_MspInit+0x9c>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <HAL_TIM_Base_MspInit+0x9c>)
 8000f4c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f50:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f52:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <HAL_TIM_Base_MspInit+0x9c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8000f58:	480a      	ldr	r0, [pc, #40]	; (8000f84 <HAL_TIM_Base_MspInit+0x9c>)
 8000f5a:	f000 fb3b 	bl	80015d4 <HAL_DMA_Init>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <HAL_TIM_Base_MspInit+0x80>
    {
      Error_Handler();
 8000f64:	f7ff fd30 	bl	80009c8 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4a06      	ldr	r2, [pc, #24]	; (8000f84 <HAL_TIM_Base_MspInit+0x9c>)
 8000f6c:	621a      	str	r2, [r3, #32]
 8000f6e:	4a05      	ldr	r2, [pc, #20]	; (8000f84 <HAL_TIM_Base_MspInit+0x9c>)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000f74:	bf00      	nop
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	40010000 	.word	0x40010000
 8000f80:	40023800 	.word	0x40023800
 8000f84:	20000530 	.word	0x20000530
 8000f88:	40026488 	.word	0x40026488

08000f8c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f9c:	d115      	bne.n	8000fca <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <HAL_TIM_PWM_MspInit+0x48>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	4a0b      	ldr	r2, [pc, #44]	; (8000fd4 <HAL_TIM_PWM_MspInit+0x48>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	6413      	str	r3, [r2, #64]	; 0x40
 8000fae:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <HAL_TIM_PWM_MspInit+0x48>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	201c      	movs	r0, #28
 8000fc0:	f000 fad1 	bl	8001566 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fc4:	201c      	movs	r0, #28
 8000fc6:	f000 faea 	bl	800159e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000fca:	bf00      	nop
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40023800 	.word	0x40023800

08000fd8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 030c 	add.w	r3, r7, #12
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ff8:	d11e      	bne.n	8001038 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60bb      	str	r3, [r7, #8]
 8000ffe:	4b10      	ldr	r3, [pc, #64]	; (8001040 <HAL_TIM_MspPostInit+0x68>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a0f      	ldr	r2, [pc, #60]	; (8001040 <HAL_TIM_MspPostInit+0x68>)
 8001004:	f043 0302 	orr.w	r3, r3, #2
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b0d      	ldr	r3, [pc, #52]	; (8001040 <HAL_TIM_MspPostInit+0x68>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = VGA_HSYNC_Pin;
 8001016:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800101a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101c:	2302      	movs	r3, #2
 800101e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001024:	2303      	movs	r3, #3
 8001026:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001028:	2301      	movs	r3, #1
 800102a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VGA_HSYNC_GPIO_Port, &GPIO_InitStruct);
 800102c:	f107 030c 	add.w	r3, r7, #12
 8001030:	4619      	mov	r1, r3
 8001032:	4804      	ldr	r0, [pc, #16]	; (8001044 <HAL_TIM_MspPostInit+0x6c>)
 8001034:	f000 fe60 	bl	8001cf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001038:	bf00      	nop
 800103a:	3720      	adds	r7, #32
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40023800 	.word	0x40023800
 8001044:	40020400 	.word	0x40020400

08001048 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800104c:	4b11      	ldr	r3, [pc, #68]	; (8001094 <MX_USART2_UART_Init+0x4c>)
 800104e:	4a12      	ldr	r2, [pc, #72]	; (8001098 <MX_USART2_UART_Init+0x50>)
 8001050:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001052:	4b10      	ldr	r3, [pc, #64]	; (8001094 <MX_USART2_UART_Init+0x4c>)
 8001054:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001058:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800105a:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <MX_USART2_UART_Init+0x4c>)
 800105c:	2200      	movs	r2, #0
 800105e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001060:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <MX_USART2_UART_Init+0x4c>)
 8001062:	2200      	movs	r2, #0
 8001064:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001066:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <MX_USART2_UART_Init+0x4c>)
 8001068:	2200      	movs	r2, #0
 800106a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800106c:	4b09      	ldr	r3, [pc, #36]	; (8001094 <MX_USART2_UART_Init+0x4c>)
 800106e:	220c      	movs	r2, #12
 8001070:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001072:	4b08      	ldr	r3, [pc, #32]	; (8001094 <MX_USART2_UART_Init+0x4c>)
 8001074:	2200      	movs	r2, #0
 8001076:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <MX_USART2_UART_Init+0x4c>)
 800107a:	2200      	movs	r2, #0
 800107c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800107e:	4805      	ldr	r0, [pc, #20]	; (8001094 <MX_USART2_UART_Init+0x4c>)
 8001080:	f002 fc1e 	bl	80038c0 <HAL_UART_Init>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800108a:	f7ff fc9d 	bl	80009c8 <Error_Handler>
  }

}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000590 	.word	0x20000590
 8001098:	40004400 	.word	0x40004400

0800109c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	; 0x28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a1d      	ldr	r2, [pc, #116]	; (8001130 <HAL_UART_MspInit+0x94>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d133      	bne.n	8001126 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	4b1c      	ldr	r3, [pc, #112]	; (8001134 <HAL_UART_MspInit+0x98>)
 80010c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c6:	4a1b      	ldr	r2, [pc, #108]	; (8001134 <HAL_UART_MspInit+0x98>)
 80010c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010cc:	6413      	str	r3, [r2, #64]	; 0x40
 80010ce:	4b19      	ldr	r3, [pc, #100]	; (8001134 <HAL_UART_MspInit+0x98>)
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b15      	ldr	r3, [pc, #84]	; (8001134 <HAL_UART_MspInit+0x98>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a14      	ldr	r2, [pc, #80]	; (8001134 <HAL_UART_MspInit+0x98>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b12      	ldr	r3, [pc, #72]	; (8001134 <HAL_UART_MspInit+0x98>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010f6:	230c      	movs	r3, #12
 80010f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fa:	2302      	movs	r3, #2
 80010fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001102:	2303      	movs	r3, #3
 8001104:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001106:	2307      	movs	r3, #7
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	4619      	mov	r1, r3
 8001110:	4809      	ldr	r0, [pc, #36]	; (8001138 <HAL_UART_MspInit+0x9c>)
 8001112:	f000 fdf1 	bl	8001cf8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001116:	2200      	movs	r2, #0
 8001118:	2100      	movs	r1, #0
 800111a:	2026      	movs	r0, #38	; 0x26
 800111c:	f000 fa23 	bl	8001566 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001120:	2026      	movs	r0, #38	; 0x26
 8001122:	f000 fa3c 	bl	800159e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001126:	bf00      	nop
 8001128:	3728      	adds	r7, #40	; 0x28
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40004400 	.word	0x40004400
 8001134:	40023800 	.word	0x40023800
 8001138:	40020000 	.word	0x40020000

0800113c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800113c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001174 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001140:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001142:	e003      	b.n	800114c <LoopCopyDataInit>

08001144 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001144:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001146:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001148:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800114a:	3104      	adds	r1, #4

0800114c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800114c:	480b      	ldr	r0, [pc, #44]	; (800117c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800114e:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001150:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001152:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001154:	d3f6      	bcc.n	8001144 <CopyDataInit>
  ldr  r2, =_sbss
 8001156:	4a0b      	ldr	r2, [pc, #44]	; (8001184 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001158:	e002      	b.n	8001160 <LoopFillZerobss>

0800115a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800115a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800115c:	f842 3b04 	str.w	r3, [r2], #4

08001160 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001160:	4b09      	ldr	r3, [pc, #36]	; (8001188 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001162:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001164:	d3f9      	bcc.n	800115a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001166:	f7ff fdf1 	bl	8000d4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800116a:	f003 fc43 	bl	80049f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800116e:	f7ff fb51 	bl	8000814 <main>
  bx  lr    
 8001172:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001174:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001178:	08005ac0 	.word	0x08005ac0
  ldr  r0, =_sdata
 800117c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001180:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001184:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001188:	200132e0 	.word	0x200132e0

0800118c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800118c:	e7fe      	b.n	800118c <ADC_IRQHandler>
	...

08001190 <UB_VGA_Screen_Init>:
// @return
//
// @retval
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  VGA.hsync_cnt = 0;
 8001194:	4b1f      	ldr	r3, [pc, #124]	; (8001214 <UB_VGA_Screen_Init+0x84>)
 8001196:	2200      	movs	r2, #0
 8001198:	801a      	strh	r2, [r3, #0]
  VGA.start_adr = 0;
 800119a:	4b1e      	ldr	r3, [pc, #120]	; (8001214 <UB_VGA_Screen_Init+0x84>)
 800119c:	2200      	movs	r2, #0
 800119e:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg = 0;
 80011a0:	4b1c      	ldr	r3, [pc, #112]	; (8001214 <UB_VGA_Screen_Init+0x84>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	609a      	str	r2, [r3, #8]

  GPIOB->BSRR = VGA_VSYNC_Pin;
 80011a6:	4b1c      	ldr	r3, [pc, #112]	; (8001218 <UB_VGA_Screen_Init+0x88>)
 80011a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011ac:	619a      	str	r2, [r3, #24]

  // TIM2
  HAL_TIM_Base_Start(&htim2);
 80011ae:	481b      	ldr	r0, [pc, #108]	; (800121c <UB_VGA_Screen_Init+0x8c>)
 80011b0:	f001 fc11 	bl	80029d6 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80011b4:	210c      	movs	r1, #12
 80011b6:	4819      	ldr	r0, [pc, #100]	; (800121c <UB_VGA_Screen_Init+0x8c>)
 80011b8:	f001 fc5c 	bl	8002a74 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 80011bc:	2108      	movs	r1, #8
 80011be:	4817      	ldr	r0, [pc, #92]	; (800121c <UB_VGA_Screen_Init+0x8c>)
 80011c0:	f001 fc96 	bl	8002af0 <HAL_TIM_PWM_Start_IT>

  // TIM1
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 80011c4:	4b16      	ldr	r3, [pc, #88]	; (8001220 <UB_VGA_Screen_Init+0x90>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	68da      	ldr	r2, [r3, #12]
 80011ca:	4b15      	ldr	r3, [pc, #84]	; (8001220 <UB_VGA_Screen_Init+0x90>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80011d2:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 80011d4:	4b12      	ldr	r3, [pc, #72]	; (8001220 <UB_VGA_Screen_Init+0x90>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	4b11      	ldr	r3, [pc, #68]	; (8001220 <UB_VGA_Screen_Init+0x90>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f042 0201 	orr.w	r2, r2, #1
 80011e2:	601a      	str	r2, [r3, #0]
  HAL_DMA_Start_IT(&hdma_tim1_up, (uint32_t)&VGA_RAM1[0], VGA_GPIOE_ODR_ADDRESS, VGA_DISPLAY_X + 1);
 80011e4:	490f      	ldr	r1, [pc, #60]	; (8001224 <UB_VGA_Screen_Init+0x94>)
 80011e6:	f240 1341 	movw	r3, #321	; 0x141
 80011ea:	4a0f      	ldr	r2, [pc, #60]	; (8001228 <UB_VGA_Screen_Init+0x98>)
 80011ec:	480f      	ldr	r0, [pc, #60]	; (800122c <UB_VGA_Screen_Init+0x9c>)
 80011ee:	f000 fa9f 	bl	8001730 <HAL_DMA_Start_IT>

  HAL_DMA_Init(&hdma_tim1_up);
 80011f2:	480e      	ldr	r0, [pc, #56]	; (800122c <UB_VGA_Screen_Init+0x9c>)
 80011f4:	f000 f9ee 	bl	80015d4 <HAL_DMA_Init>
  __HAL_DMA_ENABLE_IT(&hdma_tim1_up, DMA_IT_TC);
 80011f8:	4b0c      	ldr	r3, [pc, #48]	; (800122c <UB_VGA_Screen_Init+0x9c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	4b0b      	ldr	r3, [pc, #44]	; (800122c <UB_VGA_Screen_Init+0x9c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f042 0210 	orr.w	r2, r2, #16
 8001206:	601a      	str	r2, [r3, #0]

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg = DMA2_Stream5->CR;
 8001208:	4b09      	ldr	r3, [pc, #36]	; (8001230 <UB_VGA_Screen_Init+0xa0>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a01      	ldr	r2, [pc, #4]	; (8001214 <UB_VGA_Screen_Init+0x84>)
 800120e:	6093      	str	r3, [r2, #8]
}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}
 8001214:	200132c0 	.word	0x200132c0
 8001218:	40020400 	.word	0x40020400
 800121c:	200004f0 	.word	0x200004f0
 8001220:	200004b0 	.word	0x200004b0
 8001224:	200005d0 	.word	0x200005d0
 8001228:	40021015 	.word	0x40021015
 800122c:	20000530 	.word	0x20000530
 8001230:	40026488 	.word	0x40026488

08001234 <UB_VGA_FillScreen>:
// @return
//
// @retval
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 800123e:	2300      	movs	r3, #0
 8001240:	81bb      	strh	r3, [r7, #12]
 8001242:	e012      	b.n	800126a <UB_VGA_FillScreen+0x36>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 8001244:	2300      	movs	r3, #0
 8001246:	81fb      	strh	r3, [r7, #14]
 8001248:	e008      	b.n	800125c <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp, yp, color);
 800124a:	79fa      	ldrb	r2, [r7, #7]
 800124c:	89b9      	ldrh	r1, [r7, #12]
 800124e:	89fb      	ldrh	r3, [r7, #14]
 8001250:	4618      	mov	r0, r3
 8001252:	f000 f813 	bl	800127c <UB_VGA_SetPixel>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 8001256:	89fb      	ldrh	r3, [r7, #14]
 8001258:	3301      	adds	r3, #1
 800125a:	81fb      	strh	r3, [r7, #14]
 800125c:	89fb      	ldrh	r3, [r7, #14]
 800125e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001262:	d3f2      	bcc.n	800124a <UB_VGA_FillScreen+0x16>
  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 8001264:	89bb      	ldrh	r3, [r7, #12]
 8001266:	3301      	adds	r3, #1
 8001268:	81bb      	strh	r3, [r7, #12]
 800126a:	89bb      	ldrh	r3, [r7, #12]
 800126c:	2bef      	cmp	r3, #239	; 0xef
 800126e:	d9e9      	bls.n	8001244 <UB_VGA_FillScreen+0x10>
    }
  }
}
 8001270:	bf00      	nop
 8001272:	bf00      	nop
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
	...

0800127c <UB_VGA_SetPixel>:
// @return
//
// @retval
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	80fb      	strh	r3, [r7, #6]
 8001286:	460b      	mov	r3, r1
 8001288:	80bb      	strh	r3, [r7, #4]
 800128a:	4613      	mov	r3, r2
 800128c:	70fb      	strb	r3, [r7, #3]
  if(xp >= VGA_DISPLAY_X)
 800128e:	88fb      	ldrh	r3, [r7, #6]
 8001290:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001294:	d301      	bcc.n	800129a <UB_VGA_SetPixel+0x1e>
    xp = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	80fb      	strh	r3, [r7, #6]
  if(yp >= VGA_DISPLAY_Y)
 800129a:	88bb      	ldrh	r3, [r7, #4]
 800129c:	2bef      	cmp	r3, #239	; 0xef
 800129e:	d901      	bls.n	80012a4 <UB_VGA_SetPixel+0x28>
    yp = 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp * (VGA_DISPLAY_X + 1)) + xp] = color;
 80012a4:	88ba      	ldrh	r2, [r7, #4]
 80012a6:	4613      	mov	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4413      	add	r3, r2
 80012ac:	019b      	lsls	r3, r3, #6
 80012ae:	441a      	add	r2, r3
 80012b0:	88fb      	ldrh	r3, [r7, #6]
 80012b2:	4413      	add	r3, r2
 80012b4:	4904      	ldr	r1, [pc, #16]	; (80012c8 <UB_VGA_SetPixel+0x4c>)
 80012b6:	78fa      	ldrb	r2, [r7, #3]
 80012b8:	54ca      	strb	r2, [r1, r3]
}
 80012ba:	bf00      	nop
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	200005d0 	.word	0x200005d0

080012cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012d0:	4b0e      	ldr	r3, [pc, #56]	; (800130c <HAL_Init+0x40>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a0d      	ldr	r2, [pc, #52]	; (800130c <HAL_Init+0x40>)
 80012d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012dc:	4b0b      	ldr	r3, [pc, #44]	; (800130c <HAL_Init+0x40>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a0a      	ldr	r2, [pc, #40]	; (800130c <HAL_Init+0x40>)
 80012e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012e8:	4b08      	ldr	r3, [pc, #32]	; (800130c <HAL_Init+0x40>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a07      	ldr	r2, [pc, #28]	; (800130c <HAL_Init+0x40>)
 80012ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f4:	2003      	movs	r0, #3
 80012f6:	f000 f92b 	bl	8001550 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012fa:	2000      	movs	r0, #0
 80012fc:	f000 f808 	bl	8001310 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001300:	f7ff fb6a 	bl	80009d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40023c00 	.word	0x40023c00

08001310 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001318:	4b12      	ldr	r3, [pc, #72]	; (8001364 <HAL_InitTick+0x54>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4b12      	ldr	r3, [pc, #72]	; (8001368 <HAL_InitTick+0x58>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	4619      	mov	r1, r3
 8001322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001326:	fbb3 f3f1 	udiv	r3, r3, r1
 800132a:	fbb2 f3f3 	udiv	r3, r2, r3
 800132e:	4618      	mov	r0, r3
 8001330:	f000 f943 	bl	80015ba <HAL_SYSTICK_Config>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e00e      	b.n	800135c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2b0f      	cmp	r3, #15
 8001342:	d80a      	bhi.n	800135a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001344:	2200      	movs	r2, #0
 8001346:	6879      	ldr	r1, [r7, #4]
 8001348:	f04f 30ff 	mov.w	r0, #4294967295
 800134c:	f000 f90b 	bl	8001566 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001350:	4a06      	ldr	r2, [pc, #24]	; (800136c <HAL_InitTick+0x5c>)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001356:	2300      	movs	r3, #0
 8001358:	e000      	b.n	800135c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
}
 800135c:	4618      	mov	r0, r3
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000000 	.word	0x20000000
 8001368:	20000008 	.word	0x20000008
 800136c:	20000004 	.word	0x20000004

08001370 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <HAL_IncTick+0x20>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	461a      	mov	r2, r3
 800137a:	4b06      	ldr	r3, [pc, #24]	; (8001394 <HAL_IncTick+0x24>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4413      	add	r3, r2
 8001380:	4a04      	ldr	r2, [pc, #16]	; (8001394 <HAL_IncTick+0x24>)
 8001382:	6013      	str	r3, [r2, #0]
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	20000008 	.word	0x20000008
 8001394:	200132cc 	.word	0x200132cc

08001398 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  return uwTick;
 800139c:	4b03      	ldr	r3, [pc, #12]	; (80013ac <HAL_GetTick+0x14>)
 800139e:	681b      	ldr	r3, [r3, #0]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	200132cc 	.word	0x200132cc

080013b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f003 0307 	and.w	r3, r3, #7
 80013be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013c0:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <__NVIC_SetPriorityGrouping+0x44>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013c6:	68ba      	ldr	r2, [r7, #8]
 80013c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013cc:	4013      	ands	r3, r2
 80013ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013e2:	4a04      	ldr	r2, [pc, #16]	; (80013f4 <__NVIC_SetPriorityGrouping+0x44>)
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	60d3      	str	r3, [r2, #12]
}
 80013e8:	bf00      	nop
 80013ea:	3714      	adds	r7, #20
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013fc:	4b04      	ldr	r3, [pc, #16]	; (8001410 <__NVIC_GetPriorityGrouping+0x18>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	0a1b      	lsrs	r3, r3, #8
 8001402:	f003 0307 	and.w	r3, r3, #7
}
 8001406:	4618      	mov	r0, r3
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800141e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001422:	2b00      	cmp	r3, #0
 8001424:	db0b      	blt.n	800143e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	f003 021f 	and.w	r2, r3, #31
 800142c:	4907      	ldr	r1, [pc, #28]	; (800144c <__NVIC_EnableIRQ+0x38>)
 800142e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001432:	095b      	lsrs	r3, r3, #5
 8001434:	2001      	movs	r0, #1
 8001436:	fa00 f202 	lsl.w	r2, r0, r2
 800143a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	e000e100 	.word	0xe000e100

08001450 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	6039      	str	r1, [r7, #0]
 800145a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800145c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001460:	2b00      	cmp	r3, #0
 8001462:	db0a      	blt.n	800147a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	b2da      	uxtb	r2, r3
 8001468:	490c      	ldr	r1, [pc, #48]	; (800149c <__NVIC_SetPriority+0x4c>)
 800146a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146e:	0112      	lsls	r2, r2, #4
 8001470:	b2d2      	uxtb	r2, r2
 8001472:	440b      	add	r3, r1
 8001474:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001478:	e00a      	b.n	8001490 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	b2da      	uxtb	r2, r3
 800147e:	4908      	ldr	r1, [pc, #32]	; (80014a0 <__NVIC_SetPriority+0x50>)
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	f003 030f 	and.w	r3, r3, #15
 8001486:	3b04      	subs	r3, #4
 8001488:	0112      	lsls	r2, r2, #4
 800148a:	b2d2      	uxtb	r2, r2
 800148c:	440b      	add	r3, r1
 800148e:	761a      	strb	r2, [r3, #24]
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	e000e100 	.word	0xe000e100
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b089      	sub	sp, #36	; 0x24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	f1c3 0307 	rsb	r3, r3, #7
 80014be:	2b04      	cmp	r3, #4
 80014c0:	bf28      	it	cs
 80014c2:	2304      	movcs	r3, #4
 80014c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3304      	adds	r3, #4
 80014ca:	2b06      	cmp	r3, #6
 80014cc:	d902      	bls.n	80014d4 <NVIC_EncodePriority+0x30>
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	3b03      	subs	r3, #3
 80014d2:	e000      	b.n	80014d6 <NVIC_EncodePriority+0x32>
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d8:	f04f 32ff 	mov.w	r2, #4294967295
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43da      	mvns	r2, r3
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	401a      	ands	r2, r3
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014ec:	f04f 31ff 	mov.w	r1, #4294967295
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	fa01 f303 	lsl.w	r3, r1, r3
 80014f6:	43d9      	mvns	r1, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014fc:	4313      	orrs	r3, r2
         );
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3724      	adds	r7, #36	; 0x24
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
	...

0800150c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3b01      	subs	r3, #1
 8001518:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800151c:	d301      	bcc.n	8001522 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800151e:	2301      	movs	r3, #1
 8001520:	e00f      	b.n	8001542 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001522:	4a0a      	ldr	r2, [pc, #40]	; (800154c <SysTick_Config+0x40>)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3b01      	subs	r3, #1
 8001528:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800152a:	210f      	movs	r1, #15
 800152c:	f04f 30ff 	mov.w	r0, #4294967295
 8001530:	f7ff ff8e 	bl	8001450 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001534:	4b05      	ldr	r3, [pc, #20]	; (800154c <SysTick_Config+0x40>)
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800153a:	4b04      	ldr	r3, [pc, #16]	; (800154c <SysTick_Config+0x40>)
 800153c:	2207      	movs	r2, #7
 800153e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	e000e010 	.word	0xe000e010

08001550 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f7ff ff29 	bl	80013b0 <__NVIC_SetPriorityGrouping>
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001566:	b580      	push	{r7, lr}
 8001568:	b086      	sub	sp, #24
 800156a:	af00      	add	r7, sp, #0
 800156c:	4603      	mov	r3, r0
 800156e:	60b9      	str	r1, [r7, #8]
 8001570:	607a      	str	r2, [r7, #4]
 8001572:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001578:	f7ff ff3e 	bl	80013f8 <__NVIC_GetPriorityGrouping>
 800157c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	68b9      	ldr	r1, [r7, #8]
 8001582:	6978      	ldr	r0, [r7, #20]
 8001584:	f7ff ff8e 	bl	80014a4 <NVIC_EncodePriority>
 8001588:	4602      	mov	r2, r0
 800158a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800158e:	4611      	mov	r1, r2
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff ff5d 	bl	8001450 <__NVIC_SetPriority>
}
 8001596:	bf00      	nop
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b082      	sub	sp, #8
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	4603      	mov	r3, r0
 80015a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff ff31 	bl	8001414 <__NVIC_EnableIRQ>
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff ffa2 	bl	800150c <SysTick_Config>
 80015c8:	4603      	mov	r3, r0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
	...

080015d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80015e0:	f7ff feda 	bl	8001398 <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d101      	bne.n	80015f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e099      	b.n	8001724 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2202      	movs	r2, #2
 80015fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f022 0201 	bic.w	r2, r2, #1
 800160e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001610:	e00f      	b.n	8001632 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001612:	f7ff fec1 	bl	8001398 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b05      	cmp	r3, #5
 800161e:	d908      	bls.n	8001632 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2220      	movs	r2, #32
 8001624:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2203      	movs	r2, #3
 800162a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e078      	b.n	8001724 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1e8      	bne.n	8001612 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001648:	697a      	ldr	r2, [r7, #20]
 800164a:	4b38      	ldr	r3, [pc, #224]	; (800172c <HAL_DMA_Init+0x158>)
 800164c:	4013      	ands	r3, r2
 800164e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685a      	ldr	r2, [r3, #4]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800165e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	691b      	ldr	r3, [r3, #16]
 8001664:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800166a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001676:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a1b      	ldr	r3, [r3, #32]
 800167c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800167e:	697a      	ldr	r2, [r7, #20]
 8001680:	4313      	orrs	r3, r2
 8001682:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001688:	2b04      	cmp	r3, #4
 800168a:	d107      	bne.n	800169c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001694:	4313      	orrs	r3, r2
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	4313      	orrs	r3, r2
 800169a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	697a      	ldr	r2, [r7, #20]
 80016a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	f023 0307 	bic.w	r3, r3, #7
 80016b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b8:	697a      	ldr	r2, [r7, #20]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c2:	2b04      	cmp	r3, #4
 80016c4:	d117      	bne.n	80016f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ca:	697a      	ldr	r2, [r7, #20]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d00e      	beq.n	80016f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f000 fa91 	bl	8001c00 <DMA_CheckFifoParam>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d008      	beq.n	80016f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2240      	movs	r2, #64	; 0x40
 80016e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2201      	movs	r2, #1
 80016ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80016f2:	2301      	movs	r3, #1
 80016f4:	e016      	b.n	8001724 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	697a      	ldr	r2, [r7, #20]
 80016fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f000 fa48 	bl	8001b94 <DMA_CalcBaseAndBitshift>
 8001704:	4603      	mov	r3, r0
 8001706:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800170c:	223f      	movs	r2, #63	; 0x3f
 800170e:	409a      	lsls	r2, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2201      	movs	r2, #1
 800171e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001722:	2300      	movs	r3, #0
}
 8001724:	4618      	mov	r0, r3
 8001726:	3718      	adds	r7, #24
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	f010803f 	.word	0xf010803f

08001730 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
 800173c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800173e:	2300      	movs	r3, #0
 8001740:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001746:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800174e:	2b01      	cmp	r3, #1
 8001750:	d101      	bne.n	8001756 <HAL_DMA_Start_IT+0x26>
 8001752:	2302      	movs	r3, #2
 8001754:	e040      	b.n	80017d8 <HAL_DMA_Start_IT+0xa8>
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2201      	movs	r2, #1
 800175a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b01      	cmp	r3, #1
 8001768:	d12f      	bne.n	80017ca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2202      	movs	r2, #2
 800176e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2200      	movs	r2, #0
 8001776:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	68b9      	ldr	r1, [r7, #8]
 800177e:	68f8      	ldr	r0, [r7, #12]
 8001780:	f000 f9da 	bl	8001b38 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001788:	223f      	movs	r2, #63	; 0x3f
 800178a:	409a      	lsls	r2, r3
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f042 0216 	orr.w	r2, r2, #22
 800179e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d007      	beq.n	80017b8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f042 0208 	orr.w	r2, r2, #8
 80017b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f042 0201 	orr.w	r2, r2, #1
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	e005      	b.n	80017d6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80017d2:	2302      	movs	r3, #2
 80017d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80017d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3718      	adds	r7, #24
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d004      	beq.n	80017fe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2280      	movs	r2, #128	; 0x80
 80017f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e00c      	b.n	8001818 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2205      	movs	r2, #5
 8001802:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f022 0201 	bic.w	r2, r2, #1
 8001814:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800182c:	2300      	movs	r3, #0
 800182e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001830:	4b8e      	ldr	r3, [pc, #568]	; (8001a6c <HAL_DMA_IRQHandler+0x248>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a8e      	ldr	r2, [pc, #568]	; (8001a70 <HAL_DMA_IRQHandler+0x24c>)
 8001836:	fba2 2303 	umull	r2, r3, r2, r3
 800183a:	0a9b      	lsrs	r3, r3, #10
 800183c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001842:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800184e:	2208      	movs	r2, #8
 8001850:	409a      	lsls	r2, r3
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	4013      	ands	r3, r2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d01a      	beq.n	8001890 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0304 	and.w	r3, r3, #4
 8001864:	2b00      	cmp	r3, #0
 8001866:	d013      	beq.n	8001890 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f022 0204 	bic.w	r2, r2, #4
 8001876:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800187c:	2208      	movs	r2, #8
 800187e:	409a      	lsls	r2, r3
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001888:	f043 0201 	orr.w	r2, r3, #1
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001894:	2201      	movs	r2, #1
 8001896:	409a      	lsls	r2, r3
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	4013      	ands	r3, r2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d012      	beq.n	80018c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	695b      	ldr	r3, [r3, #20]
 80018a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d00b      	beq.n	80018c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b2:	2201      	movs	r2, #1
 80018b4:	409a      	lsls	r2, r3
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018be:	f043 0202 	orr.w	r2, r3, #2
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ca:	2204      	movs	r2, #4
 80018cc:	409a      	lsls	r2, r3
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	4013      	ands	r3, r2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d012      	beq.n	80018fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d00b      	beq.n	80018fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e8:	2204      	movs	r2, #4
 80018ea:	409a      	lsls	r2, r3
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f4:	f043 0204 	orr.w	r2, r3, #4
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001900:	2210      	movs	r2, #16
 8001902:	409a      	lsls	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4013      	ands	r3, r2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d043      	beq.n	8001994 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0308 	and.w	r3, r3, #8
 8001916:	2b00      	cmp	r3, #0
 8001918:	d03c      	beq.n	8001994 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800191e:	2210      	movs	r2, #16
 8001920:	409a      	lsls	r2, r3
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d018      	beq.n	8001966 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d108      	bne.n	8001954 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	2b00      	cmp	r3, #0
 8001948:	d024      	beq.n	8001994 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	4798      	blx	r3
 8001952:	e01f      	b.n	8001994 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001958:	2b00      	cmp	r3, #0
 800195a:	d01b      	beq.n	8001994 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	4798      	blx	r3
 8001964:	e016      	b.n	8001994 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001970:	2b00      	cmp	r3, #0
 8001972:	d107      	bne.n	8001984 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f022 0208 	bic.w	r2, r2, #8
 8001982:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001988:	2b00      	cmp	r3, #0
 800198a:	d003      	beq.n	8001994 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001998:	2220      	movs	r2, #32
 800199a:	409a      	lsls	r2, r3
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	4013      	ands	r3, r2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f000 808f 	beq.w	8001ac4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0310 	and.w	r3, r3, #16
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f000 8087 	beq.w	8001ac4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ba:	2220      	movs	r2, #32
 80019bc:	409a      	lsls	r2, r3
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2b05      	cmp	r3, #5
 80019cc:	d136      	bne.n	8001a3c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f022 0216 	bic.w	r2, r2, #22
 80019dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	695a      	ldr	r2, [r3, #20]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d103      	bne.n	80019fe <HAL_DMA_IRQHandler+0x1da>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d007      	beq.n	8001a0e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f022 0208 	bic.w	r2, r2, #8
 8001a0c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a12:	223f      	movs	r2, #63	; 0x3f
 8001a14:	409a      	lsls	r2, r3
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2201      	movs	r2, #1
 8001a26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d07e      	beq.n	8001b30 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	4798      	blx	r3
        }
        return;
 8001a3a:	e079      	b.n	8001b30 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d01d      	beq.n	8001a86 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d10d      	bne.n	8001a74 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d031      	beq.n	8001ac4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	4798      	blx	r3
 8001a68:	e02c      	b.n	8001ac4 <HAL_DMA_IRQHandler+0x2a0>
 8001a6a:	bf00      	nop
 8001a6c:	20000000 	.word	0x20000000
 8001a70:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d023      	beq.n	8001ac4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	4798      	blx	r3
 8001a84:	e01e      	b.n	8001ac4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d10f      	bne.n	8001ab4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f022 0210 	bic.w	r2, r2, #16
 8001aa2:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d003      	beq.n	8001ac4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d032      	beq.n	8001b32 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d022      	beq.n	8001b1e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2205      	movs	r2, #5
 8001adc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f022 0201 	bic.w	r2, r2, #1
 8001aee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	3301      	adds	r3, #1
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	697a      	ldr	r2, [r7, #20]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d307      	bcc.n	8001b0c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1f2      	bne.n	8001af0 <HAL_DMA_IRQHandler+0x2cc>
 8001b0a:	e000      	b.n	8001b0e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001b0c:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d005      	beq.n	8001b32 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	4798      	blx	r3
 8001b2e:	e000      	b.n	8001b32 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001b30:	bf00      	nop
    }
  }
}
 8001b32:	3718      	adds	r7, #24
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
 8001b44:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b54:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	683a      	ldr	r2, [r7, #0]
 8001b5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	2b40      	cmp	r3, #64	; 0x40
 8001b64:	d108      	bne.n	8001b78 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	68ba      	ldr	r2, [r7, #8]
 8001b74:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001b76:	e007      	b.n	8001b88 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	68ba      	ldr	r2, [r7, #8]
 8001b7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	60da      	str	r2, [r3, #12]
}
 8001b88:	bf00      	nop
 8001b8a:	3714      	adds	r7, #20
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	3b10      	subs	r3, #16
 8001ba4:	4a14      	ldr	r2, [pc, #80]	; (8001bf8 <DMA_CalcBaseAndBitshift+0x64>)
 8001ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8001baa:	091b      	lsrs	r3, r3, #4
 8001bac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001bae:	4a13      	ldr	r2, [pc, #76]	; (8001bfc <DMA_CalcBaseAndBitshift+0x68>)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2b03      	cmp	r3, #3
 8001bc0:	d909      	bls.n	8001bd6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001bca:	f023 0303 	bic.w	r3, r3, #3
 8001bce:	1d1a      	adds	r2, r3, #4
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	659a      	str	r2, [r3, #88]	; 0x58
 8001bd4:	e007      	b.n	8001be6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001bde:	f023 0303 	bic.w	r3, r3, #3
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	aaaaaaab 	.word	0xaaaaaaab
 8001bfc:	08005a10 	.word	0x08005a10

08001c00 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c10:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d11f      	bne.n	8001c5a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	2b03      	cmp	r3, #3
 8001c1e:	d856      	bhi.n	8001cce <DMA_CheckFifoParam+0xce>
 8001c20:	a201      	add	r2, pc, #4	; (adr r2, 8001c28 <DMA_CheckFifoParam+0x28>)
 8001c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c26:	bf00      	nop
 8001c28:	08001c39 	.word	0x08001c39
 8001c2c:	08001c4b 	.word	0x08001c4b
 8001c30:	08001c39 	.word	0x08001c39
 8001c34:	08001ccf 	.word	0x08001ccf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d046      	beq.n	8001cd2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c48:	e043      	b.n	8001cd2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c4e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c52:	d140      	bne.n	8001cd6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c58:	e03d      	b.n	8001cd6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c62:	d121      	bne.n	8001ca8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	2b03      	cmp	r3, #3
 8001c68:	d837      	bhi.n	8001cda <DMA_CheckFifoParam+0xda>
 8001c6a:	a201      	add	r2, pc, #4	; (adr r2, 8001c70 <DMA_CheckFifoParam+0x70>)
 8001c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c70:	08001c81 	.word	0x08001c81
 8001c74:	08001c87 	.word	0x08001c87
 8001c78:	08001c81 	.word	0x08001c81
 8001c7c:	08001c99 	.word	0x08001c99
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	73fb      	strb	r3, [r7, #15]
      break;
 8001c84:	e030      	b.n	8001ce8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d025      	beq.n	8001cde <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c96:	e022      	b.n	8001cde <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ca0:	d11f      	bne.n	8001ce2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001ca6:	e01c      	b.n	8001ce2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d903      	bls.n	8001cb6 <DMA_CheckFifoParam+0xb6>
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	2b03      	cmp	r3, #3
 8001cb2:	d003      	beq.n	8001cbc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001cb4:	e018      	b.n	8001ce8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	73fb      	strb	r3, [r7, #15]
      break;
 8001cba:	e015      	b.n	8001ce8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d00e      	beq.n	8001ce6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	73fb      	strb	r3, [r7, #15]
      break;
 8001ccc:	e00b      	b.n	8001ce6 <DMA_CheckFifoParam+0xe6>
      break;
 8001cce:	bf00      	nop
 8001cd0:	e00a      	b.n	8001ce8 <DMA_CheckFifoParam+0xe8>
      break;
 8001cd2:	bf00      	nop
 8001cd4:	e008      	b.n	8001ce8 <DMA_CheckFifoParam+0xe8>
      break;
 8001cd6:	bf00      	nop
 8001cd8:	e006      	b.n	8001ce8 <DMA_CheckFifoParam+0xe8>
      break;
 8001cda:	bf00      	nop
 8001cdc:	e004      	b.n	8001ce8 <DMA_CheckFifoParam+0xe8>
      break;
 8001cde:	bf00      	nop
 8001ce0:	e002      	b.n	8001ce8 <DMA_CheckFifoParam+0xe8>
      break;   
 8001ce2:	bf00      	nop
 8001ce4:	e000      	b.n	8001ce8 <DMA_CheckFifoParam+0xe8>
      break;
 8001ce6:	bf00      	nop
    }
  } 
  
  return status; 
 8001ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3714      	adds	r7, #20
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop

08001cf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b089      	sub	sp, #36	; 0x24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d02:	2300      	movs	r3, #0
 8001d04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61fb      	str	r3, [r7, #28]
 8001d12:	e16b      	b.n	8001fec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d14:	2201      	movs	r2, #1
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	697a      	ldr	r2, [r7, #20]
 8001d24:	4013      	ands	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	f040 815a 	bne.w	8001fe6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d00b      	beq.n	8001d52 <HAL_GPIO_Init+0x5a>
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d007      	beq.n	8001d52 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d46:	2b11      	cmp	r3, #17
 8001d48:	d003      	beq.n	8001d52 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	2b12      	cmp	r3, #18
 8001d50:	d130      	bne.n	8001db4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	2203      	movs	r2, #3
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43db      	mvns	r3, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4013      	ands	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	68da      	ldr	r2, [r3, #12]
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d88:	2201      	movs	r2, #1
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43db      	mvns	r3, r3
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4013      	ands	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	091b      	lsrs	r3, r3, #4
 8001d9e:	f003 0201 	and.w	r2, r3, #1
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	2203      	movs	r2, #3
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	689a      	ldr	r2, [r3, #8]
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d003      	beq.n	8001df4 <HAL_GPIO_Init+0xfc>
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	2b12      	cmp	r3, #18
 8001df2:	d123      	bne.n	8001e3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	08da      	lsrs	r2, r3, #3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3208      	adds	r2, #8
 8001dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	220f      	movs	r2, #15
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	43db      	mvns	r3, r3
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	4013      	ands	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	691a      	ldr	r2, [r3, #16]
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	f003 0307 	and.w	r3, r3, #7
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	08da      	lsrs	r2, r3, #3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	3208      	adds	r2, #8
 8001e36:	69b9      	ldr	r1, [r7, #24]
 8001e38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	2203      	movs	r2, #3
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4013      	ands	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f003 0203 	and.w	r2, r3, #3
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f000 80b4 	beq.w	8001fe6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	4b60      	ldr	r3, [pc, #384]	; (8002004 <HAL_GPIO_Init+0x30c>)
 8001e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e86:	4a5f      	ldr	r2, [pc, #380]	; (8002004 <HAL_GPIO_Init+0x30c>)
 8001e88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e8e:	4b5d      	ldr	r3, [pc, #372]	; (8002004 <HAL_GPIO_Init+0x30c>)
 8001e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e9a:	4a5b      	ldr	r2, [pc, #364]	; (8002008 <HAL_GPIO_Init+0x310>)
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	089b      	lsrs	r3, r3, #2
 8001ea0:	3302      	adds	r3, #2
 8001ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	f003 0303 	and.w	r3, r3, #3
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	220f      	movs	r2, #15
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a52      	ldr	r2, [pc, #328]	; (800200c <HAL_GPIO_Init+0x314>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d02b      	beq.n	8001f1e <HAL_GPIO_Init+0x226>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a51      	ldr	r2, [pc, #324]	; (8002010 <HAL_GPIO_Init+0x318>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d025      	beq.n	8001f1a <HAL_GPIO_Init+0x222>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a50      	ldr	r2, [pc, #320]	; (8002014 <HAL_GPIO_Init+0x31c>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d01f      	beq.n	8001f16 <HAL_GPIO_Init+0x21e>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a4f      	ldr	r2, [pc, #316]	; (8002018 <HAL_GPIO_Init+0x320>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d019      	beq.n	8001f12 <HAL_GPIO_Init+0x21a>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a4e      	ldr	r2, [pc, #312]	; (800201c <HAL_GPIO_Init+0x324>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d013      	beq.n	8001f0e <HAL_GPIO_Init+0x216>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a4d      	ldr	r2, [pc, #308]	; (8002020 <HAL_GPIO_Init+0x328>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d00d      	beq.n	8001f0a <HAL_GPIO_Init+0x212>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a4c      	ldr	r2, [pc, #304]	; (8002024 <HAL_GPIO_Init+0x32c>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d007      	beq.n	8001f06 <HAL_GPIO_Init+0x20e>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a4b      	ldr	r2, [pc, #300]	; (8002028 <HAL_GPIO_Init+0x330>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d101      	bne.n	8001f02 <HAL_GPIO_Init+0x20a>
 8001efe:	2307      	movs	r3, #7
 8001f00:	e00e      	b.n	8001f20 <HAL_GPIO_Init+0x228>
 8001f02:	2308      	movs	r3, #8
 8001f04:	e00c      	b.n	8001f20 <HAL_GPIO_Init+0x228>
 8001f06:	2306      	movs	r3, #6
 8001f08:	e00a      	b.n	8001f20 <HAL_GPIO_Init+0x228>
 8001f0a:	2305      	movs	r3, #5
 8001f0c:	e008      	b.n	8001f20 <HAL_GPIO_Init+0x228>
 8001f0e:	2304      	movs	r3, #4
 8001f10:	e006      	b.n	8001f20 <HAL_GPIO_Init+0x228>
 8001f12:	2303      	movs	r3, #3
 8001f14:	e004      	b.n	8001f20 <HAL_GPIO_Init+0x228>
 8001f16:	2302      	movs	r3, #2
 8001f18:	e002      	b.n	8001f20 <HAL_GPIO_Init+0x228>
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e000      	b.n	8001f20 <HAL_GPIO_Init+0x228>
 8001f1e:	2300      	movs	r3, #0
 8001f20:	69fa      	ldr	r2, [r7, #28]
 8001f22:	f002 0203 	and.w	r2, r2, #3
 8001f26:	0092      	lsls	r2, r2, #2
 8001f28:	4093      	lsls	r3, r2
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f30:	4935      	ldr	r1, [pc, #212]	; (8002008 <HAL_GPIO_Init+0x310>)
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	089b      	lsrs	r3, r3, #2
 8001f36:	3302      	adds	r3, #2
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f3e:	4b3b      	ldr	r3, [pc, #236]	; (800202c <HAL_GPIO_Init+0x334>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	43db      	mvns	r3, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f62:	4a32      	ldr	r2, [pc, #200]	; (800202c <HAL_GPIO_Init+0x334>)
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f68:	4b30      	ldr	r3, [pc, #192]	; (800202c <HAL_GPIO_Init+0x334>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d003      	beq.n	8001f8c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f8c:	4a27      	ldr	r2, [pc, #156]	; (800202c <HAL_GPIO_Init+0x334>)
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f92:	4b26      	ldr	r3, [pc, #152]	; (800202c <HAL_GPIO_Init+0x334>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fb6:	4a1d      	ldr	r2, [pc, #116]	; (800202c <HAL_GPIO_Init+0x334>)
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fbc:	4b1b      	ldr	r3, [pc, #108]	; (800202c <HAL_GPIO_Init+0x334>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d003      	beq.n	8001fe0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fe0:	4a12      	ldr	r2, [pc, #72]	; (800202c <HAL_GPIO_Init+0x334>)
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	61fb      	str	r3, [r7, #28]
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	2b0f      	cmp	r3, #15
 8001ff0:	f67f ae90 	bls.w	8001d14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ff4:	bf00      	nop
 8001ff6:	bf00      	nop
 8001ff8:	3724      	adds	r7, #36	; 0x24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	40023800 	.word	0x40023800
 8002008:	40013800 	.word	0x40013800
 800200c:	40020000 	.word	0x40020000
 8002010:	40020400 	.word	0x40020400
 8002014:	40020800 	.word	0x40020800
 8002018:	40020c00 	.word	0x40020c00
 800201c:	40021000 	.word	0x40021000
 8002020:	40021400 	.word	0x40021400
 8002024:	40021800 	.word	0x40021800
 8002028:	40021c00 	.word	0x40021c00
 800202c:	40013c00 	.word	0x40013c00

08002030 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	460b      	mov	r3, r1
 800203a:	807b      	strh	r3, [r7, #2]
 800203c:	4613      	mov	r3, r2
 800203e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002040:	787b      	ldrb	r3, [r7, #1]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002046:	887a      	ldrh	r2, [r7, #2]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800204c:	e003      	b.n	8002056 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800204e:	887b      	ldrh	r3, [r7, #2]
 8002050:	041a      	lsls	r2, r3, #16
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	619a      	str	r2, [r3, #24]
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
	...

08002064 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e25e      	b.n	8002534 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	2b00      	cmp	r3, #0
 8002080:	d075      	beq.n	800216e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002082:	4b88      	ldr	r3, [pc, #544]	; (80022a4 <HAL_RCC_OscConfig+0x240>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f003 030c 	and.w	r3, r3, #12
 800208a:	2b04      	cmp	r3, #4
 800208c:	d00c      	beq.n	80020a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800208e:	4b85      	ldr	r3, [pc, #532]	; (80022a4 <HAL_RCC_OscConfig+0x240>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002096:	2b08      	cmp	r3, #8
 8002098:	d112      	bne.n	80020c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800209a:	4b82      	ldr	r3, [pc, #520]	; (80022a4 <HAL_RCC_OscConfig+0x240>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020a6:	d10b      	bne.n	80020c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a8:	4b7e      	ldr	r3, [pc, #504]	; (80022a4 <HAL_RCC_OscConfig+0x240>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d05b      	beq.n	800216c <HAL_RCC_OscConfig+0x108>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d157      	bne.n	800216c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e239      	b.n	8002534 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020c8:	d106      	bne.n	80020d8 <HAL_RCC_OscConfig+0x74>
 80020ca:	4b76      	ldr	r3, [pc, #472]	; (80022a4 <HAL_RCC_OscConfig+0x240>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a75      	ldr	r2, [pc, #468]	; (80022a4 <HAL_RCC_OscConfig+0x240>)
 80020d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020d4:	6013      	str	r3, [r2, #0]
 80020d6:	e01d      	b.n	8002114 <HAL_RCC_OscConfig+0xb0>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020e0:	d10c      	bne.n	80020fc <HAL_RCC_OscConfig+0x98>
 80020e2:	4b70      	ldr	r3, [pc, #448]	; (80022a4 <HAL_RCC_OscConfig+0x240>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a6f      	ldr	r2, [pc, #444]	; (80022a4 <HAL_RCC_OscConfig+0x240>)
 80020e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020ec:	6013      	str	r3, [r2, #0]
 80020ee:	4b6d      	ldr	r3, [pc, #436]	; (80022a4 <HAL_RCC_OscConfig+0x240>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a6c      	ldr	r2, [pc, #432]	; (80022a4 <HAL_RCC_OscConfig+0x240>)
 80020f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f8:	6013      	str	r3, [r2, #0]
 80020fa:	e00b      	b.n	8002114 <HAL_RCC_OscConfig+0xb0>
 80020fc:	4b69      	ldr	r3, [pc, #420]	; (80022a4 <HAL_RCC_OscConfig+0x240>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a68      	ldr	r2, [pc, #416]	; (80022a4 <HAL_RCC_OscConfig+0x240>)
 8002102:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002106:	6013      	str	r3, [r2, #0]
 8002108:	4b66      	ldr	r3, [pc, #408]	; (80022a4 <HAL_RCC_OscConfig+0x240>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a65      	ldr	r2, [pc, #404]	; (80022a4 <HAL_RCC_OscConfig+0x240>)
 800210e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002112:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d013      	beq.n	8002144 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211c:	f7ff f93c 	bl	8001398 <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002124:	f7ff f938 	bl	8001398 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b64      	cmp	r3, #100	; 0x64
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e1fe      	b.n	8002534 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002136:	4b5b      	ldr	r3, [pc, #364]	; (80022a4 <HAL_RCC_OscConfig+0x240>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d0f0      	beq.n	8002124 <HAL_RCC_OscConfig+0xc0>
 8002142:	e014      	b.n	800216e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002144:	f7ff f928 	bl	8001398 <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800214c:	f7ff f924 	bl	8001398 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b64      	cmp	r3, #100	; 0x64
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e1ea      	b.n	8002534 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800215e:	4b51      	ldr	r3, [pc, #324]	; (80022a4 <HAL_RCC_OscConfig+0x240>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1f0      	bne.n	800214c <HAL_RCC_OscConfig+0xe8>
 800216a:	e000      	b.n	800216e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800216c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d063      	beq.n	8002242 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800217a:	4b4a      	ldr	r3, [pc, #296]	; (80022a4 <HAL_RCC_OscConfig+0x240>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 030c 	and.w	r3, r3, #12
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00b      	beq.n	800219e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002186:	4b47      	ldr	r3, [pc, #284]	; (80022a4 <HAL_RCC_OscConfig+0x240>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800218e:	2b08      	cmp	r3, #8
 8002190:	d11c      	bne.n	80021cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002192:	4b44      	ldr	r3, [pc, #272]	; (80022a4 <HAL_RCC_OscConfig+0x240>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d116      	bne.n	80021cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800219e:	4b41      	ldr	r3, [pc, #260]	; (80022a4 <HAL_RCC_OscConfig+0x240>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d005      	beq.n	80021b6 <HAL_RCC_OscConfig+0x152>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d001      	beq.n	80021b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e1be      	b.n	8002534 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b6:	4b3b      	ldr	r3, [pc, #236]	; (80022a4 <HAL_RCC_OscConfig+0x240>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	4937      	ldr	r1, [pc, #220]	; (80022a4 <HAL_RCC_OscConfig+0x240>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ca:	e03a      	b.n	8002242 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d020      	beq.n	8002216 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021d4:	4b34      	ldr	r3, [pc, #208]	; (80022a8 <HAL_RCC_OscConfig+0x244>)
 80021d6:	2201      	movs	r2, #1
 80021d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021da:	f7ff f8dd 	bl	8001398 <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e0:	e008      	b.n	80021f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021e2:	f7ff f8d9 	bl	8001398 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e19f      	b.n	8002534 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021f4:	4b2b      	ldr	r3, [pc, #172]	; (80022a4 <HAL_RCC_OscConfig+0x240>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0f0      	beq.n	80021e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002200:	4b28      	ldr	r3, [pc, #160]	; (80022a4 <HAL_RCC_OscConfig+0x240>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	4925      	ldr	r1, [pc, #148]	; (80022a4 <HAL_RCC_OscConfig+0x240>)
 8002210:	4313      	orrs	r3, r2
 8002212:	600b      	str	r3, [r1, #0]
 8002214:	e015      	b.n	8002242 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002216:	4b24      	ldr	r3, [pc, #144]	; (80022a8 <HAL_RCC_OscConfig+0x244>)
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800221c:	f7ff f8bc 	bl	8001398 <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002224:	f7ff f8b8 	bl	8001398 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e17e      	b.n	8002534 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002236:	4b1b      	ldr	r3, [pc, #108]	; (80022a4 <HAL_RCC_OscConfig+0x240>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1f0      	bne.n	8002224 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0308 	and.w	r3, r3, #8
 800224a:	2b00      	cmp	r3, #0
 800224c:	d036      	beq.n	80022bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d016      	beq.n	8002284 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002256:	4b15      	ldr	r3, [pc, #84]	; (80022ac <HAL_RCC_OscConfig+0x248>)
 8002258:	2201      	movs	r2, #1
 800225a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800225c:	f7ff f89c 	bl	8001398 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002264:	f7ff f898 	bl	8001398 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e15e      	b.n	8002534 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002276:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <HAL_RCC_OscConfig+0x240>)
 8002278:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d0f0      	beq.n	8002264 <HAL_RCC_OscConfig+0x200>
 8002282:	e01b      	b.n	80022bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002284:	4b09      	ldr	r3, [pc, #36]	; (80022ac <HAL_RCC_OscConfig+0x248>)
 8002286:	2200      	movs	r2, #0
 8002288:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800228a:	f7ff f885 	bl	8001398 <HAL_GetTick>
 800228e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002290:	e00e      	b.n	80022b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002292:	f7ff f881 	bl	8001398 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b02      	cmp	r3, #2
 800229e:	d907      	bls.n	80022b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e147      	b.n	8002534 <HAL_RCC_OscConfig+0x4d0>
 80022a4:	40023800 	.word	0x40023800
 80022a8:	42470000 	.word	0x42470000
 80022ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022b0:	4b88      	ldr	r3, [pc, #544]	; (80024d4 <HAL_RCC_OscConfig+0x470>)
 80022b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d1ea      	bne.n	8002292 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f000 8097 	beq.w	80023f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ca:	2300      	movs	r3, #0
 80022cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022ce:	4b81      	ldr	r3, [pc, #516]	; (80024d4 <HAL_RCC_OscConfig+0x470>)
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d10f      	bne.n	80022fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022da:	2300      	movs	r3, #0
 80022dc:	60bb      	str	r3, [r7, #8]
 80022de:	4b7d      	ldr	r3, [pc, #500]	; (80024d4 <HAL_RCC_OscConfig+0x470>)
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	4a7c      	ldr	r2, [pc, #496]	; (80024d4 <HAL_RCC_OscConfig+0x470>)
 80022e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022e8:	6413      	str	r3, [r2, #64]	; 0x40
 80022ea:	4b7a      	ldr	r3, [pc, #488]	; (80024d4 <HAL_RCC_OscConfig+0x470>)
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f2:	60bb      	str	r3, [r7, #8]
 80022f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022f6:	2301      	movs	r3, #1
 80022f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022fa:	4b77      	ldr	r3, [pc, #476]	; (80024d8 <HAL_RCC_OscConfig+0x474>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002302:	2b00      	cmp	r3, #0
 8002304:	d118      	bne.n	8002338 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002306:	4b74      	ldr	r3, [pc, #464]	; (80024d8 <HAL_RCC_OscConfig+0x474>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a73      	ldr	r2, [pc, #460]	; (80024d8 <HAL_RCC_OscConfig+0x474>)
 800230c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002310:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002312:	f7ff f841 	bl	8001398 <HAL_GetTick>
 8002316:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002318:	e008      	b.n	800232c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800231a:	f7ff f83d 	bl	8001398 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e103      	b.n	8002534 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800232c:	4b6a      	ldr	r3, [pc, #424]	; (80024d8 <HAL_RCC_OscConfig+0x474>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002334:	2b00      	cmp	r3, #0
 8002336:	d0f0      	beq.n	800231a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d106      	bne.n	800234e <HAL_RCC_OscConfig+0x2ea>
 8002340:	4b64      	ldr	r3, [pc, #400]	; (80024d4 <HAL_RCC_OscConfig+0x470>)
 8002342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002344:	4a63      	ldr	r2, [pc, #396]	; (80024d4 <HAL_RCC_OscConfig+0x470>)
 8002346:	f043 0301 	orr.w	r3, r3, #1
 800234a:	6713      	str	r3, [r2, #112]	; 0x70
 800234c:	e01c      	b.n	8002388 <HAL_RCC_OscConfig+0x324>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	2b05      	cmp	r3, #5
 8002354:	d10c      	bne.n	8002370 <HAL_RCC_OscConfig+0x30c>
 8002356:	4b5f      	ldr	r3, [pc, #380]	; (80024d4 <HAL_RCC_OscConfig+0x470>)
 8002358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800235a:	4a5e      	ldr	r2, [pc, #376]	; (80024d4 <HAL_RCC_OscConfig+0x470>)
 800235c:	f043 0304 	orr.w	r3, r3, #4
 8002360:	6713      	str	r3, [r2, #112]	; 0x70
 8002362:	4b5c      	ldr	r3, [pc, #368]	; (80024d4 <HAL_RCC_OscConfig+0x470>)
 8002364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002366:	4a5b      	ldr	r2, [pc, #364]	; (80024d4 <HAL_RCC_OscConfig+0x470>)
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	6713      	str	r3, [r2, #112]	; 0x70
 800236e:	e00b      	b.n	8002388 <HAL_RCC_OscConfig+0x324>
 8002370:	4b58      	ldr	r3, [pc, #352]	; (80024d4 <HAL_RCC_OscConfig+0x470>)
 8002372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002374:	4a57      	ldr	r2, [pc, #348]	; (80024d4 <HAL_RCC_OscConfig+0x470>)
 8002376:	f023 0301 	bic.w	r3, r3, #1
 800237a:	6713      	str	r3, [r2, #112]	; 0x70
 800237c:	4b55      	ldr	r3, [pc, #340]	; (80024d4 <HAL_RCC_OscConfig+0x470>)
 800237e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002380:	4a54      	ldr	r2, [pc, #336]	; (80024d4 <HAL_RCC_OscConfig+0x470>)
 8002382:	f023 0304 	bic.w	r3, r3, #4
 8002386:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d015      	beq.n	80023bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002390:	f7ff f802 	bl	8001398 <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002396:	e00a      	b.n	80023ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002398:	f7fe fffe 	bl	8001398 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e0c2      	b.n	8002534 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ae:	4b49      	ldr	r3, [pc, #292]	; (80024d4 <HAL_RCC_OscConfig+0x470>)
 80023b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d0ee      	beq.n	8002398 <HAL_RCC_OscConfig+0x334>
 80023ba:	e014      	b.n	80023e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023bc:	f7fe ffec 	bl	8001398 <HAL_GetTick>
 80023c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023c2:	e00a      	b.n	80023da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023c4:	f7fe ffe8 	bl	8001398 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e0ac      	b.n	8002534 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023da:	4b3e      	ldr	r3, [pc, #248]	; (80024d4 <HAL_RCC_OscConfig+0x470>)
 80023dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1ee      	bne.n	80023c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023e6:	7dfb      	ldrb	r3, [r7, #23]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d105      	bne.n	80023f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ec:	4b39      	ldr	r3, [pc, #228]	; (80024d4 <HAL_RCC_OscConfig+0x470>)
 80023ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f0:	4a38      	ldr	r2, [pc, #224]	; (80024d4 <HAL_RCC_OscConfig+0x470>)
 80023f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f000 8098 	beq.w	8002532 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002402:	4b34      	ldr	r3, [pc, #208]	; (80024d4 <HAL_RCC_OscConfig+0x470>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 030c 	and.w	r3, r3, #12
 800240a:	2b08      	cmp	r3, #8
 800240c:	d05c      	beq.n	80024c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	2b02      	cmp	r3, #2
 8002414:	d141      	bne.n	800249a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002416:	4b31      	ldr	r3, [pc, #196]	; (80024dc <HAL_RCC_OscConfig+0x478>)
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800241c:	f7fe ffbc 	bl	8001398 <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002424:	f7fe ffb8 	bl	8001398 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e07e      	b.n	8002534 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002436:	4b27      	ldr	r3, [pc, #156]	; (80024d4 <HAL_RCC_OscConfig+0x470>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1f0      	bne.n	8002424 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	69da      	ldr	r2, [r3, #28]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	431a      	orrs	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002450:	019b      	lsls	r3, r3, #6
 8002452:	431a      	orrs	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002458:	085b      	lsrs	r3, r3, #1
 800245a:	3b01      	subs	r3, #1
 800245c:	041b      	lsls	r3, r3, #16
 800245e:	431a      	orrs	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002464:	061b      	lsls	r3, r3, #24
 8002466:	491b      	ldr	r1, [pc, #108]	; (80024d4 <HAL_RCC_OscConfig+0x470>)
 8002468:	4313      	orrs	r3, r2
 800246a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800246c:	4b1b      	ldr	r3, [pc, #108]	; (80024dc <HAL_RCC_OscConfig+0x478>)
 800246e:	2201      	movs	r2, #1
 8002470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002472:	f7fe ff91 	bl	8001398 <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002478:	e008      	b.n	800248c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800247a:	f7fe ff8d 	bl	8001398 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e053      	b.n	8002534 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800248c:	4b11      	ldr	r3, [pc, #68]	; (80024d4 <HAL_RCC_OscConfig+0x470>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d0f0      	beq.n	800247a <HAL_RCC_OscConfig+0x416>
 8002498:	e04b      	b.n	8002532 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800249a:	4b10      	ldr	r3, [pc, #64]	; (80024dc <HAL_RCC_OscConfig+0x478>)
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a0:	f7fe ff7a 	bl	8001398 <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024a8:	f7fe ff76 	bl	8001398 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e03c      	b.n	8002534 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ba:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <HAL_RCC_OscConfig+0x470>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f0      	bne.n	80024a8 <HAL_RCC_OscConfig+0x444>
 80024c6:	e034      	b.n	8002532 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d107      	bne.n	80024e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e02f      	b.n	8002534 <HAL_RCC_OscConfig+0x4d0>
 80024d4:	40023800 	.word	0x40023800
 80024d8:	40007000 	.word	0x40007000
 80024dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024e0:	4b16      	ldr	r3, [pc, #88]	; (800253c <HAL_RCC_OscConfig+0x4d8>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	69db      	ldr	r3, [r3, #28]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d11c      	bne.n	800252e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024fe:	429a      	cmp	r2, r3
 8002500:	d115      	bne.n	800252e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002508:	4013      	ands	r3, r2
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800250e:	4293      	cmp	r3, r2
 8002510:	d10d      	bne.n	800252e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800251c:	429a      	cmp	r2, r3
 800251e:	d106      	bne.n	800252e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800252a:	429a      	cmp	r2, r3
 800252c:	d001      	beq.n	8002532 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e000      	b.n	8002534 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3718      	adds	r7, #24
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40023800 	.word	0x40023800

08002540 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d101      	bne.n	8002554 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e0cc      	b.n	80026ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002554:	4b68      	ldr	r3, [pc, #416]	; (80026f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 030f 	and.w	r3, r3, #15
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	429a      	cmp	r2, r3
 8002560:	d90c      	bls.n	800257c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002562:	4b65      	ldr	r3, [pc, #404]	; (80026f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800256a:	4b63      	ldr	r3, [pc, #396]	; (80026f8 <HAL_RCC_ClockConfig+0x1b8>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 030f 	and.w	r3, r3, #15
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	429a      	cmp	r2, r3
 8002576:	d001      	beq.n	800257c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e0b8      	b.n	80026ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d020      	beq.n	80025ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b00      	cmp	r3, #0
 8002592:	d005      	beq.n	80025a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002594:	4b59      	ldr	r3, [pc, #356]	; (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	4a58      	ldr	r2, [pc, #352]	; (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 800259a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800259e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0308 	and.w	r3, r3, #8
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d005      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025ac:	4b53      	ldr	r3, [pc, #332]	; (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	4a52      	ldr	r2, [pc, #328]	; (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 80025b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025b8:	4b50      	ldr	r3, [pc, #320]	; (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	494d      	ldr	r1, [pc, #308]	; (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d044      	beq.n	8002660 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d107      	bne.n	80025ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025de:	4b47      	ldr	r3, [pc, #284]	; (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d119      	bne.n	800261e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e07f      	b.n	80026ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d003      	beq.n	80025fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025fa:	2b03      	cmp	r3, #3
 80025fc:	d107      	bne.n	800260e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025fe:	4b3f      	ldr	r3, [pc, #252]	; (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d109      	bne.n	800261e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e06f      	b.n	80026ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800260e:	4b3b      	ldr	r3, [pc, #236]	; (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e067      	b.n	80026ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800261e:	4b37      	ldr	r3, [pc, #220]	; (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f023 0203 	bic.w	r2, r3, #3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	4934      	ldr	r1, [pc, #208]	; (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 800262c:	4313      	orrs	r3, r2
 800262e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002630:	f7fe feb2 	bl	8001398 <HAL_GetTick>
 8002634:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002636:	e00a      	b.n	800264e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002638:	f7fe feae 	bl	8001398 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	f241 3288 	movw	r2, #5000	; 0x1388
 8002646:	4293      	cmp	r3, r2
 8002648:	d901      	bls.n	800264e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e04f      	b.n	80026ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800264e:	4b2b      	ldr	r3, [pc, #172]	; (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 020c 	and.w	r2, r3, #12
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	429a      	cmp	r2, r3
 800265e:	d1eb      	bne.n	8002638 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002660:	4b25      	ldr	r3, [pc, #148]	; (80026f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 030f 	and.w	r3, r3, #15
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	429a      	cmp	r2, r3
 800266c:	d20c      	bcs.n	8002688 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800266e:	4b22      	ldr	r3, [pc, #136]	; (80026f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	b2d2      	uxtb	r2, r2
 8002674:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002676:	4b20      	ldr	r3, [pc, #128]	; (80026f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 030f 	and.w	r3, r3, #15
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	429a      	cmp	r2, r3
 8002682:	d001      	beq.n	8002688 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e032      	b.n	80026ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0304 	and.w	r3, r3, #4
 8002690:	2b00      	cmp	r3, #0
 8002692:	d008      	beq.n	80026a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002694:	4b19      	ldr	r3, [pc, #100]	; (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	4916      	ldr	r1, [pc, #88]	; (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0308 	and.w	r3, r3, #8
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d009      	beq.n	80026c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026b2:	4b12      	ldr	r3, [pc, #72]	; (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	490e      	ldr	r1, [pc, #56]	; (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026c6:	f000 f821 	bl	800270c <HAL_RCC_GetSysClockFreq>
 80026ca:	4602      	mov	r2, r0
 80026cc:	4b0b      	ldr	r3, [pc, #44]	; (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	091b      	lsrs	r3, r3, #4
 80026d2:	f003 030f 	and.w	r3, r3, #15
 80026d6:	490a      	ldr	r1, [pc, #40]	; (8002700 <HAL_RCC_ClockConfig+0x1c0>)
 80026d8:	5ccb      	ldrb	r3, [r1, r3]
 80026da:	fa22 f303 	lsr.w	r3, r2, r3
 80026de:	4a09      	ldr	r2, [pc, #36]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 80026e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026e2:	4b09      	ldr	r3, [pc, #36]	; (8002708 <HAL_RCC_ClockConfig+0x1c8>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7fe fe12 	bl	8001310 <HAL_InitTick>

  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	40023c00 	.word	0x40023c00
 80026fc:	40023800 	.word	0x40023800
 8002700:	080059f8 	.word	0x080059f8
 8002704:	20000000 	.word	0x20000000
 8002708:	20000004 	.word	0x20000004

0800270c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800270c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002710:	b094      	sub	sp, #80	; 0x50
 8002712:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002714:	2300      	movs	r3, #0
 8002716:	647b      	str	r3, [r7, #68]	; 0x44
 8002718:	2300      	movs	r3, #0
 800271a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800271c:	2300      	movs	r3, #0
 800271e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002720:	2300      	movs	r3, #0
 8002722:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002724:	4b79      	ldr	r3, [pc, #484]	; (800290c <HAL_RCC_GetSysClockFreq+0x200>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f003 030c 	and.w	r3, r3, #12
 800272c:	2b08      	cmp	r3, #8
 800272e:	d00d      	beq.n	800274c <HAL_RCC_GetSysClockFreq+0x40>
 8002730:	2b08      	cmp	r3, #8
 8002732:	f200 80e1 	bhi.w	80028f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002736:	2b00      	cmp	r3, #0
 8002738:	d002      	beq.n	8002740 <HAL_RCC_GetSysClockFreq+0x34>
 800273a:	2b04      	cmp	r3, #4
 800273c:	d003      	beq.n	8002746 <HAL_RCC_GetSysClockFreq+0x3a>
 800273e:	e0db      	b.n	80028f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002740:	4b73      	ldr	r3, [pc, #460]	; (8002910 <HAL_RCC_GetSysClockFreq+0x204>)
 8002742:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002744:	e0db      	b.n	80028fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002746:	4b73      	ldr	r3, [pc, #460]	; (8002914 <HAL_RCC_GetSysClockFreq+0x208>)
 8002748:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800274a:	e0d8      	b.n	80028fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800274c:	4b6f      	ldr	r3, [pc, #444]	; (800290c <HAL_RCC_GetSysClockFreq+0x200>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002754:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002756:	4b6d      	ldr	r3, [pc, #436]	; (800290c <HAL_RCC_GetSysClockFreq+0x200>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d063      	beq.n	800282a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002762:	4b6a      	ldr	r3, [pc, #424]	; (800290c <HAL_RCC_GetSysClockFreq+0x200>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	099b      	lsrs	r3, r3, #6
 8002768:	2200      	movs	r2, #0
 800276a:	63bb      	str	r3, [r7, #56]	; 0x38
 800276c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800276e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002774:	633b      	str	r3, [r7, #48]	; 0x30
 8002776:	2300      	movs	r3, #0
 8002778:	637b      	str	r3, [r7, #52]	; 0x34
 800277a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800277e:	4622      	mov	r2, r4
 8002780:	462b      	mov	r3, r5
 8002782:	f04f 0000 	mov.w	r0, #0
 8002786:	f04f 0100 	mov.w	r1, #0
 800278a:	0159      	lsls	r1, r3, #5
 800278c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002790:	0150      	lsls	r0, r2, #5
 8002792:	4602      	mov	r2, r0
 8002794:	460b      	mov	r3, r1
 8002796:	4621      	mov	r1, r4
 8002798:	1a51      	subs	r1, r2, r1
 800279a:	6139      	str	r1, [r7, #16]
 800279c:	4629      	mov	r1, r5
 800279e:	eb63 0301 	sbc.w	r3, r3, r1
 80027a2:	617b      	str	r3, [r7, #20]
 80027a4:	f04f 0200 	mov.w	r2, #0
 80027a8:	f04f 0300 	mov.w	r3, #0
 80027ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80027b0:	4659      	mov	r1, fp
 80027b2:	018b      	lsls	r3, r1, #6
 80027b4:	4651      	mov	r1, sl
 80027b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027ba:	4651      	mov	r1, sl
 80027bc:	018a      	lsls	r2, r1, #6
 80027be:	4651      	mov	r1, sl
 80027c0:	ebb2 0801 	subs.w	r8, r2, r1
 80027c4:	4659      	mov	r1, fp
 80027c6:	eb63 0901 	sbc.w	r9, r3, r1
 80027ca:	f04f 0200 	mov.w	r2, #0
 80027ce:	f04f 0300 	mov.w	r3, #0
 80027d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027de:	4690      	mov	r8, r2
 80027e0:	4699      	mov	r9, r3
 80027e2:	4623      	mov	r3, r4
 80027e4:	eb18 0303 	adds.w	r3, r8, r3
 80027e8:	60bb      	str	r3, [r7, #8]
 80027ea:	462b      	mov	r3, r5
 80027ec:	eb49 0303 	adc.w	r3, r9, r3
 80027f0:	60fb      	str	r3, [r7, #12]
 80027f2:	f04f 0200 	mov.w	r2, #0
 80027f6:	f04f 0300 	mov.w	r3, #0
 80027fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80027fe:	4629      	mov	r1, r5
 8002800:	024b      	lsls	r3, r1, #9
 8002802:	4621      	mov	r1, r4
 8002804:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002808:	4621      	mov	r1, r4
 800280a:	024a      	lsls	r2, r1, #9
 800280c:	4610      	mov	r0, r2
 800280e:	4619      	mov	r1, r3
 8002810:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002812:	2200      	movs	r2, #0
 8002814:	62bb      	str	r3, [r7, #40]	; 0x28
 8002816:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002818:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800281c:	f7fd fd28 	bl	8000270 <__aeabi_uldivmod>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	4613      	mov	r3, r2
 8002826:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002828:	e058      	b.n	80028dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800282a:	4b38      	ldr	r3, [pc, #224]	; (800290c <HAL_RCC_GetSysClockFreq+0x200>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	099b      	lsrs	r3, r3, #6
 8002830:	2200      	movs	r2, #0
 8002832:	4618      	mov	r0, r3
 8002834:	4611      	mov	r1, r2
 8002836:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800283a:	623b      	str	r3, [r7, #32]
 800283c:	2300      	movs	r3, #0
 800283e:	627b      	str	r3, [r7, #36]	; 0x24
 8002840:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002844:	4642      	mov	r2, r8
 8002846:	464b      	mov	r3, r9
 8002848:	f04f 0000 	mov.w	r0, #0
 800284c:	f04f 0100 	mov.w	r1, #0
 8002850:	0159      	lsls	r1, r3, #5
 8002852:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002856:	0150      	lsls	r0, r2, #5
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	4641      	mov	r1, r8
 800285e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002862:	4649      	mov	r1, r9
 8002864:	eb63 0b01 	sbc.w	fp, r3, r1
 8002868:	f04f 0200 	mov.w	r2, #0
 800286c:	f04f 0300 	mov.w	r3, #0
 8002870:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002874:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002878:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800287c:	ebb2 040a 	subs.w	r4, r2, sl
 8002880:	eb63 050b 	sbc.w	r5, r3, fp
 8002884:	f04f 0200 	mov.w	r2, #0
 8002888:	f04f 0300 	mov.w	r3, #0
 800288c:	00eb      	lsls	r3, r5, #3
 800288e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002892:	00e2      	lsls	r2, r4, #3
 8002894:	4614      	mov	r4, r2
 8002896:	461d      	mov	r5, r3
 8002898:	4643      	mov	r3, r8
 800289a:	18e3      	adds	r3, r4, r3
 800289c:	603b      	str	r3, [r7, #0]
 800289e:	464b      	mov	r3, r9
 80028a0:	eb45 0303 	adc.w	r3, r5, r3
 80028a4:	607b      	str	r3, [r7, #4]
 80028a6:	f04f 0200 	mov.w	r2, #0
 80028aa:	f04f 0300 	mov.w	r3, #0
 80028ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028b2:	4629      	mov	r1, r5
 80028b4:	028b      	lsls	r3, r1, #10
 80028b6:	4621      	mov	r1, r4
 80028b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028bc:	4621      	mov	r1, r4
 80028be:	028a      	lsls	r2, r1, #10
 80028c0:	4610      	mov	r0, r2
 80028c2:	4619      	mov	r1, r3
 80028c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028c6:	2200      	movs	r2, #0
 80028c8:	61bb      	str	r3, [r7, #24]
 80028ca:	61fa      	str	r2, [r7, #28]
 80028cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028d0:	f7fd fcce 	bl	8000270 <__aeabi_uldivmod>
 80028d4:	4602      	mov	r2, r0
 80028d6:	460b      	mov	r3, r1
 80028d8:	4613      	mov	r3, r2
 80028da:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028dc:	4b0b      	ldr	r3, [pc, #44]	; (800290c <HAL_RCC_GetSysClockFreq+0x200>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	0c1b      	lsrs	r3, r3, #16
 80028e2:	f003 0303 	and.w	r3, r3, #3
 80028e6:	3301      	adds	r3, #1
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80028ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028f6:	e002      	b.n	80028fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028f8:	4b05      	ldr	r3, [pc, #20]	; (8002910 <HAL_RCC_GetSysClockFreq+0x204>)
 80028fa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002900:	4618      	mov	r0, r3
 8002902:	3750      	adds	r7, #80	; 0x50
 8002904:	46bd      	mov	sp, r7
 8002906:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800290a:	bf00      	nop
 800290c:	40023800 	.word	0x40023800
 8002910:	00f42400 	.word	0x00f42400
 8002914:	007a1200 	.word	0x007a1200

08002918 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800291c:	4b03      	ldr	r3, [pc, #12]	; (800292c <HAL_RCC_GetHCLKFreq+0x14>)
 800291e:	681b      	ldr	r3, [r3, #0]
}
 8002920:	4618      	mov	r0, r3
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	20000000 	.word	0x20000000

08002930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002934:	f7ff fff0 	bl	8002918 <HAL_RCC_GetHCLKFreq>
 8002938:	4602      	mov	r2, r0
 800293a:	4b05      	ldr	r3, [pc, #20]	; (8002950 <HAL_RCC_GetPCLK1Freq+0x20>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	0a9b      	lsrs	r3, r3, #10
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	4903      	ldr	r1, [pc, #12]	; (8002954 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002946:	5ccb      	ldrb	r3, [r1, r3]
 8002948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800294c:	4618      	mov	r0, r3
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40023800 	.word	0x40023800
 8002954:	08005a08 	.word	0x08005a08

08002958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800295c:	f7ff ffdc 	bl	8002918 <HAL_RCC_GetHCLKFreq>
 8002960:	4602      	mov	r2, r0
 8002962:	4b05      	ldr	r3, [pc, #20]	; (8002978 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	0b5b      	lsrs	r3, r3, #13
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	4903      	ldr	r1, [pc, #12]	; (800297c <HAL_RCC_GetPCLK2Freq+0x24>)
 800296e:	5ccb      	ldrb	r3, [r1, r3]
 8002970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002974:	4618      	mov	r0, r3
 8002976:	bd80      	pop	{r7, pc}
 8002978:	40023800 	.word	0x40023800
 800297c:	08005a08 	.word	0x08005a08

08002980 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e01d      	b.n	80029ce <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d106      	bne.n	80029ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f7fe fa9e 	bl	8000ee8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2202      	movs	r2, #2
 80029b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	3304      	adds	r3, #4
 80029bc:	4619      	mov	r1, r3
 80029be:	4610      	mov	r0, r2
 80029c0:	f000 fbde 	bl	8003180 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b085      	sub	sp, #20
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2202      	movs	r2, #2
 80029e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2b06      	cmp	r3, #6
 80029f6:	d007      	beq.n	8002a08 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f042 0201 	orr.w	r2, r2, #1
 8002a06:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b082      	sub	sp, #8
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d101      	bne.n	8002a30 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e01d      	b.n	8002a6c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d106      	bne.n	8002a4a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f7fe faa1 	bl	8000f8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2202      	movs	r2, #2
 8002a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	3304      	adds	r3, #4
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	4610      	mov	r0, r2
 8002a5e:	f000 fb8f 	bl	8003180 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2201      	movs	r2, #1
 8002a84:	6839      	ldr	r1, [r7, #0]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f000 fe64 	bl	8003754 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a15      	ldr	r2, [pc, #84]	; (8002ae8 <HAL_TIM_PWM_Start+0x74>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d004      	beq.n	8002aa0 <HAL_TIM_PWM_Start+0x2c>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a14      	ldr	r2, [pc, #80]	; (8002aec <HAL_TIM_PWM_Start+0x78>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d101      	bne.n	8002aa4 <HAL_TIM_PWM_Start+0x30>
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e000      	b.n	8002aa6 <HAL_TIM_PWM_Start+0x32>
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d007      	beq.n	8002aba <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ab8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f003 0307 	and.w	r3, r3, #7
 8002ac4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2b06      	cmp	r3, #6
 8002aca:	d007      	beq.n	8002adc <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f042 0201 	orr.w	r2, r2, #1
 8002ada:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40010000 	.word	0x40010000
 8002aec:	40010400 	.word	0x40010400

08002af0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	2b0c      	cmp	r3, #12
 8002afe:	d841      	bhi.n	8002b84 <HAL_TIM_PWM_Start_IT+0x94>
 8002b00:	a201      	add	r2, pc, #4	; (adr r2, 8002b08 <HAL_TIM_PWM_Start_IT+0x18>)
 8002b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b06:	bf00      	nop
 8002b08:	08002b3d 	.word	0x08002b3d
 8002b0c:	08002b85 	.word	0x08002b85
 8002b10:	08002b85 	.word	0x08002b85
 8002b14:	08002b85 	.word	0x08002b85
 8002b18:	08002b4f 	.word	0x08002b4f
 8002b1c:	08002b85 	.word	0x08002b85
 8002b20:	08002b85 	.word	0x08002b85
 8002b24:	08002b85 	.word	0x08002b85
 8002b28:	08002b61 	.word	0x08002b61
 8002b2c:	08002b85 	.word	0x08002b85
 8002b30:	08002b85 	.word	0x08002b85
 8002b34:	08002b85 	.word	0x08002b85
 8002b38:	08002b73 	.word	0x08002b73
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68da      	ldr	r2, [r3, #12]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f042 0202 	orr.w	r2, r2, #2
 8002b4a:	60da      	str	r2, [r3, #12]
      break;
 8002b4c:	e01b      	b.n	8002b86 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68da      	ldr	r2, [r3, #12]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f042 0204 	orr.w	r2, r2, #4
 8002b5c:	60da      	str	r2, [r3, #12]
      break;
 8002b5e:	e012      	b.n	8002b86 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68da      	ldr	r2, [r3, #12]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f042 0208 	orr.w	r2, r2, #8
 8002b6e:	60da      	str	r2, [r3, #12]
      break;
 8002b70:	e009      	b.n	8002b86 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68da      	ldr	r2, [r3, #12]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f042 0210 	orr.w	r2, r2, #16
 8002b80:	60da      	str	r2, [r3, #12]
      break;
 8002b82:	e000      	b.n	8002b86 <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 8002b84:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	6839      	ldr	r1, [r7, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f000 fde0 	bl	8003754 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a15      	ldr	r2, [pc, #84]	; (8002bf0 <HAL_TIM_PWM_Start_IT+0x100>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d004      	beq.n	8002ba8 <HAL_TIM_PWM_Start_IT+0xb8>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a14      	ldr	r2, [pc, #80]	; (8002bf4 <HAL_TIM_PWM_Start_IT+0x104>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d101      	bne.n	8002bac <HAL_TIM_PWM_Start_IT+0xbc>
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e000      	b.n	8002bae <HAL_TIM_PWM_Start_IT+0xbe>
 8002bac:	2300      	movs	r3, #0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d007      	beq.n	8002bc2 <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bc0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f003 0307 	and.w	r3, r3, #7
 8002bcc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2b06      	cmp	r3, #6
 8002bd2:	d007      	beq.n	8002be4 <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f042 0201 	orr.w	r2, r2, #1
 8002be2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40010000 	.word	0x40010000
 8002bf4:	40010400 	.word	0x40010400

08002bf8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d122      	bne.n	8002c54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d11b      	bne.n	8002c54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f06f 0202 	mvn.w	r2, #2
 8002c24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	f003 0303 	and.w	r3, r3, #3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 fa82 	bl	8003144 <HAL_TIM_IC_CaptureCallback>
 8002c40:	e005      	b.n	8002c4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 fa74 	bl	8003130 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 fa85 	bl	8003158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	f003 0304 	and.w	r3, r3, #4
 8002c5e:	2b04      	cmp	r3, #4
 8002c60:	d122      	bne.n	8002ca8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f003 0304 	and.w	r3, r3, #4
 8002c6c:	2b04      	cmp	r3, #4
 8002c6e:	d11b      	bne.n	8002ca8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f06f 0204 	mvn.w	r2, #4
 8002c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 fa58 	bl	8003144 <HAL_TIM_IC_CaptureCallback>
 8002c94:	e005      	b.n	8002ca2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 fa4a 	bl	8003130 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 fa5b 	bl	8003158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	f003 0308 	and.w	r3, r3, #8
 8002cb2:	2b08      	cmp	r3, #8
 8002cb4:	d122      	bne.n	8002cfc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	f003 0308 	and.w	r3, r3, #8
 8002cc0:	2b08      	cmp	r3, #8
 8002cc2:	d11b      	bne.n	8002cfc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f06f 0208 	mvn.w	r2, #8
 8002ccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2204      	movs	r2, #4
 8002cd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	69db      	ldr	r3, [r3, #28]
 8002cda:	f003 0303 	and.w	r3, r3, #3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 fa2e 	bl	8003144 <HAL_TIM_IC_CaptureCallback>
 8002ce8:	e005      	b.n	8002cf6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 fa20 	bl	8003130 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 fa31 	bl	8003158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	f003 0310 	and.w	r3, r3, #16
 8002d06:	2b10      	cmp	r3, #16
 8002d08:	d122      	bne.n	8002d50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	f003 0310 	and.w	r3, r3, #16
 8002d14:	2b10      	cmp	r3, #16
 8002d16:	d11b      	bne.n	8002d50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f06f 0210 	mvn.w	r2, #16
 8002d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2208      	movs	r2, #8
 8002d26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d003      	beq.n	8002d3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 fa04 	bl	8003144 <HAL_TIM_IC_CaptureCallback>
 8002d3c:	e005      	b.n	8002d4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 f9f6 	bl	8003130 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 fa07 	bl	8003158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d10e      	bne.n	8002d7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d107      	bne.n	8002d7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f06f 0201 	mvn.w	r2, #1
 8002d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 f9d0 	bl	800311c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d86:	2b80      	cmp	r3, #128	; 0x80
 8002d88:	d10e      	bne.n	8002da8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d94:	2b80      	cmp	r3, #128	; 0x80
 8002d96:	d107      	bne.n	8002da8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002da0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 fd82 	bl	80038ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db2:	2b40      	cmp	r3, #64	; 0x40
 8002db4:	d10e      	bne.n	8002dd4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc0:	2b40      	cmp	r3, #64	; 0x40
 8002dc2:	d107      	bne.n	8002dd4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002dcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 f9cc 	bl	800316c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	f003 0320 	and.w	r3, r3, #32
 8002dde:	2b20      	cmp	r3, #32
 8002de0:	d10e      	bne.n	8002e00 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	f003 0320 	and.w	r3, r3, #32
 8002dec:	2b20      	cmp	r3, #32
 8002dee:	d107      	bne.n	8002e00 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f06f 0220 	mvn.w	r2, #32
 8002df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 fd4c 	bl	8003898 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e00:	bf00      	nop
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d101      	bne.n	8002e22 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002e1e:	2302      	movs	r3, #2
 8002e20:	e0b4      	b.n	8002f8c <HAL_TIM_PWM_ConfigChannel+0x184>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2202      	movs	r2, #2
 8002e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2b0c      	cmp	r3, #12
 8002e36:	f200 809f 	bhi.w	8002f78 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002e3a:	a201      	add	r2, pc, #4	; (adr r2, 8002e40 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e40:	08002e75 	.word	0x08002e75
 8002e44:	08002f79 	.word	0x08002f79
 8002e48:	08002f79 	.word	0x08002f79
 8002e4c:	08002f79 	.word	0x08002f79
 8002e50:	08002eb5 	.word	0x08002eb5
 8002e54:	08002f79 	.word	0x08002f79
 8002e58:	08002f79 	.word	0x08002f79
 8002e5c:	08002f79 	.word	0x08002f79
 8002e60:	08002ef7 	.word	0x08002ef7
 8002e64:	08002f79 	.word	0x08002f79
 8002e68:	08002f79 	.word	0x08002f79
 8002e6c:	08002f79 	.word	0x08002f79
 8002e70:	08002f37 	.word	0x08002f37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68b9      	ldr	r1, [r7, #8]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f000 fa20 	bl	80032c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	699a      	ldr	r2, [r3, #24]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f042 0208 	orr.w	r2, r2, #8
 8002e8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	699a      	ldr	r2, [r3, #24]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 0204 	bic.w	r2, r2, #4
 8002e9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6999      	ldr	r1, [r3, #24]
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	691a      	ldr	r2, [r3, #16]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	619a      	str	r2, [r3, #24]
      break;
 8002eb2:	e062      	b.n	8002f7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68b9      	ldr	r1, [r7, #8]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 fa70 	bl	80033a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	699a      	ldr	r2, [r3, #24]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ece:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	699a      	ldr	r2, [r3, #24]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ede:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6999      	ldr	r1, [r3, #24]
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	021a      	lsls	r2, r3, #8
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	619a      	str	r2, [r3, #24]
      break;
 8002ef4:	e041      	b.n	8002f7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68b9      	ldr	r1, [r7, #8]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f000 fac5 	bl	800348c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	69da      	ldr	r2, [r3, #28]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f042 0208 	orr.w	r2, r2, #8
 8002f10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	69da      	ldr	r2, [r3, #28]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f022 0204 	bic.w	r2, r2, #4
 8002f20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	69d9      	ldr	r1, [r3, #28]
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	691a      	ldr	r2, [r3, #16]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	61da      	str	r2, [r3, #28]
      break;
 8002f34:	e021      	b.n	8002f7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68b9      	ldr	r1, [r7, #8]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f000 fb19 	bl	8003574 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	69da      	ldr	r2, [r3, #28]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	69da      	ldr	r2, [r3, #28]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	69d9      	ldr	r1, [r3, #28]
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	021a      	lsls	r2, r3, #8
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	61da      	str	r2, [r3, #28]
      break;
 8002f76:	e000      	b.n	8002f7a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002f78:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d101      	bne.n	8002fac <HAL_TIM_ConfigClockSource+0x18>
 8002fa8:	2302      	movs	r3, #2
 8002faa:	e0b3      	b.n	8003114 <HAL_TIM_ConfigClockSource+0x180>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002fca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fd2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fe4:	d03e      	beq.n	8003064 <HAL_TIM_ConfigClockSource+0xd0>
 8002fe6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fea:	f200 8087 	bhi.w	80030fc <HAL_TIM_ConfigClockSource+0x168>
 8002fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ff2:	f000 8085 	beq.w	8003100 <HAL_TIM_ConfigClockSource+0x16c>
 8002ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ffa:	d87f      	bhi.n	80030fc <HAL_TIM_ConfigClockSource+0x168>
 8002ffc:	2b70      	cmp	r3, #112	; 0x70
 8002ffe:	d01a      	beq.n	8003036 <HAL_TIM_ConfigClockSource+0xa2>
 8003000:	2b70      	cmp	r3, #112	; 0x70
 8003002:	d87b      	bhi.n	80030fc <HAL_TIM_ConfigClockSource+0x168>
 8003004:	2b60      	cmp	r3, #96	; 0x60
 8003006:	d050      	beq.n	80030aa <HAL_TIM_ConfigClockSource+0x116>
 8003008:	2b60      	cmp	r3, #96	; 0x60
 800300a:	d877      	bhi.n	80030fc <HAL_TIM_ConfigClockSource+0x168>
 800300c:	2b50      	cmp	r3, #80	; 0x50
 800300e:	d03c      	beq.n	800308a <HAL_TIM_ConfigClockSource+0xf6>
 8003010:	2b50      	cmp	r3, #80	; 0x50
 8003012:	d873      	bhi.n	80030fc <HAL_TIM_ConfigClockSource+0x168>
 8003014:	2b40      	cmp	r3, #64	; 0x40
 8003016:	d058      	beq.n	80030ca <HAL_TIM_ConfigClockSource+0x136>
 8003018:	2b40      	cmp	r3, #64	; 0x40
 800301a:	d86f      	bhi.n	80030fc <HAL_TIM_ConfigClockSource+0x168>
 800301c:	2b30      	cmp	r3, #48	; 0x30
 800301e:	d064      	beq.n	80030ea <HAL_TIM_ConfigClockSource+0x156>
 8003020:	2b30      	cmp	r3, #48	; 0x30
 8003022:	d86b      	bhi.n	80030fc <HAL_TIM_ConfigClockSource+0x168>
 8003024:	2b20      	cmp	r3, #32
 8003026:	d060      	beq.n	80030ea <HAL_TIM_ConfigClockSource+0x156>
 8003028:	2b20      	cmp	r3, #32
 800302a:	d867      	bhi.n	80030fc <HAL_TIM_ConfigClockSource+0x168>
 800302c:	2b00      	cmp	r3, #0
 800302e:	d05c      	beq.n	80030ea <HAL_TIM_ConfigClockSource+0x156>
 8003030:	2b10      	cmp	r3, #16
 8003032:	d05a      	beq.n	80030ea <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003034:	e062      	b.n	80030fc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6818      	ldr	r0, [r3, #0]
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	6899      	ldr	r1, [r3, #8]
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	f000 fb65 	bl	8003714 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003058:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	609a      	str	r2, [r3, #8]
      break;
 8003062:	e04e      	b.n	8003102 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6818      	ldr	r0, [r3, #0]
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	6899      	ldr	r1, [r3, #8]
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685a      	ldr	r2, [r3, #4]
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	f000 fb4e 	bl	8003714 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	689a      	ldr	r2, [r3, #8]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003086:	609a      	str	r2, [r3, #8]
      break;
 8003088:	e03b      	b.n	8003102 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6818      	ldr	r0, [r3, #0]
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	6859      	ldr	r1, [r3, #4]
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	461a      	mov	r2, r3
 8003098:	f000 fac2 	bl	8003620 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2150      	movs	r1, #80	; 0x50
 80030a2:	4618      	mov	r0, r3
 80030a4:	f000 fb1b 	bl	80036de <TIM_ITRx_SetConfig>
      break;
 80030a8:	e02b      	b.n	8003102 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6818      	ldr	r0, [r3, #0]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	6859      	ldr	r1, [r3, #4]
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	461a      	mov	r2, r3
 80030b8:	f000 fae1 	bl	800367e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2160      	movs	r1, #96	; 0x60
 80030c2:	4618      	mov	r0, r3
 80030c4:	f000 fb0b 	bl	80036de <TIM_ITRx_SetConfig>
      break;
 80030c8:	e01b      	b.n	8003102 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6818      	ldr	r0, [r3, #0]
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	6859      	ldr	r1, [r3, #4]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	461a      	mov	r2, r3
 80030d8:	f000 faa2 	bl	8003620 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2140      	movs	r1, #64	; 0x40
 80030e2:	4618      	mov	r0, r3
 80030e4:	f000 fafb 	bl	80036de <TIM_ITRx_SetConfig>
      break;
 80030e8:	e00b      	b.n	8003102 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4619      	mov	r1, r3
 80030f4:	4610      	mov	r0, r2
 80030f6:	f000 faf2 	bl	80036de <TIM_ITRx_SetConfig>
      break;
 80030fa:	e002      	b.n	8003102 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80030fc:	bf00      	nop
 80030fe:	e000      	b.n	8003102 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003100:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a40      	ldr	r2, [pc, #256]	; (8003294 <TIM_Base_SetConfig+0x114>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d013      	beq.n	80031c0 <TIM_Base_SetConfig+0x40>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800319e:	d00f      	beq.n	80031c0 <TIM_Base_SetConfig+0x40>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a3d      	ldr	r2, [pc, #244]	; (8003298 <TIM_Base_SetConfig+0x118>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d00b      	beq.n	80031c0 <TIM_Base_SetConfig+0x40>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a3c      	ldr	r2, [pc, #240]	; (800329c <TIM_Base_SetConfig+0x11c>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d007      	beq.n	80031c0 <TIM_Base_SetConfig+0x40>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a3b      	ldr	r2, [pc, #236]	; (80032a0 <TIM_Base_SetConfig+0x120>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d003      	beq.n	80031c0 <TIM_Base_SetConfig+0x40>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a3a      	ldr	r2, [pc, #232]	; (80032a4 <TIM_Base_SetConfig+0x124>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d108      	bne.n	80031d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a2f      	ldr	r2, [pc, #188]	; (8003294 <TIM_Base_SetConfig+0x114>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d02b      	beq.n	8003232 <TIM_Base_SetConfig+0xb2>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031e0:	d027      	beq.n	8003232 <TIM_Base_SetConfig+0xb2>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a2c      	ldr	r2, [pc, #176]	; (8003298 <TIM_Base_SetConfig+0x118>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d023      	beq.n	8003232 <TIM_Base_SetConfig+0xb2>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a2b      	ldr	r2, [pc, #172]	; (800329c <TIM_Base_SetConfig+0x11c>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d01f      	beq.n	8003232 <TIM_Base_SetConfig+0xb2>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a2a      	ldr	r2, [pc, #168]	; (80032a0 <TIM_Base_SetConfig+0x120>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d01b      	beq.n	8003232 <TIM_Base_SetConfig+0xb2>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a29      	ldr	r2, [pc, #164]	; (80032a4 <TIM_Base_SetConfig+0x124>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d017      	beq.n	8003232 <TIM_Base_SetConfig+0xb2>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a28      	ldr	r2, [pc, #160]	; (80032a8 <TIM_Base_SetConfig+0x128>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d013      	beq.n	8003232 <TIM_Base_SetConfig+0xb2>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a27      	ldr	r2, [pc, #156]	; (80032ac <TIM_Base_SetConfig+0x12c>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d00f      	beq.n	8003232 <TIM_Base_SetConfig+0xb2>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a26      	ldr	r2, [pc, #152]	; (80032b0 <TIM_Base_SetConfig+0x130>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d00b      	beq.n	8003232 <TIM_Base_SetConfig+0xb2>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a25      	ldr	r2, [pc, #148]	; (80032b4 <TIM_Base_SetConfig+0x134>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d007      	beq.n	8003232 <TIM_Base_SetConfig+0xb2>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a24      	ldr	r2, [pc, #144]	; (80032b8 <TIM_Base_SetConfig+0x138>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d003      	beq.n	8003232 <TIM_Base_SetConfig+0xb2>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a23      	ldr	r2, [pc, #140]	; (80032bc <TIM_Base_SetConfig+0x13c>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d108      	bne.n	8003244 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003238:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	4313      	orrs	r3, r2
 8003242:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	4313      	orrs	r3, r2
 8003250:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a0a      	ldr	r2, [pc, #40]	; (8003294 <TIM_Base_SetConfig+0x114>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d003      	beq.n	8003278 <TIM_Base_SetConfig+0xf8>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a0c      	ldr	r2, [pc, #48]	; (80032a4 <TIM_Base_SetConfig+0x124>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d103      	bne.n	8003280 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	691a      	ldr	r2, [r3, #16]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	615a      	str	r2, [r3, #20]
}
 8003286:	bf00      	nop
 8003288:	3714      	adds	r7, #20
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	40010000 	.word	0x40010000
 8003298:	40000400 	.word	0x40000400
 800329c:	40000800 	.word	0x40000800
 80032a0:	40000c00 	.word	0x40000c00
 80032a4:	40010400 	.word	0x40010400
 80032a8:	40014000 	.word	0x40014000
 80032ac:	40014400 	.word	0x40014400
 80032b0:	40014800 	.word	0x40014800
 80032b4:	40001800 	.word	0x40001800
 80032b8:	40001c00 	.word	0x40001c00
 80032bc:	40002000 	.word	0x40002000

080032c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b087      	sub	sp, #28
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a1b      	ldr	r3, [r3, #32]
 80032ce:	f023 0201 	bic.w	r2, r3, #1
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f023 0303 	bic.w	r3, r3, #3
 80032f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	4313      	orrs	r3, r2
 8003300:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	f023 0302 	bic.w	r3, r3, #2
 8003308:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	4313      	orrs	r3, r2
 8003312:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a20      	ldr	r2, [pc, #128]	; (8003398 <TIM_OC1_SetConfig+0xd8>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d003      	beq.n	8003324 <TIM_OC1_SetConfig+0x64>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a1f      	ldr	r2, [pc, #124]	; (800339c <TIM_OC1_SetConfig+0xdc>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d10c      	bne.n	800333e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	f023 0308 	bic.w	r3, r3, #8
 800332a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	697a      	ldr	r2, [r7, #20]
 8003332:	4313      	orrs	r3, r2
 8003334:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	f023 0304 	bic.w	r3, r3, #4
 800333c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a15      	ldr	r2, [pc, #84]	; (8003398 <TIM_OC1_SetConfig+0xd8>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d003      	beq.n	800334e <TIM_OC1_SetConfig+0x8e>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a14      	ldr	r2, [pc, #80]	; (800339c <TIM_OC1_SetConfig+0xdc>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d111      	bne.n	8003372 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003354:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800335c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	4313      	orrs	r3, r2
 8003366:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	4313      	orrs	r3, r2
 8003370:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685a      	ldr	r2, [r3, #4]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	697a      	ldr	r2, [r7, #20]
 800338a:	621a      	str	r2, [r3, #32]
}
 800338c:	bf00      	nop
 800338e:	371c      	adds	r7, #28
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	40010000 	.word	0x40010000
 800339c:	40010400 	.word	0x40010400

080033a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b087      	sub	sp, #28
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	f023 0210 	bic.w	r2, r3, #16
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	021b      	lsls	r3, r3, #8
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	f023 0320 	bic.w	r3, r3, #32
 80033ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	011b      	lsls	r3, r3, #4
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a22      	ldr	r2, [pc, #136]	; (8003484 <TIM_OC2_SetConfig+0xe4>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d003      	beq.n	8003408 <TIM_OC2_SetConfig+0x68>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a21      	ldr	r2, [pc, #132]	; (8003488 <TIM_OC2_SetConfig+0xe8>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d10d      	bne.n	8003424 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800340e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	011b      	lsls	r3, r3, #4
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	4313      	orrs	r3, r2
 800341a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003422:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a17      	ldr	r2, [pc, #92]	; (8003484 <TIM_OC2_SetConfig+0xe4>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d003      	beq.n	8003434 <TIM_OC2_SetConfig+0x94>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a16      	ldr	r2, [pc, #88]	; (8003488 <TIM_OC2_SetConfig+0xe8>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d113      	bne.n	800345c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800343a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003442:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	4313      	orrs	r3, r2
 800344e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	4313      	orrs	r3, r2
 800345a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685a      	ldr	r2, [r3, #4]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	621a      	str	r2, [r3, #32]
}
 8003476:	bf00      	nop
 8003478:	371c      	adds	r7, #28
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	40010000 	.word	0x40010000
 8003488:	40010400 	.word	0x40010400

0800348c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800348c:	b480      	push	{r7}
 800348e:	b087      	sub	sp, #28
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	69db      	ldr	r3, [r3, #28]
 80034b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f023 0303 	bic.w	r3, r3, #3
 80034c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	021b      	lsls	r3, r3, #8
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	4313      	orrs	r3, r2
 80034e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a21      	ldr	r2, [pc, #132]	; (800356c <TIM_OC3_SetConfig+0xe0>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d003      	beq.n	80034f2 <TIM_OC3_SetConfig+0x66>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a20      	ldr	r2, [pc, #128]	; (8003570 <TIM_OC3_SetConfig+0xe4>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d10d      	bne.n	800350e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	021b      	lsls	r3, r3, #8
 8003500:	697a      	ldr	r2, [r7, #20]
 8003502:	4313      	orrs	r3, r2
 8003504:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800350c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a16      	ldr	r2, [pc, #88]	; (800356c <TIM_OC3_SetConfig+0xe0>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d003      	beq.n	800351e <TIM_OC3_SetConfig+0x92>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a15      	ldr	r2, [pc, #84]	; (8003570 <TIM_OC3_SetConfig+0xe4>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d113      	bne.n	8003546 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003524:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800352c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	011b      	lsls	r3, r3, #4
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	4313      	orrs	r3, r2
 8003538:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	011b      	lsls	r3, r3, #4
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	4313      	orrs	r3, r2
 8003544:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685a      	ldr	r2, [r3, #4]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	621a      	str	r2, [r3, #32]
}
 8003560:	bf00      	nop
 8003562:	371c      	adds	r7, #28
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr
 800356c:	40010000 	.word	0x40010000
 8003570:	40010400 	.word	0x40010400

08003574 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003574:	b480      	push	{r7}
 8003576:	b087      	sub	sp, #28
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	69db      	ldr	r3, [r3, #28]
 800359a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	021b      	lsls	r3, r3, #8
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	031b      	lsls	r3, r3, #12
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a12      	ldr	r2, [pc, #72]	; (8003618 <TIM_OC4_SetConfig+0xa4>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d003      	beq.n	80035dc <TIM_OC4_SetConfig+0x68>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a11      	ldr	r2, [pc, #68]	; (800361c <TIM_OC4_SetConfig+0xa8>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d109      	bne.n	80035f0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	019b      	lsls	r3, r3, #6
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	621a      	str	r2, [r3, #32]
}
 800360a:	bf00      	nop
 800360c:	371c      	adds	r7, #28
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	40010000 	.word	0x40010000
 800361c:	40010400 	.word	0x40010400

08003620 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003620:	b480      	push	{r7}
 8003622:	b087      	sub	sp, #28
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	f023 0201 	bic.w	r2, r3, #1
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800364a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	011b      	lsls	r3, r3, #4
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	4313      	orrs	r3, r2
 8003654:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	f023 030a 	bic.w	r3, r3, #10
 800365c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	4313      	orrs	r3, r2
 8003664:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	693a      	ldr	r2, [r7, #16]
 800366a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	621a      	str	r2, [r3, #32]
}
 8003672:	bf00      	nop
 8003674:	371c      	adds	r7, #28
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr

0800367e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800367e:	b480      	push	{r7}
 8003680:	b087      	sub	sp, #28
 8003682:	af00      	add	r7, sp, #0
 8003684:	60f8      	str	r0, [r7, #12]
 8003686:	60b9      	str	r1, [r7, #8]
 8003688:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	f023 0210 	bic.w	r2, r3, #16
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	031b      	lsls	r3, r3, #12
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	011b      	lsls	r3, r3, #4
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	621a      	str	r2, [r3, #32]
}
 80036d2:	bf00      	nop
 80036d4:	371c      	adds	r7, #28
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr

080036de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036de:	b480      	push	{r7}
 80036e0:	b085      	sub	sp, #20
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
 80036e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	f043 0307 	orr.w	r3, r3, #7
 8003700:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	609a      	str	r2, [r3, #8]
}
 8003708:	bf00      	nop
 800370a:	3714      	adds	r7, #20
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003714:	b480      	push	{r7}
 8003716:	b087      	sub	sp, #28
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
 8003720:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800372e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	021a      	lsls	r2, r3, #8
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	431a      	orrs	r2, r3
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	4313      	orrs	r3, r2
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	4313      	orrs	r3, r2
 8003740:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	609a      	str	r2, [r3, #8]
}
 8003748:	bf00      	nop
 800374a:	371c      	adds	r7, #28
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003754:	b480      	push	{r7}
 8003756:	b087      	sub	sp, #28
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	f003 031f 	and.w	r3, r3, #31
 8003766:	2201      	movs	r2, #1
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6a1a      	ldr	r2, [r3, #32]
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	43db      	mvns	r3, r3
 8003776:	401a      	ands	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6a1a      	ldr	r2, [r3, #32]
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	f003 031f 	and.w	r3, r3, #31
 8003786:	6879      	ldr	r1, [r7, #4]
 8003788:	fa01 f303 	lsl.w	r3, r1, r3
 800378c:	431a      	orrs	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	621a      	str	r2, [r3, #32]
}
 8003792:	bf00      	nop
 8003794:	371c      	adds	r7, #28
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
	...

080037a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d101      	bne.n	80037b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037b4:	2302      	movs	r3, #2
 80037b6:	e05a      	b.n	800386e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2202      	movs	r2, #2
 80037c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a21      	ldr	r2, [pc, #132]	; (800387c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d022      	beq.n	8003842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003804:	d01d      	beq.n	8003842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a1d      	ldr	r2, [pc, #116]	; (8003880 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d018      	beq.n	8003842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a1b      	ldr	r2, [pc, #108]	; (8003884 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d013      	beq.n	8003842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a1a      	ldr	r2, [pc, #104]	; (8003888 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d00e      	beq.n	8003842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a18      	ldr	r2, [pc, #96]	; (800388c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d009      	beq.n	8003842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a17      	ldr	r2, [pc, #92]	; (8003890 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d004      	beq.n	8003842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a15      	ldr	r2, [pc, #84]	; (8003894 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d10c      	bne.n	800385c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003848:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	68ba      	ldr	r2, [r7, #8]
 8003850:	4313      	orrs	r3, r2
 8003852:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3714      	adds	r7, #20
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	40010000 	.word	0x40010000
 8003880:	40000400 	.word	0x40000400
 8003884:	40000800 	.word	0x40000800
 8003888:	40000c00 	.word	0x40000c00
 800388c:	40010400 	.word	0x40010400
 8003890:	40014000 	.word	0x40014000
 8003894:	40001800 	.word	0x40001800

08003898 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e03f      	b.n	8003952 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d106      	bne.n	80038ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7fd fbd8 	bl	800109c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2224      	movs	r2, #36	; 0x24
 80038f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68da      	ldr	r2, [r3, #12]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003902:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 fba1 	bl	800404c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	691a      	ldr	r2, [r3, #16]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003918:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	695a      	ldr	r2, [r3, #20]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003928:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68da      	ldr	r2, [r3, #12]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003938:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2220      	movs	r2, #32
 8003944:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2220      	movs	r2, #32
 800394c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b088      	sub	sp, #32
 800395e:	af02      	add	r7, sp, #8
 8003960:	60f8      	str	r0, [r7, #12]
 8003962:	60b9      	str	r1, [r7, #8]
 8003964:	603b      	str	r3, [r7, #0]
 8003966:	4613      	mov	r3, r2
 8003968:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800396a:	2300      	movs	r3, #0
 800396c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b20      	cmp	r3, #32
 8003978:	f040 8083 	bne.w	8003a82 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d002      	beq.n	8003988 <HAL_UART_Transmit+0x2e>
 8003982:	88fb      	ldrh	r3, [r7, #6]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e07b      	b.n	8003a84 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003992:	2b01      	cmp	r3, #1
 8003994:	d101      	bne.n	800399a <HAL_UART_Transmit+0x40>
 8003996:	2302      	movs	r3, #2
 8003998:	e074      	b.n	8003a84 <HAL_UART_Transmit+0x12a>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2221      	movs	r2, #33	; 0x21
 80039ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80039b0:	f7fd fcf2 	bl	8001398 <HAL_GetTick>
 80039b4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	88fa      	ldrh	r2, [r7, #6]
 80039ba:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	88fa      	ldrh	r2, [r7, #6]
 80039c0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80039ca:	e042      	b.n	8003a52 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	3b01      	subs	r3, #1
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039e2:	d122      	bne.n	8003a2a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	9300      	str	r3, [sp, #0]
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	2200      	movs	r2, #0
 80039ec:	2180      	movs	r1, #128	; 0x80
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f000 f9c0 	bl	8003d74 <UART_WaitOnFlagUntilTimeout>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e042      	b.n	8003a84 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	881b      	ldrh	r3, [r3, #0]
 8003a06:	461a      	mov	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a10:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d103      	bne.n	8003a22 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	3302      	adds	r3, #2
 8003a1e:	60bb      	str	r3, [r7, #8]
 8003a20:	e017      	b.n	8003a52 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	3301      	adds	r3, #1
 8003a26:	60bb      	str	r3, [r7, #8]
 8003a28:	e013      	b.n	8003a52 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	2200      	movs	r2, #0
 8003a32:	2180      	movs	r1, #128	; 0x80
 8003a34:	68f8      	ldr	r0, [r7, #12]
 8003a36:	f000 f99d 	bl	8003d74 <UART_WaitOnFlagUntilTimeout>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d001      	beq.n	8003a44 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e01f      	b.n	8003a84 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	1c5a      	adds	r2, r3, #1
 8003a48:	60ba      	str	r2, [r7, #8]
 8003a4a:	781a      	ldrb	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1b7      	bne.n	80039cc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	9300      	str	r3, [sp, #0]
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	2200      	movs	r2, #0
 8003a64:	2140      	movs	r1, #64	; 0x40
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f000 f984 	bl	8003d74 <UART_WaitOnFlagUntilTimeout>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e006      	b.n	8003a84 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2220      	movs	r2, #32
 8003a7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	e000      	b.n	8003a84 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003a82:	2302      	movs	r3, #2
  }
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3718      	adds	r7, #24
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	4613      	mov	r3, r2
 8003a98:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b20      	cmp	r3, #32
 8003aa4:	d140      	bne.n	8003b28 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d002      	beq.n	8003ab2 <HAL_UART_Receive_IT+0x26>
 8003aac:	88fb      	ldrh	r3, [r7, #6]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e039      	b.n	8003b2a <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d101      	bne.n	8003ac4 <HAL_UART_Receive_IT+0x38>
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	e032      	b.n	8003b2a <HAL_UART_Receive_IT+0x9e>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	88fa      	ldrh	r2, [r7, #6]
 8003ad6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	88fa      	ldrh	r2, [r7, #6]
 8003adc:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2222      	movs	r2, #34	; 0x22
 8003ae8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68da      	ldr	r2, [r3, #12]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b02:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	695a      	ldr	r2, [r3, #20]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f042 0201 	orr.w	r2, r2, #1
 8003b12:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68da      	ldr	r2, [r3, #12]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f042 0220 	orr.w	r2, r2, #32
 8003b22:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003b24:	2300      	movs	r3, #0
 8003b26:	e000      	b.n	8003b2a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003b28:	2302      	movs	r3, #2
  }
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3714      	adds	r7, #20
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
	...

08003b38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b088      	sub	sp, #32
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	f003 030f 	and.w	r3, r3, #15
 8003b66:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10d      	bne.n	8003b8a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	f003 0320 	and.w	r3, r3, #32
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d008      	beq.n	8003b8a <HAL_UART_IRQHandler+0x52>
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	f003 0320 	and.w	r3, r3, #32
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d003      	beq.n	8003b8a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 f9e0 	bl	8003f48 <UART_Receive_IT>
      return;
 8003b88:	e0d0      	b.n	8003d2c <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f000 80b0 	beq.w	8003cf2 <HAL_UART_IRQHandler+0x1ba>
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	f003 0301 	and.w	r3, r3, #1
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d105      	bne.n	8003ba8 <HAL_UART_IRQHandler+0x70>
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f000 80a5 	beq.w	8003cf2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00a      	beq.n	8003bc8 <HAL_UART_IRQHandler+0x90>
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d005      	beq.n	8003bc8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc0:	f043 0201 	orr.w	r2, r3, #1
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	f003 0304 	and.w	r3, r3, #4
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00a      	beq.n	8003be8 <HAL_UART_IRQHandler+0xb0>
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	f003 0301 	and.w	r3, r3, #1
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d005      	beq.n	8003be8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be0:	f043 0202 	orr.w	r2, r3, #2
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00a      	beq.n	8003c08 <HAL_UART_IRQHandler+0xd0>
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	f003 0301 	and.w	r3, r3, #1
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d005      	beq.n	8003c08 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c00:	f043 0204 	orr.w	r2, r3, #4
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	f003 0308 	and.w	r3, r3, #8
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00f      	beq.n	8003c32 <HAL_UART_IRQHandler+0xfa>
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	f003 0320 	and.w	r3, r3, #32
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d104      	bne.n	8003c26 <HAL_UART_IRQHandler+0xee>
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d005      	beq.n	8003c32 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2a:	f043 0208 	orr.w	r2, r3, #8
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d077      	beq.n	8003d2a <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	f003 0320 	and.w	r3, r3, #32
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d007      	beq.n	8003c54 <HAL_UART_IRQHandler+0x11c>
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	f003 0320 	and.w	r3, r3, #32
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d002      	beq.n	8003c54 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f97a 	bl	8003f48 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5e:	2b40      	cmp	r3, #64	; 0x40
 8003c60:	bf0c      	ite	eq
 8003c62:	2301      	moveq	r3, #1
 8003c64:	2300      	movne	r3, #0
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c6e:	f003 0308 	and.w	r3, r3, #8
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d102      	bne.n	8003c7c <HAL_UART_IRQHandler+0x144>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d031      	beq.n	8003ce0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 f8c3 	bl	8003e08 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	695b      	ldr	r3, [r3, #20]
 8003c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c8c:	2b40      	cmp	r3, #64	; 0x40
 8003c8e:	d123      	bne.n	8003cd8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	695a      	ldr	r2, [r3, #20]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c9e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d013      	beq.n	8003cd0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cac:	4a21      	ldr	r2, [pc, #132]	; (8003d34 <HAL_UART_IRQHandler+0x1fc>)
 8003cae:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7fd fd93 	bl	80017e0 <HAL_DMA_Abort_IT>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d016      	beq.n	8003cee <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003cca:	4610      	mov	r0, r2
 8003ccc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cce:	e00e      	b.n	8003cee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 f845 	bl	8003d60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cd6:	e00a      	b.n	8003cee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 f841 	bl	8003d60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cde:	e006      	b.n	8003cee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 f83d 	bl	8003d60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003cec:	e01d      	b.n	8003d2a <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cee:	bf00      	nop
    return;
 8003cf0:	e01b      	b.n	8003d2a <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d008      	beq.n	8003d0e <HAL_UART_IRQHandler+0x1d6>
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d003      	beq.n	8003d0e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 f8b0 	bl	8003e6c <UART_Transmit_IT>
    return;
 8003d0c:	e00e      	b.n	8003d2c <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d009      	beq.n	8003d2c <HAL_UART_IRQHandler+0x1f4>
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d004      	beq.n	8003d2c <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f8f8 	bl	8003f18 <UART_EndTransmit_IT>
    return;
 8003d28:	e000      	b.n	8003d2c <HAL_UART_IRQHandler+0x1f4>
    return;
 8003d2a:	bf00      	nop
  }
}
 8003d2c:	3720      	adds	r7, #32
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	08003e45 	.word	0x08003e45

08003d38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	603b      	str	r3, [r7, #0]
 8003d80:	4613      	mov	r3, r2
 8003d82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d84:	e02c      	b.n	8003de0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d8c:	d028      	beq.n	8003de0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d007      	beq.n	8003da4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d94:	f7fd fb00 	bl	8001398 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d21d      	bcs.n	8003de0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68da      	ldr	r2, [r3, #12]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003db2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	695a      	ldr	r2, [r3, #20]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f022 0201 	bic.w	r2, r2, #1
 8003dc2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2220      	movs	r2, #32
 8003dc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e00f      	b.n	8003e00 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	4013      	ands	r3, r2
 8003dea:	68ba      	ldr	r2, [r7, #8]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	bf0c      	ite	eq
 8003df0:	2301      	moveq	r3, #1
 8003df2:	2300      	movne	r3, #0
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	461a      	mov	r2, r3
 8003df8:	79fb      	ldrb	r3, [r7, #7]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d0c3      	beq.n	8003d86 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3710      	adds	r7, #16
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68da      	ldr	r2, [r3, #12]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003e1e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	695a      	ldr	r2, [r3, #20]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 0201 	bic.w	r2, r2, #1
 8003e2e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2220      	movs	r2, #32
 8003e34:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e50:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f7ff ff7e 	bl	8003d60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e64:	bf00      	nop
 8003e66:	3710      	adds	r7, #16
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2b21      	cmp	r3, #33	; 0x21
 8003e7e:	d144      	bne.n	8003f0a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e88:	d11a      	bne.n	8003ec0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	881b      	ldrh	r3, [r3, #0]
 8003e94:	461a      	mov	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e9e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d105      	bne.n	8003eb4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
 8003eac:	1c9a      	adds	r2, r3, #2
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	621a      	str	r2, [r3, #32]
 8003eb2:	e00e      	b.n	8003ed2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a1b      	ldr	r3, [r3, #32]
 8003eb8:	1c5a      	adds	r2, r3, #1
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	621a      	str	r2, [r3, #32]
 8003ebe:	e008      	b.n	8003ed2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	1c59      	adds	r1, r3, #1
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	6211      	str	r1, [r2, #32]
 8003eca:	781a      	ldrb	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	4619      	mov	r1, r3
 8003ee0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d10f      	bne.n	8003f06 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68da      	ldr	r2, [r3, #12]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ef4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68da      	ldr	r2, [r3, #12]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f04:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003f06:	2300      	movs	r3, #0
 8003f08:	e000      	b.n	8003f0c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003f0a:	2302      	movs	r3, #2
  }
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3714      	adds	r7, #20
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68da      	ldr	r2, [r3, #12]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f2e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2220      	movs	r2, #32
 8003f34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f7ff fefd 	bl	8003d38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3708      	adds	r7, #8
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b22      	cmp	r3, #34	; 0x22
 8003f5a:	d171      	bne.n	8004040 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f64:	d123      	bne.n	8003fae <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d10e      	bne.n	8003f92 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8a:	1c9a      	adds	r2, r3, #2
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	629a      	str	r2, [r3, #40]	; 0x28
 8003f90:	e029      	b.n	8003fe6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa6:	1c5a      	adds	r2, r3, #1
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	629a      	str	r2, [r3, #40]	; 0x28
 8003fac:	e01b      	b.n	8003fe6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d10a      	bne.n	8003fcc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	6858      	ldr	r0, [r3, #4]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc0:	1c59      	adds	r1, r3, #1
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	6291      	str	r1, [r2, #40]	; 0x28
 8003fc6:	b2c2      	uxtb	r2, r0
 8003fc8:	701a      	strb	r2, [r3, #0]
 8003fca:	e00c      	b.n	8003fe6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	b2da      	uxtb	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd8:	1c58      	adds	r0, r3, #1
 8003fda:	6879      	ldr	r1, [r7, #4]
 8003fdc:	6288      	str	r0, [r1, #40]	; 0x28
 8003fde:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003fe2:	b2d2      	uxtb	r2, r2
 8003fe4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	3b01      	subs	r3, #1
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d120      	bne.n	800403c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68da      	ldr	r2, [r3, #12]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 0220 	bic.w	r2, r2, #32
 8004008:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68da      	ldr	r2, [r3, #12]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004018:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	695a      	ldr	r2, [r3, #20]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f022 0201 	bic.w	r2, r2, #1
 8004028:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2220      	movs	r2, #32
 800402e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f7ff fe8a 	bl	8003d4c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004038:	2300      	movs	r3, #0
 800403a:	e002      	b.n	8004042 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800403c:	2300      	movs	r3, #0
 800403e:	e000      	b.n	8004042 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004040:	2302      	movs	r3, #2
  }
}
 8004042:	4618      	mov	r0, r3
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
	...

0800404c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800404c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004050:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8004054:	af00      	add	r7, sp, #0
 8004056:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800405a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004066:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800406a:	68d9      	ldr	r1, [r3, #12]
 800406c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	ea40 0301 	orr.w	r3, r0, r1
 8004076:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004078:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800407c:	689a      	ldr	r2, [r3, #8]
 800407e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	431a      	orrs	r2, r3
 8004086:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	431a      	orrs	r2, r3
 800408e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004092:	69db      	ldr	r3, [r3, #28]
 8004094:	4313      	orrs	r3, r2
 8004096:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 800409a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80040a6:	f021 010c 	bic.w	r1, r1, #12
 80040aa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80040b4:	430b      	orrs	r3, r1
 80040b6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040b8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80040c4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80040c8:	6999      	ldr	r1, [r3, #24]
 80040ca:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	ea40 0301 	orr.w	r3, r0, r1
 80040d4:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040d6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80040da:	69db      	ldr	r3, [r3, #28]
 80040dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040e0:	f040 824a 	bne.w	8004578 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040e4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	4b96      	ldr	r3, [pc, #600]	; (8004344 <UART_SetConfig+0x2f8>)
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d006      	beq.n	80040fe <UART_SetConfig+0xb2>
 80040f0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	4b94      	ldr	r3, [pc, #592]	; (8004348 <UART_SetConfig+0x2fc>)
 80040f8:	429a      	cmp	r2, r3
 80040fa:	f040 8129 	bne.w	8004350 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040fe:	f7fe fc2b 	bl	8002958 <HAL_RCC_GetPCLK2Freq>
 8004102:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004106:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800410a:	2200      	movs	r2, #0
 800410c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8004110:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8004114:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8004118:	4622      	mov	r2, r4
 800411a:	462b      	mov	r3, r5
 800411c:	1891      	adds	r1, r2, r2
 800411e:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8004122:	415b      	adcs	r3, r3
 8004124:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004128:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800412c:	4621      	mov	r1, r4
 800412e:	1851      	adds	r1, r2, r1
 8004130:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8004134:	4629      	mov	r1, r5
 8004136:	414b      	adcs	r3, r1
 8004138:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800413c:	f04f 0200 	mov.w	r2, #0
 8004140:	f04f 0300 	mov.w	r3, #0
 8004144:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8004148:	4649      	mov	r1, r9
 800414a:	00cb      	lsls	r3, r1, #3
 800414c:	4641      	mov	r1, r8
 800414e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004152:	4641      	mov	r1, r8
 8004154:	00ca      	lsls	r2, r1, #3
 8004156:	4610      	mov	r0, r2
 8004158:	4619      	mov	r1, r3
 800415a:	4603      	mov	r3, r0
 800415c:	4622      	mov	r2, r4
 800415e:	189b      	adds	r3, r3, r2
 8004160:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8004164:	462b      	mov	r3, r5
 8004166:	460a      	mov	r2, r1
 8004168:	eb42 0303 	adc.w	r3, r2, r3
 800416c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8004170:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800417c:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8004180:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 8004184:	460b      	mov	r3, r1
 8004186:	18db      	adds	r3, r3, r3
 8004188:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800418c:	4613      	mov	r3, r2
 800418e:	eb42 0303 	adc.w	r3, r2, r3
 8004192:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004196:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800419a:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 800419e:	f7fc f867 	bl	8000270 <__aeabi_uldivmod>
 80041a2:	4602      	mov	r2, r0
 80041a4:	460b      	mov	r3, r1
 80041a6:	4b69      	ldr	r3, [pc, #420]	; (800434c <UART_SetConfig+0x300>)
 80041a8:	fba3 2302 	umull	r2, r3, r3, r2
 80041ac:	095b      	lsrs	r3, r3, #5
 80041ae:	011c      	lsls	r4, r3, #4
 80041b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80041b4:	2200      	movs	r2, #0
 80041b6:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 80041ba:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80041be:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 80041c2:	4642      	mov	r2, r8
 80041c4:	464b      	mov	r3, r9
 80041c6:	1891      	adds	r1, r2, r2
 80041c8:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80041cc:	415b      	adcs	r3, r3
 80041ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80041d2:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80041d6:	4641      	mov	r1, r8
 80041d8:	1851      	adds	r1, r2, r1
 80041da:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 80041de:	4649      	mov	r1, r9
 80041e0:	414b      	adcs	r3, r1
 80041e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041e6:	f04f 0200 	mov.w	r2, #0
 80041ea:	f04f 0300 	mov.w	r3, #0
 80041ee:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 80041f2:	4659      	mov	r1, fp
 80041f4:	00cb      	lsls	r3, r1, #3
 80041f6:	4651      	mov	r1, sl
 80041f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041fc:	4651      	mov	r1, sl
 80041fe:	00ca      	lsls	r2, r1, #3
 8004200:	4610      	mov	r0, r2
 8004202:	4619      	mov	r1, r3
 8004204:	4603      	mov	r3, r0
 8004206:	4642      	mov	r2, r8
 8004208:	189b      	adds	r3, r3, r2
 800420a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800420e:	464b      	mov	r3, r9
 8004210:	460a      	mov	r2, r1
 8004212:	eb42 0303 	adc.w	r3, r2, r3
 8004216:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800421a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8004226:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 800422a:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 800422e:	460b      	mov	r3, r1
 8004230:	18db      	adds	r3, r3, r3
 8004232:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004236:	4613      	mov	r3, r2
 8004238:	eb42 0303 	adc.w	r3, r2, r3
 800423c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004240:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8004244:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8004248:	f7fc f812 	bl	8000270 <__aeabi_uldivmod>
 800424c:	4602      	mov	r2, r0
 800424e:	460b      	mov	r3, r1
 8004250:	4611      	mov	r1, r2
 8004252:	4b3e      	ldr	r3, [pc, #248]	; (800434c <UART_SetConfig+0x300>)
 8004254:	fba3 2301 	umull	r2, r3, r3, r1
 8004258:	095b      	lsrs	r3, r3, #5
 800425a:	2264      	movs	r2, #100	; 0x64
 800425c:	fb02 f303 	mul.w	r3, r2, r3
 8004260:	1acb      	subs	r3, r1, r3
 8004262:	00db      	lsls	r3, r3, #3
 8004264:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004268:	4b38      	ldr	r3, [pc, #224]	; (800434c <UART_SetConfig+0x300>)
 800426a:	fba3 2302 	umull	r2, r3, r3, r2
 800426e:	095b      	lsrs	r3, r3, #5
 8004270:	005b      	lsls	r3, r3, #1
 8004272:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004276:	441c      	add	r4, r3
 8004278:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800427c:	2200      	movs	r2, #0
 800427e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004282:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8004286:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 800428a:	4642      	mov	r2, r8
 800428c:	464b      	mov	r3, r9
 800428e:	1891      	adds	r1, r2, r2
 8004290:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8004294:	415b      	adcs	r3, r3
 8004296:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800429a:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800429e:	4641      	mov	r1, r8
 80042a0:	1851      	adds	r1, r2, r1
 80042a2:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80042a6:	4649      	mov	r1, r9
 80042a8:	414b      	adcs	r3, r1
 80042aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80042ae:	f04f 0200 	mov.w	r2, #0
 80042b2:	f04f 0300 	mov.w	r3, #0
 80042b6:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 80042ba:	4659      	mov	r1, fp
 80042bc:	00cb      	lsls	r3, r1, #3
 80042be:	4651      	mov	r1, sl
 80042c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042c4:	4651      	mov	r1, sl
 80042c6:	00ca      	lsls	r2, r1, #3
 80042c8:	4610      	mov	r0, r2
 80042ca:	4619      	mov	r1, r3
 80042cc:	4603      	mov	r3, r0
 80042ce:	4642      	mov	r2, r8
 80042d0:	189b      	adds	r3, r3, r2
 80042d2:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 80042d6:	464b      	mov	r3, r9
 80042d8:	460a      	mov	r2, r1
 80042da:	eb42 0303 	adc.w	r3, r2, r3
 80042de:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80042e2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 80042ee:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 80042f2:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 80042f6:	460b      	mov	r3, r1
 80042f8:	18db      	adds	r3, r3, r3
 80042fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80042fe:	4613      	mov	r3, r2
 8004300:	eb42 0303 	adc.w	r3, r2, r3
 8004304:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004308:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800430c:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8004310:	f7fb ffae 	bl	8000270 <__aeabi_uldivmod>
 8004314:	4602      	mov	r2, r0
 8004316:	460b      	mov	r3, r1
 8004318:	4b0c      	ldr	r3, [pc, #48]	; (800434c <UART_SetConfig+0x300>)
 800431a:	fba3 1302 	umull	r1, r3, r3, r2
 800431e:	095b      	lsrs	r3, r3, #5
 8004320:	2164      	movs	r1, #100	; 0x64
 8004322:	fb01 f303 	mul.w	r3, r1, r3
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	00db      	lsls	r3, r3, #3
 800432a:	3332      	adds	r3, #50	; 0x32
 800432c:	4a07      	ldr	r2, [pc, #28]	; (800434c <UART_SetConfig+0x300>)
 800432e:	fba2 2303 	umull	r2, r3, r2, r3
 8004332:	095b      	lsrs	r3, r3, #5
 8004334:	f003 0207 	and.w	r2, r3, #7
 8004338:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4422      	add	r2, r4
 8004340:	609a      	str	r2, [r3, #8]
 8004342:	e349      	b.n	80049d8 <UART_SetConfig+0x98c>
 8004344:	40011000 	.word	0x40011000
 8004348:	40011400 	.word	0x40011400
 800434c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004350:	f7fe faee 	bl	8002930 <HAL_RCC_GetPCLK1Freq>
 8004354:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004358:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800435c:	2200      	movs	r2, #0
 800435e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8004362:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8004366:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 800436a:	4622      	mov	r2, r4
 800436c:	462b      	mov	r3, r5
 800436e:	1891      	adds	r1, r2, r2
 8004370:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8004374:	415b      	adcs	r3, r3
 8004376:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800437a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800437e:	4621      	mov	r1, r4
 8004380:	eb12 0a01 	adds.w	sl, r2, r1
 8004384:	4629      	mov	r1, r5
 8004386:	eb43 0b01 	adc.w	fp, r3, r1
 800438a:	f04f 0200 	mov.w	r2, #0
 800438e:	f04f 0300 	mov.w	r3, #0
 8004392:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004396:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800439a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800439e:	4692      	mov	sl, r2
 80043a0:	469b      	mov	fp, r3
 80043a2:	4623      	mov	r3, r4
 80043a4:	eb1a 0303 	adds.w	r3, sl, r3
 80043a8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80043ac:	462b      	mov	r3, r5
 80043ae:	eb4b 0303 	adc.w	r3, fp, r3
 80043b2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80043b6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 80043c2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80043c6:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 80043ca:	460b      	mov	r3, r1
 80043cc:	18db      	adds	r3, r3, r3
 80043ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80043d2:	4613      	mov	r3, r2
 80043d4:	eb42 0303 	adc.w	r3, r2, r3
 80043d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80043dc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80043e0:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 80043e4:	f7fb ff44 	bl	8000270 <__aeabi_uldivmod>
 80043e8:	4602      	mov	r2, r0
 80043ea:	460b      	mov	r3, r1
 80043ec:	4b61      	ldr	r3, [pc, #388]	; (8004574 <UART_SetConfig+0x528>)
 80043ee:	fba3 2302 	umull	r2, r3, r3, r2
 80043f2:	095b      	lsrs	r3, r3, #5
 80043f4:	011c      	lsls	r4, r3, #4
 80043f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80043fa:	2200      	movs	r2, #0
 80043fc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8004400:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8004404:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8004408:	4642      	mov	r2, r8
 800440a:	464b      	mov	r3, r9
 800440c:	1891      	adds	r1, r2, r2
 800440e:	67b9      	str	r1, [r7, #120]	; 0x78
 8004410:	415b      	adcs	r3, r3
 8004412:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004414:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8004418:	4641      	mov	r1, r8
 800441a:	1851      	adds	r1, r2, r1
 800441c:	6739      	str	r1, [r7, #112]	; 0x70
 800441e:	4649      	mov	r1, r9
 8004420:	414b      	adcs	r3, r1
 8004422:	677b      	str	r3, [r7, #116]	; 0x74
 8004424:	f04f 0200 	mov.w	r2, #0
 8004428:	f04f 0300 	mov.w	r3, #0
 800442c:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8004430:	4659      	mov	r1, fp
 8004432:	00cb      	lsls	r3, r1, #3
 8004434:	4651      	mov	r1, sl
 8004436:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800443a:	4651      	mov	r1, sl
 800443c:	00ca      	lsls	r2, r1, #3
 800443e:	4610      	mov	r0, r2
 8004440:	4619      	mov	r1, r3
 8004442:	4603      	mov	r3, r0
 8004444:	4642      	mov	r2, r8
 8004446:	189b      	adds	r3, r3, r2
 8004448:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800444c:	464b      	mov	r3, r9
 800444e:	460a      	mov	r2, r1
 8004450:	eb42 0303 	adc.w	r3, r2, r3
 8004454:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8004458:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004464:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8004468:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 800446c:	460b      	mov	r3, r1
 800446e:	18db      	adds	r3, r3, r3
 8004470:	66bb      	str	r3, [r7, #104]	; 0x68
 8004472:	4613      	mov	r3, r2
 8004474:	eb42 0303 	adc.w	r3, r2, r3
 8004478:	66fb      	str	r3, [r7, #108]	; 0x6c
 800447a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800447e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8004482:	f7fb fef5 	bl	8000270 <__aeabi_uldivmod>
 8004486:	4602      	mov	r2, r0
 8004488:	460b      	mov	r3, r1
 800448a:	4611      	mov	r1, r2
 800448c:	4b39      	ldr	r3, [pc, #228]	; (8004574 <UART_SetConfig+0x528>)
 800448e:	fba3 2301 	umull	r2, r3, r3, r1
 8004492:	095b      	lsrs	r3, r3, #5
 8004494:	2264      	movs	r2, #100	; 0x64
 8004496:	fb02 f303 	mul.w	r3, r2, r3
 800449a:	1acb      	subs	r3, r1, r3
 800449c:	00db      	lsls	r3, r3, #3
 800449e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80044a2:	4b34      	ldr	r3, [pc, #208]	; (8004574 <UART_SetConfig+0x528>)
 80044a4:	fba3 2302 	umull	r2, r3, r3, r2
 80044a8:	095b      	lsrs	r3, r3, #5
 80044aa:	005b      	lsls	r3, r3, #1
 80044ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80044b0:	441c      	add	r4, r3
 80044b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80044b6:	2200      	movs	r2, #0
 80044b8:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 80044bc:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80044c0:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 80044c4:	4642      	mov	r2, r8
 80044c6:	464b      	mov	r3, r9
 80044c8:	1891      	adds	r1, r2, r2
 80044ca:	6639      	str	r1, [r7, #96]	; 0x60
 80044cc:	415b      	adcs	r3, r3
 80044ce:	667b      	str	r3, [r7, #100]	; 0x64
 80044d0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80044d4:	4641      	mov	r1, r8
 80044d6:	1851      	adds	r1, r2, r1
 80044d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80044da:	4649      	mov	r1, r9
 80044dc:	414b      	adcs	r3, r1
 80044de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044e0:	f04f 0200 	mov.w	r2, #0
 80044e4:	f04f 0300 	mov.w	r3, #0
 80044e8:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 80044ec:	4659      	mov	r1, fp
 80044ee:	00cb      	lsls	r3, r1, #3
 80044f0:	4651      	mov	r1, sl
 80044f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044f6:	4651      	mov	r1, sl
 80044f8:	00ca      	lsls	r2, r1, #3
 80044fa:	4610      	mov	r0, r2
 80044fc:	4619      	mov	r1, r3
 80044fe:	4603      	mov	r3, r0
 8004500:	4642      	mov	r2, r8
 8004502:	189b      	adds	r3, r3, r2
 8004504:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8004508:	464b      	mov	r3, r9
 800450a:	460a      	mov	r2, r1
 800450c:	eb42 0303 	adc.w	r3, r2, r3
 8004510:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8004514:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8004520:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8004524:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8004528:	460b      	mov	r3, r1
 800452a:	18db      	adds	r3, r3, r3
 800452c:	653b      	str	r3, [r7, #80]	; 0x50
 800452e:	4613      	mov	r3, r2
 8004530:	eb42 0303 	adc.w	r3, r2, r3
 8004534:	657b      	str	r3, [r7, #84]	; 0x54
 8004536:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800453a:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800453e:	f7fb fe97 	bl	8000270 <__aeabi_uldivmod>
 8004542:	4602      	mov	r2, r0
 8004544:	460b      	mov	r3, r1
 8004546:	4b0b      	ldr	r3, [pc, #44]	; (8004574 <UART_SetConfig+0x528>)
 8004548:	fba3 1302 	umull	r1, r3, r3, r2
 800454c:	095b      	lsrs	r3, r3, #5
 800454e:	2164      	movs	r1, #100	; 0x64
 8004550:	fb01 f303 	mul.w	r3, r1, r3
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	00db      	lsls	r3, r3, #3
 8004558:	3332      	adds	r3, #50	; 0x32
 800455a:	4a06      	ldr	r2, [pc, #24]	; (8004574 <UART_SetConfig+0x528>)
 800455c:	fba2 2303 	umull	r2, r3, r2, r3
 8004560:	095b      	lsrs	r3, r3, #5
 8004562:	f003 0207 	and.w	r2, r3, #7
 8004566:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4422      	add	r2, r4
 800456e:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004570:	e232      	b.n	80049d8 <UART_SetConfig+0x98c>
 8004572:	bf00      	nop
 8004574:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004578:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	4b8d      	ldr	r3, [pc, #564]	; (80047b4 <UART_SetConfig+0x768>)
 8004580:	429a      	cmp	r2, r3
 8004582:	d006      	beq.n	8004592 <UART_SetConfig+0x546>
 8004584:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	4b8b      	ldr	r3, [pc, #556]	; (80047b8 <UART_SetConfig+0x76c>)
 800458c:	429a      	cmp	r2, r3
 800458e:	f040 8117 	bne.w	80047c0 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004592:	f7fe f9e1 	bl	8002958 <HAL_RCC_GetPCLK2Freq>
 8004596:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800459a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800459e:	2200      	movs	r2, #0
 80045a0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80045a4:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 80045a8:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 80045ac:	4622      	mov	r2, r4
 80045ae:	462b      	mov	r3, r5
 80045b0:	1891      	adds	r1, r2, r2
 80045b2:	64b9      	str	r1, [r7, #72]	; 0x48
 80045b4:	415b      	adcs	r3, r3
 80045b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80045bc:	4621      	mov	r1, r4
 80045be:	eb12 0801 	adds.w	r8, r2, r1
 80045c2:	4629      	mov	r1, r5
 80045c4:	eb43 0901 	adc.w	r9, r3, r1
 80045c8:	f04f 0200 	mov.w	r2, #0
 80045cc:	f04f 0300 	mov.w	r3, #0
 80045d0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045d4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045d8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045dc:	4690      	mov	r8, r2
 80045de:	4699      	mov	r9, r3
 80045e0:	4623      	mov	r3, r4
 80045e2:	eb18 0303 	adds.w	r3, r8, r3
 80045e6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80045ea:	462b      	mov	r3, r5
 80045ec:	eb49 0303 	adc.w	r3, r9, r3
 80045f0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80045f4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004600:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8004604:	f04f 0200 	mov.w	r2, #0
 8004608:	f04f 0300 	mov.w	r3, #0
 800460c:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8004610:	4629      	mov	r1, r5
 8004612:	008b      	lsls	r3, r1, #2
 8004614:	4621      	mov	r1, r4
 8004616:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800461a:	4621      	mov	r1, r4
 800461c:	008a      	lsls	r2, r1, #2
 800461e:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8004622:	f7fb fe25 	bl	8000270 <__aeabi_uldivmod>
 8004626:	4602      	mov	r2, r0
 8004628:	460b      	mov	r3, r1
 800462a:	4b64      	ldr	r3, [pc, #400]	; (80047bc <UART_SetConfig+0x770>)
 800462c:	fba3 2302 	umull	r2, r3, r3, r2
 8004630:	095b      	lsrs	r3, r3, #5
 8004632:	011c      	lsls	r4, r3, #4
 8004634:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004638:	2200      	movs	r2, #0
 800463a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800463e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8004642:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 8004646:	4642      	mov	r2, r8
 8004648:	464b      	mov	r3, r9
 800464a:	1891      	adds	r1, r2, r2
 800464c:	6439      	str	r1, [r7, #64]	; 0x40
 800464e:	415b      	adcs	r3, r3
 8004650:	647b      	str	r3, [r7, #68]	; 0x44
 8004652:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004656:	4641      	mov	r1, r8
 8004658:	1851      	adds	r1, r2, r1
 800465a:	63b9      	str	r1, [r7, #56]	; 0x38
 800465c:	4649      	mov	r1, r9
 800465e:	414b      	adcs	r3, r1
 8004660:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004662:	f04f 0200 	mov.w	r2, #0
 8004666:	f04f 0300 	mov.w	r3, #0
 800466a:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 800466e:	4659      	mov	r1, fp
 8004670:	00cb      	lsls	r3, r1, #3
 8004672:	4651      	mov	r1, sl
 8004674:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004678:	4651      	mov	r1, sl
 800467a:	00ca      	lsls	r2, r1, #3
 800467c:	4610      	mov	r0, r2
 800467e:	4619      	mov	r1, r3
 8004680:	4603      	mov	r3, r0
 8004682:	4642      	mov	r2, r8
 8004684:	189b      	adds	r3, r3, r2
 8004686:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800468a:	464b      	mov	r3, r9
 800468c:	460a      	mov	r2, r1
 800468e:	eb42 0303 	adc.w	r3, r2, r3
 8004692:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8004696:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80046a2:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 80046a6:	f04f 0200 	mov.w	r2, #0
 80046aa:	f04f 0300 	mov.w	r3, #0
 80046ae:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 80046b2:	4649      	mov	r1, r9
 80046b4:	008b      	lsls	r3, r1, #2
 80046b6:	4641      	mov	r1, r8
 80046b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046bc:	4641      	mov	r1, r8
 80046be:	008a      	lsls	r2, r1, #2
 80046c0:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80046c4:	f7fb fdd4 	bl	8000270 <__aeabi_uldivmod>
 80046c8:	4602      	mov	r2, r0
 80046ca:	460b      	mov	r3, r1
 80046cc:	4b3b      	ldr	r3, [pc, #236]	; (80047bc <UART_SetConfig+0x770>)
 80046ce:	fba3 1302 	umull	r1, r3, r3, r2
 80046d2:	095b      	lsrs	r3, r3, #5
 80046d4:	2164      	movs	r1, #100	; 0x64
 80046d6:	fb01 f303 	mul.w	r3, r1, r3
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	011b      	lsls	r3, r3, #4
 80046de:	3332      	adds	r3, #50	; 0x32
 80046e0:	4a36      	ldr	r2, [pc, #216]	; (80047bc <UART_SetConfig+0x770>)
 80046e2:	fba2 2303 	umull	r2, r3, r2, r3
 80046e6:	095b      	lsrs	r3, r3, #5
 80046e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046ec:	441c      	add	r4, r3
 80046ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80046f2:	2200      	movs	r2, #0
 80046f4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80046f8:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 80046fc:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8004700:	4642      	mov	r2, r8
 8004702:	464b      	mov	r3, r9
 8004704:	1891      	adds	r1, r2, r2
 8004706:	6339      	str	r1, [r7, #48]	; 0x30
 8004708:	415b      	adcs	r3, r3
 800470a:	637b      	str	r3, [r7, #52]	; 0x34
 800470c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004710:	4641      	mov	r1, r8
 8004712:	1851      	adds	r1, r2, r1
 8004714:	62b9      	str	r1, [r7, #40]	; 0x28
 8004716:	4649      	mov	r1, r9
 8004718:	414b      	adcs	r3, r1
 800471a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800471c:	f04f 0200 	mov.w	r2, #0
 8004720:	f04f 0300 	mov.w	r3, #0
 8004724:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8004728:	4659      	mov	r1, fp
 800472a:	00cb      	lsls	r3, r1, #3
 800472c:	4651      	mov	r1, sl
 800472e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004732:	4651      	mov	r1, sl
 8004734:	00ca      	lsls	r2, r1, #3
 8004736:	4610      	mov	r0, r2
 8004738:	4619      	mov	r1, r3
 800473a:	4603      	mov	r3, r0
 800473c:	4642      	mov	r2, r8
 800473e:	189b      	adds	r3, r3, r2
 8004740:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004744:	464b      	mov	r3, r9
 8004746:	460a      	mov	r2, r1
 8004748:	eb42 0303 	adc.w	r3, r2, r3
 800474c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004750:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800475c:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8004760:	f04f 0200 	mov.w	r2, #0
 8004764:	f04f 0300 	mov.w	r3, #0
 8004768:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 800476c:	4649      	mov	r1, r9
 800476e:	008b      	lsls	r3, r1, #2
 8004770:	4641      	mov	r1, r8
 8004772:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004776:	4641      	mov	r1, r8
 8004778:	008a      	lsls	r2, r1, #2
 800477a:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800477e:	f7fb fd77 	bl	8000270 <__aeabi_uldivmod>
 8004782:	4602      	mov	r2, r0
 8004784:	460b      	mov	r3, r1
 8004786:	4b0d      	ldr	r3, [pc, #52]	; (80047bc <UART_SetConfig+0x770>)
 8004788:	fba3 1302 	umull	r1, r3, r3, r2
 800478c:	095b      	lsrs	r3, r3, #5
 800478e:	2164      	movs	r1, #100	; 0x64
 8004790:	fb01 f303 	mul.w	r3, r1, r3
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	011b      	lsls	r3, r3, #4
 8004798:	3332      	adds	r3, #50	; 0x32
 800479a:	4a08      	ldr	r2, [pc, #32]	; (80047bc <UART_SetConfig+0x770>)
 800479c:	fba2 2303 	umull	r2, r3, r2, r3
 80047a0:	095b      	lsrs	r3, r3, #5
 80047a2:	f003 020f 	and.w	r2, r3, #15
 80047a6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4422      	add	r2, r4
 80047ae:	609a      	str	r2, [r3, #8]
 80047b0:	e112      	b.n	80049d8 <UART_SetConfig+0x98c>
 80047b2:	bf00      	nop
 80047b4:	40011000 	.word	0x40011000
 80047b8:	40011400 	.word	0x40011400
 80047bc:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 80047c0:	f7fe f8b6 	bl	8002930 <HAL_RCC_GetPCLK1Freq>
 80047c4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80047cc:	2200      	movs	r2, #0
 80047ce:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80047d2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80047d6:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 80047da:	4642      	mov	r2, r8
 80047dc:	464b      	mov	r3, r9
 80047de:	1891      	adds	r1, r2, r2
 80047e0:	6239      	str	r1, [r7, #32]
 80047e2:	415b      	adcs	r3, r3
 80047e4:	627b      	str	r3, [r7, #36]	; 0x24
 80047e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80047ea:	4641      	mov	r1, r8
 80047ec:	1854      	adds	r4, r2, r1
 80047ee:	4649      	mov	r1, r9
 80047f0:	eb43 0501 	adc.w	r5, r3, r1
 80047f4:	f04f 0200 	mov.w	r2, #0
 80047f8:	f04f 0300 	mov.w	r3, #0
 80047fc:	00eb      	lsls	r3, r5, #3
 80047fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004802:	00e2      	lsls	r2, r4, #3
 8004804:	4614      	mov	r4, r2
 8004806:	461d      	mov	r5, r3
 8004808:	4643      	mov	r3, r8
 800480a:	18e3      	adds	r3, r4, r3
 800480c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004810:	464b      	mov	r3, r9
 8004812:	eb45 0303 	adc.w	r3, r5, r3
 8004816:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800481a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004826:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800482a:	f04f 0200 	mov.w	r2, #0
 800482e:	f04f 0300 	mov.w	r3, #0
 8004832:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8004836:	4629      	mov	r1, r5
 8004838:	008b      	lsls	r3, r1, #2
 800483a:	4621      	mov	r1, r4
 800483c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004840:	4621      	mov	r1, r4
 8004842:	008a      	lsls	r2, r1, #2
 8004844:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8004848:	f7fb fd12 	bl	8000270 <__aeabi_uldivmod>
 800484c:	4602      	mov	r2, r0
 800484e:	460b      	mov	r3, r1
 8004850:	4b64      	ldr	r3, [pc, #400]	; (80049e4 <UART_SetConfig+0x998>)
 8004852:	fba3 2302 	umull	r2, r3, r3, r2
 8004856:	095b      	lsrs	r3, r3, #5
 8004858:	011c      	lsls	r4, r3, #4
 800485a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800485e:	2200      	movs	r2, #0
 8004860:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004864:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8004868:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 800486c:	4642      	mov	r2, r8
 800486e:	464b      	mov	r3, r9
 8004870:	1891      	adds	r1, r2, r2
 8004872:	61b9      	str	r1, [r7, #24]
 8004874:	415b      	adcs	r3, r3
 8004876:	61fb      	str	r3, [r7, #28]
 8004878:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800487c:	4641      	mov	r1, r8
 800487e:	1851      	adds	r1, r2, r1
 8004880:	6139      	str	r1, [r7, #16]
 8004882:	4649      	mov	r1, r9
 8004884:	414b      	adcs	r3, r1
 8004886:	617b      	str	r3, [r7, #20]
 8004888:	f04f 0200 	mov.w	r2, #0
 800488c:	f04f 0300 	mov.w	r3, #0
 8004890:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004894:	4659      	mov	r1, fp
 8004896:	00cb      	lsls	r3, r1, #3
 8004898:	4651      	mov	r1, sl
 800489a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800489e:	4651      	mov	r1, sl
 80048a0:	00ca      	lsls	r2, r1, #3
 80048a2:	4610      	mov	r0, r2
 80048a4:	4619      	mov	r1, r3
 80048a6:	4603      	mov	r3, r0
 80048a8:	4642      	mov	r2, r8
 80048aa:	189b      	adds	r3, r3, r2
 80048ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80048b0:	464b      	mov	r3, r9
 80048b2:	460a      	mov	r2, r1
 80048b4:	eb42 0303 	adc.w	r3, r2, r3
 80048b8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80048bc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80048c8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80048cc:	f04f 0200 	mov.w	r2, #0
 80048d0:	f04f 0300 	mov.w	r3, #0
 80048d4:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 80048d8:	4649      	mov	r1, r9
 80048da:	008b      	lsls	r3, r1, #2
 80048dc:	4641      	mov	r1, r8
 80048de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048e2:	4641      	mov	r1, r8
 80048e4:	008a      	lsls	r2, r1, #2
 80048e6:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 80048ea:	f7fb fcc1 	bl	8000270 <__aeabi_uldivmod>
 80048ee:	4602      	mov	r2, r0
 80048f0:	460b      	mov	r3, r1
 80048f2:	4b3c      	ldr	r3, [pc, #240]	; (80049e4 <UART_SetConfig+0x998>)
 80048f4:	fba3 1302 	umull	r1, r3, r3, r2
 80048f8:	095b      	lsrs	r3, r3, #5
 80048fa:	2164      	movs	r1, #100	; 0x64
 80048fc:	fb01 f303 	mul.w	r3, r1, r3
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	011b      	lsls	r3, r3, #4
 8004904:	3332      	adds	r3, #50	; 0x32
 8004906:	4a37      	ldr	r2, [pc, #220]	; (80049e4 <UART_SetConfig+0x998>)
 8004908:	fba2 2303 	umull	r2, r3, r2, r3
 800490c:	095b      	lsrs	r3, r3, #5
 800490e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004912:	441c      	add	r4, r3
 8004914:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004918:	2200      	movs	r2, #0
 800491a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800491e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004922:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8004926:	4642      	mov	r2, r8
 8004928:	464b      	mov	r3, r9
 800492a:	1891      	adds	r1, r2, r2
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	415b      	adcs	r3, r3
 8004930:	60fb      	str	r3, [r7, #12]
 8004932:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004936:	4641      	mov	r1, r8
 8004938:	1851      	adds	r1, r2, r1
 800493a:	6039      	str	r1, [r7, #0]
 800493c:	4649      	mov	r1, r9
 800493e:	414b      	adcs	r3, r1
 8004940:	607b      	str	r3, [r7, #4]
 8004942:	f04f 0200 	mov.w	r2, #0
 8004946:	f04f 0300 	mov.w	r3, #0
 800494a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800494e:	4659      	mov	r1, fp
 8004950:	00cb      	lsls	r3, r1, #3
 8004952:	4651      	mov	r1, sl
 8004954:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004958:	4651      	mov	r1, sl
 800495a:	00ca      	lsls	r2, r1, #3
 800495c:	4610      	mov	r0, r2
 800495e:	4619      	mov	r1, r3
 8004960:	4603      	mov	r3, r0
 8004962:	4642      	mov	r2, r8
 8004964:	189b      	adds	r3, r3, r2
 8004966:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800496a:	464b      	mov	r3, r9
 800496c:	460a      	mov	r2, r1
 800496e:	eb42 0303 	adc.w	r3, r2, r3
 8004972:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004976:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004982:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004986:	f04f 0200 	mov.w	r2, #0
 800498a:	f04f 0300 	mov.w	r3, #0
 800498e:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8004992:	4649      	mov	r1, r9
 8004994:	008b      	lsls	r3, r1, #2
 8004996:	4641      	mov	r1, r8
 8004998:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800499c:	4641      	mov	r1, r8
 800499e:	008a      	lsls	r2, r1, #2
 80049a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80049a4:	f7fb fc64 	bl	8000270 <__aeabi_uldivmod>
 80049a8:	4602      	mov	r2, r0
 80049aa:	460b      	mov	r3, r1
 80049ac:	4b0d      	ldr	r3, [pc, #52]	; (80049e4 <UART_SetConfig+0x998>)
 80049ae:	fba3 1302 	umull	r1, r3, r3, r2
 80049b2:	095b      	lsrs	r3, r3, #5
 80049b4:	2164      	movs	r1, #100	; 0x64
 80049b6:	fb01 f303 	mul.w	r3, r1, r3
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	011b      	lsls	r3, r3, #4
 80049be:	3332      	adds	r3, #50	; 0x32
 80049c0:	4a08      	ldr	r2, [pc, #32]	; (80049e4 <UART_SetConfig+0x998>)
 80049c2:	fba2 2303 	umull	r2, r3, r2, r3
 80049c6:	095b      	lsrs	r3, r3, #5
 80049c8:	f003 020f 	and.w	r2, r3, #15
 80049cc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4422      	add	r2, r4
 80049d4:	609a      	str	r2, [r3, #8]
}
 80049d6:	e7ff      	b.n	80049d8 <UART_SetConfig+0x98c>
 80049d8:	bf00      	nop
 80049da:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80049de:	46bd      	mov	sp, r7
 80049e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049e4:	51eb851f 	.word	0x51eb851f

080049e8 <__errno>:
 80049e8:	4b01      	ldr	r3, [pc, #4]	; (80049f0 <__errno+0x8>)
 80049ea:	6818      	ldr	r0, [r3, #0]
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	2000000c 	.word	0x2000000c

080049f4 <__libc_init_array>:
 80049f4:	b570      	push	{r4, r5, r6, lr}
 80049f6:	4d0d      	ldr	r5, [pc, #52]	; (8004a2c <__libc_init_array+0x38>)
 80049f8:	4c0d      	ldr	r4, [pc, #52]	; (8004a30 <__libc_init_array+0x3c>)
 80049fa:	1b64      	subs	r4, r4, r5
 80049fc:	10a4      	asrs	r4, r4, #2
 80049fe:	2600      	movs	r6, #0
 8004a00:	42a6      	cmp	r6, r4
 8004a02:	d109      	bne.n	8004a18 <__libc_init_array+0x24>
 8004a04:	4d0b      	ldr	r5, [pc, #44]	; (8004a34 <__libc_init_array+0x40>)
 8004a06:	4c0c      	ldr	r4, [pc, #48]	; (8004a38 <__libc_init_array+0x44>)
 8004a08:	f000 ffae 	bl	8005968 <_init>
 8004a0c:	1b64      	subs	r4, r4, r5
 8004a0e:	10a4      	asrs	r4, r4, #2
 8004a10:	2600      	movs	r6, #0
 8004a12:	42a6      	cmp	r6, r4
 8004a14:	d105      	bne.n	8004a22 <__libc_init_array+0x2e>
 8004a16:	bd70      	pop	{r4, r5, r6, pc}
 8004a18:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a1c:	4798      	blx	r3
 8004a1e:	3601      	adds	r6, #1
 8004a20:	e7ee      	b.n	8004a00 <__libc_init_array+0xc>
 8004a22:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a26:	4798      	blx	r3
 8004a28:	3601      	adds	r6, #1
 8004a2a:	e7f2      	b.n	8004a12 <__libc_init_array+0x1e>
 8004a2c:	08005ab8 	.word	0x08005ab8
 8004a30:	08005ab8 	.word	0x08005ab8
 8004a34:	08005ab8 	.word	0x08005ab8
 8004a38:	08005abc 	.word	0x08005abc

08004a3c <memset>:
 8004a3c:	4402      	add	r2, r0
 8004a3e:	4603      	mov	r3, r0
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d100      	bne.n	8004a46 <memset+0xa>
 8004a44:	4770      	bx	lr
 8004a46:	f803 1b01 	strb.w	r1, [r3], #1
 8004a4a:	e7f9      	b.n	8004a40 <memset+0x4>

08004a4c <iprintf>:
 8004a4c:	b40f      	push	{r0, r1, r2, r3}
 8004a4e:	4b0a      	ldr	r3, [pc, #40]	; (8004a78 <iprintf+0x2c>)
 8004a50:	b513      	push	{r0, r1, r4, lr}
 8004a52:	681c      	ldr	r4, [r3, #0]
 8004a54:	b124      	cbz	r4, 8004a60 <iprintf+0x14>
 8004a56:	69a3      	ldr	r3, [r4, #24]
 8004a58:	b913      	cbnz	r3, 8004a60 <iprintf+0x14>
 8004a5a:	4620      	mov	r0, r4
 8004a5c:	f000 f866 	bl	8004b2c <__sinit>
 8004a60:	ab05      	add	r3, sp, #20
 8004a62:	9a04      	ldr	r2, [sp, #16]
 8004a64:	68a1      	ldr	r1, [r4, #8]
 8004a66:	9301      	str	r3, [sp, #4]
 8004a68:	4620      	mov	r0, r4
 8004a6a:	f000 f9bd 	bl	8004de8 <_vfiprintf_r>
 8004a6e:	b002      	add	sp, #8
 8004a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a74:	b004      	add	sp, #16
 8004a76:	4770      	bx	lr
 8004a78:	2000000c 	.word	0x2000000c

08004a7c <std>:
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	b510      	push	{r4, lr}
 8004a80:	4604      	mov	r4, r0
 8004a82:	e9c0 3300 	strd	r3, r3, [r0]
 8004a86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a8a:	6083      	str	r3, [r0, #8]
 8004a8c:	8181      	strh	r1, [r0, #12]
 8004a8e:	6643      	str	r3, [r0, #100]	; 0x64
 8004a90:	81c2      	strh	r2, [r0, #14]
 8004a92:	6183      	str	r3, [r0, #24]
 8004a94:	4619      	mov	r1, r3
 8004a96:	2208      	movs	r2, #8
 8004a98:	305c      	adds	r0, #92	; 0x5c
 8004a9a:	f7ff ffcf 	bl	8004a3c <memset>
 8004a9e:	4b05      	ldr	r3, [pc, #20]	; (8004ab4 <std+0x38>)
 8004aa0:	6263      	str	r3, [r4, #36]	; 0x24
 8004aa2:	4b05      	ldr	r3, [pc, #20]	; (8004ab8 <std+0x3c>)
 8004aa4:	62a3      	str	r3, [r4, #40]	; 0x28
 8004aa6:	4b05      	ldr	r3, [pc, #20]	; (8004abc <std+0x40>)
 8004aa8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004aaa:	4b05      	ldr	r3, [pc, #20]	; (8004ac0 <std+0x44>)
 8004aac:	6224      	str	r4, [r4, #32]
 8004aae:	6323      	str	r3, [r4, #48]	; 0x30
 8004ab0:	bd10      	pop	{r4, pc}
 8004ab2:	bf00      	nop
 8004ab4:	08005391 	.word	0x08005391
 8004ab8:	080053b3 	.word	0x080053b3
 8004abc:	080053eb 	.word	0x080053eb
 8004ac0:	0800540f 	.word	0x0800540f

08004ac4 <_cleanup_r>:
 8004ac4:	4901      	ldr	r1, [pc, #4]	; (8004acc <_cleanup_r+0x8>)
 8004ac6:	f000 b8af 	b.w	8004c28 <_fwalk_reent>
 8004aca:	bf00      	nop
 8004acc:	080056e9 	.word	0x080056e9

08004ad0 <__sfmoreglue>:
 8004ad0:	b570      	push	{r4, r5, r6, lr}
 8004ad2:	2268      	movs	r2, #104	; 0x68
 8004ad4:	1e4d      	subs	r5, r1, #1
 8004ad6:	4355      	muls	r5, r2
 8004ad8:	460e      	mov	r6, r1
 8004ada:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004ade:	f000 f8e5 	bl	8004cac <_malloc_r>
 8004ae2:	4604      	mov	r4, r0
 8004ae4:	b140      	cbz	r0, 8004af8 <__sfmoreglue+0x28>
 8004ae6:	2100      	movs	r1, #0
 8004ae8:	e9c0 1600 	strd	r1, r6, [r0]
 8004aec:	300c      	adds	r0, #12
 8004aee:	60a0      	str	r0, [r4, #8]
 8004af0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004af4:	f7ff ffa2 	bl	8004a3c <memset>
 8004af8:	4620      	mov	r0, r4
 8004afa:	bd70      	pop	{r4, r5, r6, pc}

08004afc <__sfp_lock_acquire>:
 8004afc:	4801      	ldr	r0, [pc, #4]	; (8004b04 <__sfp_lock_acquire+0x8>)
 8004afe:	f000 b8b3 	b.w	8004c68 <__retarget_lock_acquire_recursive>
 8004b02:	bf00      	nop
 8004b04:	200132d1 	.word	0x200132d1

08004b08 <__sfp_lock_release>:
 8004b08:	4801      	ldr	r0, [pc, #4]	; (8004b10 <__sfp_lock_release+0x8>)
 8004b0a:	f000 b8ae 	b.w	8004c6a <__retarget_lock_release_recursive>
 8004b0e:	bf00      	nop
 8004b10:	200132d1 	.word	0x200132d1

08004b14 <__sinit_lock_acquire>:
 8004b14:	4801      	ldr	r0, [pc, #4]	; (8004b1c <__sinit_lock_acquire+0x8>)
 8004b16:	f000 b8a7 	b.w	8004c68 <__retarget_lock_acquire_recursive>
 8004b1a:	bf00      	nop
 8004b1c:	200132d2 	.word	0x200132d2

08004b20 <__sinit_lock_release>:
 8004b20:	4801      	ldr	r0, [pc, #4]	; (8004b28 <__sinit_lock_release+0x8>)
 8004b22:	f000 b8a2 	b.w	8004c6a <__retarget_lock_release_recursive>
 8004b26:	bf00      	nop
 8004b28:	200132d2 	.word	0x200132d2

08004b2c <__sinit>:
 8004b2c:	b510      	push	{r4, lr}
 8004b2e:	4604      	mov	r4, r0
 8004b30:	f7ff fff0 	bl	8004b14 <__sinit_lock_acquire>
 8004b34:	69a3      	ldr	r3, [r4, #24]
 8004b36:	b11b      	cbz	r3, 8004b40 <__sinit+0x14>
 8004b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b3c:	f7ff bff0 	b.w	8004b20 <__sinit_lock_release>
 8004b40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004b44:	6523      	str	r3, [r4, #80]	; 0x50
 8004b46:	4b13      	ldr	r3, [pc, #76]	; (8004b94 <__sinit+0x68>)
 8004b48:	4a13      	ldr	r2, [pc, #76]	; (8004b98 <__sinit+0x6c>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	62a2      	str	r2, [r4, #40]	; 0x28
 8004b4e:	42a3      	cmp	r3, r4
 8004b50:	bf04      	itt	eq
 8004b52:	2301      	moveq	r3, #1
 8004b54:	61a3      	streq	r3, [r4, #24]
 8004b56:	4620      	mov	r0, r4
 8004b58:	f000 f820 	bl	8004b9c <__sfp>
 8004b5c:	6060      	str	r0, [r4, #4]
 8004b5e:	4620      	mov	r0, r4
 8004b60:	f000 f81c 	bl	8004b9c <__sfp>
 8004b64:	60a0      	str	r0, [r4, #8]
 8004b66:	4620      	mov	r0, r4
 8004b68:	f000 f818 	bl	8004b9c <__sfp>
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	60e0      	str	r0, [r4, #12]
 8004b70:	2104      	movs	r1, #4
 8004b72:	6860      	ldr	r0, [r4, #4]
 8004b74:	f7ff ff82 	bl	8004a7c <std>
 8004b78:	68a0      	ldr	r0, [r4, #8]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	2109      	movs	r1, #9
 8004b7e:	f7ff ff7d 	bl	8004a7c <std>
 8004b82:	68e0      	ldr	r0, [r4, #12]
 8004b84:	2202      	movs	r2, #2
 8004b86:	2112      	movs	r1, #18
 8004b88:	f7ff ff78 	bl	8004a7c <std>
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	61a3      	str	r3, [r4, #24]
 8004b90:	e7d2      	b.n	8004b38 <__sinit+0xc>
 8004b92:	bf00      	nop
 8004b94:	08005a18 	.word	0x08005a18
 8004b98:	08004ac5 	.word	0x08004ac5

08004b9c <__sfp>:
 8004b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b9e:	4607      	mov	r7, r0
 8004ba0:	f7ff ffac 	bl	8004afc <__sfp_lock_acquire>
 8004ba4:	4b1e      	ldr	r3, [pc, #120]	; (8004c20 <__sfp+0x84>)
 8004ba6:	681e      	ldr	r6, [r3, #0]
 8004ba8:	69b3      	ldr	r3, [r6, #24]
 8004baa:	b913      	cbnz	r3, 8004bb2 <__sfp+0x16>
 8004bac:	4630      	mov	r0, r6
 8004bae:	f7ff ffbd 	bl	8004b2c <__sinit>
 8004bb2:	3648      	adds	r6, #72	; 0x48
 8004bb4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	d503      	bpl.n	8004bc4 <__sfp+0x28>
 8004bbc:	6833      	ldr	r3, [r6, #0]
 8004bbe:	b30b      	cbz	r3, 8004c04 <__sfp+0x68>
 8004bc0:	6836      	ldr	r6, [r6, #0]
 8004bc2:	e7f7      	b.n	8004bb4 <__sfp+0x18>
 8004bc4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004bc8:	b9d5      	cbnz	r5, 8004c00 <__sfp+0x64>
 8004bca:	4b16      	ldr	r3, [pc, #88]	; (8004c24 <__sfp+0x88>)
 8004bcc:	60e3      	str	r3, [r4, #12]
 8004bce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004bd2:	6665      	str	r5, [r4, #100]	; 0x64
 8004bd4:	f000 f847 	bl	8004c66 <__retarget_lock_init_recursive>
 8004bd8:	f7ff ff96 	bl	8004b08 <__sfp_lock_release>
 8004bdc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004be0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004be4:	6025      	str	r5, [r4, #0]
 8004be6:	61a5      	str	r5, [r4, #24]
 8004be8:	2208      	movs	r2, #8
 8004bea:	4629      	mov	r1, r5
 8004bec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004bf0:	f7ff ff24 	bl	8004a3c <memset>
 8004bf4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004bf8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004bfc:	4620      	mov	r0, r4
 8004bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c00:	3468      	adds	r4, #104	; 0x68
 8004c02:	e7d9      	b.n	8004bb8 <__sfp+0x1c>
 8004c04:	2104      	movs	r1, #4
 8004c06:	4638      	mov	r0, r7
 8004c08:	f7ff ff62 	bl	8004ad0 <__sfmoreglue>
 8004c0c:	4604      	mov	r4, r0
 8004c0e:	6030      	str	r0, [r6, #0]
 8004c10:	2800      	cmp	r0, #0
 8004c12:	d1d5      	bne.n	8004bc0 <__sfp+0x24>
 8004c14:	f7ff ff78 	bl	8004b08 <__sfp_lock_release>
 8004c18:	230c      	movs	r3, #12
 8004c1a:	603b      	str	r3, [r7, #0]
 8004c1c:	e7ee      	b.n	8004bfc <__sfp+0x60>
 8004c1e:	bf00      	nop
 8004c20:	08005a18 	.word	0x08005a18
 8004c24:	ffff0001 	.word	0xffff0001

08004c28 <_fwalk_reent>:
 8004c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c2c:	4606      	mov	r6, r0
 8004c2e:	4688      	mov	r8, r1
 8004c30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004c34:	2700      	movs	r7, #0
 8004c36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c3a:	f1b9 0901 	subs.w	r9, r9, #1
 8004c3e:	d505      	bpl.n	8004c4c <_fwalk_reent+0x24>
 8004c40:	6824      	ldr	r4, [r4, #0]
 8004c42:	2c00      	cmp	r4, #0
 8004c44:	d1f7      	bne.n	8004c36 <_fwalk_reent+0xe>
 8004c46:	4638      	mov	r0, r7
 8004c48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c4c:	89ab      	ldrh	r3, [r5, #12]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d907      	bls.n	8004c62 <_fwalk_reent+0x3a>
 8004c52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c56:	3301      	adds	r3, #1
 8004c58:	d003      	beq.n	8004c62 <_fwalk_reent+0x3a>
 8004c5a:	4629      	mov	r1, r5
 8004c5c:	4630      	mov	r0, r6
 8004c5e:	47c0      	blx	r8
 8004c60:	4307      	orrs	r7, r0
 8004c62:	3568      	adds	r5, #104	; 0x68
 8004c64:	e7e9      	b.n	8004c3a <_fwalk_reent+0x12>

08004c66 <__retarget_lock_init_recursive>:
 8004c66:	4770      	bx	lr

08004c68 <__retarget_lock_acquire_recursive>:
 8004c68:	4770      	bx	lr

08004c6a <__retarget_lock_release_recursive>:
 8004c6a:	4770      	bx	lr

08004c6c <sbrk_aligned>:
 8004c6c:	b570      	push	{r4, r5, r6, lr}
 8004c6e:	4e0e      	ldr	r6, [pc, #56]	; (8004ca8 <sbrk_aligned+0x3c>)
 8004c70:	460c      	mov	r4, r1
 8004c72:	6831      	ldr	r1, [r6, #0]
 8004c74:	4605      	mov	r5, r0
 8004c76:	b911      	cbnz	r1, 8004c7e <sbrk_aligned+0x12>
 8004c78:	f000 fb7a 	bl	8005370 <_sbrk_r>
 8004c7c:	6030      	str	r0, [r6, #0]
 8004c7e:	4621      	mov	r1, r4
 8004c80:	4628      	mov	r0, r5
 8004c82:	f000 fb75 	bl	8005370 <_sbrk_r>
 8004c86:	1c43      	adds	r3, r0, #1
 8004c88:	d00a      	beq.n	8004ca0 <sbrk_aligned+0x34>
 8004c8a:	1cc4      	adds	r4, r0, #3
 8004c8c:	f024 0403 	bic.w	r4, r4, #3
 8004c90:	42a0      	cmp	r0, r4
 8004c92:	d007      	beq.n	8004ca4 <sbrk_aligned+0x38>
 8004c94:	1a21      	subs	r1, r4, r0
 8004c96:	4628      	mov	r0, r5
 8004c98:	f000 fb6a 	bl	8005370 <_sbrk_r>
 8004c9c:	3001      	adds	r0, #1
 8004c9e:	d101      	bne.n	8004ca4 <sbrk_aligned+0x38>
 8004ca0:	f04f 34ff 	mov.w	r4, #4294967295
 8004ca4:	4620      	mov	r0, r4
 8004ca6:	bd70      	pop	{r4, r5, r6, pc}
 8004ca8:	200132d8 	.word	0x200132d8

08004cac <_malloc_r>:
 8004cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cb0:	1ccd      	adds	r5, r1, #3
 8004cb2:	f025 0503 	bic.w	r5, r5, #3
 8004cb6:	3508      	adds	r5, #8
 8004cb8:	2d0c      	cmp	r5, #12
 8004cba:	bf38      	it	cc
 8004cbc:	250c      	movcc	r5, #12
 8004cbe:	2d00      	cmp	r5, #0
 8004cc0:	4607      	mov	r7, r0
 8004cc2:	db01      	blt.n	8004cc8 <_malloc_r+0x1c>
 8004cc4:	42a9      	cmp	r1, r5
 8004cc6:	d905      	bls.n	8004cd4 <_malloc_r+0x28>
 8004cc8:	230c      	movs	r3, #12
 8004cca:	603b      	str	r3, [r7, #0]
 8004ccc:	2600      	movs	r6, #0
 8004cce:	4630      	mov	r0, r6
 8004cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cd4:	4e2e      	ldr	r6, [pc, #184]	; (8004d90 <_malloc_r+0xe4>)
 8004cd6:	f000 fdbb 	bl	8005850 <__malloc_lock>
 8004cda:	6833      	ldr	r3, [r6, #0]
 8004cdc:	461c      	mov	r4, r3
 8004cde:	bb34      	cbnz	r4, 8004d2e <_malloc_r+0x82>
 8004ce0:	4629      	mov	r1, r5
 8004ce2:	4638      	mov	r0, r7
 8004ce4:	f7ff ffc2 	bl	8004c6c <sbrk_aligned>
 8004ce8:	1c43      	adds	r3, r0, #1
 8004cea:	4604      	mov	r4, r0
 8004cec:	d14d      	bne.n	8004d8a <_malloc_r+0xde>
 8004cee:	6834      	ldr	r4, [r6, #0]
 8004cf0:	4626      	mov	r6, r4
 8004cf2:	2e00      	cmp	r6, #0
 8004cf4:	d140      	bne.n	8004d78 <_malloc_r+0xcc>
 8004cf6:	6823      	ldr	r3, [r4, #0]
 8004cf8:	4631      	mov	r1, r6
 8004cfa:	4638      	mov	r0, r7
 8004cfc:	eb04 0803 	add.w	r8, r4, r3
 8004d00:	f000 fb36 	bl	8005370 <_sbrk_r>
 8004d04:	4580      	cmp	r8, r0
 8004d06:	d13a      	bne.n	8004d7e <_malloc_r+0xd2>
 8004d08:	6821      	ldr	r1, [r4, #0]
 8004d0a:	3503      	adds	r5, #3
 8004d0c:	1a6d      	subs	r5, r5, r1
 8004d0e:	f025 0503 	bic.w	r5, r5, #3
 8004d12:	3508      	adds	r5, #8
 8004d14:	2d0c      	cmp	r5, #12
 8004d16:	bf38      	it	cc
 8004d18:	250c      	movcc	r5, #12
 8004d1a:	4629      	mov	r1, r5
 8004d1c:	4638      	mov	r0, r7
 8004d1e:	f7ff ffa5 	bl	8004c6c <sbrk_aligned>
 8004d22:	3001      	adds	r0, #1
 8004d24:	d02b      	beq.n	8004d7e <_malloc_r+0xd2>
 8004d26:	6823      	ldr	r3, [r4, #0]
 8004d28:	442b      	add	r3, r5
 8004d2a:	6023      	str	r3, [r4, #0]
 8004d2c:	e00e      	b.n	8004d4c <_malloc_r+0xa0>
 8004d2e:	6822      	ldr	r2, [r4, #0]
 8004d30:	1b52      	subs	r2, r2, r5
 8004d32:	d41e      	bmi.n	8004d72 <_malloc_r+0xc6>
 8004d34:	2a0b      	cmp	r2, #11
 8004d36:	d916      	bls.n	8004d66 <_malloc_r+0xba>
 8004d38:	1961      	adds	r1, r4, r5
 8004d3a:	42a3      	cmp	r3, r4
 8004d3c:	6025      	str	r5, [r4, #0]
 8004d3e:	bf18      	it	ne
 8004d40:	6059      	strne	r1, [r3, #4]
 8004d42:	6863      	ldr	r3, [r4, #4]
 8004d44:	bf08      	it	eq
 8004d46:	6031      	streq	r1, [r6, #0]
 8004d48:	5162      	str	r2, [r4, r5]
 8004d4a:	604b      	str	r3, [r1, #4]
 8004d4c:	4638      	mov	r0, r7
 8004d4e:	f104 060b 	add.w	r6, r4, #11
 8004d52:	f000 fd83 	bl	800585c <__malloc_unlock>
 8004d56:	f026 0607 	bic.w	r6, r6, #7
 8004d5a:	1d23      	adds	r3, r4, #4
 8004d5c:	1af2      	subs	r2, r6, r3
 8004d5e:	d0b6      	beq.n	8004cce <_malloc_r+0x22>
 8004d60:	1b9b      	subs	r3, r3, r6
 8004d62:	50a3      	str	r3, [r4, r2]
 8004d64:	e7b3      	b.n	8004cce <_malloc_r+0x22>
 8004d66:	6862      	ldr	r2, [r4, #4]
 8004d68:	42a3      	cmp	r3, r4
 8004d6a:	bf0c      	ite	eq
 8004d6c:	6032      	streq	r2, [r6, #0]
 8004d6e:	605a      	strne	r2, [r3, #4]
 8004d70:	e7ec      	b.n	8004d4c <_malloc_r+0xa0>
 8004d72:	4623      	mov	r3, r4
 8004d74:	6864      	ldr	r4, [r4, #4]
 8004d76:	e7b2      	b.n	8004cde <_malloc_r+0x32>
 8004d78:	4634      	mov	r4, r6
 8004d7a:	6876      	ldr	r6, [r6, #4]
 8004d7c:	e7b9      	b.n	8004cf2 <_malloc_r+0x46>
 8004d7e:	230c      	movs	r3, #12
 8004d80:	603b      	str	r3, [r7, #0]
 8004d82:	4638      	mov	r0, r7
 8004d84:	f000 fd6a 	bl	800585c <__malloc_unlock>
 8004d88:	e7a1      	b.n	8004cce <_malloc_r+0x22>
 8004d8a:	6025      	str	r5, [r4, #0]
 8004d8c:	e7de      	b.n	8004d4c <_malloc_r+0xa0>
 8004d8e:	bf00      	nop
 8004d90:	200132d4 	.word	0x200132d4

08004d94 <__sfputc_r>:
 8004d94:	6893      	ldr	r3, [r2, #8]
 8004d96:	3b01      	subs	r3, #1
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	b410      	push	{r4}
 8004d9c:	6093      	str	r3, [r2, #8]
 8004d9e:	da08      	bge.n	8004db2 <__sfputc_r+0x1e>
 8004da0:	6994      	ldr	r4, [r2, #24]
 8004da2:	42a3      	cmp	r3, r4
 8004da4:	db01      	blt.n	8004daa <__sfputc_r+0x16>
 8004da6:	290a      	cmp	r1, #10
 8004da8:	d103      	bne.n	8004db2 <__sfputc_r+0x1e>
 8004daa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004dae:	f000 bb33 	b.w	8005418 <__swbuf_r>
 8004db2:	6813      	ldr	r3, [r2, #0]
 8004db4:	1c58      	adds	r0, r3, #1
 8004db6:	6010      	str	r0, [r2, #0]
 8004db8:	7019      	strb	r1, [r3, #0]
 8004dba:	4608      	mov	r0, r1
 8004dbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004dc0:	4770      	bx	lr

08004dc2 <__sfputs_r>:
 8004dc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dc4:	4606      	mov	r6, r0
 8004dc6:	460f      	mov	r7, r1
 8004dc8:	4614      	mov	r4, r2
 8004dca:	18d5      	adds	r5, r2, r3
 8004dcc:	42ac      	cmp	r4, r5
 8004dce:	d101      	bne.n	8004dd4 <__sfputs_r+0x12>
 8004dd0:	2000      	movs	r0, #0
 8004dd2:	e007      	b.n	8004de4 <__sfputs_r+0x22>
 8004dd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dd8:	463a      	mov	r2, r7
 8004dda:	4630      	mov	r0, r6
 8004ddc:	f7ff ffda 	bl	8004d94 <__sfputc_r>
 8004de0:	1c43      	adds	r3, r0, #1
 8004de2:	d1f3      	bne.n	8004dcc <__sfputs_r+0xa>
 8004de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004de8 <_vfiprintf_r>:
 8004de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dec:	460d      	mov	r5, r1
 8004dee:	b09d      	sub	sp, #116	; 0x74
 8004df0:	4614      	mov	r4, r2
 8004df2:	4698      	mov	r8, r3
 8004df4:	4606      	mov	r6, r0
 8004df6:	b118      	cbz	r0, 8004e00 <_vfiprintf_r+0x18>
 8004df8:	6983      	ldr	r3, [r0, #24]
 8004dfa:	b90b      	cbnz	r3, 8004e00 <_vfiprintf_r+0x18>
 8004dfc:	f7ff fe96 	bl	8004b2c <__sinit>
 8004e00:	4b89      	ldr	r3, [pc, #548]	; (8005028 <_vfiprintf_r+0x240>)
 8004e02:	429d      	cmp	r5, r3
 8004e04:	d11b      	bne.n	8004e3e <_vfiprintf_r+0x56>
 8004e06:	6875      	ldr	r5, [r6, #4]
 8004e08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e0a:	07d9      	lsls	r1, r3, #31
 8004e0c:	d405      	bmi.n	8004e1a <_vfiprintf_r+0x32>
 8004e0e:	89ab      	ldrh	r3, [r5, #12]
 8004e10:	059a      	lsls	r2, r3, #22
 8004e12:	d402      	bmi.n	8004e1a <_vfiprintf_r+0x32>
 8004e14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e16:	f7ff ff27 	bl	8004c68 <__retarget_lock_acquire_recursive>
 8004e1a:	89ab      	ldrh	r3, [r5, #12]
 8004e1c:	071b      	lsls	r3, r3, #28
 8004e1e:	d501      	bpl.n	8004e24 <_vfiprintf_r+0x3c>
 8004e20:	692b      	ldr	r3, [r5, #16]
 8004e22:	b9eb      	cbnz	r3, 8004e60 <_vfiprintf_r+0x78>
 8004e24:	4629      	mov	r1, r5
 8004e26:	4630      	mov	r0, r6
 8004e28:	f000 fb5a 	bl	80054e0 <__swsetup_r>
 8004e2c:	b1c0      	cbz	r0, 8004e60 <_vfiprintf_r+0x78>
 8004e2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e30:	07dc      	lsls	r4, r3, #31
 8004e32:	d50e      	bpl.n	8004e52 <_vfiprintf_r+0x6a>
 8004e34:	f04f 30ff 	mov.w	r0, #4294967295
 8004e38:	b01d      	add	sp, #116	; 0x74
 8004e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e3e:	4b7b      	ldr	r3, [pc, #492]	; (800502c <_vfiprintf_r+0x244>)
 8004e40:	429d      	cmp	r5, r3
 8004e42:	d101      	bne.n	8004e48 <_vfiprintf_r+0x60>
 8004e44:	68b5      	ldr	r5, [r6, #8]
 8004e46:	e7df      	b.n	8004e08 <_vfiprintf_r+0x20>
 8004e48:	4b79      	ldr	r3, [pc, #484]	; (8005030 <_vfiprintf_r+0x248>)
 8004e4a:	429d      	cmp	r5, r3
 8004e4c:	bf08      	it	eq
 8004e4e:	68f5      	ldreq	r5, [r6, #12]
 8004e50:	e7da      	b.n	8004e08 <_vfiprintf_r+0x20>
 8004e52:	89ab      	ldrh	r3, [r5, #12]
 8004e54:	0598      	lsls	r0, r3, #22
 8004e56:	d4ed      	bmi.n	8004e34 <_vfiprintf_r+0x4c>
 8004e58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e5a:	f7ff ff06 	bl	8004c6a <__retarget_lock_release_recursive>
 8004e5e:	e7e9      	b.n	8004e34 <_vfiprintf_r+0x4c>
 8004e60:	2300      	movs	r3, #0
 8004e62:	9309      	str	r3, [sp, #36]	; 0x24
 8004e64:	2320      	movs	r3, #32
 8004e66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e6e:	2330      	movs	r3, #48	; 0x30
 8004e70:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005034 <_vfiprintf_r+0x24c>
 8004e74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e78:	f04f 0901 	mov.w	r9, #1
 8004e7c:	4623      	mov	r3, r4
 8004e7e:	469a      	mov	sl, r3
 8004e80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e84:	b10a      	cbz	r2, 8004e8a <_vfiprintf_r+0xa2>
 8004e86:	2a25      	cmp	r2, #37	; 0x25
 8004e88:	d1f9      	bne.n	8004e7e <_vfiprintf_r+0x96>
 8004e8a:	ebba 0b04 	subs.w	fp, sl, r4
 8004e8e:	d00b      	beq.n	8004ea8 <_vfiprintf_r+0xc0>
 8004e90:	465b      	mov	r3, fp
 8004e92:	4622      	mov	r2, r4
 8004e94:	4629      	mov	r1, r5
 8004e96:	4630      	mov	r0, r6
 8004e98:	f7ff ff93 	bl	8004dc2 <__sfputs_r>
 8004e9c:	3001      	adds	r0, #1
 8004e9e:	f000 80aa 	beq.w	8004ff6 <_vfiprintf_r+0x20e>
 8004ea2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ea4:	445a      	add	r2, fp
 8004ea6:	9209      	str	r2, [sp, #36]	; 0x24
 8004ea8:	f89a 3000 	ldrb.w	r3, [sl]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f000 80a2 	beq.w	8004ff6 <_vfiprintf_r+0x20e>
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8004eb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ebc:	f10a 0a01 	add.w	sl, sl, #1
 8004ec0:	9304      	str	r3, [sp, #16]
 8004ec2:	9307      	str	r3, [sp, #28]
 8004ec4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ec8:	931a      	str	r3, [sp, #104]	; 0x68
 8004eca:	4654      	mov	r4, sl
 8004ecc:	2205      	movs	r2, #5
 8004ece:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ed2:	4858      	ldr	r0, [pc, #352]	; (8005034 <_vfiprintf_r+0x24c>)
 8004ed4:	f7fb f97c 	bl	80001d0 <memchr>
 8004ed8:	9a04      	ldr	r2, [sp, #16]
 8004eda:	b9d8      	cbnz	r0, 8004f14 <_vfiprintf_r+0x12c>
 8004edc:	06d1      	lsls	r1, r2, #27
 8004ede:	bf44      	itt	mi
 8004ee0:	2320      	movmi	r3, #32
 8004ee2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ee6:	0713      	lsls	r3, r2, #28
 8004ee8:	bf44      	itt	mi
 8004eea:	232b      	movmi	r3, #43	; 0x2b
 8004eec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ef0:	f89a 3000 	ldrb.w	r3, [sl]
 8004ef4:	2b2a      	cmp	r3, #42	; 0x2a
 8004ef6:	d015      	beq.n	8004f24 <_vfiprintf_r+0x13c>
 8004ef8:	9a07      	ldr	r2, [sp, #28]
 8004efa:	4654      	mov	r4, sl
 8004efc:	2000      	movs	r0, #0
 8004efe:	f04f 0c0a 	mov.w	ip, #10
 8004f02:	4621      	mov	r1, r4
 8004f04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f08:	3b30      	subs	r3, #48	; 0x30
 8004f0a:	2b09      	cmp	r3, #9
 8004f0c:	d94e      	bls.n	8004fac <_vfiprintf_r+0x1c4>
 8004f0e:	b1b0      	cbz	r0, 8004f3e <_vfiprintf_r+0x156>
 8004f10:	9207      	str	r2, [sp, #28]
 8004f12:	e014      	b.n	8004f3e <_vfiprintf_r+0x156>
 8004f14:	eba0 0308 	sub.w	r3, r0, r8
 8004f18:	fa09 f303 	lsl.w	r3, r9, r3
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	9304      	str	r3, [sp, #16]
 8004f20:	46a2      	mov	sl, r4
 8004f22:	e7d2      	b.n	8004eca <_vfiprintf_r+0xe2>
 8004f24:	9b03      	ldr	r3, [sp, #12]
 8004f26:	1d19      	adds	r1, r3, #4
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	9103      	str	r1, [sp, #12]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	bfbb      	ittet	lt
 8004f30:	425b      	neglt	r3, r3
 8004f32:	f042 0202 	orrlt.w	r2, r2, #2
 8004f36:	9307      	strge	r3, [sp, #28]
 8004f38:	9307      	strlt	r3, [sp, #28]
 8004f3a:	bfb8      	it	lt
 8004f3c:	9204      	strlt	r2, [sp, #16]
 8004f3e:	7823      	ldrb	r3, [r4, #0]
 8004f40:	2b2e      	cmp	r3, #46	; 0x2e
 8004f42:	d10c      	bne.n	8004f5e <_vfiprintf_r+0x176>
 8004f44:	7863      	ldrb	r3, [r4, #1]
 8004f46:	2b2a      	cmp	r3, #42	; 0x2a
 8004f48:	d135      	bne.n	8004fb6 <_vfiprintf_r+0x1ce>
 8004f4a:	9b03      	ldr	r3, [sp, #12]
 8004f4c:	1d1a      	adds	r2, r3, #4
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	9203      	str	r2, [sp, #12]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	bfb8      	it	lt
 8004f56:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f5a:	3402      	adds	r4, #2
 8004f5c:	9305      	str	r3, [sp, #20]
 8004f5e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005044 <_vfiprintf_r+0x25c>
 8004f62:	7821      	ldrb	r1, [r4, #0]
 8004f64:	2203      	movs	r2, #3
 8004f66:	4650      	mov	r0, sl
 8004f68:	f7fb f932 	bl	80001d0 <memchr>
 8004f6c:	b140      	cbz	r0, 8004f80 <_vfiprintf_r+0x198>
 8004f6e:	2340      	movs	r3, #64	; 0x40
 8004f70:	eba0 000a 	sub.w	r0, r0, sl
 8004f74:	fa03 f000 	lsl.w	r0, r3, r0
 8004f78:	9b04      	ldr	r3, [sp, #16]
 8004f7a:	4303      	orrs	r3, r0
 8004f7c:	3401      	adds	r4, #1
 8004f7e:	9304      	str	r3, [sp, #16]
 8004f80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f84:	482c      	ldr	r0, [pc, #176]	; (8005038 <_vfiprintf_r+0x250>)
 8004f86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f8a:	2206      	movs	r2, #6
 8004f8c:	f7fb f920 	bl	80001d0 <memchr>
 8004f90:	2800      	cmp	r0, #0
 8004f92:	d03f      	beq.n	8005014 <_vfiprintf_r+0x22c>
 8004f94:	4b29      	ldr	r3, [pc, #164]	; (800503c <_vfiprintf_r+0x254>)
 8004f96:	bb1b      	cbnz	r3, 8004fe0 <_vfiprintf_r+0x1f8>
 8004f98:	9b03      	ldr	r3, [sp, #12]
 8004f9a:	3307      	adds	r3, #7
 8004f9c:	f023 0307 	bic.w	r3, r3, #7
 8004fa0:	3308      	adds	r3, #8
 8004fa2:	9303      	str	r3, [sp, #12]
 8004fa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fa6:	443b      	add	r3, r7
 8004fa8:	9309      	str	r3, [sp, #36]	; 0x24
 8004faa:	e767      	b.n	8004e7c <_vfiprintf_r+0x94>
 8004fac:	fb0c 3202 	mla	r2, ip, r2, r3
 8004fb0:	460c      	mov	r4, r1
 8004fb2:	2001      	movs	r0, #1
 8004fb4:	e7a5      	b.n	8004f02 <_vfiprintf_r+0x11a>
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	3401      	adds	r4, #1
 8004fba:	9305      	str	r3, [sp, #20]
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	f04f 0c0a 	mov.w	ip, #10
 8004fc2:	4620      	mov	r0, r4
 8004fc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fc8:	3a30      	subs	r2, #48	; 0x30
 8004fca:	2a09      	cmp	r2, #9
 8004fcc:	d903      	bls.n	8004fd6 <_vfiprintf_r+0x1ee>
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d0c5      	beq.n	8004f5e <_vfiprintf_r+0x176>
 8004fd2:	9105      	str	r1, [sp, #20]
 8004fd4:	e7c3      	b.n	8004f5e <_vfiprintf_r+0x176>
 8004fd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fda:	4604      	mov	r4, r0
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e7f0      	b.n	8004fc2 <_vfiprintf_r+0x1da>
 8004fe0:	ab03      	add	r3, sp, #12
 8004fe2:	9300      	str	r3, [sp, #0]
 8004fe4:	462a      	mov	r2, r5
 8004fe6:	4b16      	ldr	r3, [pc, #88]	; (8005040 <_vfiprintf_r+0x258>)
 8004fe8:	a904      	add	r1, sp, #16
 8004fea:	4630      	mov	r0, r6
 8004fec:	f3af 8000 	nop.w
 8004ff0:	4607      	mov	r7, r0
 8004ff2:	1c78      	adds	r0, r7, #1
 8004ff4:	d1d6      	bne.n	8004fa4 <_vfiprintf_r+0x1bc>
 8004ff6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ff8:	07d9      	lsls	r1, r3, #31
 8004ffa:	d405      	bmi.n	8005008 <_vfiprintf_r+0x220>
 8004ffc:	89ab      	ldrh	r3, [r5, #12]
 8004ffe:	059a      	lsls	r2, r3, #22
 8005000:	d402      	bmi.n	8005008 <_vfiprintf_r+0x220>
 8005002:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005004:	f7ff fe31 	bl	8004c6a <__retarget_lock_release_recursive>
 8005008:	89ab      	ldrh	r3, [r5, #12]
 800500a:	065b      	lsls	r3, r3, #25
 800500c:	f53f af12 	bmi.w	8004e34 <_vfiprintf_r+0x4c>
 8005010:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005012:	e711      	b.n	8004e38 <_vfiprintf_r+0x50>
 8005014:	ab03      	add	r3, sp, #12
 8005016:	9300      	str	r3, [sp, #0]
 8005018:	462a      	mov	r2, r5
 800501a:	4b09      	ldr	r3, [pc, #36]	; (8005040 <_vfiprintf_r+0x258>)
 800501c:	a904      	add	r1, sp, #16
 800501e:	4630      	mov	r0, r6
 8005020:	f000 f880 	bl	8005124 <_printf_i>
 8005024:	e7e4      	b.n	8004ff0 <_vfiprintf_r+0x208>
 8005026:	bf00      	nop
 8005028:	08005a3c 	.word	0x08005a3c
 800502c:	08005a5c 	.word	0x08005a5c
 8005030:	08005a1c 	.word	0x08005a1c
 8005034:	08005a7c 	.word	0x08005a7c
 8005038:	08005a86 	.word	0x08005a86
 800503c:	00000000 	.word	0x00000000
 8005040:	08004dc3 	.word	0x08004dc3
 8005044:	08005a82 	.word	0x08005a82

08005048 <_printf_common>:
 8005048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800504c:	4616      	mov	r6, r2
 800504e:	4699      	mov	r9, r3
 8005050:	688a      	ldr	r2, [r1, #8]
 8005052:	690b      	ldr	r3, [r1, #16]
 8005054:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005058:	4293      	cmp	r3, r2
 800505a:	bfb8      	it	lt
 800505c:	4613      	movlt	r3, r2
 800505e:	6033      	str	r3, [r6, #0]
 8005060:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005064:	4607      	mov	r7, r0
 8005066:	460c      	mov	r4, r1
 8005068:	b10a      	cbz	r2, 800506e <_printf_common+0x26>
 800506a:	3301      	adds	r3, #1
 800506c:	6033      	str	r3, [r6, #0]
 800506e:	6823      	ldr	r3, [r4, #0]
 8005070:	0699      	lsls	r1, r3, #26
 8005072:	bf42      	ittt	mi
 8005074:	6833      	ldrmi	r3, [r6, #0]
 8005076:	3302      	addmi	r3, #2
 8005078:	6033      	strmi	r3, [r6, #0]
 800507a:	6825      	ldr	r5, [r4, #0]
 800507c:	f015 0506 	ands.w	r5, r5, #6
 8005080:	d106      	bne.n	8005090 <_printf_common+0x48>
 8005082:	f104 0a19 	add.w	sl, r4, #25
 8005086:	68e3      	ldr	r3, [r4, #12]
 8005088:	6832      	ldr	r2, [r6, #0]
 800508a:	1a9b      	subs	r3, r3, r2
 800508c:	42ab      	cmp	r3, r5
 800508e:	dc26      	bgt.n	80050de <_printf_common+0x96>
 8005090:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005094:	1e13      	subs	r3, r2, #0
 8005096:	6822      	ldr	r2, [r4, #0]
 8005098:	bf18      	it	ne
 800509a:	2301      	movne	r3, #1
 800509c:	0692      	lsls	r2, r2, #26
 800509e:	d42b      	bmi.n	80050f8 <_printf_common+0xb0>
 80050a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050a4:	4649      	mov	r1, r9
 80050a6:	4638      	mov	r0, r7
 80050a8:	47c0      	blx	r8
 80050aa:	3001      	adds	r0, #1
 80050ac:	d01e      	beq.n	80050ec <_printf_common+0xa4>
 80050ae:	6823      	ldr	r3, [r4, #0]
 80050b0:	68e5      	ldr	r5, [r4, #12]
 80050b2:	6832      	ldr	r2, [r6, #0]
 80050b4:	f003 0306 	and.w	r3, r3, #6
 80050b8:	2b04      	cmp	r3, #4
 80050ba:	bf08      	it	eq
 80050bc:	1aad      	subeq	r5, r5, r2
 80050be:	68a3      	ldr	r3, [r4, #8]
 80050c0:	6922      	ldr	r2, [r4, #16]
 80050c2:	bf0c      	ite	eq
 80050c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050c8:	2500      	movne	r5, #0
 80050ca:	4293      	cmp	r3, r2
 80050cc:	bfc4      	itt	gt
 80050ce:	1a9b      	subgt	r3, r3, r2
 80050d0:	18ed      	addgt	r5, r5, r3
 80050d2:	2600      	movs	r6, #0
 80050d4:	341a      	adds	r4, #26
 80050d6:	42b5      	cmp	r5, r6
 80050d8:	d11a      	bne.n	8005110 <_printf_common+0xc8>
 80050da:	2000      	movs	r0, #0
 80050dc:	e008      	b.n	80050f0 <_printf_common+0xa8>
 80050de:	2301      	movs	r3, #1
 80050e0:	4652      	mov	r2, sl
 80050e2:	4649      	mov	r1, r9
 80050e4:	4638      	mov	r0, r7
 80050e6:	47c0      	blx	r8
 80050e8:	3001      	adds	r0, #1
 80050ea:	d103      	bne.n	80050f4 <_printf_common+0xac>
 80050ec:	f04f 30ff 	mov.w	r0, #4294967295
 80050f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050f4:	3501      	adds	r5, #1
 80050f6:	e7c6      	b.n	8005086 <_printf_common+0x3e>
 80050f8:	18e1      	adds	r1, r4, r3
 80050fa:	1c5a      	adds	r2, r3, #1
 80050fc:	2030      	movs	r0, #48	; 0x30
 80050fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005102:	4422      	add	r2, r4
 8005104:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005108:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800510c:	3302      	adds	r3, #2
 800510e:	e7c7      	b.n	80050a0 <_printf_common+0x58>
 8005110:	2301      	movs	r3, #1
 8005112:	4622      	mov	r2, r4
 8005114:	4649      	mov	r1, r9
 8005116:	4638      	mov	r0, r7
 8005118:	47c0      	blx	r8
 800511a:	3001      	adds	r0, #1
 800511c:	d0e6      	beq.n	80050ec <_printf_common+0xa4>
 800511e:	3601      	adds	r6, #1
 8005120:	e7d9      	b.n	80050d6 <_printf_common+0x8e>
	...

08005124 <_printf_i>:
 8005124:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005128:	7e0f      	ldrb	r7, [r1, #24]
 800512a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800512c:	2f78      	cmp	r7, #120	; 0x78
 800512e:	4691      	mov	r9, r2
 8005130:	4680      	mov	r8, r0
 8005132:	460c      	mov	r4, r1
 8005134:	469a      	mov	sl, r3
 8005136:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800513a:	d807      	bhi.n	800514c <_printf_i+0x28>
 800513c:	2f62      	cmp	r7, #98	; 0x62
 800513e:	d80a      	bhi.n	8005156 <_printf_i+0x32>
 8005140:	2f00      	cmp	r7, #0
 8005142:	f000 80d8 	beq.w	80052f6 <_printf_i+0x1d2>
 8005146:	2f58      	cmp	r7, #88	; 0x58
 8005148:	f000 80a3 	beq.w	8005292 <_printf_i+0x16e>
 800514c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005150:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005154:	e03a      	b.n	80051cc <_printf_i+0xa8>
 8005156:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800515a:	2b15      	cmp	r3, #21
 800515c:	d8f6      	bhi.n	800514c <_printf_i+0x28>
 800515e:	a101      	add	r1, pc, #4	; (adr r1, 8005164 <_printf_i+0x40>)
 8005160:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005164:	080051bd 	.word	0x080051bd
 8005168:	080051d1 	.word	0x080051d1
 800516c:	0800514d 	.word	0x0800514d
 8005170:	0800514d 	.word	0x0800514d
 8005174:	0800514d 	.word	0x0800514d
 8005178:	0800514d 	.word	0x0800514d
 800517c:	080051d1 	.word	0x080051d1
 8005180:	0800514d 	.word	0x0800514d
 8005184:	0800514d 	.word	0x0800514d
 8005188:	0800514d 	.word	0x0800514d
 800518c:	0800514d 	.word	0x0800514d
 8005190:	080052dd 	.word	0x080052dd
 8005194:	08005201 	.word	0x08005201
 8005198:	080052bf 	.word	0x080052bf
 800519c:	0800514d 	.word	0x0800514d
 80051a0:	0800514d 	.word	0x0800514d
 80051a4:	080052ff 	.word	0x080052ff
 80051a8:	0800514d 	.word	0x0800514d
 80051ac:	08005201 	.word	0x08005201
 80051b0:	0800514d 	.word	0x0800514d
 80051b4:	0800514d 	.word	0x0800514d
 80051b8:	080052c7 	.word	0x080052c7
 80051bc:	682b      	ldr	r3, [r5, #0]
 80051be:	1d1a      	adds	r2, r3, #4
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	602a      	str	r2, [r5, #0]
 80051c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051cc:	2301      	movs	r3, #1
 80051ce:	e0a3      	b.n	8005318 <_printf_i+0x1f4>
 80051d0:	6820      	ldr	r0, [r4, #0]
 80051d2:	6829      	ldr	r1, [r5, #0]
 80051d4:	0606      	lsls	r6, r0, #24
 80051d6:	f101 0304 	add.w	r3, r1, #4
 80051da:	d50a      	bpl.n	80051f2 <_printf_i+0xce>
 80051dc:	680e      	ldr	r6, [r1, #0]
 80051de:	602b      	str	r3, [r5, #0]
 80051e0:	2e00      	cmp	r6, #0
 80051e2:	da03      	bge.n	80051ec <_printf_i+0xc8>
 80051e4:	232d      	movs	r3, #45	; 0x2d
 80051e6:	4276      	negs	r6, r6
 80051e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051ec:	485e      	ldr	r0, [pc, #376]	; (8005368 <_printf_i+0x244>)
 80051ee:	230a      	movs	r3, #10
 80051f0:	e019      	b.n	8005226 <_printf_i+0x102>
 80051f2:	680e      	ldr	r6, [r1, #0]
 80051f4:	602b      	str	r3, [r5, #0]
 80051f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80051fa:	bf18      	it	ne
 80051fc:	b236      	sxthne	r6, r6
 80051fe:	e7ef      	b.n	80051e0 <_printf_i+0xbc>
 8005200:	682b      	ldr	r3, [r5, #0]
 8005202:	6820      	ldr	r0, [r4, #0]
 8005204:	1d19      	adds	r1, r3, #4
 8005206:	6029      	str	r1, [r5, #0]
 8005208:	0601      	lsls	r1, r0, #24
 800520a:	d501      	bpl.n	8005210 <_printf_i+0xec>
 800520c:	681e      	ldr	r6, [r3, #0]
 800520e:	e002      	b.n	8005216 <_printf_i+0xf2>
 8005210:	0646      	lsls	r6, r0, #25
 8005212:	d5fb      	bpl.n	800520c <_printf_i+0xe8>
 8005214:	881e      	ldrh	r6, [r3, #0]
 8005216:	4854      	ldr	r0, [pc, #336]	; (8005368 <_printf_i+0x244>)
 8005218:	2f6f      	cmp	r7, #111	; 0x6f
 800521a:	bf0c      	ite	eq
 800521c:	2308      	moveq	r3, #8
 800521e:	230a      	movne	r3, #10
 8005220:	2100      	movs	r1, #0
 8005222:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005226:	6865      	ldr	r5, [r4, #4]
 8005228:	60a5      	str	r5, [r4, #8]
 800522a:	2d00      	cmp	r5, #0
 800522c:	bfa2      	ittt	ge
 800522e:	6821      	ldrge	r1, [r4, #0]
 8005230:	f021 0104 	bicge.w	r1, r1, #4
 8005234:	6021      	strge	r1, [r4, #0]
 8005236:	b90e      	cbnz	r6, 800523c <_printf_i+0x118>
 8005238:	2d00      	cmp	r5, #0
 800523a:	d04d      	beq.n	80052d8 <_printf_i+0x1b4>
 800523c:	4615      	mov	r5, r2
 800523e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005242:	fb03 6711 	mls	r7, r3, r1, r6
 8005246:	5dc7      	ldrb	r7, [r0, r7]
 8005248:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800524c:	4637      	mov	r7, r6
 800524e:	42bb      	cmp	r3, r7
 8005250:	460e      	mov	r6, r1
 8005252:	d9f4      	bls.n	800523e <_printf_i+0x11a>
 8005254:	2b08      	cmp	r3, #8
 8005256:	d10b      	bne.n	8005270 <_printf_i+0x14c>
 8005258:	6823      	ldr	r3, [r4, #0]
 800525a:	07de      	lsls	r6, r3, #31
 800525c:	d508      	bpl.n	8005270 <_printf_i+0x14c>
 800525e:	6923      	ldr	r3, [r4, #16]
 8005260:	6861      	ldr	r1, [r4, #4]
 8005262:	4299      	cmp	r1, r3
 8005264:	bfde      	ittt	le
 8005266:	2330      	movle	r3, #48	; 0x30
 8005268:	f805 3c01 	strble.w	r3, [r5, #-1]
 800526c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005270:	1b52      	subs	r2, r2, r5
 8005272:	6122      	str	r2, [r4, #16]
 8005274:	f8cd a000 	str.w	sl, [sp]
 8005278:	464b      	mov	r3, r9
 800527a:	aa03      	add	r2, sp, #12
 800527c:	4621      	mov	r1, r4
 800527e:	4640      	mov	r0, r8
 8005280:	f7ff fee2 	bl	8005048 <_printf_common>
 8005284:	3001      	adds	r0, #1
 8005286:	d14c      	bne.n	8005322 <_printf_i+0x1fe>
 8005288:	f04f 30ff 	mov.w	r0, #4294967295
 800528c:	b004      	add	sp, #16
 800528e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005292:	4835      	ldr	r0, [pc, #212]	; (8005368 <_printf_i+0x244>)
 8005294:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005298:	6829      	ldr	r1, [r5, #0]
 800529a:	6823      	ldr	r3, [r4, #0]
 800529c:	f851 6b04 	ldr.w	r6, [r1], #4
 80052a0:	6029      	str	r1, [r5, #0]
 80052a2:	061d      	lsls	r5, r3, #24
 80052a4:	d514      	bpl.n	80052d0 <_printf_i+0x1ac>
 80052a6:	07df      	lsls	r7, r3, #31
 80052a8:	bf44      	itt	mi
 80052aa:	f043 0320 	orrmi.w	r3, r3, #32
 80052ae:	6023      	strmi	r3, [r4, #0]
 80052b0:	b91e      	cbnz	r6, 80052ba <_printf_i+0x196>
 80052b2:	6823      	ldr	r3, [r4, #0]
 80052b4:	f023 0320 	bic.w	r3, r3, #32
 80052b8:	6023      	str	r3, [r4, #0]
 80052ba:	2310      	movs	r3, #16
 80052bc:	e7b0      	b.n	8005220 <_printf_i+0xfc>
 80052be:	6823      	ldr	r3, [r4, #0]
 80052c0:	f043 0320 	orr.w	r3, r3, #32
 80052c4:	6023      	str	r3, [r4, #0]
 80052c6:	2378      	movs	r3, #120	; 0x78
 80052c8:	4828      	ldr	r0, [pc, #160]	; (800536c <_printf_i+0x248>)
 80052ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80052ce:	e7e3      	b.n	8005298 <_printf_i+0x174>
 80052d0:	0659      	lsls	r1, r3, #25
 80052d2:	bf48      	it	mi
 80052d4:	b2b6      	uxthmi	r6, r6
 80052d6:	e7e6      	b.n	80052a6 <_printf_i+0x182>
 80052d8:	4615      	mov	r5, r2
 80052da:	e7bb      	b.n	8005254 <_printf_i+0x130>
 80052dc:	682b      	ldr	r3, [r5, #0]
 80052de:	6826      	ldr	r6, [r4, #0]
 80052e0:	6961      	ldr	r1, [r4, #20]
 80052e2:	1d18      	adds	r0, r3, #4
 80052e4:	6028      	str	r0, [r5, #0]
 80052e6:	0635      	lsls	r5, r6, #24
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	d501      	bpl.n	80052f0 <_printf_i+0x1cc>
 80052ec:	6019      	str	r1, [r3, #0]
 80052ee:	e002      	b.n	80052f6 <_printf_i+0x1d2>
 80052f0:	0670      	lsls	r0, r6, #25
 80052f2:	d5fb      	bpl.n	80052ec <_printf_i+0x1c8>
 80052f4:	8019      	strh	r1, [r3, #0]
 80052f6:	2300      	movs	r3, #0
 80052f8:	6123      	str	r3, [r4, #16]
 80052fa:	4615      	mov	r5, r2
 80052fc:	e7ba      	b.n	8005274 <_printf_i+0x150>
 80052fe:	682b      	ldr	r3, [r5, #0]
 8005300:	1d1a      	adds	r2, r3, #4
 8005302:	602a      	str	r2, [r5, #0]
 8005304:	681d      	ldr	r5, [r3, #0]
 8005306:	6862      	ldr	r2, [r4, #4]
 8005308:	2100      	movs	r1, #0
 800530a:	4628      	mov	r0, r5
 800530c:	f7fa ff60 	bl	80001d0 <memchr>
 8005310:	b108      	cbz	r0, 8005316 <_printf_i+0x1f2>
 8005312:	1b40      	subs	r0, r0, r5
 8005314:	6060      	str	r0, [r4, #4]
 8005316:	6863      	ldr	r3, [r4, #4]
 8005318:	6123      	str	r3, [r4, #16]
 800531a:	2300      	movs	r3, #0
 800531c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005320:	e7a8      	b.n	8005274 <_printf_i+0x150>
 8005322:	6923      	ldr	r3, [r4, #16]
 8005324:	462a      	mov	r2, r5
 8005326:	4649      	mov	r1, r9
 8005328:	4640      	mov	r0, r8
 800532a:	47d0      	blx	sl
 800532c:	3001      	adds	r0, #1
 800532e:	d0ab      	beq.n	8005288 <_printf_i+0x164>
 8005330:	6823      	ldr	r3, [r4, #0]
 8005332:	079b      	lsls	r3, r3, #30
 8005334:	d413      	bmi.n	800535e <_printf_i+0x23a>
 8005336:	68e0      	ldr	r0, [r4, #12]
 8005338:	9b03      	ldr	r3, [sp, #12]
 800533a:	4298      	cmp	r0, r3
 800533c:	bfb8      	it	lt
 800533e:	4618      	movlt	r0, r3
 8005340:	e7a4      	b.n	800528c <_printf_i+0x168>
 8005342:	2301      	movs	r3, #1
 8005344:	4632      	mov	r2, r6
 8005346:	4649      	mov	r1, r9
 8005348:	4640      	mov	r0, r8
 800534a:	47d0      	blx	sl
 800534c:	3001      	adds	r0, #1
 800534e:	d09b      	beq.n	8005288 <_printf_i+0x164>
 8005350:	3501      	adds	r5, #1
 8005352:	68e3      	ldr	r3, [r4, #12]
 8005354:	9903      	ldr	r1, [sp, #12]
 8005356:	1a5b      	subs	r3, r3, r1
 8005358:	42ab      	cmp	r3, r5
 800535a:	dcf2      	bgt.n	8005342 <_printf_i+0x21e>
 800535c:	e7eb      	b.n	8005336 <_printf_i+0x212>
 800535e:	2500      	movs	r5, #0
 8005360:	f104 0619 	add.w	r6, r4, #25
 8005364:	e7f5      	b.n	8005352 <_printf_i+0x22e>
 8005366:	bf00      	nop
 8005368:	08005a8d 	.word	0x08005a8d
 800536c:	08005a9e 	.word	0x08005a9e

08005370 <_sbrk_r>:
 8005370:	b538      	push	{r3, r4, r5, lr}
 8005372:	4d06      	ldr	r5, [pc, #24]	; (800538c <_sbrk_r+0x1c>)
 8005374:	2300      	movs	r3, #0
 8005376:	4604      	mov	r4, r0
 8005378:	4608      	mov	r0, r1
 800537a:	602b      	str	r3, [r5, #0]
 800537c:	f7fb fcba 	bl	8000cf4 <_sbrk>
 8005380:	1c43      	adds	r3, r0, #1
 8005382:	d102      	bne.n	800538a <_sbrk_r+0x1a>
 8005384:	682b      	ldr	r3, [r5, #0]
 8005386:	b103      	cbz	r3, 800538a <_sbrk_r+0x1a>
 8005388:	6023      	str	r3, [r4, #0]
 800538a:	bd38      	pop	{r3, r4, r5, pc}
 800538c:	200132dc 	.word	0x200132dc

08005390 <__sread>:
 8005390:	b510      	push	{r4, lr}
 8005392:	460c      	mov	r4, r1
 8005394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005398:	f000 fab2 	bl	8005900 <_read_r>
 800539c:	2800      	cmp	r0, #0
 800539e:	bfab      	itete	ge
 80053a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80053a2:	89a3      	ldrhlt	r3, [r4, #12]
 80053a4:	181b      	addge	r3, r3, r0
 80053a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80053aa:	bfac      	ite	ge
 80053ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80053ae:	81a3      	strhlt	r3, [r4, #12]
 80053b0:	bd10      	pop	{r4, pc}

080053b2 <__swrite>:
 80053b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053b6:	461f      	mov	r7, r3
 80053b8:	898b      	ldrh	r3, [r1, #12]
 80053ba:	05db      	lsls	r3, r3, #23
 80053bc:	4605      	mov	r5, r0
 80053be:	460c      	mov	r4, r1
 80053c0:	4616      	mov	r6, r2
 80053c2:	d505      	bpl.n	80053d0 <__swrite+0x1e>
 80053c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053c8:	2302      	movs	r3, #2
 80053ca:	2200      	movs	r2, #0
 80053cc:	f000 f9c8 	bl	8005760 <_lseek_r>
 80053d0:	89a3      	ldrh	r3, [r4, #12]
 80053d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053da:	81a3      	strh	r3, [r4, #12]
 80053dc:	4632      	mov	r2, r6
 80053de:	463b      	mov	r3, r7
 80053e0:	4628      	mov	r0, r5
 80053e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053e6:	f000 b869 	b.w	80054bc <_write_r>

080053ea <__sseek>:
 80053ea:	b510      	push	{r4, lr}
 80053ec:	460c      	mov	r4, r1
 80053ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053f2:	f000 f9b5 	bl	8005760 <_lseek_r>
 80053f6:	1c43      	adds	r3, r0, #1
 80053f8:	89a3      	ldrh	r3, [r4, #12]
 80053fa:	bf15      	itete	ne
 80053fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80053fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005402:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005406:	81a3      	strheq	r3, [r4, #12]
 8005408:	bf18      	it	ne
 800540a:	81a3      	strhne	r3, [r4, #12]
 800540c:	bd10      	pop	{r4, pc}

0800540e <__sclose>:
 800540e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005412:	f000 b8d3 	b.w	80055bc <_close_r>
	...

08005418 <__swbuf_r>:
 8005418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800541a:	460e      	mov	r6, r1
 800541c:	4614      	mov	r4, r2
 800541e:	4605      	mov	r5, r0
 8005420:	b118      	cbz	r0, 800542a <__swbuf_r+0x12>
 8005422:	6983      	ldr	r3, [r0, #24]
 8005424:	b90b      	cbnz	r3, 800542a <__swbuf_r+0x12>
 8005426:	f7ff fb81 	bl	8004b2c <__sinit>
 800542a:	4b21      	ldr	r3, [pc, #132]	; (80054b0 <__swbuf_r+0x98>)
 800542c:	429c      	cmp	r4, r3
 800542e:	d12b      	bne.n	8005488 <__swbuf_r+0x70>
 8005430:	686c      	ldr	r4, [r5, #4]
 8005432:	69a3      	ldr	r3, [r4, #24]
 8005434:	60a3      	str	r3, [r4, #8]
 8005436:	89a3      	ldrh	r3, [r4, #12]
 8005438:	071a      	lsls	r2, r3, #28
 800543a:	d52f      	bpl.n	800549c <__swbuf_r+0x84>
 800543c:	6923      	ldr	r3, [r4, #16]
 800543e:	b36b      	cbz	r3, 800549c <__swbuf_r+0x84>
 8005440:	6923      	ldr	r3, [r4, #16]
 8005442:	6820      	ldr	r0, [r4, #0]
 8005444:	1ac0      	subs	r0, r0, r3
 8005446:	6963      	ldr	r3, [r4, #20]
 8005448:	b2f6      	uxtb	r6, r6
 800544a:	4283      	cmp	r3, r0
 800544c:	4637      	mov	r7, r6
 800544e:	dc04      	bgt.n	800545a <__swbuf_r+0x42>
 8005450:	4621      	mov	r1, r4
 8005452:	4628      	mov	r0, r5
 8005454:	f000 f948 	bl	80056e8 <_fflush_r>
 8005458:	bb30      	cbnz	r0, 80054a8 <__swbuf_r+0x90>
 800545a:	68a3      	ldr	r3, [r4, #8]
 800545c:	3b01      	subs	r3, #1
 800545e:	60a3      	str	r3, [r4, #8]
 8005460:	6823      	ldr	r3, [r4, #0]
 8005462:	1c5a      	adds	r2, r3, #1
 8005464:	6022      	str	r2, [r4, #0]
 8005466:	701e      	strb	r6, [r3, #0]
 8005468:	6963      	ldr	r3, [r4, #20]
 800546a:	3001      	adds	r0, #1
 800546c:	4283      	cmp	r3, r0
 800546e:	d004      	beq.n	800547a <__swbuf_r+0x62>
 8005470:	89a3      	ldrh	r3, [r4, #12]
 8005472:	07db      	lsls	r3, r3, #31
 8005474:	d506      	bpl.n	8005484 <__swbuf_r+0x6c>
 8005476:	2e0a      	cmp	r6, #10
 8005478:	d104      	bne.n	8005484 <__swbuf_r+0x6c>
 800547a:	4621      	mov	r1, r4
 800547c:	4628      	mov	r0, r5
 800547e:	f000 f933 	bl	80056e8 <_fflush_r>
 8005482:	b988      	cbnz	r0, 80054a8 <__swbuf_r+0x90>
 8005484:	4638      	mov	r0, r7
 8005486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005488:	4b0a      	ldr	r3, [pc, #40]	; (80054b4 <__swbuf_r+0x9c>)
 800548a:	429c      	cmp	r4, r3
 800548c:	d101      	bne.n	8005492 <__swbuf_r+0x7a>
 800548e:	68ac      	ldr	r4, [r5, #8]
 8005490:	e7cf      	b.n	8005432 <__swbuf_r+0x1a>
 8005492:	4b09      	ldr	r3, [pc, #36]	; (80054b8 <__swbuf_r+0xa0>)
 8005494:	429c      	cmp	r4, r3
 8005496:	bf08      	it	eq
 8005498:	68ec      	ldreq	r4, [r5, #12]
 800549a:	e7ca      	b.n	8005432 <__swbuf_r+0x1a>
 800549c:	4621      	mov	r1, r4
 800549e:	4628      	mov	r0, r5
 80054a0:	f000 f81e 	bl	80054e0 <__swsetup_r>
 80054a4:	2800      	cmp	r0, #0
 80054a6:	d0cb      	beq.n	8005440 <__swbuf_r+0x28>
 80054a8:	f04f 37ff 	mov.w	r7, #4294967295
 80054ac:	e7ea      	b.n	8005484 <__swbuf_r+0x6c>
 80054ae:	bf00      	nop
 80054b0:	08005a3c 	.word	0x08005a3c
 80054b4:	08005a5c 	.word	0x08005a5c
 80054b8:	08005a1c 	.word	0x08005a1c

080054bc <_write_r>:
 80054bc:	b538      	push	{r3, r4, r5, lr}
 80054be:	4d07      	ldr	r5, [pc, #28]	; (80054dc <_write_r+0x20>)
 80054c0:	4604      	mov	r4, r0
 80054c2:	4608      	mov	r0, r1
 80054c4:	4611      	mov	r1, r2
 80054c6:	2200      	movs	r2, #0
 80054c8:	602a      	str	r2, [r5, #0]
 80054ca:	461a      	mov	r2, r3
 80054cc:	f7fb fbc1 	bl	8000c52 <_write>
 80054d0:	1c43      	adds	r3, r0, #1
 80054d2:	d102      	bne.n	80054da <_write_r+0x1e>
 80054d4:	682b      	ldr	r3, [r5, #0]
 80054d6:	b103      	cbz	r3, 80054da <_write_r+0x1e>
 80054d8:	6023      	str	r3, [r4, #0]
 80054da:	bd38      	pop	{r3, r4, r5, pc}
 80054dc:	200132dc 	.word	0x200132dc

080054e0 <__swsetup_r>:
 80054e0:	4b32      	ldr	r3, [pc, #200]	; (80055ac <__swsetup_r+0xcc>)
 80054e2:	b570      	push	{r4, r5, r6, lr}
 80054e4:	681d      	ldr	r5, [r3, #0]
 80054e6:	4606      	mov	r6, r0
 80054e8:	460c      	mov	r4, r1
 80054ea:	b125      	cbz	r5, 80054f6 <__swsetup_r+0x16>
 80054ec:	69ab      	ldr	r3, [r5, #24]
 80054ee:	b913      	cbnz	r3, 80054f6 <__swsetup_r+0x16>
 80054f0:	4628      	mov	r0, r5
 80054f2:	f7ff fb1b 	bl	8004b2c <__sinit>
 80054f6:	4b2e      	ldr	r3, [pc, #184]	; (80055b0 <__swsetup_r+0xd0>)
 80054f8:	429c      	cmp	r4, r3
 80054fa:	d10f      	bne.n	800551c <__swsetup_r+0x3c>
 80054fc:	686c      	ldr	r4, [r5, #4]
 80054fe:	89a3      	ldrh	r3, [r4, #12]
 8005500:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005504:	0719      	lsls	r1, r3, #28
 8005506:	d42c      	bmi.n	8005562 <__swsetup_r+0x82>
 8005508:	06dd      	lsls	r5, r3, #27
 800550a:	d411      	bmi.n	8005530 <__swsetup_r+0x50>
 800550c:	2309      	movs	r3, #9
 800550e:	6033      	str	r3, [r6, #0]
 8005510:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005514:	81a3      	strh	r3, [r4, #12]
 8005516:	f04f 30ff 	mov.w	r0, #4294967295
 800551a:	e03e      	b.n	800559a <__swsetup_r+0xba>
 800551c:	4b25      	ldr	r3, [pc, #148]	; (80055b4 <__swsetup_r+0xd4>)
 800551e:	429c      	cmp	r4, r3
 8005520:	d101      	bne.n	8005526 <__swsetup_r+0x46>
 8005522:	68ac      	ldr	r4, [r5, #8]
 8005524:	e7eb      	b.n	80054fe <__swsetup_r+0x1e>
 8005526:	4b24      	ldr	r3, [pc, #144]	; (80055b8 <__swsetup_r+0xd8>)
 8005528:	429c      	cmp	r4, r3
 800552a:	bf08      	it	eq
 800552c:	68ec      	ldreq	r4, [r5, #12]
 800552e:	e7e6      	b.n	80054fe <__swsetup_r+0x1e>
 8005530:	0758      	lsls	r0, r3, #29
 8005532:	d512      	bpl.n	800555a <__swsetup_r+0x7a>
 8005534:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005536:	b141      	cbz	r1, 800554a <__swsetup_r+0x6a>
 8005538:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800553c:	4299      	cmp	r1, r3
 800553e:	d002      	beq.n	8005546 <__swsetup_r+0x66>
 8005540:	4630      	mov	r0, r6
 8005542:	f000 f991 	bl	8005868 <_free_r>
 8005546:	2300      	movs	r3, #0
 8005548:	6363      	str	r3, [r4, #52]	; 0x34
 800554a:	89a3      	ldrh	r3, [r4, #12]
 800554c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005550:	81a3      	strh	r3, [r4, #12]
 8005552:	2300      	movs	r3, #0
 8005554:	6063      	str	r3, [r4, #4]
 8005556:	6923      	ldr	r3, [r4, #16]
 8005558:	6023      	str	r3, [r4, #0]
 800555a:	89a3      	ldrh	r3, [r4, #12]
 800555c:	f043 0308 	orr.w	r3, r3, #8
 8005560:	81a3      	strh	r3, [r4, #12]
 8005562:	6923      	ldr	r3, [r4, #16]
 8005564:	b94b      	cbnz	r3, 800557a <__swsetup_r+0x9a>
 8005566:	89a3      	ldrh	r3, [r4, #12]
 8005568:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800556c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005570:	d003      	beq.n	800557a <__swsetup_r+0x9a>
 8005572:	4621      	mov	r1, r4
 8005574:	4630      	mov	r0, r6
 8005576:	f000 f92b 	bl	80057d0 <__smakebuf_r>
 800557a:	89a0      	ldrh	r0, [r4, #12]
 800557c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005580:	f010 0301 	ands.w	r3, r0, #1
 8005584:	d00a      	beq.n	800559c <__swsetup_r+0xbc>
 8005586:	2300      	movs	r3, #0
 8005588:	60a3      	str	r3, [r4, #8]
 800558a:	6963      	ldr	r3, [r4, #20]
 800558c:	425b      	negs	r3, r3
 800558e:	61a3      	str	r3, [r4, #24]
 8005590:	6923      	ldr	r3, [r4, #16]
 8005592:	b943      	cbnz	r3, 80055a6 <__swsetup_r+0xc6>
 8005594:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005598:	d1ba      	bne.n	8005510 <__swsetup_r+0x30>
 800559a:	bd70      	pop	{r4, r5, r6, pc}
 800559c:	0781      	lsls	r1, r0, #30
 800559e:	bf58      	it	pl
 80055a0:	6963      	ldrpl	r3, [r4, #20]
 80055a2:	60a3      	str	r3, [r4, #8]
 80055a4:	e7f4      	b.n	8005590 <__swsetup_r+0xb0>
 80055a6:	2000      	movs	r0, #0
 80055a8:	e7f7      	b.n	800559a <__swsetup_r+0xba>
 80055aa:	bf00      	nop
 80055ac:	2000000c 	.word	0x2000000c
 80055b0:	08005a3c 	.word	0x08005a3c
 80055b4:	08005a5c 	.word	0x08005a5c
 80055b8:	08005a1c 	.word	0x08005a1c

080055bc <_close_r>:
 80055bc:	b538      	push	{r3, r4, r5, lr}
 80055be:	4d06      	ldr	r5, [pc, #24]	; (80055d8 <_close_r+0x1c>)
 80055c0:	2300      	movs	r3, #0
 80055c2:	4604      	mov	r4, r0
 80055c4:	4608      	mov	r0, r1
 80055c6:	602b      	str	r3, [r5, #0]
 80055c8:	f7fb fb5f 	bl	8000c8a <_close>
 80055cc:	1c43      	adds	r3, r0, #1
 80055ce:	d102      	bne.n	80055d6 <_close_r+0x1a>
 80055d0:	682b      	ldr	r3, [r5, #0]
 80055d2:	b103      	cbz	r3, 80055d6 <_close_r+0x1a>
 80055d4:	6023      	str	r3, [r4, #0]
 80055d6:	bd38      	pop	{r3, r4, r5, pc}
 80055d8:	200132dc 	.word	0x200132dc

080055dc <__sflush_r>:
 80055dc:	898a      	ldrh	r2, [r1, #12]
 80055de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055e2:	4605      	mov	r5, r0
 80055e4:	0710      	lsls	r0, r2, #28
 80055e6:	460c      	mov	r4, r1
 80055e8:	d458      	bmi.n	800569c <__sflush_r+0xc0>
 80055ea:	684b      	ldr	r3, [r1, #4]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	dc05      	bgt.n	80055fc <__sflush_r+0x20>
 80055f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	dc02      	bgt.n	80055fc <__sflush_r+0x20>
 80055f6:	2000      	movs	r0, #0
 80055f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80055fe:	2e00      	cmp	r6, #0
 8005600:	d0f9      	beq.n	80055f6 <__sflush_r+0x1a>
 8005602:	2300      	movs	r3, #0
 8005604:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005608:	682f      	ldr	r7, [r5, #0]
 800560a:	602b      	str	r3, [r5, #0]
 800560c:	d032      	beq.n	8005674 <__sflush_r+0x98>
 800560e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005610:	89a3      	ldrh	r3, [r4, #12]
 8005612:	075a      	lsls	r2, r3, #29
 8005614:	d505      	bpl.n	8005622 <__sflush_r+0x46>
 8005616:	6863      	ldr	r3, [r4, #4]
 8005618:	1ac0      	subs	r0, r0, r3
 800561a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800561c:	b10b      	cbz	r3, 8005622 <__sflush_r+0x46>
 800561e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005620:	1ac0      	subs	r0, r0, r3
 8005622:	2300      	movs	r3, #0
 8005624:	4602      	mov	r2, r0
 8005626:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005628:	6a21      	ldr	r1, [r4, #32]
 800562a:	4628      	mov	r0, r5
 800562c:	47b0      	blx	r6
 800562e:	1c43      	adds	r3, r0, #1
 8005630:	89a3      	ldrh	r3, [r4, #12]
 8005632:	d106      	bne.n	8005642 <__sflush_r+0x66>
 8005634:	6829      	ldr	r1, [r5, #0]
 8005636:	291d      	cmp	r1, #29
 8005638:	d82c      	bhi.n	8005694 <__sflush_r+0xb8>
 800563a:	4a2a      	ldr	r2, [pc, #168]	; (80056e4 <__sflush_r+0x108>)
 800563c:	40ca      	lsrs	r2, r1
 800563e:	07d6      	lsls	r6, r2, #31
 8005640:	d528      	bpl.n	8005694 <__sflush_r+0xb8>
 8005642:	2200      	movs	r2, #0
 8005644:	6062      	str	r2, [r4, #4]
 8005646:	04d9      	lsls	r1, r3, #19
 8005648:	6922      	ldr	r2, [r4, #16]
 800564a:	6022      	str	r2, [r4, #0]
 800564c:	d504      	bpl.n	8005658 <__sflush_r+0x7c>
 800564e:	1c42      	adds	r2, r0, #1
 8005650:	d101      	bne.n	8005656 <__sflush_r+0x7a>
 8005652:	682b      	ldr	r3, [r5, #0]
 8005654:	b903      	cbnz	r3, 8005658 <__sflush_r+0x7c>
 8005656:	6560      	str	r0, [r4, #84]	; 0x54
 8005658:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800565a:	602f      	str	r7, [r5, #0]
 800565c:	2900      	cmp	r1, #0
 800565e:	d0ca      	beq.n	80055f6 <__sflush_r+0x1a>
 8005660:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005664:	4299      	cmp	r1, r3
 8005666:	d002      	beq.n	800566e <__sflush_r+0x92>
 8005668:	4628      	mov	r0, r5
 800566a:	f000 f8fd 	bl	8005868 <_free_r>
 800566e:	2000      	movs	r0, #0
 8005670:	6360      	str	r0, [r4, #52]	; 0x34
 8005672:	e7c1      	b.n	80055f8 <__sflush_r+0x1c>
 8005674:	6a21      	ldr	r1, [r4, #32]
 8005676:	2301      	movs	r3, #1
 8005678:	4628      	mov	r0, r5
 800567a:	47b0      	blx	r6
 800567c:	1c41      	adds	r1, r0, #1
 800567e:	d1c7      	bne.n	8005610 <__sflush_r+0x34>
 8005680:	682b      	ldr	r3, [r5, #0]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d0c4      	beq.n	8005610 <__sflush_r+0x34>
 8005686:	2b1d      	cmp	r3, #29
 8005688:	d001      	beq.n	800568e <__sflush_r+0xb2>
 800568a:	2b16      	cmp	r3, #22
 800568c:	d101      	bne.n	8005692 <__sflush_r+0xb6>
 800568e:	602f      	str	r7, [r5, #0]
 8005690:	e7b1      	b.n	80055f6 <__sflush_r+0x1a>
 8005692:	89a3      	ldrh	r3, [r4, #12]
 8005694:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005698:	81a3      	strh	r3, [r4, #12]
 800569a:	e7ad      	b.n	80055f8 <__sflush_r+0x1c>
 800569c:	690f      	ldr	r7, [r1, #16]
 800569e:	2f00      	cmp	r7, #0
 80056a0:	d0a9      	beq.n	80055f6 <__sflush_r+0x1a>
 80056a2:	0793      	lsls	r3, r2, #30
 80056a4:	680e      	ldr	r6, [r1, #0]
 80056a6:	bf08      	it	eq
 80056a8:	694b      	ldreq	r3, [r1, #20]
 80056aa:	600f      	str	r7, [r1, #0]
 80056ac:	bf18      	it	ne
 80056ae:	2300      	movne	r3, #0
 80056b0:	eba6 0807 	sub.w	r8, r6, r7
 80056b4:	608b      	str	r3, [r1, #8]
 80056b6:	f1b8 0f00 	cmp.w	r8, #0
 80056ba:	dd9c      	ble.n	80055f6 <__sflush_r+0x1a>
 80056bc:	6a21      	ldr	r1, [r4, #32]
 80056be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80056c0:	4643      	mov	r3, r8
 80056c2:	463a      	mov	r2, r7
 80056c4:	4628      	mov	r0, r5
 80056c6:	47b0      	blx	r6
 80056c8:	2800      	cmp	r0, #0
 80056ca:	dc06      	bgt.n	80056da <__sflush_r+0xfe>
 80056cc:	89a3      	ldrh	r3, [r4, #12]
 80056ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056d2:	81a3      	strh	r3, [r4, #12]
 80056d4:	f04f 30ff 	mov.w	r0, #4294967295
 80056d8:	e78e      	b.n	80055f8 <__sflush_r+0x1c>
 80056da:	4407      	add	r7, r0
 80056dc:	eba8 0800 	sub.w	r8, r8, r0
 80056e0:	e7e9      	b.n	80056b6 <__sflush_r+0xda>
 80056e2:	bf00      	nop
 80056e4:	20400001 	.word	0x20400001

080056e8 <_fflush_r>:
 80056e8:	b538      	push	{r3, r4, r5, lr}
 80056ea:	690b      	ldr	r3, [r1, #16]
 80056ec:	4605      	mov	r5, r0
 80056ee:	460c      	mov	r4, r1
 80056f0:	b913      	cbnz	r3, 80056f8 <_fflush_r+0x10>
 80056f2:	2500      	movs	r5, #0
 80056f4:	4628      	mov	r0, r5
 80056f6:	bd38      	pop	{r3, r4, r5, pc}
 80056f8:	b118      	cbz	r0, 8005702 <_fflush_r+0x1a>
 80056fa:	6983      	ldr	r3, [r0, #24]
 80056fc:	b90b      	cbnz	r3, 8005702 <_fflush_r+0x1a>
 80056fe:	f7ff fa15 	bl	8004b2c <__sinit>
 8005702:	4b14      	ldr	r3, [pc, #80]	; (8005754 <_fflush_r+0x6c>)
 8005704:	429c      	cmp	r4, r3
 8005706:	d11b      	bne.n	8005740 <_fflush_r+0x58>
 8005708:	686c      	ldr	r4, [r5, #4]
 800570a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d0ef      	beq.n	80056f2 <_fflush_r+0xa>
 8005712:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005714:	07d0      	lsls	r0, r2, #31
 8005716:	d404      	bmi.n	8005722 <_fflush_r+0x3a>
 8005718:	0599      	lsls	r1, r3, #22
 800571a:	d402      	bmi.n	8005722 <_fflush_r+0x3a>
 800571c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800571e:	f7ff faa3 	bl	8004c68 <__retarget_lock_acquire_recursive>
 8005722:	4628      	mov	r0, r5
 8005724:	4621      	mov	r1, r4
 8005726:	f7ff ff59 	bl	80055dc <__sflush_r>
 800572a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800572c:	07da      	lsls	r2, r3, #31
 800572e:	4605      	mov	r5, r0
 8005730:	d4e0      	bmi.n	80056f4 <_fflush_r+0xc>
 8005732:	89a3      	ldrh	r3, [r4, #12]
 8005734:	059b      	lsls	r3, r3, #22
 8005736:	d4dd      	bmi.n	80056f4 <_fflush_r+0xc>
 8005738:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800573a:	f7ff fa96 	bl	8004c6a <__retarget_lock_release_recursive>
 800573e:	e7d9      	b.n	80056f4 <_fflush_r+0xc>
 8005740:	4b05      	ldr	r3, [pc, #20]	; (8005758 <_fflush_r+0x70>)
 8005742:	429c      	cmp	r4, r3
 8005744:	d101      	bne.n	800574a <_fflush_r+0x62>
 8005746:	68ac      	ldr	r4, [r5, #8]
 8005748:	e7df      	b.n	800570a <_fflush_r+0x22>
 800574a:	4b04      	ldr	r3, [pc, #16]	; (800575c <_fflush_r+0x74>)
 800574c:	429c      	cmp	r4, r3
 800574e:	bf08      	it	eq
 8005750:	68ec      	ldreq	r4, [r5, #12]
 8005752:	e7da      	b.n	800570a <_fflush_r+0x22>
 8005754:	08005a3c 	.word	0x08005a3c
 8005758:	08005a5c 	.word	0x08005a5c
 800575c:	08005a1c 	.word	0x08005a1c

08005760 <_lseek_r>:
 8005760:	b538      	push	{r3, r4, r5, lr}
 8005762:	4d07      	ldr	r5, [pc, #28]	; (8005780 <_lseek_r+0x20>)
 8005764:	4604      	mov	r4, r0
 8005766:	4608      	mov	r0, r1
 8005768:	4611      	mov	r1, r2
 800576a:	2200      	movs	r2, #0
 800576c:	602a      	str	r2, [r5, #0]
 800576e:	461a      	mov	r2, r3
 8005770:	f7fb fab2 	bl	8000cd8 <_lseek>
 8005774:	1c43      	adds	r3, r0, #1
 8005776:	d102      	bne.n	800577e <_lseek_r+0x1e>
 8005778:	682b      	ldr	r3, [r5, #0]
 800577a:	b103      	cbz	r3, 800577e <_lseek_r+0x1e>
 800577c:	6023      	str	r3, [r4, #0]
 800577e:	bd38      	pop	{r3, r4, r5, pc}
 8005780:	200132dc 	.word	0x200132dc

08005784 <__swhatbuf_r>:
 8005784:	b570      	push	{r4, r5, r6, lr}
 8005786:	460e      	mov	r6, r1
 8005788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800578c:	2900      	cmp	r1, #0
 800578e:	b096      	sub	sp, #88	; 0x58
 8005790:	4614      	mov	r4, r2
 8005792:	461d      	mov	r5, r3
 8005794:	da08      	bge.n	80057a8 <__swhatbuf_r+0x24>
 8005796:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	602a      	str	r2, [r5, #0]
 800579e:	061a      	lsls	r2, r3, #24
 80057a0:	d410      	bmi.n	80057c4 <__swhatbuf_r+0x40>
 80057a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057a6:	e00e      	b.n	80057c6 <__swhatbuf_r+0x42>
 80057a8:	466a      	mov	r2, sp
 80057aa:	f000 f8bb 	bl	8005924 <_fstat_r>
 80057ae:	2800      	cmp	r0, #0
 80057b0:	dbf1      	blt.n	8005796 <__swhatbuf_r+0x12>
 80057b2:	9a01      	ldr	r2, [sp, #4]
 80057b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80057b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80057bc:	425a      	negs	r2, r3
 80057be:	415a      	adcs	r2, r3
 80057c0:	602a      	str	r2, [r5, #0]
 80057c2:	e7ee      	b.n	80057a2 <__swhatbuf_r+0x1e>
 80057c4:	2340      	movs	r3, #64	; 0x40
 80057c6:	2000      	movs	r0, #0
 80057c8:	6023      	str	r3, [r4, #0]
 80057ca:	b016      	add	sp, #88	; 0x58
 80057cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080057d0 <__smakebuf_r>:
 80057d0:	898b      	ldrh	r3, [r1, #12]
 80057d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80057d4:	079d      	lsls	r5, r3, #30
 80057d6:	4606      	mov	r6, r0
 80057d8:	460c      	mov	r4, r1
 80057da:	d507      	bpl.n	80057ec <__smakebuf_r+0x1c>
 80057dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80057e0:	6023      	str	r3, [r4, #0]
 80057e2:	6123      	str	r3, [r4, #16]
 80057e4:	2301      	movs	r3, #1
 80057e6:	6163      	str	r3, [r4, #20]
 80057e8:	b002      	add	sp, #8
 80057ea:	bd70      	pop	{r4, r5, r6, pc}
 80057ec:	ab01      	add	r3, sp, #4
 80057ee:	466a      	mov	r2, sp
 80057f0:	f7ff ffc8 	bl	8005784 <__swhatbuf_r>
 80057f4:	9900      	ldr	r1, [sp, #0]
 80057f6:	4605      	mov	r5, r0
 80057f8:	4630      	mov	r0, r6
 80057fa:	f7ff fa57 	bl	8004cac <_malloc_r>
 80057fe:	b948      	cbnz	r0, 8005814 <__smakebuf_r+0x44>
 8005800:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005804:	059a      	lsls	r2, r3, #22
 8005806:	d4ef      	bmi.n	80057e8 <__smakebuf_r+0x18>
 8005808:	f023 0303 	bic.w	r3, r3, #3
 800580c:	f043 0302 	orr.w	r3, r3, #2
 8005810:	81a3      	strh	r3, [r4, #12]
 8005812:	e7e3      	b.n	80057dc <__smakebuf_r+0xc>
 8005814:	4b0d      	ldr	r3, [pc, #52]	; (800584c <__smakebuf_r+0x7c>)
 8005816:	62b3      	str	r3, [r6, #40]	; 0x28
 8005818:	89a3      	ldrh	r3, [r4, #12]
 800581a:	6020      	str	r0, [r4, #0]
 800581c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005820:	81a3      	strh	r3, [r4, #12]
 8005822:	9b00      	ldr	r3, [sp, #0]
 8005824:	6163      	str	r3, [r4, #20]
 8005826:	9b01      	ldr	r3, [sp, #4]
 8005828:	6120      	str	r0, [r4, #16]
 800582a:	b15b      	cbz	r3, 8005844 <__smakebuf_r+0x74>
 800582c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005830:	4630      	mov	r0, r6
 8005832:	f000 f889 	bl	8005948 <_isatty_r>
 8005836:	b128      	cbz	r0, 8005844 <__smakebuf_r+0x74>
 8005838:	89a3      	ldrh	r3, [r4, #12]
 800583a:	f023 0303 	bic.w	r3, r3, #3
 800583e:	f043 0301 	orr.w	r3, r3, #1
 8005842:	81a3      	strh	r3, [r4, #12]
 8005844:	89a0      	ldrh	r0, [r4, #12]
 8005846:	4305      	orrs	r5, r0
 8005848:	81a5      	strh	r5, [r4, #12]
 800584a:	e7cd      	b.n	80057e8 <__smakebuf_r+0x18>
 800584c:	08004ac5 	.word	0x08004ac5

08005850 <__malloc_lock>:
 8005850:	4801      	ldr	r0, [pc, #4]	; (8005858 <__malloc_lock+0x8>)
 8005852:	f7ff ba09 	b.w	8004c68 <__retarget_lock_acquire_recursive>
 8005856:	bf00      	nop
 8005858:	200132d0 	.word	0x200132d0

0800585c <__malloc_unlock>:
 800585c:	4801      	ldr	r0, [pc, #4]	; (8005864 <__malloc_unlock+0x8>)
 800585e:	f7ff ba04 	b.w	8004c6a <__retarget_lock_release_recursive>
 8005862:	bf00      	nop
 8005864:	200132d0 	.word	0x200132d0

08005868 <_free_r>:
 8005868:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800586a:	2900      	cmp	r1, #0
 800586c:	d044      	beq.n	80058f8 <_free_r+0x90>
 800586e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005872:	9001      	str	r0, [sp, #4]
 8005874:	2b00      	cmp	r3, #0
 8005876:	f1a1 0404 	sub.w	r4, r1, #4
 800587a:	bfb8      	it	lt
 800587c:	18e4      	addlt	r4, r4, r3
 800587e:	f7ff ffe7 	bl	8005850 <__malloc_lock>
 8005882:	4a1e      	ldr	r2, [pc, #120]	; (80058fc <_free_r+0x94>)
 8005884:	9801      	ldr	r0, [sp, #4]
 8005886:	6813      	ldr	r3, [r2, #0]
 8005888:	b933      	cbnz	r3, 8005898 <_free_r+0x30>
 800588a:	6063      	str	r3, [r4, #4]
 800588c:	6014      	str	r4, [r2, #0]
 800588e:	b003      	add	sp, #12
 8005890:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005894:	f7ff bfe2 	b.w	800585c <__malloc_unlock>
 8005898:	42a3      	cmp	r3, r4
 800589a:	d908      	bls.n	80058ae <_free_r+0x46>
 800589c:	6825      	ldr	r5, [r4, #0]
 800589e:	1961      	adds	r1, r4, r5
 80058a0:	428b      	cmp	r3, r1
 80058a2:	bf01      	itttt	eq
 80058a4:	6819      	ldreq	r1, [r3, #0]
 80058a6:	685b      	ldreq	r3, [r3, #4]
 80058a8:	1949      	addeq	r1, r1, r5
 80058aa:	6021      	streq	r1, [r4, #0]
 80058ac:	e7ed      	b.n	800588a <_free_r+0x22>
 80058ae:	461a      	mov	r2, r3
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	b10b      	cbz	r3, 80058b8 <_free_r+0x50>
 80058b4:	42a3      	cmp	r3, r4
 80058b6:	d9fa      	bls.n	80058ae <_free_r+0x46>
 80058b8:	6811      	ldr	r1, [r2, #0]
 80058ba:	1855      	adds	r5, r2, r1
 80058bc:	42a5      	cmp	r5, r4
 80058be:	d10b      	bne.n	80058d8 <_free_r+0x70>
 80058c0:	6824      	ldr	r4, [r4, #0]
 80058c2:	4421      	add	r1, r4
 80058c4:	1854      	adds	r4, r2, r1
 80058c6:	42a3      	cmp	r3, r4
 80058c8:	6011      	str	r1, [r2, #0]
 80058ca:	d1e0      	bne.n	800588e <_free_r+0x26>
 80058cc:	681c      	ldr	r4, [r3, #0]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	6053      	str	r3, [r2, #4]
 80058d2:	4421      	add	r1, r4
 80058d4:	6011      	str	r1, [r2, #0]
 80058d6:	e7da      	b.n	800588e <_free_r+0x26>
 80058d8:	d902      	bls.n	80058e0 <_free_r+0x78>
 80058da:	230c      	movs	r3, #12
 80058dc:	6003      	str	r3, [r0, #0]
 80058de:	e7d6      	b.n	800588e <_free_r+0x26>
 80058e0:	6825      	ldr	r5, [r4, #0]
 80058e2:	1961      	adds	r1, r4, r5
 80058e4:	428b      	cmp	r3, r1
 80058e6:	bf04      	itt	eq
 80058e8:	6819      	ldreq	r1, [r3, #0]
 80058ea:	685b      	ldreq	r3, [r3, #4]
 80058ec:	6063      	str	r3, [r4, #4]
 80058ee:	bf04      	itt	eq
 80058f0:	1949      	addeq	r1, r1, r5
 80058f2:	6021      	streq	r1, [r4, #0]
 80058f4:	6054      	str	r4, [r2, #4]
 80058f6:	e7ca      	b.n	800588e <_free_r+0x26>
 80058f8:	b003      	add	sp, #12
 80058fa:	bd30      	pop	{r4, r5, pc}
 80058fc:	200132d4 	.word	0x200132d4

08005900 <_read_r>:
 8005900:	b538      	push	{r3, r4, r5, lr}
 8005902:	4d07      	ldr	r5, [pc, #28]	; (8005920 <_read_r+0x20>)
 8005904:	4604      	mov	r4, r0
 8005906:	4608      	mov	r0, r1
 8005908:	4611      	mov	r1, r2
 800590a:	2200      	movs	r2, #0
 800590c:	602a      	str	r2, [r5, #0]
 800590e:	461a      	mov	r2, r3
 8005910:	f7fb f982 	bl	8000c18 <_read>
 8005914:	1c43      	adds	r3, r0, #1
 8005916:	d102      	bne.n	800591e <_read_r+0x1e>
 8005918:	682b      	ldr	r3, [r5, #0]
 800591a:	b103      	cbz	r3, 800591e <_read_r+0x1e>
 800591c:	6023      	str	r3, [r4, #0]
 800591e:	bd38      	pop	{r3, r4, r5, pc}
 8005920:	200132dc 	.word	0x200132dc

08005924 <_fstat_r>:
 8005924:	b538      	push	{r3, r4, r5, lr}
 8005926:	4d07      	ldr	r5, [pc, #28]	; (8005944 <_fstat_r+0x20>)
 8005928:	2300      	movs	r3, #0
 800592a:	4604      	mov	r4, r0
 800592c:	4608      	mov	r0, r1
 800592e:	4611      	mov	r1, r2
 8005930:	602b      	str	r3, [r5, #0]
 8005932:	f7fb f9b6 	bl	8000ca2 <_fstat>
 8005936:	1c43      	adds	r3, r0, #1
 8005938:	d102      	bne.n	8005940 <_fstat_r+0x1c>
 800593a:	682b      	ldr	r3, [r5, #0]
 800593c:	b103      	cbz	r3, 8005940 <_fstat_r+0x1c>
 800593e:	6023      	str	r3, [r4, #0]
 8005940:	bd38      	pop	{r3, r4, r5, pc}
 8005942:	bf00      	nop
 8005944:	200132dc 	.word	0x200132dc

08005948 <_isatty_r>:
 8005948:	b538      	push	{r3, r4, r5, lr}
 800594a:	4d06      	ldr	r5, [pc, #24]	; (8005964 <_isatty_r+0x1c>)
 800594c:	2300      	movs	r3, #0
 800594e:	4604      	mov	r4, r0
 8005950:	4608      	mov	r0, r1
 8005952:	602b      	str	r3, [r5, #0]
 8005954:	f7fb f9b5 	bl	8000cc2 <_isatty>
 8005958:	1c43      	adds	r3, r0, #1
 800595a:	d102      	bne.n	8005962 <_isatty_r+0x1a>
 800595c:	682b      	ldr	r3, [r5, #0]
 800595e:	b103      	cbz	r3, 8005962 <_isatty_r+0x1a>
 8005960:	6023      	str	r3, [r4, #0]
 8005962:	bd38      	pop	{r3, r4, r5, pc}
 8005964:	200132dc 	.word	0x200132dc

08005968 <_init>:
 8005968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800596a:	bf00      	nop
 800596c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800596e:	bc08      	pop	{r3}
 8005970:	469e      	mov	lr, r3
 8005972:	4770      	bx	lr

08005974 <_fini>:
 8005974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005976:	bf00      	nop
 8005978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800597a:	bc08      	pop	{r3}
 800597c:	469e      	mov	lr, r3
 800597e:	4770      	bx	lr
